
FreeRTOS.elf:     file format elf32-littlenios2
FreeRTOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x018002d0

Program Header:
    LOAD off    0x00001020 vaddr 0x02010020 paddr 0x01800000 align 2**12
         filesz 0x000002d0 memsz 0x000002d0 flags r-x
    LOAD off    0x000022d0 vaddr 0x018002d0 paddr 0x018002d0 align 2**12
         filesz 0x000430b0 memsz 0x000430b0 flags r-x
    LOAD off    0x00045380 vaddr 0x01843380 paddr 0x01845218 align 2**12
         filesz 0x00001e98 memsz 0x00001e98 flags rw-
    LOAD off    0x000480b0 vaddr 0x018470b0 paddr 0x018470b0 align 2**12
         filesz 0x00000000 memsz 0x00000bd8 flags rw-
    LOAD off    0x00048000 vaddr 0x02010000 paddr 0x02010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02010000  02010000  00048000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000002d0  02010020  01800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00040068  018002d0  018002d0  000022d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003048  01840338  01840338  00042338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e98  01843380  01845218  00045380  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000bd8  018470b0  018470b0  000480b0  2**2
                  ALLOC, SMALL_DATA
  6 .tse_descriptor_memory_0 00000000  00000000  00000000  00048020  2**0
                  CONTENTS
  7 .sdram_controller_0 00000000  01847c88  01847c88  00048020  2**0
                  CONTENTS
  8 .mem_0        00000000  020102f0  020102f0  00048020  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00048020  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000016a0  00000000  00000000  00048048  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0004b619  00000000  00000000  000496e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000f975  00000000  00000000  00094d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017caa  00000000  00000000  000a4676  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000081a8  00000000  00000000  000bc320  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000adfc  00000000  00000000  000c44c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001cf2b  00000000  00000000  000cf2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000ec1f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001bf8  00000000  00000000  000ec250  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000008  00000000  00000000  000f7432  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  000f743a  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000f743f  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000f7440  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000f7441  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000f744c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000f7457  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  000f7462  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  000f7466  2**0
                  CONTENTS, READONLY
 28 .jdi          00005bf1  00000000  00000000  000f7482  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0009e723  00000000  00000000  000fd073  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02010000 l    d  .entry	00000000 .entry
02010020 l    d  .exceptions	00000000 .exceptions
018002d0 l    d  .text	00000000 .text
01840338 l    d  .rodata	00000000 .rodata
01843380 l    d  .rwdata	00000000 .rwdata
018470b0 l    d  .bss	00000000 .bss
00000000 l    d  .tse_descriptor_memory_0	00000000 .tse_descriptor_memory_0
01847c88 l    d  .sdram_controller_0	00000000 .sdram_controller_0
020102f0 l    d  .mem_0	00000000 .mem_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FreeRTOS_bsp//obj/HAL/src/crt0.o
01800318 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 port_asm.o
02010020 l       .exceptions	00000000 save_context
020100a8 l       .exceptions	00000000 save_sp_to_pxCurrentTCB
020100c0 l       .exceptions	00000000 hw_irq_test
02010178 l       .exceptions	00000000 soft_exceptions
020100d4 l       .exceptions	00000000 hw_irq_handler
020100f0 l       .exceptions	00000000 restore_context
02010198 l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
018470b0 l     O .bss	00000004 nw_ready
018470b4 l     O .bss	00000004 main_thread_handle
01800374 l     F .text	000000b0 StatusCallback
01800424 l     F .text	00000044 LinkCallback
018004b0 l     F .text	000001d0 WaitOnPHY
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
01840886 l     O .rodata	00000010 zeroes.4404
01802d74 l     F .text	000000bc __sbprintf
01840896 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01802f84 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01804ab4 l     F .text	00000008 __fp_unlock
01804ac8 l     F .text	0000019c __sinit.part.1
01804c64 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01843380 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
018437c4 l     O .rwdata	00000020 lc_ctype_charset
018437a4 l     O .rwdata	00000020 lc_message_charset
018437e4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
018408c8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0180757c l     F .text	000000fc __sprint_r.part.0
018409fc l     O .rodata	00000010 blanks.4348
018409ec l     O .rodata	00000010 zeroes.4349
01808b08 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 queue.c
0180d6b8 l     F .text	00000090 prvInitialiseNewQueue
0180d748 l     F .text	00000060 prvInitialiseMutex
0180e6b0 l     F .text	0000018c prvCopyDataToQueue
0180ea94 l     F .text	00000068 prvIsQueueFull
0180e8d8 l     F .text	00000114 prvUnlockQueue
0180e83c l     F .text	0000009c prvCopyDataFromQueue
0180e9ec l     F .text	00000060 prvIsQueueEmpty
0180e660 l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 tasks.c
01847240 l     O .bss	00000064 pxReadyTasksLists
018472a4 l     O .bss	00000014 xDelayedTaskList1
018472b8 l     O .bss	00000014 xDelayedTaskList2
018470f0 l     O .bss	00000004 pxDelayedTaskList
018470f4 l     O .bss	00000004 pxOverflowDelayedTaskList
018472cc l     O .bss	00000014 xPendingReadyList
018472e0 l     O .bss	00000014 xTasksWaitingTermination
018470f8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
018472f4 l     O .bss	00000014 xSuspendedTaskList
018470fc l     O .bss	00000004 uxCurrentNumberOfTasks
01847100 l     O .bss	00000004 xTickCount
01847104 l     O .bss	00000004 uxTopReadyPriority
01847108 l     O .bss	00000004 xSchedulerRunning
0184710c l     O .bss	00000004 xPendedTicks
01847110 l     O .bss	00000004 xYieldPending
01847114 l     O .bss	00000004 xNumOfOverflows
01847118 l     O .bss	00000004 uxTaskNumber
0184711c l     O .bss	00000004 xNextTaskUnblockTime
01847120 l     O .bss	00000004 xIdleTaskHandle
01847124 l     O .bss	00000004 uxSchedulerSuspended
0180ecf4 l     F .text	000001e4 prvInitialiseNewTask
0180eed8 l     F .text	00000118 prvAddNewTaskToReadyList
01810638 l     F .text	000000b8 prvInitialiseTaskLists
01810ac0 l     F .text	00000044 prvDeleteTCB
01810b04 l     F .text	00000054 prvResetNextTaskUnblockTime
0181181c l     F .text	000000e8 prvAddCurrentTaskToDelayedList
0180f6d8 l     F .text	0000006c prvTaskIsTaskSuspended
0181061c l     F .text	0000001c prvIdleTask
018108d8 l     F .text	00000128 prvListTasksWithinSingleList
018106f0 l     F .text	00000090 prvCheckTasksWaitingTermination
01810a00 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
01847308 l     O .bss	00000014 xActiveTimerList1
0184731c l     O .bss	00000014 xActiveTimerList2
01847128 l     O .bss	00000004 pxCurrentTimerList
0184712c l     O .bss	00000004 pxOverflowTimerList
01847130 l     O .bss	00000004 xTimerQueue
01847134 l     O .bss	00000004 xTimerTaskHandle
018123cc l     F .text	0000008c prvCheckForValidListAndQueue
01811df4 l     F .text	0000003c prvTimerTask
018119e4 l     F .text	000000a4 prvInitialiseNewTimer
01811d1c l     F .text	000000d8 prvProcessExpiredTimer
01811fc4 l     F .text	000000dc prvInsertTimerInActiveList
01811ef8 l     F .text	00000068 prvGetNextExpireTime
01811e30 l     F .text	000000c8 prvProcessTimerOrBlockTask
018120a0 l     F .text	00000218 prvProcessReceivedCommands
01811f60 l     F .text	00000064 prvSampleTimeNow
01847138 l     O .bss	00000004 xLastTime.2917
018122b8 l     F .text	00000114 prvSwitchTimerLists
00000000 l    df *ABS*	00000000 alt_dev.c
018125d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fstat.c
018126c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_io_redirect.c
018127b0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_isatty.c
018128f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
018129d0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01812abc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
01812bcc l     F .text	0000003c alt_get_errno
01812c08 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
018451cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_lwip_close.c
00000000 l    df *ABS*	00000000 alt_lwip_read.c
00000000 l    df *ABS*	00000000 alt_lwip_write.c
00000000 l    df *ABS*	00000000 altera_tse_ethernetif.c
018132e4 l     F .text	00000074 low_level_init
01813358 l     F .text	00000174 low_level_input
00000000 l    df *ABS*	00000000 lwip_main.c
01847140 l     O .bss	00000004 status_callback
01847144 l     O .bss	00000004 link_callback
01813938 l     F .text	0000025c lwip_handle_interfaces
01813f2c l     F .text	00000040 lwip_status_callback
01813da4 l     F .text	000000d0 lwip_handle_ethernet_input
01813cf0 l     F .text	000000b4 lwip_check_link_status
00000000 l    df *ABS*	00000000 lwip_tse_mac.c
00000000 l    df *ABS*	00000000 sys_arch.c
00000000 l    df *ABS*	00000000 dhcp.c
01815670 l     F .text	00000058 dhcp_clear_assignment
018156c8 l     F .text	00000054 dhcp_handle_nak
018172dc l     F .text	0000005c dhcp_set_state
018167f0 l     F .text	000001a0 dhcp_discover
0181571c l     F .text	000000a0 dhcp_check
018157bc l     F .text	000000ec dhcp_handle_offer
018158a8 l     F .text	00000260 dhcp_select
018182b4 l     F .text	00000584 dhcp_create_msg
01817338 l     F .text	0000009c dhcp_option
01817434 l     F .text	00000098 dhcp_option_short
018174cc l     F .text	0000010c dhcp_option_long
018173d4 l     F .text	00000060 dhcp_option_byte
018175d8 l     F .text	000000dc dhcp_option_hostname
018188bc l     F .text	000000fc dhcp_option_trailer
01818838 l     F .text	00000084 dhcp_delete_msg
01815e7c l     F .text	0000007c dhcp_t2_timeout
01815e00 l     F .text	0000007c dhcp_t1_timeout
01815c68 l     F .text	00000198 dhcp_timeout
01816990 l     F .text	0000028c dhcp_bind
01816d80 l     F .text	0000015c dhcp_rebind
01816edc l     F .text	000001a4 dhcp_reboot
01815ef8 l     F .text	00000218 dhcp_handle_ack
01817f5c l     F .text	00000358 dhcp_recv
0181668c l     F .text	00000164 dhcp_decline
018176b4 l     F .text	000008a8 dhcp_parse_reply
018451d0 l     O .rwdata	00000004 xid.3973
00000000 l    df *ABS*	00000000 ip_addr.c
01847330 l     O .bss	00000010 str.3409
00000000 l    df *ABS*	00000000 netif.c
01847158 l     O .bss	00000001 netif_num
00000000 l    df *ABS*	00000000 pbuf.c
01819954 l     F .text	00000088 pbuf_free_ooseq
018199dc l     F .text	00000030 pbuf_free_ooseq_callback
01819a0c l     F .text	00000098 pbuf_pool_is_empty
00000000 l    df *ABS*	00000000 stats.c
00000000 l    df *ABS*	00000000 tcp.c
018451dc l     O .rwdata	00000002 tcp_port
01847168 l     O .bss	00000001 tcp_timer
01847169 l     O .bss	00000001 tcp_timer_ctr
0181b078 l     F .text	0000033c tcp_close_shutdown
0181bc9c l     F .text	000000d8 tcp_new_port
0181b860 l     F .text	00000030 tcp_accept_null
0181cc5c l     F .text	000000d8 tcp_kill_prio
0181cd34 l     F .text	00000094 tcp_kill_timewait
018451e8 l     O .rwdata	00000004 iss.4084
00000000 l    df *ABS*	00000000 tcp_out.c
0181d49c l     F .text	000003e8 tcp_output_alloc_header
0181d9cc l     F .text	000003b0 tcp_create_segment
0181dd7c l     F .text	00000120 tcp_pbuf_prealloc
0181de9c l     F .text	000000b8 tcp_seg_add_chksum
0181df54 l     F .text	00000124 tcp_write_checks
0181f8d8 l     F .text	00000600 tcp_output_segment
00000000 l    df *ABS*	00000000 timers.c
01847184 l     O .bss	00000004 next_timeout
01847188 l     O .bss	00000004 tcpip_tcp_timer_active
01820ba4 l     F .text	0000005c tcpip_tcp_timer
01820c5c l     F .text	00000044 ip_reass_timer
01820ca0 l     F .text	00000044 arp_timer
01820ce4 l     F .text	00000044 dhcp_timer_coarse
01820d28 l     F .text	00000044 dhcp_timer_fine
00000000 l    df *ABS*	00000000 udp.c
018451ec l     O .rwdata	00000002 udp_port
01821190 l     F .text	0000009c udp_new_port
00000000 l    df *ABS*	00000000 etharp.c
01847340 l     O .bss	000001f4 arp_table
01822234 l     F .text	00000064 free_etharp_q
01822298 l     F .text	0000009c etharp_free_entry
018224b0 l     F .text	00000318 etharp_find_entry
018227c8 l     F .text	000000a4 etharp_send_ip
0182286c l     F .text	000001c4 etharp_update_arp_entry
01822b94 l     F .text	000000e8 etharp_ip_input
01822c7c l     F .text	0000038c etharp_arp_input
01823008 l     F .text	0000010c etharp_output_to_arp_index
018237c4 l     F .text	0000024c etharp_raw
00000000 l    df *ABS*	00000000 ping.c
01847190 l     O .bss	00000002 ping_seq_num
01847194 l     O .bss	00000004 ping_time
00000000 l    df *ABS*	00000000 alt_sys_init.c
0182424c l     F .text	00000034 alt_dev_reg
01843dcc l     O .rwdata	00001068 jtag_uart_0
01844e34 l     O .rwdata	00000030 sgdma_tse_rx_0
01844e64 l     O .rwdata	00000030 sgdma_tse_tx_0
01844e94 l     O .rwdata	000000cc uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01824610 l     F .text	0000020c altera_avalon_jtag_uart_irq
0182481c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
01824ecc l     F .text	0000003c alt_get_errno
01825afc l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01825c60 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
0184719a l     O .bss	00000001 tse_system_count.4134
0184719b l     O .bss	00000001 is_init.4216
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0182af9c l     F .text	0000009c altera_avalon_uart_irq
0182b038 l     F .text	000000e4 altera_avalon_uart_rxirq
0182b11c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0182b2b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0182b50c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
0182baf4 l     F .text	0000002c prvReadGp
018471a0 l     O .bss	00000004 lastContext
00000000 l    df *ABS*	00000000 tse_ethernet_phys.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0182bfa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0182c174 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_read.c
0182ca30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_write.c
0182cdac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 sockets.c
01847534 l     O .bss	000003f0 sockets
018471c4 l     O .bss	00000004 select_cb_list
018471c8 l     O .bss	00000004 select_cb_ctr
01842e40 l     O .rodata	00000040 err_to_errno_table
0182cf24 l     F .text	00000078 get_socket
0182cf9c l     F .text	00000080 tryget_socket
0182d01c l     F .text	000001a0 alloc_socket
0182d1bc l     F .text	00000098 free_socket
0182ec60 l     F .text	000003ac event_callback
0182e400 l     F .text	00000380 lwip_selscan
0182f180 l     F .text	00000114 lwip_getaddrname
0182f5e0 l     F .text	000003fc lwip_getsockopt_internal
0182fc70 l     F .text	00000338 lwip_setsockopt_internal
00000000 l    df *ABS*	00000000 tcpip.c
018471cc l     O .bss	00000004 tcpip_init_done
018471d0 l     O .bss	00000004 tcpip_init_done_arg
018471d4 l     O .bss	00000004 mbox
01830190 l     F .text	000001b0 tcpip_thread
018307fc l     F .text	0000003c pbuf_free_int
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 icmp.c
01830f80 l     F .text	000001e0 icmp_send_response
00000000 l    df *ABS*	00000000 inet_chksum.c
01831160 l     F .text	00000234 lwip_standard_chksum
00000000 l    df *ABS*	00000000 ip.c
018471d8 l     O .bss	00000002 ip_id
00000000 l    df *ABS*	00000000 ip_frag.c
018471ec l     O .bss	00000004 reassdatagrams
018471f0 l     O .bss	00000002 ip_reass_pbufcount
01832810 l     F .text	00000190 ip_reass_free_complete_datagram
01832c2c l     F .text	00000064 ip_reass_dequeue_datagram
018329a0 l     F .text	00000190 ip_reass_remove_oldest_datagram
01832b30 l     F .text	000000fc ip_reass_enqueue_new_datagram
01832c90 l     F .text	00000700 ip_reass_chain_frag_into_datagram_and_validate
0183399c l     F .text	0000003c ip_frag_alloc_pbuf_custom_ref
018339d8 l     F .text	00000034 ip_frag_free_pbuf_custom_ref
01833a0c l     F .text	00000058 ipfrag_free_pbuf_custom
00000000 l    df *ABS*	00000000 memp.c
00000000 l    df *ABS*	00000000 raw.c
018471f4 l     O .bss	00000004 raw_pcbs
00000000 l    df *ABS*	00000000 sys.c
00000000 l    df *ABS*	00000000 tcp_in.c
01847924 l     O .bss	00000014 inseg
018471f8 l     O .bss	00000004 tcphdr
018471fc l     O .bss	00000004 iphdr
01847200 l     O .bss	00000004 seqno
01847204 l     O .bss	00000004 ackno
01847208 l     O .bss	00000001 flags
0184720a l     O .bss	00000002 tcplen
0184720c l     O .bss	00000001 recv_flags
01847210 l     O .bss	00000004 recv_data
018355b0 l     F .text	0000013c tcp_timewait_input
018352c8 l     F .text	000002e8 tcp_listen_input
018356ec l     F .text	00000ab4 tcp_process
01838434 l     F .text	00000228 tcp_parseopt
01836440 l     F .text	00001ff4 tcp_receive
018361a0 l     F .text	000002a0 tcp_oos_insert_segment
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 api_lib.c
01838e70 l     F .text	00000294 netconn_recv_data
01839698 l     F .text	000000cc netconn_close_shutdown
00000000 l    df *ABS*	00000000 api_msg.c
01839804 l     F .text	00000180 recv_raw
01839984 l     F .text	0000013c recv_udp
01839ac0 l     F .text	00000140 recv_tcp
01839c00 l     F .text	000000fc poll_tcp
0183b5d8 l     F .text	0000030c do_writemore
0183a6a0 l     F .text	00000290 do_close_internal
01839cfc l     F .text	000000fc sent_tcp
01839df8 l     F .text	000001b4 err_tcp
01839fac l     F .text	00000088 setup_tcp
0183a034 l     F .text	00000168 accept_function
0183a19c l     F .text	000001a4 pcb_new
0183a524 l     F .text	0000017c netconn_drain
0183ac74 l     F .text	00000154 do_connected
00000000 l    df *ABS*	00000000 netbuf.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
01843340 l     O .rodata	00000010 zeroes.4389
01843350 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 vfprintf.c
01843370 l     O .rodata	00000010 blanks.4332
01843360 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
018471b4 g     O .bss	00000004 alt_instruction_exception_handler
0182cf04 g     F .text	00000020 lwip_socket_init
0183ab04 g     F .text	00000170 do_bind
018471dc g     O .bss	00000004 current_iphdr_src
018317cc g     F .text	00000044 inet_chksum
0183401c g     F .text	00000048 raw_bind
0180708c g     F .text	00000074 _mprec_log10
01833390 g     F .text	0000060c ip_reass
01826fcc g     F .text	000000d8 alt_tse_get_mac_info
01819f74 g     F .text	00000108 pbuf_realloc
01807178 g     F .text	0000008c __any_on
01809560 g     F .text	00000054 _isatty_r
018408d4 g     O .rodata	00000028 __mprec_tinytens
0180d380 g     F .text	000000d8 alt_main
0183c99c g     F .text	00000090 strcpy
0181d3a4 g     F .text	00000030 tcp_next_iss
0183c70c g     F .text	000000c0 _puts_r
01847b88 g     O .bss	00000100 alt_irq
0181bb04 g     F .text	000000f0 tcp_update_rcv_ann_wnd
018095b4 g     F .text	00000060 _lseek_r
020100d8 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
0181015c g     F .text	00000064 vTaskPlaceOnUnorderedEventList
0184715c g     O .bss	00000004 netif_list
0181615c g     F .text	00000050 dhcp_cleanup
0182abc8 g     F .text	000000f0 marvell_cfg_rgmii
01845218 g       *ABS*	00000000 __flash_rwdata_start
0182bb70 g     F .text	0000003c enh_alt_irq_enable_all
01813e74 g     F .text	000000b8 print_ipad
0180be6c g     F .text	00000088 .hidden __eqdf2
0181fed8 g     F .text	000003cc tcp_rst
0181ae80 g     F .text	000000c8 pbuf_memfind
01823ccc g     F .text	0000021c ping_send
018281bc g     F .text	00000210 alt_tse_phy_print_profile
01847c88 g       *ABS*	00000000 __alt_heap_start
0182a968 g     F .text	00000098 marvell_phy_cfg
0180f354 g     F .text	00000068 uxTaskPriorityGet
0181196c g     F .text	00000078 xTimerCreate
01823a10 g     F .text	00000074 etharp_request
01821800 g     F .text	00000074 udp_send_chksum
0183a4d8 g     F .text	0000004c netconn_free
01800b24 g     F .text	0000003c printf
018161ac g     F .text	000001ec dhcp_start
0182502c g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
01809e8c g     F .text	0000009c _wcrtomb_r
018343e8 g     F .text	0000006c sys_msleep
0181d078 g     F .text	00000034 tcp_err
018451d4 g     O .rwdata	00000004 ip_addr_any
01831394 g     F .text	00000200 inet_chksum_pseudo
01816544 g     F .text	000000a8 dhcp_network_changed
018073a4 g     F .text	0000005c __sseek
01822130 g     F .text	0000009c udp_remove
01804e04 g     F .text	00000010 __sinit
01810780 g     F .text	00000158 vTaskGetInfo
01809d34 g     F .text	00000140 __swbuf_r
0180eb4c g     F .text	000000c8 vQueueWaitForMessageRestricted
01831fa0 g     F .text	0000064c ip_output_if
01805410 g     F .text	0000007c _setlocale_r
01804c6c g     F .text	00000068 __sfmoreglue
0180d4b8 g     F .text	00000044 __malloc_unlock
01813c48 g     F .text	00000034 lwip_set_status_callback
0181a22c g     F .text	0000013c pbuf_free
0181d010 g     F .text	00000034 tcp_recv
0183a930 g     F .text	000001d4 do_delconn
01827210 g     F .text	00000a7c getPHYSpeed
0181a418 g     F .text	000000d4 pbuf_cat
01800874 g     F .text	000000b8 get_ip_addr
01800680 g     F .text	0000003c PingThread
01825744 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
0182d9c4 g     F .text	000004d8 lwip_recvfrom
01809614 g     F .text	0000015c memmove
018325ec g     F .text	000000b4 ip_output
01822a30 g     F .text	000000a4 etharp_cleanup_netif
0182410c g     F .text	00000140 lwip_ping_target_data
01821874 g     F .text	00000058 udp_sendto
01810f48 g     F .text	00000048 vTaskEnterCritical
018138ac g     F .text	0000008c lwip_wait_for_an
01804dec g     F .text	00000018 _cleanup
0183c8b8 g     F .text	000000e4 snprintf
0180db6c g     F .text	000000f4 xQueueGenericSendFromISR
0180fbec g     F .text	00000040 pcTaskGetName
01806208 g     F .text	000000a8 _Balloc
01818b48 g     F .text	00000044 ipaddr_addr
01820728 g     F .text	00000194 tcp_keepalive
01822334 g     F .text	0000017c etharp_tmr
01829bcc g     F .text	000001c4 alt_tse_phy_set_adv_1000
0183bd84 g     F .text	00000070 netbuf_delete
01845204 g     O .rwdata	00000001 max_mac_system
0181cdc8 g     F .text	000001e8 tcp_alloc
01826280 g     F .text	000009fc alt_tse_system_add_sys
0180bef4 g     F .text	000000dc .hidden __gtdf2
0182cee0 g     F .text	00000024 altera_nios2_gen2_irq_init
0183c308 g     F .text	00000010 __errno
0183bdf4 g     F .text	000000c8 netbuf_alloc
01830690 g     F .text	00000080 tcpip_callbackmsg_new
01821984 g     F .text	00000060 udp_sendto_if
02010000 g     F .entry	0000001c __reset
0180d804 g     F .text	00000090 xQueueGiveMutexRecursive
01839798 g     F .text	0000006c netconn_shutdown
0181cfdc g     F .text	00000034 tcp_arg
018470ec g     O .bss	00000004 pxCurrentTCB
01820d6c g     F .text	00000078 sys_timeouts_init
0184716a g     O .bss	00000001 tcp_active_pcbs_changed
01813cb0  w    F .text	00000040 lwip_is_interface_up
01815244 g     F .text	00000058 sys_mutex_free
0184716c g     O .bss	00000004 tcp_active_pcbs
01825294 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
01819918 g     F .text	0000003c netif_set_link_callback
01800000 g       *ABS*	00000000 __flash_exceptions_start
0184718c g     O .bss	00000004 udp_pcbs
01809048 g     F .text	0000005c _fstat_r
01844f60 g     O .rwdata	00000240 tse_mac_device
018470d8 g     O .bss	00000004 errno
01823a84 g     F .text	00000248 ethernet_input
0181b410 g     F .text	000000f0 tcp_shutdown
01807320 g     F .text	00000008 __seofread
0183932c g     F .text	00000080 netconn_recved
0183f06c g     F .text	0000123c ___svfiprintf_internal_r
0182a4b4 g     F .text	000004b4 alt_tse_phy_set_common_speed
0181a3b4 g     F .text	00000064 pbuf_ref
0180d340  w    F .text	00000020 pre_constructors
01847b48 g     O .bss	00000020 pmac_groups
018195e8 g     F .text	00000048 netif_set_netmask
0181542c g     F .text	00000060 sys_mbox_trypost
018470e0 g     O .bss	00000004 alt_argv
0184d1a0 g       *ABS*	00000000 _gp
0181cbe0 g     F .text	0000007c tcp_recv_null
0181319c g     F .text	00000030 usleep
018471e0 g     O .bss	00000004 current_netif
01839764 g     F .text	00000034 netconn_close
0181e9a8 g     F .text	000002e8 tcp_enqueue_flags
0183bd00 g     F .text	00000084 netbuf_new
0180f408 g     F .text	000001b4 vTaskPrioritySet
018470e8 g     O .bss	00000004 alt_heapsem
0181043c g     F .text	0000003c vTaskInternalSetTimeOutState
0181b3b4 g     F .text	0000005c tcp_close
0181bbf4 g     F .text	000000a8 tcp_recved
0182cd34 g     F .text	00000078 alt_uncached_malloc
0181d128 g     F .text	00000170 tcp_pcb_purge
01825d84 g     F .text	00000060 tse_mac_initTransInfo2
01813798 g     F .text	00000114 lwip_initialize
01843c4c g     O .rwdata	00000180 alt_fd_list
01838af0 g     F .text	000000bc netconn_disconnect
01818f84 g     F .text	0000003c ipaddr_ntoa
01800964 g     F .text	00000048 get_iface_name
018451de g     O .rwdata	00000007 tcp_persist_backoff
0182bc9c g     F .text	0000002c xPortStartScheduler
01811794 g     F .text	00000088 ulTaskNotifyValueClear
0180f990 g     F .text	00000034 vTaskEndScheduler
0182c254 g     F .text	00000090 alt_find_dev
01805f98 g     F .text	00000148 memcpy
01825ff8 g     F .text	00000054 tse_mac_setMIImode
0181010c g     F .text	00000050 vTaskPlaceOnEventList
0181aba4 g     F .text	0000010c pbuf_fill_chksum
01810318 g     F .text	000000c8 vTaskRemoveFromUnorderedEventList
01847170 g     O .bss	00000004 tcp_ticks
01847174 g     O .bss	00000004 tcp_listen_pcbs
01827c8c g     F .text	00000048 alt_tse_phy_rd_mdio_addr
018219e4 g     F .text	00000454 udp_sendto_if_chksum
018202a4 g     F .text	000000b4 tcp_rexmit_rto
01804abc g     F .text	0000000c _cleanup_r
0180d158 g     F .text	000000dc .hidden __floatsidf
01825de4 g     F .text	000000e4 tse_mac_sTxWrite
01812874 g     F .text	0000007c alt_io_redirect
0181cfb0 g     F .text	0000002c tcp_new
0180bfd0 g     F .text	000000f4 .hidden __ltdf2
0180e438 g     F .text	0000007c xQueuePeekFromISR
0182209c g     F .text	00000050 udp_disconnect
0181a828 g     F .text	0000019c pbuf_copy_partial
01814e1c g     F .text	00000020 sys_init
01814fcc g     F .text	00000048 sys_sem_signal
01840338 g       *ABS*	00000000 __DTOR_END__
0180d360  w    F .text	00000020 post_constructors
0182bfe4 g     F .text	000000d0 alt_close
01820de4 g     F .text	0000018c sys_timeout
0183c7cc g     F .text	00000014 puts
0182c994 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0182b820 g     F .text	00000044 vPortFree
01811cec g     F .text	00000030 pcTimerGetName
01817080 g     F .text	000001a4 dhcp_release
01807204 g     F .text	00000074 __fpclassifyd
0184100c g     O .rodata	0000002c tcp_state_str
01806fe8 g     F .text	000000a4 __ratio
01834278 g     F .text	00000044 raw_send
01831810 g     F .text	0000010c inet_chksum_pbuf
01808aec g     F .text	0000001c __vfiprintf_internal
0181a9c4 g     F .text	00000154 pbuf_take
0180df14 g     F .text	00000260 xQueueSemaphoreTake
0182538c g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0180e5dc g     F .text	00000028 uxQueueGetQueueNumber
01824a14 g     F .text	00000258 altera_avalon_jtag_uart_read
0183c500 g     F .text	00000014 malloc
01800af4 g     F .text	00000030 _printf_r
018471e4 g     O .bss	00000004 current_iphdr_dest
0180ac1c g     F .text	00000064 .hidden __udivsi3
0184797c g     O .bss	00000024 tse
0181292c g     F .text	000000a4 isatty
01826c7c g     F .text	00000168 alt_tse_sys_enable_mdio_sharing
018308f4 g     F .text	000005fc icmp_input
01840924 g     O .rodata	000000c8 __mprec_tens
01826f4c g     F .text	00000080 alt_tse_get_mac_info_index
01810a64 g     F .text	0000005c uxTaskGetStackHighWaterMark
01819174 g     F .text	000000f0 netif_add
0180548c g     F .text	0000000c __locale_charset
01830744 g     F .text	00000044 tcpip_trycallback
018471a4 g     O .bss	00000008 alt_timezone
018150f0 g     F .text	000000c0 sys_mutex_new
0181ca84 g     F .text	00000054 tcp_segs_free
0182b8f8 g     F .text	0000008c vListInsertEnd
0183865c g     F .text	00000090 alt_icache_flush
0182df38 g     F .text	00000144 lwip_send
018470d4 g     O .bss	00000004 __malloc_top_pad
0184713c g     O .bss	00000004 alt_fd_list_lock
018470b8 g     O .bss	00000004 PingIp
018451a8 g     O .rwdata	00000004 __mb_cur_max
018054bc g     F .text	0000000c _localeconv_r
01830710 g     F .text	00000034 tcpip_callbackmsg_delete
018326a0 g     F .text	000000d0 ip_output_hinted
01819478 g     F .text	00000128 netif_set_ipaddr
018090a4 g     F .text	000004bc __sfvwrite_r
01806614 g     F .text	0000003c __i2b
018254c4 g     F .text	0000005c alt_avalon_sgdma_stop
01827d2c g     F .text	00000128 alt_tse_phy_wr_mdio_reg
01807278 g     F .text	00000054 _sbrk_r
018283cc g     F .text	000006a4 alt_tse_mac_group_init
0181e078 g     F .text	00000930 tcp_write
01814160 g     F .text	0000084c tse_mac_init
0180f820 g     F .text	000000e0 xTaskResumeFromISR
01822ad4 g     F .text	000000c0 etharp_find_addr
0181548c g     F .text	00000100 sys_arch_mbox_fetch
0182f00c g     F .text	00000174 lwip_shutdown
01813c00 g     F .text	00000048 get_netif
01809770 g     F .text	00000060 _read_r
0182b8cc g     F .text	0000002c vListInitialiseItem
0182c0b4 g     F .text	00000078 alt_dcache_flush
018451c8 g     O .rwdata	00000004 alt_max_fd
0182bce8 g     F .text	0000003c vPortSysTickHandler
01808d3c g     F .text	000000f0 _fclose_r
0180dd3c g     F .text	000001d8 xQueueReceive
0181b690 g     F .text	000001d0 tcp_bind
01804a84 g     F .text	00000030 fflush
018470d0 g     O .bss	00000004 __malloc_max_sbrked_mem
01830f38 g     F .text	00000048 icmp_time_exceeded
0181b658 g     F .text	00000038 tcp_abort
0180f3bc g     F .text	0000004c uxTaskPriorityGetFromISR
01838c78 g     F .text	000001f8 netconn_accept
01833a64 g     F .text	0000048c ip_frag
0180acd8 g     F .text	000008ac .hidden __adddf3
0182d8b4 g     F .text	00000110 lwip_listen
01811c44 g     F .text	00000070 uxTimerGetReloadMode
01806d90 g     F .text	0000010c __b2d
0180a5ec g     F .text	00000538 .hidden __umoddi3
01812af8 g     F .text	000000d4 lseek
018340f0 g     F .text	00000188 raw_sendto
01827f20 g     F .text	0000029c alt_tse_phy_add_profile_default
01829638 g     F .text	00000594 alt_tse_phy_get_cap
01800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
01811b84 g     F .text	00000030 xTimerGetPeriod
018451a0 g     O .rwdata	00000004 _global_impure_ptr
0183bbd0 g     F .text	00000130 do_close
0182ca6c g     F .text	000000fc alt_read
018097d0 g     F .text	00000564 _realloc_r
01847c88 g       *ABS*	00000000 __bss_end
0182c8a4 g     F .text	000000f0 alt_iic_isr_register
01824f08 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
0182cc2c g     F .text	00000108 alt_tick
0182d558 g     F .text	00000154 lwip_bind
0180a074 g     F .text	00000578 .hidden __udivdi3
01817224 g     F .text	000000b8 dhcp_stop
01808fa4 g     F .text	00000024 _fputwc_r
018294d8 g     F .text	00000160 alt_tse_phy_check_link
018408fc g     O .rodata	00000028 __mprec_bigtens
018063f8 g     F .text	00000104 __s2b
0182f294 g     F .text	00000044 lwip_getpeername
0180d234 g     F .text	000000a8 .hidden __floatunsidf
0182aae4 g     F .text	000000e4 marvell_cfg_sgmii
0181a5cc g     F .text	0000025c pbuf_copy
0182931c g     F .text	000001bc alt_tse_phy_restart_an
01820358 g     F .text	000002a8 tcp_rexmit
01806ad0 g     F .text	00000060 __mcmp
0182b7d4 g     F .text	0000004c pvPortMalloc
0182ae40 g     F .text	0000015c altera_avalon_uart_init
0183c0fc g     F .text	000000f4 netbuf_data
01823ff8 g     F .text	00000114 lwip_ping_target
01804e24 g     F .text	00000018 __fp_lock_all
01838804 g     F .text	0000013c netconn_getaddr
0182c858 g     F .text	0000004c alt_ic_irq_enabled
01847b68 g     O .bss	00000020 pphy_profiles
0180e5a0 g     F .text	0000003c vQueueDelete
0182bcc8 g     F .text	00000020 vPortEndScheduler
0181965c g     F .text	000000b0 netif_set_up
0182b864 g     F .text	00000068 vListInitialise
0182cb90 g     F .text	0000009c alt_alarm_stop
01813c7c g     F .text	00000034 lwip_set_link_callback
018471b8 g     O .bss	00000004 alt_irq_active
0182e274 g     F .text	00000148 lwip_socket
01841048 g     O .rodata	00000010 tcp_pcb_lists
01830788 g     F .text	00000074 tcpip_init
02010224 g     F .exceptions	000000cc alt_irq_handler
01843c24 g     O .rwdata	00000028 alt_dev_null
0180fb58 g     F .text	00000048 xTaskGetTickCount
0180d988 g     F .text	000001e4 xQueueGenericSend
018009ac g     F .text	00000024 is_interface_active
01818a84 g     F .text	000000c4 ip4_addr_netmask_valid
01847178 g     O .bss	00000004 tcp_tmp_pcb
01838a18 g     F .text	000000d8 netconn_connect
01829204 g     F .text	00000118 alt_tse_phy_init
01825520 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
018393ac g     F .text	00000080 netconn_sendto
0182c12c g     F .text	00000048 alt_dcache_flush_all
018064fc g     F .text	00000068 __hi0bits
0180fc2c g     F .text	00000188 uxTaskGetSystemState
01814ae4 g     F .text	00000168 tse_mac_raw_send
0180d0d8 g     F .text	00000080 .hidden __fixdfsi
01814a50 g     F .text	00000094 tse_sgdma_rx_isr
01810d0c g     F .text	000000fc xTaskPriorityDisinherit
0182cde8 g     F .text	000000f8 alt_write
0182d738 g     F .text	0000017c lwip_connect
0181d884 g     F .text	00000148 tcp_send_fin
01845218 g       *ABS*	00000000 __ram_rwdata_end
0181ee2c g     F .text	00000aac tcp_output
01847148 g     O .bss	00000004 tx_counter
018451c0 g     O .rwdata	00000008 alt_dev_list
01813280 g     F .text	00000064 write
01825664 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
0183c5a4 g     F .text	000000a0 _putc_r
01810224 g     F .text	000000f4 xTaskRemoveFromEventList
0180031c g     F .text	00000028 vApplicationMallocFailedHook
01843380 g       *ABS*	00000000 __ram_rodata_end
0183bebc g     F .text	0000008c netbuf_free
01812700 g     F .text	000000b0 fstat
01838bac g     F .text	000000cc netconn_listen_with_backlog
01847214 g     O .bss	00000004 tcp_input_pcb
01833ef0 g     F .text	0000012c raw_input
0180bfd0 g     F .text	000000f4 .hidden __ledf2
0182acb8 g     F .text	00000078 DP83848C_link_status_read
0181ec90 g     F .text	0000019c tcp_send_empty_ack
0180e174 g     F .text	000001e0 xQueuePeek
01820600 g     F .text	00000128 tcp_rexmit_fast
01814e90 g     F .text	000000e4 sys_sem_new
01806848 g     F .text	00000140 __pow5mult
01807690 g     F .text	0000145c ___vfiprintf_internal_r
018470c8 g     O .bss	00000004 __nlocale_changed
01830584 g     F .text	0000009c tcpip_untimeout
0180ac80 g     F .text	00000058 .hidden __umodsi3
01818b8c g     F .text	000003f8 ipaddr_aton
018189b8 g     F .text	000000cc ip4_addr_isbroadcast
01819630 g     F .text	0000002c netif_set_default
018220ec g     F .text	00000044 udp_recv
0182530c g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
01825418 g     F .text	00000054 alt_avalon_sgdma_register_callback
01847c88 g       *ABS*	00000000 end
0180eff0 g     F .text	000000f8 vTaskDelete
01821060 g     F .text	00000110 sys_timeouts_mbox_fetch
0181970c g     F .text	00000094 netif_set_down
0184714c g     O .bss	00000004 rx_counter
01823ee8 g     F .text	00000110 ping_recv
01819aa4 g     F .text	00000390 pbuf_alloc
018197dc g     F .text	000000c4 netif_set_link_up
0181536c g     F .text	00000070 sys_mbox_free
0182b548 g     F .text	000001e8 altera_avalon_uart_write
0182609c g     F .text	000001e4 alt_tse_phy_add_profile
018244c8 g     F .text	00000148 altera_avalon_jtag_uart_init
020101b0 g     F .exceptions	00000074 alt_instruction_exception_entry
01811030 g     F .text	00000038 pvTaskIncrementMutexHeldCount
01840338 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
018387a4 g     F .text	00000060 netconn_delete
018256e4 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
01825cd8 g     F .text	0000007c alt_avalon_timer_sc_init
0182ad90 g     F .text	00000060 altera_avalon_uart_write_fd
0180d2dc g     F .text	00000064 .hidden __clzsi2
0183c7e0 g     F .text	000000d8 _snprintf_r
0182adf0 g     F .text	00000050 altera_avalon_uart_close_fd
0183c1f0 g     F .text	0000009c netbuf_next
01824c6c g     F .text	00000260 altera_avalon_jtag_uart_write
0182513c g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
0183c28c g     F .text	00000068 netbuf_first
01804e14 g     F .text	00000004 __sfp_lock_acquire
01805eb4 g     F .text	000000e4 memchr
018451d8 g     O .rwdata	00000004 ip_addr_broadcast
01800b60 g     F .text	000021f8 ___vfprintf_internal_r
0182e07c g     F .text	000001f8 lwip_sendto
01832770 g     F .text	000000a0 ip_reass_tmr
01810478 g     F .text	000000f0 xTaskCheckForTimeOut
01825234 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
01842f32 g     O .rodata	0000001e memp_sizes
01804f78 g     F .text	00000310 _free_r
01812e20 g     F .text	0000022c alt_printf
01810bcc g     F .text	00000140 xTaskPriorityInherit
0181257c g     F .text	00000028 uxTimerGetTimerNumber
01805498 g     F .text	00000010 __locale_mb_cur_max
01821f94 g     F .text	00000108 udp_connect
0183ed1c g     F .text	00000180 __call_exitprocs
0183a3a0 g     F .text	00000138 netconn_alloc
018471e8 g     O .bss	00000004 current_header
0182e780 g     F .text	000004e0 lwip_select
0182de9c g     F .text	0000004c lwip_read
01847154 g     O .bss	00000004 rx_faulty_packets
018470c4 g     O .bss	00000004 __mlocale_changed
01814c4c g     F .text	000001d0 tse_mac_rcv
01811068 g     F .text	000000d0 ulTaskNotifyTake
01819264 g     F .text	0000005c netif_set_addr
018165ec g     F .text	000000a0 dhcp_arp_reply
018451ac g     O .rwdata	00000004 __malloc_sbrk_base
018002d0 g     F .text	0000004c _start
018471bc g     O .bss	00000004 _alt_tick_rate
0180f9c4 g     F .text	0000002c vTaskSuspendAll
0180f234 g     F .text	00000120 eTaskGetState
0181af48 g     F .text	000000a4 pbuf_strstr
01825584 g     F .text	00000054 alt_avalon_sgdma_open
0180fba0 g     F .text	0000002c xTaskGetTickCountFromISR
01800758 g     F .text	0000011c get_mac_addr
01806988 g     F .text	00000148 __lshift
018208bc g     F .text	000002e8 tcp_zero_window_probe
018471c0 g     O .bss	00000004 _alt_nticks
01827e54 g     F .text	000000cc alt_tse_phy_rd_mdio_reg
01813214 g     F .text	0000006c read
0183b8e4 g     F .text	00000114 do_write
018242b8 g     F .text	000000ac alt_sys_init
0183ee9c g     F .text	000001d0 __ssprint_r
01815bb0 g     F .text	000000b8 dhcp_fine_tmr
018479a0 g     O .bss	0000000a dhcp_rx_options_given
0182ba5c g     F .text	00000098 uxListRemove
0183ec04 g     F .text	00000118 __register_exitproc
01847198 g     O .bss	00000001 phy_profile_count
01826ed8 g     F .text	00000074 alt_tse_get_mac_group_index
0182cb68 g     F .text	00000028 alt_remap_uncached
01818fc0 g     F .text	00000194 ipaddr_ntoa_r
01806650 g     F .text	000001f8 __multiply
018248bc g     F .text	00000068 altera_avalon_jtag_uart_close
01843380 g       *ABS*	00000000 __ram_rwdata_start
01840338 g       *ABS*	00000000 __ram_rodata_start
01847218 g     O .bss	00000028 __malloc_current_mallinfo
0181170c g     F .text	00000088 xTaskNotifyStateClear
0184717c g     O .bss	00000004 tcp_bound_pcbs
0180f744 g     F .text	000000dc vTaskResume
01806e9c g     F .text	0000014c __d2b
01814f74 g     F .text	00000058 sys_sem_free
0181cad8 g     F .text	00000058 tcp_seg_free
0180ffb0 g     F .text	0000015c vTaskSwitchContext
0181ad60 g     F .text	00000120 pbuf_memcmp
01811bb4 g     F .text	00000090 vTimerSetReloadMode
01830874 g     F .text	0000003c mem_free_callback
01827cd4 g     F .text	00000058 alt_tse_phy_wr_mdio_addr
01824364 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0182c3ec g     F .text	000000e0 alt_get_fd
018101c0 g     F .text	00000064 vTaskPlaceOnEventListRestricted
0183b9f8 g     F .text	000001d8 do_getaddr
0182be50 g     F .text	00000158 alt_busy_sleep
0183c040 g     F .text	000000bc netbuf_chain
0181b00c g     F .text	00000020 tcp_init
0181bd74 g     F .text	00000398 tcp_connect
01831594 g     F .text	00000238 inet_chksum_pseudo_partial
01808c24 g     F .text	00000054 _close_r
01811138 g     F .text	00000114 xTaskNotifyWait
0182a18c g     F .text	00000328 alt_tse_phy_get_common_speed
0183c528 g     F .text	0000007c memcmp
01824424 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01847c88 g       *ABS*	00000000 __alt_stack_base
01824474 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01847199 g     O .bss	00000001 mac_group_count
018198a0 g     F .text	00000078 netif_set_link_down
01816c1c g     F .text	00000164 dhcp_renew
01811a88 g     F .text	000000dc xTimerGenericCommand
018105d8 g     F .text	00000044 vTaskSetTaskNumber
0183b014 g     F .text	00000084 do_disconnect
01802e30 g     F .text	00000154 __swsetup_r
01800344 g     F .text	00000030 vApplicationStackOverflowHook
018149ac g     F .text	000000a4 tse_sgdma_read_init
0180f5bc g     F .text	0000011c vTaskSuspend
0180b584 g     F .text	000008e8 .hidden __divdf3
01804cd4 g     F .text	00000118 __sfp
0180fdb4 g     F .text	0000004c xTaskCatchUpTicks
01807100 g     F .text	00000078 __copybits
0180fbcc g     F .text	00000020 uxTaskGetNumberOfTasks
0181d3d4 g     F .text	0000008c tcp_eff_send_mss
0184381c g     O .rwdata	00000408 __malloc_av_
01804e20 g     F .text	00000004 __sinit_lock_release
0180c0c4 g     F .text	00000718 .hidden __muldf3
01847938 g     O .bss	00000044 eth_tse
018072cc g     F .text	00000054 __sread
01828a70 g     F .text	00000424 alt_tse_mac_get_phy
0182c2e4 g     F .text	00000108 alt_find_file
0182f9dc g     F .text	00000294 lwip_setsockopt
0182c1b0 g     F .text	000000a4 alt_dev_llist_insert
0180d458 g     F .text	00000060 __malloc_lock
018130ec g     F .text	000000b0 sbrk
0183ca2c g     F .text	000021d8 ___svfprintf_internal_r
0180d894 g     F .text	0000009c xQueueTakeMutexRecursive
0182546c g     F .text	00000058 alt_avalon_sgdma_start
01816398 g     F .text	000001ac dhcp_inform
018304d8 g     F .text	000000ac tcpip_timeout
01804a28 g     F .text	0000005c _fflush_r
01827184 g     F .text	0000008c alt_tse_mac_set_duplex
01808c78 g     F .text	000000c4 _calloc_r
01834064 g     F .text	00000048 raw_connect
01839104 g     F .text	00000074 netconn_recv_tcp_pbuf
0181124c g     F .text	000001bc xTaskGenericNotify
0182c4cc g     F .text	000001f4 gettimeofday
0181529c g     F .text	000000d0 sys_mbox_new
01813f6c g     F .text	000001f4 lwip_initialize_phys
018470b0 g       *ABS*	00000000 __bss_start
01810590 g     F .text	00000048 uxTaskGetTaskNumber
018060e0 g     F .text	00000128 memset
018009d0 g     F .text	00000040 main
018470e4 g     O .bss	00000004 alt_envp
018470cc g     O .bss	00000004 __malloc_max_total_mem
018243c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01809e74 g     F .text	00000018 __swbuf
0182b984 g     F .text	000000d8 vListInsert
01830ef0 g     F .text	00000048 icmp_dest_unreach
018451fc g     O .rwdata	00000008 alt_sgdma_list
0181d044 g     F .text	00000034 tcp_sent
01807400 g     F .text	00000008 __sclose
0181acb0 g     F .text	000000b0 pbuf_get_at
02000000 g       *ABS*	00000000 __alt_heap_limit
02010000 g       *ABS*	00000000 __alt_mem_mem_0
01808e2c g     F .text	00000014 fclose
01811904 g     F .text	00000068 xTimerCreateTimerTask
01803184 g     F .text	00001688 _dtoa_r
01834358 g     F .text	00000090 raw_new
018056a8 g     F .text	0000080c _malloc_r
01825f70 g     F .text	00000088 tse_mac_SwReset
01809fe8 g     F .text	00000030 __ascii_wctomb
0182f2d8 g     F .text	00000044 lwip_getsockname
0180e638 g     F .text	00000028 ucQueueGetQueueType
018134cc g     F .text	000000fc ethernetif_input
01845208 g     O .rwdata	00000004 alt_errno
0180f0e8 g     F .text	000000f0 vTaskDelayUntil
01830838 g     F .text	0000003c pbuf_free_callback
0182b790 g     F .text	00000044 __env_unlock
018197a0 g     F .text	0000003c netif_set_status_callback
01805288 g     F .text	000000c4 _fwalk
0183942c g     F .text	000000c8 netconn_send
0180e354 g     F .text	000000e4 xQueueReceiveFromISR
018386ec g     F .text	000000b8 netconn_new_with_proto_and_callback
01810b58 g     F .text	00000028 xTaskGetCurrentTaskHandle
018394f4 g     F .text	000001a4 netconn_write_partly
0183c644 g     F .text	000000c8 putc
0180ab24 g     F .text	00000084 .hidden __divsi3
01826e24 g     F .text	00000048 alt_tse_mac_set_common_speed
018342bc g     F .text	0000009c raw_remove
0180d620 g     F .text	00000098 xQueueGenericCreate
01804e54 g     F .text	00000124 _malloc_trim_r
01840338 g       *ABS*	00000000 __CTOR_END__
01813bb4 g     F .text	0000004c get_mac_base
01847164 g     O .bss	00000001 pbuf_free_ooseq_pending
01821e38 g     F .text	0000015c udp_bind
0181b02c g     F .text	0000004c tcp_tmr
01823400 g     F .text	000003c4 etharp_query
01807408 g     F .text	000000dc strcmp
018308b0 g     F .text	00000044 lwip_init
0180d930 g     F .text	00000058 xQueueCreateCountingSemaphore
01840338 g       *ABS*	00000000 __flash_rodata_start
018155f4 g     F .text	0000007c sys_thread_new
01840338 g       *ABS*	00000000 __DTOR_LIST__
01823114 g     F .text	000002ec etharp_output
018218cc g     F .text	000000b8 udp_sendto_chksum
01811408 g     F .text	000001e4 xTaskGenericNotifyFromISR
0180be6c g     F .text	00000088 .hidden __nedf2
0180e604 g     F .text	00000034 vQueueSetQueueNumber
01824280 g     F .text	00000038 alt_irq_init
01826de4 g     F .text	00000040 alt_tse_mac_get_common_speed
01813088 g     F .text	00000064 alt_release_fd
0180f9f0 g     F .text	00000168 xTaskResumeAll
01830620 g     F .text	00000070 tcpip_apimsg
0183c350 g     F .text	00000018 memalign
01819e34 g     F .text	00000140 pbuf_alloced_custom
0180e504 g     F .text	00000064 uxQueueSpacesAvailable
018195a0 g     F .text	00000048 netif_set_gw
01840a0c g     O .rodata	00000100 .hidden __clz_tab
0180f900 g     F .text	00000090 vTaskStartScheduler
0181a368 g     F .text	0000004c pbuf_clen
018470c0 g     O .bss	00000004 _PathLocale
0183c2f4 g     F .text	00000014 atexit
01813b94 g     F .text	00000020 get_mac_count
01808bc4 g     F .text	00000060 _write_r
0181cb30 g     F .text	00000038 tcp_setprio
018217ac g     F .text	00000054 udp_send
0182f31c g     F .text	000002c4 lwip_getsockopt
018054c8 g     F .text	00000018 setlocale
0180eafc g     F .text	00000050 xQueueIsQueueFullFromISR
0181ab18 g     F .text	0000008c pbuf_coalesce
018340ac g     F .text	00000044 raw_recv
018124c8 g     F .text	00000058 pvTimerGetTimerID
018151fc g     F .text	00000048 sys_mutex_unlock
01800a10 g     F .text	000000e4 main_thread
018192c0 g     F .text	000000d8 netif_remove
018151b0 g     F .text	0000004c sys_mutex_lock
01815014 g     F .text	000000dc sys_arch_sem_wait
018451a4 g     O .rwdata	00000004 _impure_ptr
018470dc g     O .bss	00000004 alt_argc
0181c10c g     F .text	00000730 tcp_slowtmr
01811cb4 g     F .text	00000038 xTimerGetExpiryTime
0180480c g     F .text	0000021c __sflush_r
01812664 g     F .text	00000060 _do_dtors
018054b4 g     F .text	00000008 __locale_cjk_lang
01806d2c g     F .text	00000064 __ulp
0181d0ac g     F .text	00000034 tcp_accept
01804e3c g     F .text	00000018 __fp_unlock_all
0183b098 g     F .text	00000200 do_listen
01810568 g     F .text	00000028 vTaskMissedYield
018135c8 g     F .text	000001d0 ethernetif_init
018451b8 g     O .rwdata	00000008 alt_fs_list
0180e4b4 g     F .text	00000050 uxQueueMessagesWaiting
018471ac g     O .bss	00000008 alt_resettime
0180fe00 g     F .text	000001b0 xTaskIncrementTick
02010020 g       *ABS*	00000000 __ram_exceptions_start
018054e0 g     F .text	0000000c localeconv
01830340 g     F .text	000000bc tcpip_input
01847180 g     O .bss	00000004 tcp_tw_pcbs
01829fe4 g     F .text	000001a8 alt_tse_phy_set_adv_10
01800468 g     F .text	00000048 InitNetwork
0182c6f4 g     F .text	00000050 alt_ic_isr_register
01814e3c g     F .text	00000054 sys_now
0182122c g     F .text	00000580 udp_input
0180d4fc g     F .text	00000124 xQueueGenericReset
01812520 g     F .text	0000005c vTimerSetTimerID
01845218 g       *ABS*	00000000 _edata
0182ad30 g     F .text	00000060 altera_avalon_uart_read_fd
01847c88 g       *ABS*	00000000 _end
01828e94 g     F .text	00000248 alt_tse_mac_associate_phy
01819154 g     F .text	00000020 netif_init
01808e40 g     F .text	00000164 __fputwc
020102f0 g       *ABS*	00000000 __ram_exceptions_end
01824924 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01831974 g     F .text	000000f0 ip_route
0181b890 g     F .text	00000274 tcp_listen_with_backlog
018479d4 g     O .bss	00000174 lwip_stats
0180ec14 g     F .text	000000e0 xTaskCreate
0183b4dc g     F .text	000000fc do_recv
0181a07c g     F .text	000001b0 pbuf_header
01812458 g     F .text	00000070 xTimerIsTimerActive
01847160 g     O .bss	00000004 netif_default
0182c7cc g     F .text	0000008c alt_ic_irq_disable
0181d298 g     F .text	0000010c tcp_pcb_remove
018470bc g     O .bss	00000004 lwipStaticIp
01847150 g     O .bss	00000004 rx_missed_packets
018255d8 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
01807328 g     F .text	0000007c __swrite
0183191c g     F .text	00000058 lwip_chksum_copy
018451b0 g     O .rwdata	00000004 __malloc_trim_threshold
0181a4ec g     F .text	00000044 pbuf_chain
018054a8 g     F .text	0000000c __locale_msgcharset
0181b500 g     F .text	00000158 tcp_abandon
0183c318 g     F .text	00000038 exit
0181d460 g     F .text	0000003c tcp_debug_state_str
01820c00 g     F .text	0000005c tcp_timer_needed
0180534c g     F .text	000000c4 _fwalk_reent
01816110 g     F .text	0000004c dhcp_set_struct
01806b30 g     F .text	000001fc __mdiff
0181c83c g     F .text	000000f8 tcp_fasttmr
0180aba8 g     F .text	00000074 .hidden __modsi3
0183c368 g     F .text	00000198 _memalign_r
0181c934 g     F .text	00000150 tcp_process_refused_data
0182604c g     F .text	00000050 tse_mac_setGMIImode
0180f1d8 g     F .text	0000005c vTaskDelay
0182aa00 g     F .text	000000e4 marvell_cfg_gmii
02000000 g       *ABS*	00000000 __alt_data_end
01804e18 g     F .text	00000004 __sfp_lock_release
01838940 g     F .text	000000d8 netconn_bind
0182e3bc g     F .text	00000044 lwip_write
018290dc g     F .text	00000128 alt_tse_phy_cfg_pcs
018479ac g     O .bss	00000028 dhcp_rx_options_val
00000000 g       *ABS*	00000000 __alt_mem_tse_descriptor_memory_0
01810b80 g     F .text	0000004c xTaskGetSchedulerState
0182dee8 g     F .text	00000050 lwip_recv
01810e08 g     F .text	00000140 vTaskPriorityDisinheritAfterTimeout
0182b264 g     F .text	00000054 altera_avalon_uart_close
0182ffa8 g     F .text	000000e4 lwip_ioctl
01840308 g     F .text	00000030 _exit
01815b08 g     F .text	000000a8 dhcp_coarse_tmr
0182bd24 g     F .text	0000012c alt_alarm_start
0181cb68 g     F .text	00000078 tcp_seg_copy
018402a8 g     F .text	00000060 .hidden __muldi3
018054ec g     F .text	000001bc __smakebuf_r
01810f90 g     F .text	0000005c vTaskExitCritical
0181d0e0 g     F .text	00000048 tcp_poll
018074e4 g     F .text	00000098 strlen
0182bbac g     F .text	000000f0 pxPortInitialiseStack
0183008c g     F .text	00000104 lwip_fcntl
01812ccc g     F .text	00000154 open
01821170 g     F .text	00000020 udp_init
0180bef4 g     F .text	000000dc .hidden __gedf2
018221cc g     F .text	00000068 udp_new
0181304c g     F .text	0000003c alt_putchar
018451b4 g     O .rwdata	00000004 __wctomb
0182d6ac g     F .text	0000008c lwip_close
0182bb20 g     F .text	00000050 enh_alt_irq_disable_all
01807678 g     F .text	00000018 __sprint_r
01825ec8 g     F .text	000000a8 tse_mac_aRxRead
0182c6c0 g     F .text	00000034 alt_icache_flush_all
0183bf48 g     F .text	000000f8 netbuf_ref
018451ee g     O .rwdata	00000006 ethbroadcast
018103e0 g     F .text	0000005c vTaskSetTimeOutState
01811b64 g     F .text	00000020 xTimerGetTimerDaemonTaskHandle
01841038 g     O .rodata	0000000d tcp_backoff
018125a4 g     F .text	00000034 vTimerSetTimerNumber
0184520c g     O .rwdata	00000004 alt_priority_mask
0181558c g     F .text	00000068 sys_arch_mbox_tryfetch
0182c744 g     F .text	00000088 alt_ic_irq_enable
01802d58 g     F .text	0000001c __vfprintf_internal
0182d254 g     F .text	00000304 lwip_accept
0182b2f4 g     F .text	00000218 altera_avalon_uart_read
0180e568 g     F .text	00000038 uxQueueMessagesWaitingFromISR
0180a018 g     F .text	0000005c _wctomb_r
0182b730 g     F .text	00000060 __env_lock
01839178 g     F .text	000001b4 netconn_recv
0180ea4c g     F .text	00000048 xQueueIsQueueEmptyFromISR
0183a340 g     F .text	00000060 do_newconn
018270a4 g     F .text	000000e0 alt_tse_mac_set_speed
018153dc g     F .text	00000050 sys_mbox_post
018251b0 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0180c7dc g     F .text	000008fc .hidden __subdf3
01806564 g     F .text	000000b0 __lo0bits
0183adc8 g     F .text	0000024c do_connect
01845210 g     O .rwdata	00000008 alt_alarm_list
01812604 g     F .text	00000060 _do_ctors
01829d90 g     F .text	00000254 alt_tse_phy_set_adv_100
01810fec g     F .text	00000044 uxTaskResetEventItemValue
01820f70 g     F .text	000000f0 sys_untimeout
01809f28 g     F .text	000000c0 wcrtomb
01834454 g     F .text	00000e74 tcp_input
0180d7a8 g     F .text	0000005c xQueueCreateMutex
018131cc g     F .text	00000048 close
0184719c g     O .bss	00000004 alt_envsem
01831a64 g     F .text	0000053c ip_input
018115ec g     F .text	00000120 vTaskNotifyGiveFromISR
0180092c g     F .text	00000038 get_hostname
0183b298 g     F .text	00000244 do_send
01812a38 g     F .text	00000084 alt_load
018451f4 g     O .rwdata	00000006 ethzero
0181afec g     F .text	00000020 stats_init
01826e6c g     F .text	0000006c alt_tse_get_system_index
01825bb8 g     F .text	000000a8 alt_avalon_sgdma_init
0180dc60 g     F .text	000000dc xQueueGiveFromISR
01808fc8 g     F .text	00000080 fputwc
01819398 g     F .text	000000e0 netif_find
0183c514 g     F .text	00000014 free
01804e1c g     F .text	00000004 __sinit_lock_acquire
018006bc g     F .text	0000009c xEthernetRun
018062d8 g     F .text	00000120 __multadd
018303fc g     F .text	000000dc tcpip_callback_with_block
018062b0 g     F .text	00000028 _Bfree
01825d54 g     F .text	00000030 no_printf
0181a530 g     F .text	0000009c pbuf_dechain



Disassembly of section .entry:

02010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2010000:	00810014 	movui	r2,1024
#endif

0:
    initi r2
 2010004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2010008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 201000c:	00bffd16 	blt	zero,r2,2010004 <__ram_exceptions_end+0xfffffd14>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2010010:	00406034 	movhi	at,384
    ori r1, r1, %lo(_start)
 2010014:	0840b414 	ori	at,at,720
    jmp r1
 2010018:	0800683a 	jmp	at
 201001c:	00000000 	call	0 <__alt_mem_tse_descriptor_memory_0>

Disassembly of section .exceptions:

02010020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 2010020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -120		# Create space on the stack.
 2010024:	deffe204 	addi	sp,sp,-120
	stw		ra, 0(sp)
 2010028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 201002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 2010030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 2010034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 2010038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 201003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 2010040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 2010044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 2010048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 201004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 2010050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 2010054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 2010058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 201005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 2010060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 2010064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 2010068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 201006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 2010070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 2010074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 2010078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 201007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 2010080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 2010084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 2010088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 201008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 2010090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 2010094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 2010098:	df001c15 	stw	fp,112(sp)

	# preserve the errno
	call	__errno				# get the errno pointer
 201009c:	183c3080 	call	183c308 <__errno>
	ldw		r3, 0(r2)			# load the errno in r3
 20100a0:	10c00017 	ldw	r3,0(r2)
	stw		r3, 116(sp)			# store the errno on the stack
 20100a4:	d8c01d15 	stw	r3,116(sp)

020100a8 <save_sp_to_pxCurrentTCB>:

save_sp_to_pxCurrentTCB:
	call	xTaskGetSchedulerState			# Only save the stack if scheduler has been started
 20100a8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
    beq		r2,	zero,	hw_irq_test			# If xTaskGetSchedulerState returns 0 it has not been started yet
 20100ac:	10000426 	beq	r2,zero,20100c0 <hw_irq_test>
 20100b0:	06006134 	movhi	et,388

	movia	et, pxCurrentTCB				# Load the address of the pxCurrentTCB pointer
 20100b4:	c61c3b04 	addi	et,et,28908
	ldw		et, (et)						# Load the value of the pxCurrentTCB pointer
 20100b8:	c6000017 	ldw	et,0(et)
	stw		sp, (et)						# Store the stack pointer into the top of the TCB
 20100bc:	c6c00015 	stw	sp,0(et)

020100c0 <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending					# Load the Pending Interrupts indication
 20100c0:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 					# Load the eStatus (enabled interrupts).
 20100c4:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1						# Are interrupts enabled globally.
 20100c8:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 20100cc:	10002a26 	beq	r2,zero,2010178 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 20100d0:	20002926 	beq	r4,zero,2010178 <soft_exceptions>

020100d4 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 20100d4:	20102240 	call	2010224 <alt_irq_handler>

020100d8 <restore_sp_from_pxCurrentTCB>:

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:

	call	xTaskGetSchedulerState			# Only restore stack if scheduler has been started
 20100d8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
    beq		r2,	zero,	restore_context		# If xTaskGetSchedulerState returns 0 it has not been started yet
 20100dc:	10000426 	beq	r2,zero,20100f0 <restore_context>
 20100e0:	06006134 	movhi	et,388

	movia	et, pxCurrentTCB				# Load the address of the pxCurrentTCB pointer
 20100e4:	c61c3b04 	addi	et,et,28908
	ldw		et, (et)						# Load the value of the pxCurrentTCB pointer
 20100e8:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)						# Load the stack pointer with the top value of the TCB
 20100ec:	c6c00017 	ldw	sp,0(et)

020100f0 <restore_context>:

restore_context:
	# preserve the errno
	call	__errno			# get the errno pointer
 20100f0:	183c3080 	call	183c308 <__errno>
	ldw		r3, 116(sp)		# get errno from the stack
 20100f4:	d8c01d17 	ldw	r3,116(sp)
	stw		r3, 0(r2)		# restore the global errno for this task
 20100f8:	10c00015 	stw	r3,0(r2)

	ldw		ra, 0(sp)		# Restore the registers.
 20100fc:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 2010100:	d8400217 	ldw	at,8(sp)

	ldw		r2, 12(sp)		# now restore r2 from the stack
 2010104:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 2010108:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 201010c:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 2010110:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 2010114:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 2010118:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 201011c:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 2010120:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 2010124:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 2010128:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 201012c:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 2010130:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 2010134:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 2010138:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 201013c:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 2010140:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 2010144:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 2010148:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 201014c:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 2010150:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 2010154:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 2010158:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 201015c:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 2010160:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 2010164:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 2010168:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 201016c:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 120		# Release stack space
 2010170:	dec01e04 	addi	sp,sp,120

    eret					# Return to address ea, loading eStatus into Status.
 2010174:	ef80083a 	eret

02010178 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 2010178:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 201017c:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 2010180:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 2010184:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 2010188:	c0000326 	beq	et,zero,2010198 <call_scheduler>
#ifdef ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API
  	mov		r4, ea									# load the PC of the exception into r4
 201018c:	e809883a 	mov	r4,ea
  	call	alt_instruction_exception_entry			# call the invalid instruction parser and bring up the instruction in the callback
 2010190:	20101b00 	call	20101b0 <alt_instruction_exception_entry>
#else
  	break							# This is an un-implemented instruction or muldiv problem.
#endif
  	br		restore_context			# its something else
 2010194:	003fd606 	br	20100f0 <__ram_exceptions_end+0xfffffe00>

02010198 <call_scheduler>:

call_scheduler:

	call	xTaskGetSchedulerState			# Only restore stack if scheduler has been started
 2010198:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
    beq		r2,	zero,	restore_context		# If xTaskGetSchedulerState returns 0 it has not been started yet
 201019c:	103fd426 	beq	r2,zero,20100f0 <__ram_exceptions_end+0xfffffe00>

	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 20101a0:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 20101a4:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 20101a8:	180ffb00 	call	180ffb0 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore.
 20101ac:	003fca06 	br	20100d8 <__ram_exceptions_end+0xfffffde8>

020101b0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20101b0:	defffb04 	addi	sp,sp,-20
 20101b4:	dfc00415 	stw	ra,16(sp)
 20101b8:	df000315 	stw	fp,12(sp)
 20101bc:	df000304 	addi	fp,sp,12
 20101c0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20101c4:	000531fa 	rdctl	r2,exception
 20101c8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20101cc:	e0bffd17 	ldw	r2,-12(fp)
 20101d0:	10801f0c 	andi	r2,r2,124
 20101d4:	1004d0ba 	srli	r2,r2,2
 20101d8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20101dc:	0005333a 	rdctl	r2,badaddr
 20101e0:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20101e4:	d0a80517 	ldw	r2,-24556(gp)
 20101e8:	10000726 	beq	r2,zero,2010208 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20101ec:	d0a80517 	ldw	r2,-24556(gp)
 20101f0:	e0fffd17 	ldw	r3,-12(fp)
 20101f4:	e1bffe17 	ldw	r6,-8(fp)
 20101f8:	e17fff17 	ldw	r5,-4(fp)
 20101fc:	1809883a 	mov	r4,r3
 2010200:	103ee83a 	callr	r2
 2010204:	00000206 	br	2010210 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2010208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 201020c:	0005883a 	mov	r2,zero
}
 2010210:	e037883a 	mov	sp,fp
 2010214:	dfc00117 	ldw	ra,4(sp)
 2010218:	df000017 	ldw	fp,0(sp)
 201021c:	dec00204 	addi	sp,sp,8
 2010220:	f800283a 	ret

02010224 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 2010224:	defff904 	addi	sp,sp,-28
 2010228:	dfc00615 	stw	ra,24(sp)
 201022c:	df000515 	stw	fp,20(sp)
 2010230:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2010234:	0005313a 	rdctl	r2,ipending
 2010238:	e0bffe15 	stw	r2,-8(fp)

  return active;
 201023c:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2010240:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2010244:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2010248:	00800044 	movi	r2,1
 201024c:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2010250:	e0fffb17 	ldw	r3,-20(fp)
 2010254:	e0bffc17 	ldw	r2,-16(fp)
 2010258:	1884703a 	and	r2,r3,r2
 201025c:	10001426 	beq	r2,zero,20102b0 <alt_irq_handler+0x8c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 2010260:	00806134 	movhi	r2,388
 2010264:	109ee204 	addi	r2,r2,31624
 2010268:	e0fffd17 	ldw	r3,-12(fp)
 201026c:	180690fa 	slli	r3,r3,3
 2010270:	10c5883a 	add	r2,r2,r3
 2010274:	10c00017 	ldw	r3,0(r2)
 2010278:	00806134 	movhi	r2,388
 201027c:	109ee204 	addi	r2,r2,31624
 2010280:	e13ffd17 	ldw	r4,-12(fp)
 2010284:	200890fa 	slli	r4,r4,3
 2010288:	1105883a 	add	r2,r2,r4
 201028c:	10800104 	addi	r2,r2,4
 2010290:	10800017 	ldw	r2,0(r2)
 2010294:	1009883a 	mov	r4,r2
 2010298:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 201029c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20102a0:	0005313a 	rdctl	r2,ipending
 20102a4:	e0bfff15 	stw	r2,-4(fp)

  return active;
 20102a8:	e0bfff17 	ldw	r2,-4(fp)
 20102ac:	00000706 	br	20102cc <alt_irq_handler+0xa8>
      }
      mask <<= 1;
 20102b0:	e0bffc17 	ldw	r2,-16(fp)
 20102b4:	1085883a 	add	r2,r2,r2
 20102b8:	e0bffc15 	stw	r2,-16(fp)
      i++;
 20102bc:	e0bffd17 	ldw	r2,-12(fp)
 20102c0:	10800044 	addi	r2,r2,1
 20102c4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20102c8:	003fe106 	br	2010250 <__ram_exceptions_end+0xffffff60>

    active = alt_irq_pending ();
 20102cc:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20102d0:	e0bffb17 	ldw	r2,-20(fp)
 20102d4:	103fdb1e 	bne	r2,zero,2010244 <__ram_exceptions_end+0xffffff54>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20102d8:	0001883a 	nop
 20102dc:	e037883a 	mov	sp,fp
 20102e0:	dfc00117 	ldw	ra,4(sp)
 20102e4:	df000017 	ldw	fp,0(sp)
 20102e8:	dec00204 	addi	sp,sp,8
 20102ec:	f800283a 	ret

Disassembly of section .text:

018002d0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 18002d0:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 18002d4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 18002d8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 18002dc:	00bffd16 	blt	zero,r2,18002d4 <__ram_exceptions_end+0xff7effe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 18002e0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 18002e4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 18002e8:	06806134 	movhi	gp,388
    ori gp, gp, %lo(_gp)
 18002ec:	d6b46814 	ori	gp,gp,53664
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 18002f0:	00806134 	movhi	r2,388
    ori r2, r2, %lo(__bss_start)
 18002f4:	109c2c14 	ori	r2,r2,28848

    movhi r3, %hi(__bss_end)
 18002f8:	00c06134 	movhi	r3,388
    ori r3, r3, %lo(__bss_end)
 18002fc:	18df2214 	ori	r3,r3,31880

    beq r2, r3, 1f
 1800300:	10c00326 	beq	r2,r3,1800310 <_start+0x40>

0:
    stw zero, (r2)
 1800304:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1800308:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 180030c:	10fffd36 	bltu	r2,r3,1800304 <__ram_exceptions_end+0xff7f0014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1800310:	1812a380 	call	1812a38 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1800314:	180d3800 	call	180d380 <alt_main>

01800318 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1800318:	003fff06 	br	1800318 <__ram_exceptions_end+0xff7f0028>

0180031c <vApplicationMallocFailedHook>:

static int nw_ready;
static sys_thread_t main_thread_handle;

// hook functions
void vApplicationMallocFailedHook(){
 180031c:	defffe04 	addi	sp,sp,-8
 1800320:	dfc00115 	stw	ra,4(sp)
 1800324:	df000015 	stw	fp,0(sp)
 1800328:	d839883a 	mov	fp,sp
    for(;;){
        vTaskDelay(pdMS_TO_TICKS(1000));
 180032c:	0100fa04 	movi	r4,1000
 1800330:	180f1d80 	call	180f1d8 <vTaskDelay>
        alt_printf("vApplicationMallocFailedHook \r\n");
 1800334:	01006134 	movhi	r4,388
 1800338:	2100ce04 	addi	r4,r4,824
 180033c:	1812e200 	call	1812e20 <alt_printf>
    }
 1800340:	003ffa06 	br	180032c <__ram_exceptions_end+0xff7f003c>

01800344 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName ){
 1800344:	defffc04 	addi	sp,sp,-16
 1800348:	dfc00315 	stw	ra,12(sp)
 180034c:	df000215 	stw	fp,8(sp)
 1800350:	df000204 	addi	fp,sp,8
 1800354:	e13ffe15 	stw	r4,-8(fp)
 1800358:	e17fff15 	stw	r5,-4(fp)
    for(;;){
        vTaskDelay(pdMS_TO_TICKS(1000));
 180035c:	0100fa04 	movi	r4,1000
 1800360:	180f1d80 	call	180f1d8 <vTaskDelay>
        alt_printf("vApplicationStackOverflowHook \r\n");
 1800364:	01006134 	movhi	r4,388
 1800368:	2100d604 	addi	r4,r4,856
 180036c:	1812e200 	call	1812e20 <alt_printf>
    }
 1800370:	003ffa06 	br	180035c <__ram_exceptions_end+0xff7f006c>

01800374 <StatusCallback>:
}

// callback function for when the DHCP subsystem acquires an IP address.
static void StatusCallback(struct netif* netif)
{
 1800374:	deffbd04 	addi	sp,sp,-268
 1800378:	dfc04215 	stw	ra,264(sp)
 180037c:	df004115 	stw	fp,260(sp)
 1800380:	df004104 	addi	fp,sp,260
 1800384:	e13fff15 	stw	r4,-4(fp)
	// get IP and stuff
	printf("[ethernet] Acquired IP address via DHCP client for interface: %s\n", netif->name);
 1800388:	e0bfff17 	ldw	r2,-4(fp)
 180038c:	10800e84 	addi	r2,r2,58
 1800390:	100b883a 	mov	r5,r2
 1800394:	01006134 	movhi	r4,388
 1800398:	2100df04 	addi	r4,r4,892
 180039c:	1800b240 	call	1800b24 <printf>

	char buf[255];

	print_ipad(netif->ip_addr.addr, buf);
 18003a0:	e0bfff17 	ldw	r2,-4(fp)
 18003a4:	10800117 	ldw	r2,4(r2)
 18003a8:	e17fbf04 	addi	r5,fp,-260
 18003ac:	1009883a 	mov	r4,r2
 18003b0:	1813e740 	call	1813e74 <print_ipad>
	printf("[ethernet] IP address : %s\n", buf);
 18003b4:	e17fbf04 	addi	r5,fp,-260
 18003b8:	01006134 	movhi	r4,388
 18003bc:	2100f004 	addi	r4,r4,960
 18003c0:	1800b240 	call	1800b24 <printf>

	print_ipad(netif->netmask.addr, buf);
 18003c4:	e0bfff17 	ldw	r2,-4(fp)
 18003c8:	10800217 	ldw	r2,8(r2)
 18003cc:	e17fbf04 	addi	r5,fp,-260
 18003d0:	1009883a 	mov	r4,r2
 18003d4:	1813e740 	call	1813e74 <print_ipad>
	printf("[ethernet] Subnet     : %s\n", buf);
 18003d8:	e17fbf04 	addi	r5,fp,-260
 18003dc:	01006134 	movhi	r4,388
 18003e0:	2100f704 	addi	r4,r4,988
 18003e4:	1800b240 	call	1800b24 <printf>

    print_ipad(netif->gw.addr, buf);
 18003e8:	e0bfff17 	ldw	r2,-4(fp)
 18003ec:	10800317 	ldw	r2,12(r2)
 18003f0:	e17fbf04 	addi	r5,fp,-260
 18003f4:	1009883a 	mov	r4,r2
 18003f8:	1813e740 	call	1813e74 <print_ipad>
	printf("[ethernet] Gateway    : %s\n", buf);
 18003fc:	e17fbf04 	addi	r5,fp,-260
 1800400:	01006134 	movhi	r4,388
 1800404:	2100fe04 	addi	r4,r4,1016
 1800408:	1800b240 	call	1800b24 <printf>
}
 180040c:	0001883a 	nop
 1800410:	e037883a 	mov	sp,fp
 1800414:	dfc00117 	ldw	ra,4(sp)
 1800418:	df000017 	ldw	fp,0(sp)
 180041c:	dec00204 	addi	sp,sp,8
 1800420:	f800283a 	ret

01800424 <LinkCallback>:

static void LinkCallback(struct netif* netif)
{
 1800424:	defffd04 	addi	sp,sp,-12
 1800428:	dfc00215 	stw	ra,8(sp)
 180042c:	df000115 	stw	fp,4(sp)
 1800430:	df000104 	addi	fp,sp,4
 1800434:	e13fff15 	stw	r4,-4(fp)
	// link change callback
	// TODO release semaphore
	// TODO switch context

	alt_printf("[ethernet] Link Callback for interface: %s\n", netif->name);
 1800438:	e0bfff17 	ldw	r2,-4(fp)
 180043c:	10800e84 	addi	r2,r2,58
 1800440:	100b883a 	mov	r5,r2
 1800444:	01006134 	movhi	r4,388
 1800448:	21010504 	addi	r4,r4,1044
 180044c:	1812e200 	call	1812e20 <alt_printf>
}
 1800450:	0001883a 	nop
 1800454:	e037883a 	mov	sp,fp
 1800458:	dfc00117 	ldw	ra,4(sp)
 180045c:	df000017 	ldw	fp,0(sp)
 1800460:	dec00204 	addi	sp,sp,8
 1800464:	f800283a 	ret

01800468 <InitNetwork>:

int InitNetwork(void)
{
 1800468:	defffe04 	addi	sp,sp,-8
 180046c:	dfc00115 	stw	ra,4(sp)
 1800470:	df000015 	stw	fp,0(sp)
 1800474:	d839883a 	mov	fp,sp
	// register new DHCP "IP attained" callback function.
	// if DHCP is acquired, ws_ipset will be called instead of dhc_main_ipset().
	lwip_set_status_callback(StatusCallback);
 1800478:	01006034 	movhi	r4,384
 180047c:	2100dd04 	addi	r4,r4,884
 1800480:	1813c480 	call	1813c48 <lwip_set_status_callback>
	lwip_set_link_callback(LinkCallback);
 1800484:	01006034 	movhi	r4,384
 1800488:	21010904 	addi	r4,r4,1060
 180048c:	1813c7c0 	call	1813c7c <lwip_set_link_callback>

	// Initialize LwIP TCP/IP stack.
	// This function is blocking till the the interface is up.
	lwip_initialize(1);
 1800490:	01000044 	movi	r4,1
 1800494:	18137980 	call	1813798 <lwip_initialize>

	return EXIT_SUCCESS;
 1800498:	0005883a 	mov	r2,zero
}
 180049c:	e037883a 	mov	sp,fp
 18004a0:	dfc00117 	ldw	ra,4(sp)
 18004a4:	df000017 	ldw	fp,0(sp)
 18004a8:	dec00204 	addi	sp,sp,8
 18004ac:	f800283a 	ret

018004b0 <WaitOnPHY>:

static int WaitOnPHY(void)
{
 18004b0:	defff904 	addi	sp,sp,-28
 18004b4:	dfc00615 	stw	ra,24(sp)
 18004b8:	df000515 	stw	fp,20(sp)
 18004bc:	df000504 	addi	fp,sp,20
	int phyadd;
	int phyid;
	int phyid2 = 0;
 18004c0:	e03ffd15 	stw	zero,-12(fp)

	np_tse_mac* pmac;
	bool bInitialized = false;
 18004c4:	e03fff05 	stb	zero,-4(fp)

	while (!bInitialized) {
 18004c8:	00003606 	br	18005a4 <WaitOnPHY+0xf4>
		alt_printf("[ethernet] PHY INFO: Interface: %d Waiting for PHY\n", 0);
 18004cc:	000b883a 	mov	r5,zero
 18004d0:	01006134 	movhi	r4,388
 18004d4:	21011004 	addi	r4,r4,1088
 18004d8:	1812e200 	call	1812e20 <alt_printf>

		// initialize the structure necessary for "pmac" to function.
		pmac = (np_tse_mac*)TSE_MAC_0_BASE;
 18004dc:	00880004 	movi	r2,8192
 18004e0:	e0bffe15 	stw	r2,-8(fp)


		for (phyadd = 0x00; phyadd < 0xff; phyadd++) {
 18004e4:	e03ffb15 	stw	zero,-20(fp)
 18004e8:	00001a06 	br	1800554 <WaitOnPHY+0xa4>
			IOWR(&pmac->MDIO_ADDR0, 0, phyadd);
 18004ec:	e0bffe17 	ldw	r2,-8(fp)
 18004f0:	10800f04 	addi	r2,r2,60
 18004f4:	e0fffb17 	ldw	r3,-20(fp)
 18004f8:	10c00035 	stwio	r3,0(r2)

			phyid = IORD(&pmac->MDIO_IFACE.PHY_ID1, 0);
 18004fc:	e0bffe17 	ldw	r2,-8(fp)
 1800500:	1080a204 	addi	r2,r2,648
 1800504:	10800037 	ldwio	r2,0(r2)
 1800508:	e0bffc15 	stw	r2,-16(fp)
			phyid2 = IORD(&pmac->MDIO_IFACE.PHY_ID2, 0);
 180050c:	e0bffe17 	ldw	r2,-8(fp)
 1800510:	1080a304 	addi	r2,r2,652
 1800514:	10800037 	ldwio	r2,0(r2)
 1800518:	e0bffd15 	stw	r2,-12(fp)

			if (phyid != phyid2) {
 180051c:	e0fffc17 	ldw	r3,-16(fp)
 1800520:	e0bffd17 	ldw	r2,-12(fp)
 1800524:	18800826 	beq	r3,r2,1800548 <WaitOnPHY+0x98>
				alt_printf("[ethernet] PHY INFO: [PHY ID] 0x%x %x %x\n", phyadd, phyid, phyid2);
 1800528:	e1fffd17 	ldw	r7,-12(fp)
 180052c:	e1bffc17 	ldw	r6,-16(fp)
 1800530:	e17ffb17 	ldw	r5,-20(fp)
 1800534:	01006134 	movhi	r4,388
 1800538:	21011d04 	addi	r4,r4,1140
 180053c:	1812e200 	call	1812e20 <alt_printf>
				phyadd = 0xff;
 1800540:	00803fc4 	movi	r2,255
 1800544:	e0bffb15 	stw	r2,-20(fp)

		// initialize the structure necessary for "pmac" to function.
		pmac = (np_tse_mac*)TSE_MAC_0_BASE;


		for (phyadd = 0x00; phyadd < 0xff; phyadd++) {
 1800548:	e0bffb17 	ldw	r2,-20(fp)
 180054c:	10800044 	addi	r2,r2,1
 1800550:	e0bffb15 	stw	r2,-20(fp)
 1800554:	e0bffb17 	ldw	r2,-20(fp)
 1800558:	10803fd0 	cmplti	r2,r2,255
 180055c:	103fe31e 	bne	r2,zero,18004ec <__ram_exceptions_end+0xff7f01fc>
				alt_printf("[ethernet] PHY INFO: [PHY ID] 0x%x %x %x\n", phyadd, phyid, phyid2);
				phyadd = 0xff;
			}
		}

		if ((phyadd == 0xff) && (phyid == phyid2)) {
 1800560:	e0bffb17 	ldw	r2,-20(fp)
 1800564:	10803fd8 	cmpnei	r2,r2,255
 1800568:	10000c1e 	bne	r2,zero,180059c <WaitOnPHY+0xec>
 180056c:	e0fffc17 	ldw	r3,-16(fp)
 1800570:	e0bffd17 	ldw	r2,-12(fp)
 1800574:	1880091e 	bne	r3,r2,180059c <WaitOnPHY+0xec>
			alt_printf("[ethernet] PHY INFO: No PHY found... restart detect\n");
 1800578:	01006134 	movhi	r4,388
 180057c:	21012804 	addi	r4,r4,1184
 1800580:	1812e200 	call	1812e20 <alt_printf>
			bInitialized = true;
 1800584:	00800044 	movi	r2,1
 1800588:	e0bfff05 	stb	r2,-4(fp)
			mssleep(1000);
 180058c:	010003f4 	movhi	r4,15
 1800590:	21109004 	addi	r4,r4,16960
 1800594:	181319c0 	call	181319c <usleep>
				alt_printf("[ethernet] PHY INFO: [PHY ID] 0x%x %x %x\n", phyadd, phyid, phyid2);
				phyadd = 0xff;
			}
		}

		if ((phyadd == 0xff) && (phyid == phyid2)) {
 1800598:	00000206 	br	18005a4 <WaitOnPHY+0xf4>
			alt_printf("[ethernet] PHY INFO: No PHY found... restart detect\n");
			bInitialized = true;
			mssleep(1000);
		}
		else
			bInitialized = true;
 180059c:	00800044 	movi	r2,1
 18005a0:	e0bfff05 	stb	r2,-4(fp)
	int phyid2 = 0;

	np_tse_mac* pmac;
	bool bInitialized = false;

	while (!bInitialized) {
 18005a4:	e0bfff03 	ldbu	r2,-4(fp)
 18005a8:	1080005c 	xori	r2,r2,1
 18005ac:	10803fcc 	andi	r2,r2,255
 18005b0:	103fc61e 	bne	r2,zero,18004cc <__ram_exceptions_end+0xff7f01dc>
		else
			bInitialized = true;
	}

	// issue a PHY reset.
	IOWR(&pmac->MDIO_IFACE.CONTROL, 0, PCS_CTL_an_enable | PCS_CTL_sw_reset);
 18005b4:	e0bffe17 	ldw	r2,-8(fp)
 18005b8:	1080a004 	addi	r2,r2,640
 18005bc:	00e40014 	movui	r3,36864
 18005c0:	10c00035 	stwio	r3,0(r2)
	if (((IORD(&pmac->MDIO_IFACE.CONTROL, 0) & PCS_CTL_rx_slpbk) != 0) || ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0)) {
 18005c4:	e0bffe17 	ldw	r2,-8(fp)
 18005c8:	1080a004 	addi	r2,r2,640
 18005cc:	10800037 	ldwio	r2,0(r2)
 18005d0:	1090000c 	andi	r2,r2,16384
 18005d4:	1000051e 	bne	r2,zero,18005ec <WaitOnPHY+0x13c>
 18005d8:	e0bffe17 	ldw	r2,-8(fp)
 18005dc:	1080a104 	addi	r2,r2,644
 18005e0:	10800037 	ldwio	r2,0(r2)
 18005e4:	1080080c 	andi	r2,r2,32
 18005e8:	1000071e 	bne	r2,zero,1800608 <WaitOnPHY+0x158>
		IOWR(&pmac->MDIO_IFACE.CONTROL, 0, PCS_CTL_an_enable | PCS_CTL_sw_reset);
 18005ec:	e0bffe17 	ldw	r2,-8(fp)
 18005f0:	1080a004 	addi	r2,r2,640
 18005f4:	00e40014 	movui	r3,36864
 18005f8:	10c00035 	stwio	r3,0(r2)
		alt_printf("[ethernet] PHY INFO: Issuing PHY Reset\n");
 18005fc:	01006134 	movhi	r4,388
 1800600:	21013604 	addi	r4,r4,1240
 1800604:	1812e200 	call	1812e20 <alt_printf>
	}

	// holding pattern until autonegotiation completes.
	if ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0) {
 1800608:	e0bffe17 	ldw	r2,-8(fp)
 180060c:	1080a104 	addi	r2,r2,644
 1800610:	10800037 	ldwio	r2,0(r2)
 1800614:	1080080c 	andi	r2,r2,32
 1800618:	1000111e 	bne	r2,zero,1800660 <WaitOnPHY+0x1b0>
		alt_printf("[ethernet] PHY INFO: Waiting on PHY link...\n");
 180061c:	01006134 	movhi	r4,388
 1800620:	21014004 	addi	r4,r4,1280
 1800624:	1812e200 	call	1812e20 <alt_printf>

		while ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0)
 1800628:	00000206 	br	1800634 <WaitOnPHY+0x184>
			mssleep(10);
 180062c:	0109c404 	movi	r4,10000
 1800630:	181319c0 	call	181319c <usleep>

	// holding pattern until autonegotiation completes.
	if ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0) {
		alt_printf("[ethernet] PHY INFO: Waiting on PHY link...\n");

		while ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0)
 1800634:	e0bffe17 	ldw	r2,-8(fp)
 1800638:	1080a104 	addi	r2,r2,644
 180063c:	10800037 	ldwio	r2,0(r2)
 1800640:	1080080c 	andi	r2,r2,32
 1800644:	103ff926 	beq	r2,zero,180062c <__ram_exceptions_end+0xff7f033c>
			mssleep(10);

		alt_printf("[ethernet] PHY INFO: PHY link detected, allowing network to start.\n");
 1800648:	01006134 	movhi	r4,388
 180064c:	21014c04 	addi	r4,r4,1328
 1800650:	1812e200 	call	1812e20 <alt_printf>
		
		mssleep(1000);
 1800654:	010003f4 	movhi	r4,15
 1800658:	21109004 	addi	r4,r4,16960
 180065c:	181319c0 	call	181319c <usleep>
	}

	mssleep(10);
 1800660:	0109c404 	movi	r4,10000
 1800664:	181319c0 	call	181319c <usleep>

	return 0;
 1800668:	0005883a 	mov	r2,zero
}
 180066c:	e037883a 	mov	sp,fp
 1800670:	dfc00117 	ldw	ra,4(sp)
 1800674:	df000017 	ldw	fp,0(sp)
 1800678:	dec00204 	addi	sp,sp,8
 180067c:	f800283a 	ret

01800680 <PingThread>:

void PingThread(void* arg)
{
 1800680:	defffd04 	addi	sp,sp,-12
 1800684:	dfc00215 	stw	ra,8(sp)
 1800688:	df000115 	stw	fp,4(sp)
 180068c:	df000104 	addi	fp,sp,4
 1800690:	e13fff15 	stw	r4,-4(fp)
	IP4_ADDR(&PingIp, 192, 168, 1, 100);
 1800694:	009900b4 	movhi	r2,25602
 1800698:	10aa3004 	addi	r2,r2,-22336
 180069c:	d0a7c615 	stw	r2,-24808(gp)
	//netif

	// keep checking our network status, are we connected or disconnected?
	while (1) {
		//ethernetif_input(&alteraTseNetif);
        lwip_ping_target(PingIp.addr, 10, 0, 100);
 18006a0:	d0a7c617 	ldw	r2,-24808(gp)
 18006a4:	01c01904 	movi	r7,100
 18006a8:	000d883a 	mov	r6,zero
 18006ac:	01400284 	movi	r5,10
 18006b0:	1009883a 	mov	r4,r2
 18006b4:	1823ff80 	call	1823ff8 <lwip_ping_target>
		// sleep for 1 second

	}
 18006b8:	003ff906 	br	18006a0 <__ram_exceptions_end+0xff7f03b0>

018006bc <xEthernetRun>:
}


void xEthernetRun()
{
 18006bc:	defffe04 	addi	sp,sp,-8
 18006c0:	dfc00115 	stw	ra,4(sp)
 18006c4:	df000015 	stw	fp,0(sp)
 18006c8:	d839883a 	mov	fp,sp
    alt_printf("--------- Init Network ---------\r\n");
 18006cc:	01006134 	movhi	r4,388
 18006d0:	21015d04 	addi	r4,r4,1396
 18006d4:	1812e200 	call	1812e20 <alt_printf>

	// initialize PHY
	WaitOnPHY();
 18006d8:	18004b00 	call	18004b0 <WaitOnPHY>

	if (InitNetwork() != EXIT_SUCCESS) {
 18006dc:	18004680 	call	1800468 <InitNetwork>
 18006e0:	10000326 	beq	r2,zero,18006f0 <xEthernetRun+0x34>
		// the network initialization has failed.
		alt_printf("[ethernet] Network initialize failed!\n");
 18006e4:	01006134 	movhi	r4,388
 18006e8:	21016604 	addi	r4,r4,1432
 18006ec:	1812e200 	call	1812e20 <alt_printf>
	}

    nw_ready = 1;
 18006f0:	00800044 	movi	r2,1
 18006f4:	d0a7c415 	stw	r2,-24816(gp)
	alt_printf("--------- Init Done ---------\r\n");
 18006f8:	01006134 	movhi	r4,388
 18006fc:	21017004 	addi	r4,r4,1472
 1800700:	1812e200 	call	1812e20 <alt_printf>
    // starting the network thread
    /*sys_thread_new("ping", PingThread, NULL,
    		THREAD_STACKSIZE,
            DEFAULT_THREAD_PRIO);*/

	IP4_ADDR(&PingIp, 192, 168, 1, 100);
 1800704:	009900b4 	movhi	r2,25602
 1800708:	10aa3004 	addi	r2,r2,-22336
 180070c:	d0a7c615 	stw	r2,-24808(gp)
	for (;;) {

        lwip_ping_target(PingIp.addr, 10, 0, 100);
 1800710:	d0a7c617 	ldw	r2,-24808(gp)
 1800714:	01c01904 	movi	r7,100
 1800718:	000d883a 	mov	r6,zero
 180071c:	01400284 	movi	r5,10
 1800720:	1009883a 	mov	r4,r2
 1800724:	1823ff80 	call	1823ff8 <lwip_ping_target>
		// sleep for 1 second
		//lwip_ping_target(PingIp.addr, 10, 0, 100);
		alt_printf("Rx Count: %d \r\n", ethernetif_input((struct netif*)get_netif(0)));
 1800728:	0009883a 	mov	r4,zero
 180072c:	1813c000 	call	1813c00 <get_netif>
 1800730:	1009883a 	mov	r4,r2
 1800734:	18134cc0 	call	18134cc <ethernetif_input>
 1800738:	100b883a 	mov	r5,r2
 180073c:	01006134 	movhi	r4,388
 1800740:	21017804 	addi	r4,r4,1504
 1800744:	1812e200 	call	1812e20 <alt_printf>

        mssleep(1000);
 1800748:	010003f4 	movhi	r4,15
 180074c:	21109004 	addi	r4,r4,16960
 1800750:	181319c0 	call	181319c <usleep>
	}
 1800754:	003fee06 	br	1800710 <__ram_exceptions_end+0xff7f0420>

01800758 <get_mac_addr>:
    //vTaskDelete(NULL);
}

// callback wrapper for lwip to get the interface configurations
int get_mac_addr(int iface, struct netif* ethif, unsigned char mac_addr[6])
{
 1800758:	defff704 	addi	sp,sp,-36
 180075c:	dfc00815 	stw	ra,32(sp)
 1800760:	df000715 	stw	fp,28(sp)
 1800764:	df000704 	addi	fp,sp,28
 1800768:	e13ffd15 	stw	r4,-12(fp)
 180076c:	e17ffe15 	stw	r5,-8(fp)
 1800770:	e1bfff15 	stw	r6,-4(fp)
	mac_addr[0] = 0x12;
 1800774:	e0bfff17 	ldw	r2,-4(fp)
 1800778:	00c00484 	movi	r3,18
 180077c:	10c00005 	stb	r3,0(r2)
	mac_addr[1] = 0x23;
 1800780:	e0bfff17 	ldw	r2,-4(fp)
 1800784:	10800044 	addi	r2,r2,1
 1800788:	00c008c4 	movi	r3,35
 180078c:	10c00005 	stb	r3,0(r2)
	mac_addr[2] = 0x45;
 1800790:	e0bfff17 	ldw	r2,-4(fp)
 1800794:	10800084 	addi	r2,r2,2
 1800798:	00c01144 	movi	r3,69
 180079c:	10c00005 	stb	r3,0(r2)
	mac_addr[3] = 0xFF;
 18007a0:	e0bfff17 	ldw	r2,-4(fp)
 18007a4:	108000c4 	addi	r2,r2,3
 18007a8:	00ffffc4 	movi	r3,-1
 18007ac:	10c00005 	stb	r3,0(r2)
	mac_addr[4] = 0xFF;
 18007b0:	e0bfff17 	ldw	r2,-4(fp)
 18007b4:	10800104 	addi	r2,r2,4
 18007b8:	00ffffc4 	movi	r3,-1
 18007bc:	10c00005 	stb	r3,0(r2)
	mac_addr[5] = 0xF0 + iface;
 18007c0:	e0bfff17 	ldw	r2,-4(fp)
 18007c4:	10800144 	addi	r2,r2,5
 18007c8:	e0fffd17 	ldw	r3,-12(fp)
 18007cc:	18fffc04 	addi	r3,r3,-16
 18007d0:	10c00005 	stb	r3,0(r2)

	// only show info if net is not NULL
	if (ethif)
 18007d4:	e0bffe17 	ldw	r2,-8(fp)
 18007d8:	10002026 	beq	r2,zero,180085c <get_mac_addr+0x104>
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 18007dc:	e0bfff17 	ldw	r2,-4(fp)
 18007e0:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 18007e4:	12003fcc 	andi	r8,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 18007e8:	e0bfff17 	ldw	r2,-4(fp)
 18007ec:	10800044 	addi	r2,r2,1
 18007f0:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 18007f4:	11803fcc 	andi	r6,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 18007f8:	e0bfff17 	ldw	r2,-4(fp)
 18007fc:	10800084 	addi	r2,r2,2
 1800800:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 1800804:	11c03fcc 	andi	r7,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 1800808:	e0bfff17 	ldw	r2,-4(fp)
 180080c:	108000c4 	addi	r2,r2,3
 1800810:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 1800814:	10803fcc 	andi	r2,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 1800818:	e0ffff17 	ldw	r3,-4(fp)
 180081c:	18c00104 	addi	r3,r3,4
 1800820:	18c00003 	ldbu	r3,0(r3)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 1800824:	18c03fcc 	andi	r3,r3,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 1800828:	e13fff17 	ldw	r4,-4(fp)
 180082c:	21000144 	addi	r4,r4,5
 1800830:	21000003 	ldbu	r4,0(r4)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 1800834:	21003fcc 	andi	r4,r4,255
 1800838:	e17ffd17 	ldw	r5,-12(fp)
 180083c:	d9400315 	stw	r5,12(sp)
 1800840:	d9000215 	stw	r4,8(sp)
 1800844:	d8c00115 	stw	r3,4(sp)
 1800848:	d8800015 	stw	r2,0(sp)
 180084c:	400b883a 	mov	r5,r8
 1800850:	01006134 	movhi	r4,388
 1800854:	21017c04 	addi	r4,r4,1520
 1800858:	1800b240 	call	1800b24 <printf>
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);

	return EXIT_SUCCESS;
 180085c:	0005883a 	mov	r2,zero
}
 1800860:	e037883a 	mov	sp,fp
 1800864:	dfc00117 	ldw	ra,4(sp)
 1800868:	df000017 	ldw	fp,0(sp)
 180086c:	dec00204 	addi	sp,sp,8
 1800870:	f800283a 	ret

01800874 <get_ip_addr>:

// callback wrapper for lwip to get the IP configurations
int get_ip_addr(int iface, ip_addr_t* ipaddr, ip_addr_t* netmask, ip_addr_t* gw, int* use_dhcp)
{
 1800874:	deffba04 	addi	sp,sp,-280
 1800878:	dfc04515 	stw	ra,276(sp)
 180087c:	df004415 	stw	fp,272(sp)
 1800880:	df004404 	addi	fp,sp,272
 1800884:	e13ffc15 	stw	r4,-16(fp)
 1800888:	e17ffd15 	stw	r5,-12(fp)
 180088c:	e1bffe15 	stw	r6,-8(fp)
 1800890:	e1ffff15 	stw	r7,-4(fp)
	// set configuration
	IP4_ADDR(ipaddr, 192, 168, 1, 218);
 1800894:	e0fffd17 	ldw	r3,-12(fp)
 1800898:	00b680b4 	movhi	r2,55810
 180089c:	10aa3004 	addi	r2,r2,-22336
 18008a0:	18800015 	stw	r2,0(r3)
	IP4_ADDR(netmask, 255, 255, 255, 0);
 18008a4:	e0fffe17 	ldw	r3,-8(fp)
 18008a8:	00804034 	movhi	r2,256
 18008ac:	10bfffc4 	addi	r2,r2,-1
 18008b0:	18800015 	stw	r2,0(r3)
	IP4_ADDR(gw, 192, 168, 1, 1);
 18008b4:	e0ffff17 	ldw	r3,-4(fp)
 18008b8:	008040b4 	movhi	r2,258
 18008bc:	10aa3004 	addi	r2,r2,-22336
 18008c0:	18800015 	stw	r2,0(r3)
	*use_dhcp = 0;
 18008c4:	e0800217 	ldw	r2,8(fp)
 18008c8:	10000015 	stw	zero,0(r2)

	if (*use_dhcp == 0){
 18008cc:	e0800217 	ldw	r2,8(fp)
 18008d0:	10800017 	ldw	r2,0(r2)
 18008d4:	10000b1e 	bne	r2,zero,1800904 <get_ip_addr+0x90>
		char buf[255];
		print_ipad(ipaddr->addr, buf);
 18008d8:	e0bffd17 	ldw	r2,-12(fp)
 18008dc:	10800017 	ldw	r2,0(r2)
 18008e0:	e17fbc04 	addi	r5,fp,-272
 18008e4:	1009883a 	mov	r4,r2
 18008e8:	1813e740 	call	1813e74 <print_ipad>
		printf("[ethernet] Static IP Address for interface %d %s\n", iface, buf);
 18008ec:	e1bfbc04 	addi	r6,fp,-272
 18008f0:	e17ffc17 	ldw	r5,-16(fp)
 18008f4:	01006134 	movhi	r4,388
 18008f8:	21019204 	addi	r4,r4,1608
 18008fc:	1800b240 	call	1800b24 <printf>
 1800900:	00000406 	br	1800914 <get_ip_addr+0xa0>
	}
	else
		printf("[ethernet] Starting get IP via DHCP for interface %d\n", iface);
 1800904:	e17ffc17 	ldw	r5,-16(fp)
 1800908:	01006134 	movhi	r4,388
 180090c:	21019f04 	addi	r4,r4,1660
 1800910:	1800b240 	call	1800b24 <printf>

	return EXIT_SUCCESS;
 1800914:	0005883a 	mov	r2,zero
}
 1800918:	e037883a 	mov	sp,fp
 180091c:	dfc00117 	ldw	ra,4(sp)
 1800920:	df000017 	ldw	fp,0(sp)
 1800924:	dec00204 	addi	sp,sp,8
 1800928:	f800283a 	ret

0180092c <get_hostname>:

int get_hostname(int iface, const char **hostname)
{
 180092c:	defffd04 	addi	sp,sp,-12
 1800930:	df000215 	stw	fp,8(sp)
 1800934:	df000204 	addi	fp,sp,8
 1800938:	e13ffe15 	stw	r4,-8(fp)
 180093c:	e17fff15 	stw	r5,-4(fp)
	*hostname = "LwIP";
 1800940:	e0ffff17 	ldw	r3,-4(fp)
 1800944:	00806134 	movhi	r2,388
 1800948:	1081ad04 	addi	r2,r2,1716
 180094c:	18800015 	stw	r2,0(r3)

	return ERR_OK;
 1800950:	0005883a 	mov	r2,zero
}
 1800954:	e037883a 	mov	sp,fp
 1800958:	df000017 	ldw	fp,0(sp)
 180095c:	dec00104 	addi	sp,sp,4
 1800960:	f800283a 	ret

01800964 <get_iface_name>:

int get_iface_name(int iface, char name[ETH_IFACE_NAME_LENGTH])
{
 1800964:	defffd04 	addi	sp,sp,-12
 1800968:	df000215 	stw	fp,8(sp)
 180096c:	df000204 	addi	fp,sp,8
 1800970:	e13ffe15 	stw	r4,-8(fp)
 1800974:	e17fff15 	stw	r5,-4(fp)
	name[0] = 'e';
 1800978:	e0bfff17 	ldw	r2,-4(fp)
 180097c:	00c01944 	movi	r3,101
 1800980:	10c00005 	stb	r3,0(r2)
	name[1] = (iface + 0x30);
 1800984:	e0bfff17 	ldw	r2,-4(fp)
 1800988:	10800044 	addi	r2,r2,1
 180098c:	e0fffe17 	ldw	r3,-8(fp)
 1800990:	18c00c04 	addi	r3,r3,48
 1800994:	10c00005 	stb	r3,0(r2)

	return ERR_OK;
 1800998:	0005883a 	mov	r2,zero
}
 180099c:	e037883a 	mov	sp,fp
 18009a0:	df000017 	ldw	fp,0(sp)
 18009a4:	dec00104 	addi	sp,sp,4
 18009a8:	f800283a 	ret

018009ac <is_interface_active>:

int is_interface_active(int iface)
{
 18009ac:	defffe04 	addi	sp,sp,-8
 18009b0:	df000115 	stw	fp,4(sp)
 18009b4:	df000104 	addi	fp,sp,4
 18009b8:	e13fff15 	stw	r4,-4(fp)
	return 1;
 18009bc:	00800044 	movi	r2,1
}
 18009c0:	e037883a 	mov	sp,fp
 18009c4:	df000017 	ldw	fp,0(sp)
 18009c8:	dec00104 	addi	sp,sp,4
 18009cc:	f800283a 	ret

018009d0 <main>:


int main(){
 18009d0:	defffd04 	addi	sp,sp,-12
 18009d4:	dfc00215 	stw	ra,8(sp)
 18009d8:	df000115 	stw	fp,4(sp)
 18009dc:	df000104 	addi	fp,sp,4
    main_thread_handle = sys_thread_new("main_thrd", (void(*)(void*))main_thread, 0,
 18009e0:	008000c4 	movi	r2,3
 18009e4:	d8800015 	stw	r2,0(sp)
 18009e8:	01e00014 	movui	r7,32768
 18009ec:	000d883a 	mov	r6,zero
 18009f0:	01406034 	movhi	r5,384
 18009f4:	29428404 	addi	r5,r5,2576
 18009f8:	01006134 	movhi	r4,388
 18009fc:	2101af04 	addi	r4,r4,1724
 1800a00:	18155f40 	call	18155f4 <sys_thread_new>
 1800a04:	d0a7c515 	stw	r2,-24812(gp)
                    THREAD_STACKSIZE,
					DEFAULT_THREAD_PRIO);
    vTaskStartScheduler();
 1800a08:	180f9000 	call	180f900 <vTaskStartScheduler>
    while(1);
 1800a0c:	003fff06 	br	1800a0c <__ram_exceptions_end+0xff7f071c>

01800a10 <main_thread>:
    return 0;
}


int main_thread(){
 1800a10:	defffc04 	addi	sp,sp,-16
 1800a14:	dfc00315 	stw	ra,12(sp)
 1800a18:	df000215 	stw	fp,8(sp)
 1800a1c:	df000204 	addi	fp,sp,8
	alt_printf("------------------------------------------------------\r\n");
 1800a20:	01006134 	movhi	r4,388
 1800a24:	2101b204 	addi	r4,r4,1736
 1800a28:	1812e200 	call	1812e20 <alt_printf>
	alt_printf("--------- Starting OPC UA Server application ---------\r\n");
 1800a2c:	01006134 	movhi	r4,388
 1800a30:	2101c104 	addi	r4,r4,1796
 1800a34:	1812e200 	call	1812e20 <alt_printf>
	alt_printf("------------------------------------------------------\r\n");
 1800a38:	01006134 	movhi	r4,388
 1800a3c:	2101b204 	addi	r4,r4,1736
 1800a40:	1812e200 	call	1812e20 <alt_printf>
	alt_printf("--------- open62541 example created for a    ---------\r\n");
 1800a44:	01006134 	movhi	r4,388
 1800a48:	2101d004 	addi	r4,r4,1856
 1800a4c:	1812e200 	call	1812e20 <alt_printf>
    alt_printf("--------- MicroBlaze design on a Artix7 FPGA ---------\r\n");
 1800a50:	01006134 	movhi	r4,388
 1800a54:	2101df04 	addi	r4,r4,1916
 1800a58:	1812e200 	call	1812e20 <alt_printf>
    alt_printf("------------------------------------------------------\r\n");
 1800a5c:	01006134 	movhi	r4,388
 1800a60:	2101b204 	addi	r4,r4,1736
 1800a64:	1812e200 	call	1812e20 <alt_printf>
    alt_printf("--------- NetTImeLogic GmbH, Switzerland     ---------\r\n");
 1800a68:	01006134 	movhi	r4,388
 1800a6c:	2101ee04 	addi	r4,r4,1976
 1800a70:	1812e200 	call	1812e20 <alt_printf>
    alt_printf("--------- contact@nettimelogic.com           ---------\r\n");
 1800a74:	01006134 	movhi	r4,388
 1800a78:	2101fd04 	addi	r4,r4,2036
 1800a7c:	1812e200 	call	1812e20 <alt_printf>
    alt_printf("------------------------------------------------------\r\n");
 1800a80:	01006134 	movhi	r4,388
 1800a84:	2101b204 	addi	r4,r4,1736
 1800a88:	1812e200 	call	1812e20 <alt_printf>

	xTaskCreate(xEthernetRun, "eth0", KB(4), NULL, tskIDLE_PRIORITY + 2, NULL);
 1800a8c:	d8000115 	stw	zero,4(sp)
 1800a90:	00800084 	movi	r2,2
 1800a94:	d8800015 	stw	r2,0(sp)
 1800a98:	000f883a 	mov	r7,zero
 1800a9c:	01840004 	movi	r6,4096
 1800aa0:	01406134 	movhi	r5,388
 1800aa4:	29420c04 	addi	r5,r5,2096
 1800aa8:	01006034 	movhi	r4,384
 1800aac:	2101af04 	addi	r4,r4,1724
 1800ab0:	180ec140 	call	180ec14 <xTaskCreate>

	sys_thread_new("NetworkInit", xEthernetRun, NULL,
 1800ab4:	008000c4 	movi	r2,3
 1800ab8:	d8800015 	stw	r2,0(sp)
 1800abc:	01e00014 	movui	r7,32768
 1800ac0:	000d883a 	mov	r6,zero
 1800ac4:	01406034 	movhi	r5,384
 1800ac8:	2941af04 	addi	r5,r5,1724
 1800acc:	01006134 	movhi	r4,388
 1800ad0:	21020e04 	addi	r4,r4,2104
 1800ad4:	18155f40 	call	18155f4 <sys_thread_new>
    		THREAD_STACKSIZE,
            DEFAULT_THREAD_PRIO);



	vTaskStartScheduler();
 1800ad8:	180f9000 	call	180f900 <vTaskStartScheduler>
    for(;;)
    return 0;
 1800adc:	0005883a 	mov	r2,zero
}
 1800ae0:	e037883a 	mov	sp,fp
 1800ae4:	dfc00117 	ldw	ra,4(sp)
 1800ae8:	df000017 	ldw	fp,0(sp)
 1800aec:	dec00204 	addi	sp,sp,8
 1800af0:	f800283a 	ret

01800af4 <_printf_r>:
 1800af4:	defffd04 	addi	sp,sp,-12
 1800af8:	2805883a 	mov	r2,r5
 1800afc:	dfc00015 	stw	ra,0(sp)
 1800b00:	d9800115 	stw	r6,4(sp)
 1800b04:	d9c00215 	stw	r7,8(sp)
 1800b08:	21400217 	ldw	r5,8(r4)
 1800b0c:	d9c00104 	addi	r7,sp,4
 1800b10:	100d883a 	mov	r6,r2
 1800b14:	1800b600 	call	1800b60 <___vfprintf_internal_r>
 1800b18:	dfc00017 	ldw	ra,0(sp)
 1800b1c:	dec00304 	addi	sp,sp,12
 1800b20:	f800283a 	ret

01800b24 <printf>:
 1800b24:	defffc04 	addi	sp,sp,-16
 1800b28:	dfc00015 	stw	ra,0(sp)
 1800b2c:	d9400115 	stw	r5,4(sp)
 1800b30:	d9800215 	stw	r6,8(sp)
 1800b34:	d9c00315 	stw	r7,12(sp)
 1800b38:	00806134 	movhi	r2,388
 1800b3c:	10946904 	addi	r2,r2,20900
 1800b40:	10800017 	ldw	r2,0(r2)
 1800b44:	200b883a 	mov	r5,r4
 1800b48:	d9800104 	addi	r6,sp,4
 1800b4c:	11000217 	ldw	r4,8(r2)
 1800b50:	1802d580 	call	1802d58 <__vfprintf_internal>
 1800b54:	dfc00017 	ldw	ra,0(sp)
 1800b58:	dec00404 	addi	sp,sp,16
 1800b5c:	f800283a 	ret

01800b60 <___vfprintf_internal_r>:
 1800b60:	deffb804 	addi	sp,sp,-288
 1800b64:	dfc04715 	stw	ra,284(sp)
 1800b68:	ddc04515 	stw	r23,276(sp)
 1800b6c:	dd404315 	stw	r21,268(sp)
 1800b70:	d9002c15 	stw	r4,176(sp)
 1800b74:	282f883a 	mov	r23,r5
 1800b78:	302b883a 	mov	r21,r6
 1800b7c:	d9c02d15 	stw	r7,180(sp)
 1800b80:	df004615 	stw	fp,280(sp)
 1800b84:	dd804415 	stw	r22,272(sp)
 1800b88:	dd004215 	stw	r20,264(sp)
 1800b8c:	dcc04115 	stw	r19,260(sp)
 1800b90:	dc804015 	stw	r18,256(sp)
 1800b94:	dc403f15 	stw	r17,252(sp)
 1800b98:	dc003e15 	stw	r16,248(sp)
 1800b9c:	18054bc0 	call	18054bc <_localeconv_r>
 1800ba0:	10800017 	ldw	r2,0(r2)
 1800ba4:	1009883a 	mov	r4,r2
 1800ba8:	d8803415 	stw	r2,208(sp)
 1800bac:	18074e40 	call	18074e4 <strlen>
 1800bb0:	d8803715 	stw	r2,220(sp)
 1800bb4:	d8802c17 	ldw	r2,176(sp)
 1800bb8:	10000226 	beq	r2,zero,1800bc4 <___vfprintf_internal_r+0x64>
 1800bbc:	10800e17 	ldw	r2,56(r2)
 1800bc0:	1000f926 	beq	r2,zero,1800fa8 <___vfprintf_internal_r+0x448>
 1800bc4:	b880030b 	ldhu	r2,12(r23)
 1800bc8:	10c8000c 	andi	r3,r2,8192
 1800bcc:	1800061e 	bne	r3,zero,1800be8 <___vfprintf_internal_r+0x88>
 1800bd0:	b9001917 	ldw	r4,100(r23)
 1800bd4:	00f7ffc4 	movi	r3,-8193
 1800bd8:	10880014 	ori	r2,r2,8192
 1800bdc:	20c6703a 	and	r3,r4,r3
 1800be0:	b880030d 	sth	r2,12(r23)
 1800be4:	b8c01915 	stw	r3,100(r23)
 1800be8:	10c0020c 	andi	r3,r2,8
 1800bec:	1800c126 	beq	r3,zero,1800ef4 <___vfprintf_internal_r+0x394>
 1800bf0:	b8c00417 	ldw	r3,16(r23)
 1800bf4:	1800bf26 	beq	r3,zero,1800ef4 <___vfprintf_internal_r+0x394>
 1800bf8:	1080068c 	andi	r2,r2,26
 1800bfc:	00c00284 	movi	r3,10
 1800c00:	10c0c426 	beq	r2,r3,1800f14 <___vfprintf_internal_r+0x3b4>
 1800c04:	d8c00404 	addi	r3,sp,16
 1800c08:	05006134 	movhi	r20,388
 1800c0c:	d9001e04 	addi	r4,sp,120
 1800c10:	a5022184 	addi	r20,r20,2182
 1800c14:	d8c01e15 	stw	r3,120(sp)
 1800c18:	d8002015 	stw	zero,128(sp)
 1800c1c:	d8001f15 	stw	zero,124(sp)
 1800c20:	d8003315 	stw	zero,204(sp)
 1800c24:	d8003615 	stw	zero,216(sp)
 1800c28:	d8003815 	stw	zero,224(sp)
 1800c2c:	1811883a 	mov	r8,r3
 1800c30:	d8003915 	stw	zero,228(sp)
 1800c34:	d8003a15 	stw	zero,232(sp)
 1800c38:	d8002f15 	stw	zero,188(sp)
 1800c3c:	d9002815 	stw	r4,160(sp)
 1800c40:	a8800007 	ldb	r2,0(r21)
 1800c44:	10027b26 	beq	r2,zero,1801634 <___vfprintf_internal_r+0xad4>
 1800c48:	00c00944 	movi	r3,37
 1800c4c:	a821883a 	mov	r16,r21
 1800c50:	10c0021e 	bne	r2,r3,1800c5c <___vfprintf_internal_r+0xfc>
 1800c54:	00001406 	br	1800ca8 <___vfprintf_internal_r+0x148>
 1800c58:	10c00326 	beq	r2,r3,1800c68 <___vfprintf_internal_r+0x108>
 1800c5c:	84000044 	addi	r16,r16,1
 1800c60:	80800007 	ldb	r2,0(r16)
 1800c64:	103ffc1e 	bne	r2,zero,1800c58 <__ram_exceptions_end+0xff7f0968>
 1800c68:	8563c83a 	sub	r17,r16,r21
 1800c6c:	88000e26 	beq	r17,zero,1800ca8 <___vfprintf_internal_r+0x148>
 1800c70:	d8c02017 	ldw	r3,128(sp)
 1800c74:	d8801f17 	ldw	r2,124(sp)
 1800c78:	45400015 	stw	r21,0(r8)
 1800c7c:	1c47883a 	add	r3,r3,r17
 1800c80:	10800044 	addi	r2,r2,1
 1800c84:	d8c02015 	stw	r3,128(sp)
 1800c88:	44400115 	stw	r17,4(r8)
 1800c8c:	d8801f15 	stw	r2,124(sp)
 1800c90:	00c001c4 	movi	r3,7
 1800c94:	1880a716 	blt	r3,r2,1800f34 <___vfprintf_internal_r+0x3d4>
 1800c98:	42000204 	addi	r8,r8,8
 1800c9c:	d9402f17 	ldw	r5,188(sp)
 1800ca0:	2c4b883a 	add	r5,r5,r17
 1800ca4:	d9402f15 	stw	r5,188(sp)
 1800ca8:	80800007 	ldb	r2,0(r16)
 1800cac:	1000a826 	beq	r2,zero,1800f50 <___vfprintf_internal_r+0x3f0>
 1800cb0:	84400047 	ldb	r17,1(r16)
 1800cb4:	00bfffc4 	movi	r2,-1
 1800cb8:	85400044 	addi	r21,r16,1
 1800cbc:	d8002785 	stb	zero,158(sp)
 1800cc0:	0007883a 	mov	r3,zero
 1800cc4:	000f883a 	mov	r7,zero
 1800cc8:	d8802915 	stw	r2,164(sp)
 1800ccc:	d8003115 	stw	zero,196(sp)
 1800cd0:	0025883a 	mov	r18,zero
 1800cd4:	01401604 	movi	r5,88
 1800cd8:	01800244 	movi	r6,9
 1800cdc:	02800a84 	movi	r10,42
 1800ce0:	02401b04 	movi	r9,108
 1800ce4:	ad400044 	addi	r21,r21,1
 1800ce8:	88bff804 	addi	r2,r17,-32
 1800cec:	28830436 	bltu	r5,r2,1801900 <___vfprintf_internal_r+0xda0>
 1800cf0:	100490ba 	slli	r2,r2,2
 1800cf4:	01006034 	movhi	r4,384
 1800cf8:	21034204 	addi	r4,r4,3336
 1800cfc:	1105883a 	add	r2,r2,r4
 1800d00:	10800017 	ldw	r2,0(r2)
 1800d04:	1000683a 	jmp	r2
 1800d08:	01801820 	cmpeqi	r6,zero,96
 1800d0c:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d10:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d14:	01801840 	call	180184 <__alt_mem_tse_descriptor_memory_0+0x180184>
 1800d18:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d1c:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d20:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d24:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d28:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d2c:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d30:	01800fb4 	movhi	r6,62
 1800d34:	0180175c 	xori	r6,zero,93
 1800d38:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d3c:	01800e7c 	xorhi	r6,zero,57
 1800d40:	01800fdc 	xori	r6,zero,63
 1800d44:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d48:	0180101c 	xori	r6,zero,64
 1800d4c:	01801028 	cmpgeui	r6,zero,64
 1800d50:	01801028 	cmpgeui	r6,zero,64
 1800d54:	01801028 	cmpgeui	r6,zero,64
 1800d58:	01801028 	cmpgeui	r6,zero,64
 1800d5c:	01801028 	cmpgeui	r6,zero,64
 1800d60:	01801028 	cmpgeui	r6,zero,64
 1800d64:	01801028 	cmpgeui	r6,zero,64
 1800d68:	01801028 	cmpgeui	r6,zero,64
 1800d6c:	01801028 	cmpgeui	r6,zero,64
 1800d70:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d74:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d78:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d7c:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d80:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d84:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d88:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d8c:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d90:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d94:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800d98:	0180105c 	xori	r6,zero,65
 1800d9c:	01801118 	cmpnei	r6,zero,68
 1800da0:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800da4:	01801118 	cmpnei	r6,zero,68
 1800da8:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800dac:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800db0:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800db4:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800db8:	018011b8 	rdprs	r6,zero,70
 1800dbc:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800dc0:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800dc4:	018011c4 	movi	r6,71
 1800dc8:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800dcc:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800dd0:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800dd4:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800dd8:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800ddc:	0180163c 	xorhi	r6,zero,88
 1800de0:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800de4:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800de8:	0180169c 	xori	r6,zero,90
 1800dec:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800df0:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800df4:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800df8:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800dfc:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e00:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e04:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e08:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e0c:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e10:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e14:	018018ac 	andhi	r6,zero,98
 1800e18:	0180184c 	andi	r6,zero,97
 1800e1c:	01801118 	cmpnei	r6,zero,68
 1800e20:	01801118 	cmpnei	r6,zero,68
 1800e24:	01801118 	cmpnei	r6,zero,68
 1800e28:	0180185c 	xori	r6,zero,97
 1800e2c:	0180184c 	andi	r6,zero,97
 1800e30:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e34:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e38:	01801868 	cmpgeui	r6,zero,97
 1800e3c:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e40:	01801878 	rdprs	r6,zero,97
 1800e44:	0180174c 	andi	r6,zero,93
 1800e48:	01800e88 	cmpgei	r6,zero,58
 1800e4c:	0180176c 	andhi	r6,zero,93
 1800e50:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e54:	01801778 	rdprs	r6,zero,93
 1800e58:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e5c:	018017d4 	movui	r6,95
 1800e60:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e64:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800e68:	018017e4 	muli	r6,zero,95
 1800e6c:	d9003117 	ldw	r4,196(sp)
 1800e70:	d8802d15 	stw	r2,180(sp)
 1800e74:	0109c83a 	sub	r4,zero,r4
 1800e78:	d9003115 	stw	r4,196(sp)
 1800e7c:	94800114 	ori	r18,r18,4
 1800e80:	ac400007 	ldb	r17,0(r21)
 1800e84:	003f9706 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 1800e88:	00800c04 	movi	r2,48
 1800e8c:	d9002d17 	ldw	r4,180(sp)
 1800e90:	d9402917 	ldw	r5,164(sp)
 1800e94:	d8802705 	stb	r2,156(sp)
 1800e98:	00801e04 	movi	r2,120
 1800e9c:	d8802745 	stb	r2,157(sp)
 1800ea0:	d8002785 	stb	zero,158(sp)
 1800ea4:	20c00104 	addi	r3,r4,4
 1800ea8:	24c00017 	ldw	r19,0(r4)
 1800eac:	002d883a 	mov	r22,zero
 1800eb0:	90800094 	ori	r2,r18,2
 1800eb4:	28029a16 	blt	r5,zero,1801920 <___vfprintf_internal_r+0xdc0>
 1800eb8:	00bfdfc4 	movi	r2,-129
 1800ebc:	90a4703a 	and	r18,r18,r2
 1800ec0:	d8c02d15 	stw	r3,180(sp)
 1800ec4:	94800094 	ori	r18,r18,2
 1800ec8:	9802871e 	bne	r19,zero,18018e8 <___vfprintf_internal_r+0xd88>
 1800ecc:	00806134 	movhi	r2,388
 1800ed0:	10821a04 	addi	r2,r2,2152
 1800ed4:	d8803915 	stw	r2,228(sp)
 1800ed8:	04401e04 	movi	r17,120
 1800edc:	d8802917 	ldw	r2,164(sp)
 1800ee0:	0039883a 	mov	fp,zero
 1800ee4:	1001e926 	beq	r2,zero,180168c <___vfprintf_internal_r+0xb2c>
 1800ee8:	0027883a 	mov	r19,zero
 1800eec:	002d883a 	mov	r22,zero
 1800ef0:	00020506 	br	1801708 <___vfprintf_internal_r+0xba8>
 1800ef4:	d9002c17 	ldw	r4,176(sp)
 1800ef8:	b80b883a 	mov	r5,r23
 1800efc:	1802e300 	call	1802e30 <__swsetup_r>
 1800f00:	1005ac1e 	bne	r2,zero,18025b4 <___vfprintf_internal_r+0x1a54>
 1800f04:	b880030b 	ldhu	r2,12(r23)
 1800f08:	00c00284 	movi	r3,10
 1800f0c:	1080068c 	andi	r2,r2,26
 1800f10:	10ff3c1e 	bne	r2,r3,1800c04 <__ram_exceptions_end+0xff7f0914>
 1800f14:	b880038f 	ldh	r2,14(r23)
 1800f18:	103f3a16 	blt	r2,zero,1800c04 <__ram_exceptions_end+0xff7f0914>
 1800f1c:	d9c02d17 	ldw	r7,180(sp)
 1800f20:	d9002c17 	ldw	r4,176(sp)
 1800f24:	a80d883a 	mov	r6,r21
 1800f28:	b80b883a 	mov	r5,r23
 1800f2c:	1802d740 	call	1802d74 <__sbprintf>
 1800f30:	00001106 	br	1800f78 <___vfprintf_internal_r+0x418>
 1800f34:	d9002c17 	ldw	r4,176(sp)
 1800f38:	d9801e04 	addi	r6,sp,120
 1800f3c:	b80b883a 	mov	r5,r23
 1800f40:	18076780 	call	1807678 <__sprint_r>
 1800f44:	1000081e 	bne	r2,zero,1800f68 <___vfprintf_internal_r+0x408>
 1800f48:	da000404 	addi	r8,sp,16
 1800f4c:	003f5306 	br	1800c9c <__ram_exceptions_end+0xff7f09ac>
 1800f50:	d8802017 	ldw	r2,128(sp)
 1800f54:	10000426 	beq	r2,zero,1800f68 <___vfprintf_internal_r+0x408>
 1800f58:	d9002c17 	ldw	r4,176(sp)
 1800f5c:	d9801e04 	addi	r6,sp,120
 1800f60:	b80b883a 	mov	r5,r23
 1800f64:	18076780 	call	1807678 <__sprint_r>
 1800f68:	b880030b 	ldhu	r2,12(r23)
 1800f6c:	1080100c 	andi	r2,r2,64
 1800f70:	1005901e 	bne	r2,zero,18025b4 <___vfprintf_internal_r+0x1a54>
 1800f74:	d8802f17 	ldw	r2,188(sp)
 1800f78:	dfc04717 	ldw	ra,284(sp)
 1800f7c:	df004617 	ldw	fp,280(sp)
 1800f80:	ddc04517 	ldw	r23,276(sp)
 1800f84:	dd804417 	ldw	r22,272(sp)
 1800f88:	dd404317 	ldw	r21,268(sp)
 1800f8c:	dd004217 	ldw	r20,264(sp)
 1800f90:	dcc04117 	ldw	r19,260(sp)
 1800f94:	dc804017 	ldw	r18,256(sp)
 1800f98:	dc403f17 	ldw	r17,252(sp)
 1800f9c:	dc003e17 	ldw	r16,248(sp)
 1800fa0:	dec04804 	addi	sp,sp,288
 1800fa4:	f800283a 	ret
 1800fa8:	d9002c17 	ldw	r4,176(sp)
 1800fac:	1804e040 	call	1804e04 <__sinit>
 1800fb0:	003f0406 	br	1800bc4 <__ram_exceptions_end+0xff7f08d4>
 1800fb4:	d8802d17 	ldw	r2,180(sp)
 1800fb8:	d9002d17 	ldw	r4,180(sp)
 1800fbc:	10800017 	ldw	r2,0(r2)
 1800fc0:	d8803115 	stw	r2,196(sp)
 1800fc4:	20800104 	addi	r2,r4,4
 1800fc8:	d9003117 	ldw	r4,196(sp)
 1800fcc:	203fa716 	blt	r4,zero,1800e6c <__ram_exceptions_end+0xff7f0b7c>
 1800fd0:	d8802d15 	stw	r2,180(sp)
 1800fd4:	ac400007 	ldb	r17,0(r21)
 1800fd8:	003f4206 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 1800fdc:	ac400007 	ldb	r17,0(r21)
 1800fe0:	aac00044 	addi	r11,r21,1
 1800fe4:	8a872826 	beq	r17,r10,1802c88 <___vfprintf_internal_r+0x2128>
 1800fe8:	88bff404 	addi	r2,r17,-48
 1800fec:	0009883a 	mov	r4,zero
 1800ff0:	30867d36 	bltu	r6,r2,18029e8 <___vfprintf_internal_r+0x1e88>
 1800ff4:	5c400007 	ldb	r17,0(r11)
 1800ff8:	210002a4 	muli	r4,r4,10
 1800ffc:	5d400044 	addi	r21,r11,1
 1801000:	a817883a 	mov	r11,r21
 1801004:	2089883a 	add	r4,r4,r2
 1801008:	88bff404 	addi	r2,r17,-48
 180100c:	30bff92e 	bgeu	r6,r2,1800ff4 <__ram_exceptions_end+0xff7f0d04>
 1801010:	2005c916 	blt	r4,zero,1802738 <___vfprintf_internal_r+0x1bd8>
 1801014:	d9002915 	stw	r4,164(sp)
 1801018:	003f3306 	br	1800ce8 <__ram_exceptions_end+0xff7f09f8>
 180101c:	94802014 	ori	r18,r18,128
 1801020:	ac400007 	ldb	r17,0(r21)
 1801024:	003f2f06 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 1801028:	a809883a 	mov	r4,r21
 180102c:	d8003115 	stw	zero,196(sp)
 1801030:	88bff404 	addi	r2,r17,-48
 1801034:	0017883a 	mov	r11,zero
 1801038:	24400007 	ldb	r17,0(r4)
 180103c:	5ac002a4 	muli	r11,r11,10
 1801040:	ad400044 	addi	r21,r21,1
 1801044:	a809883a 	mov	r4,r21
 1801048:	12d7883a 	add	r11,r2,r11
 180104c:	88bff404 	addi	r2,r17,-48
 1801050:	30bff92e 	bgeu	r6,r2,1801038 <__ram_exceptions_end+0xff7f0d48>
 1801054:	dac03115 	stw	r11,196(sp)
 1801058:	003f2306 	br	1800ce8 <__ram_exceptions_end+0xff7f09f8>
 180105c:	18c03fcc 	andi	r3,r3,255
 1801060:	18072b1e 	bne	r3,zero,1802d10 <___vfprintf_internal_r+0x21b0>
 1801064:	94800414 	ori	r18,r18,16
 1801068:	9080080c 	andi	r2,r18,32
 180106c:	10037b26 	beq	r2,zero,1801e5c <___vfprintf_internal_r+0x12fc>
 1801070:	d9402d17 	ldw	r5,180(sp)
 1801074:	28800117 	ldw	r2,4(r5)
 1801078:	2cc00017 	ldw	r19,0(r5)
 180107c:	29400204 	addi	r5,r5,8
 1801080:	d9402d15 	stw	r5,180(sp)
 1801084:	102d883a 	mov	r22,r2
 1801088:	10044b16 	blt	r2,zero,18021b8 <___vfprintf_internal_r+0x1658>
 180108c:	d9402917 	ldw	r5,164(sp)
 1801090:	df002783 	ldbu	fp,158(sp)
 1801094:	2803bc16 	blt	r5,zero,1801f88 <___vfprintf_internal_r+0x1428>
 1801098:	00ffdfc4 	movi	r3,-129
 180109c:	9d84b03a 	or	r2,r19,r22
 18010a0:	90e4703a 	and	r18,r18,r3
 18010a4:	10017726 	beq	r2,zero,1801684 <___vfprintf_internal_r+0xb24>
 18010a8:	b0038326 	beq	r22,zero,1801eb8 <___vfprintf_internal_r+0x1358>
 18010ac:	dc402a15 	stw	r17,168(sp)
 18010b0:	dc001e04 	addi	r16,sp,120
 18010b4:	b023883a 	mov	r17,r22
 18010b8:	402d883a 	mov	r22,r8
 18010bc:	9809883a 	mov	r4,r19
 18010c0:	880b883a 	mov	r5,r17
 18010c4:	01800284 	movi	r6,10
 18010c8:	000f883a 	mov	r7,zero
 18010cc:	180a5ec0 	call	180a5ec <__umoddi3>
 18010d0:	10800c04 	addi	r2,r2,48
 18010d4:	843fffc4 	addi	r16,r16,-1
 18010d8:	9809883a 	mov	r4,r19
 18010dc:	880b883a 	mov	r5,r17
 18010e0:	80800005 	stb	r2,0(r16)
 18010e4:	01800284 	movi	r6,10
 18010e8:	000f883a 	mov	r7,zero
 18010ec:	180a0740 	call	180a074 <__udivdi3>
 18010f0:	1027883a 	mov	r19,r2
 18010f4:	10c4b03a 	or	r2,r2,r3
 18010f8:	1823883a 	mov	r17,r3
 18010fc:	103fef1e 	bne	r2,zero,18010bc <__ram_exceptions_end+0xff7f0dcc>
 1801100:	d8c02817 	ldw	r3,160(sp)
 1801104:	dc402a17 	ldw	r17,168(sp)
 1801108:	b011883a 	mov	r8,r22
 180110c:	1c07c83a 	sub	r3,r3,r16
 1801110:	d8c02e15 	stw	r3,184(sp)
 1801114:	00005906 	br	180127c <___vfprintf_internal_r+0x71c>
 1801118:	18c03fcc 	andi	r3,r3,255
 180111c:	1806fa1e 	bne	r3,zero,1802d08 <___vfprintf_internal_r+0x21a8>
 1801120:	9080020c 	andi	r2,r18,8
 1801124:	10048a26 	beq	r2,zero,1802350 <___vfprintf_internal_r+0x17f0>
 1801128:	d8c02d17 	ldw	r3,180(sp)
 180112c:	d9002d17 	ldw	r4,180(sp)
 1801130:	d9402d17 	ldw	r5,180(sp)
 1801134:	18c00017 	ldw	r3,0(r3)
 1801138:	21000117 	ldw	r4,4(r4)
 180113c:	29400204 	addi	r5,r5,8
 1801140:	d8c03615 	stw	r3,216(sp)
 1801144:	d9003815 	stw	r4,224(sp)
 1801148:	d9402d15 	stw	r5,180(sp)
 180114c:	d9003617 	ldw	r4,216(sp)
 1801150:	d9403817 	ldw	r5,224(sp)
 1801154:	da003d15 	stw	r8,244(sp)
 1801158:	04000044 	movi	r16,1
 180115c:	18072040 	call	1807204 <__fpclassifyd>
 1801160:	da003d17 	ldw	r8,244(sp)
 1801164:	14041f1e 	bne	r2,r16,18021e4 <___vfprintf_internal_r+0x1684>
 1801168:	d9003617 	ldw	r4,216(sp)
 180116c:	d9403817 	ldw	r5,224(sp)
 1801170:	000d883a 	mov	r6,zero
 1801174:	000f883a 	mov	r7,zero
 1801178:	180bfd00 	call	180bfd0 <__ledf2>
 180117c:	da003d17 	ldw	r8,244(sp)
 1801180:	1005be16 	blt	r2,zero,180287c <___vfprintf_internal_r+0x1d1c>
 1801184:	df002783 	ldbu	fp,158(sp)
 1801188:	008011c4 	movi	r2,71
 180118c:	1445330e 	bge	r2,r17,180265c <___vfprintf_internal_r+0x1afc>
 1801190:	04006134 	movhi	r16,388
 1801194:	84021204 	addi	r16,r16,2120
 1801198:	00c000c4 	movi	r3,3
 180119c:	00bfdfc4 	movi	r2,-129
 18011a0:	d8c02a15 	stw	r3,168(sp)
 18011a4:	90a4703a 	and	r18,r18,r2
 18011a8:	d8c02e15 	stw	r3,184(sp)
 18011ac:	d8002915 	stw	zero,164(sp)
 18011b0:	d8003215 	stw	zero,200(sp)
 18011b4:	00003706 	br	1801294 <___vfprintf_internal_r+0x734>
 18011b8:	94800214 	ori	r18,r18,8
 18011bc:	ac400007 	ldb	r17,0(r21)
 18011c0:	003ec806 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 18011c4:	18c03fcc 	andi	r3,r3,255
 18011c8:	1806db1e 	bne	r3,zero,1802d38 <___vfprintf_internal_r+0x21d8>
 18011cc:	94800414 	ori	r18,r18,16
 18011d0:	9080080c 	andi	r2,r18,32
 18011d4:	1002d826 	beq	r2,zero,1801d38 <___vfprintf_internal_r+0x11d8>
 18011d8:	d9402d17 	ldw	r5,180(sp)
 18011dc:	d8c02917 	ldw	r3,164(sp)
 18011e0:	d8002785 	stb	zero,158(sp)
 18011e4:	28800204 	addi	r2,r5,8
 18011e8:	2cc00017 	ldw	r19,0(r5)
 18011ec:	2d800117 	ldw	r22,4(r5)
 18011f0:	18048f16 	blt	r3,zero,1802430 <___vfprintf_internal_r+0x18d0>
 18011f4:	013fdfc4 	movi	r4,-129
 18011f8:	9d86b03a 	or	r3,r19,r22
 18011fc:	d8802d15 	stw	r2,180(sp)
 1801200:	9124703a 	and	r18,r18,r4
 1801204:	1802d91e 	bne	r3,zero,1801d6c <___vfprintf_internal_r+0x120c>
 1801208:	d8c02917 	ldw	r3,164(sp)
 180120c:	0039883a 	mov	fp,zero
 1801210:	1805c326 	beq	r3,zero,1802920 <___vfprintf_internal_r+0x1dc0>
 1801214:	0027883a 	mov	r19,zero
 1801218:	002d883a 	mov	r22,zero
 180121c:	dc001e04 	addi	r16,sp,120
 1801220:	9806d0fa 	srli	r3,r19,3
 1801224:	b008977a 	slli	r4,r22,29
 1801228:	b02cd0fa 	srli	r22,r22,3
 180122c:	9cc001cc 	andi	r19,r19,7
 1801230:	98800c04 	addi	r2,r19,48
 1801234:	843fffc4 	addi	r16,r16,-1
 1801238:	20e6b03a 	or	r19,r4,r3
 180123c:	80800005 	stb	r2,0(r16)
 1801240:	9d86b03a 	or	r3,r19,r22
 1801244:	183ff61e 	bne	r3,zero,1801220 <__ram_exceptions_end+0xff7f0f30>
 1801248:	90c0004c 	andi	r3,r18,1
 180124c:	18013b26 	beq	r3,zero,180173c <___vfprintf_internal_r+0xbdc>
 1801250:	10803fcc 	andi	r2,r2,255
 1801254:	1080201c 	xori	r2,r2,128
 1801258:	10bfe004 	addi	r2,r2,-128
 180125c:	00c00c04 	movi	r3,48
 1801260:	10c13626 	beq	r2,r3,180173c <___vfprintf_internal_r+0xbdc>
 1801264:	80ffffc5 	stb	r3,-1(r16)
 1801268:	d8c02817 	ldw	r3,160(sp)
 180126c:	80bfffc4 	addi	r2,r16,-1
 1801270:	1021883a 	mov	r16,r2
 1801274:	1887c83a 	sub	r3,r3,r2
 1801278:	d8c02e15 	stw	r3,184(sp)
 180127c:	d8802e17 	ldw	r2,184(sp)
 1801280:	d9002917 	ldw	r4,164(sp)
 1801284:	1100010e 	bge	r2,r4,180128c <___vfprintf_internal_r+0x72c>
 1801288:	2005883a 	mov	r2,r4
 180128c:	d8802a15 	stw	r2,168(sp)
 1801290:	d8003215 	stw	zero,200(sp)
 1801294:	e7003fcc 	andi	fp,fp,255
 1801298:	e700201c 	xori	fp,fp,128
 180129c:	e73fe004 	addi	fp,fp,-128
 18012a0:	e0000326 	beq	fp,zero,18012b0 <___vfprintf_internal_r+0x750>
 18012a4:	d8c02a17 	ldw	r3,168(sp)
 18012a8:	18c00044 	addi	r3,r3,1
 18012ac:	d8c02a15 	stw	r3,168(sp)
 18012b0:	90c0008c 	andi	r3,r18,2
 18012b4:	d8c02b15 	stw	r3,172(sp)
 18012b8:	18000326 	beq	r3,zero,18012c8 <___vfprintf_internal_r+0x768>
 18012bc:	d8c02a17 	ldw	r3,168(sp)
 18012c0:	18c00084 	addi	r3,r3,2
 18012c4:	d8c02a15 	stw	r3,168(sp)
 18012c8:	90c0210c 	andi	r3,r18,132
 18012cc:	d8c03015 	stw	r3,192(sp)
 18012d0:	1801a31e 	bne	r3,zero,1801960 <___vfprintf_internal_r+0xe00>
 18012d4:	d9003117 	ldw	r4,196(sp)
 18012d8:	d8c02a17 	ldw	r3,168(sp)
 18012dc:	20e7c83a 	sub	r19,r4,r3
 18012e0:	04c19f0e 	bge	zero,r19,1801960 <___vfprintf_internal_r+0xe00>
 18012e4:	02400404 	movi	r9,16
 18012e8:	d8c02017 	ldw	r3,128(sp)
 18012ec:	d8801f17 	ldw	r2,124(sp)
 18012f0:	4cc50d0e 	bge	r9,r19,1802728 <___vfprintf_internal_r+0x1bc8>
 18012f4:	01406134 	movhi	r5,388
 18012f8:	29422584 	addi	r5,r5,2198
 18012fc:	dc403b15 	stw	r17,236(sp)
 1801300:	d9403515 	stw	r5,212(sp)
 1801304:	9823883a 	mov	r17,r19
 1801308:	482d883a 	mov	r22,r9
 180130c:	9027883a 	mov	r19,r18
 1801310:	070001c4 	movi	fp,7
 1801314:	8025883a 	mov	r18,r16
 1801318:	dc002c17 	ldw	r16,176(sp)
 180131c:	00000306 	br	180132c <___vfprintf_internal_r+0x7cc>
 1801320:	8c7ffc04 	addi	r17,r17,-16
 1801324:	42000204 	addi	r8,r8,8
 1801328:	b440130e 	bge	r22,r17,1801378 <___vfprintf_internal_r+0x818>
 180132c:	01006134 	movhi	r4,388
 1801330:	18c00404 	addi	r3,r3,16
 1801334:	10800044 	addi	r2,r2,1
 1801338:	21022584 	addi	r4,r4,2198
 180133c:	41000015 	stw	r4,0(r8)
 1801340:	45800115 	stw	r22,4(r8)
 1801344:	d8c02015 	stw	r3,128(sp)
 1801348:	d8801f15 	stw	r2,124(sp)
 180134c:	e0bff40e 	bge	fp,r2,1801320 <__ram_exceptions_end+0xff7f1030>
 1801350:	d9801e04 	addi	r6,sp,120
 1801354:	b80b883a 	mov	r5,r23
 1801358:	8009883a 	mov	r4,r16
 180135c:	18076780 	call	1807678 <__sprint_r>
 1801360:	103f011e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801364:	8c7ffc04 	addi	r17,r17,-16
 1801368:	d8c02017 	ldw	r3,128(sp)
 180136c:	d8801f17 	ldw	r2,124(sp)
 1801370:	da000404 	addi	r8,sp,16
 1801374:	b47fed16 	blt	r22,r17,180132c <__ram_exceptions_end+0xff7f103c>
 1801378:	9021883a 	mov	r16,r18
 180137c:	9825883a 	mov	r18,r19
 1801380:	8827883a 	mov	r19,r17
 1801384:	dc403b17 	ldw	r17,236(sp)
 1801388:	d9403517 	ldw	r5,212(sp)
 180138c:	98c7883a 	add	r3,r19,r3
 1801390:	10800044 	addi	r2,r2,1
 1801394:	41400015 	stw	r5,0(r8)
 1801398:	44c00115 	stw	r19,4(r8)
 180139c:	d8c02015 	stw	r3,128(sp)
 18013a0:	d8801f15 	stw	r2,124(sp)
 18013a4:	010001c4 	movi	r4,7
 18013a8:	2082a316 	blt	r4,r2,1801e38 <___vfprintf_internal_r+0x12d8>
 18013ac:	df002787 	ldb	fp,158(sp)
 18013b0:	42000204 	addi	r8,r8,8
 18013b4:	e0000c26 	beq	fp,zero,18013e8 <___vfprintf_internal_r+0x888>
 18013b8:	d8801f17 	ldw	r2,124(sp)
 18013bc:	d9002784 	addi	r4,sp,158
 18013c0:	18c00044 	addi	r3,r3,1
 18013c4:	10800044 	addi	r2,r2,1
 18013c8:	41000015 	stw	r4,0(r8)
 18013cc:	01000044 	movi	r4,1
 18013d0:	41000115 	stw	r4,4(r8)
 18013d4:	d8c02015 	stw	r3,128(sp)
 18013d8:	d8801f15 	stw	r2,124(sp)
 18013dc:	010001c4 	movi	r4,7
 18013e0:	20823c16 	blt	r4,r2,1801cd4 <___vfprintf_internal_r+0x1174>
 18013e4:	42000204 	addi	r8,r8,8
 18013e8:	d8802b17 	ldw	r2,172(sp)
 18013ec:	10000c26 	beq	r2,zero,1801420 <___vfprintf_internal_r+0x8c0>
 18013f0:	d8801f17 	ldw	r2,124(sp)
 18013f4:	d9002704 	addi	r4,sp,156
 18013f8:	18c00084 	addi	r3,r3,2
 18013fc:	10800044 	addi	r2,r2,1
 1801400:	41000015 	stw	r4,0(r8)
 1801404:	01000084 	movi	r4,2
 1801408:	41000115 	stw	r4,4(r8)
 180140c:	d8c02015 	stw	r3,128(sp)
 1801410:	d8801f15 	stw	r2,124(sp)
 1801414:	010001c4 	movi	r4,7
 1801418:	20823616 	blt	r4,r2,1801cf4 <___vfprintf_internal_r+0x1194>
 180141c:	42000204 	addi	r8,r8,8
 1801420:	d9003017 	ldw	r4,192(sp)
 1801424:	00802004 	movi	r2,128
 1801428:	20819926 	beq	r4,r2,1801a90 <___vfprintf_internal_r+0xf30>
 180142c:	d9402917 	ldw	r5,164(sp)
 1801430:	d8802e17 	ldw	r2,184(sp)
 1801434:	28adc83a 	sub	r22,r5,r2
 1801438:	0580310e 	bge	zero,r22,1801500 <___vfprintf_internal_r+0x9a0>
 180143c:	07000404 	movi	fp,16
 1801440:	d8801f17 	ldw	r2,124(sp)
 1801444:	e584140e 	bge	fp,r22,1802498 <___vfprintf_internal_r+0x1938>
 1801448:	01406134 	movhi	r5,388
 180144c:	29422184 	addi	r5,r5,2182
 1801450:	dc402915 	stw	r17,164(sp)
 1801454:	d9402b15 	stw	r5,172(sp)
 1801458:	b023883a 	mov	r17,r22
 180145c:	04c001c4 	movi	r19,7
 1801460:	a82d883a 	mov	r22,r21
 1801464:	902b883a 	mov	r21,r18
 1801468:	8025883a 	mov	r18,r16
 180146c:	dc002c17 	ldw	r16,176(sp)
 1801470:	00000306 	br	1801480 <___vfprintf_internal_r+0x920>
 1801474:	8c7ffc04 	addi	r17,r17,-16
 1801478:	42000204 	addi	r8,r8,8
 180147c:	e440110e 	bge	fp,r17,18014c4 <___vfprintf_internal_r+0x964>
 1801480:	18c00404 	addi	r3,r3,16
 1801484:	10800044 	addi	r2,r2,1
 1801488:	45000015 	stw	r20,0(r8)
 180148c:	47000115 	stw	fp,4(r8)
 1801490:	d8c02015 	stw	r3,128(sp)
 1801494:	d8801f15 	stw	r2,124(sp)
 1801498:	98bff60e 	bge	r19,r2,1801474 <__ram_exceptions_end+0xff7f1184>
 180149c:	d9801e04 	addi	r6,sp,120
 18014a0:	b80b883a 	mov	r5,r23
 18014a4:	8009883a 	mov	r4,r16
 18014a8:	18076780 	call	1807678 <__sprint_r>
 18014ac:	103eae1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 18014b0:	8c7ffc04 	addi	r17,r17,-16
 18014b4:	d8c02017 	ldw	r3,128(sp)
 18014b8:	d8801f17 	ldw	r2,124(sp)
 18014bc:	da000404 	addi	r8,sp,16
 18014c0:	e47fef16 	blt	fp,r17,1801480 <__ram_exceptions_end+0xff7f1190>
 18014c4:	9021883a 	mov	r16,r18
 18014c8:	a825883a 	mov	r18,r21
 18014cc:	b02b883a 	mov	r21,r22
 18014d0:	882d883a 	mov	r22,r17
 18014d4:	dc402917 	ldw	r17,164(sp)
 18014d8:	d9002b17 	ldw	r4,172(sp)
 18014dc:	1d87883a 	add	r3,r3,r22
 18014e0:	10800044 	addi	r2,r2,1
 18014e4:	41000015 	stw	r4,0(r8)
 18014e8:	45800115 	stw	r22,4(r8)
 18014ec:	d8c02015 	stw	r3,128(sp)
 18014f0:	d8801f15 	stw	r2,124(sp)
 18014f4:	010001c4 	movi	r4,7
 18014f8:	2081ee16 	blt	r4,r2,1801cb4 <___vfprintf_internal_r+0x1154>
 18014fc:	42000204 	addi	r8,r8,8
 1801500:	9080400c 	andi	r2,r18,256
 1801504:	1001181e 	bne	r2,zero,1801968 <___vfprintf_internal_r+0xe08>
 1801508:	d9402e17 	ldw	r5,184(sp)
 180150c:	d8801f17 	ldw	r2,124(sp)
 1801510:	44000015 	stw	r16,0(r8)
 1801514:	1947883a 	add	r3,r3,r5
 1801518:	10800044 	addi	r2,r2,1
 180151c:	41400115 	stw	r5,4(r8)
 1801520:	d8c02015 	stw	r3,128(sp)
 1801524:	d8801f15 	stw	r2,124(sp)
 1801528:	010001c4 	movi	r4,7
 180152c:	2081d316 	blt	r4,r2,1801c7c <___vfprintf_internal_r+0x111c>
 1801530:	42000204 	addi	r8,r8,8
 1801534:	9480010c 	andi	r18,r18,4
 1801538:	90003226 	beq	r18,zero,1801604 <___vfprintf_internal_r+0xaa4>
 180153c:	d9403117 	ldw	r5,196(sp)
 1801540:	d8802a17 	ldw	r2,168(sp)
 1801544:	28a1c83a 	sub	r16,r5,r2
 1801548:	04002e0e 	bge	zero,r16,1801604 <___vfprintf_internal_r+0xaa4>
 180154c:	04400404 	movi	r17,16
 1801550:	d8801f17 	ldw	r2,124(sp)
 1801554:	8c04a20e 	bge	r17,r16,18027e0 <___vfprintf_internal_r+0x1c80>
 1801558:	01406134 	movhi	r5,388
 180155c:	29422584 	addi	r5,r5,2198
 1801560:	d9403515 	stw	r5,212(sp)
 1801564:	048001c4 	movi	r18,7
 1801568:	dcc02c17 	ldw	r19,176(sp)
 180156c:	00000306 	br	180157c <___vfprintf_internal_r+0xa1c>
 1801570:	843ffc04 	addi	r16,r16,-16
 1801574:	42000204 	addi	r8,r8,8
 1801578:	8c00130e 	bge	r17,r16,18015c8 <___vfprintf_internal_r+0xa68>
 180157c:	01006134 	movhi	r4,388
 1801580:	18c00404 	addi	r3,r3,16
 1801584:	10800044 	addi	r2,r2,1
 1801588:	21022584 	addi	r4,r4,2198
 180158c:	41000015 	stw	r4,0(r8)
 1801590:	44400115 	stw	r17,4(r8)
 1801594:	d8c02015 	stw	r3,128(sp)
 1801598:	d8801f15 	stw	r2,124(sp)
 180159c:	90bff40e 	bge	r18,r2,1801570 <__ram_exceptions_end+0xff7f1280>
 18015a0:	d9801e04 	addi	r6,sp,120
 18015a4:	b80b883a 	mov	r5,r23
 18015a8:	9809883a 	mov	r4,r19
 18015ac:	18076780 	call	1807678 <__sprint_r>
 18015b0:	103e6d1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 18015b4:	843ffc04 	addi	r16,r16,-16
 18015b8:	d8c02017 	ldw	r3,128(sp)
 18015bc:	d8801f17 	ldw	r2,124(sp)
 18015c0:	da000404 	addi	r8,sp,16
 18015c4:	8c3fed16 	blt	r17,r16,180157c <__ram_exceptions_end+0xff7f128c>
 18015c8:	d9403517 	ldw	r5,212(sp)
 18015cc:	1c07883a 	add	r3,r3,r16
 18015d0:	10800044 	addi	r2,r2,1
 18015d4:	41400015 	stw	r5,0(r8)
 18015d8:	44000115 	stw	r16,4(r8)
 18015dc:	d8c02015 	stw	r3,128(sp)
 18015e0:	d8801f15 	stw	r2,124(sp)
 18015e4:	010001c4 	movi	r4,7
 18015e8:	2080060e 	bge	r4,r2,1801604 <___vfprintf_internal_r+0xaa4>
 18015ec:	d9002c17 	ldw	r4,176(sp)
 18015f0:	d9801e04 	addi	r6,sp,120
 18015f4:	b80b883a 	mov	r5,r23
 18015f8:	18076780 	call	1807678 <__sprint_r>
 18015fc:	103e5a1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801600:	d8c02017 	ldw	r3,128(sp)
 1801604:	d8803117 	ldw	r2,196(sp)
 1801608:	d9002a17 	ldw	r4,168(sp)
 180160c:	1100010e 	bge	r2,r4,1801614 <___vfprintf_internal_r+0xab4>
 1801610:	2005883a 	mov	r2,r4
 1801614:	d9402f17 	ldw	r5,188(sp)
 1801618:	288b883a 	add	r5,r5,r2
 180161c:	d9402f15 	stw	r5,188(sp)
 1801620:	18019e1e 	bne	r3,zero,1801c9c <___vfprintf_internal_r+0x113c>
 1801624:	a8800007 	ldb	r2,0(r21)
 1801628:	d8001f15 	stw	zero,124(sp)
 180162c:	da000404 	addi	r8,sp,16
 1801630:	103d851e 	bne	r2,zero,1800c48 <__ram_exceptions_end+0xff7f0958>
 1801634:	a821883a 	mov	r16,r21
 1801638:	003d9b06 	br	1800ca8 <__ram_exceptions_end+0xff7f09b8>
 180163c:	18c03fcc 	andi	r3,r3,255
 1801640:	1805c11e 	bne	r3,zero,1802d48 <___vfprintf_internal_r+0x21e8>
 1801644:	94800414 	ori	r18,r18,16
 1801648:	9080080c 	andi	r2,r18,32
 180164c:	10020c26 	beq	r2,zero,1801e80 <___vfprintf_internal_r+0x1320>
 1801650:	d8802d17 	ldw	r2,180(sp)
 1801654:	d9002917 	ldw	r4,164(sp)
 1801658:	d8002785 	stb	zero,158(sp)
 180165c:	10c00204 	addi	r3,r2,8
 1801660:	14c00017 	ldw	r19,0(r2)
 1801664:	15800117 	ldw	r22,4(r2)
 1801668:	20040f16 	blt	r4,zero,18026a8 <___vfprintf_internal_r+0x1b48>
 180166c:	013fdfc4 	movi	r4,-129
 1801670:	9d84b03a 	or	r2,r19,r22
 1801674:	d8c02d15 	stw	r3,180(sp)
 1801678:	9124703a 	and	r18,r18,r4
 180167c:	0039883a 	mov	fp,zero
 1801680:	103e891e 	bne	r2,zero,18010a8 <__ram_exceptions_end+0xff7f0db8>
 1801684:	d9002917 	ldw	r4,164(sp)
 1801688:	2002c11e 	bne	r4,zero,1802190 <___vfprintf_internal_r+0x1630>
 180168c:	d8002915 	stw	zero,164(sp)
 1801690:	d8002e15 	stw	zero,184(sp)
 1801694:	dc001e04 	addi	r16,sp,120
 1801698:	003ef806 	br	180127c <__ram_exceptions_end+0xff7f0f8c>
 180169c:	18c03fcc 	andi	r3,r3,255
 18016a0:	18059d1e 	bne	r3,zero,1802d18 <___vfprintf_internal_r+0x21b8>
 18016a4:	01406134 	movhi	r5,388
 18016a8:	29421504 	addi	r5,r5,2132
 18016ac:	d9403915 	stw	r5,228(sp)
 18016b0:	9080080c 	andi	r2,r18,32
 18016b4:	10005226 	beq	r2,zero,1801800 <___vfprintf_internal_r+0xca0>
 18016b8:	d8802d17 	ldw	r2,180(sp)
 18016bc:	14c00017 	ldw	r19,0(r2)
 18016c0:	15800117 	ldw	r22,4(r2)
 18016c4:	10800204 	addi	r2,r2,8
 18016c8:	d8802d15 	stw	r2,180(sp)
 18016cc:	9080004c 	andi	r2,r18,1
 18016d0:	10019026 	beq	r2,zero,1801d14 <___vfprintf_internal_r+0x11b4>
 18016d4:	9d84b03a 	or	r2,r19,r22
 18016d8:	10036926 	beq	r2,zero,1802480 <___vfprintf_internal_r+0x1920>
 18016dc:	d8c02917 	ldw	r3,164(sp)
 18016e0:	00800c04 	movi	r2,48
 18016e4:	d8802705 	stb	r2,156(sp)
 18016e8:	dc402745 	stb	r17,157(sp)
 18016ec:	d8002785 	stb	zero,158(sp)
 18016f0:	90800094 	ori	r2,r18,2
 18016f4:	18045d16 	blt	r3,zero,180286c <___vfprintf_internal_r+0x1d0c>
 18016f8:	00bfdfc4 	movi	r2,-129
 18016fc:	90a4703a 	and	r18,r18,r2
 1801700:	94800094 	ori	r18,r18,2
 1801704:	0039883a 	mov	fp,zero
 1801708:	d9003917 	ldw	r4,228(sp)
 180170c:	dc001e04 	addi	r16,sp,120
 1801710:	988003cc 	andi	r2,r19,15
 1801714:	b006973a 	slli	r3,r22,28
 1801718:	2085883a 	add	r2,r4,r2
 180171c:	9826d13a 	srli	r19,r19,4
 1801720:	10800003 	ldbu	r2,0(r2)
 1801724:	b02cd13a 	srli	r22,r22,4
 1801728:	843fffc4 	addi	r16,r16,-1
 180172c:	1ce6b03a 	or	r19,r3,r19
 1801730:	80800005 	stb	r2,0(r16)
 1801734:	9d84b03a 	or	r2,r19,r22
 1801738:	103ff51e 	bne	r2,zero,1801710 <__ram_exceptions_end+0xff7f1420>
 180173c:	d8c02817 	ldw	r3,160(sp)
 1801740:	1c07c83a 	sub	r3,r3,r16
 1801744:	d8c02e15 	stw	r3,184(sp)
 1801748:	003ecc06 	br	180127c <__ram_exceptions_end+0xff7f0f8c>
 180174c:	18c03fcc 	andi	r3,r3,255
 1801750:	183e9f26 	beq	r3,zero,18011d0 <__ram_exceptions_end+0xff7f0ee0>
 1801754:	d9c02785 	stb	r7,158(sp)
 1801758:	003e9d06 	br	18011d0 <__ram_exceptions_end+0xff7f0ee0>
 180175c:	00c00044 	movi	r3,1
 1801760:	01c00ac4 	movi	r7,43
 1801764:	ac400007 	ldb	r17,0(r21)
 1801768:	003d5e06 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 180176c:	94800814 	ori	r18,r18,32
 1801770:	ac400007 	ldb	r17,0(r21)
 1801774:	003d5b06 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 1801778:	d8c02d17 	ldw	r3,180(sp)
 180177c:	d8002785 	stb	zero,158(sp)
 1801780:	1c000017 	ldw	r16,0(r3)
 1801784:	1cc00104 	addi	r19,r3,4
 1801788:	80041926 	beq	r16,zero,18027f0 <___vfprintf_internal_r+0x1c90>
 180178c:	d9002917 	ldw	r4,164(sp)
 1801790:	2003d016 	blt	r4,zero,18026d4 <___vfprintf_internal_r+0x1b74>
 1801794:	200d883a 	mov	r6,r4
 1801798:	000b883a 	mov	r5,zero
 180179c:	8009883a 	mov	r4,r16
 18017a0:	da003d15 	stw	r8,244(sp)
 18017a4:	1805eb40 	call	1805eb4 <memchr>
 18017a8:	da003d17 	ldw	r8,244(sp)
 18017ac:	10045426 	beq	r2,zero,1802900 <___vfprintf_internal_r+0x1da0>
 18017b0:	1405c83a 	sub	r2,r2,r16
 18017b4:	d8802e15 	stw	r2,184(sp)
 18017b8:	1003cc16 	blt	r2,zero,18026ec <___vfprintf_internal_r+0x1b8c>
 18017bc:	df002783 	ldbu	fp,158(sp)
 18017c0:	d8802a15 	stw	r2,168(sp)
 18017c4:	dcc02d15 	stw	r19,180(sp)
 18017c8:	d8002915 	stw	zero,164(sp)
 18017cc:	d8003215 	stw	zero,200(sp)
 18017d0:	003eb006 	br	1801294 <__ram_exceptions_end+0xff7f0fa4>
 18017d4:	18c03fcc 	andi	r3,r3,255
 18017d8:	183f9b26 	beq	r3,zero,1801648 <__ram_exceptions_end+0xff7f1358>
 18017dc:	d9c02785 	stb	r7,158(sp)
 18017e0:	003f9906 	br	1801648 <__ram_exceptions_end+0xff7f1358>
 18017e4:	18c03fcc 	andi	r3,r3,255
 18017e8:	1805551e 	bne	r3,zero,1802d40 <___vfprintf_internal_r+0x21e0>
 18017ec:	01406134 	movhi	r5,388
 18017f0:	29421a04 	addi	r5,r5,2152
 18017f4:	d9403915 	stw	r5,228(sp)
 18017f8:	9080080c 	andi	r2,r18,32
 18017fc:	103fae1e 	bne	r2,zero,18016b8 <__ram_exceptions_end+0xff7f13c8>
 1801800:	9080040c 	andi	r2,r18,16
 1801804:	1002de26 	beq	r2,zero,1802380 <___vfprintf_internal_r+0x1820>
 1801808:	d8c02d17 	ldw	r3,180(sp)
 180180c:	002d883a 	mov	r22,zero
 1801810:	1cc00017 	ldw	r19,0(r3)
 1801814:	18c00104 	addi	r3,r3,4
 1801818:	d8c02d15 	stw	r3,180(sp)
 180181c:	003fab06 	br	18016cc <__ram_exceptions_end+0xff7f13dc>
 1801820:	38803fcc 	andi	r2,r7,255
 1801824:	1080201c 	xori	r2,r2,128
 1801828:	10bfe004 	addi	r2,r2,-128
 180182c:	1002d21e 	bne	r2,zero,1802378 <___vfprintf_internal_r+0x1818>
 1801830:	00c00044 	movi	r3,1
 1801834:	01c00804 	movi	r7,32
 1801838:	ac400007 	ldb	r17,0(r21)
 180183c:	003d2906 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 1801840:	94800054 	ori	r18,r18,1
 1801844:	ac400007 	ldb	r17,0(r21)
 1801848:	003d2606 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 180184c:	18c03fcc 	andi	r3,r3,255
 1801850:	183e0526 	beq	r3,zero,1801068 <__ram_exceptions_end+0xff7f0d78>
 1801854:	d9c02785 	stb	r7,158(sp)
 1801858:	003e0306 	br	1801068 <__ram_exceptions_end+0xff7f0d78>
 180185c:	94801014 	ori	r18,r18,64
 1801860:	ac400007 	ldb	r17,0(r21)
 1801864:	003d1f06 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 1801868:	ac400007 	ldb	r17,0(r21)
 180186c:	8a438726 	beq	r17,r9,180268c <___vfprintf_internal_r+0x1b2c>
 1801870:	94800414 	ori	r18,r18,16
 1801874:	003d1b06 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 1801878:	18c03fcc 	andi	r3,r3,255
 180187c:	1805341e 	bne	r3,zero,1802d50 <___vfprintf_internal_r+0x21f0>
 1801880:	9080080c 	andi	r2,r18,32
 1801884:	1002cd26 	beq	r2,zero,18023bc <___vfprintf_internal_r+0x185c>
 1801888:	d9402d17 	ldw	r5,180(sp)
 180188c:	d9002f17 	ldw	r4,188(sp)
 1801890:	28800017 	ldw	r2,0(r5)
 1801894:	2007d7fa 	srai	r3,r4,31
 1801898:	29400104 	addi	r5,r5,4
 180189c:	d9402d15 	stw	r5,180(sp)
 18018a0:	11000015 	stw	r4,0(r2)
 18018a4:	10c00115 	stw	r3,4(r2)
 18018a8:	003ce506 	br	1800c40 <__ram_exceptions_end+0xff7f0950>
 18018ac:	d8c02d17 	ldw	r3,180(sp)
 18018b0:	d9002d17 	ldw	r4,180(sp)
 18018b4:	d8002785 	stb	zero,158(sp)
 18018b8:	18800017 	ldw	r2,0(r3)
 18018bc:	21000104 	addi	r4,r4,4
 18018c0:	00c00044 	movi	r3,1
 18018c4:	d8c02a15 	stw	r3,168(sp)
 18018c8:	d8801405 	stb	r2,80(sp)
 18018cc:	d9002d15 	stw	r4,180(sp)
 18018d0:	d8c02e15 	stw	r3,184(sp)
 18018d4:	d8002915 	stw	zero,164(sp)
 18018d8:	d8003215 	stw	zero,200(sp)
 18018dc:	dc001404 	addi	r16,sp,80
 18018e0:	0039883a 	mov	fp,zero
 18018e4:	003e7206 	br	18012b0 <__ram_exceptions_end+0xff7f0fc0>
 18018e8:	01006134 	movhi	r4,388
 18018ec:	21021a04 	addi	r4,r4,2152
 18018f0:	0039883a 	mov	fp,zero
 18018f4:	d9003915 	stw	r4,228(sp)
 18018f8:	04401e04 	movi	r17,120
 18018fc:	003f8206 	br	1801708 <__ram_exceptions_end+0xff7f1418>
 1801900:	18c03fcc 	andi	r3,r3,255
 1801904:	1805061e 	bne	r3,zero,1802d20 <___vfprintf_internal_r+0x21c0>
 1801908:	883d9126 	beq	r17,zero,1800f50 <__ram_exceptions_end+0xff7f0c60>
 180190c:	00c00044 	movi	r3,1
 1801910:	d8c02a15 	stw	r3,168(sp)
 1801914:	dc401405 	stb	r17,80(sp)
 1801918:	d8002785 	stb	zero,158(sp)
 180191c:	003fec06 	br	18018d0 <__ram_exceptions_end+0xff7f15e0>
 1801920:	01406134 	movhi	r5,388
 1801924:	29421a04 	addi	r5,r5,2152
 1801928:	d9403915 	stw	r5,228(sp)
 180192c:	d8c02d15 	stw	r3,180(sp)
 1801930:	1025883a 	mov	r18,r2
 1801934:	04401e04 	movi	r17,120
 1801938:	9d84b03a 	or	r2,r19,r22
 180193c:	1000fc1e 	bne	r2,zero,1801d30 <___vfprintf_internal_r+0x11d0>
 1801940:	0039883a 	mov	fp,zero
 1801944:	00800084 	movi	r2,2
 1801948:	10803fcc 	andi	r2,r2,255
 180194c:	00c00044 	movi	r3,1
 1801950:	10c20f26 	beq	r2,r3,1802190 <___vfprintf_internal_r+0x1630>
 1801954:	00c00084 	movi	r3,2
 1801958:	10fd6326 	beq	r2,r3,1800ee8 <__ram_exceptions_end+0xff7f0bf8>
 180195c:	003e2d06 	br	1801214 <__ram_exceptions_end+0xff7f0f24>
 1801960:	d8c02017 	ldw	r3,128(sp)
 1801964:	003e9306 	br	18013b4 <__ram_exceptions_end+0xff7f10c4>
 1801968:	00801944 	movi	r2,101
 180196c:	14407e0e 	bge	r2,r17,1801b68 <___vfprintf_internal_r+0x1008>
 1801970:	d9003617 	ldw	r4,216(sp)
 1801974:	d9403817 	ldw	r5,224(sp)
 1801978:	000d883a 	mov	r6,zero
 180197c:	000f883a 	mov	r7,zero
 1801980:	d8c03c15 	stw	r3,240(sp)
 1801984:	da003d15 	stw	r8,244(sp)
 1801988:	180be6c0 	call	180be6c <__eqdf2>
 180198c:	d8c03c17 	ldw	r3,240(sp)
 1801990:	da003d17 	ldw	r8,244(sp)
 1801994:	1000f71e 	bne	r2,zero,1801d74 <___vfprintf_internal_r+0x1214>
 1801998:	d8801f17 	ldw	r2,124(sp)
 180199c:	01006134 	movhi	r4,388
 18019a0:	21022104 	addi	r4,r4,2180
 18019a4:	18c00044 	addi	r3,r3,1
 18019a8:	10800044 	addi	r2,r2,1
 18019ac:	41000015 	stw	r4,0(r8)
 18019b0:	01000044 	movi	r4,1
 18019b4:	41000115 	stw	r4,4(r8)
 18019b8:	d8c02015 	stw	r3,128(sp)
 18019bc:	d8801f15 	stw	r2,124(sp)
 18019c0:	010001c4 	movi	r4,7
 18019c4:	2082b816 	blt	r4,r2,18024a8 <___vfprintf_internal_r+0x1948>
 18019c8:	42000204 	addi	r8,r8,8
 18019cc:	d8802617 	ldw	r2,152(sp)
 18019d0:	d9403317 	ldw	r5,204(sp)
 18019d4:	11400216 	blt	r2,r5,18019e0 <___vfprintf_internal_r+0xe80>
 18019d8:	9080004c 	andi	r2,r18,1
 18019dc:	103ed526 	beq	r2,zero,1801534 <__ram_exceptions_end+0xff7f1244>
 18019e0:	d8803717 	ldw	r2,220(sp)
 18019e4:	d9003417 	ldw	r4,208(sp)
 18019e8:	d9403717 	ldw	r5,220(sp)
 18019ec:	1887883a 	add	r3,r3,r2
 18019f0:	d8801f17 	ldw	r2,124(sp)
 18019f4:	41000015 	stw	r4,0(r8)
 18019f8:	41400115 	stw	r5,4(r8)
 18019fc:	10800044 	addi	r2,r2,1
 1801a00:	d8c02015 	stw	r3,128(sp)
 1801a04:	d8801f15 	stw	r2,124(sp)
 1801a08:	010001c4 	movi	r4,7
 1801a0c:	20832916 	blt	r4,r2,18026b4 <___vfprintf_internal_r+0x1b54>
 1801a10:	42000204 	addi	r8,r8,8
 1801a14:	d8803317 	ldw	r2,204(sp)
 1801a18:	143fffc4 	addi	r16,r2,-1
 1801a1c:	043ec50e 	bge	zero,r16,1801534 <__ram_exceptions_end+0xff7f1244>
 1801a20:	04400404 	movi	r17,16
 1801a24:	d8801f17 	ldw	r2,124(sp)
 1801a28:	8c00880e 	bge	r17,r16,1801c4c <___vfprintf_internal_r+0x10ec>
 1801a2c:	01406134 	movhi	r5,388
 1801a30:	29422184 	addi	r5,r5,2182
 1801a34:	d9402b15 	stw	r5,172(sp)
 1801a38:	058001c4 	movi	r22,7
 1801a3c:	dcc02c17 	ldw	r19,176(sp)
 1801a40:	00000306 	br	1801a50 <___vfprintf_internal_r+0xef0>
 1801a44:	42000204 	addi	r8,r8,8
 1801a48:	843ffc04 	addi	r16,r16,-16
 1801a4c:	8c00820e 	bge	r17,r16,1801c58 <___vfprintf_internal_r+0x10f8>
 1801a50:	18c00404 	addi	r3,r3,16
 1801a54:	10800044 	addi	r2,r2,1
 1801a58:	45000015 	stw	r20,0(r8)
 1801a5c:	44400115 	stw	r17,4(r8)
 1801a60:	d8c02015 	stw	r3,128(sp)
 1801a64:	d8801f15 	stw	r2,124(sp)
 1801a68:	b0bff60e 	bge	r22,r2,1801a44 <__ram_exceptions_end+0xff7f1754>
 1801a6c:	d9801e04 	addi	r6,sp,120
 1801a70:	b80b883a 	mov	r5,r23
 1801a74:	9809883a 	mov	r4,r19
 1801a78:	18076780 	call	1807678 <__sprint_r>
 1801a7c:	103d3a1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801a80:	d8c02017 	ldw	r3,128(sp)
 1801a84:	d8801f17 	ldw	r2,124(sp)
 1801a88:	da000404 	addi	r8,sp,16
 1801a8c:	003fee06 	br	1801a48 <__ram_exceptions_end+0xff7f1758>
 1801a90:	d9403117 	ldw	r5,196(sp)
 1801a94:	d8802a17 	ldw	r2,168(sp)
 1801a98:	28adc83a 	sub	r22,r5,r2
 1801a9c:	05be630e 	bge	zero,r22,180142c <__ram_exceptions_end+0xff7f113c>
 1801aa0:	07000404 	movi	fp,16
 1801aa4:	d8801f17 	ldw	r2,124(sp)
 1801aa8:	e5838f0e 	bge	fp,r22,18028e8 <___vfprintf_internal_r+0x1d88>
 1801aac:	01406134 	movhi	r5,388
 1801ab0:	29422184 	addi	r5,r5,2182
 1801ab4:	dc403015 	stw	r17,192(sp)
 1801ab8:	d9402b15 	stw	r5,172(sp)
 1801abc:	b023883a 	mov	r17,r22
 1801ac0:	04c001c4 	movi	r19,7
 1801ac4:	a82d883a 	mov	r22,r21
 1801ac8:	902b883a 	mov	r21,r18
 1801acc:	8025883a 	mov	r18,r16
 1801ad0:	dc002c17 	ldw	r16,176(sp)
 1801ad4:	00000306 	br	1801ae4 <___vfprintf_internal_r+0xf84>
 1801ad8:	8c7ffc04 	addi	r17,r17,-16
 1801adc:	42000204 	addi	r8,r8,8
 1801ae0:	e440110e 	bge	fp,r17,1801b28 <___vfprintf_internal_r+0xfc8>
 1801ae4:	18c00404 	addi	r3,r3,16
 1801ae8:	10800044 	addi	r2,r2,1
 1801aec:	45000015 	stw	r20,0(r8)
 1801af0:	47000115 	stw	fp,4(r8)
 1801af4:	d8c02015 	stw	r3,128(sp)
 1801af8:	d8801f15 	stw	r2,124(sp)
 1801afc:	98bff60e 	bge	r19,r2,1801ad8 <__ram_exceptions_end+0xff7f17e8>
 1801b00:	d9801e04 	addi	r6,sp,120
 1801b04:	b80b883a 	mov	r5,r23
 1801b08:	8009883a 	mov	r4,r16
 1801b0c:	18076780 	call	1807678 <__sprint_r>
 1801b10:	103d151e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801b14:	8c7ffc04 	addi	r17,r17,-16
 1801b18:	d8c02017 	ldw	r3,128(sp)
 1801b1c:	d8801f17 	ldw	r2,124(sp)
 1801b20:	da000404 	addi	r8,sp,16
 1801b24:	e47fef16 	blt	fp,r17,1801ae4 <__ram_exceptions_end+0xff7f17f4>
 1801b28:	9021883a 	mov	r16,r18
 1801b2c:	a825883a 	mov	r18,r21
 1801b30:	b02b883a 	mov	r21,r22
 1801b34:	882d883a 	mov	r22,r17
 1801b38:	dc403017 	ldw	r17,192(sp)
 1801b3c:	d9002b17 	ldw	r4,172(sp)
 1801b40:	1d87883a 	add	r3,r3,r22
 1801b44:	10800044 	addi	r2,r2,1
 1801b48:	41000015 	stw	r4,0(r8)
 1801b4c:	45800115 	stw	r22,4(r8)
 1801b50:	d8c02015 	stw	r3,128(sp)
 1801b54:	d8801f15 	stw	r2,124(sp)
 1801b58:	010001c4 	movi	r4,7
 1801b5c:	20818e16 	blt	r4,r2,1802198 <___vfprintf_internal_r+0x1638>
 1801b60:	42000204 	addi	r8,r8,8
 1801b64:	003e3106 	br	180142c <__ram_exceptions_end+0xff7f113c>
 1801b68:	d9403317 	ldw	r5,204(sp)
 1801b6c:	00800044 	movi	r2,1
 1801b70:	18c00044 	addi	r3,r3,1
 1801b74:	1141530e 	bge	r2,r5,18020c4 <___vfprintf_internal_r+0x1564>
 1801b78:	dc401f17 	ldw	r17,124(sp)
 1801b7c:	00800044 	movi	r2,1
 1801b80:	40800115 	stw	r2,4(r8)
 1801b84:	8c400044 	addi	r17,r17,1
 1801b88:	44000015 	stw	r16,0(r8)
 1801b8c:	d8c02015 	stw	r3,128(sp)
 1801b90:	dc401f15 	stw	r17,124(sp)
 1801b94:	008001c4 	movi	r2,7
 1801b98:	14416b16 	blt	r2,r17,1802148 <___vfprintf_internal_r+0x15e8>
 1801b9c:	42000204 	addi	r8,r8,8
 1801ba0:	d8803717 	ldw	r2,220(sp)
 1801ba4:	d9003417 	ldw	r4,208(sp)
 1801ba8:	8c400044 	addi	r17,r17,1
 1801bac:	10c7883a 	add	r3,r2,r3
 1801bb0:	40800115 	stw	r2,4(r8)
 1801bb4:	41000015 	stw	r4,0(r8)
 1801bb8:	d8c02015 	stw	r3,128(sp)
 1801bbc:	dc401f15 	stw	r17,124(sp)
 1801bc0:	008001c4 	movi	r2,7
 1801bc4:	14416916 	blt	r2,r17,180216c <___vfprintf_internal_r+0x160c>
 1801bc8:	45800204 	addi	r22,r8,8
 1801bcc:	d9003617 	ldw	r4,216(sp)
 1801bd0:	d9403817 	ldw	r5,224(sp)
 1801bd4:	000d883a 	mov	r6,zero
 1801bd8:	000f883a 	mov	r7,zero
 1801bdc:	d8c03c15 	stw	r3,240(sp)
 1801be0:	180be6c0 	call	180be6c <__eqdf2>
 1801be4:	d8c03c17 	ldw	r3,240(sp)
 1801be8:	1000bc26 	beq	r2,zero,1801edc <___vfprintf_internal_r+0x137c>
 1801bec:	d9403317 	ldw	r5,204(sp)
 1801bf0:	84000044 	addi	r16,r16,1
 1801bf4:	8c400044 	addi	r17,r17,1
 1801bf8:	28bfffc4 	addi	r2,r5,-1
 1801bfc:	1887883a 	add	r3,r3,r2
 1801c00:	b0800115 	stw	r2,4(r22)
 1801c04:	b4000015 	stw	r16,0(r22)
 1801c08:	d8c02015 	stw	r3,128(sp)
 1801c0c:	dc401f15 	stw	r17,124(sp)
 1801c10:	008001c4 	movi	r2,7
 1801c14:	14414316 	blt	r2,r17,1802124 <___vfprintf_internal_r+0x15c4>
 1801c18:	b5800204 	addi	r22,r22,8
 1801c1c:	d9003a17 	ldw	r4,232(sp)
 1801c20:	df0022c4 	addi	fp,sp,139
 1801c24:	8c400044 	addi	r17,r17,1
 1801c28:	20c7883a 	add	r3,r4,r3
 1801c2c:	b7000015 	stw	fp,0(r22)
 1801c30:	b1000115 	stw	r4,4(r22)
 1801c34:	d8c02015 	stw	r3,128(sp)
 1801c38:	dc401f15 	stw	r17,124(sp)
 1801c3c:	008001c4 	movi	r2,7
 1801c40:	14400e16 	blt	r2,r17,1801c7c <___vfprintf_internal_r+0x111c>
 1801c44:	b2000204 	addi	r8,r22,8
 1801c48:	003e3a06 	br	1801534 <__ram_exceptions_end+0xff7f1244>
 1801c4c:	01006134 	movhi	r4,388
 1801c50:	21022184 	addi	r4,r4,2182
 1801c54:	d9002b15 	stw	r4,172(sp)
 1801c58:	d9002b17 	ldw	r4,172(sp)
 1801c5c:	1c07883a 	add	r3,r3,r16
 1801c60:	44000115 	stw	r16,4(r8)
 1801c64:	41000015 	stw	r4,0(r8)
 1801c68:	10800044 	addi	r2,r2,1
 1801c6c:	d8c02015 	stw	r3,128(sp)
 1801c70:	d8801f15 	stw	r2,124(sp)
 1801c74:	010001c4 	movi	r4,7
 1801c78:	20be2d0e 	bge	r4,r2,1801530 <__ram_exceptions_end+0xff7f1240>
 1801c7c:	d9002c17 	ldw	r4,176(sp)
 1801c80:	d9801e04 	addi	r6,sp,120
 1801c84:	b80b883a 	mov	r5,r23
 1801c88:	18076780 	call	1807678 <__sprint_r>
 1801c8c:	103cb61e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801c90:	d8c02017 	ldw	r3,128(sp)
 1801c94:	da000404 	addi	r8,sp,16
 1801c98:	003e2606 	br	1801534 <__ram_exceptions_end+0xff7f1244>
 1801c9c:	d9002c17 	ldw	r4,176(sp)
 1801ca0:	d9801e04 	addi	r6,sp,120
 1801ca4:	b80b883a 	mov	r5,r23
 1801ca8:	18076780 	call	1807678 <__sprint_r>
 1801cac:	103e5d26 	beq	r2,zero,1801624 <__ram_exceptions_end+0xff7f1334>
 1801cb0:	003cad06 	br	1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801cb4:	d9002c17 	ldw	r4,176(sp)
 1801cb8:	d9801e04 	addi	r6,sp,120
 1801cbc:	b80b883a 	mov	r5,r23
 1801cc0:	18076780 	call	1807678 <__sprint_r>
 1801cc4:	103ca81e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801cc8:	d8c02017 	ldw	r3,128(sp)
 1801ccc:	da000404 	addi	r8,sp,16
 1801cd0:	003e0b06 	br	1801500 <__ram_exceptions_end+0xff7f1210>
 1801cd4:	d9002c17 	ldw	r4,176(sp)
 1801cd8:	d9801e04 	addi	r6,sp,120
 1801cdc:	b80b883a 	mov	r5,r23
 1801ce0:	18076780 	call	1807678 <__sprint_r>
 1801ce4:	103ca01e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801ce8:	d8c02017 	ldw	r3,128(sp)
 1801cec:	da000404 	addi	r8,sp,16
 1801cf0:	003dbd06 	br	18013e8 <__ram_exceptions_end+0xff7f10f8>
 1801cf4:	d9002c17 	ldw	r4,176(sp)
 1801cf8:	d9801e04 	addi	r6,sp,120
 1801cfc:	b80b883a 	mov	r5,r23
 1801d00:	18076780 	call	1807678 <__sprint_r>
 1801d04:	103c981e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801d08:	d8c02017 	ldw	r3,128(sp)
 1801d0c:	da000404 	addi	r8,sp,16
 1801d10:	003dc306 	br	1801420 <__ram_exceptions_end+0xff7f1130>
 1801d14:	d8802917 	ldw	r2,164(sp)
 1801d18:	d8002785 	stb	zero,158(sp)
 1801d1c:	103f0616 	blt	r2,zero,1801938 <__ram_exceptions_end+0xff7f1648>
 1801d20:	00ffdfc4 	movi	r3,-129
 1801d24:	9d84b03a 	or	r2,r19,r22
 1801d28:	90e4703a 	and	r18,r18,r3
 1801d2c:	103c6b26 	beq	r2,zero,1800edc <__ram_exceptions_end+0xff7f0bec>
 1801d30:	0039883a 	mov	fp,zero
 1801d34:	003e7406 	br	1801708 <__ram_exceptions_end+0xff7f1418>
 1801d38:	9080040c 	andi	r2,r18,16
 1801d3c:	1001b326 	beq	r2,zero,180240c <___vfprintf_internal_r+0x18ac>
 1801d40:	d9002d17 	ldw	r4,180(sp)
 1801d44:	d9402917 	ldw	r5,164(sp)
 1801d48:	d8002785 	stb	zero,158(sp)
 1801d4c:	20800104 	addi	r2,r4,4
 1801d50:	24c00017 	ldw	r19,0(r4)
 1801d54:	002d883a 	mov	r22,zero
 1801d58:	2801b516 	blt	r5,zero,1802430 <___vfprintf_internal_r+0x18d0>
 1801d5c:	00ffdfc4 	movi	r3,-129
 1801d60:	d8802d15 	stw	r2,180(sp)
 1801d64:	90e4703a 	and	r18,r18,r3
 1801d68:	983d2726 	beq	r19,zero,1801208 <__ram_exceptions_end+0xff7f0f18>
 1801d6c:	0039883a 	mov	fp,zero
 1801d70:	003d2a06 	br	180121c <__ram_exceptions_end+0xff7f0f2c>
 1801d74:	dc402617 	ldw	r17,152(sp)
 1801d78:	0441d30e 	bge	zero,r17,18024c8 <___vfprintf_internal_r+0x1968>
 1801d7c:	dc403217 	ldw	r17,200(sp)
 1801d80:	d8803317 	ldw	r2,204(sp)
 1801d84:	1440010e 	bge	r2,r17,1801d8c <___vfprintf_internal_r+0x122c>
 1801d88:	1023883a 	mov	r17,r2
 1801d8c:	04400a0e 	bge	zero,r17,1801db8 <___vfprintf_internal_r+0x1258>
 1801d90:	d8801f17 	ldw	r2,124(sp)
 1801d94:	1c47883a 	add	r3,r3,r17
 1801d98:	44000015 	stw	r16,0(r8)
 1801d9c:	10800044 	addi	r2,r2,1
 1801da0:	44400115 	stw	r17,4(r8)
 1801da4:	d8c02015 	stw	r3,128(sp)
 1801da8:	d8801f15 	stw	r2,124(sp)
 1801dac:	010001c4 	movi	r4,7
 1801db0:	20826516 	blt	r4,r2,1802748 <___vfprintf_internal_r+0x1be8>
 1801db4:	42000204 	addi	r8,r8,8
 1801db8:	88026116 	blt	r17,zero,1802740 <___vfprintf_internal_r+0x1be0>
 1801dbc:	d9003217 	ldw	r4,200(sp)
 1801dc0:	2463c83a 	sub	r17,r4,r17
 1801dc4:	04407b0e 	bge	zero,r17,1801fb4 <___vfprintf_internal_r+0x1454>
 1801dc8:	05800404 	movi	r22,16
 1801dcc:	d8801f17 	ldw	r2,124(sp)
 1801dd0:	b4419d0e 	bge	r22,r17,1802448 <___vfprintf_internal_r+0x18e8>
 1801dd4:	01006134 	movhi	r4,388
 1801dd8:	21022184 	addi	r4,r4,2182
 1801ddc:	d9002b15 	stw	r4,172(sp)
 1801de0:	070001c4 	movi	fp,7
 1801de4:	dcc02c17 	ldw	r19,176(sp)
 1801de8:	00000306 	br	1801df8 <___vfprintf_internal_r+0x1298>
 1801dec:	42000204 	addi	r8,r8,8
 1801df0:	8c7ffc04 	addi	r17,r17,-16
 1801df4:	b441970e 	bge	r22,r17,1802454 <___vfprintf_internal_r+0x18f4>
 1801df8:	18c00404 	addi	r3,r3,16
 1801dfc:	10800044 	addi	r2,r2,1
 1801e00:	45000015 	stw	r20,0(r8)
 1801e04:	45800115 	stw	r22,4(r8)
 1801e08:	d8c02015 	stw	r3,128(sp)
 1801e0c:	d8801f15 	stw	r2,124(sp)
 1801e10:	e0bff60e 	bge	fp,r2,1801dec <__ram_exceptions_end+0xff7f1afc>
 1801e14:	d9801e04 	addi	r6,sp,120
 1801e18:	b80b883a 	mov	r5,r23
 1801e1c:	9809883a 	mov	r4,r19
 1801e20:	18076780 	call	1807678 <__sprint_r>
 1801e24:	103c501e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801e28:	d8c02017 	ldw	r3,128(sp)
 1801e2c:	d8801f17 	ldw	r2,124(sp)
 1801e30:	da000404 	addi	r8,sp,16
 1801e34:	003fee06 	br	1801df0 <__ram_exceptions_end+0xff7f1b00>
 1801e38:	d9002c17 	ldw	r4,176(sp)
 1801e3c:	d9801e04 	addi	r6,sp,120
 1801e40:	b80b883a 	mov	r5,r23
 1801e44:	18076780 	call	1807678 <__sprint_r>
 1801e48:	103c471e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801e4c:	d8c02017 	ldw	r3,128(sp)
 1801e50:	df002787 	ldb	fp,158(sp)
 1801e54:	da000404 	addi	r8,sp,16
 1801e58:	003d5606 	br	18013b4 <__ram_exceptions_end+0xff7f10c4>
 1801e5c:	9080040c 	andi	r2,r18,16
 1801e60:	10016126 	beq	r2,zero,18023e8 <___vfprintf_internal_r+0x1888>
 1801e64:	d8802d17 	ldw	r2,180(sp)
 1801e68:	14c00017 	ldw	r19,0(r2)
 1801e6c:	10800104 	addi	r2,r2,4
 1801e70:	d8802d15 	stw	r2,180(sp)
 1801e74:	982dd7fa 	srai	r22,r19,31
 1801e78:	b005883a 	mov	r2,r22
 1801e7c:	003c8206 	br	1801088 <__ram_exceptions_end+0xff7f0d98>
 1801e80:	9080040c 	andi	r2,r18,16
 1801e84:	10003526 	beq	r2,zero,1801f5c <___vfprintf_internal_r+0x13fc>
 1801e88:	d9402d17 	ldw	r5,180(sp)
 1801e8c:	d8c02917 	ldw	r3,164(sp)
 1801e90:	d8002785 	stb	zero,158(sp)
 1801e94:	28800104 	addi	r2,r5,4
 1801e98:	2cc00017 	ldw	r19,0(r5)
 1801e9c:	002d883a 	mov	r22,zero
 1801ea0:	18003716 	blt	r3,zero,1801f80 <___vfprintf_internal_r+0x1420>
 1801ea4:	00ffdfc4 	movi	r3,-129
 1801ea8:	d8802d15 	stw	r2,180(sp)
 1801eac:	90e4703a 	and	r18,r18,r3
 1801eb0:	0039883a 	mov	fp,zero
 1801eb4:	983df326 	beq	r19,zero,1801684 <__ram_exceptions_end+0xff7f1394>
 1801eb8:	00800244 	movi	r2,9
 1801ebc:	14fc7b36 	bltu	r2,r19,18010ac <__ram_exceptions_end+0xff7f0dbc>
 1801ec0:	d8c02817 	ldw	r3,160(sp)
 1801ec4:	dc001dc4 	addi	r16,sp,119
 1801ec8:	9cc00c04 	addi	r19,r19,48
 1801ecc:	1c07c83a 	sub	r3,r3,r16
 1801ed0:	dcc01dc5 	stb	r19,119(sp)
 1801ed4:	d8c02e15 	stw	r3,184(sp)
 1801ed8:	003ce806 	br	180127c <__ram_exceptions_end+0xff7f0f8c>
 1801edc:	d8803317 	ldw	r2,204(sp)
 1801ee0:	143fffc4 	addi	r16,r2,-1
 1801ee4:	043f4d0e 	bge	zero,r16,1801c1c <__ram_exceptions_end+0xff7f192c>
 1801ee8:	07000404 	movi	fp,16
 1801eec:	e400810e 	bge	fp,r16,18020f4 <___vfprintf_internal_r+0x1594>
 1801ef0:	01406134 	movhi	r5,388
 1801ef4:	29422184 	addi	r5,r5,2182
 1801ef8:	d9402b15 	stw	r5,172(sp)
 1801efc:	01c001c4 	movi	r7,7
 1801f00:	dcc02c17 	ldw	r19,176(sp)
 1801f04:	00000306 	br	1801f14 <___vfprintf_internal_r+0x13b4>
 1801f08:	b5800204 	addi	r22,r22,8
 1801f0c:	843ffc04 	addi	r16,r16,-16
 1801f10:	e4007b0e 	bge	fp,r16,1802100 <___vfprintf_internal_r+0x15a0>
 1801f14:	18c00404 	addi	r3,r3,16
 1801f18:	8c400044 	addi	r17,r17,1
 1801f1c:	b5000015 	stw	r20,0(r22)
 1801f20:	b7000115 	stw	fp,4(r22)
 1801f24:	d8c02015 	stw	r3,128(sp)
 1801f28:	dc401f15 	stw	r17,124(sp)
 1801f2c:	3c7ff60e 	bge	r7,r17,1801f08 <__ram_exceptions_end+0xff7f1c18>
 1801f30:	d9801e04 	addi	r6,sp,120
 1801f34:	b80b883a 	mov	r5,r23
 1801f38:	9809883a 	mov	r4,r19
 1801f3c:	d9c03c15 	stw	r7,240(sp)
 1801f40:	18076780 	call	1807678 <__sprint_r>
 1801f44:	d9c03c17 	ldw	r7,240(sp)
 1801f48:	103c071e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801f4c:	d8c02017 	ldw	r3,128(sp)
 1801f50:	dc401f17 	ldw	r17,124(sp)
 1801f54:	dd800404 	addi	r22,sp,16
 1801f58:	003fec06 	br	1801f0c <__ram_exceptions_end+0xff7f1c1c>
 1801f5c:	9080100c 	andi	r2,r18,64
 1801f60:	d8002785 	stb	zero,158(sp)
 1801f64:	10010e26 	beq	r2,zero,18023a0 <___vfprintf_internal_r+0x1840>
 1801f68:	d9002d17 	ldw	r4,180(sp)
 1801f6c:	d9402917 	ldw	r5,164(sp)
 1801f70:	002d883a 	mov	r22,zero
 1801f74:	20800104 	addi	r2,r4,4
 1801f78:	24c0000b 	ldhu	r19,0(r4)
 1801f7c:	283fc90e 	bge	r5,zero,1801ea4 <__ram_exceptions_end+0xff7f1bb4>
 1801f80:	d8802d15 	stw	r2,180(sp)
 1801f84:	0039883a 	mov	fp,zero
 1801f88:	9d84b03a 	or	r2,r19,r22
 1801f8c:	103c461e 	bne	r2,zero,18010a8 <__ram_exceptions_end+0xff7f0db8>
 1801f90:	00800044 	movi	r2,1
 1801f94:	003e6c06 	br	1801948 <__ram_exceptions_end+0xff7f1658>
 1801f98:	d9002c17 	ldw	r4,176(sp)
 1801f9c:	d9801e04 	addi	r6,sp,120
 1801fa0:	b80b883a 	mov	r5,r23
 1801fa4:	18076780 	call	1807678 <__sprint_r>
 1801fa8:	103bef1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1801fac:	d8c02017 	ldw	r3,128(sp)
 1801fb0:	da000404 	addi	r8,sp,16
 1801fb4:	d9003217 	ldw	r4,200(sp)
 1801fb8:	d8802617 	ldw	r2,152(sp)
 1801fbc:	d9403317 	ldw	r5,204(sp)
 1801fc0:	8123883a 	add	r17,r16,r4
 1801fc4:	11400216 	blt	r2,r5,1801fd0 <___vfprintf_internal_r+0x1470>
 1801fc8:	9100004c 	andi	r4,r18,1
 1801fcc:	20000d26 	beq	r4,zero,1802004 <___vfprintf_internal_r+0x14a4>
 1801fd0:	d9003717 	ldw	r4,220(sp)
 1801fd4:	d9403417 	ldw	r5,208(sp)
 1801fd8:	1907883a 	add	r3,r3,r4
 1801fdc:	d9001f17 	ldw	r4,124(sp)
 1801fe0:	41400015 	stw	r5,0(r8)
 1801fe4:	d9403717 	ldw	r5,220(sp)
 1801fe8:	21000044 	addi	r4,r4,1
 1801fec:	d8c02015 	stw	r3,128(sp)
 1801ff0:	41400115 	stw	r5,4(r8)
 1801ff4:	d9001f15 	stw	r4,124(sp)
 1801ff8:	014001c4 	movi	r5,7
 1801ffc:	2901e816 	blt	r5,r4,18027a0 <___vfprintf_internal_r+0x1c40>
 1802000:	42000204 	addi	r8,r8,8
 1802004:	d9003317 	ldw	r4,204(sp)
 1802008:	8121883a 	add	r16,r16,r4
 180200c:	2085c83a 	sub	r2,r4,r2
 1802010:	8461c83a 	sub	r16,r16,r17
 1802014:	1400010e 	bge	r2,r16,180201c <___vfprintf_internal_r+0x14bc>
 1802018:	1021883a 	mov	r16,r2
 180201c:	04000a0e 	bge	zero,r16,1802048 <___vfprintf_internal_r+0x14e8>
 1802020:	d9001f17 	ldw	r4,124(sp)
 1802024:	1c07883a 	add	r3,r3,r16
 1802028:	44400015 	stw	r17,0(r8)
 180202c:	21000044 	addi	r4,r4,1
 1802030:	44000115 	stw	r16,4(r8)
 1802034:	d8c02015 	stw	r3,128(sp)
 1802038:	d9001f15 	stw	r4,124(sp)
 180203c:	014001c4 	movi	r5,7
 1802040:	2901fb16 	blt	r5,r4,1802830 <___vfprintf_internal_r+0x1cd0>
 1802044:	42000204 	addi	r8,r8,8
 1802048:	8001f716 	blt	r16,zero,1802828 <___vfprintf_internal_r+0x1cc8>
 180204c:	1421c83a 	sub	r16,r2,r16
 1802050:	043d380e 	bge	zero,r16,1801534 <__ram_exceptions_end+0xff7f1244>
 1802054:	04400404 	movi	r17,16
 1802058:	d8801f17 	ldw	r2,124(sp)
 180205c:	8c3efb0e 	bge	r17,r16,1801c4c <__ram_exceptions_end+0xff7f195c>
 1802060:	01406134 	movhi	r5,388
 1802064:	29422184 	addi	r5,r5,2182
 1802068:	d9402b15 	stw	r5,172(sp)
 180206c:	058001c4 	movi	r22,7
 1802070:	dcc02c17 	ldw	r19,176(sp)
 1802074:	00000306 	br	1802084 <___vfprintf_internal_r+0x1524>
 1802078:	42000204 	addi	r8,r8,8
 180207c:	843ffc04 	addi	r16,r16,-16
 1802080:	8c3ef50e 	bge	r17,r16,1801c58 <__ram_exceptions_end+0xff7f1968>
 1802084:	18c00404 	addi	r3,r3,16
 1802088:	10800044 	addi	r2,r2,1
 180208c:	45000015 	stw	r20,0(r8)
 1802090:	44400115 	stw	r17,4(r8)
 1802094:	d8c02015 	stw	r3,128(sp)
 1802098:	d8801f15 	stw	r2,124(sp)
 180209c:	b0bff60e 	bge	r22,r2,1802078 <__ram_exceptions_end+0xff7f1d88>
 18020a0:	d9801e04 	addi	r6,sp,120
 18020a4:	b80b883a 	mov	r5,r23
 18020a8:	9809883a 	mov	r4,r19
 18020ac:	18076780 	call	1807678 <__sprint_r>
 18020b0:	103bad1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 18020b4:	d8c02017 	ldw	r3,128(sp)
 18020b8:	d8801f17 	ldw	r2,124(sp)
 18020bc:	da000404 	addi	r8,sp,16
 18020c0:	003fee06 	br	180207c <__ram_exceptions_end+0xff7f1d8c>
 18020c4:	9088703a 	and	r4,r18,r2
 18020c8:	203eab1e 	bne	r4,zero,1801b78 <__ram_exceptions_end+0xff7f1888>
 18020cc:	dc401f17 	ldw	r17,124(sp)
 18020d0:	40800115 	stw	r2,4(r8)
 18020d4:	44000015 	stw	r16,0(r8)
 18020d8:	8c400044 	addi	r17,r17,1
 18020dc:	d8c02015 	stw	r3,128(sp)
 18020e0:	dc401f15 	stw	r17,124(sp)
 18020e4:	008001c4 	movi	r2,7
 18020e8:	14400e16 	blt	r2,r17,1802124 <___vfprintf_internal_r+0x15c4>
 18020ec:	45800204 	addi	r22,r8,8
 18020f0:	003eca06 	br	1801c1c <__ram_exceptions_end+0xff7f192c>
 18020f4:	01006134 	movhi	r4,388
 18020f8:	21022184 	addi	r4,r4,2182
 18020fc:	d9002b15 	stw	r4,172(sp)
 1802100:	d8802b17 	ldw	r2,172(sp)
 1802104:	1c07883a 	add	r3,r3,r16
 1802108:	8c400044 	addi	r17,r17,1
 180210c:	b0800015 	stw	r2,0(r22)
 1802110:	b4000115 	stw	r16,4(r22)
 1802114:	d8c02015 	stw	r3,128(sp)
 1802118:	dc401f15 	stw	r17,124(sp)
 180211c:	008001c4 	movi	r2,7
 1802120:	147ebd0e 	bge	r2,r17,1801c18 <__ram_exceptions_end+0xff7f1928>
 1802124:	d9002c17 	ldw	r4,176(sp)
 1802128:	d9801e04 	addi	r6,sp,120
 180212c:	b80b883a 	mov	r5,r23
 1802130:	18076780 	call	1807678 <__sprint_r>
 1802134:	103b8c1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1802138:	d8c02017 	ldw	r3,128(sp)
 180213c:	dc401f17 	ldw	r17,124(sp)
 1802140:	dd800404 	addi	r22,sp,16
 1802144:	003eb506 	br	1801c1c <__ram_exceptions_end+0xff7f192c>
 1802148:	d9002c17 	ldw	r4,176(sp)
 180214c:	d9801e04 	addi	r6,sp,120
 1802150:	b80b883a 	mov	r5,r23
 1802154:	18076780 	call	1807678 <__sprint_r>
 1802158:	103b831e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 180215c:	d8c02017 	ldw	r3,128(sp)
 1802160:	dc401f17 	ldw	r17,124(sp)
 1802164:	da000404 	addi	r8,sp,16
 1802168:	003e8d06 	br	1801ba0 <__ram_exceptions_end+0xff7f18b0>
 180216c:	d9002c17 	ldw	r4,176(sp)
 1802170:	d9801e04 	addi	r6,sp,120
 1802174:	b80b883a 	mov	r5,r23
 1802178:	18076780 	call	1807678 <__sprint_r>
 180217c:	103b7a1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1802180:	d8c02017 	ldw	r3,128(sp)
 1802184:	dc401f17 	ldw	r17,124(sp)
 1802188:	dd800404 	addi	r22,sp,16
 180218c:	003e8f06 	br	1801bcc <__ram_exceptions_end+0xff7f18dc>
 1802190:	0027883a 	mov	r19,zero
 1802194:	003f4a06 	br	1801ec0 <__ram_exceptions_end+0xff7f1bd0>
 1802198:	d9002c17 	ldw	r4,176(sp)
 180219c:	d9801e04 	addi	r6,sp,120
 18021a0:	b80b883a 	mov	r5,r23
 18021a4:	18076780 	call	1807678 <__sprint_r>
 18021a8:	103b6f1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 18021ac:	d8c02017 	ldw	r3,128(sp)
 18021b0:	da000404 	addi	r8,sp,16
 18021b4:	003c9d06 	br	180142c <__ram_exceptions_end+0xff7f113c>
 18021b8:	04e7c83a 	sub	r19,zero,r19
 18021bc:	9804c03a 	cmpne	r2,r19,zero
 18021c0:	05adc83a 	sub	r22,zero,r22
 18021c4:	b0adc83a 	sub	r22,r22,r2
 18021c8:	d8802917 	ldw	r2,164(sp)
 18021cc:	07000b44 	movi	fp,45
 18021d0:	df002785 	stb	fp,158(sp)
 18021d4:	10017b16 	blt	r2,zero,18027c4 <___vfprintf_internal_r+0x1c64>
 18021d8:	00bfdfc4 	movi	r2,-129
 18021dc:	90a4703a 	and	r18,r18,r2
 18021e0:	003bb106 	br	18010a8 <__ram_exceptions_end+0xff7f0db8>
 18021e4:	d9003617 	ldw	r4,216(sp)
 18021e8:	d9403817 	ldw	r5,224(sp)
 18021ec:	da003d15 	stw	r8,244(sp)
 18021f0:	18072040 	call	1807204 <__fpclassifyd>
 18021f4:	da003d17 	ldw	r8,244(sp)
 18021f8:	1000f026 	beq	r2,zero,18025bc <___vfprintf_internal_r+0x1a5c>
 18021fc:	d9002917 	ldw	r4,164(sp)
 1802200:	05bff7c4 	movi	r22,-33
 1802204:	00bfffc4 	movi	r2,-1
 1802208:	8dac703a 	and	r22,r17,r22
 180220c:	20820026 	beq	r4,r2,1802a10 <___vfprintf_internal_r+0x1eb0>
 1802210:	008011c4 	movi	r2,71
 1802214:	b081f726 	beq	r22,r2,18029f4 <___vfprintf_internal_r+0x1e94>
 1802218:	d9003817 	ldw	r4,224(sp)
 180221c:	90c04014 	ori	r3,r18,256
 1802220:	d8c02b15 	stw	r3,172(sp)
 1802224:	20021516 	blt	r4,zero,1802a7c <___vfprintf_internal_r+0x1f1c>
 1802228:	dcc03817 	ldw	r19,224(sp)
 180222c:	d8002a05 	stb	zero,168(sp)
 1802230:	00801984 	movi	r2,102
 1802234:	8881f926 	beq	r17,r2,1802a1c <___vfprintf_internal_r+0x1ebc>
 1802238:	00801184 	movi	r2,70
 180223c:	88821c26 	beq	r17,r2,1802ab0 <___vfprintf_internal_r+0x1f50>
 1802240:	00801144 	movi	r2,69
 1802244:	b081ef26 	beq	r22,r2,1802a04 <___vfprintf_internal_r+0x1ea4>
 1802248:	d8c02917 	ldw	r3,164(sp)
 180224c:	d8802104 	addi	r2,sp,132
 1802250:	d8800315 	stw	r2,12(sp)
 1802254:	d9403617 	ldw	r5,216(sp)
 1802258:	d8802504 	addi	r2,sp,148
 180225c:	d9002c17 	ldw	r4,176(sp)
 1802260:	d8800215 	stw	r2,8(sp)
 1802264:	d8802604 	addi	r2,sp,152
 1802268:	d8c00015 	stw	r3,0(sp)
 180226c:	d8800115 	stw	r2,4(sp)
 1802270:	01c00084 	movi	r7,2
 1802274:	980d883a 	mov	r6,r19
 1802278:	d8c03c15 	stw	r3,240(sp)
 180227c:	da003d15 	stw	r8,244(sp)
 1802280:	18031840 	call	1803184 <_dtoa_r>
 1802284:	1021883a 	mov	r16,r2
 1802288:	008019c4 	movi	r2,103
 180228c:	d8c03c17 	ldw	r3,240(sp)
 1802290:	da003d17 	ldw	r8,244(sp)
 1802294:	88817126 	beq	r17,r2,180285c <___vfprintf_internal_r+0x1cfc>
 1802298:	008011c4 	movi	r2,71
 180229c:	88829226 	beq	r17,r2,1802ce8 <___vfprintf_internal_r+0x2188>
 18022a0:	80f9883a 	add	fp,r16,r3
 18022a4:	d9003617 	ldw	r4,216(sp)
 18022a8:	000d883a 	mov	r6,zero
 18022ac:	000f883a 	mov	r7,zero
 18022b0:	980b883a 	mov	r5,r19
 18022b4:	da003d15 	stw	r8,244(sp)
 18022b8:	180be6c0 	call	180be6c <__eqdf2>
 18022bc:	da003d17 	ldw	r8,244(sp)
 18022c0:	10018d26 	beq	r2,zero,18028f8 <___vfprintf_internal_r+0x1d98>
 18022c4:	d8802117 	ldw	r2,132(sp)
 18022c8:	1700062e 	bgeu	r2,fp,18022e4 <___vfprintf_internal_r+0x1784>
 18022cc:	01000c04 	movi	r4,48
 18022d0:	10c00044 	addi	r3,r2,1
 18022d4:	d8c02115 	stw	r3,132(sp)
 18022d8:	11000005 	stb	r4,0(r2)
 18022dc:	d8802117 	ldw	r2,132(sp)
 18022e0:	173ffb36 	bltu	r2,fp,18022d0 <__ram_exceptions_end+0xff7f1fe0>
 18022e4:	1405c83a 	sub	r2,r2,r16
 18022e8:	d8803315 	stw	r2,204(sp)
 18022ec:	008011c4 	movi	r2,71
 18022f0:	b0817626 	beq	r22,r2,18028cc <___vfprintf_internal_r+0x1d6c>
 18022f4:	00801944 	movi	r2,101
 18022f8:	1442810e 	bge	r2,r17,1802d00 <___vfprintf_internal_r+0x21a0>
 18022fc:	d8c02617 	ldw	r3,152(sp)
 1802300:	00801984 	movi	r2,102
 1802304:	d8c03215 	stw	r3,200(sp)
 1802308:	8881fe26 	beq	r17,r2,1802b04 <___vfprintf_internal_r+0x1fa4>
 180230c:	d8c03217 	ldw	r3,200(sp)
 1802310:	d9003317 	ldw	r4,204(sp)
 1802314:	1901dd16 	blt	r3,r4,1802a8c <___vfprintf_internal_r+0x1f2c>
 1802318:	9480004c 	andi	r18,r18,1
 180231c:	90022b1e 	bne	r18,zero,1802bcc <___vfprintf_internal_r+0x206c>
 1802320:	1805883a 	mov	r2,r3
 1802324:	18028016 	blt	r3,zero,1802d28 <___vfprintf_internal_r+0x21c8>
 1802328:	d8c03217 	ldw	r3,200(sp)
 180232c:	044019c4 	movi	r17,103
 1802330:	d8c02e15 	stw	r3,184(sp)
 1802334:	df002a07 	ldb	fp,168(sp)
 1802338:	e001531e 	bne	fp,zero,1802888 <___vfprintf_internal_r+0x1d28>
 180233c:	df002783 	ldbu	fp,158(sp)
 1802340:	d8802a15 	stw	r2,168(sp)
 1802344:	dc802b17 	ldw	r18,172(sp)
 1802348:	d8002915 	stw	zero,164(sp)
 180234c:	003bd106 	br	1801294 <__ram_exceptions_end+0xff7f0fa4>
 1802350:	d8802d17 	ldw	r2,180(sp)
 1802354:	d8c02d17 	ldw	r3,180(sp)
 1802358:	d9002d17 	ldw	r4,180(sp)
 180235c:	10800017 	ldw	r2,0(r2)
 1802360:	18c00117 	ldw	r3,4(r3)
 1802364:	21000204 	addi	r4,r4,8
 1802368:	d8803615 	stw	r2,216(sp)
 180236c:	d8c03815 	stw	r3,224(sp)
 1802370:	d9002d15 	stw	r4,180(sp)
 1802374:	003b7506 	br	180114c <__ram_exceptions_end+0xff7f0e5c>
 1802378:	ac400007 	ldb	r17,0(r21)
 180237c:	003a5906 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 1802380:	9080100c 	andi	r2,r18,64
 1802384:	1000a826 	beq	r2,zero,1802628 <___vfprintf_internal_r+0x1ac8>
 1802388:	d9002d17 	ldw	r4,180(sp)
 180238c:	002d883a 	mov	r22,zero
 1802390:	24c0000b 	ldhu	r19,0(r4)
 1802394:	21000104 	addi	r4,r4,4
 1802398:	d9002d15 	stw	r4,180(sp)
 180239c:	003ccb06 	br	18016cc <__ram_exceptions_end+0xff7f13dc>
 18023a0:	d8c02d17 	ldw	r3,180(sp)
 18023a4:	d9002917 	ldw	r4,164(sp)
 18023a8:	002d883a 	mov	r22,zero
 18023ac:	18800104 	addi	r2,r3,4
 18023b0:	1cc00017 	ldw	r19,0(r3)
 18023b4:	203ebb0e 	bge	r4,zero,1801ea4 <__ram_exceptions_end+0xff7f1bb4>
 18023b8:	003ef106 	br	1801f80 <__ram_exceptions_end+0xff7f1c90>
 18023bc:	9080040c 	andi	r2,r18,16
 18023c0:	1000921e 	bne	r2,zero,180260c <___vfprintf_internal_r+0x1aac>
 18023c4:	9480100c 	andi	r18,r18,64
 18023c8:	90013926 	beq	r18,zero,18028b0 <___vfprintf_internal_r+0x1d50>
 18023cc:	d9002d17 	ldw	r4,180(sp)
 18023d0:	d9402f17 	ldw	r5,188(sp)
 18023d4:	20800017 	ldw	r2,0(r4)
 18023d8:	21000104 	addi	r4,r4,4
 18023dc:	d9002d15 	stw	r4,180(sp)
 18023e0:	1140000d 	sth	r5,0(r2)
 18023e4:	003a1606 	br	1800c40 <__ram_exceptions_end+0xff7f0950>
 18023e8:	9080100c 	andi	r2,r18,64
 18023ec:	10008026 	beq	r2,zero,18025f0 <___vfprintf_internal_r+0x1a90>
 18023f0:	d8c02d17 	ldw	r3,180(sp)
 18023f4:	1cc0000f 	ldh	r19,0(r3)
 18023f8:	18c00104 	addi	r3,r3,4
 18023fc:	d8c02d15 	stw	r3,180(sp)
 1802400:	982dd7fa 	srai	r22,r19,31
 1802404:	b005883a 	mov	r2,r22
 1802408:	003b1f06 	br	1801088 <__ram_exceptions_end+0xff7f0d98>
 180240c:	9080100c 	andi	r2,r18,64
 1802410:	d8002785 	stb	zero,158(sp)
 1802414:	10008a1e 	bne	r2,zero,1802640 <___vfprintf_internal_r+0x1ae0>
 1802418:	d9402d17 	ldw	r5,180(sp)
 180241c:	d8c02917 	ldw	r3,164(sp)
 1802420:	002d883a 	mov	r22,zero
 1802424:	28800104 	addi	r2,r5,4
 1802428:	2cc00017 	ldw	r19,0(r5)
 180242c:	183e4b0e 	bge	r3,zero,1801d5c <__ram_exceptions_end+0xff7f1a6c>
 1802430:	9d86b03a 	or	r3,r19,r22
 1802434:	d8802d15 	stw	r2,180(sp)
 1802438:	183e4c1e 	bne	r3,zero,1801d6c <__ram_exceptions_end+0xff7f1a7c>
 180243c:	0039883a 	mov	fp,zero
 1802440:	0005883a 	mov	r2,zero
 1802444:	003d4006 	br	1801948 <__ram_exceptions_end+0xff7f1658>
 1802448:	01406134 	movhi	r5,388
 180244c:	29422184 	addi	r5,r5,2182
 1802450:	d9402b15 	stw	r5,172(sp)
 1802454:	d9402b17 	ldw	r5,172(sp)
 1802458:	1c47883a 	add	r3,r3,r17
 180245c:	10800044 	addi	r2,r2,1
 1802460:	41400015 	stw	r5,0(r8)
 1802464:	44400115 	stw	r17,4(r8)
 1802468:	d8c02015 	stw	r3,128(sp)
 180246c:	d8801f15 	stw	r2,124(sp)
 1802470:	010001c4 	movi	r4,7
 1802474:	20bec816 	blt	r4,r2,1801f98 <__ram_exceptions_end+0xff7f1ca8>
 1802478:	42000204 	addi	r8,r8,8
 180247c:	003ecd06 	br	1801fb4 <__ram_exceptions_end+0xff7f1cc4>
 1802480:	d9002917 	ldw	r4,164(sp)
 1802484:	d8002785 	stb	zero,158(sp)
 1802488:	203d2d16 	blt	r4,zero,1801940 <__ram_exceptions_end+0xff7f1650>
 180248c:	00bfdfc4 	movi	r2,-129
 1802490:	90a4703a 	and	r18,r18,r2
 1802494:	003a9106 	br	1800edc <__ram_exceptions_end+0xff7f0bec>
 1802498:	01006134 	movhi	r4,388
 180249c:	21022184 	addi	r4,r4,2182
 18024a0:	d9002b15 	stw	r4,172(sp)
 18024a4:	003c0c06 	br	18014d8 <__ram_exceptions_end+0xff7f11e8>
 18024a8:	d9002c17 	ldw	r4,176(sp)
 18024ac:	d9801e04 	addi	r6,sp,120
 18024b0:	b80b883a 	mov	r5,r23
 18024b4:	18076780 	call	1807678 <__sprint_r>
 18024b8:	103aab1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 18024bc:	d8c02017 	ldw	r3,128(sp)
 18024c0:	da000404 	addi	r8,sp,16
 18024c4:	003d4106 	br	18019cc <__ram_exceptions_end+0xff7f16dc>
 18024c8:	d8801f17 	ldw	r2,124(sp)
 18024cc:	01406134 	movhi	r5,388
 18024d0:	01000044 	movi	r4,1
 18024d4:	18c00044 	addi	r3,r3,1
 18024d8:	10800044 	addi	r2,r2,1
 18024dc:	29422104 	addi	r5,r5,2180
 18024e0:	41000115 	stw	r4,4(r8)
 18024e4:	41400015 	stw	r5,0(r8)
 18024e8:	d8c02015 	stw	r3,128(sp)
 18024ec:	d8801f15 	stw	r2,124(sp)
 18024f0:	010001c4 	movi	r4,7
 18024f4:	20805c16 	blt	r4,r2,1802668 <___vfprintf_internal_r+0x1b08>
 18024f8:	42000204 	addi	r8,r8,8
 18024fc:	8800041e 	bne	r17,zero,1802510 <___vfprintf_internal_r+0x19b0>
 1802500:	d8803317 	ldw	r2,204(sp)
 1802504:	1000021e 	bne	r2,zero,1802510 <___vfprintf_internal_r+0x19b0>
 1802508:	9080004c 	andi	r2,r18,1
 180250c:	103c0926 	beq	r2,zero,1801534 <__ram_exceptions_end+0xff7f1244>
 1802510:	d9003717 	ldw	r4,220(sp)
 1802514:	d8801f17 	ldw	r2,124(sp)
 1802518:	d9403417 	ldw	r5,208(sp)
 180251c:	20c7883a 	add	r3,r4,r3
 1802520:	10800044 	addi	r2,r2,1
 1802524:	41000115 	stw	r4,4(r8)
 1802528:	41400015 	stw	r5,0(r8)
 180252c:	d8c02015 	stw	r3,128(sp)
 1802530:	d8801f15 	stw	r2,124(sp)
 1802534:	010001c4 	movi	r4,7
 1802538:	20812116 	blt	r4,r2,18029c0 <___vfprintf_internal_r+0x1e60>
 180253c:	42000204 	addi	r8,r8,8
 1802540:	0463c83a 	sub	r17,zero,r17
 1802544:	0440730e 	bge	zero,r17,1802714 <___vfprintf_internal_r+0x1bb4>
 1802548:	05800404 	movi	r22,16
 180254c:	b440860e 	bge	r22,r17,1802768 <___vfprintf_internal_r+0x1c08>
 1802550:	01406134 	movhi	r5,388
 1802554:	29422184 	addi	r5,r5,2182
 1802558:	d9402b15 	stw	r5,172(sp)
 180255c:	070001c4 	movi	fp,7
 1802560:	dcc02c17 	ldw	r19,176(sp)
 1802564:	00000306 	br	1802574 <___vfprintf_internal_r+0x1a14>
 1802568:	42000204 	addi	r8,r8,8
 180256c:	8c7ffc04 	addi	r17,r17,-16
 1802570:	b440800e 	bge	r22,r17,1802774 <___vfprintf_internal_r+0x1c14>
 1802574:	18c00404 	addi	r3,r3,16
 1802578:	10800044 	addi	r2,r2,1
 180257c:	45000015 	stw	r20,0(r8)
 1802580:	45800115 	stw	r22,4(r8)
 1802584:	d8c02015 	stw	r3,128(sp)
 1802588:	d8801f15 	stw	r2,124(sp)
 180258c:	e0bff60e 	bge	fp,r2,1802568 <__ram_exceptions_end+0xff7f2278>
 1802590:	d9801e04 	addi	r6,sp,120
 1802594:	b80b883a 	mov	r5,r23
 1802598:	9809883a 	mov	r4,r19
 180259c:	18076780 	call	1807678 <__sprint_r>
 18025a0:	103a711e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 18025a4:	d8c02017 	ldw	r3,128(sp)
 18025a8:	d8801f17 	ldw	r2,124(sp)
 18025ac:	da000404 	addi	r8,sp,16
 18025b0:	003fee06 	br	180256c <__ram_exceptions_end+0xff7f227c>
 18025b4:	00bfffc4 	movi	r2,-1
 18025b8:	003a6f06 	br	1800f78 <__ram_exceptions_end+0xff7f0c88>
 18025bc:	008011c4 	movi	r2,71
 18025c0:	1440b816 	blt	r2,r17,18028a4 <___vfprintf_internal_r+0x1d44>
 18025c4:	04006134 	movhi	r16,388
 18025c8:	84021304 	addi	r16,r16,2124
 18025cc:	00c000c4 	movi	r3,3
 18025d0:	00bfdfc4 	movi	r2,-129
 18025d4:	d8c02a15 	stw	r3,168(sp)
 18025d8:	90a4703a 	and	r18,r18,r2
 18025dc:	df002783 	ldbu	fp,158(sp)
 18025e0:	d8c02e15 	stw	r3,184(sp)
 18025e4:	d8002915 	stw	zero,164(sp)
 18025e8:	d8003215 	stw	zero,200(sp)
 18025ec:	003b2906 	br	1801294 <__ram_exceptions_end+0xff7f0fa4>
 18025f0:	d9002d17 	ldw	r4,180(sp)
 18025f4:	24c00017 	ldw	r19,0(r4)
 18025f8:	21000104 	addi	r4,r4,4
 18025fc:	d9002d15 	stw	r4,180(sp)
 1802600:	982dd7fa 	srai	r22,r19,31
 1802604:	b005883a 	mov	r2,r22
 1802608:	003a9f06 	br	1801088 <__ram_exceptions_end+0xff7f0d98>
 180260c:	d9402d17 	ldw	r5,180(sp)
 1802610:	d8c02f17 	ldw	r3,188(sp)
 1802614:	28800017 	ldw	r2,0(r5)
 1802618:	29400104 	addi	r5,r5,4
 180261c:	d9402d15 	stw	r5,180(sp)
 1802620:	10c00015 	stw	r3,0(r2)
 1802624:	00398606 	br	1800c40 <__ram_exceptions_end+0xff7f0950>
 1802628:	d9402d17 	ldw	r5,180(sp)
 180262c:	002d883a 	mov	r22,zero
 1802630:	2cc00017 	ldw	r19,0(r5)
 1802634:	29400104 	addi	r5,r5,4
 1802638:	d9402d15 	stw	r5,180(sp)
 180263c:	003c2306 	br	18016cc <__ram_exceptions_end+0xff7f13dc>
 1802640:	d8c02d17 	ldw	r3,180(sp)
 1802644:	d9002917 	ldw	r4,164(sp)
 1802648:	002d883a 	mov	r22,zero
 180264c:	18800104 	addi	r2,r3,4
 1802650:	1cc0000b 	ldhu	r19,0(r3)
 1802654:	203dc10e 	bge	r4,zero,1801d5c <__ram_exceptions_end+0xff7f1a6c>
 1802658:	003f7506 	br	1802430 <__ram_exceptions_end+0xff7f2140>
 180265c:	04006134 	movhi	r16,388
 1802660:	84021104 	addi	r16,r16,2116
 1802664:	003acc06 	br	1801198 <__ram_exceptions_end+0xff7f0ea8>
 1802668:	d9002c17 	ldw	r4,176(sp)
 180266c:	d9801e04 	addi	r6,sp,120
 1802670:	b80b883a 	mov	r5,r23
 1802674:	18076780 	call	1807678 <__sprint_r>
 1802678:	103a3b1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 180267c:	dc402617 	ldw	r17,152(sp)
 1802680:	d8c02017 	ldw	r3,128(sp)
 1802684:	da000404 	addi	r8,sp,16
 1802688:	003f9c06 	br	18024fc <__ram_exceptions_end+0xff7f220c>
 180268c:	ac400043 	ldbu	r17,1(r21)
 1802690:	94800814 	ori	r18,r18,32
 1802694:	ad400044 	addi	r21,r21,1
 1802698:	8c403fcc 	andi	r17,r17,255
 180269c:	8c40201c 	xori	r17,r17,128
 18026a0:	8c7fe004 	addi	r17,r17,-128
 18026a4:	00398f06 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 18026a8:	d8c02d15 	stw	r3,180(sp)
 18026ac:	0039883a 	mov	fp,zero
 18026b0:	003e3506 	br	1801f88 <__ram_exceptions_end+0xff7f1c98>
 18026b4:	d9002c17 	ldw	r4,176(sp)
 18026b8:	d9801e04 	addi	r6,sp,120
 18026bc:	b80b883a 	mov	r5,r23
 18026c0:	18076780 	call	1807678 <__sprint_r>
 18026c4:	103a281e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 18026c8:	d8c02017 	ldw	r3,128(sp)
 18026cc:	da000404 	addi	r8,sp,16
 18026d0:	003cd006 	br	1801a14 <__ram_exceptions_end+0xff7f1724>
 18026d4:	8009883a 	mov	r4,r16
 18026d8:	da003d15 	stw	r8,244(sp)
 18026dc:	18074e40 	call	18074e4 <strlen>
 18026e0:	d8802e15 	stw	r2,184(sp)
 18026e4:	da003d17 	ldw	r8,244(sp)
 18026e8:	103c340e 	bge	r2,zero,18017bc <__ram_exceptions_end+0xff7f14cc>
 18026ec:	0005883a 	mov	r2,zero
 18026f0:	003c3206 	br	18017bc <__ram_exceptions_end+0xff7f14cc>
 18026f4:	d9002c17 	ldw	r4,176(sp)
 18026f8:	d9801e04 	addi	r6,sp,120
 18026fc:	b80b883a 	mov	r5,r23
 1802700:	18076780 	call	1807678 <__sprint_r>
 1802704:	103a181e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1802708:	d8c02017 	ldw	r3,128(sp)
 180270c:	d8801f17 	ldw	r2,124(sp)
 1802710:	da000404 	addi	r8,sp,16
 1802714:	d9403317 	ldw	r5,204(sp)
 1802718:	10800044 	addi	r2,r2,1
 180271c:	44000015 	stw	r16,0(r8)
 1802720:	28c7883a 	add	r3,r5,r3
 1802724:	003b7d06 	br	180151c <__ram_exceptions_end+0xff7f122c>
 1802728:	01006134 	movhi	r4,388
 180272c:	21022584 	addi	r4,r4,2198
 1802730:	d9003515 	stw	r4,212(sp)
 1802734:	003b1406 	br	1801388 <__ram_exceptions_end+0xff7f1098>
 1802738:	013fffc4 	movi	r4,-1
 180273c:	003a3506 	br	1801014 <__ram_exceptions_end+0xff7f0d24>
 1802740:	0023883a 	mov	r17,zero
 1802744:	003d9d06 	br	1801dbc <__ram_exceptions_end+0xff7f1acc>
 1802748:	d9002c17 	ldw	r4,176(sp)
 180274c:	d9801e04 	addi	r6,sp,120
 1802750:	b80b883a 	mov	r5,r23
 1802754:	18076780 	call	1807678 <__sprint_r>
 1802758:	103a031e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 180275c:	d8c02017 	ldw	r3,128(sp)
 1802760:	da000404 	addi	r8,sp,16
 1802764:	003d9406 	br	1801db8 <__ram_exceptions_end+0xff7f1ac8>
 1802768:	01006134 	movhi	r4,388
 180276c:	21022184 	addi	r4,r4,2182
 1802770:	d9002b15 	stw	r4,172(sp)
 1802774:	d9002b17 	ldw	r4,172(sp)
 1802778:	1c47883a 	add	r3,r3,r17
 180277c:	10800044 	addi	r2,r2,1
 1802780:	41000015 	stw	r4,0(r8)
 1802784:	44400115 	stw	r17,4(r8)
 1802788:	d8c02015 	stw	r3,128(sp)
 180278c:	d8801f15 	stw	r2,124(sp)
 1802790:	010001c4 	movi	r4,7
 1802794:	20bfd716 	blt	r4,r2,18026f4 <__ram_exceptions_end+0xff7f2404>
 1802798:	42000204 	addi	r8,r8,8
 180279c:	003fdd06 	br	1802714 <__ram_exceptions_end+0xff7f2424>
 18027a0:	d9002c17 	ldw	r4,176(sp)
 18027a4:	d9801e04 	addi	r6,sp,120
 18027a8:	b80b883a 	mov	r5,r23
 18027ac:	18076780 	call	1807678 <__sprint_r>
 18027b0:	1039ed1e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 18027b4:	d8802617 	ldw	r2,152(sp)
 18027b8:	d8c02017 	ldw	r3,128(sp)
 18027bc:	da000404 	addi	r8,sp,16
 18027c0:	003e1006 	br	1802004 <__ram_exceptions_end+0xff7f1d14>
 18027c4:	00800044 	movi	r2,1
 18027c8:	10803fcc 	andi	r2,r2,255
 18027cc:	00c00044 	movi	r3,1
 18027d0:	10fa3526 	beq	r2,r3,18010a8 <__ram_exceptions_end+0xff7f0db8>
 18027d4:	00c00084 	movi	r3,2
 18027d8:	10fbcb26 	beq	r2,r3,1801708 <__ram_exceptions_end+0xff7f1418>
 18027dc:	003a8f06 	br	180121c <__ram_exceptions_end+0xff7f0f2c>
 18027e0:	01006134 	movhi	r4,388
 18027e4:	21022584 	addi	r4,r4,2198
 18027e8:	d9003515 	stw	r4,212(sp)
 18027ec:	003b7606 	br	18015c8 <__ram_exceptions_end+0xff7f12d8>
 18027f0:	d8802917 	ldw	r2,164(sp)
 18027f4:	00c00184 	movi	r3,6
 18027f8:	1880012e 	bgeu	r3,r2,1802800 <___vfprintf_internal_r+0x1ca0>
 18027fc:	1805883a 	mov	r2,r3
 1802800:	d8802e15 	stw	r2,184(sp)
 1802804:	1000ef16 	blt	r2,zero,1802bc4 <___vfprintf_internal_r+0x2064>
 1802808:	04006134 	movhi	r16,388
 180280c:	d8802a15 	stw	r2,168(sp)
 1802810:	dcc02d15 	stw	r19,180(sp)
 1802814:	d8002915 	stw	zero,164(sp)
 1802818:	d8003215 	stw	zero,200(sp)
 180281c:	84021f04 	addi	r16,r16,2172
 1802820:	0039883a 	mov	fp,zero
 1802824:	003aa206 	br	18012b0 <__ram_exceptions_end+0xff7f0fc0>
 1802828:	0021883a 	mov	r16,zero
 180282c:	003e0706 	br	180204c <__ram_exceptions_end+0xff7f1d5c>
 1802830:	d9002c17 	ldw	r4,176(sp)
 1802834:	d9801e04 	addi	r6,sp,120
 1802838:	b80b883a 	mov	r5,r23
 180283c:	18076780 	call	1807678 <__sprint_r>
 1802840:	1039c91e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 1802844:	d8802617 	ldw	r2,152(sp)
 1802848:	d9403317 	ldw	r5,204(sp)
 180284c:	d8c02017 	ldw	r3,128(sp)
 1802850:	da000404 	addi	r8,sp,16
 1802854:	2885c83a 	sub	r2,r5,r2
 1802858:	003dfb06 	br	1802048 <__ram_exceptions_end+0xff7f1d58>
 180285c:	9080004c 	andi	r2,r18,1
 1802860:	103e8f1e 	bne	r2,zero,18022a0 <__ram_exceptions_end+0xff7f1fb0>
 1802864:	d8802117 	ldw	r2,132(sp)
 1802868:	003e9e06 	br	18022e4 <__ram_exceptions_end+0xff7f1ff4>
 180286c:	1025883a 	mov	r18,r2
 1802870:	0039883a 	mov	fp,zero
 1802874:	00800084 	movi	r2,2
 1802878:	003fd306 	br	18027c8 <__ram_exceptions_end+0xff7f24d8>
 180287c:	07000b44 	movi	fp,45
 1802880:	df002785 	stb	fp,158(sp)
 1802884:	003a4006 	br	1801188 <__ram_exceptions_end+0xff7f0e98>
 1802888:	00c00b44 	movi	r3,45
 180288c:	d8c02785 	stb	r3,158(sp)
 1802890:	d8802a15 	stw	r2,168(sp)
 1802894:	dc802b17 	ldw	r18,172(sp)
 1802898:	d8002915 	stw	zero,164(sp)
 180289c:	07000b44 	movi	fp,45
 18028a0:	003a8006 	br	18012a4 <__ram_exceptions_end+0xff7f0fb4>
 18028a4:	04006134 	movhi	r16,388
 18028a8:	84021404 	addi	r16,r16,2128
 18028ac:	003f4706 	br	18025cc <__ram_exceptions_end+0xff7f22dc>
 18028b0:	d8c02d17 	ldw	r3,180(sp)
 18028b4:	d9002f17 	ldw	r4,188(sp)
 18028b8:	18800017 	ldw	r2,0(r3)
 18028bc:	18c00104 	addi	r3,r3,4
 18028c0:	d8c02d15 	stw	r3,180(sp)
 18028c4:	11000015 	stw	r4,0(r2)
 18028c8:	0038dd06 	br	1800c40 <__ram_exceptions_end+0xff7f0950>
 18028cc:	dd802617 	ldw	r22,152(sp)
 18028d0:	00bfff44 	movi	r2,-3
 18028d4:	b0801c16 	blt	r22,r2,1802948 <___vfprintf_internal_r+0x1de8>
 18028d8:	d9402917 	ldw	r5,164(sp)
 18028dc:	2d801a16 	blt	r5,r22,1802948 <___vfprintf_internal_r+0x1de8>
 18028e0:	dd803215 	stw	r22,200(sp)
 18028e4:	003e8906 	br	180230c <__ram_exceptions_end+0xff7f201c>
 18028e8:	01006134 	movhi	r4,388
 18028ec:	21022184 	addi	r4,r4,2182
 18028f0:	d9002b15 	stw	r4,172(sp)
 18028f4:	003c9106 	br	1801b3c <__ram_exceptions_end+0xff7f184c>
 18028f8:	e005883a 	mov	r2,fp
 18028fc:	003e7906 	br	18022e4 <__ram_exceptions_end+0xff7f1ff4>
 1802900:	d9402917 	ldw	r5,164(sp)
 1802904:	df002783 	ldbu	fp,158(sp)
 1802908:	dcc02d15 	stw	r19,180(sp)
 180290c:	d9402a15 	stw	r5,168(sp)
 1802910:	d9402e15 	stw	r5,184(sp)
 1802914:	d8002915 	stw	zero,164(sp)
 1802918:	d8003215 	stw	zero,200(sp)
 180291c:	003a5d06 	br	1801294 <__ram_exceptions_end+0xff7f0fa4>
 1802920:	9080004c 	andi	r2,r18,1
 1802924:	0039883a 	mov	fp,zero
 1802928:	10000426 	beq	r2,zero,180293c <___vfprintf_internal_r+0x1ddc>
 180292c:	00800c04 	movi	r2,48
 1802930:	dc001dc4 	addi	r16,sp,119
 1802934:	d8801dc5 	stb	r2,119(sp)
 1802938:	003b8006 	br	180173c <__ram_exceptions_end+0xff7f144c>
 180293c:	d8002e15 	stw	zero,184(sp)
 1802940:	dc001e04 	addi	r16,sp,120
 1802944:	003a4d06 	br	180127c <__ram_exceptions_end+0xff7f0f8c>
 1802948:	8c7fff84 	addi	r17,r17,-2
 180294c:	b5bfffc4 	addi	r22,r22,-1
 1802950:	dd802615 	stw	r22,152(sp)
 1802954:	dc4022c5 	stb	r17,139(sp)
 1802958:	b000bf16 	blt	r22,zero,1802c58 <___vfprintf_internal_r+0x20f8>
 180295c:	00800ac4 	movi	r2,43
 1802960:	d8802305 	stb	r2,140(sp)
 1802964:	00800244 	movi	r2,9
 1802968:	15807016 	blt	r2,r22,1802b2c <___vfprintf_internal_r+0x1fcc>
 180296c:	00800c04 	movi	r2,48
 1802970:	b5800c04 	addi	r22,r22,48
 1802974:	d8802345 	stb	r2,141(sp)
 1802978:	dd802385 	stb	r22,142(sp)
 180297c:	d88023c4 	addi	r2,sp,143
 1802980:	df0022c4 	addi	fp,sp,139
 1802984:	d8c03317 	ldw	r3,204(sp)
 1802988:	1739c83a 	sub	fp,r2,fp
 180298c:	d9003317 	ldw	r4,204(sp)
 1802990:	e0c7883a 	add	r3,fp,r3
 1802994:	df003a15 	stw	fp,232(sp)
 1802998:	d8c02e15 	stw	r3,184(sp)
 180299c:	00800044 	movi	r2,1
 18029a0:	1100b30e 	bge	r2,r4,1802c70 <___vfprintf_internal_r+0x2110>
 18029a4:	d8c02e17 	ldw	r3,184(sp)
 18029a8:	18c00044 	addi	r3,r3,1
 18029ac:	d8c02e15 	stw	r3,184(sp)
 18029b0:	1805883a 	mov	r2,r3
 18029b4:	1800ac16 	blt	r3,zero,1802c68 <___vfprintf_internal_r+0x2108>
 18029b8:	d8003215 	stw	zero,200(sp)
 18029bc:	003e5d06 	br	1802334 <__ram_exceptions_end+0xff7f2044>
 18029c0:	d9002c17 	ldw	r4,176(sp)
 18029c4:	d9801e04 	addi	r6,sp,120
 18029c8:	b80b883a 	mov	r5,r23
 18029cc:	18076780 	call	1807678 <__sprint_r>
 18029d0:	1039651e 	bne	r2,zero,1800f68 <__ram_exceptions_end+0xff7f0c78>
 18029d4:	dc402617 	ldw	r17,152(sp)
 18029d8:	d8c02017 	ldw	r3,128(sp)
 18029dc:	d8801f17 	ldw	r2,124(sp)
 18029e0:	da000404 	addi	r8,sp,16
 18029e4:	003ed606 	br	1802540 <__ram_exceptions_end+0xff7f2250>
 18029e8:	582b883a 	mov	r21,r11
 18029ec:	d8002915 	stw	zero,164(sp)
 18029f0:	0038bd06 	br	1800ce8 <__ram_exceptions_end+0xff7f09f8>
 18029f4:	d8802917 	ldw	r2,164(sp)
 18029f8:	103e071e 	bne	r2,zero,1802218 <__ram_exceptions_end+0xff7f1f28>
 18029fc:	dc002915 	stw	r16,164(sp)
 1802a00:	003e0506 	br	1802218 <__ram_exceptions_end+0xff7f1f28>
 1802a04:	d9002917 	ldw	r4,164(sp)
 1802a08:	20c00044 	addi	r3,r4,1
 1802a0c:	003e0f06 	br	180224c <__ram_exceptions_end+0xff7f1f5c>
 1802a10:	01400184 	movi	r5,6
 1802a14:	d9402915 	stw	r5,164(sp)
 1802a18:	003dff06 	br	1802218 <__ram_exceptions_end+0xff7f1f28>
 1802a1c:	d8802104 	addi	r2,sp,132
 1802a20:	d8800315 	stw	r2,12(sp)
 1802a24:	d8802504 	addi	r2,sp,148
 1802a28:	d8800215 	stw	r2,8(sp)
 1802a2c:	d8802604 	addi	r2,sp,152
 1802a30:	d8800115 	stw	r2,4(sp)
 1802a34:	d8802917 	ldw	r2,164(sp)
 1802a38:	d9403617 	ldw	r5,216(sp)
 1802a3c:	d9002c17 	ldw	r4,176(sp)
 1802a40:	d8800015 	stw	r2,0(sp)
 1802a44:	01c000c4 	movi	r7,3
 1802a48:	980d883a 	mov	r6,r19
 1802a4c:	da003d15 	stw	r8,244(sp)
 1802a50:	18031840 	call	1803184 <_dtoa_r>
 1802a54:	d8c02917 	ldw	r3,164(sp)
 1802a58:	da003d17 	ldw	r8,244(sp)
 1802a5c:	1021883a 	mov	r16,r2
 1802a60:	10f9883a 	add	fp,r2,r3
 1802a64:	81000007 	ldb	r4,0(r16)
 1802a68:	00800c04 	movi	r2,48
 1802a6c:	20805e26 	beq	r4,r2,1802be8 <___vfprintf_internal_r+0x2088>
 1802a70:	d8c02617 	ldw	r3,152(sp)
 1802a74:	e0f9883a 	add	fp,fp,r3
 1802a78:	003e0a06 	br	18022a4 <__ram_exceptions_end+0xff7f1fb4>
 1802a7c:	00c00b44 	movi	r3,45
 1802a80:	24e0003c 	xorhi	r19,r4,32768
 1802a84:	d8c02a05 	stb	r3,168(sp)
 1802a88:	003de906 	br	1802230 <__ram_exceptions_end+0xff7f1f40>
 1802a8c:	d8c03217 	ldw	r3,200(sp)
 1802a90:	00c07a0e 	bge	zero,r3,1802c7c <___vfprintf_internal_r+0x211c>
 1802a94:	00800044 	movi	r2,1
 1802a98:	d9003317 	ldw	r4,204(sp)
 1802a9c:	1105883a 	add	r2,r2,r4
 1802aa0:	d8802e15 	stw	r2,184(sp)
 1802aa4:	10004e16 	blt	r2,zero,1802be0 <___vfprintf_internal_r+0x2080>
 1802aa8:	044019c4 	movi	r17,103
 1802aac:	003e2106 	br	1802334 <__ram_exceptions_end+0xff7f2044>
 1802ab0:	d9002917 	ldw	r4,164(sp)
 1802ab4:	d8802104 	addi	r2,sp,132
 1802ab8:	d8800315 	stw	r2,12(sp)
 1802abc:	d9000015 	stw	r4,0(sp)
 1802ac0:	d8802504 	addi	r2,sp,148
 1802ac4:	d9403617 	ldw	r5,216(sp)
 1802ac8:	d9002c17 	ldw	r4,176(sp)
 1802acc:	d8800215 	stw	r2,8(sp)
 1802ad0:	d8802604 	addi	r2,sp,152
 1802ad4:	d8800115 	stw	r2,4(sp)
 1802ad8:	01c000c4 	movi	r7,3
 1802adc:	980d883a 	mov	r6,r19
 1802ae0:	da003d15 	stw	r8,244(sp)
 1802ae4:	18031840 	call	1803184 <_dtoa_r>
 1802ae8:	d8c02917 	ldw	r3,164(sp)
 1802aec:	da003d17 	ldw	r8,244(sp)
 1802af0:	1021883a 	mov	r16,r2
 1802af4:	00801184 	movi	r2,70
 1802af8:	80f9883a 	add	fp,r16,r3
 1802afc:	88bfd926 	beq	r17,r2,1802a64 <__ram_exceptions_end+0xff7f2774>
 1802b00:	003de806 	br	18022a4 <__ram_exceptions_end+0xff7f1fb4>
 1802b04:	d9002917 	ldw	r4,164(sp)
 1802b08:	00c04d0e 	bge	zero,r3,1802c40 <___vfprintf_internal_r+0x20e0>
 1802b0c:	2000441e 	bne	r4,zero,1802c20 <___vfprintf_internal_r+0x20c0>
 1802b10:	9480004c 	andi	r18,r18,1
 1802b14:	9000421e 	bne	r18,zero,1802c20 <___vfprintf_internal_r+0x20c0>
 1802b18:	1805883a 	mov	r2,r3
 1802b1c:	18007016 	blt	r3,zero,1802ce0 <___vfprintf_internal_r+0x2180>
 1802b20:	d8c03217 	ldw	r3,200(sp)
 1802b24:	d8c02e15 	stw	r3,184(sp)
 1802b28:	003e0206 	br	1802334 <__ram_exceptions_end+0xff7f2044>
 1802b2c:	df0022c4 	addi	fp,sp,139
 1802b30:	dc002915 	stw	r16,164(sp)
 1802b34:	4027883a 	mov	r19,r8
 1802b38:	e021883a 	mov	r16,fp
 1802b3c:	b009883a 	mov	r4,r22
 1802b40:	01400284 	movi	r5,10
 1802b44:	180aba80 	call	180aba8 <__modsi3>
 1802b48:	10800c04 	addi	r2,r2,48
 1802b4c:	843fffc4 	addi	r16,r16,-1
 1802b50:	b009883a 	mov	r4,r22
 1802b54:	01400284 	movi	r5,10
 1802b58:	80800005 	stb	r2,0(r16)
 1802b5c:	180ab240 	call	180ab24 <__divsi3>
 1802b60:	102d883a 	mov	r22,r2
 1802b64:	00800244 	movi	r2,9
 1802b68:	15bff416 	blt	r2,r22,1802b3c <__ram_exceptions_end+0xff7f284c>
 1802b6c:	9811883a 	mov	r8,r19
 1802b70:	b0800c04 	addi	r2,r22,48
 1802b74:	8027883a 	mov	r19,r16
 1802b78:	997fffc4 	addi	r5,r19,-1
 1802b7c:	98bfffc5 	stb	r2,-1(r19)
 1802b80:	dc002917 	ldw	r16,164(sp)
 1802b84:	2f006a2e 	bgeu	r5,fp,1802d30 <___vfprintf_internal_r+0x21d0>
 1802b88:	d9c02384 	addi	r7,sp,142
 1802b8c:	3ccfc83a 	sub	r7,r7,r19
 1802b90:	d9002344 	addi	r4,sp,141
 1802b94:	e1cf883a 	add	r7,fp,r7
 1802b98:	00000106 	br	1802ba0 <___vfprintf_internal_r+0x2040>
 1802b9c:	28800003 	ldbu	r2,0(r5)
 1802ba0:	20800005 	stb	r2,0(r4)
 1802ba4:	21000044 	addi	r4,r4,1
 1802ba8:	29400044 	addi	r5,r5,1
 1802bac:	393ffb1e 	bne	r7,r4,1802b9c <__ram_exceptions_end+0xff7f28ac>
 1802bb0:	d8802304 	addi	r2,sp,140
 1802bb4:	14c5c83a 	sub	r2,r2,r19
 1802bb8:	d8c02344 	addi	r3,sp,141
 1802bbc:	1885883a 	add	r2,r3,r2
 1802bc0:	003f7006 	br	1802984 <__ram_exceptions_end+0xff7f2694>
 1802bc4:	0005883a 	mov	r2,zero
 1802bc8:	003f0f06 	br	1802808 <__ram_exceptions_end+0xff7f2518>
 1802bcc:	d8c03217 	ldw	r3,200(sp)
 1802bd0:	18c00044 	addi	r3,r3,1
 1802bd4:	d8c02e15 	stw	r3,184(sp)
 1802bd8:	1805883a 	mov	r2,r3
 1802bdc:	183fb20e 	bge	r3,zero,1802aa8 <__ram_exceptions_end+0xff7f27b8>
 1802be0:	0005883a 	mov	r2,zero
 1802be4:	003fb006 	br	1802aa8 <__ram_exceptions_end+0xff7f27b8>
 1802be8:	d9003617 	ldw	r4,216(sp)
 1802bec:	000d883a 	mov	r6,zero
 1802bf0:	000f883a 	mov	r7,zero
 1802bf4:	980b883a 	mov	r5,r19
 1802bf8:	d8c03c15 	stw	r3,240(sp)
 1802bfc:	da003d15 	stw	r8,244(sp)
 1802c00:	180be6c0 	call	180be6c <__eqdf2>
 1802c04:	d8c03c17 	ldw	r3,240(sp)
 1802c08:	da003d17 	ldw	r8,244(sp)
 1802c0c:	103f9826 	beq	r2,zero,1802a70 <__ram_exceptions_end+0xff7f2780>
 1802c10:	00800044 	movi	r2,1
 1802c14:	10c7c83a 	sub	r3,r2,r3
 1802c18:	d8c02615 	stw	r3,152(sp)
 1802c1c:	003f9506 	br	1802a74 <__ram_exceptions_end+0xff7f2784>
 1802c20:	d9002917 	ldw	r4,164(sp)
 1802c24:	d8c03217 	ldw	r3,200(sp)
 1802c28:	20800044 	addi	r2,r4,1
 1802c2c:	1885883a 	add	r2,r3,r2
 1802c30:	d8802e15 	stw	r2,184(sp)
 1802c34:	103dbf0e 	bge	r2,zero,1802334 <__ram_exceptions_end+0xff7f2044>
 1802c38:	0005883a 	mov	r2,zero
 1802c3c:	003dbd06 	br	1802334 <__ram_exceptions_end+0xff7f2044>
 1802c40:	2000211e 	bne	r4,zero,1802cc8 <___vfprintf_internal_r+0x2168>
 1802c44:	9480004c 	andi	r18,r18,1
 1802c48:	90001f1e 	bne	r18,zero,1802cc8 <___vfprintf_internal_r+0x2168>
 1802c4c:	00800044 	movi	r2,1
 1802c50:	d8802e15 	stw	r2,184(sp)
 1802c54:	003db706 	br	1802334 <__ram_exceptions_end+0xff7f2044>
 1802c58:	00800b44 	movi	r2,45
 1802c5c:	05adc83a 	sub	r22,zero,r22
 1802c60:	d8802305 	stb	r2,140(sp)
 1802c64:	003f3f06 	br	1802964 <__ram_exceptions_end+0xff7f2674>
 1802c68:	0005883a 	mov	r2,zero
 1802c6c:	003f5206 	br	18029b8 <__ram_exceptions_end+0xff7f26c8>
 1802c70:	90a4703a 	and	r18,r18,r2
 1802c74:	903f4e26 	beq	r18,zero,18029b0 <__ram_exceptions_end+0xff7f26c0>
 1802c78:	003f4a06 	br	18029a4 <__ram_exceptions_end+0xff7f26b4>
 1802c7c:	00800084 	movi	r2,2
 1802c80:	10c5c83a 	sub	r2,r2,r3
 1802c84:	003f8406 	br	1802a98 <__ram_exceptions_end+0xff7f27a8>
 1802c88:	d8802d17 	ldw	r2,180(sp)
 1802c8c:	d9002d17 	ldw	r4,180(sp)
 1802c90:	ac400043 	ldbu	r17,1(r21)
 1802c94:	10800017 	ldw	r2,0(r2)
 1802c98:	582b883a 	mov	r21,r11
 1802c9c:	d8802915 	stw	r2,164(sp)
 1802ca0:	20800104 	addi	r2,r4,4
 1802ca4:	d9002917 	ldw	r4,164(sp)
 1802ca8:	d8802d15 	stw	r2,180(sp)
 1802cac:	203e7a0e 	bge	r4,zero,1802698 <__ram_exceptions_end+0xff7f23a8>
 1802cb0:	8c403fcc 	andi	r17,r17,255
 1802cb4:	00bfffc4 	movi	r2,-1
 1802cb8:	8c40201c 	xori	r17,r17,128
 1802cbc:	d8802915 	stw	r2,164(sp)
 1802cc0:	8c7fe004 	addi	r17,r17,-128
 1802cc4:	00380706 	br	1800ce4 <__ram_exceptions_end+0xff7f09f4>
 1802cc8:	d8c02917 	ldw	r3,164(sp)
 1802ccc:	18c00084 	addi	r3,r3,2
 1802cd0:	d8c02e15 	stw	r3,184(sp)
 1802cd4:	1805883a 	mov	r2,r3
 1802cd8:	183d960e 	bge	r3,zero,1802334 <__ram_exceptions_end+0xff7f2044>
 1802cdc:	003fd606 	br	1802c38 <__ram_exceptions_end+0xff7f2948>
 1802ce0:	0005883a 	mov	r2,zero
 1802ce4:	003f8e06 	br	1802b20 <__ram_exceptions_end+0xff7f2830>
 1802ce8:	9080004c 	andi	r2,r18,1
 1802cec:	103f811e 	bne	r2,zero,1802af4 <__ram_exceptions_end+0xff7f2804>
 1802cf0:	d8802117 	ldw	r2,132(sp)
 1802cf4:	1405c83a 	sub	r2,r2,r16
 1802cf8:	d8803315 	stw	r2,204(sp)
 1802cfc:	b47ef326 	beq	r22,r17,18028cc <__ram_exceptions_end+0xff7f25dc>
 1802d00:	dd802617 	ldw	r22,152(sp)
 1802d04:	003f1106 	br	180294c <__ram_exceptions_end+0xff7f265c>
 1802d08:	d9c02785 	stb	r7,158(sp)
 1802d0c:	00390406 	br	1801120 <__ram_exceptions_end+0xff7f0e30>
 1802d10:	d9c02785 	stb	r7,158(sp)
 1802d14:	0038d306 	br	1801064 <__ram_exceptions_end+0xff7f0d74>
 1802d18:	d9c02785 	stb	r7,158(sp)
 1802d1c:	003a6106 	br	18016a4 <__ram_exceptions_end+0xff7f13b4>
 1802d20:	d9c02785 	stb	r7,158(sp)
 1802d24:	003af806 	br	1801908 <__ram_exceptions_end+0xff7f1618>
 1802d28:	0005883a 	mov	r2,zero
 1802d2c:	003d7e06 	br	1802328 <__ram_exceptions_end+0xff7f2038>
 1802d30:	d8802344 	addi	r2,sp,141
 1802d34:	003f1306 	br	1802984 <__ram_exceptions_end+0xff7f2694>
 1802d38:	d9c02785 	stb	r7,158(sp)
 1802d3c:	00392306 	br	18011cc <__ram_exceptions_end+0xff7f0edc>
 1802d40:	d9c02785 	stb	r7,158(sp)
 1802d44:	003aa906 	br	18017ec <__ram_exceptions_end+0xff7f14fc>
 1802d48:	d9c02785 	stb	r7,158(sp)
 1802d4c:	003a3d06 	br	1801644 <__ram_exceptions_end+0xff7f1354>
 1802d50:	d9c02785 	stb	r7,158(sp)
 1802d54:	003aca06 	br	1801880 <__ram_exceptions_end+0xff7f1590>

01802d58 <__vfprintf_internal>:
 1802d58:	00806134 	movhi	r2,388
 1802d5c:	10946904 	addi	r2,r2,20900
 1802d60:	300f883a 	mov	r7,r6
 1802d64:	280d883a 	mov	r6,r5
 1802d68:	200b883a 	mov	r5,r4
 1802d6c:	11000017 	ldw	r4,0(r2)
 1802d70:	1800b601 	jmpi	1800b60 <___vfprintf_internal_r>

01802d74 <__sbprintf>:
 1802d74:	2880030b 	ldhu	r2,12(r5)
 1802d78:	2ac01917 	ldw	r11,100(r5)
 1802d7c:	2a80038b 	ldhu	r10,14(r5)
 1802d80:	2a400717 	ldw	r9,28(r5)
 1802d84:	2a000917 	ldw	r8,36(r5)
 1802d88:	defee204 	addi	sp,sp,-1144
 1802d8c:	00c10004 	movi	r3,1024
 1802d90:	dc011a15 	stw	r16,1128(sp)
 1802d94:	10bfff4c 	andi	r2,r2,65533
 1802d98:	2821883a 	mov	r16,r5
 1802d9c:	d8cb883a 	add	r5,sp,r3
 1802da0:	dc811c15 	stw	r18,1136(sp)
 1802da4:	dc411b15 	stw	r17,1132(sp)
 1802da8:	dfc11d15 	stw	ra,1140(sp)
 1802dac:	2025883a 	mov	r18,r4
 1802db0:	d881030d 	sth	r2,1036(sp)
 1802db4:	dac11915 	stw	r11,1124(sp)
 1802db8:	da81038d 	sth	r10,1038(sp)
 1802dbc:	da410715 	stw	r9,1052(sp)
 1802dc0:	da010915 	stw	r8,1060(sp)
 1802dc4:	dec10015 	stw	sp,1024(sp)
 1802dc8:	dec10415 	stw	sp,1040(sp)
 1802dcc:	d8c10215 	stw	r3,1032(sp)
 1802dd0:	d8c10515 	stw	r3,1044(sp)
 1802dd4:	d8010615 	stw	zero,1048(sp)
 1802dd8:	1800b600 	call	1800b60 <___vfprintf_internal_r>
 1802ddc:	1023883a 	mov	r17,r2
 1802de0:	10000416 	blt	r2,zero,1802df4 <__sbprintf+0x80>
 1802de4:	d9410004 	addi	r5,sp,1024
 1802de8:	9009883a 	mov	r4,r18
 1802dec:	1804a280 	call	1804a28 <_fflush_r>
 1802df0:	10000d1e 	bne	r2,zero,1802e28 <__sbprintf+0xb4>
 1802df4:	d881030b 	ldhu	r2,1036(sp)
 1802df8:	1080100c 	andi	r2,r2,64
 1802dfc:	10000326 	beq	r2,zero,1802e0c <__sbprintf+0x98>
 1802e00:	8080030b 	ldhu	r2,12(r16)
 1802e04:	10801014 	ori	r2,r2,64
 1802e08:	8080030d 	sth	r2,12(r16)
 1802e0c:	8805883a 	mov	r2,r17
 1802e10:	dfc11d17 	ldw	ra,1140(sp)
 1802e14:	dc811c17 	ldw	r18,1136(sp)
 1802e18:	dc411b17 	ldw	r17,1132(sp)
 1802e1c:	dc011a17 	ldw	r16,1128(sp)
 1802e20:	dec11e04 	addi	sp,sp,1144
 1802e24:	f800283a 	ret
 1802e28:	047fffc4 	movi	r17,-1
 1802e2c:	003ff106 	br	1802df4 <__ram_exceptions_end+0xff7f2b04>

01802e30 <__swsetup_r>:
 1802e30:	00806134 	movhi	r2,388
 1802e34:	defffd04 	addi	sp,sp,-12
 1802e38:	10946904 	addi	r2,r2,20900
 1802e3c:	dc400115 	stw	r17,4(sp)
 1802e40:	2023883a 	mov	r17,r4
 1802e44:	11000017 	ldw	r4,0(r2)
 1802e48:	dc000015 	stw	r16,0(sp)
 1802e4c:	dfc00215 	stw	ra,8(sp)
 1802e50:	2821883a 	mov	r16,r5
 1802e54:	20000226 	beq	r4,zero,1802e60 <__swsetup_r+0x30>
 1802e58:	20800e17 	ldw	r2,56(r4)
 1802e5c:	10003126 	beq	r2,zero,1802f24 <__swsetup_r+0xf4>
 1802e60:	8080030b 	ldhu	r2,12(r16)
 1802e64:	10c0020c 	andi	r3,r2,8
 1802e68:	1009883a 	mov	r4,r2
 1802e6c:	18000f26 	beq	r3,zero,1802eac <__swsetup_r+0x7c>
 1802e70:	80c00417 	ldw	r3,16(r16)
 1802e74:	18001526 	beq	r3,zero,1802ecc <__swsetup_r+0x9c>
 1802e78:	1100004c 	andi	r4,r2,1
 1802e7c:	20001c1e 	bne	r4,zero,1802ef0 <__swsetup_r+0xc0>
 1802e80:	1080008c 	andi	r2,r2,2
 1802e84:	1000291e 	bne	r2,zero,1802f2c <__swsetup_r+0xfc>
 1802e88:	80800517 	ldw	r2,20(r16)
 1802e8c:	80800215 	stw	r2,8(r16)
 1802e90:	18001c26 	beq	r3,zero,1802f04 <__swsetup_r+0xd4>
 1802e94:	0005883a 	mov	r2,zero
 1802e98:	dfc00217 	ldw	ra,8(sp)
 1802e9c:	dc400117 	ldw	r17,4(sp)
 1802ea0:	dc000017 	ldw	r16,0(sp)
 1802ea4:	dec00304 	addi	sp,sp,12
 1802ea8:	f800283a 	ret
 1802eac:	2080040c 	andi	r2,r4,16
 1802eb0:	10002e26 	beq	r2,zero,1802f6c <__swsetup_r+0x13c>
 1802eb4:	2080010c 	andi	r2,r4,4
 1802eb8:	10001e1e 	bne	r2,zero,1802f34 <__swsetup_r+0x104>
 1802ebc:	80c00417 	ldw	r3,16(r16)
 1802ec0:	20800214 	ori	r2,r4,8
 1802ec4:	8080030d 	sth	r2,12(r16)
 1802ec8:	183feb1e 	bne	r3,zero,1802e78 <__ram_exceptions_end+0xff7f2b88>
 1802ecc:	1100a00c 	andi	r4,r2,640
 1802ed0:	01408004 	movi	r5,512
 1802ed4:	217fe826 	beq	r4,r5,1802e78 <__ram_exceptions_end+0xff7f2b88>
 1802ed8:	800b883a 	mov	r5,r16
 1802edc:	8809883a 	mov	r4,r17
 1802ee0:	18054ec0 	call	18054ec <__smakebuf_r>
 1802ee4:	8080030b 	ldhu	r2,12(r16)
 1802ee8:	80c00417 	ldw	r3,16(r16)
 1802eec:	003fe206 	br	1802e78 <__ram_exceptions_end+0xff7f2b88>
 1802ef0:	80800517 	ldw	r2,20(r16)
 1802ef4:	80000215 	stw	zero,8(r16)
 1802ef8:	0085c83a 	sub	r2,zero,r2
 1802efc:	80800615 	stw	r2,24(r16)
 1802f00:	183fe41e 	bne	r3,zero,1802e94 <__ram_exceptions_end+0xff7f2ba4>
 1802f04:	80c0030b 	ldhu	r3,12(r16)
 1802f08:	0005883a 	mov	r2,zero
 1802f0c:	1900200c 	andi	r4,r3,128
 1802f10:	203fe126 	beq	r4,zero,1802e98 <__ram_exceptions_end+0xff7f2ba8>
 1802f14:	18c01014 	ori	r3,r3,64
 1802f18:	80c0030d 	sth	r3,12(r16)
 1802f1c:	00bfffc4 	movi	r2,-1
 1802f20:	003fdd06 	br	1802e98 <__ram_exceptions_end+0xff7f2ba8>
 1802f24:	1804e040 	call	1804e04 <__sinit>
 1802f28:	003fcd06 	br	1802e60 <__ram_exceptions_end+0xff7f2b70>
 1802f2c:	0005883a 	mov	r2,zero
 1802f30:	003fd606 	br	1802e8c <__ram_exceptions_end+0xff7f2b9c>
 1802f34:	81400c17 	ldw	r5,48(r16)
 1802f38:	28000626 	beq	r5,zero,1802f54 <__swsetup_r+0x124>
 1802f3c:	80801004 	addi	r2,r16,64
 1802f40:	28800326 	beq	r5,r2,1802f50 <__swsetup_r+0x120>
 1802f44:	8809883a 	mov	r4,r17
 1802f48:	1804f780 	call	1804f78 <_free_r>
 1802f4c:	8100030b 	ldhu	r4,12(r16)
 1802f50:	80000c15 	stw	zero,48(r16)
 1802f54:	80c00417 	ldw	r3,16(r16)
 1802f58:	00bff6c4 	movi	r2,-37
 1802f5c:	1108703a 	and	r4,r2,r4
 1802f60:	80000115 	stw	zero,4(r16)
 1802f64:	80c00015 	stw	r3,0(r16)
 1802f68:	003fd506 	br	1802ec0 <__ram_exceptions_end+0xff7f2bd0>
 1802f6c:	00800244 	movi	r2,9
 1802f70:	88800015 	stw	r2,0(r17)
 1802f74:	20801014 	ori	r2,r4,64
 1802f78:	8080030d 	sth	r2,12(r16)
 1802f7c:	00bfffc4 	movi	r2,-1
 1802f80:	003fc506 	br	1802e98 <__ram_exceptions_end+0xff7f2ba8>

01802f84 <quorem>:
 1802f84:	defff704 	addi	sp,sp,-36
 1802f88:	dc800215 	stw	r18,8(sp)
 1802f8c:	20800417 	ldw	r2,16(r4)
 1802f90:	2c800417 	ldw	r18,16(r5)
 1802f94:	dfc00815 	stw	ra,32(sp)
 1802f98:	ddc00715 	stw	r23,28(sp)
 1802f9c:	dd800615 	stw	r22,24(sp)
 1802fa0:	dd400515 	stw	r21,20(sp)
 1802fa4:	dd000415 	stw	r20,16(sp)
 1802fa8:	dcc00315 	stw	r19,12(sp)
 1802fac:	dc400115 	stw	r17,4(sp)
 1802fb0:	dc000015 	stw	r16,0(sp)
 1802fb4:	14807116 	blt	r2,r18,180317c <quorem+0x1f8>
 1802fb8:	94bfffc4 	addi	r18,r18,-1
 1802fbc:	94ad883a 	add	r22,r18,r18
 1802fc0:	b5ad883a 	add	r22,r22,r22
 1802fc4:	2c400504 	addi	r17,r5,20
 1802fc8:	8da9883a 	add	r20,r17,r22
 1802fcc:	25400504 	addi	r21,r4,20
 1802fd0:	282f883a 	mov	r23,r5
 1802fd4:	adad883a 	add	r22,r21,r22
 1802fd8:	a1400017 	ldw	r5,0(r20)
 1802fdc:	2021883a 	mov	r16,r4
 1802fe0:	b1000017 	ldw	r4,0(r22)
 1802fe4:	29400044 	addi	r5,r5,1
 1802fe8:	180ac1c0 	call	180ac1c <__udivsi3>
 1802fec:	1027883a 	mov	r19,r2
 1802ff0:	10002c26 	beq	r2,zero,18030a4 <quorem+0x120>
 1802ff4:	a813883a 	mov	r9,r21
 1802ff8:	880b883a 	mov	r5,r17
 1802ffc:	0009883a 	mov	r4,zero
 1803000:	000d883a 	mov	r6,zero
 1803004:	2a000017 	ldw	r8,0(r5)
 1803008:	49c00017 	ldw	r7,0(r9)
 180300c:	29400104 	addi	r5,r5,4
 1803010:	40bfffcc 	andi	r2,r8,65535
 1803014:	14c5383a 	mul	r2,r2,r19
 1803018:	4010d43a 	srli	r8,r8,16
 180301c:	38ffffcc 	andi	r3,r7,65535
 1803020:	1105883a 	add	r2,r2,r4
 1803024:	1008d43a 	srli	r4,r2,16
 1803028:	44d1383a 	mul	r8,r8,r19
 180302c:	198d883a 	add	r6,r3,r6
 1803030:	10ffffcc 	andi	r3,r2,65535
 1803034:	30c7c83a 	sub	r3,r6,r3
 1803038:	380ed43a 	srli	r7,r7,16
 180303c:	4105883a 	add	r2,r8,r4
 1803040:	180dd43a 	srai	r6,r3,16
 1803044:	113fffcc 	andi	r4,r2,65535
 1803048:	390fc83a 	sub	r7,r7,r4
 180304c:	398d883a 	add	r6,r7,r6
 1803050:	300e943a 	slli	r7,r6,16
 1803054:	18ffffcc 	andi	r3,r3,65535
 1803058:	1008d43a 	srli	r4,r2,16
 180305c:	38ceb03a 	or	r7,r7,r3
 1803060:	49c00015 	stw	r7,0(r9)
 1803064:	300dd43a 	srai	r6,r6,16
 1803068:	4a400104 	addi	r9,r9,4
 180306c:	a17fe52e 	bgeu	r20,r5,1803004 <__ram_exceptions_end+0xff7f2d14>
 1803070:	b0800017 	ldw	r2,0(r22)
 1803074:	10000b1e 	bne	r2,zero,18030a4 <quorem+0x120>
 1803078:	b0bfff04 	addi	r2,r22,-4
 180307c:	a880082e 	bgeu	r21,r2,18030a0 <quorem+0x11c>
 1803080:	b0ffff17 	ldw	r3,-4(r22)
 1803084:	18000326 	beq	r3,zero,1803094 <quorem+0x110>
 1803088:	00000506 	br	18030a0 <quorem+0x11c>
 180308c:	10c00017 	ldw	r3,0(r2)
 1803090:	1800031e 	bne	r3,zero,18030a0 <quorem+0x11c>
 1803094:	10bfff04 	addi	r2,r2,-4
 1803098:	94bfffc4 	addi	r18,r18,-1
 180309c:	a8bffb36 	bltu	r21,r2,180308c <__ram_exceptions_end+0xff7f2d9c>
 18030a0:	84800415 	stw	r18,16(r16)
 18030a4:	b80b883a 	mov	r5,r23
 18030a8:	8009883a 	mov	r4,r16
 18030ac:	1806ad00 	call	1806ad0 <__mcmp>
 18030b0:	10002616 	blt	r2,zero,180314c <quorem+0x1c8>
 18030b4:	9cc00044 	addi	r19,r19,1
 18030b8:	a805883a 	mov	r2,r21
 18030bc:	000b883a 	mov	r5,zero
 18030c0:	11000017 	ldw	r4,0(r2)
 18030c4:	89800017 	ldw	r6,0(r17)
 18030c8:	10800104 	addi	r2,r2,4
 18030cc:	20ffffcc 	andi	r3,r4,65535
 18030d0:	194b883a 	add	r5,r3,r5
 18030d4:	30ffffcc 	andi	r3,r6,65535
 18030d8:	28c7c83a 	sub	r3,r5,r3
 18030dc:	300cd43a 	srli	r6,r6,16
 18030e0:	2008d43a 	srli	r4,r4,16
 18030e4:	180bd43a 	srai	r5,r3,16
 18030e8:	18ffffcc 	andi	r3,r3,65535
 18030ec:	2189c83a 	sub	r4,r4,r6
 18030f0:	2149883a 	add	r4,r4,r5
 18030f4:	200c943a 	slli	r6,r4,16
 18030f8:	8c400104 	addi	r17,r17,4
 18030fc:	200bd43a 	srai	r5,r4,16
 1803100:	30c6b03a 	or	r3,r6,r3
 1803104:	10ffff15 	stw	r3,-4(r2)
 1803108:	a47fed2e 	bgeu	r20,r17,18030c0 <__ram_exceptions_end+0xff7f2dd0>
 180310c:	9485883a 	add	r2,r18,r18
 1803110:	1085883a 	add	r2,r2,r2
 1803114:	a887883a 	add	r3,r21,r2
 1803118:	18800017 	ldw	r2,0(r3)
 180311c:	10000b1e 	bne	r2,zero,180314c <quorem+0x1c8>
 1803120:	18bfff04 	addi	r2,r3,-4
 1803124:	a880082e 	bgeu	r21,r2,1803148 <quorem+0x1c4>
 1803128:	18ffff17 	ldw	r3,-4(r3)
 180312c:	18000326 	beq	r3,zero,180313c <quorem+0x1b8>
 1803130:	00000506 	br	1803148 <quorem+0x1c4>
 1803134:	10c00017 	ldw	r3,0(r2)
 1803138:	1800031e 	bne	r3,zero,1803148 <quorem+0x1c4>
 180313c:	10bfff04 	addi	r2,r2,-4
 1803140:	94bfffc4 	addi	r18,r18,-1
 1803144:	a8bffb36 	bltu	r21,r2,1803134 <__ram_exceptions_end+0xff7f2e44>
 1803148:	84800415 	stw	r18,16(r16)
 180314c:	9805883a 	mov	r2,r19
 1803150:	dfc00817 	ldw	ra,32(sp)
 1803154:	ddc00717 	ldw	r23,28(sp)
 1803158:	dd800617 	ldw	r22,24(sp)
 180315c:	dd400517 	ldw	r21,20(sp)
 1803160:	dd000417 	ldw	r20,16(sp)
 1803164:	dcc00317 	ldw	r19,12(sp)
 1803168:	dc800217 	ldw	r18,8(sp)
 180316c:	dc400117 	ldw	r17,4(sp)
 1803170:	dc000017 	ldw	r16,0(sp)
 1803174:	dec00904 	addi	sp,sp,36
 1803178:	f800283a 	ret
 180317c:	0005883a 	mov	r2,zero
 1803180:	003ff306 	br	1803150 <__ram_exceptions_end+0xff7f2e60>

01803184 <_dtoa_r>:
 1803184:	20801017 	ldw	r2,64(r4)
 1803188:	deffde04 	addi	sp,sp,-136
 180318c:	df002015 	stw	fp,128(sp)
 1803190:	dcc01b15 	stw	r19,108(sp)
 1803194:	dc801a15 	stw	r18,104(sp)
 1803198:	dc401915 	stw	r17,100(sp)
 180319c:	dc001815 	stw	r16,96(sp)
 18031a0:	dfc02115 	stw	ra,132(sp)
 18031a4:	ddc01f15 	stw	r23,124(sp)
 18031a8:	dd801e15 	stw	r22,120(sp)
 18031ac:	dd401d15 	stw	r21,116(sp)
 18031b0:	dd001c15 	stw	r20,112(sp)
 18031b4:	d9c00315 	stw	r7,12(sp)
 18031b8:	2039883a 	mov	fp,r4
 18031bc:	3023883a 	mov	r17,r6
 18031c0:	2825883a 	mov	r18,r5
 18031c4:	dc002417 	ldw	r16,144(sp)
 18031c8:	3027883a 	mov	r19,r6
 18031cc:	10000826 	beq	r2,zero,18031f0 <_dtoa_r+0x6c>
 18031d0:	21801117 	ldw	r6,68(r4)
 18031d4:	00c00044 	movi	r3,1
 18031d8:	100b883a 	mov	r5,r2
 18031dc:	1986983a 	sll	r3,r3,r6
 18031e0:	11800115 	stw	r6,4(r2)
 18031e4:	10c00215 	stw	r3,8(r2)
 18031e8:	18062b00 	call	18062b0 <_Bfree>
 18031ec:	e0001015 	stw	zero,64(fp)
 18031f0:	88002e16 	blt	r17,zero,18032ac <_dtoa_r+0x128>
 18031f4:	80000015 	stw	zero,0(r16)
 18031f8:	889ffc2c 	andhi	r2,r17,32752
 18031fc:	00dffc34 	movhi	r3,32752
 1803200:	10c01c26 	beq	r2,r3,1803274 <_dtoa_r+0xf0>
 1803204:	000d883a 	mov	r6,zero
 1803208:	000f883a 	mov	r7,zero
 180320c:	9009883a 	mov	r4,r18
 1803210:	980b883a 	mov	r5,r19
 1803214:	180be6c0 	call	180be6c <__eqdf2>
 1803218:	10002b1e 	bne	r2,zero,18032c8 <_dtoa_r+0x144>
 180321c:	d9c02317 	ldw	r7,140(sp)
 1803220:	00800044 	movi	r2,1
 1803224:	38800015 	stw	r2,0(r7)
 1803228:	d8802517 	ldw	r2,148(sp)
 180322c:	10019e26 	beq	r2,zero,18038a8 <_dtoa_r+0x724>
 1803230:	d8c02517 	ldw	r3,148(sp)
 1803234:	00806134 	movhi	r2,388
 1803238:	10822144 	addi	r2,r2,2181
 180323c:	18800015 	stw	r2,0(r3)
 1803240:	10bfffc4 	addi	r2,r2,-1
 1803244:	dfc02117 	ldw	ra,132(sp)
 1803248:	df002017 	ldw	fp,128(sp)
 180324c:	ddc01f17 	ldw	r23,124(sp)
 1803250:	dd801e17 	ldw	r22,120(sp)
 1803254:	dd401d17 	ldw	r21,116(sp)
 1803258:	dd001c17 	ldw	r20,112(sp)
 180325c:	dcc01b17 	ldw	r19,108(sp)
 1803260:	dc801a17 	ldw	r18,104(sp)
 1803264:	dc401917 	ldw	r17,100(sp)
 1803268:	dc001817 	ldw	r16,96(sp)
 180326c:	dec02204 	addi	sp,sp,136
 1803270:	f800283a 	ret
 1803274:	d8c02317 	ldw	r3,140(sp)
 1803278:	0089c3c4 	movi	r2,9999
 180327c:	18800015 	stw	r2,0(r3)
 1803280:	90017726 	beq	r18,zero,1803860 <_dtoa_r+0x6dc>
 1803284:	00806134 	movhi	r2,388
 1803288:	10822d04 	addi	r2,r2,2228
 180328c:	d9002517 	ldw	r4,148(sp)
 1803290:	203fec26 	beq	r4,zero,1803244 <__ram_exceptions_end+0xff7f2f54>
 1803294:	10c000c7 	ldb	r3,3(r2)
 1803298:	1801781e 	bne	r3,zero,180387c <_dtoa_r+0x6f8>
 180329c:	10c000c4 	addi	r3,r2,3
 18032a0:	d9802517 	ldw	r6,148(sp)
 18032a4:	30c00015 	stw	r3,0(r6)
 18032a8:	003fe606 	br	1803244 <__ram_exceptions_end+0xff7f2f54>
 18032ac:	04e00034 	movhi	r19,32768
 18032b0:	9cffffc4 	addi	r19,r19,-1
 18032b4:	00800044 	movi	r2,1
 18032b8:	8ce6703a 	and	r19,r17,r19
 18032bc:	80800015 	stw	r2,0(r16)
 18032c0:	9823883a 	mov	r17,r19
 18032c4:	003fcc06 	br	18031f8 <__ram_exceptions_end+0xff7f2f08>
 18032c8:	d8800204 	addi	r2,sp,8
 18032cc:	d8800015 	stw	r2,0(sp)
 18032d0:	d9c00104 	addi	r7,sp,4
 18032d4:	900b883a 	mov	r5,r18
 18032d8:	980d883a 	mov	r6,r19
 18032dc:	e009883a 	mov	r4,fp
 18032e0:	8820d53a 	srli	r16,r17,20
 18032e4:	1806e9c0 	call	1806e9c <__d2b>
 18032e8:	d8800915 	stw	r2,36(sp)
 18032ec:	8001651e 	bne	r16,zero,1803884 <_dtoa_r+0x700>
 18032f0:	dd800217 	ldw	r22,8(sp)
 18032f4:	dc000117 	ldw	r16,4(sp)
 18032f8:	00800804 	movi	r2,32
 18032fc:	b421883a 	add	r16,r22,r16
 1803300:	80c10c84 	addi	r3,r16,1074
 1803304:	10c2d10e 	bge	r2,r3,1803e4c <_dtoa_r+0xcc8>
 1803308:	00801004 	movi	r2,64
 180330c:	81010484 	addi	r4,r16,1042
 1803310:	10c7c83a 	sub	r3,r2,r3
 1803314:	9108d83a 	srl	r4,r18,r4
 1803318:	88e2983a 	sll	r17,r17,r3
 180331c:	2448b03a 	or	r4,r4,r17
 1803320:	180d2340 	call	180d234 <__floatunsidf>
 1803324:	017f8434 	movhi	r5,65040
 1803328:	01800044 	movi	r6,1
 180332c:	1009883a 	mov	r4,r2
 1803330:	194b883a 	add	r5,r3,r5
 1803334:	843fffc4 	addi	r16,r16,-1
 1803338:	d9801115 	stw	r6,68(sp)
 180333c:	000d883a 	mov	r6,zero
 1803340:	01cffe34 	movhi	r7,16376
 1803344:	180c7dc0 	call	180c7dc <__subdf3>
 1803348:	0198dbf4 	movhi	r6,25455
 180334c:	01cff4f4 	movhi	r7,16339
 1803350:	3190d844 	addi	r6,r6,17249
 1803354:	39e1e9c4 	addi	r7,r7,-30809
 1803358:	1009883a 	mov	r4,r2
 180335c:	180b883a 	mov	r5,r3
 1803360:	180c0c40 	call	180c0c4 <__muldf3>
 1803364:	01a2d874 	movhi	r6,35681
 1803368:	01cff1f4 	movhi	r7,16327
 180336c:	31b22cc4 	addi	r6,r6,-14157
 1803370:	39e28a04 	addi	r7,r7,-30168
 1803374:	180b883a 	mov	r5,r3
 1803378:	1009883a 	mov	r4,r2
 180337c:	180acd80 	call	180acd8 <__adddf3>
 1803380:	8009883a 	mov	r4,r16
 1803384:	1029883a 	mov	r20,r2
 1803388:	1823883a 	mov	r17,r3
 180338c:	180d1580 	call	180d158 <__floatsidf>
 1803390:	019427f4 	movhi	r6,20639
 1803394:	01cff4f4 	movhi	r7,16339
 1803398:	319e7ec4 	addi	r6,r6,31227
 180339c:	39d104c4 	addi	r7,r7,17427
 18033a0:	1009883a 	mov	r4,r2
 18033a4:	180b883a 	mov	r5,r3
 18033a8:	180c0c40 	call	180c0c4 <__muldf3>
 18033ac:	100d883a 	mov	r6,r2
 18033b0:	180f883a 	mov	r7,r3
 18033b4:	a009883a 	mov	r4,r20
 18033b8:	880b883a 	mov	r5,r17
 18033bc:	180acd80 	call	180acd8 <__adddf3>
 18033c0:	1009883a 	mov	r4,r2
 18033c4:	180b883a 	mov	r5,r3
 18033c8:	1029883a 	mov	r20,r2
 18033cc:	1823883a 	mov	r17,r3
 18033d0:	180d0d80 	call	180d0d8 <__fixdfsi>
 18033d4:	000d883a 	mov	r6,zero
 18033d8:	000f883a 	mov	r7,zero
 18033dc:	a009883a 	mov	r4,r20
 18033e0:	880b883a 	mov	r5,r17
 18033e4:	d8800515 	stw	r2,20(sp)
 18033e8:	180bfd00 	call	180bfd0 <__ledf2>
 18033ec:	10028716 	blt	r2,zero,1803e0c <_dtoa_r+0xc88>
 18033f0:	d8c00517 	ldw	r3,20(sp)
 18033f4:	00800584 	movi	r2,22
 18033f8:	10c27536 	bltu	r2,r3,1803dd0 <_dtoa_r+0xc4c>
 18033fc:	180490fa 	slli	r2,r3,3
 1803400:	00c06134 	movhi	r3,388
 1803404:	18c24904 	addi	r3,r3,2340
 1803408:	1885883a 	add	r2,r3,r2
 180340c:	11000017 	ldw	r4,0(r2)
 1803410:	11400117 	ldw	r5,4(r2)
 1803414:	900d883a 	mov	r6,r18
 1803418:	980f883a 	mov	r7,r19
 180341c:	180bef40 	call	180bef4 <__gedf2>
 1803420:	00828d0e 	bge	zero,r2,1803e58 <_dtoa_r+0xcd4>
 1803424:	d9000517 	ldw	r4,20(sp)
 1803428:	d8000e15 	stw	zero,56(sp)
 180342c:	213fffc4 	addi	r4,r4,-1
 1803430:	d9000515 	stw	r4,20(sp)
 1803434:	b42dc83a 	sub	r22,r22,r16
 1803438:	b5bfffc4 	addi	r22,r22,-1
 180343c:	b0026f16 	blt	r22,zero,1803dfc <_dtoa_r+0xc78>
 1803440:	d8000815 	stw	zero,32(sp)
 1803444:	d9c00517 	ldw	r7,20(sp)
 1803448:	38026416 	blt	r7,zero,1803ddc <_dtoa_r+0xc58>
 180344c:	b1ed883a 	add	r22,r22,r7
 1803450:	d9c00d15 	stw	r7,52(sp)
 1803454:	d8000a15 	stw	zero,40(sp)
 1803458:	d9800317 	ldw	r6,12(sp)
 180345c:	00800244 	movi	r2,9
 1803460:	11811436 	bltu	r2,r6,18038b4 <_dtoa_r+0x730>
 1803464:	00800144 	movi	r2,5
 1803468:	1184e10e 	bge	r2,r6,18047f0 <_dtoa_r+0x166c>
 180346c:	31bfff04 	addi	r6,r6,-4
 1803470:	d9800315 	stw	r6,12(sp)
 1803474:	0023883a 	mov	r17,zero
 1803478:	d9800317 	ldw	r6,12(sp)
 180347c:	008000c4 	movi	r2,3
 1803480:	30836726 	beq	r6,r2,1804220 <_dtoa_r+0x109c>
 1803484:	1183410e 	bge	r2,r6,180418c <_dtoa_r+0x1008>
 1803488:	d9c00317 	ldw	r7,12(sp)
 180348c:	00800104 	movi	r2,4
 1803490:	38827c26 	beq	r7,r2,1803e84 <_dtoa_r+0xd00>
 1803494:	00800144 	movi	r2,5
 1803498:	3884c41e 	bne	r7,r2,18047ac <_dtoa_r+0x1628>
 180349c:	00800044 	movi	r2,1
 18034a0:	d8800b15 	stw	r2,44(sp)
 18034a4:	d8c00517 	ldw	r3,20(sp)
 18034a8:	d9002217 	ldw	r4,136(sp)
 18034ac:	1907883a 	add	r3,r3,r4
 18034b0:	19800044 	addi	r6,r3,1
 18034b4:	d8c00c15 	stw	r3,48(sp)
 18034b8:	d9800615 	stw	r6,24(sp)
 18034bc:	0183a40e 	bge	zero,r6,1804350 <_dtoa_r+0x11cc>
 18034c0:	d9800617 	ldw	r6,24(sp)
 18034c4:	3021883a 	mov	r16,r6
 18034c8:	e0001115 	stw	zero,68(fp)
 18034cc:	008005c4 	movi	r2,23
 18034d0:	1184c92e 	bgeu	r2,r6,18047f8 <_dtoa_r+0x1674>
 18034d4:	00c00044 	movi	r3,1
 18034d8:	00800104 	movi	r2,4
 18034dc:	1085883a 	add	r2,r2,r2
 18034e0:	11000504 	addi	r4,r2,20
 18034e4:	180b883a 	mov	r5,r3
 18034e8:	18c00044 	addi	r3,r3,1
 18034ec:	313ffb2e 	bgeu	r6,r4,18034dc <__ram_exceptions_end+0xff7f31ec>
 18034f0:	e1401115 	stw	r5,68(fp)
 18034f4:	e009883a 	mov	r4,fp
 18034f8:	18062080 	call	1806208 <_Balloc>
 18034fc:	d8800715 	stw	r2,28(sp)
 1803500:	e0801015 	stw	r2,64(fp)
 1803504:	00800384 	movi	r2,14
 1803508:	1400f736 	bltu	r2,r16,18038e8 <_dtoa_r+0x764>
 180350c:	8800f626 	beq	r17,zero,18038e8 <_dtoa_r+0x764>
 1803510:	d9c00517 	ldw	r7,20(sp)
 1803514:	01c39a0e 	bge	zero,r7,1804380 <_dtoa_r+0x11fc>
 1803518:	388003cc 	andi	r2,r7,15
 180351c:	100490fa 	slli	r2,r2,3
 1803520:	382bd13a 	srai	r21,r7,4
 1803524:	00c06134 	movhi	r3,388
 1803528:	18c24904 	addi	r3,r3,2340
 180352c:	1885883a 	add	r2,r3,r2
 1803530:	a8c0040c 	andi	r3,r21,16
 1803534:	12400017 	ldw	r9,0(r2)
 1803538:	12000117 	ldw	r8,4(r2)
 180353c:	18037926 	beq	r3,zero,1804324 <_dtoa_r+0x11a0>
 1803540:	00806134 	movhi	r2,388
 1803544:	10823f04 	addi	r2,r2,2300
 1803548:	11800817 	ldw	r6,32(r2)
 180354c:	11c00917 	ldw	r7,36(r2)
 1803550:	9009883a 	mov	r4,r18
 1803554:	980b883a 	mov	r5,r19
 1803558:	da001715 	stw	r8,92(sp)
 180355c:	da401615 	stw	r9,88(sp)
 1803560:	180b5840 	call	180b584 <__divdf3>
 1803564:	da001717 	ldw	r8,92(sp)
 1803568:	da401617 	ldw	r9,88(sp)
 180356c:	ad4003cc 	andi	r21,r21,15
 1803570:	040000c4 	movi	r16,3
 1803574:	1023883a 	mov	r17,r2
 1803578:	1829883a 	mov	r20,r3
 180357c:	a8001126 	beq	r21,zero,18035c4 <_dtoa_r+0x440>
 1803580:	05c06134 	movhi	r23,388
 1803584:	bdc23f04 	addi	r23,r23,2300
 1803588:	4805883a 	mov	r2,r9
 180358c:	4007883a 	mov	r3,r8
 1803590:	a980004c 	andi	r6,r21,1
 1803594:	1009883a 	mov	r4,r2
 1803598:	a82bd07a 	srai	r21,r21,1
 180359c:	180b883a 	mov	r5,r3
 18035a0:	30000426 	beq	r6,zero,18035b4 <_dtoa_r+0x430>
 18035a4:	b9800017 	ldw	r6,0(r23)
 18035a8:	b9c00117 	ldw	r7,4(r23)
 18035ac:	84000044 	addi	r16,r16,1
 18035b0:	180c0c40 	call	180c0c4 <__muldf3>
 18035b4:	bdc00204 	addi	r23,r23,8
 18035b8:	a83ff51e 	bne	r21,zero,1803590 <__ram_exceptions_end+0xff7f32a0>
 18035bc:	1013883a 	mov	r9,r2
 18035c0:	1811883a 	mov	r8,r3
 18035c4:	480d883a 	mov	r6,r9
 18035c8:	400f883a 	mov	r7,r8
 18035cc:	8809883a 	mov	r4,r17
 18035d0:	a00b883a 	mov	r5,r20
 18035d4:	180b5840 	call	180b584 <__divdf3>
 18035d8:	d8800f15 	stw	r2,60(sp)
 18035dc:	d8c01015 	stw	r3,64(sp)
 18035e0:	d8c00e17 	ldw	r3,56(sp)
 18035e4:	18000626 	beq	r3,zero,1803600 <_dtoa_r+0x47c>
 18035e8:	d9000f17 	ldw	r4,60(sp)
 18035ec:	d9401017 	ldw	r5,64(sp)
 18035f0:	000d883a 	mov	r6,zero
 18035f4:	01cffc34 	movhi	r7,16368
 18035f8:	180bfd00 	call	180bfd0 <__ledf2>
 18035fc:	10040b16 	blt	r2,zero,180462c <_dtoa_r+0x14a8>
 1803600:	8009883a 	mov	r4,r16
 1803604:	180d1580 	call	180d158 <__floatsidf>
 1803608:	d9800f17 	ldw	r6,60(sp)
 180360c:	d9c01017 	ldw	r7,64(sp)
 1803610:	1009883a 	mov	r4,r2
 1803614:	180b883a 	mov	r5,r3
 1803618:	180c0c40 	call	180c0c4 <__muldf3>
 180361c:	000d883a 	mov	r6,zero
 1803620:	01d00734 	movhi	r7,16412
 1803624:	1009883a 	mov	r4,r2
 1803628:	180b883a 	mov	r5,r3
 180362c:	180acd80 	call	180acd8 <__adddf3>
 1803630:	1021883a 	mov	r16,r2
 1803634:	d8800617 	ldw	r2,24(sp)
 1803638:	047f3034 	movhi	r17,64704
 180363c:	1c63883a 	add	r17,r3,r17
 1803640:	10031826 	beq	r2,zero,18042a4 <_dtoa_r+0x1120>
 1803644:	d8c00517 	ldw	r3,20(sp)
 1803648:	db000617 	ldw	r12,24(sp)
 180364c:	d8c01315 	stw	r3,76(sp)
 1803650:	d9000b17 	ldw	r4,44(sp)
 1803654:	20038f26 	beq	r4,zero,1804494 <_dtoa_r+0x1310>
 1803658:	60bfffc4 	addi	r2,r12,-1
 180365c:	100490fa 	slli	r2,r2,3
 1803660:	00c06134 	movhi	r3,388
 1803664:	18c24904 	addi	r3,r3,2340
 1803668:	1885883a 	add	r2,r3,r2
 180366c:	11800017 	ldw	r6,0(r2)
 1803670:	11c00117 	ldw	r7,4(r2)
 1803674:	d8800717 	ldw	r2,28(sp)
 1803678:	0009883a 	mov	r4,zero
 180367c:	014ff834 	movhi	r5,16352
 1803680:	db001615 	stw	r12,88(sp)
 1803684:	15c00044 	addi	r23,r2,1
 1803688:	180b5840 	call	180b584 <__divdf3>
 180368c:	800d883a 	mov	r6,r16
 1803690:	880f883a 	mov	r7,r17
 1803694:	1009883a 	mov	r4,r2
 1803698:	180b883a 	mov	r5,r3
 180369c:	180c7dc0 	call	180c7dc <__subdf3>
 18036a0:	d9401017 	ldw	r5,64(sp)
 18036a4:	d9000f17 	ldw	r4,60(sp)
 18036a8:	102b883a 	mov	r21,r2
 18036ac:	d8c01215 	stw	r3,72(sp)
 18036b0:	180d0d80 	call	180d0d8 <__fixdfsi>
 18036b4:	1009883a 	mov	r4,r2
 18036b8:	1029883a 	mov	r20,r2
 18036bc:	180d1580 	call	180d158 <__floatsidf>
 18036c0:	d9000f17 	ldw	r4,60(sp)
 18036c4:	d9401017 	ldw	r5,64(sp)
 18036c8:	100d883a 	mov	r6,r2
 18036cc:	180f883a 	mov	r7,r3
 18036d0:	180c7dc0 	call	180c7dc <__subdf3>
 18036d4:	1823883a 	mov	r17,r3
 18036d8:	d8c00717 	ldw	r3,28(sp)
 18036dc:	d9401217 	ldw	r5,72(sp)
 18036e0:	a2000c04 	addi	r8,r20,48
 18036e4:	1021883a 	mov	r16,r2
 18036e8:	1a000005 	stb	r8,0(r3)
 18036ec:	800d883a 	mov	r6,r16
 18036f0:	880f883a 	mov	r7,r17
 18036f4:	a809883a 	mov	r4,r21
 18036f8:	4029883a 	mov	r20,r8
 18036fc:	180bef40 	call	180bef4 <__gedf2>
 1803700:	00841d16 	blt	zero,r2,1804778 <_dtoa_r+0x15f4>
 1803704:	800d883a 	mov	r6,r16
 1803708:	880f883a 	mov	r7,r17
 180370c:	0009883a 	mov	r4,zero
 1803710:	014ffc34 	movhi	r5,16368
 1803714:	180c7dc0 	call	180c7dc <__subdf3>
 1803718:	d9401217 	ldw	r5,72(sp)
 180371c:	100d883a 	mov	r6,r2
 1803720:	180f883a 	mov	r7,r3
 1803724:	a809883a 	mov	r4,r21
 1803728:	180bef40 	call	180bef4 <__gedf2>
 180372c:	db001617 	ldw	r12,88(sp)
 1803730:	00840e16 	blt	zero,r2,180476c <_dtoa_r+0x15e8>
 1803734:	00800044 	movi	r2,1
 1803738:	13006b0e 	bge	r2,r12,18038e8 <_dtoa_r+0x764>
 180373c:	d9000717 	ldw	r4,28(sp)
 1803740:	dd800f15 	stw	r22,60(sp)
 1803744:	dcc01015 	stw	r19,64(sp)
 1803748:	2319883a 	add	r12,r4,r12
 180374c:	dcc01217 	ldw	r19,72(sp)
 1803750:	602d883a 	mov	r22,r12
 1803754:	dc801215 	stw	r18,72(sp)
 1803758:	b825883a 	mov	r18,r23
 180375c:	00000906 	br	1803784 <_dtoa_r+0x600>
 1803760:	180c7dc0 	call	180c7dc <__subdf3>
 1803764:	a80d883a 	mov	r6,r21
 1803768:	980f883a 	mov	r7,r19
 180376c:	1009883a 	mov	r4,r2
 1803770:	180b883a 	mov	r5,r3
 1803774:	180bfd00 	call	180bfd0 <__ledf2>
 1803778:	1003e816 	blt	r2,zero,180471c <_dtoa_r+0x1598>
 180377c:	b825883a 	mov	r18,r23
 1803780:	bd83e926 	beq	r23,r22,1804728 <_dtoa_r+0x15a4>
 1803784:	a809883a 	mov	r4,r21
 1803788:	980b883a 	mov	r5,r19
 180378c:	000d883a 	mov	r6,zero
 1803790:	01d00934 	movhi	r7,16420
 1803794:	180c0c40 	call	180c0c4 <__muldf3>
 1803798:	000d883a 	mov	r6,zero
 180379c:	01d00934 	movhi	r7,16420
 18037a0:	8009883a 	mov	r4,r16
 18037a4:	880b883a 	mov	r5,r17
 18037a8:	102b883a 	mov	r21,r2
 18037ac:	1827883a 	mov	r19,r3
 18037b0:	180c0c40 	call	180c0c4 <__muldf3>
 18037b4:	180b883a 	mov	r5,r3
 18037b8:	1009883a 	mov	r4,r2
 18037bc:	1821883a 	mov	r16,r3
 18037c0:	1023883a 	mov	r17,r2
 18037c4:	180d0d80 	call	180d0d8 <__fixdfsi>
 18037c8:	1009883a 	mov	r4,r2
 18037cc:	1029883a 	mov	r20,r2
 18037d0:	180d1580 	call	180d158 <__floatsidf>
 18037d4:	8809883a 	mov	r4,r17
 18037d8:	800b883a 	mov	r5,r16
 18037dc:	100d883a 	mov	r6,r2
 18037e0:	180f883a 	mov	r7,r3
 18037e4:	180c7dc0 	call	180c7dc <__subdf3>
 18037e8:	a5000c04 	addi	r20,r20,48
 18037ec:	a80d883a 	mov	r6,r21
 18037f0:	980f883a 	mov	r7,r19
 18037f4:	1009883a 	mov	r4,r2
 18037f8:	180b883a 	mov	r5,r3
 18037fc:	95000005 	stb	r20,0(r18)
 1803800:	1021883a 	mov	r16,r2
 1803804:	1823883a 	mov	r17,r3
 1803808:	180bfd00 	call	180bfd0 <__ledf2>
 180380c:	bdc00044 	addi	r23,r23,1
 1803810:	800d883a 	mov	r6,r16
 1803814:	880f883a 	mov	r7,r17
 1803818:	0009883a 	mov	r4,zero
 180381c:	014ffc34 	movhi	r5,16368
 1803820:	103fcf0e 	bge	r2,zero,1803760 <__ram_exceptions_end+0xff7f3470>
 1803824:	d8c01317 	ldw	r3,76(sp)
 1803828:	d8c00515 	stw	r3,20(sp)
 180382c:	d9400917 	ldw	r5,36(sp)
 1803830:	e009883a 	mov	r4,fp
 1803834:	18062b00 	call	18062b0 <_Bfree>
 1803838:	d9000517 	ldw	r4,20(sp)
 180383c:	d9802317 	ldw	r6,140(sp)
 1803840:	d9c02517 	ldw	r7,148(sp)
 1803844:	b8000005 	stb	zero,0(r23)
 1803848:	20800044 	addi	r2,r4,1
 180384c:	30800015 	stw	r2,0(r6)
 1803850:	3802aa26 	beq	r7,zero,18042fc <_dtoa_r+0x1178>
 1803854:	3dc00015 	stw	r23,0(r7)
 1803858:	d8800717 	ldw	r2,28(sp)
 180385c:	003e7906 	br	1803244 <__ram_exceptions_end+0xff7f2f54>
 1803860:	00800434 	movhi	r2,16
 1803864:	10bfffc4 	addi	r2,r2,-1
 1803868:	88a2703a 	and	r17,r17,r2
 180386c:	883e851e 	bne	r17,zero,1803284 <__ram_exceptions_end+0xff7f2f94>
 1803870:	00806134 	movhi	r2,388
 1803874:	10822a04 	addi	r2,r2,2216
 1803878:	003e8406 	br	180328c <__ram_exceptions_end+0xff7f2f9c>
 180387c:	10c00204 	addi	r3,r2,8
 1803880:	003e8706 	br	18032a0 <__ram_exceptions_end+0xff7f2fb0>
 1803884:	01400434 	movhi	r5,16
 1803888:	297fffc4 	addi	r5,r5,-1
 180388c:	994a703a 	and	r5,r19,r5
 1803890:	9009883a 	mov	r4,r18
 1803894:	843f0044 	addi	r16,r16,-1023
 1803898:	294ffc34 	orhi	r5,r5,16368
 180389c:	dd800217 	ldw	r22,8(sp)
 18038a0:	d8001115 	stw	zero,68(sp)
 18038a4:	003ea506 	br	180333c <__ram_exceptions_end+0xff7f304c>
 18038a8:	00806134 	movhi	r2,388
 18038ac:	10822104 	addi	r2,r2,2180
 18038b0:	003e6406 	br	1803244 <__ram_exceptions_end+0xff7f2f54>
 18038b4:	e0001115 	stw	zero,68(fp)
 18038b8:	000b883a 	mov	r5,zero
 18038bc:	e009883a 	mov	r4,fp
 18038c0:	18062080 	call	1806208 <_Balloc>
 18038c4:	01bfffc4 	movi	r6,-1
 18038c8:	01c00044 	movi	r7,1
 18038cc:	d8800715 	stw	r2,28(sp)
 18038d0:	d9800c15 	stw	r6,48(sp)
 18038d4:	e0801015 	stw	r2,64(fp)
 18038d8:	d8000315 	stw	zero,12(sp)
 18038dc:	d9c00b15 	stw	r7,44(sp)
 18038e0:	d9800615 	stw	r6,24(sp)
 18038e4:	d8002215 	stw	zero,136(sp)
 18038e8:	d8800117 	ldw	r2,4(sp)
 18038ec:	10008916 	blt	r2,zero,1803b14 <_dtoa_r+0x990>
 18038f0:	d9000517 	ldw	r4,20(sp)
 18038f4:	00c00384 	movi	r3,14
 18038f8:	19008616 	blt	r3,r4,1803b14 <_dtoa_r+0x990>
 18038fc:	200490fa 	slli	r2,r4,3
 1803900:	00c06134 	movhi	r3,388
 1803904:	d9802217 	ldw	r6,136(sp)
 1803908:	18c24904 	addi	r3,r3,2340
 180390c:	1885883a 	add	r2,r3,r2
 1803910:	14000017 	ldw	r16,0(r2)
 1803914:	14400117 	ldw	r17,4(r2)
 1803918:	30016316 	blt	r6,zero,1803ea8 <_dtoa_r+0xd24>
 180391c:	800d883a 	mov	r6,r16
 1803920:	880f883a 	mov	r7,r17
 1803924:	9009883a 	mov	r4,r18
 1803928:	980b883a 	mov	r5,r19
 180392c:	180b5840 	call	180b584 <__divdf3>
 1803930:	180b883a 	mov	r5,r3
 1803934:	1009883a 	mov	r4,r2
 1803938:	180d0d80 	call	180d0d8 <__fixdfsi>
 180393c:	1009883a 	mov	r4,r2
 1803940:	102b883a 	mov	r21,r2
 1803944:	180d1580 	call	180d158 <__floatsidf>
 1803948:	800d883a 	mov	r6,r16
 180394c:	880f883a 	mov	r7,r17
 1803950:	1009883a 	mov	r4,r2
 1803954:	180b883a 	mov	r5,r3
 1803958:	180c0c40 	call	180c0c4 <__muldf3>
 180395c:	100d883a 	mov	r6,r2
 1803960:	180f883a 	mov	r7,r3
 1803964:	9009883a 	mov	r4,r18
 1803968:	980b883a 	mov	r5,r19
 180396c:	180c7dc0 	call	180c7dc <__subdf3>
 1803970:	d9c00717 	ldw	r7,28(sp)
 1803974:	1009883a 	mov	r4,r2
 1803978:	a8800c04 	addi	r2,r21,48
 180397c:	38800005 	stb	r2,0(r7)
 1803980:	3dc00044 	addi	r23,r7,1
 1803984:	d9c00617 	ldw	r7,24(sp)
 1803988:	01800044 	movi	r6,1
 180398c:	180b883a 	mov	r5,r3
 1803990:	2005883a 	mov	r2,r4
 1803994:	39803826 	beq	r7,r6,1803a78 <_dtoa_r+0x8f4>
 1803998:	000d883a 	mov	r6,zero
 180399c:	01d00934 	movhi	r7,16420
 18039a0:	180c0c40 	call	180c0c4 <__muldf3>
 18039a4:	000d883a 	mov	r6,zero
 18039a8:	000f883a 	mov	r7,zero
 18039ac:	1009883a 	mov	r4,r2
 18039b0:	180b883a 	mov	r5,r3
 18039b4:	1025883a 	mov	r18,r2
 18039b8:	1827883a 	mov	r19,r3
 18039bc:	180be6c0 	call	180be6c <__eqdf2>
 18039c0:	103f9a26 	beq	r2,zero,180382c <__ram_exceptions_end+0xff7f353c>
 18039c4:	d9c00617 	ldw	r7,24(sp)
 18039c8:	d8c00717 	ldw	r3,28(sp)
 18039cc:	b829883a 	mov	r20,r23
 18039d0:	38bfffc4 	addi	r2,r7,-1
 18039d4:	18ad883a 	add	r22,r3,r2
 18039d8:	00000a06 	br	1803a04 <_dtoa_r+0x880>
 18039dc:	180c0c40 	call	180c0c4 <__muldf3>
 18039e0:	000d883a 	mov	r6,zero
 18039e4:	000f883a 	mov	r7,zero
 18039e8:	1009883a 	mov	r4,r2
 18039ec:	180b883a 	mov	r5,r3
 18039f0:	1025883a 	mov	r18,r2
 18039f4:	1827883a 	mov	r19,r3
 18039f8:	b829883a 	mov	r20,r23
 18039fc:	180be6c0 	call	180be6c <__eqdf2>
 1803a00:	103f8a26 	beq	r2,zero,180382c <__ram_exceptions_end+0xff7f353c>
 1803a04:	800d883a 	mov	r6,r16
 1803a08:	880f883a 	mov	r7,r17
 1803a0c:	9009883a 	mov	r4,r18
 1803a10:	980b883a 	mov	r5,r19
 1803a14:	180b5840 	call	180b584 <__divdf3>
 1803a18:	180b883a 	mov	r5,r3
 1803a1c:	1009883a 	mov	r4,r2
 1803a20:	180d0d80 	call	180d0d8 <__fixdfsi>
 1803a24:	1009883a 	mov	r4,r2
 1803a28:	102b883a 	mov	r21,r2
 1803a2c:	180d1580 	call	180d158 <__floatsidf>
 1803a30:	800d883a 	mov	r6,r16
 1803a34:	880f883a 	mov	r7,r17
 1803a38:	1009883a 	mov	r4,r2
 1803a3c:	180b883a 	mov	r5,r3
 1803a40:	180c0c40 	call	180c0c4 <__muldf3>
 1803a44:	100d883a 	mov	r6,r2
 1803a48:	180f883a 	mov	r7,r3
 1803a4c:	9009883a 	mov	r4,r18
 1803a50:	980b883a 	mov	r5,r19
 1803a54:	180c7dc0 	call	180c7dc <__subdf3>
 1803a58:	aa000c04 	addi	r8,r21,48
 1803a5c:	a2000005 	stb	r8,0(r20)
 1803a60:	000d883a 	mov	r6,zero
 1803a64:	01d00934 	movhi	r7,16420
 1803a68:	1009883a 	mov	r4,r2
 1803a6c:	180b883a 	mov	r5,r3
 1803a70:	a5c00044 	addi	r23,r20,1
 1803a74:	b53fd91e 	bne	r22,r20,18039dc <__ram_exceptions_end+0xff7f36ec>
 1803a78:	100d883a 	mov	r6,r2
 1803a7c:	180f883a 	mov	r7,r3
 1803a80:	1009883a 	mov	r4,r2
 1803a84:	180b883a 	mov	r5,r3
 1803a88:	180acd80 	call	180acd8 <__adddf3>
 1803a8c:	100d883a 	mov	r6,r2
 1803a90:	180f883a 	mov	r7,r3
 1803a94:	8009883a 	mov	r4,r16
 1803a98:	880b883a 	mov	r5,r17
 1803a9c:	1027883a 	mov	r19,r2
 1803aa0:	1825883a 	mov	r18,r3
 1803aa4:	180bfd00 	call	180bfd0 <__ledf2>
 1803aa8:	10000816 	blt	r2,zero,1803acc <_dtoa_r+0x948>
 1803aac:	980d883a 	mov	r6,r19
 1803ab0:	900f883a 	mov	r7,r18
 1803ab4:	8009883a 	mov	r4,r16
 1803ab8:	880b883a 	mov	r5,r17
 1803abc:	180be6c0 	call	180be6c <__eqdf2>
 1803ac0:	103f5a1e 	bne	r2,zero,180382c <__ram_exceptions_end+0xff7f353c>
 1803ac4:	ad40004c 	andi	r21,r21,1
 1803ac8:	a83f5826 	beq	r21,zero,180382c <__ram_exceptions_end+0xff7f353c>
 1803acc:	bd3fffc3 	ldbu	r20,-1(r23)
 1803ad0:	b8bfffc4 	addi	r2,r23,-1
 1803ad4:	1007883a 	mov	r3,r2
 1803ad8:	01400e44 	movi	r5,57
 1803adc:	d9800717 	ldw	r6,28(sp)
 1803ae0:	00000506 	br	1803af8 <_dtoa_r+0x974>
 1803ae4:	18ffffc4 	addi	r3,r3,-1
 1803ae8:	11824726 	beq	r2,r6,1804408 <_dtoa_r+0x1284>
 1803aec:	1d000003 	ldbu	r20,0(r3)
 1803af0:	102f883a 	mov	r23,r2
 1803af4:	10bfffc4 	addi	r2,r2,-1
 1803af8:	a1003fcc 	andi	r4,r20,255
 1803afc:	2100201c 	xori	r4,r4,128
 1803b00:	213fe004 	addi	r4,r4,-128
 1803b04:	217ff726 	beq	r4,r5,1803ae4 <__ram_exceptions_end+0xff7f37f4>
 1803b08:	a2000044 	addi	r8,r20,1
 1803b0c:	12000005 	stb	r8,0(r2)
 1803b10:	003f4606 	br	180382c <__ram_exceptions_end+0xff7f353c>
 1803b14:	d9000b17 	ldw	r4,44(sp)
 1803b18:	2000c826 	beq	r4,zero,1803e3c <_dtoa_r+0xcb8>
 1803b1c:	d9800317 	ldw	r6,12(sp)
 1803b20:	00c00044 	movi	r3,1
 1803b24:	1980f90e 	bge	r3,r6,1803f0c <_dtoa_r+0xd88>
 1803b28:	d8800617 	ldw	r2,24(sp)
 1803b2c:	d8c00a17 	ldw	r3,40(sp)
 1803b30:	157fffc4 	addi	r21,r2,-1
 1803b34:	1d41f316 	blt	r3,r21,1804304 <_dtoa_r+0x1180>
 1803b38:	1d6bc83a 	sub	r21,r3,r21
 1803b3c:	d9c00617 	ldw	r7,24(sp)
 1803b40:	3802aa16 	blt	r7,zero,18045ec <_dtoa_r+0x1468>
 1803b44:	dd000817 	ldw	r20,32(sp)
 1803b48:	d8800617 	ldw	r2,24(sp)
 1803b4c:	d8c00817 	ldw	r3,32(sp)
 1803b50:	01400044 	movi	r5,1
 1803b54:	e009883a 	mov	r4,fp
 1803b58:	1887883a 	add	r3,r3,r2
 1803b5c:	d8c00815 	stw	r3,32(sp)
 1803b60:	b0ad883a 	add	r22,r22,r2
 1803b64:	18066140 	call	1806614 <__i2b>
 1803b68:	1023883a 	mov	r17,r2
 1803b6c:	a0000826 	beq	r20,zero,1803b90 <_dtoa_r+0xa0c>
 1803b70:	0580070e 	bge	zero,r22,1803b90 <_dtoa_r+0xa0c>
 1803b74:	a005883a 	mov	r2,r20
 1803b78:	b500b916 	blt	r22,r20,1803e60 <_dtoa_r+0xcdc>
 1803b7c:	d9000817 	ldw	r4,32(sp)
 1803b80:	a0a9c83a 	sub	r20,r20,r2
 1803b84:	b0adc83a 	sub	r22,r22,r2
 1803b88:	2089c83a 	sub	r4,r4,r2
 1803b8c:	d9000815 	stw	r4,32(sp)
 1803b90:	d9800a17 	ldw	r6,40(sp)
 1803b94:	0181810e 	bge	zero,r6,180419c <_dtoa_r+0x1018>
 1803b98:	d9c00b17 	ldw	r7,44(sp)
 1803b9c:	3800b326 	beq	r7,zero,1803e6c <_dtoa_r+0xce8>
 1803ba0:	a800b226 	beq	r21,zero,1803e6c <_dtoa_r+0xce8>
 1803ba4:	880b883a 	mov	r5,r17
 1803ba8:	a80d883a 	mov	r6,r21
 1803bac:	e009883a 	mov	r4,fp
 1803bb0:	18068480 	call	1806848 <__pow5mult>
 1803bb4:	d9800917 	ldw	r6,36(sp)
 1803bb8:	100b883a 	mov	r5,r2
 1803bbc:	e009883a 	mov	r4,fp
 1803bc0:	1023883a 	mov	r17,r2
 1803bc4:	18066500 	call	1806650 <__multiply>
 1803bc8:	1021883a 	mov	r16,r2
 1803bcc:	d8800a17 	ldw	r2,40(sp)
 1803bd0:	d9400917 	ldw	r5,36(sp)
 1803bd4:	e009883a 	mov	r4,fp
 1803bd8:	1545c83a 	sub	r2,r2,r21
 1803bdc:	d8800a15 	stw	r2,40(sp)
 1803be0:	18062b00 	call	18062b0 <_Bfree>
 1803be4:	d8c00a17 	ldw	r3,40(sp)
 1803be8:	18009f1e 	bne	r3,zero,1803e68 <_dtoa_r+0xce4>
 1803bec:	05c00044 	movi	r23,1
 1803bf0:	e009883a 	mov	r4,fp
 1803bf4:	b80b883a 	mov	r5,r23
 1803bf8:	18066140 	call	1806614 <__i2b>
 1803bfc:	d9000d17 	ldw	r4,52(sp)
 1803c00:	102b883a 	mov	r21,r2
 1803c04:	2000ce26 	beq	r4,zero,1803f40 <_dtoa_r+0xdbc>
 1803c08:	200d883a 	mov	r6,r4
 1803c0c:	100b883a 	mov	r5,r2
 1803c10:	e009883a 	mov	r4,fp
 1803c14:	18068480 	call	1806848 <__pow5mult>
 1803c18:	d9800317 	ldw	r6,12(sp)
 1803c1c:	102b883a 	mov	r21,r2
 1803c20:	b981810e 	bge	r23,r6,1804228 <_dtoa_r+0x10a4>
 1803c24:	0027883a 	mov	r19,zero
 1803c28:	a8800417 	ldw	r2,16(r21)
 1803c2c:	05c00804 	movi	r23,32
 1803c30:	10800104 	addi	r2,r2,4
 1803c34:	1085883a 	add	r2,r2,r2
 1803c38:	1085883a 	add	r2,r2,r2
 1803c3c:	a885883a 	add	r2,r21,r2
 1803c40:	11000017 	ldw	r4,0(r2)
 1803c44:	18064fc0 	call	18064fc <__hi0bits>
 1803c48:	b885c83a 	sub	r2,r23,r2
 1803c4c:	1585883a 	add	r2,r2,r22
 1803c50:	108007cc 	andi	r2,r2,31
 1803c54:	1000b326 	beq	r2,zero,1803f24 <_dtoa_r+0xda0>
 1803c58:	00c00804 	movi	r3,32
 1803c5c:	1887c83a 	sub	r3,r3,r2
 1803c60:	01000104 	movi	r4,4
 1803c64:	20c2cd0e 	bge	r4,r3,180479c <_dtoa_r+0x1618>
 1803c68:	00c00704 	movi	r3,28
 1803c6c:	1885c83a 	sub	r2,r3,r2
 1803c70:	d8c00817 	ldw	r3,32(sp)
 1803c74:	a0a9883a 	add	r20,r20,r2
 1803c78:	b0ad883a 	add	r22,r22,r2
 1803c7c:	1887883a 	add	r3,r3,r2
 1803c80:	d8c00815 	stw	r3,32(sp)
 1803c84:	d9800817 	ldw	r6,32(sp)
 1803c88:	0180040e 	bge	zero,r6,1803c9c <_dtoa_r+0xb18>
 1803c8c:	800b883a 	mov	r5,r16
 1803c90:	e009883a 	mov	r4,fp
 1803c94:	18069880 	call	1806988 <__lshift>
 1803c98:	1021883a 	mov	r16,r2
 1803c9c:	0580050e 	bge	zero,r22,1803cb4 <_dtoa_r+0xb30>
 1803ca0:	a80b883a 	mov	r5,r21
 1803ca4:	b00d883a 	mov	r6,r22
 1803ca8:	e009883a 	mov	r4,fp
 1803cac:	18069880 	call	1806988 <__lshift>
 1803cb0:	102b883a 	mov	r21,r2
 1803cb4:	d9c00e17 	ldw	r7,56(sp)
 1803cb8:	3801211e 	bne	r7,zero,1804140 <_dtoa_r+0xfbc>
 1803cbc:	d9800617 	ldw	r6,24(sp)
 1803cc0:	0181380e 	bge	zero,r6,18041a4 <_dtoa_r+0x1020>
 1803cc4:	d8c00b17 	ldw	r3,44(sp)
 1803cc8:	1800ab1e 	bne	r3,zero,1803f78 <_dtoa_r+0xdf4>
 1803ccc:	dc800717 	ldw	r18,28(sp)
 1803cd0:	dcc00617 	ldw	r19,24(sp)
 1803cd4:	9029883a 	mov	r20,r18
 1803cd8:	00000206 	br	1803ce4 <_dtoa_r+0xb60>
 1803cdc:	18062d80 	call	18062d8 <__multadd>
 1803ce0:	1021883a 	mov	r16,r2
 1803ce4:	a80b883a 	mov	r5,r21
 1803ce8:	8009883a 	mov	r4,r16
 1803cec:	1802f840 	call	1802f84 <quorem>
 1803cf0:	10800c04 	addi	r2,r2,48
 1803cf4:	90800005 	stb	r2,0(r18)
 1803cf8:	94800044 	addi	r18,r18,1
 1803cfc:	9507c83a 	sub	r3,r18,r20
 1803d00:	000f883a 	mov	r7,zero
 1803d04:	01800284 	movi	r6,10
 1803d08:	800b883a 	mov	r5,r16
 1803d0c:	e009883a 	mov	r4,fp
 1803d10:	1cfff216 	blt	r3,r19,1803cdc <__ram_exceptions_end+0xff7f39ec>
 1803d14:	1011883a 	mov	r8,r2
 1803d18:	d8800617 	ldw	r2,24(sp)
 1803d1c:	0082370e 	bge	zero,r2,18045fc <_dtoa_r+0x1478>
 1803d20:	d9000717 	ldw	r4,28(sp)
 1803d24:	0025883a 	mov	r18,zero
 1803d28:	20af883a 	add	r23,r4,r2
 1803d2c:	01800044 	movi	r6,1
 1803d30:	800b883a 	mov	r5,r16
 1803d34:	e009883a 	mov	r4,fp
 1803d38:	da001715 	stw	r8,92(sp)
 1803d3c:	18069880 	call	1806988 <__lshift>
 1803d40:	a80b883a 	mov	r5,r21
 1803d44:	1009883a 	mov	r4,r2
 1803d48:	d8800915 	stw	r2,36(sp)
 1803d4c:	1806ad00 	call	1806ad0 <__mcmp>
 1803d50:	da001717 	ldw	r8,92(sp)
 1803d54:	0081800e 	bge	zero,r2,1804358 <_dtoa_r+0x11d4>
 1803d58:	b93fffc3 	ldbu	r4,-1(r23)
 1803d5c:	b8bfffc4 	addi	r2,r23,-1
 1803d60:	1007883a 	mov	r3,r2
 1803d64:	01800e44 	movi	r6,57
 1803d68:	d9c00717 	ldw	r7,28(sp)
 1803d6c:	00000506 	br	1803d84 <_dtoa_r+0xc00>
 1803d70:	18ffffc4 	addi	r3,r3,-1
 1803d74:	11c12326 	beq	r2,r7,1804204 <_dtoa_r+0x1080>
 1803d78:	19000003 	ldbu	r4,0(r3)
 1803d7c:	102f883a 	mov	r23,r2
 1803d80:	10bfffc4 	addi	r2,r2,-1
 1803d84:	21403fcc 	andi	r5,r4,255
 1803d88:	2940201c 	xori	r5,r5,128
 1803d8c:	297fe004 	addi	r5,r5,-128
 1803d90:	29bff726 	beq	r5,r6,1803d70 <__ram_exceptions_end+0xff7f3a80>
 1803d94:	21000044 	addi	r4,r4,1
 1803d98:	11000005 	stb	r4,0(r2)
 1803d9c:	a80b883a 	mov	r5,r21
 1803da0:	e009883a 	mov	r4,fp
 1803da4:	18062b00 	call	18062b0 <_Bfree>
 1803da8:	883ea026 	beq	r17,zero,180382c <__ram_exceptions_end+0xff7f353c>
 1803dac:	90000426 	beq	r18,zero,1803dc0 <_dtoa_r+0xc3c>
 1803db0:	94400326 	beq	r18,r17,1803dc0 <_dtoa_r+0xc3c>
 1803db4:	900b883a 	mov	r5,r18
 1803db8:	e009883a 	mov	r4,fp
 1803dbc:	18062b00 	call	18062b0 <_Bfree>
 1803dc0:	880b883a 	mov	r5,r17
 1803dc4:	e009883a 	mov	r4,fp
 1803dc8:	18062b00 	call	18062b0 <_Bfree>
 1803dcc:	003e9706 	br	180382c <__ram_exceptions_end+0xff7f353c>
 1803dd0:	01800044 	movi	r6,1
 1803dd4:	d9800e15 	stw	r6,56(sp)
 1803dd8:	003d9606 	br	1803434 <__ram_exceptions_end+0xff7f3144>
 1803ddc:	d8800817 	ldw	r2,32(sp)
 1803de0:	d8c00517 	ldw	r3,20(sp)
 1803de4:	d8000d15 	stw	zero,52(sp)
 1803de8:	10c5c83a 	sub	r2,r2,r3
 1803dec:	00c9c83a 	sub	r4,zero,r3
 1803df0:	d8800815 	stw	r2,32(sp)
 1803df4:	d9000a15 	stw	r4,40(sp)
 1803df8:	003d9706 	br	1803458 <__ram_exceptions_end+0xff7f3168>
 1803dfc:	05adc83a 	sub	r22,zero,r22
 1803e00:	dd800815 	stw	r22,32(sp)
 1803e04:	002d883a 	mov	r22,zero
 1803e08:	003d8e06 	br	1803444 <__ram_exceptions_end+0xff7f3154>
 1803e0c:	d9000517 	ldw	r4,20(sp)
 1803e10:	180d1580 	call	180d158 <__floatsidf>
 1803e14:	100d883a 	mov	r6,r2
 1803e18:	180f883a 	mov	r7,r3
 1803e1c:	a009883a 	mov	r4,r20
 1803e20:	880b883a 	mov	r5,r17
 1803e24:	180be6c0 	call	180be6c <__eqdf2>
 1803e28:	103d7126 	beq	r2,zero,18033f0 <__ram_exceptions_end+0xff7f3100>
 1803e2c:	d9c00517 	ldw	r7,20(sp)
 1803e30:	39ffffc4 	addi	r7,r7,-1
 1803e34:	d9c00515 	stw	r7,20(sp)
 1803e38:	003d6d06 	br	18033f0 <__ram_exceptions_end+0xff7f3100>
 1803e3c:	dd400a17 	ldw	r21,40(sp)
 1803e40:	dd000817 	ldw	r20,32(sp)
 1803e44:	0023883a 	mov	r17,zero
 1803e48:	003f4806 	br	1803b6c <__ram_exceptions_end+0xff7f387c>
 1803e4c:	10e3c83a 	sub	r17,r2,r3
 1803e50:	9448983a 	sll	r4,r18,r17
 1803e54:	003d3206 	br	1803320 <__ram_exceptions_end+0xff7f3030>
 1803e58:	d8000e15 	stw	zero,56(sp)
 1803e5c:	003d7506 	br	1803434 <__ram_exceptions_end+0xff7f3144>
 1803e60:	b005883a 	mov	r2,r22
 1803e64:	003f4506 	br	1803b7c <__ram_exceptions_end+0xff7f388c>
 1803e68:	dc000915 	stw	r16,36(sp)
 1803e6c:	d9800a17 	ldw	r6,40(sp)
 1803e70:	d9400917 	ldw	r5,36(sp)
 1803e74:	e009883a 	mov	r4,fp
 1803e78:	18068480 	call	1806848 <__pow5mult>
 1803e7c:	1021883a 	mov	r16,r2
 1803e80:	003f5a06 	br	1803bec <__ram_exceptions_end+0xff7f38fc>
 1803e84:	01c00044 	movi	r7,1
 1803e88:	d9c00b15 	stw	r7,44(sp)
 1803e8c:	d8802217 	ldw	r2,136(sp)
 1803e90:	0081280e 	bge	zero,r2,1804334 <_dtoa_r+0x11b0>
 1803e94:	100d883a 	mov	r6,r2
 1803e98:	1021883a 	mov	r16,r2
 1803e9c:	d8800c15 	stw	r2,48(sp)
 1803ea0:	d8800615 	stw	r2,24(sp)
 1803ea4:	003d8806 	br	18034c8 <__ram_exceptions_end+0xff7f31d8>
 1803ea8:	d8800617 	ldw	r2,24(sp)
 1803eac:	00be9b16 	blt	zero,r2,180391c <__ram_exceptions_end+0xff7f362c>
 1803eb0:	10010f1e 	bne	r2,zero,18042f0 <_dtoa_r+0x116c>
 1803eb4:	880b883a 	mov	r5,r17
 1803eb8:	000d883a 	mov	r6,zero
 1803ebc:	01d00534 	movhi	r7,16404
 1803ec0:	8009883a 	mov	r4,r16
 1803ec4:	180c0c40 	call	180c0c4 <__muldf3>
 1803ec8:	900d883a 	mov	r6,r18
 1803ecc:	980f883a 	mov	r7,r19
 1803ed0:	1009883a 	mov	r4,r2
 1803ed4:	180b883a 	mov	r5,r3
 1803ed8:	180bef40 	call	180bef4 <__gedf2>
 1803edc:	002b883a 	mov	r21,zero
 1803ee0:	0023883a 	mov	r17,zero
 1803ee4:	1000bf16 	blt	r2,zero,18041e4 <_dtoa_r+0x1060>
 1803ee8:	d9802217 	ldw	r6,136(sp)
 1803eec:	ddc00717 	ldw	r23,28(sp)
 1803ef0:	018c303a 	nor	r6,zero,r6
 1803ef4:	d9800515 	stw	r6,20(sp)
 1803ef8:	a80b883a 	mov	r5,r21
 1803efc:	e009883a 	mov	r4,fp
 1803f00:	18062b00 	call	18062b0 <_Bfree>
 1803f04:	883e4926 	beq	r17,zero,180382c <__ram_exceptions_end+0xff7f353c>
 1803f08:	003fad06 	br	1803dc0 <__ram_exceptions_end+0xff7f3ad0>
 1803f0c:	d9c01117 	ldw	r7,68(sp)
 1803f10:	3801bc26 	beq	r7,zero,1804604 <_dtoa_r+0x1480>
 1803f14:	10810cc4 	addi	r2,r2,1075
 1803f18:	dd400a17 	ldw	r21,40(sp)
 1803f1c:	dd000817 	ldw	r20,32(sp)
 1803f20:	003f0a06 	br	1803b4c <__ram_exceptions_end+0xff7f385c>
 1803f24:	00800704 	movi	r2,28
 1803f28:	d9000817 	ldw	r4,32(sp)
 1803f2c:	a0a9883a 	add	r20,r20,r2
 1803f30:	b0ad883a 	add	r22,r22,r2
 1803f34:	2089883a 	add	r4,r4,r2
 1803f38:	d9000815 	stw	r4,32(sp)
 1803f3c:	003f5106 	br	1803c84 <__ram_exceptions_end+0xff7f3994>
 1803f40:	d8c00317 	ldw	r3,12(sp)
 1803f44:	b8c1fc0e 	bge	r23,r3,1804738 <_dtoa_r+0x15b4>
 1803f48:	0027883a 	mov	r19,zero
 1803f4c:	b805883a 	mov	r2,r23
 1803f50:	003f3e06 	br	1803c4c <__ram_exceptions_end+0xff7f395c>
 1803f54:	880b883a 	mov	r5,r17
 1803f58:	e009883a 	mov	r4,fp
 1803f5c:	000f883a 	mov	r7,zero
 1803f60:	01800284 	movi	r6,10
 1803f64:	18062d80 	call	18062d8 <__multadd>
 1803f68:	d9000c17 	ldw	r4,48(sp)
 1803f6c:	1023883a 	mov	r17,r2
 1803f70:	0102040e 	bge	zero,r4,1804784 <_dtoa_r+0x1600>
 1803f74:	d9000615 	stw	r4,24(sp)
 1803f78:	0500050e 	bge	zero,r20,1803f90 <_dtoa_r+0xe0c>
 1803f7c:	880b883a 	mov	r5,r17
 1803f80:	a00d883a 	mov	r6,r20
 1803f84:	e009883a 	mov	r4,fp
 1803f88:	18069880 	call	1806988 <__lshift>
 1803f8c:	1023883a 	mov	r17,r2
 1803f90:	9801241e 	bne	r19,zero,1804424 <_dtoa_r+0x12a0>
 1803f94:	8829883a 	mov	r20,r17
 1803f98:	d9000617 	ldw	r4,24(sp)
 1803f9c:	dcc00717 	ldw	r19,28(sp)
 1803fa0:	9480004c 	andi	r18,r18,1
 1803fa4:	20bfffc4 	addi	r2,r4,-1
 1803fa8:	9885883a 	add	r2,r19,r2
 1803fac:	d8800415 	stw	r2,16(sp)
 1803fb0:	dc800615 	stw	r18,24(sp)
 1803fb4:	a80b883a 	mov	r5,r21
 1803fb8:	8009883a 	mov	r4,r16
 1803fbc:	1802f840 	call	1802f84 <quorem>
 1803fc0:	880b883a 	mov	r5,r17
 1803fc4:	8009883a 	mov	r4,r16
 1803fc8:	102f883a 	mov	r23,r2
 1803fcc:	1806ad00 	call	1806ad0 <__mcmp>
 1803fd0:	a80b883a 	mov	r5,r21
 1803fd4:	a00d883a 	mov	r6,r20
 1803fd8:	e009883a 	mov	r4,fp
 1803fdc:	102d883a 	mov	r22,r2
 1803fe0:	1806b300 	call	1806b30 <__mdiff>
 1803fe4:	1007883a 	mov	r3,r2
 1803fe8:	10800317 	ldw	r2,12(r2)
 1803fec:	bc800c04 	addi	r18,r23,48
 1803ff0:	180b883a 	mov	r5,r3
 1803ff4:	10004e1e 	bne	r2,zero,1804130 <_dtoa_r+0xfac>
 1803ff8:	8009883a 	mov	r4,r16
 1803ffc:	d8c01615 	stw	r3,88(sp)
 1804000:	1806ad00 	call	1806ad0 <__mcmp>
 1804004:	d8c01617 	ldw	r3,88(sp)
 1804008:	e009883a 	mov	r4,fp
 180400c:	d8801615 	stw	r2,88(sp)
 1804010:	180b883a 	mov	r5,r3
 1804014:	18062b00 	call	18062b0 <_Bfree>
 1804018:	d8801617 	ldw	r2,88(sp)
 180401c:	1000041e 	bne	r2,zero,1804030 <_dtoa_r+0xeac>
 1804020:	d9800317 	ldw	r6,12(sp)
 1804024:	3000021e 	bne	r6,zero,1804030 <_dtoa_r+0xeac>
 1804028:	d8c00617 	ldw	r3,24(sp)
 180402c:	18003726 	beq	r3,zero,180410c <_dtoa_r+0xf88>
 1804030:	b0002016 	blt	r22,zero,18040b4 <_dtoa_r+0xf30>
 1804034:	b000041e 	bne	r22,zero,1804048 <_dtoa_r+0xec4>
 1804038:	d9000317 	ldw	r4,12(sp)
 180403c:	2000021e 	bne	r4,zero,1804048 <_dtoa_r+0xec4>
 1804040:	d8c00617 	ldw	r3,24(sp)
 1804044:	18001b26 	beq	r3,zero,18040b4 <_dtoa_r+0xf30>
 1804048:	00810716 	blt	zero,r2,1804468 <_dtoa_r+0x12e4>
 180404c:	d8c00417 	ldw	r3,16(sp)
 1804050:	9d800044 	addi	r22,r19,1
 1804054:	9c800005 	stb	r18,0(r19)
 1804058:	b02f883a 	mov	r23,r22
 180405c:	98c10626 	beq	r19,r3,1804478 <_dtoa_r+0x12f4>
 1804060:	800b883a 	mov	r5,r16
 1804064:	000f883a 	mov	r7,zero
 1804068:	01800284 	movi	r6,10
 180406c:	e009883a 	mov	r4,fp
 1804070:	18062d80 	call	18062d8 <__multadd>
 1804074:	1021883a 	mov	r16,r2
 1804078:	000f883a 	mov	r7,zero
 180407c:	01800284 	movi	r6,10
 1804080:	880b883a 	mov	r5,r17
 1804084:	e009883a 	mov	r4,fp
 1804088:	8d002526 	beq	r17,r20,1804120 <_dtoa_r+0xf9c>
 180408c:	18062d80 	call	18062d8 <__multadd>
 1804090:	a00b883a 	mov	r5,r20
 1804094:	000f883a 	mov	r7,zero
 1804098:	01800284 	movi	r6,10
 180409c:	e009883a 	mov	r4,fp
 18040a0:	1023883a 	mov	r17,r2
 18040a4:	18062d80 	call	18062d8 <__multadd>
 18040a8:	1029883a 	mov	r20,r2
 18040ac:	b027883a 	mov	r19,r22
 18040b0:	003fc006 	br	1803fb4 <__ram_exceptions_end+0xff7f3cc4>
 18040b4:	9011883a 	mov	r8,r18
 18040b8:	00800e0e 	bge	zero,r2,18040f4 <_dtoa_r+0xf70>
 18040bc:	800b883a 	mov	r5,r16
 18040c0:	01800044 	movi	r6,1
 18040c4:	e009883a 	mov	r4,fp
 18040c8:	da001715 	stw	r8,92(sp)
 18040cc:	18069880 	call	1806988 <__lshift>
 18040d0:	a80b883a 	mov	r5,r21
 18040d4:	1009883a 	mov	r4,r2
 18040d8:	1021883a 	mov	r16,r2
 18040dc:	1806ad00 	call	1806ad0 <__mcmp>
 18040e0:	da001717 	ldw	r8,92(sp)
 18040e4:	0081960e 	bge	zero,r2,1804740 <_dtoa_r+0x15bc>
 18040e8:	00800e44 	movi	r2,57
 18040ec:	40817026 	beq	r8,r2,18046b0 <_dtoa_r+0x152c>
 18040f0:	ba000c44 	addi	r8,r23,49
 18040f4:	8825883a 	mov	r18,r17
 18040f8:	9dc00044 	addi	r23,r19,1
 18040fc:	9a000005 	stb	r8,0(r19)
 1804100:	a023883a 	mov	r17,r20
 1804104:	dc000915 	stw	r16,36(sp)
 1804108:	003f2406 	br	1803d9c <__ram_exceptions_end+0xff7f3aac>
 180410c:	00800e44 	movi	r2,57
 1804110:	9011883a 	mov	r8,r18
 1804114:	90816626 	beq	r18,r2,18046b0 <_dtoa_r+0x152c>
 1804118:	05bff516 	blt	zero,r22,18040f0 <__ram_exceptions_end+0xff7f3e00>
 180411c:	003ff506 	br	18040f4 <__ram_exceptions_end+0xff7f3e04>
 1804120:	18062d80 	call	18062d8 <__multadd>
 1804124:	1023883a 	mov	r17,r2
 1804128:	1029883a 	mov	r20,r2
 180412c:	003fdf06 	br	18040ac <__ram_exceptions_end+0xff7f3dbc>
 1804130:	e009883a 	mov	r4,fp
 1804134:	18062b00 	call	18062b0 <_Bfree>
 1804138:	00800044 	movi	r2,1
 180413c:	003fbc06 	br	1804030 <__ram_exceptions_end+0xff7f3d40>
 1804140:	a80b883a 	mov	r5,r21
 1804144:	8009883a 	mov	r4,r16
 1804148:	1806ad00 	call	1806ad0 <__mcmp>
 180414c:	103edb0e 	bge	r2,zero,1803cbc <__ram_exceptions_end+0xff7f39cc>
 1804150:	800b883a 	mov	r5,r16
 1804154:	000f883a 	mov	r7,zero
 1804158:	01800284 	movi	r6,10
 180415c:	e009883a 	mov	r4,fp
 1804160:	18062d80 	call	18062d8 <__multadd>
 1804164:	1021883a 	mov	r16,r2
 1804168:	d8800517 	ldw	r2,20(sp)
 180416c:	d8c00b17 	ldw	r3,44(sp)
 1804170:	10bfffc4 	addi	r2,r2,-1
 1804174:	d8800515 	stw	r2,20(sp)
 1804178:	183f761e 	bne	r3,zero,1803f54 <__ram_exceptions_end+0xff7f3c64>
 180417c:	d9000c17 	ldw	r4,48(sp)
 1804180:	0101730e 	bge	zero,r4,1804750 <_dtoa_r+0x15cc>
 1804184:	d9000615 	stw	r4,24(sp)
 1804188:	003ed006 	br	1803ccc <__ram_exceptions_end+0xff7f39dc>
 180418c:	00800084 	movi	r2,2
 1804190:	3081861e 	bne	r6,r2,18047ac <_dtoa_r+0x1628>
 1804194:	d8000b15 	stw	zero,44(sp)
 1804198:	003f3c06 	br	1803e8c <__ram_exceptions_end+0xff7f3b9c>
 180419c:	dc000917 	ldw	r16,36(sp)
 18041a0:	003e9206 	br	1803bec <__ram_exceptions_end+0xff7f38fc>
 18041a4:	d9c00317 	ldw	r7,12(sp)
 18041a8:	00800084 	movi	r2,2
 18041ac:	11fec50e 	bge	r2,r7,1803cc4 <__ram_exceptions_end+0xff7f39d4>
 18041b0:	d9000617 	ldw	r4,24(sp)
 18041b4:	20013c1e 	bne	r4,zero,18046a8 <_dtoa_r+0x1524>
 18041b8:	a80b883a 	mov	r5,r21
 18041bc:	000f883a 	mov	r7,zero
 18041c0:	01800144 	movi	r6,5
 18041c4:	e009883a 	mov	r4,fp
 18041c8:	18062d80 	call	18062d8 <__multadd>
 18041cc:	100b883a 	mov	r5,r2
 18041d0:	8009883a 	mov	r4,r16
 18041d4:	102b883a 	mov	r21,r2
 18041d8:	1806ad00 	call	1806ad0 <__mcmp>
 18041dc:	dc000915 	stw	r16,36(sp)
 18041e0:	00bf410e 	bge	zero,r2,1803ee8 <__ram_exceptions_end+0xff7f3bf8>
 18041e4:	d9c00717 	ldw	r7,28(sp)
 18041e8:	00800c44 	movi	r2,49
 18041ec:	38800005 	stb	r2,0(r7)
 18041f0:	d8800517 	ldw	r2,20(sp)
 18041f4:	3dc00044 	addi	r23,r7,1
 18041f8:	10800044 	addi	r2,r2,1
 18041fc:	d8800515 	stw	r2,20(sp)
 1804200:	003f3d06 	br	1803ef8 <__ram_exceptions_end+0xff7f3c08>
 1804204:	d9800517 	ldw	r6,20(sp)
 1804208:	d9c00717 	ldw	r7,28(sp)
 180420c:	00800c44 	movi	r2,49
 1804210:	31800044 	addi	r6,r6,1
 1804214:	d9800515 	stw	r6,20(sp)
 1804218:	38800005 	stb	r2,0(r7)
 180421c:	003edf06 	br	1803d9c <__ram_exceptions_end+0xff7f3aac>
 1804220:	d8000b15 	stw	zero,44(sp)
 1804224:	003c9f06 	br	18034a4 <__ram_exceptions_end+0xff7f31b4>
 1804228:	903e7e1e 	bne	r18,zero,1803c24 <__ram_exceptions_end+0xff7f3934>
 180422c:	00800434 	movhi	r2,16
 1804230:	10bfffc4 	addi	r2,r2,-1
 1804234:	9884703a 	and	r2,r19,r2
 1804238:	1000ea1e 	bne	r2,zero,18045e4 <_dtoa_r+0x1460>
 180423c:	9cdffc2c 	andhi	r19,r19,32752
 1804240:	9800e826 	beq	r19,zero,18045e4 <_dtoa_r+0x1460>
 1804244:	d9c00817 	ldw	r7,32(sp)
 1804248:	b5800044 	addi	r22,r22,1
 180424c:	04c00044 	movi	r19,1
 1804250:	39c00044 	addi	r7,r7,1
 1804254:	d9c00815 	stw	r7,32(sp)
 1804258:	d8800d17 	ldw	r2,52(sp)
 180425c:	103e721e 	bne	r2,zero,1803c28 <__ram_exceptions_end+0xff7f3938>
 1804260:	00800044 	movi	r2,1
 1804264:	003e7906 	br	1803c4c <__ram_exceptions_end+0xff7f395c>
 1804268:	8009883a 	mov	r4,r16
 180426c:	180d1580 	call	180d158 <__floatsidf>
 1804270:	d9800f17 	ldw	r6,60(sp)
 1804274:	d9c01017 	ldw	r7,64(sp)
 1804278:	1009883a 	mov	r4,r2
 180427c:	180b883a 	mov	r5,r3
 1804280:	180c0c40 	call	180c0c4 <__muldf3>
 1804284:	000d883a 	mov	r6,zero
 1804288:	01d00734 	movhi	r7,16412
 180428c:	1009883a 	mov	r4,r2
 1804290:	180b883a 	mov	r5,r3
 1804294:	180acd80 	call	180acd8 <__adddf3>
 1804298:	047f3034 	movhi	r17,64704
 180429c:	1021883a 	mov	r16,r2
 18042a0:	1c63883a 	add	r17,r3,r17
 18042a4:	d9000f17 	ldw	r4,60(sp)
 18042a8:	d9401017 	ldw	r5,64(sp)
 18042ac:	000d883a 	mov	r6,zero
 18042b0:	01d00534 	movhi	r7,16404
 18042b4:	180c7dc0 	call	180c7dc <__subdf3>
 18042b8:	800d883a 	mov	r6,r16
 18042bc:	880f883a 	mov	r7,r17
 18042c0:	1009883a 	mov	r4,r2
 18042c4:	180b883a 	mov	r5,r3
 18042c8:	102b883a 	mov	r21,r2
 18042cc:	1829883a 	mov	r20,r3
 18042d0:	180bef40 	call	180bef4 <__gedf2>
 18042d4:	00806c16 	blt	zero,r2,1804488 <_dtoa_r+0x1304>
 18042d8:	89e0003c 	xorhi	r7,r17,32768
 18042dc:	800d883a 	mov	r6,r16
 18042e0:	a809883a 	mov	r4,r21
 18042e4:	a00b883a 	mov	r5,r20
 18042e8:	180bfd00 	call	180bfd0 <__ledf2>
 18042ec:	103d7e0e 	bge	r2,zero,18038e8 <__ram_exceptions_end+0xff7f35f8>
 18042f0:	002b883a 	mov	r21,zero
 18042f4:	0023883a 	mov	r17,zero
 18042f8:	003efb06 	br	1803ee8 <__ram_exceptions_end+0xff7f3bf8>
 18042fc:	d8800717 	ldw	r2,28(sp)
 1804300:	003bd006 	br	1803244 <__ram_exceptions_end+0xff7f2f54>
 1804304:	d9000a17 	ldw	r4,40(sp)
 1804308:	d9800d17 	ldw	r6,52(sp)
 180430c:	dd400a15 	stw	r21,40(sp)
 1804310:	a905c83a 	sub	r2,r21,r4
 1804314:	308d883a 	add	r6,r6,r2
 1804318:	d9800d15 	stw	r6,52(sp)
 180431c:	002b883a 	mov	r21,zero
 1804320:	003e0606 	br	1803b3c <__ram_exceptions_end+0xff7f384c>
 1804324:	9023883a 	mov	r17,r18
 1804328:	9829883a 	mov	r20,r19
 180432c:	04000084 	movi	r16,2
 1804330:	003c9206 	br	180357c <__ram_exceptions_end+0xff7f328c>
 1804334:	04000044 	movi	r16,1
 1804338:	dc000c15 	stw	r16,48(sp)
 180433c:	dc000615 	stw	r16,24(sp)
 1804340:	dc002215 	stw	r16,136(sp)
 1804344:	e0001115 	stw	zero,68(fp)
 1804348:	000b883a 	mov	r5,zero
 180434c:	003c6906 	br	18034f4 <__ram_exceptions_end+0xff7f3204>
 1804350:	3021883a 	mov	r16,r6
 1804354:	003ffb06 	br	1804344 <__ram_exceptions_end+0xff7f4054>
 1804358:	1000021e 	bne	r2,zero,1804364 <_dtoa_r+0x11e0>
 180435c:	4200004c 	andi	r8,r8,1
 1804360:	403e7d1e 	bne	r8,zero,1803d58 <__ram_exceptions_end+0xff7f3a68>
 1804364:	01000c04 	movi	r4,48
 1804368:	00000106 	br	1804370 <_dtoa_r+0x11ec>
 180436c:	102f883a 	mov	r23,r2
 1804370:	b8bfffc4 	addi	r2,r23,-1
 1804374:	10c00007 	ldb	r3,0(r2)
 1804378:	193ffc26 	beq	r3,r4,180436c <__ram_exceptions_end+0xff7f407c>
 180437c:	003e8706 	br	1803d9c <__ram_exceptions_end+0xff7f3aac>
 1804380:	d8800517 	ldw	r2,20(sp)
 1804384:	00a3c83a 	sub	r17,zero,r2
 1804388:	8800a426 	beq	r17,zero,180461c <_dtoa_r+0x1498>
 180438c:	888003cc 	andi	r2,r17,15
 1804390:	100490fa 	slli	r2,r2,3
 1804394:	00c06134 	movhi	r3,388
 1804398:	18c24904 	addi	r3,r3,2340
 180439c:	1885883a 	add	r2,r3,r2
 18043a0:	11800017 	ldw	r6,0(r2)
 18043a4:	11c00117 	ldw	r7,4(r2)
 18043a8:	9009883a 	mov	r4,r18
 18043ac:	980b883a 	mov	r5,r19
 18043b0:	8823d13a 	srai	r17,r17,4
 18043b4:	180c0c40 	call	180c0c4 <__muldf3>
 18043b8:	d8800f15 	stw	r2,60(sp)
 18043bc:	d8c01015 	stw	r3,64(sp)
 18043c0:	8800e826 	beq	r17,zero,1804764 <_dtoa_r+0x15e0>
 18043c4:	05006134 	movhi	r20,388
 18043c8:	a5023f04 	addi	r20,r20,2300
 18043cc:	04000084 	movi	r16,2
 18043d0:	8980004c 	andi	r6,r17,1
 18043d4:	1009883a 	mov	r4,r2
 18043d8:	8823d07a 	srai	r17,r17,1
 18043dc:	180b883a 	mov	r5,r3
 18043e0:	30000426 	beq	r6,zero,18043f4 <_dtoa_r+0x1270>
 18043e4:	a1800017 	ldw	r6,0(r20)
 18043e8:	a1c00117 	ldw	r7,4(r20)
 18043ec:	84000044 	addi	r16,r16,1
 18043f0:	180c0c40 	call	180c0c4 <__muldf3>
 18043f4:	a5000204 	addi	r20,r20,8
 18043f8:	883ff51e 	bne	r17,zero,18043d0 <__ram_exceptions_end+0xff7f40e0>
 18043fc:	d8800f15 	stw	r2,60(sp)
 1804400:	d8c01015 	stw	r3,64(sp)
 1804404:	003c7606 	br	18035e0 <__ram_exceptions_end+0xff7f32f0>
 1804408:	00c00c04 	movi	r3,48
 180440c:	10c00005 	stb	r3,0(r2)
 1804410:	d8c00517 	ldw	r3,20(sp)
 1804414:	bd3fffc3 	ldbu	r20,-1(r23)
 1804418:	18c00044 	addi	r3,r3,1
 180441c:	d8c00515 	stw	r3,20(sp)
 1804420:	003db906 	br	1803b08 <__ram_exceptions_end+0xff7f3818>
 1804424:	89400117 	ldw	r5,4(r17)
 1804428:	e009883a 	mov	r4,fp
 180442c:	18062080 	call	1806208 <_Balloc>
 1804430:	89800417 	ldw	r6,16(r17)
 1804434:	89400304 	addi	r5,r17,12
 1804438:	11000304 	addi	r4,r2,12
 180443c:	31800084 	addi	r6,r6,2
 1804440:	318d883a 	add	r6,r6,r6
 1804444:	318d883a 	add	r6,r6,r6
 1804448:	1027883a 	mov	r19,r2
 180444c:	1805f980 	call	1805f98 <memcpy>
 1804450:	01800044 	movi	r6,1
 1804454:	980b883a 	mov	r5,r19
 1804458:	e009883a 	mov	r4,fp
 180445c:	18069880 	call	1806988 <__lshift>
 1804460:	1029883a 	mov	r20,r2
 1804464:	003ecc06 	br	1803f98 <__ram_exceptions_end+0xff7f3ca8>
 1804468:	00800e44 	movi	r2,57
 180446c:	90809026 	beq	r18,r2,18046b0 <_dtoa_r+0x152c>
 1804470:	92000044 	addi	r8,r18,1
 1804474:	003f1f06 	br	18040f4 <__ram_exceptions_end+0xff7f3e04>
 1804478:	9011883a 	mov	r8,r18
 180447c:	8825883a 	mov	r18,r17
 1804480:	a023883a 	mov	r17,r20
 1804484:	003e2906 	br	1803d2c <__ram_exceptions_end+0xff7f3a3c>
 1804488:	002b883a 	mov	r21,zero
 180448c:	0023883a 	mov	r17,zero
 1804490:	003f5406 	br	18041e4 <__ram_exceptions_end+0xff7f3ef4>
 1804494:	61bfffc4 	addi	r6,r12,-1
 1804498:	300490fa 	slli	r2,r6,3
 180449c:	00c06134 	movhi	r3,388
 18044a0:	18c24904 	addi	r3,r3,2340
 18044a4:	1885883a 	add	r2,r3,r2
 18044a8:	11000017 	ldw	r4,0(r2)
 18044ac:	11400117 	ldw	r5,4(r2)
 18044b0:	d8800717 	ldw	r2,28(sp)
 18044b4:	880f883a 	mov	r7,r17
 18044b8:	d9801215 	stw	r6,72(sp)
 18044bc:	800d883a 	mov	r6,r16
 18044c0:	db001615 	stw	r12,88(sp)
 18044c4:	15c00044 	addi	r23,r2,1
 18044c8:	180c0c40 	call	180c0c4 <__muldf3>
 18044cc:	d9401017 	ldw	r5,64(sp)
 18044d0:	d9000f17 	ldw	r4,60(sp)
 18044d4:	d8c01515 	stw	r3,84(sp)
 18044d8:	d8801415 	stw	r2,80(sp)
 18044dc:	180d0d80 	call	180d0d8 <__fixdfsi>
 18044e0:	1009883a 	mov	r4,r2
 18044e4:	1021883a 	mov	r16,r2
 18044e8:	180d1580 	call	180d158 <__floatsidf>
 18044ec:	d9000f17 	ldw	r4,60(sp)
 18044f0:	d9401017 	ldw	r5,64(sp)
 18044f4:	100d883a 	mov	r6,r2
 18044f8:	180f883a 	mov	r7,r3
 18044fc:	180c7dc0 	call	180c7dc <__subdf3>
 1804500:	1829883a 	mov	r20,r3
 1804504:	d8c00717 	ldw	r3,28(sp)
 1804508:	84000c04 	addi	r16,r16,48
 180450c:	1023883a 	mov	r17,r2
 1804510:	1c000005 	stb	r16,0(r3)
 1804514:	db001617 	ldw	r12,88(sp)
 1804518:	00800044 	movi	r2,1
 180451c:	60802226 	beq	r12,r2,18045a8 <_dtoa_r+0x1424>
 1804520:	d9c00717 	ldw	r7,28(sp)
 1804524:	8805883a 	mov	r2,r17
 1804528:	b82b883a 	mov	r21,r23
 180452c:	3b19883a 	add	r12,r7,r12
 1804530:	6023883a 	mov	r17,r12
 1804534:	a007883a 	mov	r3,r20
 1804538:	dc800f15 	stw	r18,60(sp)
 180453c:	000d883a 	mov	r6,zero
 1804540:	01d00934 	movhi	r7,16420
 1804544:	1009883a 	mov	r4,r2
 1804548:	180b883a 	mov	r5,r3
 180454c:	180c0c40 	call	180c0c4 <__muldf3>
 1804550:	180b883a 	mov	r5,r3
 1804554:	1009883a 	mov	r4,r2
 1804558:	1829883a 	mov	r20,r3
 180455c:	1025883a 	mov	r18,r2
 1804560:	180d0d80 	call	180d0d8 <__fixdfsi>
 1804564:	1009883a 	mov	r4,r2
 1804568:	1021883a 	mov	r16,r2
 180456c:	180d1580 	call	180d158 <__floatsidf>
 1804570:	100d883a 	mov	r6,r2
 1804574:	180f883a 	mov	r7,r3
 1804578:	9009883a 	mov	r4,r18
 180457c:	a00b883a 	mov	r5,r20
 1804580:	84000c04 	addi	r16,r16,48
 1804584:	180c7dc0 	call	180c7dc <__subdf3>
 1804588:	ad400044 	addi	r21,r21,1
 180458c:	ac3fffc5 	stb	r16,-1(r21)
 1804590:	ac7fea1e 	bne	r21,r17,180453c <__ram_exceptions_end+0xff7f424c>
 1804594:	1023883a 	mov	r17,r2
 1804598:	d8801217 	ldw	r2,72(sp)
 180459c:	dc800f17 	ldw	r18,60(sp)
 18045a0:	1829883a 	mov	r20,r3
 18045a4:	b8af883a 	add	r23,r23,r2
 18045a8:	d9001417 	ldw	r4,80(sp)
 18045ac:	d9401517 	ldw	r5,84(sp)
 18045b0:	000d883a 	mov	r6,zero
 18045b4:	01cff834 	movhi	r7,16352
 18045b8:	180acd80 	call	180acd8 <__adddf3>
 18045bc:	880d883a 	mov	r6,r17
 18045c0:	a00f883a 	mov	r7,r20
 18045c4:	1009883a 	mov	r4,r2
 18045c8:	180b883a 	mov	r5,r3
 18045cc:	180bfd00 	call	180bfd0 <__ledf2>
 18045d0:	10003e0e 	bge	r2,zero,18046cc <_dtoa_r+0x1548>
 18045d4:	d9001317 	ldw	r4,76(sp)
 18045d8:	bd3fffc3 	ldbu	r20,-1(r23)
 18045dc:	d9000515 	stw	r4,20(sp)
 18045e0:	003d3b06 	br	1803ad0 <__ram_exceptions_end+0xff7f37e0>
 18045e4:	0027883a 	mov	r19,zero
 18045e8:	003f1b06 	br	1804258 <__ram_exceptions_end+0xff7f3f68>
 18045ec:	d8800817 	ldw	r2,32(sp)
 18045f0:	11e9c83a 	sub	r20,r2,r7
 18045f4:	0005883a 	mov	r2,zero
 18045f8:	003d5406 	br	1803b4c <__ram_exceptions_end+0xff7f385c>
 18045fc:	00800044 	movi	r2,1
 1804600:	003dc706 	br	1803d20 <__ram_exceptions_end+0xff7f3a30>
 1804604:	d8c00217 	ldw	r3,8(sp)
 1804608:	00800d84 	movi	r2,54
 180460c:	dd400a17 	ldw	r21,40(sp)
 1804610:	10c5c83a 	sub	r2,r2,r3
 1804614:	dd000817 	ldw	r20,32(sp)
 1804618:	003d4c06 	br	1803b4c <__ram_exceptions_end+0xff7f385c>
 180461c:	dc800f15 	stw	r18,60(sp)
 1804620:	dcc01015 	stw	r19,64(sp)
 1804624:	04000084 	movi	r16,2
 1804628:	003bed06 	br	18035e0 <__ram_exceptions_end+0xff7f32f0>
 180462c:	d9000617 	ldw	r4,24(sp)
 1804630:	203f0d26 	beq	r4,zero,1804268 <__ram_exceptions_end+0xff7f3f78>
 1804634:	d9800c17 	ldw	r6,48(sp)
 1804638:	01bcab0e 	bge	zero,r6,18038e8 <__ram_exceptions_end+0xff7f35f8>
 180463c:	d9401017 	ldw	r5,64(sp)
 1804640:	d9000f17 	ldw	r4,60(sp)
 1804644:	000d883a 	mov	r6,zero
 1804648:	01d00934 	movhi	r7,16420
 180464c:	180c0c40 	call	180c0c4 <__muldf3>
 1804650:	81000044 	addi	r4,r16,1
 1804654:	d8800f15 	stw	r2,60(sp)
 1804658:	d8c01015 	stw	r3,64(sp)
 180465c:	180d1580 	call	180d158 <__floatsidf>
 1804660:	d9800f17 	ldw	r6,60(sp)
 1804664:	d9c01017 	ldw	r7,64(sp)
 1804668:	1009883a 	mov	r4,r2
 180466c:	180b883a 	mov	r5,r3
 1804670:	180c0c40 	call	180c0c4 <__muldf3>
 1804674:	01d00734 	movhi	r7,16412
 1804678:	000d883a 	mov	r6,zero
 180467c:	1009883a 	mov	r4,r2
 1804680:	180b883a 	mov	r5,r3
 1804684:	180acd80 	call	180acd8 <__adddf3>
 1804688:	d9c00517 	ldw	r7,20(sp)
 180468c:	047f3034 	movhi	r17,64704
 1804690:	1021883a 	mov	r16,r2
 1804694:	39ffffc4 	addi	r7,r7,-1
 1804698:	d9c01315 	stw	r7,76(sp)
 180469c:	1c63883a 	add	r17,r3,r17
 18046a0:	db000c17 	ldw	r12,48(sp)
 18046a4:	003bea06 	br	1803650 <__ram_exceptions_end+0xff7f3360>
 18046a8:	dc000915 	stw	r16,36(sp)
 18046ac:	003e0e06 	br	1803ee8 <__ram_exceptions_end+0xff7f3bf8>
 18046b0:	01000e44 	movi	r4,57
 18046b4:	8825883a 	mov	r18,r17
 18046b8:	9dc00044 	addi	r23,r19,1
 18046bc:	99000005 	stb	r4,0(r19)
 18046c0:	a023883a 	mov	r17,r20
 18046c4:	dc000915 	stw	r16,36(sp)
 18046c8:	003da406 	br	1803d5c <__ram_exceptions_end+0xff7f3a6c>
 18046cc:	d9801417 	ldw	r6,80(sp)
 18046d0:	d9c01517 	ldw	r7,84(sp)
 18046d4:	0009883a 	mov	r4,zero
 18046d8:	014ff834 	movhi	r5,16352
 18046dc:	180c7dc0 	call	180c7dc <__subdf3>
 18046e0:	880d883a 	mov	r6,r17
 18046e4:	a00f883a 	mov	r7,r20
 18046e8:	1009883a 	mov	r4,r2
 18046ec:	180b883a 	mov	r5,r3
 18046f0:	180bef40 	call	180bef4 <__gedf2>
 18046f4:	00bc7c0e 	bge	zero,r2,18038e8 <__ram_exceptions_end+0xff7f35f8>
 18046f8:	01000c04 	movi	r4,48
 18046fc:	00000106 	br	1804704 <_dtoa_r+0x1580>
 1804700:	102f883a 	mov	r23,r2
 1804704:	b8bfffc4 	addi	r2,r23,-1
 1804708:	10c00007 	ldb	r3,0(r2)
 180470c:	193ffc26 	beq	r3,r4,1804700 <__ram_exceptions_end+0xff7f4410>
 1804710:	d9801317 	ldw	r6,76(sp)
 1804714:	d9800515 	stw	r6,20(sp)
 1804718:	003c4406 	br	180382c <__ram_exceptions_end+0xff7f353c>
 180471c:	d9801317 	ldw	r6,76(sp)
 1804720:	d9800515 	stw	r6,20(sp)
 1804724:	003cea06 	br	1803ad0 <__ram_exceptions_end+0xff7f37e0>
 1804728:	dd800f17 	ldw	r22,60(sp)
 180472c:	dcc01017 	ldw	r19,64(sp)
 1804730:	dc801217 	ldw	r18,72(sp)
 1804734:	003c6c06 	br	18038e8 <__ram_exceptions_end+0xff7f35f8>
 1804738:	903e031e 	bne	r18,zero,1803f48 <__ram_exceptions_end+0xff7f3c58>
 180473c:	003ebb06 	br	180422c <__ram_exceptions_end+0xff7f3f3c>
 1804740:	103e6c1e 	bne	r2,zero,18040f4 <__ram_exceptions_end+0xff7f3e04>
 1804744:	4080004c 	andi	r2,r8,1
 1804748:	103e6a26 	beq	r2,zero,18040f4 <__ram_exceptions_end+0xff7f3e04>
 180474c:	003e6606 	br	18040e8 <__ram_exceptions_end+0xff7f3df8>
 1804750:	d8c00317 	ldw	r3,12(sp)
 1804754:	00800084 	movi	r2,2
 1804758:	10c02916 	blt	r2,r3,1804800 <_dtoa_r+0x167c>
 180475c:	d9000c17 	ldw	r4,48(sp)
 1804760:	003e8806 	br	1804184 <__ram_exceptions_end+0xff7f3e94>
 1804764:	04000084 	movi	r16,2
 1804768:	003b9d06 	br	18035e0 <__ram_exceptions_end+0xff7f32f0>
 180476c:	d9001317 	ldw	r4,76(sp)
 1804770:	d9000515 	stw	r4,20(sp)
 1804774:	003cd606 	br	1803ad0 <__ram_exceptions_end+0xff7f37e0>
 1804778:	d8801317 	ldw	r2,76(sp)
 180477c:	d8800515 	stw	r2,20(sp)
 1804780:	003c2a06 	br	180382c <__ram_exceptions_end+0xff7f353c>
 1804784:	d9800317 	ldw	r6,12(sp)
 1804788:	00800084 	movi	r2,2
 180478c:	11801516 	blt	r2,r6,18047e4 <_dtoa_r+0x1660>
 1804790:	d9c00c17 	ldw	r7,48(sp)
 1804794:	d9c00615 	stw	r7,24(sp)
 1804798:	003df706 	br	1803f78 <__ram_exceptions_end+0xff7f3c88>
 180479c:	193d3926 	beq	r3,r4,1803c84 <__ram_exceptions_end+0xff7f3994>
 18047a0:	00c00f04 	movi	r3,60
 18047a4:	1885c83a 	sub	r2,r3,r2
 18047a8:	003ddf06 	br	1803f28 <__ram_exceptions_end+0xff7f3c38>
 18047ac:	e009883a 	mov	r4,fp
 18047b0:	e0001115 	stw	zero,68(fp)
 18047b4:	000b883a 	mov	r5,zero
 18047b8:	18062080 	call	1806208 <_Balloc>
 18047bc:	d8800715 	stw	r2,28(sp)
 18047c0:	d8c00717 	ldw	r3,28(sp)
 18047c4:	00bfffc4 	movi	r2,-1
 18047c8:	01000044 	movi	r4,1
 18047cc:	d8800c15 	stw	r2,48(sp)
 18047d0:	e0c01015 	stw	r3,64(fp)
 18047d4:	d9000b15 	stw	r4,44(sp)
 18047d8:	d8800615 	stw	r2,24(sp)
 18047dc:	d8002215 	stw	zero,136(sp)
 18047e0:	003c4106 	br	18038e8 <__ram_exceptions_end+0xff7f35f8>
 18047e4:	d8c00c17 	ldw	r3,48(sp)
 18047e8:	d8c00615 	stw	r3,24(sp)
 18047ec:	003e7006 	br	18041b0 <__ram_exceptions_end+0xff7f3ec0>
 18047f0:	04400044 	movi	r17,1
 18047f4:	003b2006 	br	1803478 <__ram_exceptions_end+0xff7f3188>
 18047f8:	000b883a 	mov	r5,zero
 18047fc:	003b3d06 	br	18034f4 <__ram_exceptions_end+0xff7f3204>
 1804800:	d8800c17 	ldw	r2,48(sp)
 1804804:	d8800615 	stw	r2,24(sp)
 1804808:	003e6906 	br	18041b0 <__ram_exceptions_end+0xff7f3ec0>

0180480c <__sflush_r>:
 180480c:	2880030b 	ldhu	r2,12(r5)
 1804810:	defffb04 	addi	sp,sp,-20
 1804814:	dcc00315 	stw	r19,12(sp)
 1804818:	dc400115 	stw	r17,4(sp)
 180481c:	dfc00415 	stw	ra,16(sp)
 1804820:	dc800215 	stw	r18,8(sp)
 1804824:	dc000015 	stw	r16,0(sp)
 1804828:	10c0020c 	andi	r3,r2,8
 180482c:	2823883a 	mov	r17,r5
 1804830:	2027883a 	mov	r19,r4
 1804834:	1800311e 	bne	r3,zero,18048fc <__sflush_r+0xf0>
 1804838:	28c00117 	ldw	r3,4(r5)
 180483c:	10820014 	ori	r2,r2,2048
 1804840:	2880030d 	sth	r2,12(r5)
 1804844:	00c04b0e 	bge	zero,r3,1804974 <__sflush_r+0x168>
 1804848:	8a000a17 	ldw	r8,40(r17)
 180484c:	40002326 	beq	r8,zero,18048dc <__sflush_r+0xd0>
 1804850:	9c000017 	ldw	r16,0(r19)
 1804854:	10c4000c 	andi	r3,r2,4096
 1804858:	98000015 	stw	zero,0(r19)
 180485c:	18004826 	beq	r3,zero,1804980 <__sflush_r+0x174>
 1804860:	89801417 	ldw	r6,80(r17)
 1804864:	10c0010c 	andi	r3,r2,4
 1804868:	18000626 	beq	r3,zero,1804884 <__sflush_r+0x78>
 180486c:	88c00117 	ldw	r3,4(r17)
 1804870:	88800c17 	ldw	r2,48(r17)
 1804874:	30cdc83a 	sub	r6,r6,r3
 1804878:	10000226 	beq	r2,zero,1804884 <__sflush_r+0x78>
 180487c:	88800f17 	ldw	r2,60(r17)
 1804880:	308dc83a 	sub	r6,r6,r2
 1804884:	89400717 	ldw	r5,28(r17)
 1804888:	000f883a 	mov	r7,zero
 180488c:	9809883a 	mov	r4,r19
 1804890:	403ee83a 	callr	r8
 1804894:	00ffffc4 	movi	r3,-1
 1804898:	10c04426 	beq	r2,r3,18049ac <__sflush_r+0x1a0>
 180489c:	88c0030b 	ldhu	r3,12(r17)
 18048a0:	89000417 	ldw	r4,16(r17)
 18048a4:	88000115 	stw	zero,4(r17)
 18048a8:	197dffcc 	andi	r5,r3,63487
 18048ac:	8940030d 	sth	r5,12(r17)
 18048b0:	89000015 	stw	r4,0(r17)
 18048b4:	18c4000c 	andi	r3,r3,4096
 18048b8:	18002c1e 	bne	r3,zero,180496c <__sflush_r+0x160>
 18048bc:	89400c17 	ldw	r5,48(r17)
 18048c0:	9c000015 	stw	r16,0(r19)
 18048c4:	28000526 	beq	r5,zero,18048dc <__sflush_r+0xd0>
 18048c8:	88801004 	addi	r2,r17,64
 18048cc:	28800226 	beq	r5,r2,18048d8 <__sflush_r+0xcc>
 18048d0:	9809883a 	mov	r4,r19
 18048d4:	1804f780 	call	1804f78 <_free_r>
 18048d8:	88000c15 	stw	zero,48(r17)
 18048dc:	0005883a 	mov	r2,zero
 18048e0:	dfc00417 	ldw	ra,16(sp)
 18048e4:	dcc00317 	ldw	r19,12(sp)
 18048e8:	dc800217 	ldw	r18,8(sp)
 18048ec:	dc400117 	ldw	r17,4(sp)
 18048f0:	dc000017 	ldw	r16,0(sp)
 18048f4:	dec00504 	addi	sp,sp,20
 18048f8:	f800283a 	ret
 18048fc:	2c800417 	ldw	r18,16(r5)
 1804900:	903ff626 	beq	r18,zero,18048dc <__ram_exceptions_end+0xff7f45ec>
 1804904:	2c000017 	ldw	r16,0(r5)
 1804908:	108000cc 	andi	r2,r2,3
 180490c:	2c800015 	stw	r18,0(r5)
 1804910:	84a1c83a 	sub	r16,r16,r18
 1804914:	1000131e 	bne	r2,zero,1804964 <__sflush_r+0x158>
 1804918:	28800517 	ldw	r2,20(r5)
 180491c:	88800215 	stw	r2,8(r17)
 1804920:	04000316 	blt	zero,r16,1804930 <__sflush_r+0x124>
 1804924:	003fed06 	br	18048dc <__ram_exceptions_end+0xff7f45ec>
 1804928:	90a5883a 	add	r18,r18,r2
 180492c:	043feb0e 	bge	zero,r16,18048dc <__ram_exceptions_end+0xff7f45ec>
 1804930:	88800917 	ldw	r2,36(r17)
 1804934:	89400717 	ldw	r5,28(r17)
 1804938:	800f883a 	mov	r7,r16
 180493c:	900d883a 	mov	r6,r18
 1804940:	9809883a 	mov	r4,r19
 1804944:	103ee83a 	callr	r2
 1804948:	80a1c83a 	sub	r16,r16,r2
 180494c:	00bff616 	blt	zero,r2,1804928 <__ram_exceptions_end+0xff7f4638>
 1804950:	88c0030b 	ldhu	r3,12(r17)
 1804954:	00bfffc4 	movi	r2,-1
 1804958:	18c01014 	ori	r3,r3,64
 180495c:	88c0030d 	sth	r3,12(r17)
 1804960:	003fdf06 	br	18048e0 <__ram_exceptions_end+0xff7f45f0>
 1804964:	0005883a 	mov	r2,zero
 1804968:	003fec06 	br	180491c <__ram_exceptions_end+0xff7f462c>
 180496c:	88801415 	stw	r2,80(r17)
 1804970:	003fd206 	br	18048bc <__ram_exceptions_end+0xff7f45cc>
 1804974:	28c00f17 	ldw	r3,60(r5)
 1804978:	00ffb316 	blt	zero,r3,1804848 <__ram_exceptions_end+0xff7f4558>
 180497c:	003fd706 	br	18048dc <__ram_exceptions_end+0xff7f45ec>
 1804980:	89400717 	ldw	r5,28(r17)
 1804984:	000d883a 	mov	r6,zero
 1804988:	01c00044 	movi	r7,1
 180498c:	9809883a 	mov	r4,r19
 1804990:	403ee83a 	callr	r8
 1804994:	100d883a 	mov	r6,r2
 1804998:	00bfffc4 	movi	r2,-1
 180499c:	30801426 	beq	r6,r2,18049f0 <__sflush_r+0x1e4>
 18049a0:	8880030b 	ldhu	r2,12(r17)
 18049a4:	8a000a17 	ldw	r8,40(r17)
 18049a8:	003fae06 	br	1804864 <__ram_exceptions_end+0xff7f4574>
 18049ac:	98c00017 	ldw	r3,0(r19)
 18049b0:	183fba26 	beq	r3,zero,180489c <__ram_exceptions_end+0xff7f45ac>
 18049b4:	01000744 	movi	r4,29
 18049b8:	19000626 	beq	r3,r4,18049d4 <__sflush_r+0x1c8>
 18049bc:	01000584 	movi	r4,22
 18049c0:	19000426 	beq	r3,r4,18049d4 <__sflush_r+0x1c8>
 18049c4:	88c0030b 	ldhu	r3,12(r17)
 18049c8:	18c01014 	ori	r3,r3,64
 18049cc:	88c0030d 	sth	r3,12(r17)
 18049d0:	003fc306 	br	18048e0 <__ram_exceptions_end+0xff7f45f0>
 18049d4:	8880030b 	ldhu	r2,12(r17)
 18049d8:	88c00417 	ldw	r3,16(r17)
 18049dc:	88000115 	stw	zero,4(r17)
 18049e0:	10bdffcc 	andi	r2,r2,63487
 18049e4:	8880030d 	sth	r2,12(r17)
 18049e8:	88c00015 	stw	r3,0(r17)
 18049ec:	003fb306 	br	18048bc <__ram_exceptions_end+0xff7f45cc>
 18049f0:	98800017 	ldw	r2,0(r19)
 18049f4:	103fea26 	beq	r2,zero,18049a0 <__ram_exceptions_end+0xff7f46b0>
 18049f8:	00c00744 	movi	r3,29
 18049fc:	10c00226 	beq	r2,r3,1804a08 <__sflush_r+0x1fc>
 1804a00:	00c00584 	movi	r3,22
 1804a04:	10c0031e 	bne	r2,r3,1804a14 <__sflush_r+0x208>
 1804a08:	9c000015 	stw	r16,0(r19)
 1804a0c:	0005883a 	mov	r2,zero
 1804a10:	003fb306 	br	18048e0 <__ram_exceptions_end+0xff7f45f0>
 1804a14:	88c0030b 	ldhu	r3,12(r17)
 1804a18:	3005883a 	mov	r2,r6
 1804a1c:	18c01014 	ori	r3,r3,64
 1804a20:	88c0030d 	sth	r3,12(r17)
 1804a24:	003fae06 	br	18048e0 <__ram_exceptions_end+0xff7f45f0>

01804a28 <_fflush_r>:
 1804a28:	defffd04 	addi	sp,sp,-12
 1804a2c:	dc000115 	stw	r16,4(sp)
 1804a30:	dfc00215 	stw	ra,8(sp)
 1804a34:	2021883a 	mov	r16,r4
 1804a38:	20000226 	beq	r4,zero,1804a44 <_fflush_r+0x1c>
 1804a3c:	20800e17 	ldw	r2,56(r4)
 1804a40:	10000c26 	beq	r2,zero,1804a74 <_fflush_r+0x4c>
 1804a44:	2880030f 	ldh	r2,12(r5)
 1804a48:	1000051e 	bne	r2,zero,1804a60 <_fflush_r+0x38>
 1804a4c:	0005883a 	mov	r2,zero
 1804a50:	dfc00217 	ldw	ra,8(sp)
 1804a54:	dc000117 	ldw	r16,4(sp)
 1804a58:	dec00304 	addi	sp,sp,12
 1804a5c:	f800283a 	ret
 1804a60:	8009883a 	mov	r4,r16
 1804a64:	dfc00217 	ldw	ra,8(sp)
 1804a68:	dc000117 	ldw	r16,4(sp)
 1804a6c:	dec00304 	addi	sp,sp,12
 1804a70:	180480c1 	jmpi	180480c <__sflush_r>
 1804a74:	d9400015 	stw	r5,0(sp)
 1804a78:	1804e040 	call	1804e04 <__sinit>
 1804a7c:	d9400017 	ldw	r5,0(sp)
 1804a80:	003ff006 	br	1804a44 <__ram_exceptions_end+0xff7f4754>

01804a84 <fflush>:
 1804a84:	20000526 	beq	r4,zero,1804a9c <fflush+0x18>
 1804a88:	00806134 	movhi	r2,388
 1804a8c:	10946904 	addi	r2,r2,20900
 1804a90:	200b883a 	mov	r5,r4
 1804a94:	11000017 	ldw	r4,0(r2)
 1804a98:	1804a281 	jmpi	1804a28 <_fflush_r>
 1804a9c:	00806134 	movhi	r2,388
 1804aa0:	10946804 	addi	r2,r2,20896
 1804aa4:	11000017 	ldw	r4,0(r2)
 1804aa8:	01406034 	movhi	r5,384
 1804aac:	29528a04 	addi	r5,r5,18984
 1804ab0:	180534c1 	jmpi	180534c <_fwalk_reent>

01804ab4 <__fp_unlock>:
 1804ab4:	0005883a 	mov	r2,zero
 1804ab8:	f800283a 	ret

01804abc <_cleanup_r>:
 1804abc:	01406074 	movhi	r5,385
 1804ac0:	29634f04 	addi	r5,r5,-29380
 1804ac4:	180534c1 	jmpi	180534c <_fwalk_reent>

01804ac8 <__sinit.part.1>:
 1804ac8:	defff704 	addi	sp,sp,-36
 1804acc:	00c06034 	movhi	r3,384
 1804ad0:	dfc00815 	stw	ra,32(sp)
 1804ad4:	ddc00715 	stw	r23,28(sp)
 1804ad8:	dd800615 	stw	r22,24(sp)
 1804adc:	dd400515 	stw	r21,20(sp)
 1804ae0:	dd000415 	stw	r20,16(sp)
 1804ae4:	dcc00315 	stw	r19,12(sp)
 1804ae8:	dc800215 	stw	r18,8(sp)
 1804aec:	dc400115 	stw	r17,4(sp)
 1804af0:	dc000015 	stw	r16,0(sp)
 1804af4:	18d2af04 	addi	r3,r3,19132
 1804af8:	24000117 	ldw	r16,4(r4)
 1804afc:	20c00f15 	stw	r3,60(r4)
 1804b00:	2080bb04 	addi	r2,r4,748
 1804b04:	00c000c4 	movi	r3,3
 1804b08:	20c0b915 	stw	r3,740(r4)
 1804b0c:	2080ba15 	stw	r2,744(r4)
 1804b10:	2000b815 	stw	zero,736(r4)
 1804b14:	05c00204 	movi	r23,8
 1804b18:	00800104 	movi	r2,4
 1804b1c:	2025883a 	mov	r18,r4
 1804b20:	b80d883a 	mov	r6,r23
 1804b24:	81001704 	addi	r4,r16,92
 1804b28:	000b883a 	mov	r5,zero
 1804b2c:	80000015 	stw	zero,0(r16)
 1804b30:	80000115 	stw	zero,4(r16)
 1804b34:	80000215 	stw	zero,8(r16)
 1804b38:	8080030d 	sth	r2,12(r16)
 1804b3c:	80001915 	stw	zero,100(r16)
 1804b40:	8000038d 	sth	zero,14(r16)
 1804b44:	80000415 	stw	zero,16(r16)
 1804b48:	80000515 	stw	zero,20(r16)
 1804b4c:	80000615 	stw	zero,24(r16)
 1804b50:	18060e00 	call	18060e0 <memset>
 1804b54:	05806034 	movhi	r22,384
 1804b58:	94400217 	ldw	r17,8(r18)
 1804b5c:	05406034 	movhi	r21,384
 1804b60:	05006034 	movhi	r20,384
 1804b64:	04c06034 	movhi	r19,384
 1804b68:	b59cb304 	addi	r22,r22,29388
 1804b6c:	ad5cca04 	addi	r21,r21,29480
 1804b70:	a51ce904 	addi	r20,r20,29604
 1804b74:	9cdd0004 	addi	r19,r19,29696
 1804b78:	85800815 	stw	r22,32(r16)
 1804b7c:	85400915 	stw	r21,36(r16)
 1804b80:	85000a15 	stw	r20,40(r16)
 1804b84:	84c00b15 	stw	r19,44(r16)
 1804b88:	84000715 	stw	r16,28(r16)
 1804b8c:	00800284 	movi	r2,10
 1804b90:	8880030d 	sth	r2,12(r17)
 1804b94:	00800044 	movi	r2,1
 1804b98:	b80d883a 	mov	r6,r23
 1804b9c:	89001704 	addi	r4,r17,92
 1804ba0:	000b883a 	mov	r5,zero
 1804ba4:	88000015 	stw	zero,0(r17)
 1804ba8:	88000115 	stw	zero,4(r17)
 1804bac:	88000215 	stw	zero,8(r17)
 1804bb0:	88001915 	stw	zero,100(r17)
 1804bb4:	8880038d 	sth	r2,14(r17)
 1804bb8:	88000415 	stw	zero,16(r17)
 1804bbc:	88000515 	stw	zero,20(r17)
 1804bc0:	88000615 	stw	zero,24(r17)
 1804bc4:	18060e00 	call	18060e0 <memset>
 1804bc8:	94000317 	ldw	r16,12(r18)
 1804bcc:	00800484 	movi	r2,18
 1804bd0:	8c400715 	stw	r17,28(r17)
 1804bd4:	8d800815 	stw	r22,32(r17)
 1804bd8:	8d400915 	stw	r21,36(r17)
 1804bdc:	8d000a15 	stw	r20,40(r17)
 1804be0:	8cc00b15 	stw	r19,44(r17)
 1804be4:	8080030d 	sth	r2,12(r16)
 1804be8:	00800084 	movi	r2,2
 1804bec:	80000015 	stw	zero,0(r16)
 1804bf0:	80000115 	stw	zero,4(r16)
 1804bf4:	80000215 	stw	zero,8(r16)
 1804bf8:	80001915 	stw	zero,100(r16)
 1804bfc:	8080038d 	sth	r2,14(r16)
 1804c00:	80000415 	stw	zero,16(r16)
 1804c04:	80000515 	stw	zero,20(r16)
 1804c08:	80000615 	stw	zero,24(r16)
 1804c0c:	b80d883a 	mov	r6,r23
 1804c10:	000b883a 	mov	r5,zero
 1804c14:	81001704 	addi	r4,r16,92
 1804c18:	18060e00 	call	18060e0 <memset>
 1804c1c:	00800044 	movi	r2,1
 1804c20:	84000715 	stw	r16,28(r16)
 1804c24:	85800815 	stw	r22,32(r16)
 1804c28:	85400915 	stw	r21,36(r16)
 1804c2c:	85000a15 	stw	r20,40(r16)
 1804c30:	84c00b15 	stw	r19,44(r16)
 1804c34:	90800e15 	stw	r2,56(r18)
 1804c38:	dfc00817 	ldw	ra,32(sp)
 1804c3c:	ddc00717 	ldw	r23,28(sp)
 1804c40:	dd800617 	ldw	r22,24(sp)
 1804c44:	dd400517 	ldw	r21,20(sp)
 1804c48:	dd000417 	ldw	r20,16(sp)
 1804c4c:	dcc00317 	ldw	r19,12(sp)
 1804c50:	dc800217 	ldw	r18,8(sp)
 1804c54:	dc400117 	ldw	r17,4(sp)
 1804c58:	dc000017 	ldw	r16,0(sp)
 1804c5c:	dec00904 	addi	sp,sp,36
 1804c60:	f800283a 	ret

01804c64 <__fp_lock>:
 1804c64:	0005883a 	mov	r2,zero
 1804c68:	f800283a 	ret

01804c6c <__sfmoreglue>:
 1804c6c:	defffc04 	addi	sp,sp,-16
 1804c70:	dc400115 	stw	r17,4(sp)
 1804c74:	2c7fffc4 	addi	r17,r5,-1
 1804c78:	8c401a24 	muli	r17,r17,104
 1804c7c:	dc800215 	stw	r18,8(sp)
 1804c80:	2825883a 	mov	r18,r5
 1804c84:	89401d04 	addi	r5,r17,116
 1804c88:	dc000015 	stw	r16,0(sp)
 1804c8c:	dfc00315 	stw	ra,12(sp)
 1804c90:	18056a80 	call	18056a8 <_malloc_r>
 1804c94:	1021883a 	mov	r16,r2
 1804c98:	10000726 	beq	r2,zero,1804cb8 <__sfmoreglue+0x4c>
 1804c9c:	11000304 	addi	r4,r2,12
 1804ca0:	10000015 	stw	zero,0(r2)
 1804ca4:	14800115 	stw	r18,4(r2)
 1804ca8:	11000215 	stw	r4,8(r2)
 1804cac:	89801a04 	addi	r6,r17,104
 1804cb0:	000b883a 	mov	r5,zero
 1804cb4:	18060e00 	call	18060e0 <memset>
 1804cb8:	8005883a 	mov	r2,r16
 1804cbc:	dfc00317 	ldw	ra,12(sp)
 1804cc0:	dc800217 	ldw	r18,8(sp)
 1804cc4:	dc400117 	ldw	r17,4(sp)
 1804cc8:	dc000017 	ldw	r16,0(sp)
 1804ccc:	dec00404 	addi	sp,sp,16
 1804cd0:	f800283a 	ret

01804cd4 <__sfp>:
 1804cd4:	defffb04 	addi	sp,sp,-20
 1804cd8:	dc000015 	stw	r16,0(sp)
 1804cdc:	04006134 	movhi	r16,388
 1804ce0:	84146804 	addi	r16,r16,20896
 1804ce4:	dcc00315 	stw	r19,12(sp)
 1804ce8:	2027883a 	mov	r19,r4
 1804cec:	81000017 	ldw	r4,0(r16)
 1804cf0:	dfc00415 	stw	ra,16(sp)
 1804cf4:	dc800215 	stw	r18,8(sp)
 1804cf8:	20800e17 	ldw	r2,56(r4)
 1804cfc:	dc400115 	stw	r17,4(sp)
 1804d00:	1000021e 	bne	r2,zero,1804d0c <__sfp+0x38>
 1804d04:	1804ac80 	call	1804ac8 <__sinit.part.1>
 1804d08:	81000017 	ldw	r4,0(r16)
 1804d0c:	2480b804 	addi	r18,r4,736
 1804d10:	047fffc4 	movi	r17,-1
 1804d14:	91000117 	ldw	r4,4(r18)
 1804d18:	94000217 	ldw	r16,8(r18)
 1804d1c:	213fffc4 	addi	r4,r4,-1
 1804d20:	20000a16 	blt	r4,zero,1804d4c <__sfp+0x78>
 1804d24:	8080030f 	ldh	r2,12(r16)
 1804d28:	10000c26 	beq	r2,zero,1804d5c <__sfp+0x88>
 1804d2c:	80c01d04 	addi	r3,r16,116
 1804d30:	00000206 	br	1804d3c <__sfp+0x68>
 1804d34:	18bfe60f 	ldh	r2,-104(r3)
 1804d38:	10000826 	beq	r2,zero,1804d5c <__sfp+0x88>
 1804d3c:	213fffc4 	addi	r4,r4,-1
 1804d40:	1c3ffd04 	addi	r16,r3,-12
 1804d44:	18c01a04 	addi	r3,r3,104
 1804d48:	247ffa1e 	bne	r4,r17,1804d34 <__ram_exceptions_end+0xff7f4a44>
 1804d4c:	90800017 	ldw	r2,0(r18)
 1804d50:	10001d26 	beq	r2,zero,1804dc8 <__sfp+0xf4>
 1804d54:	1025883a 	mov	r18,r2
 1804d58:	003fee06 	br	1804d14 <__ram_exceptions_end+0xff7f4a24>
 1804d5c:	00bfffc4 	movi	r2,-1
 1804d60:	8080038d 	sth	r2,14(r16)
 1804d64:	00800044 	movi	r2,1
 1804d68:	8080030d 	sth	r2,12(r16)
 1804d6c:	80001915 	stw	zero,100(r16)
 1804d70:	80000015 	stw	zero,0(r16)
 1804d74:	80000215 	stw	zero,8(r16)
 1804d78:	80000115 	stw	zero,4(r16)
 1804d7c:	80000415 	stw	zero,16(r16)
 1804d80:	80000515 	stw	zero,20(r16)
 1804d84:	80000615 	stw	zero,24(r16)
 1804d88:	01800204 	movi	r6,8
 1804d8c:	000b883a 	mov	r5,zero
 1804d90:	81001704 	addi	r4,r16,92
 1804d94:	18060e00 	call	18060e0 <memset>
 1804d98:	8005883a 	mov	r2,r16
 1804d9c:	80000c15 	stw	zero,48(r16)
 1804da0:	80000d15 	stw	zero,52(r16)
 1804da4:	80001115 	stw	zero,68(r16)
 1804da8:	80001215 	stw	zero,72(r16)
 1804dac:	dfc00417 	ldw	ra,16(sp)
 1804db0:	dcc00317 	ldw	r19,12(sp)
 1804db4:	dc800217 	ldw	r18,8(sp)
 1804db8:	dc400117 	ldw	r17,4(sp)
 1804dbc:	dc000017 	ldw	r16,0(sp)
 1804dc0:	dec00504 	addi	sp,sp,20
 1804dc4:	f800283a 	ret
 1804dc8:	01400104 	movi	r5,4
 1804dcc:	9809883a 	mov	r4,r19
 1804dd0:	1804c6c0 	call	1804c6c <__sfmoreglue>
 1804dd4:	90800015 	stw	r2,0(r18)
 1804dd8:	103fde1e 	bne	r2,zero,1804d54 <__ram_exceptions_end+0xff7f4a64>
 1804ddc:	00800304 	movi	r2,12
 1804de0:	98800015 	stw	r2,0(r19)
 1804de4:	0005883a 	mov	r2,zero
 1804de8:	003ff006 	br	1804dac <__ram_exceptions_end+0xff7f4abc>

01804dec <_cleanup>:
 1804dec:	00806134 	movhi	r2,388
 1804df0:	10946804 	addi	r2,r2,20896
 1804df4:	11000017 	ldw	r4,0(r2)
 1804df8:	01406074 	movhi	r5,385
 1804dfc:	29634f04 	addi	r5,r5,-29380
 1804e00:	180534c1 	jmpi	180534c <_fwalk_reent>

01804e04 <__sinit>:
 1804e04:	20800e17 	ldw	r2,56(r4)
 1804e08:	10000126 	beq	r2,zero,1804e10 <__sinit+0xc>
 1804e0c:	f800283a 	ret
 1804e10:	1804ac81 	jmpi	1804ac8 <__sinit.part.1>

01804e14 <__sfp_lock_acquire>:
 1804e14:	f800283a 	ret

01804e18 <__sfp_lock_release>:
 1804e18:	f800283a 	ret

01804e1c <__sinit_lock_acquire>:
 1804e1c:	f800283a 	ret

01804e20 <__sinit_lock_release>:
 1804e20:	f800283a 	ret

01804e24 <__fp_lock_all>:
 1804e24:	00806134 	movhi	r2,388
 1804e28:	10946904 	addi	r2,r2,20900
 1804e2c:	11000017 	ldw	r4,0(r2)
 1804e30:	01406034 	movhi	r5,384
 1804e34:	29531904 	addi	r5,r5,19556
 1804e38:	18052881 	jmpi	1805288 <_fwalk>

01804e3c <__fp_unlock_all>:
 1804e3c:	00806134 	movhi	r2,388
 1804e40:	10946904 	addi	r2,r2,20900
 1804e44:	11000017 	ldw	r4,0(r2)
 1804e48:	01406034 	movhi	r5,384
 1804e4c:	2952ad04 	addi	r5,r5,19124
 1804e50:	18052881 	jmpi	1805288 <_fwalk>

01804e54 <_malloc_trim_r>:
 1804e54:	defffb04 	addi	sp,sp,-20
 1804e58:	dcc00315 	stw	r19,12(sp)
 1804e5c:	04c06134 	movhi	r19,388
 1804e60:	dc800215 	stw	r18,8(sp)
 1804e64:	dc400115 	stw	r17,4(sp)
 1804e68:	dc000015 	stw	r16,0(sp)
 1804e6c:	dfc00415 	stw	ra,16(sp)
 1804e70:	2821883a 	mov	r16,r5
 1804e74:	9cce0704 	addi	r19,r19,14364
 1804e78:	2025883a 	mov	r18,r4
 1804e7c:	180d4580 	call	180d458 <__malloc_lock>
 1804e80:	98800217 	ldw	r2,8(r19)
 1804e84:	14400117 	ldw	r17,4(r2)
 1804e88:	00bfff04 	movi	r2,-4
 1804e8c:	88a2703a 	and	r17,r17,r2
 1804e90:	8c21c83a 	sub	r16,r17,r16
 1804e94:	8403fbc4 	addi	r16,r16,4079
 1804e98:	8020d33a 	srli	r16,r16,12
 1804e9c:	0083ffc4 	movi	r2,4095
 1804ea0:	843fffc4 	addi	r16,r16,-1
 1804ea4:	8020933a 	slli	r16,r16,12
 1804ea8:	1400060e 	bge	r2,r16,1804ec4 <_malloc_trim_r+0x70>
 1804eac:	000b883a 	mov	r5,zero
 1804eb0:	9009883a 	mov	r4,r18
 1804eb4:	18072780 	call	1807278 <_sbrk_r>
 1804eb8:	98c00217 	ldw	r3,8(r19)
 1804ebc:	1c47883a 	add	r3,r3,r17
 1804ec0:	10c00a26 	beq	r2,r3,1804eec <_malloc_trim_r+0x98>
 1804ec4:	9009883a 	mov	r4,r18
 1804ec8:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1804ecc:	0005883a 	mov	r2,zero
 1804ed0:	dfc00417 	ldw	ra,16(sp)
 1804ed4:	dcc00317 	ldw	r19,12(sp)
 1804ed8:	dc800217 	ldw	r18,8(sp)
 1804edc:	dc400117 	ldw	r17,4(sp)
 1804ee0:	dc000017 	ldw	r16,0(sp)
 1804ee4:	dec00504 	addi	sp,sp,20
 1804ee8:	f800283a 	ret
 1804eec:	040bc83a 	sub	r5,zero,r16
 1804ef0:	9009883a 	mov	r4,r18
 1804ef4:	18072780 	call	1807278 <_sbrk_r>
 1804ef8:	00ffffc4 	movi	r3,-1
 1804efc:	10c00d26 	beq	r2,r3,1804f34 <_malloc_trim_r+0xe0>
 1804f00:	00c06134 	movhi	r3,388
 1804f04:	18dc8604 	addi	r3,r3,29208
 1804f08:	18800017 	ldw	r2,0(r3)
 1804f0c:	99000217 	ldw	r4,8(r19)
 1804f10:	8c23c83a 	sub	r17,r17,r16
 1804f14:	8c400054 	ori	r17,r17,1
 1804f18:	1421c83a 	sub	r16,r2,r16
 1804f1c:	24400115 	stw	r17,4(r4)
 1804f20:	9009883a 	mov	r4,r18
 1804f24:	1c000015 	stw	r16,0(r3)
 1804f28:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1804f2c:	00800044 	movi	r2,1
 1804f30:	003fe706 	br	1804ed0 <__ram_exceptions_end+0xff7f4be0>
 1804f34:	000b883a 	mov	r5,zero
 1804f38:	9009883a 	mov	r4,r18
 1804f3c:	18072780 	call	1807278 <_sbrk_r>
 1804f40:	99000217 	ldw	r4,8(r19)
 1804f44:	014003c4 	movi	r5,15
 1804f48:	1107c83a 	sub	r3,r2,r4
 1804f4c:	28ffdd0e 	bge	r5,r3,1804ec4 <__ram_exceptions_end+0xff7f4bd4>
 1804f50:	01406134 	movhi	r5,388
 1804f54:	29546b04 	addi	r5,r5,20908
 1804f58:	29400017 	ldw	r5,0(r5)
 1804f5c:	18c00054 	ori	r3,r3,1
 1804f60:	20c00115 	stw	r3,4(r4)
 1804f64:	00c06134 	movhi	r3,388
 1804f68:	1145c83a 	sub	r2,r2,r5
 1804f6c:	18dc8604 	addi	r3,r3,29208
 1804f70:	18800015 	stw	r2,0(r3)
 1804f74:	003fd306 	br	1804ec4 <__ram_exceptions_end+0xff7f4bd4>

01804f78 <_free_r>:
 1804f78:	28004126 	beq	r5,zero,1805080 <_free_r+0x108>
 1804f7c:	defffd04 	addi	sp,sp,-12
 1804f80:	dc400115 	stw	r17,4(sp)
 1804f84:	dc000015 	stw	r16,0(sp)
 1804f88:	2023883a 	mov	r17,r4
 1804f8c:	2821883a 	mov	r16,r5
 1804f90:	dfc00215 	stw	ra,8(sp)
 1804f94:	180d4580 	call	180d458 <__malloc_lock>
 1804f98:	81ffff17 	ldw	r7,-4(r16)
 1804f9c:	00bfff84 	movi	r2,-2
 1804fa0:	01006134 	movhi	r4,388
 1804fa4:	81bffe04 	addi	r6,r16,-8
 1804fa8:	3884703a 	and	r2,r7,r2
 1804fac:	210e0704 	addi	r4,r4,14364
 1804fb0:	308b883a 	add	r5,r6,r2
 1804fb4:	2a400117 	ldw	r9,4(r5)
 1804fb8:	22000217 	ldw	r8,8(r4)
 1804fbc:	00ffff04 	movi	r3,-4
 1804fc0:	48c6703a 	and	r3,r9,r3
 1804fc4:	2a005726 	beq	r5,r8,1805124 <_free_r+0x1ac>
 1804fc8:	28c00115 	stw	r3,4(r5)
 1804fcc:	39c0004c 	andi	r7,r7,1
 1804fd0:	3800091e 	bne	r7,zero,1804ff8 <_free_r+0x80>
 1804fd4:	823ffe17 	ldw	r8,-8(r16)
 1804fd8:	22400204 	addi	r9,r4,8
 1804fdc:	320dc83a 	sub	r6,r6,r8
 1804fe0:	31c00217 	ldw	r7,8(r6)
 1804fe4:	1205883a 	add	r2,r2,r8
 1804fe8:	3a406526 	beq	r7,r9,1805180 <_free_r+0x208>
 1804fec:	32000317 	ldw	r8,12(r6)
 1804ff0:	3a000315 	stw	r8,12(r7)
 1804ff4:	41c00215 	stw	r7,8(r8)
 1804ff8:	28cf883a 	add	r7,r5,r3
 1804ffc:	39c00117 	ldw	r7,4(r7)
 1805000:	39c0004c 	andi	r7,r7,1
 1805004:	38003a26 	beq	r7,zero,18050f0 <_free_r+0x178>
 1805008:	10c00054 	ori	r3,r2,1
 180500c:	30c00115 	stw	r3,4(r6)
 1805010:	3087883a 	add	r3,r6,r2
 1805014:	18800015 	stw	r2,0(r3)
 1805018:	00c07fc4 	movi	r3,511
 180501c:	18801936 	bltu	r3,r2,1805084 <_free_r+0x10c>
 1805020:	1004d0fa 	srli	r2,r2,3
 1805024:	01c00044 	movi	r7,1
 1805028:	21400117 	ldw	r5,4(r4)
 180502c:	10c00044 	addi	r3,r2,1
 1805030:	18c7883a 	add	r3,r3,r3
 1805034:	1005d0ba 	srai	r2,r2,2
 1805038:	18c7883a 	add	r3,r3,r3
 180503c:	18c7883a 	add	r3,r3,r3
 1805040:	1907883a 	add	r3,r3,r4
 1805044:	3884983a 	sll	r2,r7,r2
 1805048:	19c00017 	ldw	r7,0(r3)
 180504c:	1a3ffe04 	addi	r8,r3,-8
 1805050:	1144b03a 	or	r2,r2,r5
 1805054:	32000315 	stw	r8,12(r6)
 1805058:	31c00215 	stw	r7,8(r6)
 180505c:	20800115 	stw	r2,4(r4)
 1805060:	19800015 	stw	r6,0(r3)
 1805064:	39800315 	stw	r6,12(r7)
 1805068:	8809883a 	mov	r4,r17
 180506c:	dfc00217 	ldw	ra,8(sp)
 1805070:	dc400117 	ldw	r17,4(sp)
 1805074:	dc000017 	ldw	r16,0(sp)
 1805078:	dec00304 	addi	sp,sp,12
 180507c:	180d4b81 	jmpi	180d4b8 <__malloc_unlock>
 1805080:	f800283a 	ret
 1805084:	100ad27a 	srli	r5,r2,9
 1805088:	00c00104 	movi	r3,4
 180508c:	19404a36 	bltu	r3,r5,18051b8 <_free_r+0x240>
 1805090:	100ad1ba 	srli	r5,r2,6
 1805094:	28c00e44 	addi	r3,r5,57
 1805098:	18c7883a 	add	r3,r3,r3
 180509c:	29400e04 	addi	r5,r5,56
 18050a0:	18c7883a 	add	r3,r3,r3
 18050a4:	18c7883a 	add	r3,r3,r3
 18050a8:	1909883a 	add	r4,r3,r4
 18050ac:	20c00017 	ldw	r3,0(r4)
 18050b0:	01c06134 	movhi	r7,388
 18050b4:	213ffe04 	addi	r4,r4,-8
 18050b8:	39ce0704 	addi	r7,r7,14364
 18050bc:	20c04426 	beq	r4,r3,18051d0 <_free_r+0x258>
 18050c0:	01ffff04 	movi	r7,-4
 18050c4:	19400117 	ldw	r5,4(r3)
 18050c8:	29ca703a 	and	r5,r5,r7
 18050cc:	1140022e 	bgeu	r2,r5,18050d8 <_free_r+0x160>
 18050d0:	18c00217 	ldw	r3,8(r3)
 18050d4:	20fffb1e 	bne	r4,r3,18050c4 <__ram_exceptions_end+0xff7f4dd4>
 18050d8:	19000317 	ldw	r4,12(r3)
 18050dc:	31000315 	stw	r4,12(r6)
 18050e0:	30c00215 	stw	r3,8(r6)
 18050e4:	21800215 	stw	r6,8(r4)
 18050e8:	19800315 	stw	r6,12(r3)
 18050ec:	003fde06 	br	1805068 <__ram_exceptions_end+0xff7f4d78>
 18050f0:	29c00217 	ldw	r7,8(r5)
 18050f4:	10c5883a 	add	r2,r2,r3
 18050f8:	00c06134 	movhi	r3,388
 18050fc:	18ce0904 	addi	r3,r3,14372
 1805100:	38c03b26 	beq	r7,r3,18051f0 <_free_r+0x278>
 1805104:	2a000317 	ldw	r8,12(r5)
 1805108:	11400054 	ori	r5,r2,1
 180510c:	3087883a 	add	r3,r6,r2
 1805110:	3a000315 	stw	r8,12(r7)
 1805114:	41c00215 	stw	r7,8(r8)
 1805118:	31400115 	stw	r5,4(r6)
 180511c:	18800015 	stw	r2,0(r3)
 1805120:	003fbd06 	br	1805018 <__ram_exceptions_end+0xff7f4d28>
 1805124:	39c0004c 	andi	r7,r7,1
 1805128:	10c5883a 	add	r2,r2,r3
 180512c:	3800071e 	bne	r7,zero,180514c <_free_r+0x1d4>
 1805130:	81fffe17 	ldw	r7,-8(r16)
 1805134:	31cdc83a 	sub	r6,r6,r7
 1805138:	30c00317 	ldw	r3,12(r6)
 180513c:	31400217 	ldw	r5,8(r6)
 1805140:	11c5883a 	add	r2,r2,r7
 1805144:	28c00315 	stw	r3,12(r5)
 1805148:	19400215 	stw	r5,8(r3)
 180514c:	10c00054 	ori	r3,r2,1
 1805150:	30c00115 	stw	r3,4(r6)
 1805154:	00c06134 	movhi	r3,388
 1805158:	18d46c04 	addi	r3,r3,20912
 180515c:	18c00017 	ldw	r3,0(r3)
 1805160:	21800215 	stw	r6,8(r4)
 1805164:	10ffc036 	bltu	r2,r3,1805068 <__ram_exceptions_end+0xff7f4d78>
 1805168:	00806134 	movhi	r2,388
 180516c:	109c3504 	addi	r2,r2,28884
 1805170:	11400017 	ldw	r5,0(r2)
 1805174:	8809883a 	mov	r4,r17
 1805178:	1804e540 	call	1804e54 <_malloc_trim_r>
 180517c:	003fba06 	br	1805068 <__ram_exceptions_end+0xff7f4d78>
 1805180:	28c9883a 	add	r4,r5,r3
 1805184:	21000117 	ldw	r4,4(r4)
 1805188:	2100004c 	andi	r4,r4,1
 180518c:	2000391e 	bne	r4,zero,1805274 <_free_r+0x2fc>
 1805190:	29c00217 	ldw	r7,8(r5)
 1805194:	29000317 	ldw	r4,12(r5)
 1805198:	1885883a 	add	r2,r3,r2
 180519c:	10c00054 	ori	r3,r2,1
 18051a0:	39000315 	stw	r4,12(r7)
 18051a4:	21c00215 	stw	r7,8(r4)
 18051a8:	30c00115 	stw	r3,4(r6)
 18051ac:	308d883a 	add	r6,r6,r2
 18051b0:	30800015 	stw	r2,0(r6)
 18051b4:	003fac06 	br	1805068 <__ram_exceptions_end+0xff7f4d78>
 18051b8:	00c00504 	movi	r3,20
 18051bc:	19401536 	bltu	r3,r5,1805214 <_free_r+0x29c>
 18051c0:	28c01704 	addi	r3,r5,92
 18051c4:	18c7883a 	add	r3,r3,r3
 18051c8:	294016c4 	addi	r5,r5,91
 18051cc:	003fb406 	br	18050a0 <__ram_exceptions_end+0xff7f4db0>
 18051d0:	280bd0ba 	srai	r5,r5,2
 18051d4:	00c00044 	movi	r3,1
 18051d8:	38800117 	ldw	r2,4(r7)
 18051dc:	194a983a 	sll	r5,r3,r5
 18051e0:	2007883a 	mov	r3,r4
 18051e4:	2884b03a 	or	r2,r5,r2
 18051e8:	38800115 	stw	r2,4(r7)
 18051ec:	003fbb06 	br	18050dc <__ram_exceptions_end+0xff7f4dec>
 18051f0:	21800515 	stw	r6,20(r4)
 18051f4:	21800415 	stw	r6,16(r4)
 18051f8:	10c00054 	ori	r3,r2,1
 18051fc:	31c00315 	stw	r7,12(r6)
 1805200:	31c00215 	stw	r7,8(r6)
 1805204:	30c00115 	stw	r3,4(r6)
 1805208:	308d883a 	add	r6,r6,r2
 180520c:	30800015 	stw	r2,0(r6)
 1805210:	003f9506 	br	1805068 <__ram_exceptions_end+0xff7f4d78>
 1805214:	00c01504 	movi	r3,84
 1805218:	19400536 	bltu	r3,r5,1805230 <_free_r+0x2b8>
 180521c:	100ad33a 	srli	r5,r2,12
 1805220:	28c01bc4 	addi	r3,r5,111
 1805224:	18c7883a 	add	r3,r3,r3
 1805228:	29401b84 	addi	r5,r5,110
 180522c:	003f9c06 	br	18050a0 <__ram_exceptions_end+0xff7f4db0>
 1805230:	00c05504 	movi	r3,340
 1805234:	19400536 	bltu	r3,r5,180524c <_free_r+0x2d4>
 1805238:	100ad3fa 	srli	r5,r2,15
 180523c:	28c01e04 	addi	r3,r5,120
 1805240:	18c7883a 	add	r3,r3,r3
 1805244:	29401dc4 	addi	r5,r5,119
 1805248:	003f9506 	br	18050a0 <__ram_exceptions_end+0xff7f4db0>
 180524c:	00c15504 	movi	r3,1364
 1805250:	19400536 	bltu	r3,r5,1805268 <_free_r+0x2f0>
 1805254:	100ad4ba 	srli	r5,r2,18
 1805258:	28c01f44 	addi	r3,r5,125
 180525c:	18c7883a 	add	r3,r3,r3
 1805260:	29401f04 	addi	r5,r5,124
 1805264:	003f8e06 	br	18050a0 <__ram_exceptions_end+0xff7f4db0>
 1805268:	00c03f84 	movi	r3,254
 180526c:	01401f84 	movi	r5,126
 1805270:	003f8b06 	br	18050a0 <__ram_exceptions_end+0xff7f4db0>
 1805274:	10c00054 	ori	r3,r2,1
 1805278:	30c00115 	stw	r3,4(r6)
 180527c:	308d883a 	add	r6,r6,r2
 1805280:	30800015 	stw	r2,0(r6)
 1805284:	003f7806 	br	1805068 <__ram_exceptions_end+0xff7f4d78>

01805288 <_fwalk>:
 1805288:	defff704 	addi	sp,sp,-36
 180528c:	dd000415 	stw	r20,16(sp)
 1805290:	dfc00815 	stw	ra,32(sp)
 1805294:	ddc00715 	stw	r23,28(sp)
 1805298:	dd800615 	stw	r22,24(sp)
 180529c:	dd400515 	stw	r21,20(sp)
 18052a0:	dcc00315 	stw	r19,12(sp)
 18052a4:	dc800215 	stw	r18,8(sp)
 18052a8:	dc400115 	stw	r17,4(sp)
 18052ac:	dc000015 	stw	r16,0(sp)
 18052b0:	2500b804 	addi	r20,r4,736
 18052b4:	a0002326 	beq	r20,zero,1805344 <_fwalk+0xbc>
 18052b8:	282b883a 	mov	r21,r5
 18052bc:	002f883a 	mov	r23,zero
 18052c0:	05800044 	movi	r22,1
 18052c4:	04ffffc4 	movi	r19,-1
 18052c8:	a4400117 	ldw	r17,4(r20)
 18052cc:	a4800217 	ldw	r18,8(r20)
 18052d0:	8c7fffc4 	addi	r17,r17,-1
 18052d4:	88000d16 	blt	r17,zero,180530c <_fwalk+0x84>
 18052d8:	94000304 	addi	r16,r18,12
 18052dc:	94800384 	addi	r18,r18,14
 18052e0:	8080000b 	ldhu	r2,0(r16)
 18052e4:	8c7fffc4 	addi	r17,r17,-1
 18052e8:	813ffd04 	addi	r4,r16,-12
 18052ec:	b080042e 	bgeu	r22,r2,1805300 <_fwalk+0x78>
 18052f0:	9080000f 	ldh	r2,0(r18)
 18052f4:	14c00226 	beq	r2,r19,1805300 <_fwalk+0x78>
 18052f8:	a83ee83a 	callr	r21
 18052fc:	b8aeb03a 	or	r23,r23,r2
 1805300:	84001a04 	addi	r16,r16,104
 1805304:	94801a04 	addi	r18,r18,104
 1805308:	8cfff51e 	bne	r17,r19,18052e0 <__ram_exceptions_end+0xff7f4ff0>
 180530c:	a5000017 	ldw	r20,0(r20)
 1805310:	a03fed1e 	bne	r20,zero,18052c8 <__ram_exceptions_end+0xff7f4fd8>
 1805314:	b805883a 	mov	r2,r23
 1805318:	dfc00817 	ldw	ra,32(sp)
 180531c:	ddc00717 	ldw	r23,28(sp)
 1805320:	dd800617 	ldw	r22,24(sp)
 1805324:	dd400517 	ldw	r21,20(sp)
 1805328:	dd000417 	ldw	r20,16(sp)
 180532c:	dcc00317 	ldw	r19,12(sp)
 1805330:	dc800217 	ldw	r18,8(sp)
 1805334:	dc400117 	ldw	r17,4(sp)
 1805338:	dc000017 	ldw	r16,0(sp)
 180533c:	dec00904 	addi	sp,sp,36
 1805340:	f800283a 	ret
 1805344:	002f883a 	mov	r23,zero
 1805348:	003ff206 	br	1805314 <__ram_exceptions_end+0xff7f5024>

0180534c <_fwalk_reent>:
 180534c:	defff704 	addi	sp,sp,-36
 1805350:	dd000415 	stw	r20,16(sp)
 1805354:	dfc00815 	stw	ra,32(sp)
 1805358:	ddc00715 	stw	r23,28(sp)
 180535c:	dd800615 	stw	r22,24(sp)
 1805360:	dd400515 	stw	r21,20(sp)
 1805364:	dcc00315 	stw	r19,12(sp)
 1805368:	dc800215 	stw	r18,8(sp)
 180536c:	dc400115 	stw	r17,4(sp)
 1805370:	dc000015 	stw	r16,0(sp)
 1805374:	2500b804 	addi	r20,r4,736
 1805378:	a0002326 	beq	r20,zero,1805408 <_fwalk_reent+0xbc>
 180537c:	282b883a 	mov	r21,r5
 1805380:	2027883a 	mov	r19,r4
 1805384:	002f883a 	mov	r23,zero
 1805388:	05800044 	movi	r22,1
 180538c:	04bfffc4 	movi	r18,-1
 1805390:	a4400117 	ldw	r17,4(r20)
 1805394:	a4000217 	ldw	r16,8(r20)
 1805398:	8c7fffc4 	addi	r17,r17,-1
 180539c:	88000c16 	blt	r17,zero,18053d0 <_fwalk_reent+0x84>
 18053a0:	84000304 	addi	r16,r16,12
 18053a4:	8080000b 	ldhu	r2,0(r16)
 18053a8:	8c7fffc4 	addi	r17,r17,-1
 18053ac:	817ffd04 	addi	r5,r16,-12
 18053b0:	b080052e 	bgeu	r22,r2,18053c8 <_fwalk_reent+0x7c>
 18053b4:	8080008f 	ldh	r2,2(r16)
 18053b8:	9809883a 	mov	r4,r19
 18053bc:	14800226 	beq	r2,r18,18053c8 <_fwalk_reent+0x7c>
 18053c0:	a83ee83a 	callr	r21
 18053c4:	b8aeb03a 	or	r23,r23,r2
 18053c8:	84001a04 	addi	r16,r16,104
 18053cc:	8cbff51e 	bne	r17,r18,18053a4 <__ram_exceptions_end+0xff7f50b4>
 18053d0:	a5000017 	ldw	r20,0(r20)
 18053d4:	a03fee1e 	bne	r20,zero,1805390 <__ram_exceptions_end+0xff7f50a0>
 18053d8:	b805883a 	mov	r2,r23
 18053dc:	dfc00817 	ldw	ra,32(sp)
 18053e0:	ddc00717 	ldw	r23,28(sp)
 18053e4:	dd800617 	ldw	r22,24(sp)
 18053e8:	dd400517 	ldw	r21,20(sp)
 18053ec:	dd000417 	ldw	r20,16(sp)
 18053f0:	dcc00317 	ldw	r19,12(sp)
 18053f4:	dc800217 	ldw	r18,8(sp)
 18053f8:	dc400117 	ldw	r17,4(sp)
 18053fc:	dc000017 	ldw	r16,0(sp)
 1805400:	dec00904 	addi	sp,sp,36
 1805404:	f800283a 	ret
 1805408:	002f883a 	mov	r23,zero
 180540c:	003ff206 	br	18053d8 <__ram_exceptions_end+0xff7f50e8>

01805410 <_setlocale_r>:
 1805410:	30001b26 	beq	r6,zero,1805480 <_setlocale_r+0x70>
 1805414:	01406134 	movhi	r5,388
 1805418:	defffe04 	addi	sp,sp,-8
 180541c:	29422f04 	addi	r5,r5,2236
 1805420:	3009883a 	mov	r4,r6
 1805424:	dc000015 	stw	r16,0(sp)
 1805428:	dfc00115 	stw	ra,4(sp)
 180542c:	3021883a 	mov	r16,r6
 1805430:	18074080 	call	1807408 <strcmp>
 1805434:	1000061e 	bne	r2,zero,1805450 <_setlocale_r+0x40>
 1805438:	00806134 	movhi	r2,388
 180543c:	10822e04 	addi	r2,r2,2232
 1805440:	dfc00117 	ldw	ra,4(sp)
 1805444:	dc000017 	ldw	r16,0(sp)
 1805448:	dec00204 	addi	sp,sp,8
 180544c:	f800283a 	ret
 1805450:	01406134 	movhi	r5,388
 1805454:	29422e04 	addi	r5,r5,2232
 1805458:	8009883a 	mov	r4,r16
 180545c:	18074080 	call	1807408 <strcmp>
 1805460:	103ff526 	beq	r2,zero,1805438 <__ram_exceptions_end+0xff7f5148>
 1805464:	01406134 	movhi	r5,388
 1805468:	29421904 	addi	r5,r5,2148
 180546c:	8009883a 	mov	r4,r16
 1805470:	18074080 	call	1807408 <strcmp>
 1805474:	103ff026 	beq	r2,zero,1805438 <__ram_exceptions_end+0xff7f5148>
 1805478:	0005883a 	mov	r2,zero
 180547c:	003ff006 	br	1805440 <__ram_exceptions_end+0xff7f5150>
 1805480:	00806134 	movhi	r2,388
 1805484:	10822e04 	addi	r2,r2,2232
 1805488:	f800283a 	ret

0180548c <__locale_charset>:
 180548c:	00806134 	movhi	r2,388
 1805490:	108df104 	addi	r2,r2,14276
 1805494:	f800283a 	ret

01805498 <__locale_mb_cur_max>:
 1805498:	00806134 	movhi	r2,388
 180549c:	10946a04 	addi	r2,r2,20904
 18054a0:	10800017 	ldw	r2,0(r2)
 18054a4:	f800283a 	ret

018054a8 <__locale_msgcharset>:
 18054a8:	00806134 	movhi	r2,388
 18054ac:	108de904 	addi	r2,r2,14244
 18054b0:	f800283a 	ret

018054b4 <__locale_cjk_lang>:
 18054b4:	0005883a 	mov	r2,zero
 18054b8:	f800283a 	ret

018054bc <_localeconv_r>:
 18054bc:	00806134 	movhi	r2,388
 18054c0:	108df904 	addi	r2,r2,14308
 18054c4:	f800283a 	ret

018054c8 <setlocale>:
 18054c8:	00806134 	movhi	r2,388
 18054cc:	10946904 	addi	r2,r2,20900
 18054d0:	280d883a 	mov	r6,r5
 18054d4:	200b883a 	mov	r5,r4
 18054d8:	11000017 	ldw	r4,0(r2)
 18054dc:	18054101 	jmpi	1805410 <_setlocale_r>

018054e0 <localeconv>:
 18054e0:	00806134 	movhi	r2,388
 18054e4:	108df904 	addi	r2,r2,14308
 18054e8:	f800283a 	ret

018054ec <__smakebuf_r>:
 18054ec:	2880030b 	ldhu	r2,12(r5)
 18054f0:	10c0008c 	andi	r3,r2,2
 18054f4:	1800411e 	bne	r3,zero,18055fc <__smakebuf_r+0x110>
 18054f8:	deffec04 	addi	sp,sp,-80
 18054fc:	dc000f15 	stw	r16,60(sp)
 1805500:	2821883a 	mov	r16,r5
 1805504:	2940038f 	ldh	r5,14(r5)
 1805508:	dc401015 	stw	r17,64(sp)
 180550c:	dfc01315 	stw	ra,76(sp)
 1805510:	dcc01215 	stw	r19,72(sp)
 1805514:	dc801115 	stw	r18,68(sp)
 1805518:	2023883a 	mov	r17,r4
 180551c:	28001c16 	blt	r5,zero,1805590 <__smakebuf_r+0xa4>
 1805520:	d80d883a 	mov	r6,sp
 1805524:	18090480 	call	1809048 <_fstat_r>
 1805528:	10001816 	blt	r2,zero,180558c <__smakebuf_r+0xa0>
 180552c:	d8800117 	ldw	r2,4(sp)
 1805530:	00e00014 	movui	r3,32768
 1805534:	10bc000c 	andi	r2,r2,61440
 1805538:	14c80020 	cmpeqi	r19,r2,8192
 180553c:	10c03726 	beq	r2,r3,180561c <__smakebuf_r+0x130>
 1805540:	80c0030b 	ldhu	r3,12(r16)
 1805544:	18c20014 	ori	r3,r3,2048
 1805548:	80c0030d 	sth	r3,12(r16)
 180554c:	00c80004 	movi	r3,8192
 1805550:	10c0521e 	bne	r2,r3,180569c <__smakebuf_r+0x1b0>
 1805554:	8140038f 	ldh	r5,14(r16)
 1805558:	8809883a 	mov	r4,r17
 180555c:	18095600 	call	1809560 <_isatty_r>
 1805560:	10004c26 	beq	r2,zero,1805694 <__smakebuf_r+0x1a8>
 1805564:	8080030b 	ldhu	r2,12(r16)
 1805568:	80c010c4 	addi	r3,r16,67
 180556c:	80c00015 	stw	r3,0(r16)
 1805570:	10800054 	ori	r2,r2,1
 1805574:	8080030d 	sth	r2,12(r16)
 1805578:	00800044 	movi	r2,1
 180557c:	80c00415 	stw	r3,16(r16)
 1805580:	80800515 	stw	r2,20(r16)
 1805584:	04810004 	movi	r18,1024
 1805588:	00000706 	br	18055a8 <__smakebuf_r+0xbc>
 180558c:	8080030b 	ldhu	r2,12(r16)
 1805590:	10c0200c 	andi	r3,r2,128
 1805594:	18001f1e 	bne	r3,zero,1805614 <__smakebuf_r+0x128>
 1805598:	04810004 	movi	r18,1024
 180559c:	10820014 	ori	r2,r2,2048
 18055a0:	8080030d 	sth	r2,12(r16)
 18055a4:	0027883a 	mov	r19,zero
 18055a8:	900b883a 	mov	r5,r18
 18055ac:	8809883a 	mov	r4,r17
 18055b0:	18056a80 	call	18056a8 <_malloc_r>
 18055b4:	10002c26 	beq	r2,zero,1805668 <__smakebuf_r+0x17c>
 18055b8:	80c0030b 	ldhu	r3,12(r16)
 18055bc:	01006034 	movhi	r4,384
 18055c0:	2112af04 	addi	r4,r4,19132
 18055c4:	89000f15 	stw	r4,60(r17)
 18055c8:	18c02014 	ori	r3,r3,128
 18055cc:	80c0030d 	sth	r3,12(r16)
 18055d0:	80800015 	stw	r2,0(r16)
 18055d4:	80800415 	stw	r2,16(r16)
 18055d8:	84800515 	stw	r18,20(r16)
 18055dc:	98001a1e 	bne	r19,zero,1805648 <__smakebuf_r+0x15c>
 18055e0:	dfc01317 	ldw	ra,76(sp)
 18055e4:	dcc01217 	ldw	r19,72(sp)
 18055e8:	dc801117 	ldw	r18,68(sp)
 18055ec:	dc401017 	ldw	r17,64(sp)
 18055f0:	dc000f17 	ldw	r16,60(sp)
 18055f4:	dec01404 	addi	sp,sp,80
 18055f8:	f800283a 	ret
 18055fc:	288010c4 	addi	r2,r5,67
 1805600:	28800015 	stw	r2,0(r5)
 1805604:	28800415 	stw	r2,16(r5)
 1805608:	00800044 	movi	r2,1
 180560c:	28800515 	stw	r2,20(r5)
 1805610:	f800283a 	ret
 1805614:	04801004 	movi	r18,64
 1805618:	003fe006 	br	180559c <__ram_exceptions_end+0xff7f52ac>
 180561c:	81000a17 	ldw	r4,40(r16)
 1805620:	00c06034 	movhi	r3,384
 1805624:	18dce904 	addi	r3,r3,29604
 1805628:	20ffc51e 	bne	r4,r3,1805540 <__ram_exceptions_end+0xff7f5250>
 180562c:	8080030b 	ldhu	r2,12(r16)
 1805630:	04810004 	movi	r18,1024
 1805634:	84801315 	stw	r18,76(r16)
 1805638:	1484b03a 	or	r2,r2,r18
 180563c:	8080030d 	sth	r2,12(r16)
 1805640:	0027883a 	mov	r19,zero
 1805644:	003fd806 	br	18055a8 <__ram_exceptions_end+0xff7f52b8>
 1805648:	8140038f 	ldh	r5,14(r16)
 180564c:	8809883a 	mov	r4,r17
 1805650:	18095600 	call	1809560 <_isatty_r>
 1805654:	103fe226 	beq	r2,zero,18055e0 <__ram_exceptions_end+0xff7f52f0>
 1805658:	8080030b 	ldhu	r2,12(r16)
 180565c:	10800054 	ori	r2,r2,1
 1805660:	8080030d 	sth	r2,12(r16)
 1805664:	003fde06 	br	18055e0 <__ram_exceptions_end+0xff7f52f0>
 1805668:	8080030b 	ldhu	r2,12(r16)
 180566c:	10c0800c 	andi	r3,r2,512
 1805670:	183fdb1e 	bne	r3,zero,18055e0 <__ram_exceptions_end+0xff7f52f0>
 1805674:	10800094 	ori	r2,r2,2
 1805678:	80c010c4 	addi	r3,r16,67
 180567c:	8080030d 	sth	r2,12(r16)
 1805680:	00800044 	movi	r2,1
 1805684:	80c00015 	stw	r3,0(r16)
 1805688:	80c00415 	stw	r3,16(r16)
 180568c:	80800515 	stw	r2,20(r16)
 1805690:	003fd306 	br	18055e0 <__ram_exceptions_end+0xff7f52f0>
 1805694:	04810004 	movi	r18,1024
 1805698:	003fc306 	br	18055a8 <__ram_exceptions_end+0xff7f52b8>
 180569c:	0027883a 	mov	r19,zero
 18056a0:	04810004 	movi	r18,1024
 18056a4:	003fc006 	br	18055a8 <__ram_exceptions_end+0xff7f52b8>

018056a8 <_malloc_r>:
 18056a8:	defff504 	addi	sp,sp,-44
 18056ac:	dc800315 	stw	r18,12(sp)
 18056b0:	dfc00a15 	stw	ra,40(sp)
 18056b4:	df000915 	stw	fp,36(sp)
 18056b8:	ddc00815 	stw	r23,32(sp)
 18056bc:	dd800715 	stw	r22,28(sp)
 18056c0:	dd400615 	stw	r21,24(sp)
 18056c4:	dd000515 	stw	r20,20(sp)
 18056c8:	dcc00415 	stw	r19,16(sp)
 18056cc:	dc400215 	stw	r17,8(sp)
 18056d0:	dc000115 	stw	r16,4(sp)
 18056d4:	288002c4 	addi	r2,r5,11
 18056d8:	00c00584 	movi	r3,22
 18056dc:	2025883a 	mov	r18,r4
 18056e0:	18807f2e 	bgeu	r3,r2,18058e0 <_malloc_r+0x238>
 18056e4:	047ffe04 	movi	r17,-8
 18056e8:	1462703a 	and	r17,r2,r17
 18056ec:	8800a316 	blt	r17,zero,180597c <_malloc_r+0x2d4>
 18056f0:	8940a236 	bltu	r17,r5,180597c <_malloc_r+0x2d4>
 18056f4:	180d4580 	call	180d458 <__malloc_lock>
 18056f8:	00807dc4 	movi	r2,503
 18056fc:	1441e92e 	bgeu	r2,r17,1805ea4 <_malloc_r+0x7fc>
 1805700:	8804d27a 	srli	r2,r17,9
 1805704:	1000a126 	beq	r2,zero,180598c <_malloc_r+0x2e4>
 1805708:	00c00104 	movi	r3,4
 180570c:	18811e36 	bltu	r3,r2,1805b88 <_malloc_r+0x4e0>
 1805710:	8804d1ba 	srli	r2,r17,6
 1805714:	12000e44 	addi	r8,r2,57
 1805718:	11c00e04 	addi	r7,r2,56
 180571c:	4209883a 	add	r4,r8,r8
 1805720:	04c06134 	movhi	r19,388
 1805724:	2109883a 	add	r4,r4,r4
 1805728:	9cce0704 	addi	r19,r19,14364
 180572c:	2109883a 	add	r4,r4,r4
 1805730:	9909883a 	add	r4,r19,r4
 1805734:	24000117 	ldw	r16,4(r4)
 1805738:	213ffe04 	addi	r4,r4,-8
 180573c:	24009726 	beq	r4,r16,180599c <_malloc_r+0x2f4>
 1805740:	80800117 	ldw	r2,4(r16)
 1805744:	01bfff04 	movi	r6,-4
 1805748:	014003c4 	movi	r5,15
 180574c:	1184703a 	and	r2,r2,r6
 1805750:	1447c83a 	sub	r3,r2,r17
 1805754:	28c00716 	blt	r5,r3,1805774 <_malloc_r+0xcc>
 1805758:	1800920e 	bge	r3,zero,18059a4 <_malloc_r+0x2fc>
 180575c:	84000317 	ldw	r16,12(r16)
 1805760:	24008e26 	beq	r4,r16,180599c <_malloc_r+0x2f4>
 1805764:	80800117 	ldw	r2,4(r16)
 1805768:	1184703a 	and	r2,r2,r6
 180576c:	1447c83a 	sub	r3,r2,r17
 1805770:	28fff90e 	bge	r5,r3,1805758 <__ram_exceptions_end+0xff7f5468>
 1805774:	3809883a 	mov	r4,r7
 1805778:	01806134 	movhi	r6,388
 180577c:	9c000417 	ldw	r16,16(r19)
 1805780:	318e0704 	addi	r6,r6,14364
 1805784:	32000204 	addi	r8,r6,8
 1805788:	82013426 	beq	r16,r8,1805c5c <_malloc_r+0x5b4>
 180578c:	80c00117 	ldw	r3,4(r16)
 1805790:	00bfff04 	movi	r2,-4
 1805794:	188e703a 	and	r7,r3,r2
 1805798:	3c45c83a 	sub	r2,r7,r17
 180579c:	00c003c4 	movi	r3,15
 18057a0:	18811f16 	blt	r3,r2,1805c20 <_malloc_r+0x578>
 18057a4:	32000515 	stw	r8,20(r6)
 18057a8:	32000415 	stw	r8,16(r6)
 18057ac:	10007f0e 	bge	r2,zero,18059ac <_malloc_r+0x304>
 18057b0:	00807fc4 	movi	r2,511
 18057b4:	11c0fd36 	bltu	r2,r7,1805bac <_malloc_r+0x504>
 18057b8:	3806d0fa 	srli	r3,r7,3
 18057bc:	01c00044 	movi	r7,1
 18057c0:	30800117 	ldw	r2,4(r6)
 18057c4:	19400044 	addi	r5,r3,1
 18057c8:	294b883a 	add	r5,r5,r5
 18057cc:	1807d0ba 	srai	r3,r3,2
 18057d0:	294b883a 	add	r5,r5,r5
 18057d4:	294b883a 	add	r5,r5,r5
 18057d8:	298b883a 	add	r5,r5,r6
 18057dc:	38c6983a 	sll	r3,r7,r3
 18057e0:	29c00017 	ldw	r7,0(r5)
 18057e4:	2a7ffe04 	addi	r9,r5,-8
 18057e8:	1886b03a 	or	r3,r3,r2
 18057ec:	82400315 	stw	r9,12(r16)
 18057f0:	81c00215 	stw	r7,8(r16)
 18057f4:	30c00115 	stw	r3,4(r6)
 18057f8:	2c000015 	stw	r16,0(r5)
 18057fc:	3c000315 	stw	r16,12(r7)
 1805800:	2005d0ba 	srai	r2,r4,2
 1805804:	01400044 	movi	r5,1
 1805808:	288a983a 	sll	r5,r5,r2
 180580c:	19406f36 	bltu	r3,r5,18059cc <_malloc_r+0x324>
 1805810:	28c4703a 	and	r2,r5,r3
 1805814:	10000a1e 	bne	r2,zero,1805840 <_malloc_r+0x198>
 1805818:	00bfff04 	movi	r2,-4
 180581c:	294b883a 	add	r5,r5,r5
 1805820:	2088703a 	and	r4,r4,r2
 1805824:	28c4703a 	and	r2,r5,r3
 1805828:	21000104 	addi	r4,r4,4
 180582c:	1000041e 	bne	r2,zero,1805840 <_malloc_r+0x198>
 1805830:	294b883a 	add	r5,r5,r5
 1805834:	28c4703a 	and	r2,r5,r3
 1805838:	21000104 	addi	r4,r4,4
 180583c:	103ffc26 	beq	r2,zero,1805830 <__ram_exceptions_end+0xff7f5540>
 1805840:	02bfff04 	movi	r10,-4
 1805844:	024003c4 	movi	r9,15
 1805848:	21800044 	addi	r6,r4,1
 180584c:	318d883a 	add	r6,r6,r6
 1805850:	318d883a 	add	r6,r6,r6
 1805854:	318d883a 	add	r6,r6,r6
 1805858:	998d883a 	add	r6,r19,r6
 180585c:	333ffe04 	addi	r12,r6,-8
 1805860:	2017883a 	mov	r11,r4
 1805864:	31800104 	addi	r6,r6,4
 1805868:	34000017 	ldw	r16,0(r6)
 180586c:	31fffd04 	addi	r7,r6,-12
 1805870:	81c0041e 	bne	r16,r7,1805884 <_malloc_r+0x1dc>
 1805874:	0000fb06 	br	1805c64 <_malloc_r+0x5bc>
 1805878:	1801030e 	bge	r3,zero,1805c88 <_malloc_r+0x5e0>
 180587c:	84000317 	ldw	r16,12(r16)
 1805880:	81c0f826 	beq	r16,r7,1805c64 <_malloc_r+0x5bc>
 1805884:	80800117 	ldw	r2,4(r16)
 1805888:	1284703a 	and	r2,r2,r10
 180588c:	1447c83a 	sub	r3,r2,r17
 1805890:	48fff90e 	bge	r9,r3,1805878 <__ram_exceptions_end+0xff7f5588>
 1805894:	80800317 	ldw	r2,12(r16)
 1805898:	81000217 	ldw	r4,8(r16)
 180589c:	89400054 	ori	r5,r17,1
 18058a0:	81400115 	stw	r5,4(r16)
 18058a4:	20800315 	stw	r2,12(r4)
 18058a8:	11000215 	stw	r4,8(r2)
 18058ac:	8463883a 	add	r17,r16,r17
 18058b0:	9c400515 	stw	r17,20(r19)
 18058b4:	9c400415 	stw	r17,16(r19)
 18058b8:	18800054 	ori	r2,r3,1
 18058bc:	88800115 	stw	r2,4(r17)
 18058c0:	8a000315 	stw	r8,12(r17)
 18058c4:	8a000215 	stw	r8,8(r17)
 18058c8:	88e3883a 	add	r17,r17,r3
 18058cc:	88c00015 	stw	r3,0(r17)
 18058d0:	9009883a 	mov	r4,r18
 18058d4:	180d4b80 	call	180d4b8 <__malloc_unlock>
 18058d8:	80800204 	addi	r2,r16,8
 18058dc:	00001b06 	br	180594c <_malloc_r+0x2a4>
 18058e0:	04400404 	movi	r17,16
 18058e4:	89402536 	bltu	r17,r5,180597c <_malloc_r+0x2d4>
 18058e8:	180d4580 	call	180d458 <__malloc_lock>
 18058ec:	00800184 	movi	r2,6
 18058f0:	01000084 	movi	r4,2
 18058f4:	04c06134 	movhi	r19,388
 18058f8:	1085883a 	add	r2,r2,r2
 18058fc:	9cce0704 	addi	r19,r19,14364
 1805900:	1085883a 	add	r2,r2,r2
 1805904:	9885883a 	add	r2,r19,r2
 1805908:	14000117 	ldw	r16,4(r2)
 180590c:	10fffe04 	addi	r3,r2,-8
 1805910:	80c0d926 	beq	r16,r3,1805c78 <_malloc_r+0x5d0>
 1805914:	80c00117 	ldw	r3,4(r16)
 1805918:	81000317 	ldw	r4,12(r16)
 180591c:	00bfff04 	movi	r2,-4
 1805920:	1884703a 	and	r2,r3,r2
 1805924:	81400217 	ldw	r5,8(r16)
 1805928:	8085883a 	add	r2,r16,r2
 180592c:	10c00117 	ldw	r3,4(r2)
 1805930:	29000315 	stw	r4,12(r5)
 1805934:	21400215 	stw	r5,8(r4)
 1805938:	18c00054 	ori	r3,r3,1
 180593c:	10c00115 	stw	r3,4(r2)
 1805940:	9009883a 	mov	r4,r18
 1805944:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1805948:	80800204 	addi	r2,r16,8
 180594c:	dfc00a17 	ldw	ra,40(sp)
 1805950:	df000917 	ldw	fp,36(sp)
 1805954:	ddc00817 	ldw	r23,32(sp)
 1805958:	dd800717 	ldw	r22,28(sp)
 180595c:	dd400617 	ldw	r21,24(sp)
 1805960:	dd000517 	ldw	r20,20(sp)
 1805964:	dcc00417 	ldw	r19,16(sp)
 1805968:	dc800317 	ldw	r18,12(sp)
 180596c:	dc400217 	ldw	r17,8(sp)
 1805970:	dc000117 	ldw	r16,4(sp)
 1805974:	dec00b04 	addi	sp,sp,44
 1805978:	f800283a 	ret
 180597c:	00800304 	movi	r2,12
 1805980:	90800015 	stw	r2,0(r18)
 1805984:	0005883a 	mov	r2,zero
 1805988:	003ff006 	br	180594c <__ram_exceptions_end+0xff7f565c>
 180598c:	01002004 	movi	r4,128
 1805990:	02001004 	movi	r8,64
 1805994:	01c00fc4 	movi	r7,63
 1805998:	003f6106 	br	1805720 <__ram_exceptions_end+0xff7f5430>
 180599c:	4009883a 	mov	r4,r8
 18059a0:	003f7506 	br	1805778 <__ram_exceptions_end+0xff7f5488>
 18059a4:	81000317 	ldw	r4,12(r16)
 18059a8:	003fde06 	br	1805924 <__ram_exceptions_end+0xff7f5634>
 18059ac:	81c5883a 	add	r2,r16,r7
 18059b0:	11400117 	ldw	r5,4(r2)
 18059b4:	9009883a 	mov	r4,r18
 18059b8:	29400054 	ori	r5,r5,1
 18059bc:	11400115 	stw	r5,4(r2)
 18059c0:	180d4b80 	call	180d4b8 <__malloc_unlock>
 18059c4:	80800204 	addi	r2,r16,8
 18059c8:	003fe006 	br	180594c <__ram_exceptions_end+0xff7f565c>
 18059cc:	9c000217 	ldw	r16,8(r19)
 18059d0:	00bfff04 	movi	r2,-4
 18059d4:	85800117 	ldw	r22,4(r16)
 18059d8:	b0ac703a 	and	r22,r22,r2
 18059dc:	b4400336 	bltu	r22,r17,18059ec <_malloc_r+0x344>
 18059e0:	b445c83a 	sub	r2,r22,r17
 18059e4:	00c003c4 	movi	r3,15
 18059e8:	18805d16 	blt	r3,r2,1805b60 <_malloc_r+0x4b8>
 18059ec:	05c06134 	movhi	r23,388
 18059f0:	00806134 	movhi	r2,388
 18059f4:	109c3504 	addi	r2,r2,28884
 18059f8:	bdd46b04 	addi	r23,r23,20908
 18059fc:	15400017 	ldw	r21,0(r2)
 1805a00:	b8c00017 	ldw	r3,0(r23)
 1805a04:	00bfffc4 	movi	r2,-1
 1805a08:	858d883a 	add	r6,r16,r22
 1805a0c:	8d6b883a 	add	r21,r17,r21
 1805a10:	1880ea26 	beq	r3,r2,1805dbc <_malloc_r+0x714>
 1805a14:	ad4403c4 	addi	r21,r21,4111
 1805a18:	00bc0004 	movi	r2,-4096
 1805a1c:	a8aa703a 	and	r21,r21,r2
 1805a20:	a80b883a 	mov	r5,r21
 1805a24:	9009883a 	mov	r4,r18
 1805a28:	d9800015 	stw	r6,0(sp)
 1805a2c:	18072780 	call	1807278 <_sbrk_r>
 1805a30:	1029883a 	mov	r20,r2
 1805a34:	00bfffc4 	movi	r2,-1
 1805a38:	d9800017 	ldw	r6,0(sp)
 1805a3c:	a080e826 	beq	r20,r2,1805de0 <_malloc_r+0x738>
 1805a40:	a180a636 	bltu	r20,r6,1805cdc <_malloc_r+0x634>
 1805a44:	07006134 	movhi	fp,388
 1805a48:	e71c8604 	addi	fp,fp,29208
 1805a4c:	e0800017 	ldw	r2,0(fp)
 1805a50:	a887883a 	add	r3,r21,r2
 1805a54:	e0c00015 	stw	r3,0(fp)
 1805a58:	3500e626 	beq	r6,r20,1805df4 <_malloc_r+0x74c>
 1805a5c:	b9000017 	ldw	r4,0(r23)
 1805a60:	00bfffc4 	movi	r2,-1
 1805a64:	2080ee26 	beq	r4,r2,1805e20 <_malloc_r+0x778>
 1805a68:	a185c83a 	sub	r2,r20,r6
 1805a6c:	10c5883a 	add	r2,r2,r3
 1805a70:	e0800015 	stw	r2,0(fp)
 1805a74:	a0c001cc 	andi	r3,r20,7
 1805a78:	1800bc26 	beq	r3,zero,1805d6c <_malloc_r+0x6c4>
 1805a7c:	a0e9c83a 	sub	r20,r20,r3
 1805a80:	00840204 	movi	r2,4104
 1805a84:	a5000204 	addi	r20,r20,8
 1805a88:	10c7c83a 	sub	r3,r2,r3
 1805a8c:	a545883a 	add	r2,r20,r21
 1805a90:	1083ffcc 	andi	r2,r2,4095
 1805a94:	18abc83a 	sub	r21,r3,r2
 1805a98:	a80b883a 	mov	r5,r21
 1805a9c:	9009883a 	mov	r4,r18
 1805aa0:	18072780 	call	1807278 <_sbrk_r>
 1805aa4:	00ffffc4 	movi	r3,-1
 1805aa8:	10c0e126 	beq	r2,r3,1805e30 <_malloc_r+0x788>
 1805aac:	1505c83a 	sub	r2,r2,r20
 1805ab0:	1545883a 	add	r2,r2,r21
 1805ab4:	10800054 	ori	r2,r2,1
 1805ab8:	e0c00017 	ldw	r3,0(fp)
 1805abc:	9d000215 	stw	r20,8(r19)
 1805ac0:	a0800115 	stw	r2,4(r20)
 1805ac4:	a8c7883a 	add	r3,r21,r3
 1805ac8:	e0c00015 	stw	r3,0(fp)
 1805acc:	84c00e26 	beq	r16,r19,1805b08 <_malloc_r+0x460>
 1805ad0:	018003c4 	movi	r6,15
 1805ad4:	3580a72e 	bgeu	r6,r22,1805d74 <_malloc_r+0x6cc>
 1805ad8:	81400117 	ldw	r5,4(r16)
 1805adc:	013ffe04 	movi	r4,-8
 1805ae0:	b0bffd04 	addi	r2,r22,-12
 1805ae4:	1104703a 	and	r2,r2,r4
 1805ae8:	2900004c 	andi	r4,r5,1
 1805aec:	2088b03a 	or	r4,r4,r2
 1805af0:	81000115 	stw	r4,4(r16)
 1805af4:	01400144 	movi	r5,5
 1805af8:	8089883a 	add	r4,r16,r2
 1805afc:	21400115 	stw	r5,4(r4)
 1805b00:	21400215 	stw	r5,8(r4)
 1805b04:	3080cd36 	bltu	r6,r2,1805e3c <_malloc_r+0x794>
 1805b08:	00806134 	movhi	r2,388
 1805b0c:	109c3404 	addi	r2,r2,28880
 1805b10:	11000017 	ldw	r4,0(r2)
 1805b14:	20c0012e 	bgeu	r4,r3,1805b1c <_malloc_r+0x474>
 1805b18:	10c00015 	stw	r3,0(r2)
 1805b1c:	00806134 	movhi	r2,388
 1805b20:	109c3304 	addi	r2,r2,28876
 1805b24:	11000017 	ldw	r4,0(r2)
 1805b28:	9c000217 	ldw	r16,8(r19)
 1805b2c:	20c0012e 	bgeu	r4,r3,1805b34 <_malloc_r+0x48c>
 1805b30:	10c00015 	stw	r3,0(r2)
 1805b34:	80c00117 	ldw	r3,4(r16)
 1805b38:	00bfff04 	movi	r2,-4
 1805b3c:	1886703a 	and	r3,r3,r2
 1805b40:	1c45c83a 	sub	r2,r3,r17
 1805b44:	1c400236 	bltu	r3,r17,1805b50 <_malloc_r+0x4a8>
 1805b48:	00c003c4 	movi	r3,15
 1805b4c:	18800416 	blt	r3,r2,1805b60 <_malloc_r+0x4b8>
 1805b50:	9009883a 	mov	r4,r18
 1805b54:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1805b58:	0005883a 	mov	r2,zero
 1805b5c:	003f7b06 	br	180594c <__ram_exceptions_end+0xff7f565c>
 1805b60:	88c00054 	ori	r3,r17,1
 1805b64:	80c00115 	stw	r3,4(r16)
 1805b68:	8463883a 	add	r17,r16,r17
 1805b6c:	10800054 	ori	r2,r2,1
 1805b70:	9c400215 	stw	r17,8(r19)
 1805b74:	88800115 	stw	r2,4(r17)
 1805b78:	9009883a 	mov	r4,r18
 1805b7c:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1805b80:	80800204 	addi	r2,r16,8
 1805b84:	003f7106 	br	180594c <__ram_exceptions_end+0xff7f565c>
 1805b88:	00c00504 	movi	r3,20
 1805b8c:	18804a2e 	bgeu	r3,r2,1805cb8 <_malloc_r+0x610>
 1805b90:	00c01504 	movi	r3,84
 1805b94:	18806e36 	bltu	r3,r2,1805d50 <_malloc_r+0x6a8>
 1805b98:	8804d33a 	srli	r2,r17,12
 1805b9c:	12001bc4 	addi	r8,r2,111
 1805ba0:	11c01b84 	addi	r7,r2,110
 1805ba4:	4209883a 	add	r4,r8,r8
 1805ba8:	003edd06 	br	1805720 <__ram_exceptions_end+0xff7f5430>
 1805bac:	3804d27a 	srli	r2,r7,9
 1805bb0:	00c00104 	movi	r3,4
 1805bb4:	1880442e 	bgeu	r3,r2,1805cc8 <_malloc_r+0x620>
 1805bb8:	00c00504 	movi	r3,20
 1805bbc:	18808136 	bltu	r3,r2,1805dc4 <_malloc_r+0x71c>
 1805bc0:	11401704 	addi	r5,r2,92
 1805bc4:	10c016c4 	addi	r3,r2,91
 1805bc8:	294b883a 	add	r5,r5,r5
 1805bcc:	294b883a 	add	r5,r5,r5
 1805bd0:	294b883a 	add	r5,r5,r5
 1805bd4:	994b883a 	add	r5,r19,r5
 1805bd8:	28800017 	ldw	r2,0(r5)
 1805bdc:	01806134 	movhi	r6,388
 1805be0:	297ffe04 	addi	r5,r5,-8
 1805be4:	318e0704 	addi	r6,r6,14364
 1805be8:	28806526 	beq	r5,r2,1805d80 <_malloc_r+0x6d8>
 1805bec:	01bfff04 	movi	r6,-4
 1805bf0:	10c00117 	ldw	r3,4(r2)
 1805bf4:	1986703a 	and	r3,r3,r6
 1805bf8:	38c0022e 	bgeu	r7,r3,1805c04 <_malloc_r+0x55c>
 1805bfc:	10800217 	ldw	r2,8(r2)
 1805c00:	28bffb1e 	bne	r5,r2,1805bf0 <__ram_exceptions_end+0xff7f5900>
 1805c04:	11400317 	ldw	r5,12(r2)
 1805c08:	98c00117 	ldw	r3,4(r19)
 1805c0c:	81400315 	stw	r5,12(r16)
 1805c10:	80800215 	stw	r2,8(r16)
 1805c14:	2c000215 	stw	r16,8(r5)
 1805c18:	14000315 	stw	r16,12(r2)
 1805c1c:	003ef806 	br	1805800 <__ram_exceptions_end+0xff7f5510>
 1805c20:	88c00054 	ori	r3,r17,1
 1805c24:	80c00115 	stw	r3,4(r16)
 1805c28:	8463883a 	add	r17,r16,r17
 1805c2c:	34400515 	stw	r17,20(r6)
 1805c30:	34400415 	stw	r17,16(r6)
 1805c34:	10c00054 	ori	r3,r2,1
 1805c38:	8a000315 	stw	r8,12(r17)
 1805c3c:	8a000215 	stw	r8,8(r17)
 1805c40:	88c00115 	stw	r3,4(r17)
 1805c44:	88a3883a 	add	r17,r17,r2
 1805c48:	88800015 	stw	r2,0(r17)
 1805c4c:	9009883a 	mov	r4,r18
 1805c50:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1805c54:	80800204 	addi	r2,r16,8
 1805c58:	003f3c06 	br	180594c <__ram_exceptions_end+0xff7f565c>
 1805c5c:	30c00117 	ldw	r3,4(r6)
 1805c60:	003ee706 	br	1805800 <__ram_exceptions_end+0xff7f5510>
 1805c64:	5ac00044 	addi	r11,r11,1
 1805c68:	588000cc 	andi	r2,r11,3
 1805c6c:	31800204 	addi	r6,r6,8
 1805c70:	103efd1e 	bne	r2,zero,1805868 <__ram_exceptions_end+0xff7f5578>
 1805c74:	00002406 	br	1805d08 <_malloc_r+0x660>
 1805c78:	14000317 	ldw	r16,12(r2)
 1805c7c:	143f251e 	bne	r2,r16,1805914 <__ram_exceptions_end+0xff7f5624>
 1805c80:	21000084 	addi	r4,r4,2
 1805c84:	003ebc06 	br	1805778 <__ram_exceptions_end+0xff7f5488>
 1805c88:	8085883a 	add	r2,r16,r2
 1805c8c:	10c00117 	ldw	r3,4(r2)
 1805c90:	81000317 	ldw	r4,12(r16)
 1805c94:	81400217 	ldw	r5,8(r16)
 1805c98:	18c00054 	ori	r3,r3,1
 1805c9c:	10c00115 	stw	r3,4(r2)
 1805ca0:	29000315 	stw	r4,12(r5)
 1805ca4:	21400215 	stw	r5,8(r4)
 1805ca8:	9009883a 	mov	r4,r18
 1805cac:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1805cb0:	80800204 	addi	r2,r16,8
 1805cb4:	003f2506 	br	180594c <__ram_exceptions_end+0xff7f565c>
 1805cb8:	12001704 	addi	r8,r2,92
 1805cbc:	11c016c4 	addi	r7,r2,91
 1805cc0:	4209883a 	add	r4,r8,r8
 1805cc4:	003e9606 	br	1805720 <__ram_exceptions_end+0xff7f5430>
 1805cc8:	3804d1ba 	srli	r2,r7,6
 1805ccc:	11400e44 	addi	r5,r2,57
 1805cd0:	10c00e04 	addi	r3,r2,56
 1805cd4:	294b883a 	add	r5,r5,r5
 1805cd8:	003fbc06 	br	1805bcc <__ram_exceptions_end+0xff7f58dc>
 1805cdc:	84ff5926 	beq	r16,r19,1805a44 <__ram_exceptions_end+0xff7f5754>
 1805ce0:	00806134 	movhi	r2,388
 1805ce4:	108e0704 	addi	r2,r2,14364
 1805ce8:	14000217 	ldw	r16,8(r2)
 1805cec:	00bfff04 	movi	r2,-4
 1805cf0:	80c00117 	ldw	r3,4(r16)
 1805cf4:	1886703a 	and	r3,r3,r2
 1805cf8:	003f9106 	br	1805b40 <__ram_exceptions_end+0xff7f5850>
 1805cfc:	60800217 	ldw	r2,8(r12)
 1805d00:	213fffc4 	addi	r4,r4,-1
 1805d04:	1300651e 	bne	r2,r12,1805e9c <_malloc_r+0x7f4>
 1805d08:	208000cc 	andi	r2,r4,3
 1805d0c:	633ffe04 	addi	r12,r12,-8
 1805d10:	103ffa1e 	bne	r2,zero,1805cfc <__ram_exceptions_end+0xff7f5a0c>
 1805d14:	98800117 	ldw	r2,4(r19)
 1805d18:	0146303a 	nor	r3,zero,r5
 1805d1c:	1884703a 	and	r2,r3,r2
 1805d20:	98800115 	stw	r2,4(r19)
 1805d24:	294b883a 	add	r5,r5,r5
 1805d28:	117f2836 	bltu	r2,r5,18059cc <__ram_exceptions_end+0xff7f56dc>
 1805d2c:	283f2726 	beq	r5,zero,18059cc <__ram_exceptions_end+0xff7f56dc>
 1805d30:	2886703a 	and	r3,r5,r2
 1805d34:	5809883a 	mov	r4,r11
 1805d38:	183ec31e 	bne	r3,zero,1805848 <__ram_exceptions_end+0xff7f5558>
 1805d3c:	294b883a 	add	r5,r5,r5
 1805d40:	2886703a 	and	r3,r5,r2
 1805d44:	21000104 	addi	r4,r4,4
 1805d48:	183ffc26 	beq	r3,zero,1805d3c <__ram_exceptions_end+0xff7f5a4c>
 1805d4c:	003ebe06 	br	1805848 <__ram_exceptions_end+0xff7f5558>
 1805d50:	00c05504 	movi	r3,340
 1805d54:	18801236 	bltu	r3,r2,1805da0 <_malloc_r+0x6f8>
 1805d58:	8804d3fa 	srli	r2,r17,15
 1805d5c:	12001e04 	addi	r8,r2,120
 1805d60:	11c01dc4 	addi	r7,r2,119
 1805d64:	4209883a 	add	r4,r8,r8
 1805d68:	003e6d06 	br	1805720 <__ram_exceptions_end+0xff7f5430>
 1805d6c:	00c40004 	movi	r3,4096
 1805d70:	003f4606 	br	1805a8c <__ram_exceptions_end+0xff7f579c>
 1805d74:	00800044 	movi	r2,1
 1805d78:	a0800115 	stw	r2,4(r20)
 1805d7c:	003f7406 	br	1805b50 <__ram_exceptions_end+0xff7f5860>
 1805d80:	1805d0ba 	srai	r2,r3,2
 1805d84:	01c00044 	movi	r7,1
 1805d88:	30c00117 	ldw	r3,4(r6)
 1805d8c:	388e983a 	sll	r7,r7,r2
 1805d90:	2805883a 	mov	r2,r5
 1805d94:	38c6b03a 	or	r3,r7,r3
 1805d98:	30c00115 	stw	r3,4(r6)
 1805d9c:	003f9b06 	br	1805c0c <__ram_exceptions_end+0xff7f591c>
 1805da0:	00c15504 	movi	r3,1364
 1805da4:	18801a36 	bltu	r3,r2,1805e10 <_malloc_r+0x768>
 1805da8:	8804d4ba 	srli	r2,r17,18
 1805dac:	12001f44 	addi	r8,r2,125
 1805db0:	11c01f04 	addi	r7,r2,124
 1805db4:	4209883a 	add	r4,r8,r8
 1805db8:	003e5906 	br	1805720 <__ram_exceptions_end+0xff7f5430>
 1805dbc:	ad400404 	addi	r21,r21,16
 1805dc0:	003f1706 	br	1805a20 <__ram_exceptions_end+0xff7f5730>
 1805dc4:	00c01504 	movi	r3,84
 1805dc8:	18802336 	bltu	r3,r2,1805e58 <_malloc_r+0x7b0>
 1805dcc:	3804d33a 	srli	r2,r7,12
 1805dd0:	11401bc4 	addi	r5,r2,111
 1805dd4:	10c01b84 	addi	r3,r2,110
 1805dd8:	294b883a 	add	r5,r5,r5
 1805ddc:	003f7b06 	br	1805bcc <__ram_exceptions_end+0xff7f58dc>
 1805de0:	9c000217 	ldw	r16,8(r19)
 1805de4:	00bfff04 	movi	r2,-4
 1805de8:	80c00117 	ldw	r3,4(r16)
 1805dec:	1886703a 	and	r3,r3,r2
 1805df0:	003f5306 	br	1805b40 <__ram_exceptions_end+0xff7f5850>
 1805df4:	3083ffcc 	andi	r2,r6,4095
 1805df8:	103f181e 	bne	r2,zero,1805a5c <__ram_exceptions_end+0xff7f576c>
 1805dfc:	99000217 	ldw	r4,8(r19)
 1805e00:	b545883a 	add	r2,r22,r21
 1805e04:	10800054 	ori	r2,r2,1
 1805e08:	20800115 	stw	r2,4(r4)
 1805e0c:	003f3e06 	br	1805b08 <__ram_exceptions_end+0xff7f5818>
 1805e10:	01003f84 	movi	r4,254
 1805e14:	02001fc4 	movi	r8,127
 1805e18:	01c01f84 	movi	r7,126
 1805e1c:	003e4006 	br	1805720 <__ram_exceptions_end+0xff7f5430>
 1805e20:	00806134 	movhi	r2,388
 1805e24:	10946b04 	addi	r2,r2,20908
 1805e28:	15000015 	stw	r20,0(r2)
 1805e2c:	003f1106 	br	1805a74 <__ram_exceptions_end+0xff7f5784>
 1805e30:	00800044 	movi	r2,1
 1805e34:	002b883a 	mov	r21,zero
 1805e38:	003f1f06 	br	1805ab8 <__ram_exceptions_end+0xff7f57c8>
 1805e3c:	81400204 	addi	r5,r16,8
 1805e40:	9009883a 	mov	r4,r18
 1805e44:	1804f780 	call	1804f78 <_free_r>
 1805e48:	00806134 	movhi	r2,388
 1805e4c:	109c8604 	addi	r2,r2,29208
 1805e50:	10c00017 	ldw	r3,0(r2)
 1805e54:	003f2c06 	br	1805b08 <__ram_exceptions_end+0xff7f5818>
 1805e58:	00c05504 	movi	r3,340
 1805e5c:	18800536 	bltu	r3,r2,1805e74 <_malloc_r+0x7cc>
 1805e60:	3804d3fa 	srli	r2,r7,15
 1805e64:	11401e04 	addi	r5,r2,120
 1805e68:	10c01dc4 	addi	r3,r2,119
 1805e6c:	294b883a 	add	r5,r5,r5
 1805e70:	003f5606 	br	1805bcc <__ram_exceptions_end+0xff7f58dc>
 1805e74:	00c15504 	movi	r3,1364
 1805e78:	18800536 	bltu	r3,r2,1805e90 <_malloc_r+0x7e8>
 1805e7c:	3804d4ba 	srli	r2,r7,18
 1805e80:	11401f44 	addi	r5,r2,125
 1805e84:	10c01f04 	addi	r3,r2,124
 1805e88:	294b883a 	add	r5,r5,r5
 1805e8c:	003f4f06 	br	1805bcc <__ram_exceptions_end+0xff7f58dc>
 1805e90:	01403f84 	movi	r5,254
 1805e94:	00c01f84 	movi	r3,126
 1805e98:	003f4c06 	br	1805bcc <__ram_exceptions_end+0xff7f58dc>
 1805e9c:	98800117 	ldw	r2,4(r19)
 1805ea0:	003fa006 	br	1805d24 <__ram_exceptions_end+0xff7f5a34>
 1805ea4:	8808d0fa 	srli	r4,r17,3
 1805ea8:	20800044 	addi	r2,r4,1
 1805eac:	1085883a 	add	r2,r2,r2
 1805eb0:	003e9006 	br	18058f4 <__ram_exceptions_end+0xff7f5604>

01805eb4 <memchr>:
 1805eb4:	208000cc 	andi	r2,r4,3
 1805eb8:	280f883a 	mov	r7,r5
 1805ebc:	10003426 	beq	r2,zero,1805f90 <memchr+0xdc>
 1805ec0:	30bfffc4 	addi	r2,r6,-1
 1805ec4:	30001a26 	beq	r6,zero,1805f30 <memchr+0x7c>
 1805ec8:	20c00003 	ldbu	r3,0(r4)
 1805ecc:	29803fcc 	andi	r6,r5,255
 1805ed0:	30c0051e 	bne	r6,r3,1805ee8 <memchr+0x34>
 1805ed4:	00001806 	br	1805f38 <memchr+0x84>
 1805ed8:	10001526 	beq	r2,zero,1805f30 <memchr+0x7c>
 1805edc:	20c00003 	ldbu	r3,0(r4)
 1805ee0:	10bfffc4 	addi	r2,r2,-1
 1805ee4:	30c01426 	beq	r6,r3,1805f38 <memchr+0x84>
 1805ee8:	21000044 	addi	r4,r4,1
 1805eec:	20c000cc 	andi	r3,r4,3
 1805ef0:	183ff91e 	bne	r3,zero,1805ed8 <__ram_exceptions_end+0xff7f5be8>
 1805ef4:	020000c4 	movi	r8,3
 1805ef8:	40801136 	bltu	r8,r2,1805f40 <memchr+0x8c>
 1805efc:	10000c26 	beq	r2,zero,1805f30 <memchr+0x7c>
 1805f00:	20c00003 	ldbu	r3,0(r4)
 1805f04:	29403fcc 	andi	r5,r5,255
 1805f08:	28c00b26 	beq	r5,r3,1805f38 <memchr+0x84>
 1805f0c:	20c00044 	addi	r3,r4,1
 1805f10:	39803fcc 	andi	r6,r7,255
 1805f14:	2089883a 	add	r4,r4,r2
 1805f18:	00000306 	br	1805f28 <memchr+0x74>
 1805f1c:	18c00044 	addi	r3,r3,1
 1805f20:	197fffc3 	ldbu	r5,-1(r3)
 1805f24:	31400526 	beq	r6,r5,1805f3c <memchr+0x88>
 1805f28:	1805883a 	mov	r2,r3
 1805f2c:	20fffb1e 	bne	r4,r3,1805f1c <__ram_exceptions_end+0xff7f5c2c>
 1805f30:	0005883a 	mov	r2,zero
 1805f34:	f800283a 	ret
 1805f38:	2005883a 	mov	r2,r4
 1805f3c:	f800283a 	ret
 1805f40:	28c03fcc 	andi	r3,r5,255
 1805f44:	1812923a 	slli	r9,r3,8
 1805f48:	02ffbff4 	movhi	r11,65279
 1805f4c:	02a02074 	movhi	r10,32897
 1805f50:	48d2b03a 	or	r9,r9,r3
 1805f54:	4806943a 	slli	r3,r9,16
 1805f58:	5affbfc4 	addi	r11,r11,-257
 1805f5c:	52a02004 	addi	r10,r10,-32640
 1805f60:	48d2b03a 	or	r9,r9,r3
 1805f64:	20c00017 	ldw	r3,0(r4)
 1805f68:	48c6f03a 	xor	r3,r9,r3
 1805f6c:	1acd883a 	add	r6,r3,r11
 1805f70:	00c6303a 	nor	r3,zero,r3
 1805f74:	30c6703a 	and	r3,r6,r3
 1805f78:	1a86703a 	and	r3,r3,r10
 1805f7c:	183fe01e 	bne	r3,zero,1805f00 <__ram_exceptions_end+0xff7f5c10>
 1805f80:	10bfff04 	addi	r2,r2,-4
 1805f84:	21000104 	addi	r4,r4,4
 1805f88:	40bff636 	bltu	r8,r2,1805f64 <__ram_exceptions_end+0xff7f5c74>
 1805f8c:	003fdb06 	br	1805efc <__ram_exceptions_end+0xff7f5c0c>
 1805f90:	3005883a 	mov	r2,r6
 1805f94:	003fd706 	br	1805ef4 <__ram_exceptions_end+0xff7f5c04>

01805f98 <memcpy>:
 1805f98:	defffd04 	addi	sp,sp,-12
 1805f9c:	dfc00215 	stw	ra,8(sp)
 1805fa0:	dc400115 	stw	r17,4(sp)
 1805fa4:	dc000015 	stw	r16,0(sp)
 1805fa8:	00c003c4 	movi	r3,15
 1805fac:	2005883a 	mov	r2,r4
 1805fb0:	1980452e 	bgeu	r3,r6,18060c8 <memcpy+0x130>
 1805fb4:	2906b03a 	or	r3,r5,r4
 1805fb8:	18c000cc 	andi	r3,r3,3
 1805fbc:	1800441e 	bne	r3,zero,18060d0 <memcpy+0x138>
 1805fc0:	347ffc04 	addi	r17,r6,-16
 1805fc4:	8822d13a 	srli	r17,r17,4
 1805fc8:	28c00104 	addi	r3,r5,4
 1805fcc:	23400104 	addi	r13,r4,4
 1805fd0:	8820913a 	slli	r16,r17,4
 1805fd4:	2b000204 	addi	r12,r5,8
 1805fd8:	22c00204 	addi	r11,r4,8
 1805fdc:	84000504 	addi	r16,r16,20
 1805fe0:	2a800304 	addi	r10,r5,12
 1805fe4:	22400304 	addi	r9,r4,12
 1805fe8:	2c21883a 	add	r16,r5,r16
 1805fec:	2811883a 	mov	r8,r5
 1805ff0:	200f883a 	mov	r7,r4
 1805ff4:	41000017 	ldw	r4,0(r8)
 1805ff8:	1fc00017 	ldw	ra,0(r3)
 1805ffc:	63c00017 	ldw	r15,0(r12)
 1806000:	39000015 	stw	r4,0(r7)
 1806004:	53800017 	ldw	r14,0(r10)
 1806008:	6fc00015 	stw	ra,0(r13)
 180600c:	5bc00015 	stw	r15,0(r11)
 1806010:	4b800015 	stw	r14,0(r9)
 1806014:	18c00404 	addi	r3,r3,16
 1806018:	39c00404 	addi	r7,r7,16
 180601c:	42000404 	addi	r8,r8,16
 1806020:	6b400404 	addi	r13,r13,16
 1806024:	63000404 	addi	r12,r12,16
 1806028:	5ac00404 	addi	r11,r11,16
 180602c:	52800404 	addi	r10,r10,16
 1806030:	4a400404 	addi	r9,r9,16
 1806034:	1c3fef1e 	bne	r3,r16,1805ff4 <__ram_exceptions_end+0xff7f5d04>
 1806038:	89c00044 	addi	r7,r17,1
 180603c:	380e913a 	slli	r7,r7,4
 1806040:	310003cc 	andi	r4,r6,15
 1806044:	02c000c4 	movi	r11,3
 1806048:	11c7883a 	add	r3,r2,r7
 180604c:	29cb883a 	add	r5,r5,r7
 1806050:	5900212e 	bgeu	r11,r4,18060d8 <memcpy+0x140>
 1806054:	1813883a 	mov	r9,r3
 1806058:	2811883a 	mov	r8,r5
 180605c:	200f883a 	mov	r7,r4
 1806060:	42800017 	ldw	r10,0(r8)
 1806064:	4a400104 	addi	r9,r9,4
 1806068:	39ffff04 	addi	r7,r7,-4
 180606c:	4abfff15 	stw	r10,-4(r9)
 1806070:	42000104 	addi	r8,r8,4
 1806074:	59fffa36 	bltu	r11,r7,1806060 <__ram_exceptions_end+0xff7f5d70>
 1806078:	213fff04 	addi	r4,r4,-4
 180607c:	2008d0ba 	srli	r4,r4,2
 1806080:	318000cc 	andi	r6,r6,3
 1806084:	21000044 	addi	r4,r4,1
 1806088:	2109883a 	add	r4,r4,r4
 180608c:	2109883a 	add	r4,r4,r4
 1806090:	1907883a 	add	r3,r3,r4
 1806094:	290b883a 	add	r5,r5,r4
 1806098:	30000626 	beq	r6,zero,18060b4 <memcpy+0x11c>
 180609c:	198d883a 	add	r6,r3,r6
 18060a0:	29c00003 	ldbu	r7,0(r5)
 18060a4:	18c00044 	addi	r3,r3,1
 18060a8:	29400044 	addi	r5,r5,1
 18060ac:	19ffffc5 	stb	r7,-1(r3)
 18060b0:	19bffb1e 	bne	r3,r6,18060a0 <__ram_exceptions_end+0xff7f5db0>
 18060b4:	dfc00217 	ldw	ra,8(sp)
 18060b8:	dc400117 	ldw	r17,4(sp)
 18060bc:	dc000017 	ldw	r16,0(sp)
 18060c0:	dec00304 	addi	sp,sp,12
 18060c4:	f800283a 	ret
 18060c8:	2007883a 	mov	r3,r4
 18060cc:	003ff206 	br	1806098 <__ram_exceptions_end+0xff7f5da8>
 18060d0:	2007883a 	mov	r3,r4
 18060d4:	003ff106 	br	180609c <__ram_exceptions_end+0xff7f5dac>
 18060d8:	200d883a 	mov	r6,r4
 18060dc:	003fee06 	br	1806098 <__ram_exceptions_end+0xff7f5da8>

018060e0 <memset>:
 18060e0:	20c000cc 	andi	r3,r4,3
 18060e4:	2005883a 	mov	r2,r4
 18060e8:	18004426 	beq	r3,zero,18061fc <memset+0x11c>
 18060ec:	31ffffc4 	addi	r7,r6,-1
 18060f0:	30004026 	beq	r6,zero,18061f4 <memset+0x114>
 18060f4:	2813883a 	mov	r9,r5
 18060f8:	200d883a 	mov	r6,r4
 18060fc:	2007883a 	mov	r3,r4
 1806100:	00000406 	br	1806114 <memset+0x34>
 1806104:	3a3fffc4 	addi	r8,r7,-1
 1806108:	31800044 	addi	r6,r6,1
 180610c:	38003926 	beq	r7,zero,18061f4 <memset+0x114>
 1806110:	400f883a 	mov	r7,r8
 1806114:	18c00044 	addi	r3,r3,1
 1806118:	32400005 	stb	r9,0(r6)
 180611c:	1a0000cc 	andi	r8,r3,3
 1806120:	403ff81e 	bne	r8,zero,1806104 <__ram_exceptions_end+0xff7f5e14>
 1806124:	010000c4 	movi	r4,3
 1806128:	21c02d2e 	bgeu	r4,r7,18061e0 <memset+0x100>
 180612c:	29003fcc 	andi	r4,r5,255
 1806130:	200c923a 	slli	r6,r4,8
 1806134:	3108b03a 	or	r4,r6,r4
 1806138:	200c943a 	slli	r6,r4,16
 180613c:	218cb03a 	or	r6,r4,r6
 1806140:	010003c4 	movi	r4,15
 1806144:	21c0182e 	bgeu	r4,r7,18061a8 <memset+0xc8>
 1806148:	3b3ffc04 	addi	r12,r7,-16
 180614c:	6018d13a 	srli	r12,r12,4
 1806150:	1a000104 	addi	r8,r3,4
 1806154:	1ac00204 	addi	r11,r3,8
 1806158:	6008913a 	slli	r4,r12,4
 180615c:	1a800304 	addi	r10,r3,12
 1806160:	1813883a 	mov	r9,r3
 1806164:	21000504 	addi	r4,r4,20
 1806168:	1909883a 	add	r4,r3,r4
 180616c:	49800015 	stw	r6,0(r9)
 1806170:	41800015 	stw	r6,0(r8)
 1806174:	59800015 	stw	r6,0(r11)
 1806178:	51800015 	stw	r6,0(r10)
 180617c:	42000404 	addi	r8,r8,16
 1806180:	4a400404 	addi	r9,r9,16
 1806184:	5ac00404 	addi	r11,r11,16
 1806188:	52800404 	addi	r10,r10,16
 180618c:	413ff71e 	bne	r8,r4,180616c <__ram_exceptions_end+0xff7f5e7c>
 1806190:	63000044 	addi	r12,r12,1
 1806194:	6018913a 	slli	r12,r12,4
 1806198:	39c003cc 	andi	r7,r7,15
 180619c:	010000c4 	movi	r4,3
 18061a0:	1b07883a 	add	r3,r3,r12
 18061a4:	21c00e2e 	bgeu	r4,r7,18061e0 <memset+0x100>
 18061a8:	1813883a 	mov	r9,r3
 18061ac:	3811883a 	mov	r8,r7
 18061b0:	010000c4 	movi	r4,3
 18061b4:	49800015 	stw	r6,0(r9)
 18061b8:	423fff04 	addi	r8,r8,-4
 18061bc:	4a400104 	addi	r9,r9,4
 18061c0:	223ffc36 	bltu	r4,r8,18061b4 <__ram_exceptions_end+0xff7f5ec4>
 18061c4:	393fff04 	addi	r4,r7,-4
 18061c8:	2008d0ba 	srli	r4,r4,2
 18061cc:	39c000cc 	andi	r7,r7,3
 18061d0:	21000044 	addi	r4,r4,1
 18061d4:	2109883a 	add	r4,r4,r4
 18061d8:	2109883a 	add	r4,r4,r4
 18061dc:	1907883a 	add	r3,r3,r4
 18061e0:	38000526 	beq	r7,zero,18061f8 <memset+0x118>
 18061e4:	19cf883a 	add	r7,r3,r7
 18061e8:	19400005 	stb	r5,0(r3)
 18061ec:	18c00044 	addi	r3,r3,1
 18061f0:	38fffd1e 	bne	r7,r3,18061e8 <__ram_exceptions_end+0xff7f5ef8>
 18061f4:	f800283a 	ret
 18061f8:	f800283a 	ret
 18061fc:	2007883a 	mov	r3,r4
 1806200:	300f883a 	mov	r7,r6
 1806204:	003fc706 	br	1806124 <__ram_exceptions_end+0xff7f5e34>

01806208 <_Balloc>:
 1806208:	20801317 	ldw	r2,76(r4)
 180620c:	defffc04 	addi	sp,sp,-16
 1806210:	dc400115 	stw	r17,4(sp)
 1806214:	dc000015 	stw	r16,0(sp)
 1806218:	dfc00315 	stw	ra,12(sp)
 180621c:	dc800215 	stw	r18,8(sp)
 1806220:	2023883a 	mov	r17,r4
 1806224:	2821883a 	mov	r16,r5
 1806228:	10000f26 	beq	r2,zero,1806268 <_Balloc+0x60>
 180622c:	8407883a 	add	r3,r16,r16
 1806230:	18c7883a 	add	r3,r3,r3
 1806234:	10c7883a 	add	r3,r2,r3
 1806238:	18800017 	ldw	r2,0(r3)
 180623c:	10001126 	beq	r2,zero,1806284 <_Balloc+0x7c>
 1806240:	11000017 	ldw	r4,0(r2)
 1806244:	19000015 	stw	r4,0(r3)
 1806248:	10000415 	stw	zero,16(r2)
 180624c:	10000315 	stw	zero,12(r2)
 1806250:	dfc00317 	ldw	ra,12(sp)
 1806254:	dc800217 	ldw	r18,8(sp)
 1806258:	dc400117 	ldw	r17,4(sp)
 180625c:	dc000017 	ldw	r16,0(sp)
 1806260:	dec00404 	addi	sp,sp,16
 1806264:	f800283a 	ret
 1806268:	01800844 	movi	r6,33
 180626c:	01400104 	movi	r5,4
 1806270:	1808c780 	call	1808c78 <_calloc_r>
 1806274:	88801315 	stw	r2,76(r17)
 1806278:	103fec1e 	bne	r2,zero,180622c <__ram_exceptions_end+0xff7f5f3c>
 180627c:	0005883a 	mov	r2,zero
 1806280:	003ff306 	br	1806250 <__ram_exceptions_end+0xff7f5f60>
 1806284:	01400044 	movi	r5,1
 1806288:	2c24983a 	sll	r18,r5,r16
 180628c:	8809883a 	mov	r4,r17
 1806290:	91800144 	addi	r6,r18,5
 1806294:	318d883a 	add	r6,r6,r6
 1806298:	318d883a 	add	r6,r6,r6
 180629c:	1808c780 	call	1808c78 <_calloc_r>
 18062a0:	103ff626 	beq	r2,zero,180627c <__ram_exceptions_end+0xff7f5f8c>
 18062a4:	14000115 	stw	r16,4(r2)
 18062a8:	14800215 	stw	r18,8(r2)
 18062ac:	003fe606 	br	1806248 <__ram_exceptions_end+0xff7f5f58>

018062b0 <_Bfree>:
 18062b0:	28000826 	beq	r5,zero,18062d4 <_Bfree+0x24>
 18062b4:	28c00117 	ldw	r3,4(r5)
 18062b8:	20801317 	ldw	r2,76(r4)
 18062bc:	18c7883a 	add	r3,r3,r3
 18062c0:	18c7883a 	add	r3,r3,r3
 18062c4:	10c5883a 	add	r2,r2,r3
 18062c8:	10c00017 	ldw	r3,0(r2)
 18062cc:	28c00015 	stw	r3,0(r5)
 18062d0:	11400015 	stw	r5,0(r2)
 18062d4:	f800283a 	ret

018062d8 <__multadd>:
 18062d8:	defffa04 	addi	sp,sp,-24
 18062dc:	dc800315 	stw	r18,12(sp)
 18062e0:	dc400215 	stw	r17,8(sp)
 18062e4:	dc000115 	stw	r16,4(sp)
 18062e8:	2823883a 	mov	r17,r5
 18062ec:	2c000417 	ldw	r16,16(r5)
 18062f0:	dfc00515 	stw	ra,20(sp)
 18062f4:	dcc00415 	stw	r19,16(sp)
 18062f8:	2025883a 	mov	r18,r4
 18062fc:	29400504 	addi	r5,r5,20
 1806300:	0011883a 	mov	r8,zero
 1806304:	28c00017 	ldw	r3,0(r5)
 1806308:	29400104 	addi	r5,r5,4
 180630c:	42000044 	addi	r8,r8,1
 1806310:	18bfffcc 	andi	r2,r3,65535
 1806314:	1185383a 	mul	r2,r2,r6
 1806318:	1806d43a 	srli	r3,r3,16
 180631c:	11cf883a 	add	r7,r2,r7
 1806320:	3808d43a 	srli	r4,r7,16
 1806324:	1987383a 	mul	r3,r3,r6
 1806328:	38bfffcc 	andi	r2,r7,65535
 180632c:	1907883a 	add	r3,r3,r4
 1806330:	1808943a 	slli	r4,r3,16
 1806334:	180ed43a 	srli	r7,r3,16
 1806338:	2085883a 	add	r2,r4,r2
 180633c:	28bfff15 	stw	r2,-4(r5)
 1806340:	443ff016 	blt	r8,r16,1806304 <__ram_exceptions_end+0xff7f6014>
 1806344:	38000926 	beq	r7,zero,180636c <__multadd+0x94>
 1806348:	88800217 	ldw	r2,8(r17)
 180634c:	80800f0e 	bge	r16,r2,180638c <__multadd+0xb4>
 1806350:	80800144 	addi	r2,r16,5
 1806354:	1085883a 	add	r2,r2,r2
 1806358:	1085883a 	add	r2,r2,r2
 180635c:	8885883a 	add	r2,r17,r2
 1806360:	11c00015 	stw	r7,0(r2)
 1806364:	84000044 	addi	r16,r16,1
 1806368:	8c000415 	stw	r16,16(r17)
 180636c:	8805883a 	mov	r2,r17
 1806370:	dfc00517 	ldw	ra,20(sp)
 1806374:	dcc00417 	ldw	r19,16(sp)
 1806378:	dc800317 	ldw	r18,12(sp)
 180637c:	dc400217 	ldw	r17,8(sp)
 1806380:	dc000117 	ldw	r16,4(sp)
 1806384:	dec00604 	addi	sp,sp,24
 1806388:	f800283a 	ret
 180638c:	89400117 	ldw	r5,4(r17)
 1806390:	9009883a 	mov	r4,r18
 1806394:	d9c00015 	stw	r7,0(sp)
 1806398:	29400044 	addi	r5,r5,1
 180639c:	18062080 	call	1806208 <_Balloc>
 18063a0:	89800417 	ldw	r6,16(r17)
 18063a4:	89400304 	addi	r5,r17,12
 18063a8:	11000304 	addi	r4,r2,12
 18063ac:	31800084 	addi	r6,r6,2
 18063b0:	318d883a 	add	r6,r6,r6
 18063b4:	318d883a 	add	r6,r6,r6
 18063b8:	1027883a 	mov	r19,r2
 18063bc:	1805f980 	call	1805f98 <memcpy>
 18063c0:	d9c00017 	ldw	r7,0(sp)
 18063c4:	88000a26 	beq	r17,zero,18063f0 <__multadd+0x118>
 18063c8:	88c00117 	ldw	r3,4(r17)
 18063cc:	90801317 	ldw	r2,76(r18)
 18063d0:	18c7883a 	add	r3,r3,r3
 18063d4:	18c7883a 	add	r3,r3,r3
 18063d8:	10c5883a 	add	r2,r2,r3
 18063dc:	10c00017 	ldw	r3,0(r2)
 18063e0:	88c00015 	stw	r3,0(r17)
 18063e4:	14400015 	stw	r17,0(r2)
 18063e8:	9823883a 	mov	r17,r19
 18063ec:	003fd806 	br	1806350 <__ram_exceptions_end+0xff7f6060>
 18063f0:	9823883a 	mov	r17,r19
 18063f4:	003fd606 	br	1806350 <__ram_exceptions_end+0xff7f6060>

018063f8 <__s2b>:
 18063f8:	defff904 	addi	sp,sp,-28
 18063fc:	dc400115 	stw	r17,4(sp)
 1806400:	dc000015 	stw	r16,0(sp)
 1806404:	2023883a 	mov	r17,r4
 1806408:	2821883a 	mov	r16,r5
 180640c:	39000204 	addi	r4,r7,8
 1806410:	01400244 	movi	r5,9
 1806414:	dcc00315 	stw	r19,12(sp)
 1806418:	dc800215 	stw	r18,8(sp)
 180641c:	dfc00615 	stw	ra,24(sp)
 1806420:	dd400515 	stw	r21,20(sp)
 1806424:	dd000415 	stw	r20,16(sp)
 1806428:	3825883a 	mov	r18,r7
 180642c:	3027883a 	mov	r19,r6
 1806430:	180ab240 	call	180ab24 <__divsi3>
 1806434:	00c00044 	movi	r3,1
 1806438:	000b883a 	mov	r5,zero
 180643c:	1880030e 	bge	r3,r2,180644c <__s2b+0x54>
 1806440:	18c7883a 	add	r3,r3,r3
 1806444:	29400044 	addi	r5,r5,1
 1806448:	18bffd16 	blt	r3,r2,1806440 <__ram_exceptions_end+0xff7f6150>
 180644c:	8809883a 	mov	r4,r17
 1806450:	18062080 	call	1806208 <_Balloc>
 1806454:	d8c00717 	ldw	r3,28(sp)
 1806458:	10c00515 	stw	r3,20(r2)
 180645c:	00c00044 	movi	r3,1
 1806460:	10c00415 	stw	r3,16(r2)
 1806464:	00c00244 	movi	r3,9
 1806468:	1cc0210e 	bge	r3,r19,18064f0 <__s2b+0xf8>
 180646c:	80eb883a 	add	r21,r16,r3
 1806470:	a829883a 	mov	r20,r21
 1806474:	84e1883a 	add	r16,r16,r19
 1806478:	a1c00007 	ldb	r7,0(r20)
 180647c:	01800284 	movi	r6,10
 1806480:	a5000044 	addi	r20,r20,1
 1806484:	100b883a 	mov	r5,r2
 1806488:	39fff404 	addi	r7,r7,-48
 180648c:	8809883a 	mov	r4,r17
 1806490:	18062d80 	call	18062d8 <__multadd>
 1806494:	a43ff81e 	bne	r20,r16,1806478 <__ram_exceptions_end+0xff7f6188>
 1806498:	ace1883a 	add	r16,r21,r19
 180649c:	843ffe04 	addi	r16,r16,-8
 18064a0:	9c800a0e 	bge	r19,r18,18064cc <__s2b+0xd4>
 18064a4:	94e5c83a 	sub	r18,r18,r19
 18064a8:	84a5883a 	add	r18,r16,r18
 18064ac:	81c00007 	ldb	r7,0(r16)
 18064b0:	01800284 	movi	r6,10
 18064b4:	84000044 	addi	r16,r16,1
 18064b8:	100b883a 	mov	r5,r2
 18064bc:	39fff404 	addi	r7,r7,-48
 18064c0:	8809883a 	mov	r4,r17
 18064c4:	18062d80 	call	18062d8 <__multadd>
 18064c8:	84bff81e 	bne	r16,r18,18064ac <__ram_exceptions_end+0xff7f61bc>
 18064cc:	dfc00617 	ldw	ra,24(sp)
 18064d0:	dd400517 	ldw	r21,20(sp)
 18064d4:	dd000417 	ldw	r20,16(sp)
 18064d8:	dcc00317 	ldw	r19,12(sp)
 18064dc:	dc800217 	ldw	r18,8(sp)
 18064e0:	dc400117 	ldw	r17,4(sp)
 18064e4:	dc000017 	ldw	r16,0(sp)
 18064e8:	dec00704 	addi	sp,sp,28
 18064ec:	f800283a 	ret
 18064f0:	84000284 	addi	r16,r16,10
 18064f4:	1827883a 	mov	r19,r3
 18064f8:	003fe906 	br	18064a0 <__ram_exceptions_end+0xff7f61b0>

018064fc <__hi0bits>:
 18064fc:	20bfffec 	andhi	r2,r4,65535
 1806500:	1000141e 	bne	r2,zero,1806554 <__hi0bits+0x58>
 1806504:	2008943a 	slli	r4,r4,16
 1806508:	00800404 	movi	r2,16
 180650c:	20ffc02c 	andhi	r3,r4,65280
 1806510:	1800021e 	bne	r3,zero,180651c <__hi0bits+0x20>
 1806514:	2008923a 	slli	r4,r4,8
 1806518:	10800204 	addi	r2,r2,8
 180651c:	20fc002c 	andhi	r3,r4,61440
 1806520:	1800021e 	bne	r3,zero,180652c <__hi0bits+0x30>
 1806524:	2008913a 	slli	r4,r4,4
 1806528:	10800104 	addi	r2,r2,4
 180652c:	20f0002c 	andhi	r3,r4,49152
 1806530:	1800031e 	bne	r3,zero,1806540 <__hi0bits+0x44>
 1806534:	2109883a 	add	r4,r4,r4
 1806538:	10800084 	addi	r2,r2,2
 180653c:	2109883a 	add	r4,r4,r4
 1806540:	20000316 	blt	r4,zero,1806550 <__hi0bits+0x54>
 1806544:	2110002c 	andhi	r4,r4,16384
 1806548:	2000041e 	bne	r4,zero,180655c <__hi0bits+0x60>
 180654c:	00800804 	movi	r2,32
 1806550:	f800283a 	ret
 1806554:	0005883a 	mov	r2,zero
 1806558:	003fec06 	br	180650c <__ram_exceptions_end+0xff7f621c>
 180655c:	10800044 	addi	r2,r2,1
 1806560:	f800283a 	ret

01806564 <__lo0bits>:
 1806564:	20c00017 	ldw	r3,0(r4)
 1806568:	188001cc 	andi	r2,r3,7
 180656c:	10000826 	beq	r2,zero,1806590 <__lo0bits+0x2c>
 1806570:	1880004c 	andi	r2,r3,1
 1806574:	1000211e 	bne	r2,zero,18065fc <__lo0bits+0x98>
 1806578:	1880008c 	andi	r2,r3,2
 180657c:	1000211e 	bne	r2,zero,1806604 <__lo0bits+0xa0>
 1806580:	1806d0ba 	srli	r3,r3,2
 1806584:	00800084 	movi	r2,2
 1806588:	20c00015 	stw	r3,0(r4)
 180658c:	f800283a 	ret
 1806590:	18bfffcc 	andi	r2,r3,65535
 1806594:	10001326 	beq	r2,zero,18065e4 <__lo0bits+0x80>
 1806598:	0005883a 	mov	r2,zero
 180659c:	19403fcc 	andi	r5,r3,255
 18065a0:	2800021e 	bne	r5,zero,18065ac <__lo0bits+0x48>
 18065a4:	1806d23a 	srli	r3,r3,8
 18065a8:	10800204 	addi	r2,r2,8
 18065ac:	194003cc 	andi	r5,r3,15
 18065b0:	2800021e 	bne	r5,zero,18065bc <__lo0bits+0x58>
 18065b4:	1806d13a 	srli	r3,r3,4
 18065b8:	10800104 	addi	r2,r2,4
 18065bc:	194000cc 	andi	r5,r3,3
 18065c0:	2800021e 	bne	r5,zero,18065cc <__lo0bits+0x68>
 18065c4:	1806d0ba 	srli	r3,r3,2
 18065c8:	10800084 	addi	r2,r2,2
 18065cc:	1940004c 	andi	r5,r3,1
 18065d0:	2800081e 	bne	r5,zero,18065f4 <__lo0bits+0x90>
 18065d4:	1806d07a 	srli	r3,r3,1
 18065d8:	1800051e 	bne	r3,zero,18065f0 <__lo0bits+0x8c>
 18065dc:	00800804 	movi	r2,32
 18065e0:	f800283a 	ret
 18065e4:	1806d43a 	srli	r3,r3,16
 18065e8:	00800404 	movi	r2,16
 18065ec:	003feb06 	br	180659c <__ram_exceptions_end+0xff7f62ac>
 18065f0:	10800044 	addi	r2,r2,1
 18065f4:	20c00015 	stw	r3,0(r4)
 18065f8:	f800283a 	ret
 18065fc:	0005883a 	mov	r2,zero
 1806600:	f800283a 	ret
 1806604:	1806d07a 	srli	r3,r3,1
 1806608:	00800044 	movi	r2,1
 180660c:	20c00015 	stw	r3,0(r4)
 1806610:	f800283a 	ret

01806614 <__i2b>:
 1806614:	defffd04 	addi	sp,sp,-12
 1806618:	dc000015 	stw	r16,0(sp)
 180661c:	04000044 	movi	r16,1
 1806620:	dc400115 	stw	r17,4(sp)
 1806624:	2823883a 	mov	r17,r5
 1806628:	800b883a 	mov	r5,r16
 180662c:	dfc00215 	stw	ra,8(sp)
 1806630:	18062080 	call	1806208 <_Balloc>
 1806634:	14400515 	stw	r17,20(r2)
 1806638:	14000415 	stw	r16,16(r2)
 180663c:	dfc00217 	ldw	ra,8(sp)
 1806640:	dc400117 	ldw	r17,4(sp)
 1806644:	dc000017 	ldw	r16,0(sp)
 1806648:	dec00304 	addi	sp,sp,12
 180664c:	f800283a 	ret

01806650 <__multiply>:
 1806650:	defffa04 	addi	sp,sp,-24
 1806654:	dcc00315 	stw	r19,12(sp)
 1806658:	dc800215 	stw	r18,8(sp)
 180665c:	34c00417 	ldw	r19,16(r6)
 1806660:	2c800417 	ldw	r18,16(r5)
 1806664:	dd000415 	stw	r20,16(sp)
 1806668:	dc400115 	stw	r17,4(sp)
 180666c:	dfc00515 	stw	ra,20(sp)
 1806670:	dc000015 	stw	r16,0(sp)
 1806674:	2829883a 	mov	r20,r5
 1806678:	3023883a 	mov	r17,r6
 180667c:	94c0050e 	bge	r18,r19,1806694 <__multiply+0x44>
 1806680:	9007883a 	mov	r3,r18
 1806684:	3029883a 	mov	r20,r6
 1806688:	9825883a 	mov	r18,r19
 180668c:	2823883a 	mov	r17,r5
 1806690:	1827883a 	mov	r19,r3
 1806694:	a0800217 	ldw	r2,8(r20)
 1806698:	94e1883a 	add	r16,r18,r19
 180669c:	a1400117 	ldw	r5,4(r20)
 18066a0:	1400010e 	bge	r2,r16,18066a8 <__multiply+0x58>
 18066a4:	29400044 	addi	r5,r5,1
 18066a8:	18062080 	call	1806208 <_Balloc>
 18066ac:	8415883a 	add	r10,r16,r16
 18066b0:	12c00504 	addi	r11,r2,20
 18066b4:	5295883a 	add	r10,r10,r10
 18066b8:	5a95883a 	add	r10,r11,r10
 18066bc:	5807883a 	mov	r3,r11
 18066c0:	5a80032e 	bgeu	r11,r10,18066d0 <__multiply+0x80>
 18066c4:	18000015 	stw	zero,0(r3)
 18066c8:	18c00104 	addi	r3,r3,4
 18066cc:	1abffd36 	bltu	r3,r10,18066c4 <__ram_exceptions_end+0xff7f63d4>
 18066d0:	9ce7883a 	add	r19,r19,r19
 18066d4:	94a5883a 	add	r18,r18,r18
 18066d8:	89800504 	addi	r6,r17,20
 18066dc:	9ce7883a 	add	r19,r19,r19
 18066e0:	a3400504 	addi	r13,r20,20
 18066e4:	94a5883a 	add	r18,r18,r18
 18066e8:	34d9883a 	add	r12,r6,r19
 18066ec:	6c93883a 	add	r9,r13,r18
 18066f0:	3300422e 	bgeu	r6,r12,18067fc <__multiply+0x1ac>
 18066f4:	37c00017 	ldw	ra,0(r6)
 18066f8:	fbffffcc 	andi	r15,ra,65535
 18066fc:	78001b26 	beq	r15,zero,180676c <__multiply+0x11c>
 1806700:	5811883a 	mov	r8,r11
 1806704:	681d883a 	mov	r14,r13
 1806708:	000f883a 	mov	r7,zero
 180670c:	71000017 	ldw	r4,0(r14)
 1806710:	40c00017 	ldw	r3,0(r8)
 1806714:	73800104 	addi	r14,r14,4
 1806718:	217fffcc 	andi	r5,r4,65535
 180671c:	2bcb383a 	mul	r5,r5,r15
 1806720:	2008d43a 	srli	r4,r4,16
 1806724:	1c7fffcc 	andi	r17,r3,65535
 1806728:	2c4b883a 	add	r5,r5,r17
 180672c:	29cb883a 	add	r5,r5,r7
 1806730:	23c9383a 	mul	r4,r4,r15
 1806734:	1806d43a 	srli	r3,r3,16
 1806738:	280ed43a 	srli	r7,r5,16
 180673c:	297fffcc 	andi	r5,r5,65535
 1806740:	20c7883a 	add	r3,r4,r3
 1806744:	19c7883a 	add	r3,r3,r7
 1806748:	1808943a 	slli	r4,r3,16
 180674c:	4023883a 	mov	r17,r8
 1806750:	180ed43a 	srli	r7,r3,16
 1806754:	214ab03a 	or	r5,r4,r5
 1806758:	41400015 	stw	r5,0(r8)
 180675c:	42000104 	addi	r8,r8,4
 1806760:	727fea36 	bltu	r14,r9,180670c <__ram_exceptions_end+0xff7f641c>
 1806764:	89c00115 	stw	r7,4(r17)
 1806768:	37c00017 	ldw	ra,0(r6)
 180676c:	f83ed43a 	srli	ra,ra,16
 1806770:	f8001f26 	beq	ra,zero,18067f0 <__multiply+0x1a0>
 1806774:	58c00017 	ldw	r3,0(r11)
 1806778:	681d883a 	mov	r14,r13
 180677c:	581f883a 	mov	r15,r11
 1806780:	1811883a 	mov	r8,r3
 1806784:	5825883a 	mov	r18,r11
 1806788:	000f883a 	mov	r7,zero
 180678c:	00000106 	br	1806794 <__multiply+0x144>
 1806790:	8825883a 	mov	r18,r17
 1806794:	7140000b 	ldhu	r5,0(r14)
 1806798:	4010d43a 	srli	r8,r8,16
 180679c:	193fffcc 	andi	r4,r3,65535
 18067a0:	2fcb383a 	mul	r5,r5,ra
 18067a4:	7bc00104 	addi	r15,r15,4
 18067a8:	73800104 	addi	r14,r14,4
 18067ac:	2a0b883a 	add	r5,r5,r8
 18067b0:	29cb883a 	add	r5,r5,r7
 18067b4:	2806943a 	slli	r3,r5,16
 18067b8:	94400104 	addi	r17,r18,4
 18067bc:	280ad43a 	srli	r5,r5,16
 18067c0:	1908b03a 	or	r4,r3,r4
 18067c4:	793fff15 	stw	r4,-4(r15)
 18067c8:	70ffff17 	ldw	r3,-4(r14)
 18067cc:	8a000017 	ldw	r8,0(r17)
 18067d0:	1806d43a 	srli	r3,r3,16
 18067d4:	413fffcc 	andi	r4,r8,65535
 18067d8:	1fc7383a 	mul	r3,r3,ra
 18067dc:	1907883a 	add	r3,r3,r4
 18067e0:	1947883a 	add	r3,r3,r5
 18067e4:	180ed43a 	srli	r7,r3,16
 18067e8:	727fe936 	bltu	r14,r9,1806790 <__ram_exceptions_end+0xff7f64a0>
 18067ec:	90c00115 	stw	r3,4(r18)
 18067f0:	31800104 	addi	r6,r6,4
 18067f4:	5ac00104 	addi	r11,r11,4
 18067f8:	333fbe36 	bltu	r6,r12,18066f4 <__ram_exceptions_end+0xff7f6404>
 18067fc:	0400090e 	bge	zero,r16,1806824 <__multiply+0x1d4>
 1806800:	50ffff17 	ldw	r3,-4(r10)
 1806804:	52bfff04 	addi	r10,r10,-4
 1806808:	18000326 	beq	r3,zero,1806818 <__multiply+0x1c8>
 180680c:	00000506 	br	1806824 <__multiply+0x1d4>
 1806810:	50c00017 	ldw	r3,0(r10)
 1806814:	1800031e 	bne	r3,zero,1806824 <__multiply+0x1d4>
 1806818:	843fffc4 	addi	r16,r16,-1
 180681c:	52bfff04 	addi	r10,r10,-4
 1806820:	803ffb1e 	bne	r16,zero,1806810 <__ram_exceptions_end+0xff7f6520>
 1806824:	14000415 	stw	r16,16(r2)
 1806828:	dfc00517 	ldw	ra,20(sp)
 180682c:	dd000417 	ldw	r20,16(sp)
 1806830:	dcc00317 	ldw	r19,12(sp)
 1806834:	dc800217 	ldw	r18,8(sp)
 1806838:	dc400117 	ldw	r17,4(sp)
 180683c:	dc000017 	ldw	r16,0(sp)
 1806840:	dec00604 	addi	sp,sp,24
 1806844:	f800283a 	ret

01806848 <__pow5mult>:
 1806848:	defffa04 	addi	sp,sp,-24
 180684c:	dcc00315 	stw	r19,12(sp)
 1806850:	dc000015 	stw	r16,0(sp)
 1806854:	dfc00515 	stw	ra,20(sp)
 1806858:	dd000415 	stw	r20,16(sp)
 180685c:	dc800215 	stw	r18,8(sp)
 1806860:	dc400115 	stw	r17,4(sp)
 1806864:	308000cc 	andi	r2,r6,3
 1806868:	3021883a 	mov	r16,r6
 180686c:	2027883a 	mov	r19,r4
 1806870:	10002f1e 	bne	r2,zero,1806930 <__pow5mult+0xe8>
 1806874:	2825883a 	mov	r18,r5
 1806878:	8021d0ba 	srai	r16,r16,2
 180687c:	80001a26 	beq	r16,zero,18068e8 <__pow5mult+0xa0>
 1806880:	9c401217 	ldw	r17,72(r19)
 1806884:	8800061e 	bne	r17,zero,18068a0 <__pow5mult+0x58>
 1806888:	00003406 	br	180695c <__pow5mult+0x114>
 180688c:	8021d07a 	srai	r16,r16,1
 1806890:	80001526 	beq	r16,zero,18068e8 <__pow5mult+0xa0>
 1806894:	88800017 	ldw	r2,0(r17)
 1806898:	10001c26 	beq	r2,zero,180690c <__pow5mult+0xc4>
 180689c:	1023883a 	mov	r17,r2
 18068a0:	8080004c 	andi	r2,r16,1
 18068a4:	103ff926 	beq	r2,zero,180688c <__ram_exceptions_end+0xff7f659c>
 18068a8:	880d883a 	mov	r6,r17
 18068ac:	900b883a 	mov	r5,r18
 18068b0:	9809883a 	mov	r4,r19
 18068b4:	18066500 	call	1806650 <__multiply>
 18068b8:	90001b26 	beq	r18,zero,1806928 <__pow5mult+0xe0>
 18068bc:	91000117 	ldw	r4,4(r18)
 18068c0:	98c01317 	ldw	r3,76(r19)
 18068c4:	8021d07a 	srai	r16,r16,1
 18068c8:	2109883a 	add	r4,r4,r4
 18068cc:	2109883a 	add	r4,r4,r4
 18068d0:	1907883a 	add	r3,r3,r4
 18068d4:	19000017 	ldw	r4,0(r3)
 18068d8:	91000015 	stw	r4,0(r18)
 18068dc:	1c800015 	stw	r18,0(r3)
 18068e0:	1025883a 	mov	r18,r2
 18068e4:	803feb1e 	bne	r16,zero,1806894 <__ram_exceptions_end+0xff7f65a4>
 18068e8:	9005883a 	mov	r2,r18
 18068ec:	dfc00517 	ldw	ra,20(sp)
 18068f0:	dd000417 	ldw	r20,16(sp)
 18068f4:	dcc00317 	ldw	r19,12(sp)
 18068f8:	dc800217 	ldw	r18,8(sp)
 18068fc:	dc400117 	ldw	r17,4(sp)
 1806900:	dc000017 	ldw	r16,0(sp)
 1806904:	dec00604 	addi	sp,sp,24
 1806908:	f800283a 	ret
 180690c:	880d883a 	mov	r6,r17
 1806910:	880b883a 	mov	r5,r17
 1806914:	9809883a 	mov	r4,r19
 1806918:	18066500 	call	1806650 <__multiply>
 180691c:	88800015 	stw	r2,0(r17)
 1806920:	10000015 	stw	zero,0(r2)
 1806924:	003fdd06 	br	180689c <__ram_exceptions_end+0xff7f65ac>
 1806928:	1025883a 	mov	r18,r2
 180692c:	003fd706 	br	180688c <__ram_exceptions_end+0xff7f659c>
 1806930:	10bfffc4 	addi	r2,r2,-1
 1806934:	1085883a 	add	r2,r2,r2
 1806938:	00c06134 	movhi	r3,388
 180693c:	18c23204 	addi	r3,r3,2248
 1806940:	1085883a 	add	r2,r2,r2
 1806944:	1885883a 	add	r2,r3,r2
 1806948:	11800017 	ldw	r6,0(r2)
 180694c:	000f883a 	mov	r7,zero
 1806950:	18062d80 	call	18062d8 <__multadd>
 1806954:	1025883a 	mov	r18,r2
 1806958:	003fc706 	br	1806878 <__ram_exceptions_end+0xff7f6588>
 180695c:	05000044 	movi	r20,1
 1806960:	a00b883a 	mov	r5,r20
 1806964:	9809883a 	mov	r4,r19
 1806968:	18062080 	call	1806208 <_Balloc>
 180696c:	1023883a 	mov	r17,r2
 1806970:	00809c44 	movi	r2,625
 1806974:	88800515 	stw	r2,20(r17)
 1806978:	8d000415 	stw	r20,16(r17)
 180697c:	9c401215 	stw	r17,72(r19)
 1806980:	88000015 	stw	zero,0(r17)
 1806984:	003fc606 	br	18068a0 <__ram_exceptions_end+0xff7f65b0>

01806988 <__lshift>:
 1806988:	defff904 	addi	sp,sp,-28
 180698c:	dd400515 	stw	r21,20(sp)
 1806990:	dcc00315 	stw	r19,12(sp)
 1806994:	302bd17a 	srai	r21,r6,5
 1806998:	2cc00417 	ldw	r19,16(r5)
 180699c:	28800217 	ldw	r2,8(r5)
 18069a0:	dd000415 	stw	r20,16(sp)
 18069a4:	ace7883a 	add	r19,r21,r19
 18069a8:	dc800215 	stw	r18,8(sp)
 18069ac:	dc400115 	stw	r17,4(sp)
 18069b0:	dc000015 	stw	r16,0(sp)
 18069b4:	dfc00615 	stw	ra,24(sp)
 18069b8:	9c000044 	addi	r16,r19,1
 18069bc:	2823883a 	mov	r17,r5
 18069c0:	3029883a 	mov	r20,r6
 18069c4:	2025883a 	mov	r18,r4
 18069c8:	29400117 	ldw	r5,4(r5)
 18069cc:	1400030e 	bge	r2,r16,18069dc <__lshift+0x54>
 18069d0:	1085883a 	add	r2,r2,r2
 18069d4:	29400044 	addi	r5,r5,1
 18069d8:	143ffd16 	blt	r2,r16,18069d0 <__ram_exceptions_end+0xff7f66e0>
 18069dc:	9009883a 	mov	r4,r18
 18069e0:	18062080 	call	1806208 <_Balloc>
 18069e4:	10c00504 	addi	r3,r2,20
 18069e8:	0540070e 	bge	zero,r21,1806a08 <__lshift+0x80>
 18069ec:	ad6b883a 	add	r21,r21,r21
 18069f0:	ad6b883a 	add	r21,r21,r21
 18069f4:	1809883a 	mov	r4,r3
 18069f8:	1d47883a 	add	r3,r3,r21
 18069fc:	20000015 	stw	zero,0(r4)
 1806a00:	21000104 	addi	r4,r4,4
 1806a04:	193ffd1e 	bne	r3,r4,18069fc <__ram_exceptions_end+0xff7f670c>
 1806a08:	8a000417 	ldw	r8,16(r17)
 1806a0c:	89000504 	addi	r4,r17,20
 1806a10:	a18007cc 	andi	r6,r20,31
 1806a14:	4211883a 	add	r8,r8,r8
 1806a18:	4211883a 	add	r8,r8,r8
 1806a1c:	2211883a 	add	r8,r4,r8
 1806a20:	30002326 	beq	r6,zero,1806ab0 <__lshift+0x128>
 1806a24:	02400804 	movi	r9,32
 1806a28:	4993c83a 	sub	r9,r9,r6
 1806a2c:	000b883a 	mov	r5,zero
 1806a30:	21c00017 	ldw	r7,0(r4)
 1806a34:	1815883a 	mov	r10,r3
 1806a38:	18c00104 	addi	r3,r3,4
 1806a3c:	398e983a 	sll	r7,r7,r6
 1806a40:	21000104 	addi	r4,r4,4
 1806a44:	394ab03a 	or	r5,r7,r5
 1806a48:	197fff15 	stw	r5,-4(r3)
 1806a4c:	217fff17 	ldw	r5,-4(r4)
 1806a50:	2a4ad83a 	srl	r5,r5,r9
 1806a54:	223ff636 	bltu	r4,r8,1806a30 <__ram_exceptions_end+0xff7f6740>
 1806a58:	51400115 	stw	r5,4(r10)
 1806a5c:	28001a1e 	bne	r5,zero,1806ac8 <__lshift+0x140>
 1806a60:	843fffc4 	addi	r16,r16,-1
 1806a64:	14000415 	stw	r16,16(r2)
 1806a68:	88000826 	beq	r17,zero,1806a8c <__lshift+0x104>
 1806a6c:	89000117 	ldw	r4,4(r17)
 1806a70:	90c01317 	ldw	r3,76(r18)
 1806a74:	2109883a 	add	r4,r4,r4
 1806a78:	2109883a 	add	r4,r4,r4
 1806a7c:	1907883a 	add	r3,r3,r4
 1806a80:	19000017 	ldw	r4,0(r3)
 1806a84:	89000015 	stw	r4,0(r17)
 1806a88:	1c400015 	stw	r17,0(r3)
 1806a8c:	dfc00617 	ldw	ra,24(sp)
 1806a90:	dd400517 	ldw	r21,20(sp)
 1806a94:	dd000417 	ldw	r20,16(sp)
 1806a98:	dcc00317 	ldw	r19,12(sp)
 1806a9c:	dc800217 	ldw	r18,8(sp)
 1806aa0:	dc400117 	ldw	r17,4(sp)
 1806aa4:	dc000017 	ldw	r16,0(sp)
 1806aa8:	dec00704 	addi	sp,sp,28
 1806aac:	f800283a 	ret
 1806ab0:	21400017 	ldw	r5,0(r4)
 1806ab4:	18c00104 	addi	r3,r3,4
 1806ab8:	21000104 	addi	r4,r4,4
 1806abc:	197fff15 	stw	r5,-4(r3)
 1806ac0:	223ffb36 	bltu	r4,r8,1806ab0 <__ram_exceptions_end+0xff7f67c0>
 1806ac4:	003fe606 	br	1806a60 <__ram_exceptions_end+0xff7f6770>
 1806ac8:	9c000084 	addi	r16,r19,2
 1806acc:	003fe406 	br	1806a60 <__ram_exceptions_end+0xff7f6770>

01806ad0 <__mcmp>:
 1806ad0:	20800417 	ldw	r2,16(r4)
 1806ad4:	28c00417 	ldw	r3,16(r5)
 1806ad8:	10c5c83a 	sub	r2,r2,r3
 1806adc:	1000111e 	bne	r2,zero,1806b24 <__mcmp+0x54>
 1806ae0:	18c7883a 	add	r3,r3,r3
 1806ae4:	18c7883a 	add	r3,r3,r3
 1806ae8:	21000504 	addi	r4,r4,20
 1806aec:	29400504 	addi	r5,r5,20
 1806af0:	20c5883a 	add	r2,r4,r3
 1806af4:	28cb883a 	add	r5,r5,r3
 1806af8:	00000106 	br	1806b00 <__mcmp+0x30>
 1806afc:	20800a2e 	bgeu	r4,r2,1806b28 <__mcmp+0x58>
 1806b00:	10bfff04 	addi	r2,r2,-4
 1806b04:	297fff04 	addi	r5,r5,-4
 1806b08:	11800017 	ldw	r6,0(r2)
 1806b0c:	28c00017 	ldw	r3,0(r5)
 1806b10:	30fffa26 	beq	r6,r3,1806afc <__ram_exceptions_end+0xff7f680c>
 1806b14:	30c00236 	bltu	r6,r3,1806b20 <__mcmp+0x50>
 1806b18:	00800044 	movi	r2,1
 1806b1c:	f800283a 	ret
 1806b20:	00bfffc4 	movi	r2,-1
 1806b24:	f800283a 	ret
 1806b28:	0005883a 	mov	r2,zero
 1806b2c:	f800283a 	ret

01806b30 <__mdiff>:
 1806b30:	28c00417 	ldw	r3,16(r5)
 1806b34:	30800417 	ldw	r2,16(r6)
 1806b38:	defffa04 	addi	sp,sp,-24
 1806b3c:	dcc00315 	stw	r19,12(sp)
 1806b40:	dc800215 	stw	r18,8(sp)
 1806b44:	dfc00515 	stw	ra,20(sp)
 1806b48:	dd000415 	stw	r20,16(sp)
 1806b4c:	dc400115 	stw	r17,4(sp)
 1806b50:	dc000015 	stw	r16,0(sp)
 1806b54:	1887c83a 	sub	r3,r3,r2
 1806b58:	2825883a 	mov	r18,r5
 1806b5c:	3027883a 	mov	r19,r6
 1806b60:	1800141e 	bne	r3,zero,1806bb4 <__mdiff+0x84>
 1806b64:	1085883a 	add	r2,r2,r2
 1806b68:	1085883a 	add	r2,r2,r2
 1806b6c:	2a000504 	addi	r8,r5,20
 1806b70:	34000504 	addi	r16,r6,20
 1806b74:	4087883a 	add	r3,r8,r2
 1806b78:	8085883a 	add	r2,r16,r2
 1806b7c:	00000106 	br	1806b84 <__mdiff+0x54>
 1806b80:	40c0592e 	bgeu	r8,r3,1806ce8 <__mdiff+0x1b8>
 1806b84:	18ffff04 	addi	r3,r3,-4
 1806b88:	10bfff04 	addi	r2,r2,-4
 1806b8c:	19c00017 	ldw	r7,0(r3)
 1806b90:	11400017 	ldw	r5,0(r2)
 1806b94:	397ffa26 	beq	r7,r5,1806b80 <__ram_exceptions_end+0xff7f6890>
 1806b98:	3940592e 	bgeu	r7,r5,1806d00 <__mdiff+0x1d0>
 1806b9c:	9005883a 	mov	r2,r18
 1806ba0:	4023883a 	mov	r17,r8
 1806ba4:	9825883a 	mov	r18,r19
 1806ba8:	05000044 	movi	r20,1
 1806bac:	1027883a 	mov	r19,r2
 1806bb0:	00000406 	br	1806bc4 <__mdiff+0x94>
 1806bb4:	18005616 	blt	r3,zero,1806d10 <__mdiff+0x1e0>
 1806bb8:	34400504 	addi	r17,r6,20
 1806bbc:	2c000504 	addi	r16,r5,20
 1806bc0:	0029883a 	mov	r20,zero
 1806bc4:	91400117 	ldw	r5,4(r18)
 1806bc8:	18062080 	call	1806208 <_Balloc>
 1806bcc:	92400417 	ldw	r9,16(r18)
 1806bd0:	9b000417 	ldw	r12,16(r19)
 1806bd4:	12c00504 	addi	r11,r2,20
 1806bd8:	4a51883a 	add	r8,r9,r9
 1806bdc:	6319883a 	add	r12,r12,r12
 1806be0:	4211883a 	add	r8,r8,r8
 1806be4:	6319883a 	add	r12,r12,r12
 1806be8:	15000315 	stw	r20,12(r2)
 1806bec:	8211883a 	add	r8,r16,r8
 1806bf0:	8b19883a 	add	r12,r17,r12
 1806bf4:	0007883a 	mov	r3,zero
 1806bf8:	81400017 	ldw	r5,0(r16)
 1806bfc:	89c00017 	ldw	r7,0(r17)
 1806c00:	59800104 	addi	r6,r11,4
 1806c04:	293fffcc 	andi	r4,r5,65535
 1806c08:	20c7883a 	add	r3,r4,r3
 1806c0c:	393fffcc 	andi	r4,r7,65535
 1806c10:	1909c83a 	sub	r4,r3,r4
 1806c14:	280ad43a 	srli	r5,r5,16
 1806c18:	380ed43a 	srli	r7,r7,16
 1806c1c:	2007d43a 	srai	r3,r4,16
 1806c20:	213fffcc 	andi	r4,r4,65535
 1806c24:	29cbc83a 	sub	r5,r5,r7
 1806c28:	28c7883a 	add	r3,r5,r3
 1806c2c:	180a943a 	slli	r5,r3,16
 1806c30:	8c400104 	addi	r17,r17,4
 1806c34:	84000104 	addi	r16,r16,4
 1806c38:	2908b03a 	or	r4,r5,r4
 1806c3c:	59000015 	stw	r4,0(r11)
 1806c40:	1807d43a 	srai	r3,r3,16
 1806c44:	3015883a 	mov	r10,r6
 1806c48:	3017883a 	mov	r11,r6
 1806c4c:	8b3fea36 	bltu	r17,r12,1806bf8 <__ram_exceptions_end+0xff7f6908>
 1806c50:	8200162e 	bgeu	r16,r8,1806cac <__mdiff+0x17c>
 1806c54:	8017883a 	mov	r11,r16
 1806c58:	59400017 	ldw	r5,0(r11)
 1806c5c:	31800104 	addi	r6,r6,4
 1806c60:	5ac00104 	addi	r11,r11,4
 1806c64:	293fffcc 	andi	r4,r5,65535
 1806c68:	20c7883a 	add	r3,r4,r3
 1806c6c:	280ed43a 	srli	r7,r5,16
 1806c70:	180bd43a 	srai	r5,r3,16
 1806c74:	193fffcc 	andi	r4,r3,65535
 1806c78:	3947883a 	add	r3,r7,r5
 1806c7c:	180a943a 	slli	r5,r3,16
 1806c80:	1807d43a 	srai	r3,r3,16
 1806c84:	2908b03a 	or	r4,r5,r4
 1806c88:	313fff15 	stw	r4,-4(r6)
 1806c8c:	5a3ff236 	bltu	r11,r8,1806c58 <__ram_exceptions_end+0xff7f6968>
 1806c90:	0406303a 	nor	r3,zero,r16
 1806c94:	1a07883a 	add	r3,r3,r8
 1806c98:	1806d0ba 	srli	r3,r3,2
 1806c9c:	18c00044 	addi	r3,r3,1
 1806ca0:	18c7883a 	add	r3,r3,r3
 1806ca4:	18c7883a 	add	r3,r3,r3
 1806ca8:	50d5883a 	add	r10,r10,r3
 1806cac:	50ffff04 	addi	r3,r10,-4
 1806cb0:	2000041e 	bne	r4,zero,1806cc4 <__mdiff+0x194>
 1806cb4:	18ffff04 	addi	r3,r3,-4
 1806cb8:	19000017 	ldw	r4,0(r3)
 1806cbc:	4a7fffc4 	addi	r9,r9,-1
 1806cc0:	203ffc26 	beq	r4,zero,1806cb4 <__ram_exceptions_end+0xff7f69c4>
 1806cc4:	12400415 	stw	r9,16(r2)
 1806cc8:	dfc00517 	ldw	ra,20(sp)
 1806ccc:	dd000417 	ldw	r20,16(sp)
 1806cd0:	dcc00317 	ldw	r19,12(sp)
 1806cd4:	dc800217 	ldw	r18,8(sp)
 1806cd8:	dc400117 	ldw	r17,4(sp)
 1806cdc:	dc000017 	ldw	r16,0(sp)
 1806ce0:	dec00604 	addi	sp,sp,24
 1806ce4:	f800283a 	ret
 1806ce8:	000b883a 	mov	r5,zero
 1806cec:	18062080 	call	1806208 <_Balloc>
 1806cf0:	00c00044 	movi	r3,1
 1806cf4:	10c00415 	stw	r3,16(r2)
 1806cf8:	10000515 	stw	zero,20(r2)
 1806cfc:	003ff206 	br	1806cc8 <__ram_exceptions_end+0xff7f69d8>
 1806d00:	8023883a 	mov	r17,r16
 1806d04:	0029883a 	mov	r20,zero
 1806d08:	4021883a 	mov	r16,r8
 1806d0c:	003fad06 	br	1806bc4 <__ram_exceptions_end+0xff7f68d4>
 1806d10:	9005883a 	mov	r2,r18
 1806d14:	94400504 	addi	r17,r18,20
 1806d18:	9c000504 	addi	r16,r19,20
 1806d1c:	9825883a 	mov	r18,r19
 1806d20:	05000044 	movi	r20,1
 1806d24:	1027883a 	mov	r19,r2
 1806d28:	003fa606 	br	1806bc4 <__ram_exceptions_end+0xff7f68d4>

01806d2c <__ulp>:
 1806d2c:	295ffc2c 	andhi	r5,r5,32752
 1806d30:	00bf3034 	movhi	r2,64704
 1806d34:	2887883a 	add	r3,r5,r2
 1806d38:	00c0020e 	bge	zero,r3,1806d44 <__ulp+0x18>
 1806d3c:	0005883a 	mov	r2,zero
 1806d40:	f800283a 	ret
 1806d44:	00c7c83a 	sub	r3,zero,r3
 1806d48:	1807d53a 	srai	r3,r3,20
 1806d4c:	008004c4 	movi	r2,19
 1806d50:	10c00b0e 	bge	r2,r3,1806d80 <__ulp+0x54>
 1806d54:	18bffb04 	addi	r2,r3,-20
 1806d58:	01000784 	movi	r4,30
 1806d5c:	0007883a 	mov	r3,zero
 1806d60:	20800516 	blt	r4,r2,1806d78 <__ulp+0x4c>
 1806d64:	010007c4 	movi	r4,31
 1806d68:	2089c83a 	sub	r4,r4,r2
 1806d6c:	00800044 	movi	r2,1
 1806d70:	1104983a 	sll	r2,r2,r4
 1806d74:	f800283a 	ret
 1806d78:	00800044 	movi	r2,1
 1806d7c:	f800283a 	ret
 1806d80:	01400234 	movhi	r5,8
 1806d84:	28c7d83a 	sra	r3,r5,r3
 1806d88:	0005883a 	mov	r2,zero
 1806d8c:	f800283a 	ret

01806d90 <__b2d>:
 1806d90:	defffa04 	addi	sp,sp,-24
 1806d94:	dc000015 	stw	r16,0(sp)
 1806d98:	24000417 	ldw	r16,16(r4)
 1806d9c:	dc400115 	stw	r17,4(sp)
 1806da0:	24400504 	addi	r17,r4,20
 1806da4:	8421883a 	add	r16,r16,r16
 1806da8:	8421883a 	add	r16,r16,r16
 1806dac:	8c21883a 	add	r16,r17,r16
 1806db0:	dc800215 	stw	r18,8(sp)
 1806db4:	84bfff17 	ldw	r18,-4(r16)
 1806db8:	dd000415 	stw	r20,16(sp)
 1806dbc:	dcc00315 	stw	r19,12(sp)
 1806dc0:	9009883a 	mov	r4,r18
 1806dc4:	2829883a 	mov	r20,r5
 1806dc8:	dfc00515 	stw	ra,20(sp)
 1806dcc:	18064fc0 	call	18064fc <__hi0bits>
 1806dd0:	00c00804 	movi	r3,32
 1806dd4:	1889c83a 	sub	r4,r3,r2
 1806dd8:	a1000015 	stw	r4,0(r20)
 1806ddc:	01000284 	movi	r4,10
 1806de0:	84ffff04 	addi	r19,r16,-4
 1806de4:	20801216 	blt	r4,r2,1806e30 <__b2d+0xa0>
 1806de8:	018002c4 	movi	r6,11
 1806dec:	308dc83a 	sub	r6,r6,r2
 1806df0:	9186d83a 	srl	r3,r18,r6
 1806df4:	18cffc34 	orhi	r3,r3,16368
 1806df8:	8cc0212e 	bgeu	r17,r19,1806e80 <__b2d+0xf0>
 1806dfc:	813ffe17 	ldw	r4,-8(r16)
 1806e00:	218cd83a 	srl	r6,r4,r6
 1806e04:	10800544 	addi	r2,r2,21
 1806e08:	9084983a 	sll	r2,r18,r2
 1806e0c:	1184b03a 	or	r2,r2,r6
 1806e10:	dfc00517 	ldw	ra,20(sp)
 1806e14:	dd000417 	ldw	r20,16(sp)
 1806e18:	dcc00317 	ldw	r19,12(sp)
 1806e1c:	dc800217 	ldw	r18,8(sp)
 1806e20:	dc400117 	ldw	r17,4(sp)
 1806e24:	dc000017 	ldw	r16,0(sp)
 1806e28:	dec00604 	addi	sp,sp,24
 1806e2c:	f800283a 	ret
 1806e30:	8cc00f2e 	bgeu	r17,r19,1806e70 <__b2d+0xe0>
 1806e34:	117ffd44 	addi	r5,r2,-11
 1806e38:	80bffe17 	ldw	r2,-8(r16)
 1806e3c:	28000e26 	beq	r5,zero,1806e78 <__b2d+0xe8>
 1806e40:	1949c83a 	sub	r4,r3,r5
 1806e44:	9164983a 	sll	r18,r18,r5
 1806e48:	1106d83a 	srl	r3,r2,r4
 1806e4c:	81bffe04 	addi	r6,r16,-8
 1806e50:	948ffc34 	orhi	r18,r18,16368
 1806e54:	90c6b03a 	or	r3,r18,r3
 1806e58:	89800e2e 	bgeu	r17,r6,1806e94 <__b2d+0x104>
 1806e5c:	81bffd17 	ldw	r6,-12(r16)
 1806e60:	1144983a 	sll	r2,r2,r5
 1806e64:	310ad83a 	srl	r5,r6,r4
 1806e68:	2884b03a 	or	r2,r5,r2
 1806e6c:	003fe806 	br	1806e10 <__ram_exceptions_end+0xff7f6b20>
 1806e70:	10bffd44 	addi	r2,r2,-11
 1806e74:	1000041e 	bne	r2,zero,1806e88 <__b2d+0xf8>
 1806e78:	90cffc34 	orhi	r3,r18,16368
 1806e7c:	003fe406 	br	1806e10 <__ram_exceptions_end+0xff7f6b20>
 1806e80:	000d883a 	mov	r6,zero
 1806e84:	003fdf06 	br	1806e04 <__ram_exceptions_end+0xff7f6b14>
 1806e88:	90a4983a 	sll	r18,r18,r2
 1806e8c:	0005883a 	mov	r2,zero
 1806e90:	003ff906 	br	1806e78 <__ram_exceptions_end+0xff7f6b88>
 1806e94:	1144983a 	sll	r2,r2,r5
 1806e98:	003fdd06 	br	1806e10 <__ram_exceptions_end+0xff7f6b20>

01806e9c <__d2b>:
 1806e9c:	defff804 	addi	sp,sp,-32
 1806ea0:	dc000215 	stw	r16,8(sp)
 1806ea4:	3021883a 	mov	r16,r6
 1806ea8:	dc400315 	stw	r17,12(sp)
 1806eac:	8022907a 	slli	r17,r16,1
 1806eb0:	dd000615 	stw	r20,24(sp)
 1806eb4:	2829883a 	mov	r20,r5
 1806eb8:	01400044 	movi	r5,1
 1806ebc:	dcc00515 	stw	r19,20(sp)
 1806ec0:	dc800415 	stw	r18,16(sp)
 1806ec4:	dfc00715 	stw	ra,28(sp)
 1806ec8:	3825883a 	mov	r18,r7
 1806ecc:	8822d57a 	srli	r17,r17,21
 1806ed0:	18062080 	call	1806208 <_Balloc>
 1806ed4:	1027883a 	mov	r19,r2
 1806ed8:	00800434 	movhi	r2,16
 1806edc:	10bfffc4 	addi	r2,r2,-1
 1806ee0:	808c703a 	and	r6,r16,r2
 1806ee4:	88000126 	beq	r17,zero,1806eec <__d2b+0x50>
 1806ee8:	31800434 	orhi	r6,r6,16
 1806eec:	d9800015 	stw	r6,0(sp)
 1806ef0:	a0002426 	beq	r20,zero,1806f84 <__d2b+0xe8>
 1806ef4:	d9000104 	addi	r4,sp,4
 1806ef8:	dd000115 	stw	r20,4(sp)
 1806efc:	18065640 	call	1806564 <__lo0bits>
 1806f00:	d8c00017 	ldw	r3,0(sp)
 1806f04:	10002f1e 	bne	r2,zero,1806fc4 <__d2b+0x128>
 1806f08:	d9000117 	ldw	r4,4(sp)
 1806f0c:	99000515 	stw	r4,20(r19)
 1806f10:	1821003a 	cmpeq	r16,r3,zero
 1806f14:	01000084 	movi	r4,2
 1806f18:	2421c83a 	sub	r16,r4,r16
 1806f1c:	98c00615 	stw	r3,24(r19)
 1806f20:	9c000415 	stw	r16,16(r19)
 1806f24:	88001f1e 	bne	r17,zero,1806fa4 <__d2b+0x108>
 1806f28:	10bef384 	addi	r2,r2,-1074
 1806f2c:	90800015 	stw	r2,0(r18)
 1806f30:	00900034 	movhi	r2,16384
 1806f34:	10bfffc4 	addi	r2,r2,-1
 1806f38:	8085883a 	add	r2,r16,r2
 1806f3c:	1085883a 	add	r2,r2,r2
 1806f40:	1085883a 	add	r2,r2,r2
 1806f44:	9885883a 	add	r2,r19,r2
 1806f48:	11000517 	ldw	r4,20(r2)
 1806f4c:	8020917a 	slli	r16,r16,5
 1806f50:	18064fc0 	call	18064fc <__hi0bits>
 1806f54:	d8c00817 	ldw	r3,32(sp)
 1806f58:	8085c83a 	sub	r2,r16,r2
 1806f5c:	18800015 	stw	r2,0(r3)
 1806f60:	9805883a 	mov	r2,r19
 1806f64:	dfc00717 	ldw	ra,28(sp)
 1806f68:	dd000617 	ldw	r20,24(sp)
 1806f6c:	dcc00517 	ldw	r19,20(sp)
 1806f70:	dc800417 	ldw	r18,16(sp)
 1806f74:	dc400317 	ldw	r17,12(sp)
 1806f78:	dc000217 	ldw	r16,8(sp)
 1806f7c:	dec00804 	addi	sp,sp,32
 1806f80:	f800283a 	ret
 1806f84:	d809883a 	mov	r4,sp
 1806f88:	18065640 	call	1806564 <__lo0bits>
 1806f8c:	d8c00017 	ldw	r3,0(sp)
 1806f90:	04000044 	movi	r16,1
 1806f94:	9c000415 	stw	r16,16(r19)
 1806f98:	98c00515 	stw	r3,20(r19)
 1806f9c:	10800804 	addi	r2,r2,32
 1806fa0:	883fe126 	beq	r17,zero,1806f28 <__ram_exceptions_end+0xff7f6c38>
 1806fa4:	00c00d44 	movi	r3,53
 1806fa8:	8c7ef344 	addi	r17,r17,-1075
 1806fac:	88a3883a 	add	r17,r17,r2
 1806fb0:	1885c83a 	sub	r2,r3,r2
 1806fb4:	d8c00817 	ldw	r3,32(sp)
 1806fb8:	94400015 	stw	r17,0(r18)
 1806fbc:	18800015 	stw	r2,0(r3)
 1806fc0:	003fe706 	br	1806f60 <__ram_exceptions_end+0xff7f6c70>
 1806fc4:	01000804 	movi	r4,32
 1806fc8:	2089c83a 	sub	r4,r4,r2
 1806fcc:	1908983a 	sll	r4,r3,r4
 1806fd0:	d9400117 	ldw	r5,4(sp)
 1806fd4:	1886d83a 	srl	r3,r3,r2
 1806fd8:	2148b03a 	or	r4,r4,r5
 1806fdc:	99000515 	stw	r4,20(r19)
 1806fe0:	d8c00015 	stw	r3,0(sp)
 1806fe4:	003fca06 	br	1806f10 <__ram_exceptions_end+0xff7f6c20>

01806fe8 <__ratio>:
 1806fe8:	defff904 	addi	sp,sp,-28
 1806fec:	dc400315 	stw	r17,12(sp)
 1806ff0:	2823883a 	mov	r17,r5
 1806ff4:	d9400104 	addi	r5,sp,4
 1806ff8:	dfc00615 	stw	ra,24(sp)
 1806ffc:	dcc00515 	stw	r19,20(sp)
 1807000:	dc800415 	stw	r18,16(sp)
 1807004:	2027883a 	mov	r19,r4
 1807008:	dc000215 	stw	r16,8(sp)
 180700c:	1806d900 	call	1806d90 <__b2d>
 1807010:	d80b883a 	mov	r5,sp
 1807014:	8809883a 	mov	r4,r17
 1807018:	1025883a 	mov	r18,r2
 180701c:	1821883a 	mov	r16,r3
 1807020:	1806d900 	call	1806d90 <__b2d>
 1807024:	8a000417 	ldw	r8,16(r17)
 1807028:	99000417 	ldw	r4,16(r19)
 180702c:	d9400117 	ldw	r5,4(sp)
 1807030:	2209c83a 	sub	r4,r4,r8
 1807034:	2010917a 	slli	r8,r4,5
 1807038:	d9000017 	ldw	r4,0(sp)
 180703c:	2909c83a 	sub	r4,r5,r4
 1807040:	4109883a 	add	r4,r8,r4
 1807044:	01000e0e 	bge	zero,r4,1807080 <__ratio+0x98>
 1807048:	2008953a 	slli	r4,r4,20
 180704c:	2421883a 	add	r16,r4,r16
 1807050:	100d883a 	mov	r6,r2
 1807054:	180f883a 	mov	r7,r3
 1807058:	9009883a 	mov	r4,r18
 180705c:	800b883a 	mov	r5,r16
 1807060:	180b5840 	call	180b584 <__divdf3>
 1807064:	dfc00617 	ldw	ra,24(sp)
 1807068:	dcc00517 	ldw	r19,20(sp)
 180706c:	dc800417 	ldw	r18,16(sp)
 1807070:	dc400317 	ldw	r17,12(sp)
 1807074:	dc000217 	ldw	r16,8(sp)
 1807078:	dec00704 	addi	sp,sp,28
 180707c:	f800283a 	ret
 1807080:	2008953a 	slli	r4,r4,20
 1807084:	1907c83a 	sub	r3,r3,r4
 1807088:	003ff106 	br	1807050 <__ram_exceptions_end+0xff7f6d60>

0180708c <_mprec_log10>:
 180708c:	defffe04 	addi	sp,sp,-8
 1807090:	dc000015 	stw	r16,0(sp)
 1807094:	dfc00115 	stw	ra,4(sp)
 1807098:	008005c4 	movi	r2,23
 180709c:	2021883a 	mov	r16,r4
 18070a0:	11000d0e 	bge	r2,r4,18070d8 <_mprec_log10+0x4c>
 18070a4:	0005883a 	mov	r2,zero
 18070a8:	00cffc34 	movhi	r3,16368
 18070ac:	843fffc4 	addi	r16,r16,-1
 18070b0:	000d883a 	mov	r6,zero
 18070b4:	01d00934 	movhi	r7,16420
 18070b8:	1009883a 	mov	r4,r2
 18070bc:	180b883a 	mov	r5,r3
 18070c0:	180c0c40 	call	180c0c4 <__muldf3>
 18070c4:	803ff91e 	bne	r16,zero,18070ac <__ram_exceptions_end+0xff7f6dbc>
 18070c8:	dfc00117 	ldw	ra,4(sp)
 18070cc:	dc000017 	ldw	r16,0(sp)
 18070d0:	dec00204 	addi	sp,sp,8
 18070d4:	f800283a 	ret
 18070d8:	202090fa 	slli	r16,r4,3
 18070dc:	00806134 	movhi	r2,388
 18070e0:	10824904 	addi	r2,r2,2340
 18070e4:	1421883a 	add	r16,r2,r16
 18070e8:	80800017 	ldw	r2,0(r16)
 18070ec:	80c00117 	ldw	r3,4(r16)
 18070f0:	dfc00117 	ldw	ra,4(sp)
 18070f4:	dc000017 	ldw	r16,0(sp)
 18070f8:	dec00204 	addi	sp,sp,8
 18070fc:	f800283a 	ret

01807100 <__copybits>:
 1807100:	297fffc4 	addi	r5,r5,-1
 1807104:	280fd17a 	srai	r7,r5,5
 1807108:	30c00417 	ldw	r3,16(r6)
 180710c:	30800504 	addi	r2,r6,20
 1807110:	39c00044 	addi	r7,r7,1
 1807114:	18c7883a 	add	r3,r3,r3
 1807118:	39cf883a 	add	r7,r7,r7
 180711c:	18c7883a 	add	r3,r3,r3
 1807120:	39cf883a 	add	r7,r7,r7
 1807124:	10c7883a 	add	r3,r2,r3
 1807128:	21cf883a 	add	r7,r4,r7
 180712c:	10c00d2e 	bgeu	r2,r3,1807164 <__copybits+0x64>
 1807130:	200b883a 	mov	r5,r4
 1807134:	12000017 	ldw	r8,0(r2)
 1807138:	29400104 	addi	r5,r5,4
 180713c:	10800104 	addi	r2,r2,4
 1807140:	2a3fff15 	stw	r8,-4(r5)
 1807144:	10fffb36 	bltu	r2,r3,1807134 <__ram_exceptions_end+0xff7f6e44>
 1807148:	1985c83a 	sub	r2,r3,r6
 180714c:	10bffac4 	addi	r2,r2,-21
 1807150:	1004d0ba 	srli	r2,r2,2
 1807154:	10800044 	addi	r2,r2,1
 1807158:	1085883a 	add	r2,r2,r2
 180715c:	1085883a 	add	r2,r2,r2
 1807160:	2089883a 	add	r4,r4,r2
 1807164:	21c0032e 	bgeu	r4,r7,1807174 <__copybits+0x74>
 1807168:	20000015 	stw	zero,0(r4)
 180716c:	21000104 	addi	r4,r4,4
 1807170:	21fffd36 	bltu	r4,r7,1807168 <__ram_exceptions_end+0xff7f6e78>
 1807174:	f800283a 	ret

01807178 <__any_on>:
 1807178:	20c00417 	ldw	r3,16(r4)
 180717c:	2805d17a 	srai	r2,r5,5
 1807180:	21000504 	addi	r4,r4,20
 1807184:	18800d0e 	bge	r3,r2,18071bc <__any_on+0x44>
 1807188:	18c7883a 	add	r3,r3,r3
 180718c:	18c7883a 	add	r3,r3,r3
 1807190:	20c7883a 	add	r3,r4,r3
 1807194:	20c0192e 	bgeu	r4,r3,18071fc <__any_on+0x84>
 1807198:	18bfff17 	ldw	r2,-4(r3)
 180719c:	18ffff04 	addi	r3,r3,-4
 18071a0:	1000041e 	bne	r2,zero,18071b4 <__any_on+0x3c>
 18071a4:	20c0142e 	bgeu	r4,r3,18071f8 <__any_on+0x80>
 18071a8:	18ffff04 	addi	r3,r3,-4
 18071ac:	19400017 	ldw	r5,0(r3)
 18071b0:	283ffc26 	beq	r5,zero,18071a4 <__ram_exceptions_end+0xff7f6eb4>
 18071b4:	00800044 	movi	r2,1
 18071b8:	f800283a 	ret
 18071bc:	10c00a0e 	bge	r2,r3,18071e8 <__any_on+0x70>
 18071c0:	1085883a 	add	r2,r2,r2
 18071c4:	1085883a 	add	r2,r2,r2
 18071c8:	294007cc 	andi	r5,r5,31
 18071cc:	2087883a 	add	r3,r4,r2
 18071d0:	283ff026 	beq	r5,zero,1807194 <__ram_exceptions_end+0xff7f6ea4>
 18071d4:	19800017 	ldw	r6,0(r3)
 18071d8:	3144d83a 	srl	r2,r6,r5
 18071dc:	114a983a 	sll	r5,r2,r5
 18071e0:	317ff41e 	bne	r6,r5,18071b4 <__ram_exceptions_end+0xff7f6ec4>
 18071e4:	003feb06 	br	1807194 <__ram_exceptions_end+0xff7f6ea4>
 18071e8:	1085883a 	add	r2,r2,r2
 18071ec:	1085883a 	add	r2,r2,r2
 18071f0:	2087883a 	add	r3,r4,r2
 18071f4:	003fe706 	br	1807194 <__ram_exceptions_end+0xff7f6ea4>
 18071f8:	f800283a 	ret
 18071fc:	0005883a 	mov	r2,zero
 1807200:	f800283a 	ret

01807204 <__fpclassifyd>:
 1807204:	00a00034 	movhi	r2,32768
 1807208:	10bfffc4 	addi	r2,r2,-1
 180720c:	2884703a 	and	r2,r5,r2
 1807210:	10000726 	beq	r2,zero,1807230 <__fpclassifyd+0x2c>
 1807214:	00fffc34 	movhi	r3,65520
 1807218:	019ff834 	movhi	r6,32736
 180721c:	28c7883a 	add	r3,r5,r3
 1807220:	31bfffc4 	addi	r6,r6,-1
 1807224:	30c00536 	bltu	r6,r3,180723c <__fpclassifyd+0x38>
 1807228:	00800104 	movi	r2,4
 180722c:	f800283a 	ret
 1807230:	2000021e 	bne	r4,zero,180723c <__fpclassifyd+0x38>
 1807234:	00800084 	movi	r2,2
 1807238:	f800283a 	ret
 180723c:	00dffc34 	movhi	r3,32752
 1807240:	019ff834 	movhi	r6,32736
 1807244:	28cb883a 	add	r5,r5,r3
 1807248:	31bfffc4 	addi	r6,r6,-1
 180724c:	317ff62e 	bgeu	r6,r5,1807228 <__ram_exceptions_end+0xff7f6f38>
 1807250:	01400434 	movhi	r5,16
 1807254:	297fffc4 	addi	r5,r5,-1
 1807258:	28800236 	bltu	r5,r2,1807264 <__fpclassifyd+0x60>
 180725c:	008000c4 	movi	r2,3
 1807260:	f800283a 	ret
 1807264:	10c00226 	beq	r2,r3,1807270 <__fpclassifyd+0x6c>
 1807268:	0005883a 	mov	r2,zero
 180726c:	f800283a 	ret
 1807270:	2005003a 	cmpeq	r2,r4,zero
 1807274:	f800283a 	ret

01807278 <_sbrk_r>:
 1807278:	defffd04 	addi	sp,sp,-12
 180727c:	dc000015 	stw	r16,0(sp)
 1807280:	04006134 	movhi	r16,388
 1807284:	dc400115 	stw	r17,4(sp)
 1807288:	841c3604 	addi	r16,r16,28888
 180728c:	2023883a 	mov	r17,r4
 1807290:	2809883a 	mov	r4,r5
 1807294:	dfc00215 	stw	ra,8(sp)
 1807298:	80000015 	stw	zero,0(r16)
 180729c:	18130ec0 	call	18130ec <sbrk>
 18072a0:	00ffffc4 	movi	r3,-1
 18072a4:	10c00526 	beq	r2,r3,18072bc <_sbrk_r+0x44>
 18072a8:	dfc00217 	ldw	ra,8(sp)
 18072ac:	dc400117 	ldw	r17,4(sp)
 18072b0:	dc000017 	ldw	r16,0(sp)
 18072b4:	dec00304 	addi	sp,sp,12
 18072b8:	f800283a 	ret
 18072bc:	80c00017 	ldw	r3,0(r16)
 18072c0:	183ff926 	beq	r3,zero,18072a8 <__ram_exceptions_end+0xff7f6fb8>
 18072c4:	88c00015 	stw	r3,0(r17)
 18072c8:	003ff706 	br	18072a8 <__ram_exceptions_end+0xff7f6fb8>

018072cc <__sread>:
 18072cc:	defffe04 	addi	sp,sp,-8
 18072d0:	dc000015 	stw	r16,0(sp)
 18072d4:	2821883a 	mov	r16,r5
 18072d8:	2940038f 	ldh	r5,14(r5)
 18072dc:	dfc00115 	stw	ra,4(sp)
 18072e0:	18097700 	call	1809770 <_read_r>
 18072e4:	10000716 	blt	r2,zero,1807304 <__sread+0x38>
 18072e8:	80c01417 	ldw	r3,80(r16)
 18072ec:	1887883a 	add	r3,r3,r2
 18072f0:	80c01415 	stw	r3,80(r16)
 18072f4:	dfc00117 	ldw	ra,4(sp)
 18072f8:	dc000017 	ldw	r16,0(sp)
 18072fc:	dec00204 	addi	sp,sp,8
 1807300:	f800283a 	ret
 1807304:	80c0030b 	ldhu	r3,12(r16)
 1807308:	18fbffcc 	andi	r3,r3,61439
 180730c:	80c0030d 	sth	r3,12(r16)
 1807310:	dfc00117 	ldw	ra,4(sp)
 1807314:	dc000017 	ldw	r16,0(sp)
 1807318:	dec00204 	addi	sp,sp,8
 180731c:	f800283a 	ret

01807320 <__seofread>:
 1807320:	0005883a 	mov	r2,zero
 1807324:	f800283a 	ret

01807328 <__swrite>:
 1807328:	2880030b 	ldhu	r2,12(r5)
 180732c:	defffb04 	addi	sp,sp,-20
 1807330:	dcc00315 	stw	r19,12(sp)
 1807334:	dc800215 	stw	r18,8(sp)
 1807338:	dc400115 	stw	r17,4(sp)
 180733c:	dc000015 	stw	r16,0(sp)
 1807340:	dfc00415 	stw	ra,16(sp)
 1807344:	10c0400c 	andi	r3,r2,256
 1807348:	2821883a 	mov	r16,r5
 180734c:	2023883a 	mov	r17,r4
 1807350:	3025883a 	mov	r18,r6
 1807354:	3827883a 	mov	r19,r7
 1807358:	18000526 	beq	r3,zero,1807370 <__swrite+0x48>
 180735c:	2940038f 	ldh	r5,14(r5)
 1807360:	01c00084 	movi	r7,2
 1807364:	000d883a 	mov	r6,zero
 1807368:	18095b40 	call	18095b4 <_lseek_r>
 180736c:	8080030b 	ldhu	r2,12(r16)
 1807370:	8140038f 	ldh	r5,14(r16)
 1807374:	10bbffcc 	andi	r2,r2,61439
 1807378:	980f883a 	mov	r7,r19
 180737c:	900d883a 	mov	r6,r18
 1807380:	8809883a 	mov	r4,r17
 1807384:	8080030d 	sth	r2,12(r16)
 1807388:	dfc00417 	ldw	ra,16(sp)
 180738c:	dcc00317 	ldw	r19,12(sp)
 1807390:	dc800217 	ldw	r18,8(sp)
 1807394:	dc400117 	ldw	r17,4(sp)
 1807398:	dc000017 	ldw	r16,0(sp)
 180739c:	dec00504 	addi	sp,sp,20
 18073a0:	1808bc41 	jmpi	1808bc4 <_write_r>

018073a4 <__sseek>:
 18073a4:	defffe04 	addi	sp,sp,-8
 18073a8:	dc000015 	stw	r16,0(sp)
 18073ac:	2821883a 	mov	r16,r5
 18073b0:	2940038f 	ldh	r5,14(r5)
 18073b4:	dfc00115 	stw	ra,4(sp)
 18073b8:	18095b40 	call	18095b4 <_lseek_r>
 18073bc:	00ffffc4 	movi	r3,-1
 18073c0:	10c00826 	beq	r2,r3,18073e4 <__sseek+0x40>
 18073c4:	80c0030b 	ldhu	r3,12(r16)
 18073c8:	80801415 	stw	r2,80(r16)
 18073cc:	18c40014 	ori	r3,r3,4096
 18073d0:	80c0030d 	sth	r3,12(r16)
 18073d4:	dfc00117 	ldw	ra,4(sp)
 18073d8:	dc000017 	ldw	r16,0(sp)
 18073dc:	dec00204 	addi	sp,sp,8
 18073e0:	f800283a 	ret
 18073e4:	80c0030b 	ldhu	r3,12(r16)
 18073e8:	18fbffcc 	andi	r3,r3,61439
 18073ec:	80c0030d 	sth	r3,12(r16)
 18073f0:	dfc00117 	ldw	ra,4(sp)
 18073f4:	dc000017 	ldw	r16,0(sp)
 18073f8:	dec00204 	addi	sp,sp,8
 18073fc:	f800283a 	ret

01807400 <__sclose>:
 1807400:	2940038f 	ldh	r5,14(r5)
 1807404:	1808c241 	jmpi	1808c24 <_close_r>

01807408 <strcmp>:
 1807408:	2144b03a 	or	r2,r4,r5
 180740c:	108000cc 	andi	r2,r2,3
 1807410:	1000171e 	bne	r2,zero,1807470 <strcmp+0x68>
 1807414:	20800017 	ldw	r2,0(r4)
 1807418:	28c00017 	ldw	r3,0(r5)
 180741c:	10c0141e 	bne	r2,r3,1807470 <strcmp+0x68>
 1807420:	027fbff4 	movhi	r9,65279
 1807424:	4a7fbfc4 	addi	r9,r9,-257
 1807428:	0086303a 	nor	r3,zero,r2
 180742c:	02202074 	movhi	r8,32897
 1807430:	1245883a 	add	r2,r2,r9
 1807434:	42202004 	addi	r8,r8,-32640
 1807438:	10c4703a 	and	r2,r2,r3
 180743c:	1204703a 	and	r2,r2,r8
 1807440:	10000226 	beq	r2,zero,180744c <strcmp+0x44>
 1807444:	00002306 	br	18074d4 <strcmp+0xcc>
 1807448:	1000221e 	bne	r2,zero,18074d4 <strcmp+0xcc>
 180744c:	21000104 	addi	r4,r4,4
 1807450:	20c00017 	ldw	r3,0(r4)
 1807454:	29400104 	addi	r5,r5,4
 1807458:	29800017 	ldw	r6,0(r5)
 180745c:	1a4f883a 	add	r7,r3,r9
 1807460:	00c4303a 	nor	r2,zero,r3
 1807464:	3884703a 	and	r2,r7,r2
 1807468:	1204703a 	and	r2,r2,r8
 180746c:	19bff626 	beq	r3,r6,1807448 <__ram_exceptions_end+0xff7f7158>
 1807470:	20800003 	ldbu	r2,0(r4)
 1807474:	10c03fcc 	andi	r3,r2,255
 1807478:	18c0201c 	xori	r3,r3,128
 180747c:	18ffe004 	addi	r3,r3,-128
 1807480:	18000c26 	beq	r3,zero,18074b4 <strcmp+0xac>
 1807484:	29800007 	ldb	r6,0(r5)
 1807488:	19800326 	beq	r3,r6,1807498 <strcmp+0x90>
 180748c:	00001306 	br	18074dc <strcmp+0xd4>
 1807490:	29800007 	ldb	r6,0(r5)
 1807494:	11800b1e 	bne	r2,r6,18074c4 <strcmp+0xbc>
 1807498:	21000044 	addi	r4,r4,1
 180749c:	20c00003 	ldbu	r3,0(r4)
 18074a0:	29400044 	addi	r5,r5,1
 18074a4:	18803fcc 	andi	r2,r3,255
 18074a8:	1080201c 	xori	r2,r2,128
 18074ac:	10bfe004 	addi	r2,r2,-128
 18074b0:	103ff71e 	bne	r2,zero,1807490 <__ram_exceptions_end+0xff7f71a0>
 18074b4:	0007883a 	mov	r3,zero
 18074b8:	28800003 	ldbu	r2,0(r5)
 18074bc:	1885c83a 	sub	r2,r3,r2
 18074c0:	f800283a 	ret
 18074c4:	28800003 	ldbu	r2,0(r5)
 18074c8:	18c03fcc 	andi	r3,r3,255
 18074cc:	1885c83a 	sub	r2,r3,r2
 18074d0:	f800283a 	ret
 18074d4:	0005883a 	mov	r2,zero
 18074d8:	f800283a 	ret
 18074dc:	10c03fcc 	andi	r3,r2,255
 18074e0:	003ff506 	br	18074b8 <__ram_exceptions_end+0xff7f71c8>

018074e4 <strlen>:
 18074e4:	208000cc 	andi	r2,r4,3
 18074e8:	10002026 	beq	r2,zero,180756c <strlen+0x88>
 18074ec:	20800007 	ldb	r2,0(r4)
 18074f0:	10002026 	beq	r2,zero,1807574 <strlen+0x90>
 18074f4:	2005883a 	mov	r2,r4
 18074f8:	00000206 	br	1807504 <strlen+0x20>
 18074fc:	10c00007 	ldb	r3,0(r2)
 1807500:	18001826 	beq	r3,zero,1807564 <strlen+0x80>
 1807504:	10800044 	addi	r2,r2,1
 1807508:	10c000cc 	andi	r3,r2,3
 180750c:	183ffb1e 	bne	r3,zero,18074fc <__ram_exceptions_end+0xff7f720c>
 1807510:	10c00017 	ldw	r3,0(r2)
 1807514:	01ffbff4 	movhi	r7,65279
 1807518:	39ffbfc4 	addi	r7,r7,-257
 180751c:	00ca303a 	nor	r5,zero,r3
 1807520:	01a02074 	movhi	r6,32897
 1807524:	19c7883a 	add	r3,r3,r7
 1807528:	31a02004 	addi	r6,r6,-32640
 180752c:	1946703a 	and	r3,r3,r5
 1807530:	1986703a 	and	r3,r3,r6
 1807534:	1800091e 	bne	r3,zero,180755c <strlen+0x78>
 1807538:	10800104 	addi	r2,r2,4
 180753c:	10c00017 	ldw	r3,0(r2)
 1807540:	19cb883a 	add	r5,r3,r7
 1807544:	00c6303a 	nor	r3,zero,r3
 1807548:	28c6703a 	and	r3,r5,r3
 180754c:	1986703a 	and	r3,r3,r6
 1807550:	183ff926 	beq	r3,zero,1807538 <__ram_exceptions_end+0xff7f7248>
 1807554:	00000106 	br	180755c <strlen+0x78>
 1807558:	10800044 	addi	r2,r2,1
 180755c:	10c00007 	ldb	r3,0(r2)
 1807560:	183ffd1e 	bne	r3,zero,1807558 <__ram_exceptions_end+0xff7f7268>
 1807564:	1105c83a 	sub	r2,r2,r4
 1807568:	f800283a 	ret
 180756c:	2005883a 	mov	r2,r4
 1807570:	003fe706 	br	1807510 <__ram_exceptions_end+0xff7f7220>
 1807574:	0005883a 	mov	r2,zero
 1807578:	f800283a 	ret

0180757c <__sprint_r.part.0>:
 180757c:	28801917 	ldw	r2,100(r5)
 1807580:	defff604 	addi	sp,sp,-40
 1807584:	dd400515 	stw	r21,20(sp)
 1807588:	dfc00915 	stw	ra,36(sp)
 180758c:	df000815 	stw	fp,32(sp)
 1807590:	ddc00715 	stw	r23,28(sp)
 1807594:	dd800615 	stw	r22,24(sp)
 1807598:	dd000415 	stw	r20,16(sp)
 180759c:	dcc00315 	stw	r19,12(sp)
 18075a0:	dc800215 	stw	r18,8(sp)
 18075a4:	dc400115 	stw	r17,4(sp)
 18075a8:	dc000015 	stw	r16,0(sp)
 18075ac:	1088000c 	andi	r2,r2,8192
 18075b0:	302b883a 	mov	r21,r6
 18075b4:	10002e26 	beq	r2,zero,1807670 <__sprint_r.part.0+0xf4>
 18075b8:	30800217 	ldw	r2,8(r6)
 18075bc:	35800017 	ldw	r22,0(r6)
 18075c0:	10002926 	beq	r2,zero,1807668 <__sprint_r.part.0+0xec>
 18075c4:	2827883a 	mov	r19,r5
 18075c8:	2029883a 	mov	r20,r4
 18075cc:	b5c00104 	addi	r23,r22,4
 18075d0:	04bfffc4 	movi	r18,-1
 18075d4:	bc400017 	ldw	r17,0(r23)
 18075d8:	b4000017 	ldw	r16,0(r22)
 18075dc:	0039883a 	mov	fp,zero
 18075e0:	8822d0ba 	srli	r17,r17,2
 18075e4:	8800031e 	bne	r17,zero,18075f4 <__sprint_r.part.0+0x78>
 18075e8:	00001806 	br	180764c <__sprint_r.part.0+0xd0>
 18075ec:	84000104 	addi	r16,r16,4
 18075f0:	8f001526 	beq	r17,fp,1807648 <__sprint_r.part.0+0xcc>
 18075f4:	81400017 	ldw	r5,0(r16)
 18075f8:	980d883a 	mov	r6,r19
 18075fc:	a009883a 	mov	r4,r20
 1807600:	1808fa40 	call	1808fa4 <_fputwc_r>
 1807604:	e7000044 	addi	fp,fp,1
 1807608:	14bff81e 	bne	r2,r18,18075ec <__ram_exceptions_end+0xff7f72fc>
 180760c:	9005883a 	mov	r2,r18
 1807610:	a8000215 	stw	zero,8(r21)
 1807614:	a8000115 	stw	zero,4(r21)
 1807618:	dfc00917 	ldw	ra,36(sp)
 180761c:	df000817 	ldw	fp,32(sp)
 1807620:	ddc00717 	ldw	r23,28(sp)
 1807624:	dd800617 	ldw	r22,24(sp)
 1807628:	dd400517 	ldw	r21,20(sp)
 180762c:	dd000417 	ldw	r20,16(sp)
 1807630:	dcc00317 	ldw	r19,12(sp)
 1807634:	dc800217 	ldw	r18,8(sp)
 1807638:	dc400117 	ldw	r17,4(sp)
 180763c:	dc000017 	ldw	r16,0(sp)
 1807640:	dec00a04 	addi	sp,sp,40
 1807644:	f800283a 	ret
 1807648:	a8800217 	ldw	r2,8(r21)
 180764c:	8c63883a 	add	r17,r17,r17
 1807650:	8c63883a 	add	r17,r17,r17
 1807654:	1445c83a 	sub	r2,r2,r17
 1807658:	a8800215 	stw	r2,8(r21)
 180765c:	b5800204 	addi	r22,r22,8
 1807660:	bdc00204 	addi	r23,r23,8
 1807664:	103fdb1e 	bne	r2,zero,18075d4 <__ram_exceptions_end+0xff7f72e4>
 1807668:	0005883a 	mov	r2,zero
 180766c:	003fe806 	br	1807610 <__ram_exceptions_end+0xff7f7320>
 1807670:	18090a40 	call	18090a4 <__sfvwrite_r>
 1807674:	003fe606 	br	1807610 <__ram_exceptions_end+0xff7f7320>

01807678 <__sprint_r>:
 1807678:	30c00217 	ldw	r3,8(r6)
 180767c:	18000126 	beq	r3,zero,1807684 <__sprint_r+0xc>
 1807680:	180757c1 	jmpi	180757c <__sprint_r.part.0>
 1807684:	30000115 	stw	zero,4(r6)
 1807688:	0005883a 	mov	r2,zero
 180768c:	f800283a 	ret

01807690 <___vfiprintf_internal_r>:
 1807690:	deffc904 	addi	sp,sp,-220
 1807694:	df003515 	stw	fp,212(sp)
 1807698:	dd003115 	stw	r20,196(sp)
 180769c:	dfc03615 	stw	ra,216(sp)
 18076a0:	ddc03415 	stw	r23,208(sp)
 18076a4:	dd803315 	stw	r22,204(sp)
 18076a8:	dd403215 	stw	r21,200(sp)
 18076ac:	dcc03015 	stw	r19,192(sp)
 18076b0:	dc802f15 	stw	r18,188(sp)
 18076b4:	dc402e15 	stw	r17,184(sp)
 18076b8:	dc002d15 	stw	r16,180(sp)
 18076bc:	d9002015 	stw	r4,128(sp)
 18076c0:	d9c02215 	stw	r7,136(sp)
 18076c4:	2829883a 	mov	r20,r5
 18076c8:	3039883a 	mov	fp,r6
 18076cc:	20000226 	beq	r4,zero,18076d8 <___vfiprintf_internal_r+0x48>
 18076d0:	20800e17 	ldw	r2,56(r4)
 18076d4:	1000cf26 	beq	r2,zero,1807a14 <___vfiprintf_internal_r+0x384>
 18076d8:	a080030b 	ldhu	r2,12(r20)
 18076dc:	10c8000c 	andi	r3,r2,8192
 18076e0:	1800061e 	bne	r3,zero,18076fc <___vfiprintf_internal_r+0x6c>
 18076e4:	a1001917 	ldw	r4,100(r20)
 18076e8:	00f7ffc4 	movi	r3,-8193
 18076ec:	10880014 	ori	r2,r2,8192
 18076f0:	20c6703a 	and	r3,r4,r3
 18076f4:	a080030d 	sth	r2,12(r20)
 18076f8:	a0c01915 	stw	r3,100(r20)
 18076fc:	10c0020c 	andi	r3,r2,8
 1807700:	1800a926 	beq	r3,zero,18079a8 <___vfiprintf_internal_r+0x318>
 1807704:	a0c00417 	ldw	r3,16(r20)
 1807708:	1800a726 	beq	r3,zero,18079a8 <___vfiprintf_internal_r+0x318>
 180770c:	1080068c 	andi	r2,r2,26
 1807710:	00c00284 	movi	r3,10
 1807714:	10c0ac26 	beq	r2,r3,18079c8 <___vfiprintf_internal_r+0x338>
 1807718:	da801a04 	addi	r10,sp,104
 180771c:	da801e15 	stw	r10,120(sp)
 1807720:	d8801e17 	ldw	r2,120(sp)
 1807724:	da8019c4 	addi	r10,sp,103
 1807728:	05806134 	movhi	r22,388
 180772c:	05c06134 	movhi	r23,388
 1807730:	da801f15 	stw	r10,124(sp)
 1807734:	1295c83a 	sub	r10,r2,r10
 1807738:	b5827f04 	addi	r22,r22,2556
 180773c:	bdc27b04 	addi	r23,r23,2540
 1807740:	dec01a15 	stw	sp,104(sp)
 1807744:	d8001c15 	stw	zero,112(sp)
 1807748:	d8001b15 	stw	zero,108(sp)
 180774c:	d8002615 	stw	zero,152(sp)
 1807750:	d8002315 	stw	zero,140(sp)
 1807754:	da802715 	stw	r10,156(sp)
 1807758:	d811883a 	mov	r8,sp
 180775c:	dd002115 	stw	r20,132(sp)
 1807760:	e021883a 	mov	r16,fp
 1807764:	80800007 	ldb	r2,0(r16)
 1807768:	1003ea26 	beq	r2,zero,1808714 <___vfiprintf_internal_r+0x1084>
 180776c:	00c00944 	movi	r3,37
 1807770:	8025883a 	mov	r18,r16
 1807774:	10c0021e 	bne	r2,r3,1807780 <___vfiprintf_internal_r+0xf0>
 1807778:	00001606 	br	18077d4 <___vfiprintf_internal_r+0x144>
 180777c:	10c00326 	beq	r2,r3,180778c <___vfiprintf_internal_r+0xfc>
 1807780:	94800044 	addi	r18,r18,1
 1807784:	90800007 	ldb	r2,0(r18)
 1807788:	103ffc1e 	bne	r2,zero,180777c <__ram_exceptions_end+0xff7f748c>
 180778c:	9423c83a 	sub	r17,r18,r16
 1807790:	88001026 	beq	r17,zero,18077d4 <___vfiprintf_internal_r+0x144>
 1807794:	d8c01c17 	ldw	r3,112(sp)
 1807798:	d8801b17 	ldw	r2,108(sp)
 180779c:	44000015 	stw	r16,0(r8)
 18077a0:	88c7883a 	add	r3,r17,r3
 18077a4:	10800044 	addi	r2,r2,1
 18077a8:	44400115 	stw	r17,4(r8)
 18077ac:	d8c01c15 	stw	r3,112(sp)
 18077b0:	d8801b15 	stw	r2,108(sp)
 18077b4:	010001c4 	movi	r4,7
 18077b8:	2080760e 	bge	r4,r2,1807994 <___vfiprintf_internal_r+0x304>
 18077bc:	1803821e 	bne	r3,zero,18085c8 <___vfiprintf_internal_r+0xf38>
 18077c0:	da802317 	ldw	r10,140(sp)
 18077c4:	d8001b15 	stw	zero,108(sp)
 18077c8:	d811883a 	mov	r8,sp
 18077cc:	5455883a 	add	r10,r10,r17
 18077d0:	da802315 	stw	r10,140(sp)
 18077d4:	90800007 	ldb	r2,0(r18)
 18077d8:	10044626 	beq	r2,zero,18088f4 <___vfiprintf_internal_r+0x1264>
 18077dc:	90c00047 	ldb	r3,1(r18)
 18077e0:	94000044 	addi	r16,r18,1
 18077e4:	d8001d85 	stb	zero,118(sp)
 18077e8:	0009883a 	mov	r4,zero
 18077ec:	000f883a 	mov	r7,zero
 18077f0:	027fffc4 	movi	r9,-1
 18077f4:	0023883a 	mov	r17,zero
 18077f8:	0029883a 	mov	r20,zero
 18077fc:	01401604 	movi	r5,88
 1807800:	01800244 	movi	r6,9
 1807804:	03400a84 	movi	r13,42
 1807808:	03001b04 	movi	r12,108
 180780c:	84000044 	addi	r16,r16,1
 1807810:	18bff804 	addi	r2,r3,-32
 1807814:	28827336 	bltu	r5,r2,18081e4 <___vfiprintf_internal_r+0xb54>
 1807818:	100490ba 	slli	r2,r2,2
 180781c:	02806034 	movhi	r10,384
 1807820:	529e0c04 	addi	r10,r10,30768
 1807824:	1285883a 	add	r2,r2,r10
 1807828:	10800017 	ldw	r2,0(r2)
 180782c:	1000683a 	jmp	r2
 1807830:	01807f18 	cmpnei	r6,zero,508
 1807834:	018081e4 	muli	r6,zero,519
 1807838:	018081e4 	muli	r6,zero,519
 180783c:	01807f38 	rdprs	r6,zero,508
 1807840:	018081e4 	muli	r6,zero,519
 1807844:	018081e4 	muli	r6,zero,519
 1807848:	018081e4 	muli	r6,zero,519
 180784c:	018081e4 	muli	r6,zero,519
 1807850:	018081e4 	muli	r6,zero,519
 1807854:	018081e4 	muli	r6,zero,519
 1807858:	01808120 	cmpeqi	r6,zero,516
 180785c:	0180813c 	xorhi	r6,zero,516
 1807860:	018081e4 	muli	r6,zero,519
 1807864:	01807a24 	muli	r6,zero,488
 1807868:	0180814c 	andi	r6,zero,517
 180786c:	018081e4 	muli	r6,zero,519
 1807870:	01807f44 	movi	r6,509
 1807874:	01807f50 	cmplti	r6,zero,509
 1807878:	01807f50 	cmplti	r6,zero,509
 180787c:	01807f50 	cmplti	r6,zero,509
 1807880:	01807f50 	cmplti	r6,zero,509
 1807884:	01807f50 	cmplti	r6,zero,509
 1807888:	01807f50 	cmplti	r6,zero,509
 180788c:	01807f50 	cmplti	r6,zero,509
 1807890:	01807f50 	cmplti	r6,zero,509
 1807894:	01807f50 	cmplti	r6,zero,509
 1807898:	018081e4 	muli	r6,zero,519
 180789c:	018081e4 	muli	r6,zero,519
 18078a0:	018081e4 	muli	r6,zero,519
 18078a4:	018081e4 	muli	r6,zero,519
 18078a8:	018081e4 	muli	r6,zero,519
 18078ac:	018081e4 	muli	r6,zero,519
 18078b0:	018081e4 	muli	r6,zero,519
 18078b4:	018081e4 	muli	r6,zero,519
 18078b8:	018081e4 	muli	r6,zero,519
 18078bc:	018081e4 	muli	r6,zero,519
 18078c0:	01807f7c 	xorhi	r6,zero,509
 18078c4:	018081e4 	muli	r6,zero,519
 18078c8:	018081e4 	muli	r6,zero,519
 18078cc:	018081e4 	muli	r6,zero,519
 18078d0:	018081e4 	muli	r6,zero,519
 18078d4:	018081e4 	muli	r6,zero,519
 18078d8:	018081e4 	muli	r6,zero,519
 18078dc:	018081e4 	muli	r6,zero,519
 18078e0:	018081e4 	muli	r6,zero,519
 18078e4:	018081e4 	muli	r6,zero,519
 18078e8:	018081e4 	muli	r6,zero,519
 18078ec:	01807fb4 	movhi	r6,510
 18078f0:	018081e4 	muli	r6,zero,519
 18078f4:	018081e4 	muli	r6,zero,519
 18078f8:	018081e4 	muli	r6,zero,519
 18078fc:	018081e4 	muli	r6,zero,519
 1807900:	018081e4 	muli	r6,zero,519
 1807904:	0180800c 	andi	r6,zero,512
 1807908:	018081e4 	muli	r6,zero,519
 180790c:	018081e4 	muli	r6,zero,519
 1807910:	0180807c 	xorhi	r6,zero,513
 1807914:	018081e4 	muli	r6,zero,519
 1807918:	018081e4 	muli	r6,zero,519
 180791c:	018081e4 	muli	r6,zero,519
 1807920:	018081e4 	muli	r6,zero,519
 1807924:	018081e4 	muli	r6,zero,519
 1807928:	018081e4 	muli	r6,zero,519
 180792c:	018081e4 	muli	r6,zero,519
 1807930:	018081e4 	muli	r6,zero,519
 1807934:	018081e4 	muli	r6,zero,519
 1807938:	018081e4 	muli	r6,zero,519
 180793c:	01807e28 	cmpgeui	r6,zero,504
 1807940:	01807e54 	movui	r6,505
 1807944:	018081e4 	muli	r6,zero,519
 1807948:	018081e4 	muli	r6,zero,519
 180794c:	018081e4 	muli	r6,zero,519
 1807950:	0180818c 	andi	r6,zero,518
 1807954:	01807e54 	movui	r6,505
 1807958:	018081e4 	muli	r6,zero,519
 180795c:	018081e4 	muli	r6,zero,519
 1807960:	01807ce8 	cmpgeui	r6,zero,499
 1807964:	018081e4 	muli	r6,zero,519
 1807968:	01807cf8 	rdprs	r6,zero,499
 180796c:	01807d34 	movhi	r6,500
 1807970:	01807a30 	cmpltui	r6,zero,488
 1807974:	01807cdc 	xori	r6,zero,499
 1807978:	018081e4 	muli	r6,zero,519
 180797c:	018080b8 	rdprs	r6,zero,514
 1807980:	018081e4 	muli	r6,zero,519
 1807984:	01808110 	cmplti	r6,zero,516
 1807988:	018081e4 	muli	r6,zero,519
 180798c:	018081e4 	muli	r6,zero,519
 1807990:	01807dd4 	movui	r6,503
 1807994:	42000204 	addi	r8,r8,8
 1807998:	da802317 	ldw	r10,140(sp)
 180799c:	5455883a 	add	r10,r10,r17
 18079a0:	da802315 	stw	r10,140(sp)
 18079a4:	003f8b06 	br	18077d4 <__ram_exceptions_end+0xff7f74e4>
 18079a8:	d9002017 	ldw	r4,128(sp)
 18079ac:	a00b883a 	mov	r5,r20
 18079b0:	1802e300 	call	1802e30 <__swsetup_r>
 18079b4:	1003b11e 	bne	r2,zero,180887c <___vfiprintf_internal_r+0x11ec>
 18079b8:	a080030b 	ldhu	r2,12(r20)
 18079bc:	00c00284 	movi	r3,10
 18079c0:	1080068c 	andi	r2,r2,26
 18079c4:	10ff541e 	bne	r2,r3,1807718 <__ram_exceptions_end+0xff7f7428>
 18079c8:	a080038f 	ldh	r2,14(r20)
 18079cc:	103f5216 	blt	r2,zero,1807718 <__ram_exceptions_end+0xff7f7428>
 18079d0:	d9c02217 	ldw	r7,136(sp)
 18079d4:	d9002017 	ldw	r4,128(sp)
 18079d8:	e00d883a 	mov	r6,fp
 18079dc:	a00b883a 	mov	r5,r20
 18079e0:	1808b080 	call	1808b08 <__sbprintf>
 18079e4:	dfc03617 	ldw	ra,216(sp)
 18079e8:	df003517 	ldw	fp,212(sp)
 18079ec:	ddc03417 	ldw	r23,208(sp)
 18079f0:	dd803317 	ldw	r22,204(sp)
 18079f4:	dd403217 	ldw	r21,200(sp)
 18079f8:	dd003117 	ldw	r20,196(sp)
 18079fc:	dcc03017 	ldw	r19,192(sp)
 1807a00:	dc802f17 	ldw	r18,188(sp)
 1807a04:	dc402e17 	ldw	r17,184(sp)
 1807a08:	dc002d17 	ldw	r16,180(sp)
 1807a0c:	dec03704 	addi	sp,sp,220
 1807a10:	f800283a 	ret
 1807a14:	1804e040 	call	1804e04 <__sinit>
 1807a18:	003f2f06 	br	18076d8 <__ram_exceptions_end+0xff7f73e8>
 1807a1c:	0463c83a 	sub	r17,zero,r17
 1807a20:	d8802215 	stw	r2,136(sp)
 1807a24:	a5000114 	ori	r20,r20,4
 1807a28:	80c00007 	ldb	r3,0(r16)
 1807a2c:	003f7706 	br	180780c <__ram_exceptions_end+0xff7f751c>
 1807a30:	00800c04 	movi	r2,48
 1807a34:	da802217 	ldw	r10,136(sp)
 1807a38:	d8801d05 	stb	r2,116(sp)
 1807a3c:	00801e04 	movi	r2,120
 1807a40:	d8801d45 	stb	r2,117(sp)
 1807a44:	d8001d85 	stb	zero,118(sp)
 1807a48:	50c00104 	addi	r3,r10,4
 1807a4c:	54800017 	ldw	r18,0(r10)
 1807a50:	0027883a 	mov	r19,zero
 1807a54:	a0800094 	ori	r2,r20,2
 1807a58:	48030b16 	blt	r9,zero,1808688 <___vfiprintf_internal_r+0xff8>
 1807a5c:	00bfdfc4 	movi	r2,-129
 1807a60:	a096703a 	and	r11,r20,r2
 1807a64:	d8c02215 	stw	r3,136(sp)
 1807a68:	5d000094 	ori	r20,r11,2
 1807a6c:	90032b1e 	bne	r18,zero,180871c <___vfiprintf_internal_r+0x108c>
 1807a70:	00806134 	movhi	r2,388
 1807a74:	10821a04 	addi	r2,r2,2152
 1807a78:	d8802615 	stw	r2,152(sp)
 1807a7c:	0039883a 	mov	fp,zero
 1807a80:	48017b1e 	bne	r9,zero,1808070 <___vfiprintf_internal_r+0x9e0>
 1807a84:	0013883a 	mov	r9,zero
 1807a88:	0027883a 	mov	r19,zero
 1807a8c:	dd401a04 	addi	r21,sp,104
 1807a90:	4825883a 	mov	r18,r9
 1807a94:	4cc0010e 	bge	r9,r19,1807a9c <___vfiprintf_internal_r+0x40c>
 1807a98:	9825883a 	mov	r18,r19
 1807a9c:	e7003fcc 	andi	fp,fp,255
 1807aa0:	e700201c 	xori	fp,fp,128
 1807aa4:	e73fe004 	addi	fp,fp,-128
 1807aa8:	e0000126 	beq	fp,zero,1807ab0 <___vfiprintf_internal_r+0x420>
 1807aac:	94800044 	addi	r18,r18,1
 1807ab0:	a380008c 	andi	r14,r20,2
 1807ab4:	70000126 	beq	r14,zero,1807abc <___vfiprintf_internal_r+0x42c>
 1807ab8:	94800084 	addi	r18,r18,2
 1807abc:	a700210c 	andi	fp,r20,132
 1807ac0:	e001df1e 	bne	fp,zero,1808240 <___vfiprintf_internal_r+0xbb0>
 1807ac4:	8c87c83a 	sub	r3,r17,r18
 1807ac8:	00c1dd0e 	bge	zero,r3,1808240 <___vfiprintf_internal_r+0xbb0>
 1807acc:	01c00404 	movi	r7,16
 1807ad0:	d8801c17 	ldw	r2,112(sp)
 1807ad4:	38c3ad0e 	bge	r7,r3,180898c <___vfiprintf_internal_r+0x12fc>
 1807ad8:	02806134 	movhi	r10,388
 1807adc:	52827f04 	addi	r10,r10,2556
 1807ae0:	dc002915 	stw	r16,164(sp)
 1807ae4:	d9801b17 	ldw	r6,108(sp)
 1807ae8:	da802415 	stw	r10,144(sp)
 1807aec:	03c001c4 	movi	r15,7
 1807af0:	da402515 	stw	r9,148(sp)
 1807af4:	db802815 	stw	r14,160(sp)
 1807af8:	1821883a 	mov	r16,r3
 1807afc:	00000506 	br	1807b14 <___vfiprintf_internal_r+0x484>
 1807b00:	31400084 	addi	r5,r6,2
 1807b04:	42000204 	addi	r8,r8,8
 1807b08:	200d883a 	mov	r6,r4
 1807b0c:	843ffc04 	addi	r16,r16,-16
 1807b10:	3c000d0e 	bge	r7,r16,1807b48 <___vfiprintf_internal_r+0x4b8>
 1807b14:	10800404 	addi	r2,r2,16
 1807b18:	31000044 	addi	r4,r6,1
 1807b1c:	45800015 	stw	r22,0(r8)
 1807b20:	41c00115 	stw	r7,4(r8)
 1807b24:	d8801c15 	stw	r2,112(sp)
 1807b28:	d9001b15 	stw	r4,108(sp)
 1807b2c:	793ff40e 	bge	r15,r4,1807b00 <__ram_exceptions_end+0xff7f7810>
 1807b30:	1001b51e 	bne	r2,zero,1808208 <___vfiprintf_internal_r+0xb78>
 1807b34:	843ffc04 	addi	r16,r16,-16
 1807b38:	000d883a 	mov	r6,zero
 1807b3c:	01400044 	movi	r5,1
 1807b40:	d811883a 	mov	r8,sp
 1807b44:	3c3ff316 	blt	r7,r16,1807b14 <__ram_exceptions_end+0xff7f7824>
 1807b48:	8007883a 	mov	r3,r16
 1807b4c:	da402517 	ldw	r9,148(sp)
 1807b50:	db802817 	ldw	r14,160(sp)
 1807b54:	dc002917 	ldw	r16,164(sp)
 1807b58:	da802417 	ldw	r10,144(sp)
 1807b5c:	1885883a 	add	r2,r3,r2
 1807b60:	40c00115 	stw	r3,4(r8)
 1807b64:	42800015 	stw	r10,0(r8)
 1807b68:	d8801c15 	stw	r2,112(sp)
 1807b6c:	d9401b15 	stw	r5,108(sp)
 1807b70:	00c001c4 	movi	r3,7
 1807b74:	19426016 	blt	r3,r5,18084f8 <___vfiprintf_internal_r+0xe68>
 1807b78:	d8c01d87 	ldb	r3,118(sp)
 1807b7c:	42000204 	addi	r8,r8,8
 1807b80:	29000044 	addi	r4,r5,1
 1807b84:	1801b31e 	bne	r3,zero,1808254 <___vfiprintf_internal_r+0xbc4>
 1807b88:	7001c026 	beq	r14,zero,180828c <___vfiprintf_internal_r+0xbfc>
 1807b8c:	d8c01d04 	addi	r3,sp,116
 1807b90:	10800084 	addi	r2,r2,2
 1807b94:	40c00015 	stw	r3,0(r8)
 1807b98:	00c00084 	movi	r3,2
 1807b9c:	40c00115 	stw	r3,4(r8)
 1807ba0:	d8801c15 	stw	r2,112(sp)
 1807ba4:	d9001b15 	stw	r4,108(sp)
 1807ba8:	00c001c4 	movi	r3,7
 1807bac:	1902650e 	bge	r3,r4,1808544 <___vfiprintf_internal_r+0xeb4>
 1807bb0:	10029a1e 	bne	r2,zero,180861c <___vfiprintf_internal_r+0xf8c>
 1807bb4:	00c02004 	movi	r3,128
 1807bb8:	01000044 	movi	r4,1
 1807bbc:	000b883a 	mov	r5,zero
 1807bc0:	d811883a 	mov	r8,sp
 1807bc4:	e0c1b31e 	bne	fp,r3,1808294 <___vfiprintf_internal_r+0xc04>
 1807bc8:	8cb9c83a 	sub	fp,r17,r18
 1807bcc:	0701b10e 	bge	zero,fp,1808294 <___vfiprintf_internal_r+0xc04>
 1807bd0:	01c00404 	movi	r7,16
 1807bd4:	3f03890e 	bge	r7,fp,18089fc <___vfiprintf_internal_r+0x136c>
 1807bd8:	00c06134 	movhi	r3,388
 1807bdc:	18c27b04 	addi	r3,r3,2540
 1807be0:	d8c02415 	stw	r3,144(sp)
 1807be4:	8007883a 	mov	r3,r16
 1807be8:	034001c4 	movi	r13,7
 1807bec:	e021883a 	mov	r16,fp
 1807bf0:	da402515 	stw	r9,148(sp)
 1807bf4:	1839883a 	mov	fp,r3
 1807bf8:	00000506 	br	1807c10 <___vfiprintf_internal_r+0x580>
 1807bfc:	29800084 	addi	r6,r5,2
 1807c00:	42000204 	addi	r8,r8,8
 1807c04:	180b883a 	mov	r5,r3
 1807c08:	843ffc04 	addi	r16,r16,-16
 1807c0c:	3c000d0e 	bge	r7,r16,1807c44 <___vfiprintf_internal_r+0x5b4>
 1807c10:	10800404 	addi	r2,r2,16
 1807c14:	28c00044 	addi	r3,r5,1
 1807c18:	45c00015 	stw	r23,0(r8)
 1807c1c:	41c00115 	stw	r7,4(r8)
 1807c20:	d8801c15 	stw	r2,112(sp)
 1807c24:	d8c01b15 	stw	r3,108(sp)
 1807c28:	68fff40e 	bge	r13,r3,1807bfc <__ram_exceptions_end+0xff7f790c>
 1807c2c:	1002241e 	bne	r2,zero,18084c0 <___vfiprintf_internal_r+0xe30>
 1807c30:	843ffc04 	addi	r16,r16,-16
 1807c34:	01800044 	movi	r6,1
 1807c38:	000b883a 	mov	r5,zero
 1807c3c:	d811883a 	mov	r8,sp
 1807c40:	3c3ff316 	blt	r7,r16,1807c10 <__ram_exceptions_end+0xff7f7920>
 1807c44:	da402517 	ldw	r9,148(sp)
 1807c48:	e007883a 	mov	r3,fp
 1807c4c:	8039883a 	mov	fp,r16
 1807c50:	1821883a 	mov	r16,r3
 1807c54:	d8c02417 	ldw	r3,144(sp)
 1807c58:	1705883a 	add	r2,r2,fp
 1807c5c:	47000115 	stw	fp,4(r8)
 1807c60:	40c00015 	stw	r3,0(r8)
 1807c64:	d8801c15 	stw	r2,112(sp)
 1807c68:	d9801b15 	stw	r6,108(sp)
 1807c6c:	00c001c4 	movi	r3,7
 1807c70:	19827616 	blt	r3,r6,180864c <___vfiprintf_internal_r+0xfbc>
 1807c74:	4cf9c83a 	sub	fp,r9,r19
 1807c78:	42000204 	addi	r8,r8,8
 1807c7c:	31000044 	addi	r4,r6,1
 1807c80:	300b883a 	mov	r5,r6
 1807c84:	07018516 	blt	zero,fp,180829c <___vfiprintf_internal_r+0xc0c>
 1807c88:	9885883a 	add	r2,r19,r2
 1807c8c:	45400015 	stw	r21,0(r8)
 1807c90:	44c00115 	stw	r19,4(r8)
 1807c94:	d8801c15 	stw	r2,112(sp)
 1807c98:	d9001b15 	stw	r4,108(sp)
 1807c9c:	00c001c4 	movi	r3,7
 1807ca0:	1901dd0e 	bge	r3,r4,1808418 <___vfiprintf_internal_r+0xd88>
 1807ca4:	1002401e 	bne	r2,zero,18085a8 <___vfiprintf_internal_r+0xf18>
 1807ca8:	d8001b15 	stw	zero,108(sp)
 1807cac:	a2c0010c 	andi	r11,r20,4
 1807cb0:	58000226 	beq	r11,zero,1807cbc <___vfiprintf_internal_r+0x62c>
 1807cb4:	8ca7c83a 	sub	r19,r17,r18
 1807cb8:	04c2f216 	blt	zero,r19,1808884 <___vfiprintf_internal_r+0x11f4>
 1807cbc:	8c80010e 	bge	r17,r18,1807cc4 <___vfiprintf_internal_r+0x634>
 1807cc0:	9023883a 	mov	r17,r18
 1807cc4:	da802317 	ldw	r10,140(sp)
 1807cc8:	5455883a 	add	r10,r10,r17
 1807ccc:	da802315 	stw	r10,140(sp)
 1807cd0:	d8001b15 	stw	zero,108(sp)
 1807cd4:	d811883a 	mov	r8,sp
 1807cd8:	003ea206 	br	1807764 <__ram_exceptions_end+0xff7f7474>
 1807cdc:	a5000814 	ori	r20,r20,32
 1807ce0:	80c00007 	ldb	r3,0(r16)
 1807ce4:	003ec906 	br	180780c <__ram_exceptions_end+0xff7f751c>
 1807ce8:	80c00007 	ldb	r3,0(r16)
 1807cec:	1b030926 	beq	r3,r12,1808914 <___vfiprintf_internal_r+0x1284>
 1807cf0:	a5000414 	ori	r20,r20,16
 1807cf4:	003ec506 	br	180780c <__ram_exceptions_end+0xff7f751c>
 1807cf8:	21003fcc 	andi	r4,r4,255
 1807cfc:	20035e1e 	bne	r4,zero,1808a78 <___vfiprintf_internal_r+0x13e8>
 1807d00:	a080080c 	andi	r2,r20,32
 1807d04:	1002a526 	beq	r2,zero,180879c <___vfiprintf_internal_r+0x110c>
 1807d08:	da802217 	ldw	r10,136(sp)
 1807d0c:	50800017 	ldw	r2,0(r10)
 1807d10:	da802317 	ldw	r10,140(sp)
 1807d14:	5007d7fa 	srai	r3,r10,31
 1807d18:	da802217 	ldw	r10,136(sp)
 1807d1c:	10c00115 	stw	r3,4(r2)
 1807d20:	52800104 	addi	r10,r10,4
 1807d24:	da802215 	stw	r10,136(sp)
 1807d28:	da802317 	ldw	r10,140(sp)
 1807d2c:	12800015 	stw	r10,0(r2)
 1807d30:	003e8c06 	br	1807764 <__ram_exceptions_end+0xff7f7474>
 1807d34:	21003fcc 	andi	r4,r4,255
 1807d38:	2003511e 	bne	r4,zero,1808a80 <___vfiprintf_internal_r+0x13f0>
 1807d3c:	a080080c 	andi	r2,r20,32
 1807d40:	1000a126 	beq	r2,zero,1807fc8 <___vfiprintf_internal_r+0x938>
 1807d44:	da802217 	ldw	r10,136(sp)
 1807d48:	d8001d85 	stb	zero,118(sp)
 1807d4c:	50800204 	addi	r2,r10,8
 1807d50:	54800017 	ldw	r18,0(r10)
 1807d54:	54c00117 	ldw	r19,4(r10)
 1807d58:	4802b416 	blt	r9,zero,180882c <___vfiprintf_internal_r+0x119c>
 1807d5c:	013fdfc4 	movi	r4,-129
 1807d60:	94c6b03a 	or	r3,r18,r19
 1807d64:	d8802215 	stw	r2,136(sp)
 1807d68:	a128703a 	and	r20,r20,r4
 1807d6c:	1800a226 	beq	r3,zero,1807ff8 <___vfiprintf_internal_r+0x968>
 1807d70:	0039883a 	mov	fp,zero
 1807d74:	dd401a04 	addi	r21,sp,104
 1807d78:	9006d0fa 	srli	r3,r18,3
 1807d7c:	9808977a 	slli	r4,r19,29
 1807d80:	9826d0fa 	srli	r19,r19,3
 1807d84:	948001cc 	andi	r18,r18,7
 1807d88:	90800c04 	addi	r2,r18,48
 1807d8c:	ad7fffc4 	addi	r21,r21,-1
 1807d90:	20e4b03a 	or	r18,r4,r3
 1807d94:	a8800005 	stb	r2,0(r21)
 1807d98:	94c6b03a 	or	r3,r18,r19
 1807d9c:	183ff61e 	bne	r3,zero,1807d78 <__ram_exceptions_end+0xff7f7a88>
 1807da0:	a0c0004c 	andi	r3,r20,1
 1807da4:	18005926 	beq	r3,zero,1807f0c <___vfiprintf_internal_r+0x87c>
 1807da8:	10803fcc 	andi	r2,r2,255
 1807dac:	1080201c 	xori	r2,r2,128
 1807db0:	10bfe004 	addi	r2,r2,-128
 1807db4:	00c00c04 	movi	r3,48
 1807db8:	10c05426 	beq	r2,r3,1807f0c <___vfiprintf_internal_r+0x87c>
 1807dbc:	da801e17 	ldw	r10,120(sp)
 1807dc0:	a8bfffc4 	addi	r2,r21,-1
 1807dc4:	a8ffffc5 	stb	r3,-1(r21)
 1807dc8:	50a7c83a 	sub	r19,r10,r2
 1807dcc:	102b883a 	mov	r21,r2
 1807dd0:	003f2f06 	br	1807a90 <__ram_exceptions_end+0xff7f77a0>
 1807dd4:	21003fcc 	andi	r4,r4,255
 1807dd8:	2003421e 	bne	r4,zero,1808ae4 <___vfiprintf_internal_r+0x1454>
 1807ddc:	00806134 	movhi	r2,388
 1807de0:	10821a04 	addi	r2,r2,2152
 1807de4:	d8802615 	stw	r2,152(sp)
 1807de8:	a080080c 	andi	r2,r20,32
 1807dec:	1000aa26 	beq	r2,zero,1808098 <___vfiprintf_internal_r+0xa08>
 1807df0:	da802217 	ldw	r10,136(sp)
 1807df4:	54800017 	ldw	r18,0(r10)
 1807df8:	54c00117 	ldw	r19,4(r10)
 1807dfc:	52800204 	addi	r10,r10,8
 1807e00:	da802215 	stw	r10,136(sp)
 1807e04:	a080004c 	andi	r2,r20,1
 1807e08:	1001d226 	beq	r2,zero,1808554 <___vfiprintf_internal_r+0xec4>
 1807e0c:	94c4b03a 	or	r2,r18,r19
 1807e10:	1002351e 	bne	r2,zero,18086e8 <___vfiprintf_internal_r+0x1058>
 1807e14:	d8001d85 	stb	zero,118(sp)
 1807e18:	48022216 	blt	r9,zero,18086a4 <___vfiprintf_internal_r+0x1014>
 1807e1c:	00bfdfc4 	movi	r2,-129
 1807e20:	a0a8703a 	and	r20,r20,r2
 1807e24:	003f1506 	br	1807a7c <__ram_exceptions_end+0xff7f778c>
 1807e28:	da802217 	ldw	r10,136(sp)
 1807e2c:	04800044 	movi	r18,1
 1807e30:	d8001d85 	stb	zero,118(sp)
 1807e34:	50800017 	ldw	r2,0(r10)
 1807e38:	52800104 	addi	r10,r10,4
 1807e3c:	da802215 	stw	r10,136(sp)
 1807e40:	d8801005 	stb	r2,64(sp)
 1807e44:	9027883a 	mov	r19,r18
 1807e48:	dd401004 	addi	r21,sp,64
 1807e4c:	0013883a 	mov	r9,zero
 1807e50:	003f1706 	br	1807ab0 <__ram_exceptions_end+0xff7f77c0>
 1807e54:	21003fcc 	andi	r4,r4,255
 1807e58:	2003201e 	bne	r4,zero,1808adc <___vfiprintf_internal_r+0x144c>
 1807e5c:	a080080c 	andi	r2,r20,32
 1807e60:	10004b26 	beq	r2,zero,1807f90 <___vfiprintf_internal_r+0x900>
 1807e64:	da802217 	ldw	r10,136(sp)
 1807e68:	50800117 	ldw	r2,4(r10)
 1807e6c:	54800017 	ldw	r18,0(r10)
 1807e70:	52800204 	addi	r10,r10,8
 1807e74:	da802215 	stw	r10,136(sp)
 1807e78:	1027883a 	mov	r19,r2
 1807e7c:	10022c16 	blt	r2,zero,1808730 <___vfiprintf_internal_r+0x10a0>
 1807e80:	df001d83 	ldbu	fp,118(sp)
 1807e84:	48007216 	blt	r9,zero,1808050 <___vfiprintf_internal_r+0x9c0>
 1807e88:	00ffdfc4 	movi	r3,-129
 1807e8c:	94c4b03a 	or	r2,r18,r19
 1807e90:	a0e8703a 	and	r20,r20,r3
 1807e94:	1000cc26 	beq	r2,zero,18081c8 <___vfiprintf_internal_r+0xb38>
 1807e98:	98021026 	beq	r19,zero,18086dc <___vfiprintf_internal_r+0x104c>
 1807e9c:	dc402415 	stw	r17,144(sp)
 1807ea0:	dc002515 	stw	r16,148(sp)
 1807ea4:	9823883a 	mov	r17,r19
 1807ea8:	9021883a 	mov	r16,r18
 1807eac:	dd401a04 	addi	r21,sp,104
 1807eb0:	4825883a 	mov	r18,r9
 1807eb4:	4027883a 	mov	r19,r8
 1807eb8:	8009883a 	mov	r4,r16
 1807ebc:	880b883a 	mov	r5,r17
 1807ec0:	01800284 	movi	r6,10
 1807ec4:	000f883a 	mov	r7,zero
 1807ec8:	180a5ec0 	call	180a5ec <__umoddi3>
 1807ecc:	10800c04 	addi	r2,r2,48
 1807ed0:	ad7fffc4 	addi	r21,r21,-1
 1807ed4:	8009883a 	mov	r4,r16
 1807ed8:	880b883a 	mov	r5,r17
 1807edc:	a8800005 	stb	r2,0(r21)
 1807ee0:	01800284 	movi	r6,10
 1807ee4:	000f883a 	mov	r7,zero
 1807ee8:	180a0740 	call	180a074 <__udivdi3>
 1807eec:	1021883a 	mov	r16,r2
 1807ef0:	10c4b03a 	or	r2,r2,r3
 1807ef4:	1823883a 	mov	r17,r3
 1807ef8:	103fef1e 	bne	r2,zero,1807eb8 <__ram_exceptions_end+0xff7f7bc8>
 1807efc:	dc402417 	ldw	r17,144(sp)
 1807f00:	dc002517 	ldw	r16,148(sp)
 1807f04:	9013883a 	mov	r9,r18
 1807f08:	9811883a 	mov	r8,r19
 1807f0c:	da801e17 	ldw	r10,120(sp)
 1807f10:	5567c83a 	sub	r19,r10,r21
 1807f14:	003ede06 	br	1807a90 <__ram_exceptions_end+0xff7f77a0>
 1807f18:	38803fcc 	andi	r2,r7,255
 1807f1c:	1080201c 	xori	r2,r2,128
 1807f20:	10bfe004 	addi	r2,r2,-128
 1807f24:	1002371e 	bne	r2,zero,1808804 <___vfiprintf_internal_r+0x1174>
 1807f28:	01000044 	movi	r4,1
 1807f2c:	01c00804 	movi	r7,32
 1807f30:	80c00007 	ldb	r3,0(r16)
 1807f34:	003e3506 	br	180780c <__ram_exceptions_end+0xff7f751c>
 1807f38:	a5000054 	ori	r20,r20,1
 1807f3c:	80c00007 	ldb	r3,0(r16)
 1807f40:	003e3206 	br	180780c <__ram_exceptions_end+0xff7f751c>
 1807f44:	a5002014 	ori	r20,r20,128
 1807f48:	80c00007 	ldb	r3,0(r16)
 1807f4c:	003e2f06 	br	180780c <__ram_exceptions_end+0xff7f751c>
 1807f50:	8015883a 	mov	r10,r16
 1807f54:	0023883a 	mov	r17,zero
 1807f58:	18bff404 	addi	r2,r3,-48
 1807f5c:	50c00007 	ldb	r3,0(r10)
 1807f60:	8c4002a4 	muli	r17,r17,10
 1807f64:	84000044 	addi	r16,r16,1
 1807f68:	8015883a 	mov	r10,r16
 1807f6c:	1463883a 	add	r17,r2,r17
 1807f70:	18bff404 	addi	r2,r3,-48
 1807f74:	30bff92e 	bgeu	r6,r2,1807f5c <__ram_exceptions_end+0xff7f7c6c>
 1807f78:	003e2506 	br	1807810 <__ram_exceptions_end+0xff7f7520>
 1807f7c:	21003fcc 	andi	r4,r4,255
 1807f80:	2002d41e 	bne	r4,zero,1808ad4 <___vfiprintf_internal_r+0x1444>
 1807f84:	a5000414 	ori	r20,r20,16
 1807f88:	a080080c 	andi	r2,r20,32
 1807f8c:	103fb51e 	bne	r2,zero,1807e64 <__ram_exceptions_end+0xff7f7b74>
 1807f90:	a080040c 	andi	r2,r20,16
 1807f94:	1001f826 	beq	r2,zero,1808778 <___vfiprintf_internal_r+0x10e8>
 1807f98:	da802217 	ldw	r10,136(sp)
 1807f9c:	54800017 	ldw	r18,0(r10)
 1807fa0:	52800104 	addi	r10,r10,4
 1807fa4:	da802215 	stw	r10,136(sp)
 1807fa8:	9027d7fa 	srai	r19,r18,31
 1807fac:	9805883a 	mov	r2,r19
 1807fb0:	003fb206 	br	1807e7c <__ram_exceptions_end+0xff7f7b8c>
 1807fb4:	21003fcc 	andi	r4,r4,255
 1807fb8:	2002c41e 	bne	r4,zero,1808acc <___vfiprintf_internal_r+0x143c>
 1807fbc:	a5000414 	ori	r20,r20,16
 1807fc0:	a080080c 	andi	r2,r20,32
 1807fc4:	103f5f1e 	bne	r2,zero,1807d44 <__ram_exceptions_end+0xff7f7a54>
 1807fc8:	a080040c 	andi	r2,r20,16
 1807fcc:	10020f26 	beq	r2,zero,180880c <___vfiprintf_internal_r+0x117c>
 1807fd0:	da802217 	ldw	r10,136(sp)
 1807fd4:	d8001d85 	stb	zero,118(sp)
 1807fd8:	0027883a 	mov	r19,zero
 1807fdc:	50800104 	addi	r2,r10,4
 1807fe0:	54800017 	ldw	r18,0(r10)
 1807fe4:	48021116 	blt	r9,zero,180882c <___vfiprintf_internal_r+0x119c>
 1807fe8:	00ffdfc4 	movi	r3,-129
 1807fec:	d8802215 	stw	r2,136(sp)
 1807ff0:	a0e8703a 	and	r20,r20,r3
 1807ff4:	903f5e1e 	bne	r18,zero,1807d70 <__ram_exceptions_end+0xff7f7a80>
 1807ff8:	0039883a 	mov	fp,zero
 1807ffc:	4802a626 	beq	r9,zero,1808a98 <___vfiprintf_internal_r+0x1408>
 1808000:	0025883a 	mov	r18,zero
 1808004:	0027883a 	mov	r19,zero
 1808008:	003f5a06 	br	1807d74 <__ram_exceptions_end+0xff7f7a84>
 180800c:	21003fcc 	andi	r4,r4,255
 1808010:	20029f1e 	bne	r4,zero,1808a90 <___vfiprintf_internal_r+0x1400>
 1808014:	a5000414 	ori	r20,r20,16
 1808018:	a080080c 	andi	r2,r20,32
 180801c:	10005e1e 	bne	r2,zero,1808198 <___vfiprintf_internal_r+0xb08>
 1808020:	a080040c 	andi	r2,r20,16
 1808024:	1001a21e 	bne	r2,zero,18086b0 <___vfiprintf_internal_r+0x1020>
 1808028:	a080100c 	andi	r2,r20,64
 180802c:	d8001d85 	stb	zero,118(sp)
 1808030:	da802217 	ldw	r10,136(sp)
 1808034:	1002231e 	bne	r2,zero,18088c4 <___vfiprintf_internal_r+0x1234>
 1808038:	50800104 	addi	r2,r10,4
 180803c:	54800017 	ldw	r18,0(r10)
 1808040:	0027883a 	mov	r19,zero
 1808044:	4801a00e 	bge	r9,zero,18086c8 <___vfiprintf_internal_r+0x1038>
 1808048:	d8802215 	stw	r2,136(sp)
 180804c:	0039883a 	mov	fp,zero
 1808050:	94c4b03a 	or	r2,r18,r19
 1808054:	103f901e 	bne	r2,zero,1807e98 <__ram_exceptions_end+0xff7f7ba8>
 1808058:	00800044 	movi	r2,1
 180805c:	10803fcc 	andi	r2,r2,255
 1808060:	00c00044 	movi	r3,1
 1808064:	10c05926 	beq	r2,r3,18081cc <___vfiprintf_internal_r+0xb3c>
 1808068:	00c00084 	movi	r3,2
 180806c:	10ffe41e 	bne	r2,r3,1808000 <__ram_exceptions_end+0xff7f7d10>
 1808070:	0025883a 	mov	r18,zero
 1808074:	0027883a 	mov	r19,zero
 1808078:	00013d06 	br	1808570 <___vfiprintf_internal_r+0xee0>
 180807c:	21003fcc 	andi	r4,r4,255
 1808080:	2002811e 	bne	r4,zero,1808a88 <___vfiprintf_internal_r+0x13f8>
 1808084:	00806134 	movhi	r2,388
 1808088:	10821504 	addi	r2,r2,2132
 180808c:	d8802615 	stw	r2,152(sp)
 1808090:	a080080c 	andi	r2,r20,32
 1808094:	103f561e 	bne	r2,zero,1807df0 <__ram_exceptions_end+0xff7f7b00>
 1808098:	a080040c 	andi	r2,r20,16
 180809c:	1001d126 	beq	r2,zero,18087e4 <___vfiprintf_internal_r+0x1154>
 18080a0:	da802217 	ldw	r10,136(sp)
 18080a4:	0027883a 	mov	r19,zero
 18080a8:	54800017 	ldw	r18,0(r10)
 18080ac:	52800104 	addi	r10,r10,4
 18080b0:	da802215 	stw	r10,136(sp)
 18080b4:	003f5306 	br	1807e04 <__ram_exceptions_end+0xff7f7b14>
 18080b8:	da802217 	ldw	r10,136(sp)
 18080bc:	d8001d85 	stb	zero,118(sp)
 18080c0:	55400017 	ldw	r21,0(r10)
 18080c4:	50c00104 	addi	r3,r10,4
 18080c8:	a8024226 	beq	r21,zero,18089d4 <___vfiprintf_internal_r+0x1344>
 18080cc:	48021816 	blt	r9,zero,1808930 <___vfiprintf_internal_r+0x12a0>
 18080d0:	480d883a 	mov	r6,r9
 18080d4:	000b883a 	mov	r5,zero
 18080d8:	a809883a 	mov	r4,r21
 18080dc:	d8c02a15 	stw	r3,168(sp)
 18080e0:	da002b15 	stw	r8,172(sp)
 18080e4:	da402c15 	stw	r9,176(sp)
 18080e8:	1805eb40 	call	1805eb4 <memchr>
 18080ec:	d8c02a17 	ldw	r3,168(sp)
 18080f0:	da002b17 	ldw	r8,172(sp)
 18080f4:	da402c17 	ldw	r9,176(sp)
 18080f8:	10024826 	beq	r2,zero,1808a1c <___vfiprintf_internal_r+0x138c>
 18080fc:	1567c83a 	sub	r19,r2,r21
 1808100:	df001d83 	ldbu	fp,118(sp)
 1808104:	d8c02215 	stw	r3,136(sp)
 1808108:	0013883a 	mov	r9,zero
 180810c:	003e6006 	br	1807a90 <__ram_exceptions_end+0xff7f77a0>
 1808110:	21003fcc 	andi	r4,r4,255
 1808114:	203fc026 	beq	r4,zero,1808018 <__ram_exceptions_end+0xff7f7d28>
 1808118:	d9c01d85 	stb	r7,118(sp)
 180811c:	003fbe06 	br	1808018 <__ram_exceptions_end+0xff7f7d28>
 1808120:	da802217 	ldw	r10,136(sp)
 1808124:	54400017 	ldw	r17,0(r10)
 1808128:	50800104 	addi	r2,r10,4
 180812c:	883e3b16 	blt	r17,zero,1807a1c <__ram_exceptions_end+0xff7f772c>
 1808130:	d8802215 	stw	r2,136(sp)
 1808134:	80c00007 	ldb	r3,0(r16)
 1808138:	003db406 	br	180780c <__ram_exceptions_end+0xff7f751c>
 180813c:	01000044 	movi	r4,1
 1808140:	01c00ac4 	movi	r7,43
 1808144:	80c00007 	ldb	r3,0(r16)
 1808148:	003db006 	br	180780c <__ram_exceptions_end+0xff7f751c>
 180814c:	80c00007 	ldb	r3,0(r16)
 1808150:	82800044 	addi	r10,r16,1
 1808154:	1b423c26 	beq	r3,r13,1808a48 <___vfiprintf_internal_r+0x13b8>
 1808158:	18bff404 	addi	r2,r3,-48
 180815c:	0013883a 	mov	r9,zero
 1808160:	30822b36 	bltu	r6,r2,1808a10 <___vfiprintf_internal_r+0x1380>
 1808164:	50c00007 	ldb	r3,0(r10)
 1808168:	4a4002a4 	muli	r9,r9,10
 180816c:	54000044 	addi	r16,r10,1
 1808170:	8015883a 	mov	r10,r16
 1808174:	4893883a 	add	r9,r9,r2
 1808178:	18bff404 	addi	r2,r3,-48
 180817c:	30bff92e 	bgeu	r6,r2,1808164 <__ram_exceptions_end+0xff7f7e74>
 1808180:	483da30e 	bge	r9,zero,1807810 <__ram_exceptions_end+0xff7f7520>
 1808184:	027fffc4 	movi	r9,-1
 1808188:	003da106 	br	1807810 <__ram_exceptions_end+0xff7f7520>
 180818c:	a5001014 	ori	r20,r20,64
 1808190:	80c00007 	ldb	r3,0(r16)
 1808194:	003d9d06 	br	180780c <__ram_exceptions_end+0xff7f751c>
 1808198:	da802217 	ldw	r10,136(sp)
 180819c:	d8001d85 	stb	zero,118(sp)
 18081a0:	50c00204 	addi	r3,r10,8
 18081a4:	54800017 	ldw	r18,0(r10)
 18081a8:	54c00117 	ldw	r19,4(r10)
 18081ac:	4801ca16 	blt	r9,zero,18088d8 <___vfiprintf_internal_r+0x1248>
 18081b0:	013fdfc4 	movi	r4,-129
 18081b4:	94c4b03a 	or	r2,r18,r19
 18081b8:	d8c02215 	stw	r3,136(sp)
 18081bc:	a128703a 	and	r20,r20,r4
 18081c0:	0039883a 	mov	fp,zero
 18081c4:	103f341e 	bne	r2,zero,1807e98 <__ram_exceptions_end+0xff7f7ba8>
 18081c8:	483e2e26 	beq	r9,zero,1807a84 <__ram_exceptions_end+0xff7f7794>
 18081cc:	0025883a 	mov	r18,zero
 18081d0:	94800c04 	addi	r18,r18,48
 18081d4:	dc8019c5 	stb	r18,103(sp)
 18081d8:	dcc02717 	ldw	r19,156(sp)
 18081dc:	dd4019c4 	addi	r21,sp,103
 18081e0:	003e2b06 	br	1807a90 <__ram_exceptions_end+0xff7f77a0>
 18081e4:	21003fcc 	andi	r4,r4,255
 18081e8:	2002361e 	bne	r4,zero,1808ac4 <___vfiprintf_internal_r+0x1434>
 18081ec:	1801c126 	beq	r3,zero,18088f4 <___vfiprintf_internal_r+0x1264>
 18081f0:	04800044 	movi	r18,1
 18081f4:	d8c01005 	stb	r3,64(sp)
 18081f8:	d8001d85 	stb	zero,118(sp)
 18081fc:	9027883a 	mov	r19,r18
 1808200:	dd401004 	addi	r21,sp,64
 1808204:	003f1106 	br	1807e4c <__ram_exceptions_end+0xff7f7b5c>
 1808208:	d9402117 	ldw	r5,132(sp)
 180820c:	d9002017 	ldw	r4,128(sp)
 1808210:	d9801a04 	addi	r6,sp,104
 1808214:	d9c02b15 	stw	r7,172(sp)
 1808218:	dbc02a15 	stw	r15,168(sp)
 180821c:	180757c0 	call	180757c <__sprint_r.part.0>
 1808220:	d9c02b17 	ldw	r7,172(sp)
 1808224:	dbc02a17 	ldw	r15,168(sp)
 1808228:	10006d1e 	bne	r2,zero,18083e0 <___vfiprintf_internal_r+0xd50>
 180822c:	d9801b17 	ldw	r6,108(sp)
 1808230:	d8801c17 	ldw	r2,112(sp)
 1808234:	d811883a 	mov	r8,sp
 1808238:	31400044 	addi	r5,r6,1
 180823c:	003e3306 	br	1807b0c <__ram_exceptions_end+0xff7f781c>
 1808240:	d9401b17 	ldw	r5,108(sp)
 1808244:	d8801c17 	ldw	r2,112(sp)
 1808248:	29000044 	addi	r4,r5,1
 180824c:	d8c01d87 	ldb	r3,118(sp)
 1808250:	183e4d26 	beq	r3,zero,1807b88 <__ram_exceptions_end+0xff7f7898>
 1808254:	00c00044 	movi	r3,1
 1808258:	d9401d84 	addi	r5,sp,118
 180825c:	10c5883a 	add	r2,r2,r3
 1808260:	41400015 	stw	r5,0(r8)
 1808264:	40c00115 	stw	r3,4(r8)
 1808268:	d8801c15 	stw	r2,112(sp)
 180826c:	d9001b15 	stw	r4,108(sp)
 1808270:	014001c4 	movi	r5,7
 1808274:	2900a90e 	bge	r5,r4,180851c <___vfiprintf_internal_r+0xe8c>
 1808278:	1000da1e 	bne	r2,zero,18085e4 <___vfiprintf_internal_r+0xf54>
 180827c:	7000ab1e 	bne	r14,zero,180852c <___vfiprintf_internal_r+0xe9c>
 1808280:	000b883a 	mov	r5,zero
 1808284:	1809883a 	mov	r4,r3
 1808288:	d811883a 	mov	r8,sp
 180828c:	00c02004 	movi	r3,128
 1808290:	e0fe4d26 	beq	fp,r3,1807bc8 <__ram_exceptions_end+0xff7f78d8>
 1808294:	4cf9c83a 	sub	fp,r9,r19
 1808298:	073e7b0e 	bge	zero,fp,1807c88 <__ram_exceptions_end+0xff7f7998>
 180829c:	01c00404 	movi	r7,16
 18082a0:	3f01900e 	bge	r7,fp,18088e4 <___vfiprintf_internal_r+0x1254>
 18082a4:	00c06134 	movhi	r3,388
 18082a8:	18c27b04 	addi	r3,r3,2540
 18082ac:	d8c02415 	stw	r3,144(sp)
 18082b0:	034001c4 	movi	r13,7
 18082b4:	00000506 	br	18082cc <___vfiprintf_internal_r+0xc3c>
 18082b8:	29000084 	addi	r4,r5,2
 18082bc:	42000204 	addi	r8,r8,8
 18082c0:	180b883a 	mov	r5,r3
 18082c4:	e73ffc04 	addi	fp,fp,-16
 18082c8:	3f000d0e 	bge	r7,fp,1808300 <___vfiprintf_internal_r+0xc70>
 18082cc:	10800404 	addi	r2,r2,16
 18082d0:	28c00044 	addi	r3,r5,1
 18082d4:	45c00015 	stw	r23,0(r8)
 18082d8:	41c00115 	stw	r7,4(r8)
 18082dc:	d8801c15 	stw	r2,112(sp)
 18082e0:	d8c01b15 	stw	r3,108(sp)
 18082e4:	68fff40e 	bge	r13,r3,18082b8 <__ram_exceptions_end+0xff7f7fc8>
 18082e8:	1000101e 	bne	r2,zero,180832c <___vfiprintf_internal_r+0xc9c>
 18082ec:	e73ffc04 	addi	fp,fp,-16
 18082f0:	01000044 	movi	r4,1
 18082f4:	000b883a 	mov	r5,zero
 18082f8:	d811883a 	mov	r8,sp
 18082fc:	3f3ff316 	blt	r7,fp,18082cc <__ram_exceptions_end+0xff7f7fdc>
 1808300:	da802417 	ldw	r10,144(sp)
 1808304:	1705883a 	add	r2,r2,fp
 1808308:	47000115 	stw	fp,4(r8)
 180830c:	42800015 	stw	r10,0(r8)
 1808310:	d8801c15 	stw	r2,112(sp)
 1808314:	d9001b15 	stw	r4,108(sp)
 1808318:	00c001c4 	movi	r3,7
 180831c:	19003616 	blt	r3,r4,18083f8 <___vfiprintf_internal_r+0xd68>
 1808320:	42000204 	addi	r8,r8,8
 1808324:	21000044 	addi	r4,r4,1
 1808328:	003e5706 	br	1807c88 <__ram_exceptions_end+0xff7f7998>
 180832c:	d9402117 	ldw	r5,132(sp)
 1808330:	d9002017 	ldw	r4,128(sp)
 1808334:	d9801a04 	addi	r6,sp,104
 1808338:	d9c02b15 	stw	r7,172(sp)
 180833c:	db402a15 	stw	r13,168(sp)
 1808340:	180757c0 	call	180757c <__sprint_r.part.0>
 1808344:	d9c02b17 	ldw	r7,172(sp)
 1808348:	db402a17 	ldw	r13,168(sp)
 180834c:	1000241e 	bne	r2,zero,18083e0 <___vfiprintf_internal_r+0xd50>
 1808350:	d9401b17 	ldw	r5,108(sp)
 1808354:	d8801c17 	ldw	r2,112(sp)
 1808358:	d811883a 	mov	r8,sp
 180835c:	29000044 	addi	r4,r5,1
 1808360:	003fd806 	br	18082c4 <__ram_exceptions_end+0xff7f7fd4>
 1808364:	d9401b17 	ldw	r5,108(sp)
 1808368:	00c06134 	movhi	r3,388
 180836c:	18c27f04 	addi	r3,r3,2556
 1808370:	d8c02415 	stw	r3,144(sp)
 1808374:	29400044 	addi	r5,r5,1
 1808378:	d8c02417 	ldw	r3,144(sp)
 180837c:	14c5883a 	add	r2,r2,r19
 1808380:	44c00115 	stw	r19,4(r8)
 1808384:	40c00015 	stw	r3,0(r8)
 1808388:	d8801c15 	stw	r2,112(sp)
 180838c:	d9401b15 	stw	r5,108(sp)
 1808390:	00c001c4 	movi	r3,7
 1808394:	1940070e 	bge	r3,r5,18083b4 <___vfiprintf_internal_r+0xd24>
 1808398:	103e4826 	beq	r2,zero,1807cbc <__ram_exceptions_end+0xff7f79cc>
 180839c:	d9402117 	ldw	r5,132(sp)
 18083a0:	d9002017 	ldw	r4,128(sp)
 18083a4:	d9801a04 	addi	r6,sp,104
 18083a8:	180757c0 	call	180757c <__sprint_r.part.0>
 18083ac:	10000c1e 	bne	r2,zero,18083e0 <___vfiprintf_internal_r+0xd50>
 18083b0:	d8801c17 	ldw	r2,112(sp)
 18083b4:	8c80010e 	bge	r17,r18,18083bc <___vfiprintf_internal_r+0xd2c>
 18083b8:	9023883a 	mov	r17,r18
 18083bc:	da802317 	ldw	r10,140(sp)
 18083c0:	5455883a 	add	r10,r10,r17
 18083c4:	da802315 	stw	r10,140(sp)
 18083c8:	103e4126 	beq	r2,zero,1807cd0 <__ram_exceptions_end+0xff7f79e0>
 18083cc:	d9402117 	ldw	r5,132(sp)
 18083d0:	d9002017 	ldw	r4,128(sp)
 18083d4:	d9801a04 	addi	r6,sp,104
 18083d8:	180757c0 	call	180757c <__sprint_r.part.0>
 18083dc:	103e3c26 	beq	r2,zero,1807cd0 <__ram_exceptions_end+0xff7f79e0>
 18083e0:	dd002117 	ldw	r20,132(sp)
 18083e4:	a080030b 	ldhu	r2,12(r20)
 18083e8:	1080100c 	andi	r2,r2,64
 18083ec:	1001231e 	bne	r2,zero,180887c <___vfiprintf_internal_r+0x11ec>
 18083f0:	d8802317 	ldw	r2,140(sp)
 18083f4:	003d7b06 	br	18079e4 <__ram_exceptions_end+0xff7f76f4>
 18083f8:	1000991e 	bne	r2,zero,1808660 <___vfiprintf_internal_r+0xfd0>
 18083fc:	00c00044 	movi	r3,1
 1808400:	9805883a 	mov	r2,r19
 1808404:	dd400015 	stw	r21,0(sp)
 1808408:	dcc00115 	stw	r19,4(sp)
 180840c:	dcc01c15 	stw	r19,112(sp)
 1808410:	d8c01b15 	stw	r3,108(sp)
 1808414:	d811883a 	mov	r8,sp
 1808418:	42000204 	addi	r8,r8,8
 180841c:	a2c0010c 	andi	r11,r20,4
 1808420:	583fe426 	beq	r11,zero,18083b4 <__ram_exceptions_end+0xff7f80c4>
 1808424:	8ca7c83a 	sub	r19,r17,r18
 1808428:	04ffe20e 	bge	zero,r19,18083b4 <__ram_exceptions_end+0xff7f80c4>
 180842c:	01c00404 	movi	r7,16
 1808430:	3cffcc0e 	bge	r7,r19,1808364 <__ram_exceptions_end+0xff7f8074>
 1808434:	02806134 	movhi	r10,388
 1808438:	52827f04 	addi	r10,r10,2556
 180843c:	d9001b17 	ldw	r4,108(sp)
 1808440:	da802415 	stw	r10,144(sp)
 1808444:	382b883a 	mov	r21,r7
 1808448:	050001c4 	movi	r20,7
 180844c:	df002017 	ldw	fp,128(sp)
 1808450:	00000506 	br	1808468 <___vfiprintf_internal_r+0xdd8>
 1808454:	21400084 	addi	r5,r4,2
 1808458:	42000204 	addi	r8,r8,8
 180845c:	1809883a 	mov	r4,r3
 1808460:	9cfffc04 	addi	r19,r19,-16
 1808464:	acffc40e 	bge	r21,r19,1808378 <__ram_exceptions_end+0xff7f8088>
 1808468:	10800404 	addi	r2,r2,16
 180846c:	20c00044 	addi	r3,r4,1
 1808470:	45800015 	stw	r22,0(r8)
 1808474:	45400115 	stw	r21,4(r8)
 1808478:	d8801c15 	stw	r2,112(sp)
 180847c:	d8c01b15 	stw	r3,108(sp)
 1808480:	a0fff40e 	bge	r20,r3,1808454 <__ram_exceptions_end+0xff7f8164>
 1808484:	1000041e 	bne	r2,zero,1808498 <___vfiprintf_internal_r+0xe08>
 1808488:	01400044 	movi	r5,1
 180848c:	0009883a 	mov	r4,zero
 1808490:	d811883a 	mov	r8,sp
 1808494:	003ff206 	br	1808460 <__ram_exceptions_end+0xff7f8170>
 1808498:	d9402117 	ldw	r5,132(sp)
 180849c:	d9801a04 	addi	r6,sp,104
 18084a0:	e009883a 	mov	r4,fp
 18084a4:	180757c0 	call	180757c <__sprint_r.part.0>
 18084a8:	103fcd1e 	bne	r2,zero,18083e0 <__ram_exceptions_end+0xff7f80f0>
 18084ac:	d9001b17 	ldw	r4,108(sp)
 18084b0:	d8801c17 	ldw	r2,112(sp)
 18084b4:	d811883a 	mov	r8,sp
 18084b8:	21400044 	addi	r5,r4,1
 18084bc:	003fe806 	br	1808460 <__ram_exceptions_end+0xff7f8170>
 18084c0:	d9402117 	ldw	r5,132(sp)
 18084c4:	d9002017 	ldw	r4,128(sp)
 18084c8:	d9801a04 	addi	r6,sp,104
 18084cc:	d9c02b15 	stw	r7,172(sp)
 18084d0:	db402a15 	stw	r13,168(sp)
 18084d4:	180757c0 	call	180757c <__sprint_r.part.0>
 18084d8:	d9c02b17 	ldw	r7,172(sp)
 18084dc:	db402a17 	ldw	r13,168(sp)
 18084e0:	103fbf1e 	bne	r2,zero,18083e0 <__ram_exceptions_end+0xff7f80f0>
 18084e4:	d9401b17 	ldw	r5,108(sp)
 18084e8:	d8801c17 	ldw	r2,112(sp)
 18084ec:	d811883a 	mov	r8,sp
 18084f0:	29800044 	addi	r6,r5,1
 18084f4:	003dc406 	br	1807c08 <__ram_exceptions_end+0xff7f7918>
 18084f8:	1000d21e 	bne	r2,zero,1808844 <___vfiprintf_internal_r+0x11b4>
 18084fc:	d8c01d87 	ldb	r3,118(sp)
 1808500:	18009526 	beq	r3,zero,1808758 <___vfiprintf_internal_r+0x10c8>
 1808504:	00800044 	movi	r2,1
 1808508:	d8c01d84 	addi	r3,sp,118
 180850c:	1009883a 	mov	r4,r2
 1808510:	d8c00015 	stw	r3,0(sp)
 1808514:	d8800115 	stw	r2,4(sp)
 1808518:	d811883a 	mov	r8,sp
 180851c:	200b883a 	mov	r5,r4
 1808520:	42000204 	addi	r8,r8,8
 1808524:	21000044 	addi	r4,r4,1
 1808528:	003d9706 	br	1807b88 <__ram_exceptions_end+0xff7f7898>
 180852c:	d9001d04 	addi	r4,sp,116
 1808530:	00800084 	movi	r2,2
 1808534:	d9000015 	stw	r4,0(sp)
 1808538:	d8800115 	stw	r2,4(sp)
 180853c:	1809883a 	mov	r4,r3
 1808540:	d811883a 	mov	r8,sp
 1808544:	200b883a 	mov	r5,r4
 1808548:	42000204 	addi	r8,r8,8
 180854c:	21000044 	addi	r4,r4,1
 1808550:	003f4e06 	br	180828c <__ram_exceptions_end+0xff7f7f9c>
 1808554:	d8001d85 	stb	zero,118(sp)
 1808558:	48005016 	blt	r9,zero,180869c <___vfiprintf_internal_r+0x100c>
 180855c:	00ffdfc4 	movi	r3,-129
 1808560:	94c4b03a 	or	r2,r18,r19
 1808564:	a0e8703a 	and	r20,r20,r3
 1808568:	103d4426 	beq	r2,zero,1807a7c <__ram_exceptions_end+0xff7f778c>
 180856c:	0039883a 	mov	fp,zero
 1808570:	d9002617 	ldw	r4,152(sp)
 1808574:	dd401a04 	addi	r21,sp,104
 1808578:	908003cc 	andi	r2,r18,15
 180857c:	9806973a 	slli	r3,r19,28
 1808580:	2085883a 	add	r2,r4,r2
 1808584:	9024d13a 	srli	r18,r18,4
 1808588:	10800003 	ldbu	r2,0(r2)
 180858c:	9826d13a 	srli	r19,r19,4
 1808590:	ad7fffc4 	addi	r21,r21,-1
 1808594:	1ca4b03a 	or	r18,r3,r18
 1808598:	a8800005 	stb	r2,0(r21)
 180859c:	94c4b03a 	or	r2,r18,r19
 18085a0:	103ff51e 	bne	r2,zero,1808578 <__ram_exceptions_end+0xff7f8288>
 18085a4:	003e5906 	br	1807f0c <__ram_exceptions_end+0xff7f7c1c>
 18085a8:	d9402117 	ldw	r5,132(sp)
 18085ac:	d9002017 	ldw	r4,128(sp)
 18085b0:	d9801a04 	addi	r6,sp,104
 18085b4:	180757c0 	call	180757c <__sprint_r.part.0>
 18085b8:	103f891e 	bne	r2,zero,18083e0 <__ram_exceptions_end+0xff7f80f0>
 18085bc:	d8801c17 	ldw	r2,112(sp)
 18085c0:	d811883a 	mov	r8,sp
 18085c4:	003f9506 	br	180841c <__ram_exceptions_end+0xff7f812c>
 18085c8:	d9402117 	ldw	r5,132(sp)
 18085cc:	d9002017 	ldw	r4,128(sp)
 18085d0:	d9801a04 	addi	r6,sp,104
 18085d4:	180757c0 	call	180757c <__sprint_r.part.0>
 18085d8:	103f811e 	bne	r2,zero,18083e0 <__ram_exceptions_end+0xff7f80f0>
 18085dc:	d811883a 	mov	r8,sp
 18085e0:	003ced06 	br	1807998 <__ram_exceptions_end+0xff7f76a8>
 18085e4:	d9402117 	ldw	r5,132(sp)
 18085e8:	d9002017 	ldw	r4,128(sp)
 18085ec:	d9801a04 	addi	r6,sp,104
 18085f0:	da402c15 	stw	r9,176(sp)
 18085f4:	db802a15 	stw	r14,168(sp)
 18085f8:	180757c0 	call	180757c <__sprint_r.part.0>
 18085fc:	da402c17 	ldw	r9,176(sp)
 1808600:	db802a17 	ldw	r14,168(sp)
 1808604:	103f761e 	bne	r2,zero,18083e0 <__ram_exceptions_end+0xff7f80f0>
 1808608:	d9401b17 	ldw	r5,108(sp)
 180860c:	d8801c17 	ldw	r2,112(sp)
 1808610:	d811883a 	mov	r8,sp
 1808614:	29000044 	addi	r4,r5,1
 1808618:	003d5b06 	br	1807b88 <__ram_exceptions_end+0xff7f7898>
 180861c:	d9402117 	ldw	r5,132(sp)
 1808620:	d9002017 	ldw	r4,128(sp)
 1808624:	d9801a04 	addi	r6,sp,104
 1808628:	da402c15 	stw	r9,176(sp)
 180862c:	180757c0 	call	180757c <__sprint_r.part.0>
 1808630:	da402c17 	ldw	r9,176(sp)
 1808634:	103f6a1e 	bne	r2,zero,18083e0 <__ram_exceptions_end+0xff7f80f0>
 1808638:	d9401b17 	ldw	r5,108(sp)
 180863c:	d8801c17 	ldw	r2,112(sp)
 1808640:	d811883a 	mov	r8,sp
 1808644:	29000044 	addi	r4,r5,1
 1808648:	003f1006 	br	180828c <__ram_exceptions_end+0xff7f7f9c>
 180864c:	1000c31e 	bne	r2,zero,180895c <___vfiprintf_internal_r+0x12cc>
 1808650:	01000044 	movi	r4,1
 1808654:	000b883a 	mov	r5,zero
 1808658:	d811883a 	mov	r8,sp
 180865c:	003f0d06 	br	1808294 <__ram_exceptions_end+0xff7f7fa4>
 1808660:	d9402117 	ldw	r5,132(sp)
 1808664:	d9002017 	ldw	r4,128(sp)
 1808668:	d9801a04 	addi	r6,sp,104
 180866c:	180757c0 	call	180757c <__sprint_r.part.0>
 1808670:	103f5b1e 	bne	r2,zero,18083e0 <__ram_exceptions_end+0xff7f80f0>
 1808674:	d9001b17 	ldw	r4,108(sp)
 1808678:	d8801c17 	ldw	r2,112(sp)
 180867c:	d811883a 	mov	r8,sp
 1808680:	21000044 	addi	r4,r4,1
 1808684:	003d8006 	br	1807c88 <__ram_exceptions_end+0xff7f7998>
 1808688:	01006134 	movhi	r4,388
 180868c:	21021a04 	addi	r4,r4,2152
 1808690:	d9002615 	stw	r4,152(sp)
 1808694:	d8c02215 	stw	r3,136(sp)
 1808698:	1029883a 	mov	r20,r2
 180869c:	94c4b03a 	or	r2,r18,r19
 18086a0:	103fb21e 	bne	r2,zero,180856c <__ram_exceptions_end+0xff7f827c>
 18086a4:	0039883a 	mov	fp,zero
 18086a8:	00800084 	movi	r2,2
 18086ac:	003e6b06 	br	180805c <__ram_exceptions_end+0xff7f7d6c>
 18086b0:	da802217 	ldw	r10,136(sp)
 18086b4:	d8001d85 	stb	zero,118(sp)
 18086b8:	0027883a 	mov	r19,zero
 18086bc:	50800104 	addi	r2,r10,4
 18086c0:	54800017 	ldw	r18,0(r10)
 18086c4:	483e6016 	blt	r9,zero,1808048 <__ram_exceptions_end+0xff7f7d58>
 18086c8:	00ffdfc4 	movi	r3,-129
 18086cc:	d8802215 	stw	r2,136(sp)
 18086d0:	a0e8703a 	and	r20,r20,r3
 18086d4:	0039883a 	mov	fp,zero
 18086d8:	903ebb26 	beq	r18,zero,18081c8 <__ram_exceptions_end+0xff7f7ed8>
 18086dc:	00800244 	movi	r2,9
 18086e0:	14bdee36 	bltu	r2,r18,1807e9c <__ram_exceptions_end+0xff7f7bac>
 18086e4:	003eba06 	br	18081d0 <__ram_exceptions_end+0xff7f7ee0>
 18086e8:	00800c04 	movi	r2,48
 18086ec:	d8c01d45 	stb	r3,117(sp)
 18086f0:	d8801d05 	stb	r2,116(sp)
 18086f4:	d8001d85 	stb	zero,118(sp)
 18086f8:	a0c00094 	ori	r3,r20,2
 18086fc:	4800a916 	blt	r9,zero,18089a4 <___vfiprintf_internal_r+0x1314>
 1808700:	00bfdfc4 	movi	r2,-129
 1808704:	a096703a 	and	r11,r20,r2
 1808708:	5d000094 	ori	r20,r11,2
 180870c:	0039883a 	mov	fp,zero
 1808710:	003f9706 	br	1808570 <__ram_exceptions_end+0xff7f8280>
 1808714:	8025883a 	mov	r18,r16
 1808718:	003c2e06 	br	18077d4 <__ram_exceptions_end+0xff7f74e4>
 180871c:	00806134 	movhi	r2,388
 1808720:	10821a04 	addi	r2,r2,2152
 1808724:	0039883a 	mov	fp,zero
 1808728:	d8802615 	stw	r2,152(sp)
 180872c:	003f9006 	br	1808570 <__ram_exceptions_end+0xff7f8280>
 1808730:	04a5c83a 	sub	r18,zero,r18
 1808734:	07000b44 	movi	fp,45
 1808738:	9004c03a 	cmpne	r2,r18,zero
 180873c:	04e7c83a 	sub	r19,zero,r19
 1808740:	df001d85 	stb	fp,118(sp)
 1808744:	98a7c83a 	sub	r19,r19,r2
 1808748:	48009f16 	blt	r9,zero,18089c8 <___vfiprintf_internal_r+0x1338>
 180874c:	00bfdfc4 	movi	r2,-129
 1808750:	a0a8703a 	and	r20,r20,r2
 1808754:	003dd006 	br	1807e98 <__ram_exceptions_end+0xff7f7ba8>
 1808758:	70004c26 	beq	r14,zero,180888c <___vfiprintf_internal_r+0x11fc>
 180875c:	00800084 	movi	r2,2
 1808760:	d8c01d04 	addi	r3,sp,116
 1808764:	d8c00015 	stw	r3,0(sp)
 1808768:	d8800115 	stw	r2,4(sp)
 180876c:	01000044 	movi	r4,1
 1808770:	d811883a 	mov	r8,sp
 1808774:	003f7306 	br	1808544 <__ram_exceptions_end+0xff7f8254>
 1808778:	a080100c 	andi	r2,r20,64
 180877c:	da802217 	ldw	r10,136(sp)
 1808780:	103e0626 	beq	r2,zero,1807f9c <__ram_exceptions_end+0xff7f7cac>
 1808784:	5480000f 	ldh	r18,0(r10)
 1808788:	52800104 	addi	r10,r10,4
 180878c:	da802215 	stw	r10,136(sp)
 1808790:	9027d7fa 	srai	r19,r18,31
 1808794:	9805883a 	mov	r2,r19
 1808798:	003db806 	br	1807e7c <__ram_exceptions_end+0xff7f7b8c>
 180879c:	a080040c 	andi	r2,r20,16
 18087a0:	1000091e 	bne	r2,zero,18087c8 <___vfiprintf_internal_r+0x1138>
 18087a4:	a2c0100c 	andi	r11,r20,64
 18087a8:	58000726 	beq	r11,zero,18087c8 <___vfiprintf_internal_r+0x1138>
 18087ac:	da802217 	ldw	r10,136(sp)
 18087b0:	50800017 	ldw	r2,0(r10)
 18087b4:	52800104 	addi	r10,r10,4
 18087b8:	da802215 	stw	r10,136(sp)
 18087bc:	da802317 	ldw	r10,140(sp)
 18087c0:	1280000d 	sth	r10,0(r2)
 18087c4:	003be706 	br	1807764 <__ram_exceptions_end+0xff7f7474>
 18087c8:	da802217 	ldw	r10,136(sp)
 18087cc:	50800017 	ldw	r2,0(r10)
 18087d0:	52800104 	addi	r10,r10,4
 18087d4:	da802215 	stw	r10,136(sp)
 18087d8:	da802317 	ldw	r10,140(sp)
 18087dc:	12800015 	stw	r10,0(r2)
 18087e0:	003be006 	br	1807764 <__ram_exceptions_end+0xff7f7474>
 18087e4:	a080100c 	andi	r2,r20,64
 18087e8:	da802217 	ldw	r10,136(sp)
 18087ec:	10003026 	beq	r2,zero,18088b0 <___vfiprintf_internal_r+0x1220>
 18087f0:	5480000b 	ldhu	r18,0(r10)
 18087f4:	52800104 	addi	r10,r10,4
 18087f8:	0027883a 	mov	r19,zero
 18087fc:	da802215 	stw	r10,136(sp)
 1808800:	003d8006 	br	1807e04 <__ram_exceptions_end+0xff7f7b14>
 1808804:	80c00007 	ldb	r3,0(r16)
 1808808:	003c0006 	br	180780c <__ram_exceptions_end+0xff7f751c>
 180880c:	a080100c 	andi	r2,r20,64
 1808810:	d8001d85 	stb	zero,118(sp)
 1808814:	da802217 	ldw	r10,136(sp)
 1808818:	1000201e 	bne	r2,zero,180889c <___vfiprintf_internal_r+0x120c>
 180881c:	50800104 	addi	r2,r10,4
 1808820:	54800017 	ldw	r18,0(r10)
 1808824:	0027883a 	mov	r19,zero
 1808828:	483def0e 	bge	r9,zero,1807fe8 <__ram_exceptions_end+0xff7f7cf8>
 180882c:	94c6b03a 	or	r3,r18,r19
 1808830:	d8802215 	stw	r2,136(sp)
 1808834:	183d4e1e 	bne	r3,zero,1807d70 <__ram_exceptions_end+0xff7f7a80>
 1808838:	0039883a 	mov	fp,zero
 180883c:	0005883a 	mov	r2,zero
 1808840:	003e0606 	br	180805c <__ram_exceptions_end+0xff7f7d6c>
 1808844:	d9402117 	ldw	r5,132(sp)
 1808848:	d9002017 	ldw	r4,128(sp)
 180884c:	d9801a04 	addi	r6,sp,104
 1808850:	da402c15 	stw	r9,176(sp)
 1808854:	db802a15 	stw	r14,168(sp)
 1808858:	180757c0 	call	180757c <__sprint_r.part.0>
 180885c:	da402c17 	ldw	r9,176(sp)
 1808860:	db802a17 	ldw	r14,168(sp)
 1808864:	103ede1e 	bne	r2,zero,18083e0 <__ram_exceptions_end+0xff7f80f0>
 1808868:	d9401b17 	ldw	r5,108(sp)
 180886c:	d8801c17 	ldw	r2,112(sp)
 1808870:	d811883a 	mov	r8,sp
 1808874:	29000044 	addi	r4,r5,1
 1808878:	003e7406 	br	180824c <__ram_exceptions_end+0xff7f7f5c>
 180887c:	00bfffc4 	movi	r2,-1
 1808880:	003c5806 	br	18079e4 <__ram_exceptions_end+0xff7f76f4>
 1808884:	d811883a 	mov	r8,sp
 1808888:	003ee806 	br	180842c <__ram_exceptions_end+0xff7f813c>
 180888c:	000b883a 	mov	r5,zero
 1808890:	01000044 	movi	r4,1
 1808894:	d811883a 	mov	r8,sp
 1808898:	003e7c06 	br	180828c <__ram_exceptions_end+0xff7f7f9c>
 180889c:	50800104 	addi	r2,r10,4
 18088a0:	5480000b 	ldhu	r18,0(r10)
 18088a4:	0027883a 	mov	r19,zero
 18088a8:	483dcf0e 	bge	r9,zero,1807fe8 <__ram_exceptions_end+0xff7f7cf8>
 18088ac:	003fdf06 	br	180882c <__ram_exceptions_end+0xff7f853c>
 18088b0:	54800017 	ldw	r18,0(r10)
 18088b4:	52800104 	addi	r10,r10,4
 18088b8:	0027883a 	mov	r19,zero
 18088bc:	da802215 	stw	r10,136(sp)
 18088c0:	003d5006 	br	1807e04 <__ram_exceptions_end+0xff7f7b14>
 18088c4:	50800104 	addi	r2,r10,4
 18088c8:	5480000b 	ldhu	r18,0(r10)
 18088cc:	0027883a 	mov	r19,zero
 18088d0:	483f7d0e 	bge	r9,zero,18086c8 <__ram_exceptions_end+0xff7f83d8>
 18088d4:	003ddc06 	br	1808048 <__ram_exceptions_end+0xff7f7d58>
 18088d8:	d8c02215 	stw	r3,136(sp)
 18088dc:	0039883a 	mov	fp,zero
 18088e0:	003ddb06 	br	1808050 <__ram_exceptions_end+0xff7f7d60>
 18088e4:	02806134 	movhi	r10,388
 18088e8:	52827b04 	addi	r10,r10,2540
 18088ec:	da802415 	stw	r10,144(sp)
 18088f0:	003e8306 	br	1808300 <__ram_exceptions_end+0xff7f8010>
 18088f4:	d8801c17 	ldw	r2,112(sp)
 18088f8:	dd002117 	ldw	r20,132(sp)
 18088fc:	103eb926 	beq	r2,zero,18083e4 <__ram_exceptions_end+0xff7f80f4>
 1808900:	d9002017 	ldw	r4,128(sp)
 1808904:	d9801a04 	addi	r6,sp,104
 1808908:	a00b883a 	mov	r5,r20
 180890c:	180757c0 	call	180757c <__sprint_r.part.0>
 1808910:	003eb406 	br	18083e4 <__ram_exceptions_end+0xff7f80f4>
 1808914:	80c00043 	ldbu	r3,1(r16)
 1808918:	a5000814 	ori	r20,r20,32
 180891c:	84000044 	addi	r16,r16,1
 1808920:	18c03fcc 	andi	r3,r3,255
 1808924:	18c0201c 	xori	r3,r3,128
 1808928:	18ffe004 	addi	r3,r3,-128
 180892c:	003bb706 	br	180780c <__ram_exceptions_end+0xff7f751c>
 1808930:	a809883a 	mov	r4,r21
 1808934:	d8c02a15 	stw	r3,168(sp)
 1808938:	da002b15 	stw	r8,172(sp)
 180893c:	18074e40 	call	18074e4 <strlen>
 1808940:	d8c02a17 	ldw	r3,168(sp)
 1808944:	1027883a 	mov	r19,r2
 1808948:	df001d83 	ldbu	fp,118(sp)
 180894c:	d8c02215 	stw	r3,136(sp)
 1808950:	0013883a 	mov	r9,zero
 1808954:	da002b17 	ldw	r8,172(sp)
 1808958:	003c4d06 	br	1807a90 <__ram_exceptions_end+0xff7f77a0>
 180895c:	d9402117 	ldw	r5,132(sp)
 1808960:	d9002017 	ldw	r4,128(sp)
 1808964:	d9801a04 	addi	r6,sp,104
 1808968:	da402c15 	stw	r9,176(sp)
 180896c:	180757c0 	call	180757c <__sprint_r.part.0>
 1808970:	da402c17 	ldw	r9,176(sp)
 1808974:	103e9a1e 	bne	r2,zero,18083e0 <__ram_exceptions_end+0xff7f80f0>
 1808978:	d9401b17 	ldw	r5,108(sp)
 180897c:	d8801c17 	ldw	r2,112(sp)
 1808980:	d811883a 	mov	r8,sp
 1808984:	29000044 	addi	r4,r5,1
 1808988:	003e4206 	br	1808294 <__ram_exceptions_end+0xff7f7fa4>
 180898c:	d9401b17 	ldw	r5,108(sp)
 1808990:	01006134 	movhi	r4,388
 1808994:	21027f04 	addi	r4,r4,2556
 1808998:	d9002415 	stw	r4,144(sp)
 180899c:	29400044 	addi	r5,r5,1
 18089a0:	003c6d06 	br	1807b58 <__ram_exceptions_end+0xff7f7868>
 18089a4:	0039883a 	mov	fp,zero
 18089a8:	00800084 	movi	r2,2
 18089ac:	10803fcc 	andi	r2,r2,255
 18089b0:	01000044 	movi	r4,1
 18089b4:	11001e26 	beq	r2,r4,1808a30 <___vfiprintf_internal_r+0x13a0>
 18089b8:	01000084 	movi	r4,2
 18089bc:	11001e1e 	bne	r2,r4,1808a38 <___vfiprintf_internal_r+0x13a8>
 18089c0:	1829883a 	mov	r20,r3
 18089c4:	003eea06 	br	1808570 <__ram_exceptions_end+0xff7f8280>
 18089c8:	a007883a 	mov	r3,r20
 18089cc:	00800044 	movi	r2,1
 18089d0:	003ff606 	br	18089ac <__ram_exceptions_end+0xff7f86bc>
 18089d4:	00800184 	movi	r2,6
 18089d8:	1240012e 	bgeu	r2,r9,18089e0 <___vfiprintf_internal_r+0x1350>
 18089dc:	1013883a 	mov	r9,r2
 18089e0:	4827883a 	mov	r19,r9
 18089e4:	4825883a 	mov	r18,r9
 18089e8:	48001516 	blt	r9,zero,1808a40 <___vfiprintf_internal_r+0x13b0>
 18089ec:	05406134 	movhi	r21,388
 18089f0:	d8c02215 	stw	r3,136(sp)
 18089f4:	ad421f04 	addi	r21,r21,2172
 18089f8:	003d1406 	br	1807e4c <__ram_exceptions_end+0xff7f7b5c>
 18089fc:	02806134 	movhi	r10,388
 1808a00:	52827b04 	addi	r10,r10,2540
 1808a04:	da802415 	stw	r10,144(sp)
 1808a08:	200d883a 	mov	r6,r4
 1808a0c:	003c9106 	br	1807c54 <__ram_exceptions_end+0xff7f7964>
 1808a10:	5021883a 	mov	r16,r10
 1808a14:	0013883a 	mov	r9,zero
 1808a18:	003b7d06 	br	1807810 <__ram_exceptions_end+0xff7f7520>
 1808a1c:	4827883a 	mov	r19,r9
 1808a20:	df001d83 	ldbu	fp,118(sp)
 1808a24:	d8c02215 	stw	r3,136(sp)
 1808a28:	0013883a 	mov	r9,zero
 1808a2c:	003c1806 	br	1807a90 <__ram_exceptions_end+0xff7f77a0>
 1808a30:	1829883a 	mov	r20,r3
 1808a34:	003d1806 	br	1807e98 <__ram_exceptions_end+0xff7f7ba8>
 1808a38:	1829883a 	mov	r20,r3
 1808a3c:	003ccd06 	br	1807d74 <__ram_exceptions_end+0xff7f7a84>
 1808a40:	0025883a 	mov	r18,zero
 1808a44:	003fe906 	br	18089ec <__ram_exceptions_end+0xff7f86fc>
 1808a48:	d8802217 	ldw	r2,136(sp)
 1808a4c:	80c00043 	ldbu	r3,1(r16)
 1808a50:	5021883a 	mov	r16,r10
 1808a54:	12400017 	ldw	r9,0(r2)
 1808a58:	10800104 	addi	r2,r2,4
 1808a5c:	d8802215 	stw	r2,136(sp)
 1808a60:	483faf0e 	bge	r9,zero,1808920 <__ram_exceptions_end+0xff7f8630>
 1808a64:	18c03fcc 	andi	r3,r3,255
 1808a68:	18c0201c 	xori	r3,r3,128
 1808a6c:	027fffc4 	movi	r9,-1
 1808a70:	18ffe004 	addi	r3,r3,-128
 1808a74:	003b6506 	br	180780c <__ram_exceptions_end+0xff7f751c>
 1808a78:	d9c01d85 	stb	r7,118(sp)
 1808a7c:	003ca006 	br	1807d00 <__ram_exceptions_end+0xff7f7a10>
 1808a80:	d9c01d85 	stb	r7,118(sp)
 1808a84:	003cad06 	br	1807d3c <__ram_exceptions_end+0xff7f7a4c>
 1808a88:	d9c01d85 	stb	r7,118(sp)
 1808a8c:	003d7d06 	br	1808084 <__ram_exceptions_end+0xff7f7d94>
 1808a90:	d9c01d85 	stb	r7,118(sp)
 1808a94:	003d5f06 	br	1808014 <__ram_exceptions_end+0xff7f7d24>
 1808a98:	a080004c 	andi	r2,r20,1
 1808a9c:	0039883a 	mov	fp,zero
 1808aa0:	10000526 	beq	r2,zero,1808ab8 <___vfiprintf_internal_r+0x1428>
 1808aa4:	00800c04 	movi	r2,48
 1808aa8:	d88019c5 	stb	r2,103(sp)
 1808aac:	dcc02717 	ldw	r19,156(sp)
 1808ab0:	dd4019c4 	addi	r21,sp,103
 1808ab4:	003bf606 	br	1807a90 <__ram_exceptions_end+0xff7f77a0>
 1808ab8:	0027883a 	mov	r19,zero
 1808abc:	dd401a04 	addi	r21,sp,104
 1808ac0:	003bf306 	br	1807a90 <__ram_exceptions_end+0xff7f77a0>
 1808ac4:	d9c01d85 	stb	r7,118(sp)
 1808ac8:	003dc806 	br	18081ec <__ram_exceptions_end+0xff7f7efc>
 1808acc:	d9c01d85 	stb	r7,118(sp)
 1808ad0:	003d3a06 	br	1807fbc <__ram_exceptions_end+0xff7f7ccc>
 1808ad4:	d9c01d85 	stb	r7,118(sp)
 1808ad8:	003d2a06 	br	1807f84 <__ram_exceptions_end+0xff7f7c94>
 1808adc:	d9c01d85 	stb	r7,118(sp)
 1808ae0:	003cde06 	br	1807e5c <__ram_exceptions_end+0xff7f7b6c>
 1808ae4:	d9c01d85 	stb	r7,118(sp)
 1808ae8:	003cbc06 	br	1807ddc <__ram_exceptions_end+0xff7f7aec>

01808aec <__vfiprintf_internal>:
 1808aec:	00806134 	movhi	r2,388
 1808af0:	10946904 	addi	r2,r2,20900
 1808af4:	300f883a 	mov	r7,r6
 1808af8:	280d883a 	mov	r6,r5
 1808afc:	200b883a 	mov	r5,r4
 1808b00:	11000017 	ldw	r4,0(r2)
 1808b04:	18076901 	jmpi	1807690 <___vfiprintf_internal_r>

01808b08 <__sbprintf>:
 1808b08:	2880030b 	ldhu	r2,12(r5)
 1808b0c:	2ac01917 	ldw	r11,100(r5)
 1808b10:	2a80038b 	ldhu	r10,14(r5)
 1808b14:	2a400717 	ldw	r9,28(r5)
 1808b18:	2a000917 	ldw	r8,36(r5)
 1808b1c:	defee204 	addi	sp,sp,-1144
 1808b20:	00c10004 	movi	r3,1024
 1808b24:	dc011a15 	stw	r16,1128(sp)
 1808b28:	10bfff4c 	andi	r2,r2,65533
 1808b2c:	2821883a 	mov	r16,r5
 1808b30:	d8cb883a 	add	r5,sp,r3
 1808b34:	dc811c15 	stw	r18,1136(sp)
 1808b38:	dc411b15 	stw	r17,1132(sp)
 1808b3c:	dfc11d15 	stw	ra,1140(sp)
 1808b40:	2025883a 	mov	r18,r4
 1808b44:	d881030d 	sth	r2,1036(sp)
 1808b48:	dac11915 	stw	r11,1124(sp)
 1808b4c:	da81038d 	sth	r10,1038(sp)
 1808b50:	da410715 	stw	r9,1052(sp)
 1808b54:	da010915 	stw	r8,1060(sp)
 1808b58:	dec10015 	stw	sp,1024(sp)
 1808b5c:	dec10415 	stw	sp,1040(sp)
 1808b60:	d8c10215 	stw	r3,1032(sp)
 1808b64:	d8c10515 	stw	r3,1044(sp)
 1808b68:	d8010615 	stw	zero,1048(sp)
 1808b6c:	18076900 	call	1807690 <___vfiprintf_internal_r>
 1808b70:	1023883a 	mov	r17,r2
 1808b74:	10000416 	blt	r2,zero,1808b88 <__sbprintf+0x80>
 1808b78:	d9410004 	addi	r5,sp,1024
 1808b7c:	9009883a 	mov	r4,r18
 1808b80:	1804a280 	call	1804a28 <_fflush_r>
 1808b84:	10000d1e 	bne	r2,zero,1808bbc <__sbprintf+0xb4>
 1808b88:	d881030b 	ldhu	r2,1036(sp)
 1808b8c:	1080100c 	andi	r2,r2,64
 1808b90:	10000326 	beq	r2,zero,1808ba0 <__sbprintf+0x98>
 1808b94:	8080030b 	ldhu	r2,12(r16)
 1808b98:	10801014 	ori	r2,r2,64
 1808b9c:	8080030d 	sth	r2,12(r16)
 1808ba0:	8805883a 	mov	r2,r17
 1808ba4:	dfc11d17 	ldw	ra,1140(sp)
 1808ba8:	dc811c17 	ldw	r18,1136(sp)
 1808bac:	dc411b17 	ldw	r17,1132(sp)
 1808bb0:	dc011a17 	ldw	r16,1128(sp)
 1808bb4:	dec11e04 	addi	sp,sp,1144
 1808bb8:	f800283a 	ret
 1808bbc:	047fffc4 	movi	r17,-1
 1808bc0:	003ff106 	br	1808b88 <__ram_exceptions_end+0xff7f8898>

01808bc4 <_write_r>:
 1808bc4:	defffd04 	addi	sp,sp,-12
 1808bc8:	2805883a 	mov	r2,r5
 1808bcc:	dc000015 	stw	r16,0(sp)
 1808bd0:	04006134 	movhi	r16,388
 1808bd4:	dc400115 	stw	r17,4(sp)
 1808bd8:	300b883a 	mov	r5,r6
 1808bdc:	841c3604 	addi	r16,r16,28888
 1808be0:	2023883a 	mov	r17,r4
 1808be4:	380d883a 	mov	r6,r7
 1808be8:	1009883a 	mov	r4,r2
 1808bec:	dfc00215 	stw	ra,8(sp)
 1808bf0:	80000015 	stw	zero,0(r16)
 1808bf4:	18132800 	call	1813280 <write>
 1808bf8:	00ffffc4 	movi	r3,-1
 1808bfc:	10c00526 	beq	r2,r3,1808c14 <_write_r+0x50>
 1808c00:	dfc00217 	ldw	ra,8(sp)
 1808c04:	dc400117 	ldw	r17,4(sp)
 1808c08:	dc000017 	ldw	r16,0(sp)
 1808c0c:	dec00304 	addi	sp,sp,12
 1808c10:	f800283a 	ret
 1808c14:	80c00017 	ldw	r3,0(r16)
 1808c18:	183ff926 	beq	r3,zero,1808c00 <__ram_exceptions_end+0xff7f8910>
 1808c1c:	88c00015 	stw	r3,0(r17)
 1808c20:	003ff706 	br	1808c00 <__ram_exceptions_end+0xff7f8910>

01808c24 <_close_r>:
 1808c24:	defffd04 	addi	sp,sp,-12
 1808c28:	dc000015 	stw	r16,0(sp)
 1808c2c:	04006134 	movhi	r16,388
 1808c30:	dc400115 	stw	r17,4(sp)
 1808c34:	841c3604 	addi	r16,r16,28888
 1808c38:	2023883a 	mov	r17,r4
 1808c3c:	2809883a 	mov	r4,r5
 1808c40:	dfc00215 	stw	ra,8(sp)
 1808c44:	80000015 	stw	zero,0(r16)
 1808c48:	18131cc0 	call	18131cc <close>
 1808c4c:	00ffffc4 	movi	r3,-1
 1808c50:	10c00526 	beq	r2,r3,1808c68 <_close_r+0x44>
 1808c54:	dfc00217 	ldw	ra,8(sp)
 1808c58:	dc400117 	ldw	r17,4(sp)
 1808c5c:	dc000017 	ldw	r16,0(sp)
 1808c60:	dec00304 	addi	sp,sp,12
 1808c64:	f800283a 	ret
 1808c68:	80c00017 	ldw	r3,0(r16)
 1808c6c:	183ff926 	beq	r3,zero,1808c54 <__ram_exceptions_end+0xff7f8964>
 1808c70:	88c00015 	stw	r3,0(r17)
 1808c74:	003ff706 	br	1808c54 <__ram_exceptions_end+0xff7f8964>

01808c78 <_calloc_r>:
 1808c78:	298b383a 	mul	r5,r5,r6
 1808c7c:	defffe04 	addi	sp,sp,-8
 1808c80:	dfc00115 	stw	ra,4(sp)
 1808c84:	dc000015 	stw	r16,0(sp)
 1808c88:	18056a80 	call	18056a8 <_malloc_r>
 1808c8c:	10002926 	beq	r2,zero,1808d34 <_calloc_r+0xbc>
 1808c90:	11bfff17 	ldw	r6,-4(r2)
 1808c94:	1021883a 	mov	r16,r2
 1808c98:	00bfff04 	movi	r2,-4
 1808c9c:	308c703a 	and	r6,r6,r2
 1808ca0:	00c00904 	movi	r3,36
 1808ca4:	308d883a 	add	r6,r6,r2
 1808ca8:	19801636 	bltu	r3,r6,1808d04 <_calloc_r+0x8c>
 1808cac:	008004c4 	movi	r2,19
 1808cb0:	11800b2e 	bgeu	r2,r6,1808ce0 <_calloc_r+0x68>
 1808cb4:	80000015 	stw	zero,0(r16)
 1808cb8:	80000115 	stw	zero,4(r16)
 1808cbc:	008006c4 	movi	r2,27
 1808cc0:	11801a2e 	bgeu	r2,r6,1808d2c <_calloc_r+0xb4>
 1808cc4:	80000215 	stw	zero,8(r16)
 1808cc8:	80000315 	stw	zero,12(r16)
 1808ccc:	30c0151e 	bne	r6,r3,1808d24 <_calloc_r+0xac>
 1808cd0:	80000415 	stw	zero,16(r16)
 1808cd4:	80800604 	addi	r2,r16,24
 1808cd8:	80000515 	stw	zero,20(r16)
 1808cdc:	00000106 	br	1808ce4 <_calloc_r+0x6c>
 1808ce0:	8005883a 	mov	r2,r16
 1808ce4:	10000015 	stw	zero,0(r2)
 1808ce8:	10000115 	stw	zero,4(r2)
 1808cec:	10000215 	stw	zero,8(r2)
 1808cf0:	8005883a 	mov	r2,r16
 1808cf4:	dfc00117 	ldw	ra,4(sp)
 1808cf8:	dc000017 	ldw	r16,0(sp)
 1808cfc:	dec00204 	addi	sp,sp,8
 1808d00:	f800283a 	ret
 1808d04:	000b883a 	mov	r5,zero
 1808d08:	8009883a 	mov	r4,r16
 1808d0c:	18060e00 	call	18060e0 <memset>
 1808d10:	8005883a 	mov	r2,r16
 1808d14:	dfc00117 	ldw	ra,4(sp)
 1808d18:	dc000017 	ldw	r16,0(sp)
 1808d1c:	dec00204 	addi	sp,sp,8
 1808d20:	f800283a 	ret
 1808d24:	80800404 	addi	r2,r16,16
 1808d28:	003fee06 	br	1808ce4 <__ram_exceptions_end+0xff7f89f4>
 1808d2c:	80800204 	addi	r2,r16,8
 1808d30:	003fec06 	br	1808ce4 <__ram_exceptions_end+0xff7f89f4>
 1808d34:	0005883a 	mov	r2,zero
 1808d38:	003fee06 	br	1808cf4 <__ram_exceptions_end+0xff7f8a04>

01808d3c <_fclose_r>:
 1808d3c:	28003926 	beq	r5,zero,1808e24 <_fclose_r+0xe8>
 1808d40:	defffc04 	addi	sp,sp,-16
 1808d44:	dc400115 	stw	r17,4(sp)
 1808d48:	dc000015 	stw	r16,0(sp)
 1808d4c:	dfc00315 	stw	ra,12(sp)
 1808d50:	dc800215 	stw	r18,8(sp)
 1808d54:	2023883a 	mov	r17,r4
 1808d58:	2821883a 	mov	r16,r5
 1808d5c:	20000226 	beq	r4,zero,1808d68 <_fclose_r+0x2c>
 1808d60:	20800e17 	ldw	r2,56(r4)
 1808d64:	10002726 	beq	r2,zero,1808e04 <_fclose_r+0xc8>
 1808d68:	8080030f 	ldh	r2,12(r16)
 1808d6c:	1000071e 	bne	r2,zero,1808d8c <_fclose_r+0x50>
 1808d70:	0005883a 	mov	r2,zero
 1808d74:	dfc00317 	ldw	ra,12(sp)
 1808d78:	dc800217 	ldw	r18,8(sp)
 1808d7c:	dc400117 	ldw	r17,4(sp)
 1808d80:	dc000017 	ldw	r16,0(sp)
 1808d84:	dec00404 	addi	sp,sp,16
 1808d88:	f800283a 	ret
 1808d8c:	800b883a 	mov	r5,r16
 1808d90:	8809883a 	mov	r4,r17
 1808d94:	180480c0 	call	180480c <__sflush_r>
 1808d98:	1025883a 	mov	r18,r2
 1808d9c:	80800b17 	ldw	r2,44(r16)
 1808da0:	10000426 	beq	r2,zero,1808db4 <_fclose_r+0x78>
 1808da4:	81400717 	ldw	r5,28(r16)
 1808da8:	8809883a 	mov	r4,r17
 1808dac:	103ee83a 	callr	r2
 1808db0:	10001616 	blt	r2,zero,1808e0c <_fclose_r+0xd0>
 1808db4:	8080030b 	ldhu	r2,12(r16)
 1808db8:	1080200c 	andi	r2,r2,128
 1808dbc:	1000151e 	bne	r2,zero,1808e14 <_fclose_r+0xd8>
 1808dc0:	81400c17 	ldw	r5,48(r16)
 1808dc4:	28000526 	beq	r5,zero,1808ddc <_fclose_r+0xa0>
 1808dc8:	80801004 	addi	r2,r16,64
 1808dcc:	28800226 	beq	r5,r2,1808dd8 <_fclose_r+0x9c>
 1808dd0:	8809883a 	mov	r4,r17
 1808dd4:	1804f780 	call	1804f78 <_free_r>
 1808dd8:	80000c15 	stw	zero,48(r16)
 1808ddc:	81401117 	ldw	r5,68(r16)
 1808de0:	28000326 	beq	r5,zero,1808df0 <_fclose_r+0xb4>
 1808de4:	8809883a 	mov	r4,r17
 1808de8:	1804f780 	call	1804f78 <_free_r>
 1808dec:	80001115 	stw	zero,68(r16)
 1808df0:	1804e140 	call	1804e14 <__sfp_lock_acquire>
 1808df4:	8000030d 	sth	zero,12(r16)
 1808df8:	1804e180 	call	1804e18 <__sfp_lock_release>
 1808dfc:	9005883a 	mov	r2,r18
 1808e00:	003fdc06 	br	1808d74 <__ram_exceptions_end+0xff7f8a84>
 1808e04:	1804e040 	call	1804e04 <__sinit>
 1808e08:	003fd706 	br	1808d68 <__ram_exceptions_end+0xff7f8a78>
 1808e0c:	04bfffc4 	movi	r18,-1
 1808e10:	003fe806 	br	1808db4 <__ram_exceptions_end+0xff7f8ac4>
 1808e14:	81400417 	ldw	r5,16(r16)
 1808e18:	8809883a 	mov	r4,r17
 1808e1c:	1804f780 	call	1804f78 <_free_r>
 1808e20:	003fe706 	br	1808dc0 <__ram_exceptions_end+0xff7f8ad0>
 1808e24:	0005883a 	mov	r2,zero
 1808e28:	f800283a 	ret

01808e2c <fclose>:
 1808e2c:	00806134 	movhi	r2,388
 1808e30:	10946904 	addi	r2,r2,20900
 1808e34:	200b883a 	mov	r5,r4
 1808e38:	11000017 	ldw	r4,0(r2)
 1808e3c:	1808d3c1 	jmpi	1808d3c <_fclose_r>

01808e40 <__fputwc>:
 1808e40:	defff804 	addi	sp,sp,-32
 1808e44:	dcc00415 	stw	r19,16(sp)
 1808e48:	dc800315 	stw	r18,12(sp)
 1808e4c:	dc000115 	stw	r16,4(sp)
 1808e50:	dfc00715 	stw	ra,28(sp)
 1808e54:	dd400615 	stw	r21,24(sp)
 1808e58:	dd000515 	stw	r20,20(sp)
 1808e5c:	dc400215 	stw	r17,8(sp)
 1808e60:	2027883a 	mov	r19,r4
 1808e64:	2825883a 	mov	r18,r5
 1808e68:	3021883a 	mov	r16,r6
 1808e6c:	18054980 	call	1805498 <__locale_mb_cur_max>
 1808e70:	00c00044 	movi	r3,1
 1808e74:	10c03e26 	beq	r2,r3,1808f70 <__fputwc+0x130>
 1808e78:	81c01704 	addi	r7,r16,92
 1808e7c:	900d883a 	mov	r6,r18
 1808e80:	d80b883a 	mov	r5,sp
 1808e84:	9809883a 	mov	r4,r19
 1808e88:	1809e8c0 	call	1809e8c <_wcrtomb_r>
 1808e8c:	1029883a 	mov	r20,r2
 1808e90:	00bfffc4 	movi	r2,-1
 1808e94:	a0802026 	beq	r20,r2,1808f18 <__fputwc+0xd8>
 1808e98:	d9400003 	ldbu	r5,0(sp)
 1808e9c:	a0001c26 	beq	r20,zero,1808f10 <__fputwc+0xd0>
 1808ea0:	0023883a 	mov	r17,zero
 1808ea4:	05400284 	movi	r21,10
 1808ea8:	00000906 	br	1808ed0 <__fputwc+0x90>
 1808eac:	80800017 	ldw	r2,0(r16)
 1808eb0:	11400005 	stb	r5,0(r2)
 1808eb4:	80c00017 	ldw	r3,0(r16)
 1808eb8:	18c00044 	addi	r3,r3,1
 1808ebc:	80c00015 	stw	r3,0(r16)
 1808ec0:	8c400044 	addi	r17,r17,1
 1808ec4:	dc45883a 	add	r2,sp,r17
 1808ec8:	8d00112e 	bgeu	r17,r20,1808f10 <__fputwc+0xd0>
 1808ecc:	11400003 	ldbu	r5,0(r2)
 1808ed0:	80c00217 	ldw	r3,8(r16)
 1808ed4:	18ffffc4 	addi	r3,r3,-1
 1808ed8:	80c00215 	stw	r3,8(r16)
 1808edc:	183ff30e 	bge	r3,zero,1808eac <__ram_exceptions_end+0xff7f8bbc>
 1808ee0:	80800617 	ldw	r2,24(r16)
 1808ee4:	18801916 	blt	r3,r2,1808f4c <__fputwc+0x10c>
 1808ee8:	80800017 	ldw	r2,0(r16)
 1808eec:	11400005 	stb	r5,0(r2)
 1808ef0:	80800017 	ldw	r2,0(r16)
 1808ef4:	10c00003 	ldbu	r3,0(r2)
 1808ef8:	10800044 	addi	r2,r2,1
 1808efc:	1d402326 	beq	r3,r21,1808f8c <__fputwc+0x14c>
 1808f00:	80800015 	stw	r2,0(r16)
 1808f04:	8c400044 	addi	r17,r17,1
 1808f08:	dc45883a 	add	r2,sp,r17
 1808f0c:	8d3fef36 	bltu	r17,r20,1808ecc <__ram_exceptions_end+0xff7f8bdc>
 1808f10:	9005883a 	mov	r2,r18
 1808f14:	00000406 	br	1808f28 <__fputwc+0xe8>
 1808f18:	80c0030b 	ldhu	r3,12(r16)
 1808f1c:	a005883a 	mov	r2,r20
 1808f20:	18c01014 	ori	r3,r3,64
 1808f24:	80c0030d 	sth	r3,12(r16)
 1808f28:	dfc00717 	ldw	ra,28(sp)
 1808f2c:	dd400617 	ldw	r21,24(sp)
 1808f30:	dd000517 	ldw	r20,20(sp)
 1808f34:	dcc00417 	ldw	r19,16(sp)
 1808f38:	dc800317 	ldw	r18,12(sp)
 1808f3c:	dc400217 	ldw	r17,8(sp)
 1808f40:	dc000117 	ldw	r16,4(sp)
 1808f44:	dec00804 	addi	sp,sp,32
 1808f48:	f800283a 	ret
 1808f4c:	800d883a 	mov	r6,r16
 1808f50:	29403fcc 	andi	r5,r5,255
 1808f54:	9809883a 	mov	r4,r19
 1808f58:	1809d340 	call	1809d34 <__swbuf_r>
 1808f5c:	10bfffe0 	cmpeqi	r2,r2,-1
 1808f60:	10803fcc 	andi	r2,r2,255
 1808f64:	103fd626 	beq	r2,zero,1808ec0 <__ram_exceptions_end+0xff7f8bd0>
 1808f68:	00bfffc4 	movi	r2,-1
 1808f6c:	003fee06 	br	1808f28 <__ram_exceptions_end+0xff7f8c38>
 1808f70:	90ffffc4 	addi	r3,r18,-1
 1808f74:	01003f84 	movi	r4,254
 1808f78:	20ffbf36 	bltu	r4,r3,1808e78 <__ram_exceptions_end+0xff7f8b88>
 1808f7c:	900b883a 	mov	r5,r18
 1808f80:	dc800005 	stb	r18,0(sp)
 1808f84:	1029883a 	mov	r20,r2
 1808f88:	003fc506 	br	1808ea0 <__ram_exceptions_end+0xff7f8bb0>
 1808f8c:	800d883a 	mov	r6,r16
 1808f90:	a80b883a 	mov	r5,r21
 1808f94:	9809883a 	mov	r4,r19
 1808f98:	1809d340 	call	1809d34 <__swbuf_r>
 1808f9c:	10bfffe0 	cmpeqi	r2,r2,-1
 1808fa0:	003fef06 	br	1808f60 <__ram_exceptions_end+0xff7f8c70>

01808fa4 <_fputwc_r>:
 1808fa4:	3080030b 	ldhu	r2,12(r6)
 1808fa8:	10c8000c 	andi	r3,r2,8192
 1808fac:	1800051e 	bne	r3,zero,1808fc4 <_fputwc_r+0x20>
 1808fb0:	30c01917 	ldw	r3,100(r6)
 1808fb4:	10880014 	ori	r2,r2,8192
 1808fb8:	3080030d 	sth	r2,12(r6)
 1808fbc:	18880014 	ori	r2,r3,8192
 1808fc0:	30801915 	stw	r2,100(r6)
 1808fc4:	1808e401 	jmpi	1808e40 <__fputwc>

01808fc8 <fputwc>:
 1808fc8:	00806134 	movhi	r2,388
 1808fcc:	defffc04 	addi	sp,sp,-16
 1808fd0:	10946904 	addi	r2,r2,20900
 1808fd4:	dc000115 	stw	r16,4(sp)
 1808fd8:	14000017 	ldw	r16,0(r2)
 1808fdc:	dc400215 	stw	r17,8(sp)
 1808fe0:	dfc00315 	stw	ra,12(sp)
 1808fe4:	2023883a 	mov	r17,r4
 1808fe8:	80000226 	beq	r16,zero,1808ff4 <fputwc+0x2c>
 1808fec:	80800e17 	ldw	r2,56(r16)
 1808ff0:	10001026 	beq	r2,zero,1809034 <fputwc+0x6c>
 1808ff4:	2880030b 	ldhu	r2,12(r5)
 1808ff8:	10c8000c 	andi	r3,r2,8192
 1808ffc:	1800051e 	bne	r3,zero,1809014 <fputwc+0x4c>
 1809000:	28c01917 	ldw	r3,100(r5)
 1809004:	10880014 	ori	r2,r2,8192
 1809008:	2880030d 	sth	r2,12(r5)
 180900c:	18880014 	ori	r2,r3,8192
 1809010:	28801915 	stw	r2,100(r5)
 1809014:	280d883a 	mov	r6,r5
 1809018:	8009883a 	mov	r4,r16
 180901c:	880b883a 	mov	r5,r17
 1809020:	dfc00317 	ldw	ra,12(sp)
 1809024:	dc400217 	ldw	r17,8(sp)
 1809028:	dc000117 	ldw	r16,4(sp)
 180902c:	dec00404 	addi	sp,sp,16
 1809030:	1808e401 	jmpi	1808e40 <__fputwc>
 1809034:	8009883a 	mov	r4,r16
 1809038:	d9400015 	stw	r5,0(sp)
 180903c:	1804e040 	call	1804e04 <__sinit>
 1809040:	d9400017 	ldw	r5,0(sp)
 1809044:	003feb06 	br	1808ff4 <__ram_exceptions_end+0xff7f8d04>

01809048 <_fstat_r>:
 1809048:	defffd04 	addi	sp,sp,-12
 180904c:	2805883a 	mov	r2,r5
 1809050:	dc000015 	stw	r16,0(sp)
 1809054:	04006134 	movhi	r16,388
 1809058:	dc400115 	stw	r17,4(sp)
 180905c:	841c3604 	addi	r16,r16,28888
 1809060:	2023883a 	mov	r17,r4
 1809064:	300b883a 	mov	r5,r6
 1809068:	1009883a 	mov	r4,r2
 180906c:	dfc00215 	stw	ra,8(sp)
 1809070:	80000015 	stw	zero,0(r16)
 1809074:	18127000 	call	1812700 <fstat>
 1809078:	00ffffc4 	movi	r3,-1
 180907c:	10c00526 	beq	r2,r3,1809094 <_fstat_r+0x4c>
 1809080:	dfc00217 	ldw	ra,8(sp)
 1809084:	dc400117 	ldw	r17,4(sp)
 1809088:	dc000017 	ldw	r16,0(sp)
 180908c:	dec00304 	addi	sp,sp,12
 1809090:	f800283a 	ret
 1809094:	80c00017 	ldw	r3,0(r16)
 1809098:	183ff926 	beq	r3,zero,1809080 <__ram_exceptions_end+0xff7f8d90>
 180909c:	88c00015 	stw	r3,0(r17)
 18090a0:	003ff706 	br	1809080 <__ram_exceptions_end+0xff7f8d90>

018090a4 <__sfvwrite_r>:
 18090a4:	30800217 	ldw	r2,8(r6)
 18090a8:	10006726 	beq	r2,zero,1809248 <__sfvwrite_r+0x1a4>
 18090ac:	28c0030b 	ldhu	r3,12(r5)
 18090b0:	defff404 	addi	sp,sp,-48
 18090b4:	dd400715 	stw	r21,28(sp)
 18090b8:	dd000615 	stw	r20,24(sp)
 18090bc:	dc000215 	stw	r16,8(sp)
 18090c0:	dfc00b15 	stw	ra,44(sp)
 18090c4:	df000a15 	stw	fp,40(sp)
 18090c8:	ddc00915 	stw	r23,36(sp)
 18090cc:	dd800815 	stw	r22,32(sp)
 18090d0:	dcc00515 	stw	r19,20(sp)
 18090d4:	dc800415 	stw	r18,16(sp)
 18090d8:	dc400315 	stw	r17,12(sp)
 18090dc:	1880020c 	andi	r2,r3,8
 18090e0:	2821883a 	mov	r16,r5
 18090e4:	202b883a 	mov	r21,r4
 18090e8:	3029883a 	mov	r20,r6
 18090ec:	10002726 	beq	r2,zero,180918c <__sfvwrite_r+0xe8>
 18090f0:	28800417 	ldw	r2,16(r5)
 18090f4:	10002526 	beq	r2,zero,180918c <__sfvwrite_r+0xe8>
 18090f8:	1880008c 	andi	r2,r3,2
 18090fc:	a4400017 	ldw	r17,0(r20)
 1809100:	10002a26 	beq	r2,zero,18091ac <__sfvwrite_r+0x108>
 1809104:	05a00034 	movhi	r22,32768
 1809108:	0027883a 	mov	r19,zero
 180910c:	0025883a 	mov	r18,zero
 1809110:	b5bf0004 	addi	r22,r22,-1024
 1809114:	980d883a 	mov	r6,r19
 1809118:	a809883a 	mov	r4,r21
 180911c:	90004626 	beq	r18,zero,1809238 <__sfvwrite_r+0x194>
 1809120:	900f883a 	mov	r7,r18
 1809124:	b480022e 	bgeu	r22,r18,1809130 <__sfvwrite_r+0x8c>
 1809128:	01e00034 	movhi	r7,32768
 180912c:	39ff0004 	addi	r7,r7,-1024
 1809130:	80800917 	ldw	r2,36(r16)
 1809134:	81400717 	ldw	r5,28(r16)
 1809138:	103ee83a 	callr	r2
 180913c:	0080570e 	bge	zero,r2,180929c <__sfvwrite_r+0x1f8>
 1809140:	a0c00217 	ldw	r3,8(r20)
 1809144:	98a7883a 	add	r19,r19,r2
 1809148:	90a5c83a 	sub	r18,r18,r2
 180914c:	1885c83a 	sub	r2,r3,r2
 1809150:	a0800215 	stw	r2,8(r20)
 1809154:	103fef1e 	bne	r2,zero,1809114 <__ram_exceptions_end+0xff7f8e24>
 1809158:	0005883a 	mov	r2,zero
 180915c:	dfc00b17 	ldw	ra,44(sp)
 1809160:	df000a17 	ldw	fp,40(sp)
 1809164:	ddc00917 	ldw	r23,36(sp)
 1809168:	dd800817 	ldw	r22,32(sp)
 180916c:	dd400717 	ldw	r21,28(sp)
 1809170:	dd000617 	ldw	r20,24(sp)
 1809174:	dcc00517 	ldw	r19,20(sp)
 1809178:	dc800417 	ldw	r18,16(sp)
 180917c:	dc400317 	ldw	r17,12(sp)
 1809180:	dc000217 	ldw	r16,8(sp)
 1809184:	dec00c04 	addi	sp,sp,48
 1809188:	f800283a 	ret
 180918c:	800b883a 	mov	r5,r16
 1809190:	a809883a 	mov	r4,r21
 1809194:	1802e300 	call	1802e30 <__swsetup_r>
 1809198:	1000eb1e 	bne	r2,zero,1809548 <__sfvwrite_r+0x4a4>
 180919c:	80c0030b 	ldhu	r3,12(r16)
 18091a0:	a4400017 	ldw	r17,0(r20)
 18091a4:	1880008c 	andi	r2,r3,2
 18091a8:	103fd61e 	bne	r2,zero,1809104 <__ram_exceptions_end+0xff7f8e14>
 18091ac:	1880004c 	andi	r2,r3,1
 18091b0:	10003f1e 	bne	r2,zero,18092b0 <__sfvwrite_r+0x20c>
 18091b4:	0039883a 	mov	fp,zero
 18091b8:	0025883a 	mov	r18,zero
 18091bc:	90001a26 	beq	r18,zero,1809228 <__sfvwrite_r+0x184>
 18091c0:	1880800c 	andi	r2,r3,512
 18091c4:	84c00217 	ldw	r19,8(r16)
 18091c8:	10002126 	beq	r2,zero,1809250 <__sfvwrite_r+0x1ac>
 18091cc:	982f883a 	mov	r23,r19
 18091d0:	94c09336 	bltu	r18,r19,1809420 <__sfvwrite_r+0x37c>
 18091d4:	1881200c 	andi	r2,r3,1152
 18091d8:	10009e1e 	bne	r2,zero,1809454 <__sfvwrite_r+0x3b0>
 18091dc:	81000017 	ldw	r4,0(r16)
 18091e0:	b80d883a 	mov	r6,r23
 18091e4:	e00b883a 	mov	r5,fp
 18091e8:	18096140 	call	1809614 <memmove>
 18091ec:	80c00217 	ldw	r3,8(r16)
 18091f0:	81000017 	ldw	r4,0(r16)
 18091f4:	9005883a 	mov	r2,r18
 18091f8:	1ce7c83a 	sub	r19,r3,r19
 18091fc:	25cf883a 	add	r7,r4,r23
 1809200:	84c00215 	stw	r19,8(r16)
 1809204:	81c00015 	stw	r7,0(r16)
 1809208:	a0c00217 	ldw	r3,8(r20)
 180920c:	e0b9883a 	add	fp,fp,r2
 1809210:	90a5c83a 	sub	r18,r18,r2
 1809214:	18a7c83a 	sub	r19,r3,r2
 1809218:	a4c00215 	stw	r19,8(r20)
 180921c:	983fce26 	beq	r19,zero,1809158 <__ram_exceptions_end+0xff7f8e68>
 1809220:	80c0030b 	ldhu	r3,12(r16)
 1809224:	903fe61e 	bne	r18,zero,18091c0 <__ram_exceptions_end+0xff7f8ed0>
 1809228:	8f000017 	ldw	fp,0(r17)
 180922c:	8c800117 	ldw	r18,4(r17)
 1809230:	8c400204 	addi	r17,r17,8
 1809234:	003fe106 	br	18091bc <__ram_exceptions_end+0xff7f8ecc>
 1809238:	8cc00017 	ldw	r19,0(r17)
 180923c:	8c800117 	ldw	r18,4(r17)
 1809240:	8c400204 	addi	r17,r17,8
 1809244:	003fb306 	br	1809114 <__ram_exceptions_end+0xff7f8e24>
 1809248:	0005883a 	mov	r2,zero
 180924c:	f800283a 	ret
 1809250:	81000017 	ldw	r4,0(r16)
 1809254:	80800417 	ldw	r2,16(r16)
 1809258:	11005736 	bltu	r2,r4,18093b8 <__sfvwrite_r+0x314>
 180925c:	85c00517 	ldw	r23,20(r16)
 1809260:	95c05536 	bltu	r18,r23,18093b8 <__sfvwrite_r+0x314>
 1809264:	00a00034 	movhi	r2,32768
 1809268:	10bfffc4 	addi	r2,r2,-1
 180926c:	9009883a 	mov	r4,r18
 1809270:	1480012e 	bgeu	r2,r18,1809278 <__sfvwrite_r+0x1d4>
 1809274:	1009883a 	mov	r4,r2
 1809278:	b80b883a 	mov	r5,r23
 180927c:	180ab240 	call	180ab24 <__divsi3>
 1809280:	15cf383a 	mul	r7,r2,r23
 1809284:	81400717 	ldw	r5,28(r16)
 1809288:	80800917 	ldw	r2,36(r16)
 180928c:	e00d883a 	mov	r6,fp
 1809290:	a809883a 	mov	r4,r21
 1809294:	103ee83a 	callr	r2
 1809298:	00bfdb16 	blt	zero,r2,1809208 <__ram_exceptions_end+0xff7f8f18>
 180929c:	8080030b 	ldhu	r2,12(r16)
 18092a0:	10801014 	ori	r2,r2,64
 18092a4:	8080030d 	sth	r2,12(r16)
 18092a8:	00bfffc4 	movi	r2,-1
 18092ac:	003fab06 	br	180915c <__ram_exceptions_end+0xff7f8e6c>
 18092b0:	0027883a 	mov	r19,zero
 18092b4:	0011883a 	mov	r8,zero
 18092b8:	0039883a 	mov	fp,zero
 18092bc:	0025883a 	mov	r18,zero
 18092c0:	90001f26 	beq	r18,zero,1809340 <__sfvwrite_r+0x29c>
 18092c4:	40005a26 	beq	r8,zero,1809430 <__sfvwrite_r+0x38c>
 18092c8:	982d883a 	mov	r22,r19
 18092cc:	94c0012e 	bgeu	r18,r19,18092d4 <__sfvwrite_r+0x230>
 18092d0:	902d883a 	mov	r22,r18
 18092d4:	81000017 	ldw	r4,0(r16)
 18092d8:	80800417 	ldw	r2,16(r16)
 18092dc:	b02f883a 	mov	r23,r22
 18092e0:	81c00517 	ldw	r7,20(r16)
 18092e4:	1100032e 	bgeu	r2,r4,18092f4 <__sfvwrite_r+0x250>
 18092e8:	80c00217 	ldw	r3,8(r16)
 18092ec:	38c7883a 	add	r3,r7,r3
 18092f0:	1d801816 	blt	r3,r22,1809354 <__sfvwrite_r+0x2b0>
 18092f4:	b1c03e16 	blt	r22,r7,18093f0 <__sfvwrite_r+0x34c>
 18092f8:	80800917 	ldw	r2,36(r16)
 18092fc:	81400717 	ldw	r5,28(r16)
 1809300:	e00d883a 	mov	r6,fp
 1809304:	da000115 	stw	r8,4(sp)
 1809308:	a809883a 	mov	r4,r21
 180930c:	103ee83a 	callr	r2
 1809310:	102f883a 	mov	r23,r2
 1809314:	da000117 	ldw	r8,4(sp)
 1809318:	00bfe00e 	bge	zero,r2,180929c <__ram_exceptions_end+0xff7f8fac>
 180931c:	9de7c83a 	sub	r19,r19,r23
 1809320:	98001f26 	beq	r19,zero,18093a0 <__sfvwrite_r+0x2fc>
 1809324:	a0800217 	ldw	r2,8(r20)
 1809328:	e5f9883a 	add	fp,fp,r23
 180932c:	95e5c83a 	sub	r18,r18,r23
 1809330:	15efc83a 	sub	r23,r2,r23
 1809334:	a5c00215 	stw	r23,8(r20)
 1809338:	b83f8726 	beq	r23,zero,1809158 <__ram_exceptions_end+0xff7f8e68>
 180933c:	903fe11e 	bne	r18,zero,18092c4 <__ram_exceptions_end+0xff7f8fd4>
 1809340:	8f000017 	ldw	fp,0(r17)
 1809344:	8c800117 	ldw	r18,4(r17)
 1809348:	0011883a 	mov	r8,zero
 180934c:	8c400204 	addi	r17,r17,8
 1809350:	003fdb06 	br	18092c0 <__ram_exceptions_end+0xff7f8fd0>
 1809354:	180d883a 	mov	r6,r3
 1809358:	e00b883a 	mov	r5,fp
 180935c:	da000115 	stw	r8,4(sp)
 1809360:	d8c00015 	stw	r3,0(sp)
 1809364:	18096140 	call	1809614 <memmove>
 1809368:	d8c00017 	ldw	r3,0(sp)
 180936c:	80800017 	ldw	r2,0(r16)
 1809370:	800b883a 	mov	r5,r16
 1809374:	a809883a 	mov	r4,r21
 1809378:	10c5883a 	add	r2,r2,r3
 180937c:	80800015 	stw	r2,0(r16)
 1809380:	d8c00015 	stw	r3,0(sp)
 1809384:	1804a280 	call	1804a28 <_fflush_r>
 1809388:	d8c00017 	ldw	r3,0(sp)
 180938c:	da000117 	ldw	r8,4(sp)
 1809390:	103fc21e 	bne	r2,zero,180929c <__ram_exceptions_end+0xff7f8fac>
 1809394:	182f883a 	mov	r23,r3
 1809398:	9de7c83a 	sub	r19,r19,r23
 180939c:	983fe11e 	bne	r19,zero,1809324 <__ram_exceptions_end+0xff7f9034>
 18093a0:	800b883a 	mov	r5,r16
 18093a4:	a809883a 	mov	r4,r21
 18093a8:	1804a280 	call	1804a28 <_fflush_r>
 18093ac:	103fbb1e 	bne	r2,zero,180929c <__ram_exceptions_end+0xff7f8fac>
 18093b0:	0011883a 	mov	r8,zero
 18093b4:	003fdb06 	br	1809324 <__ram_exceptions_end+0xff7f9034>
 18093b8:	94c0012e 	bgeu	r18,r19,18093c0 <__sfvwrite_r+0x31c>
 18093bc:	9027883a 	mov	r19,r18
 18093c0:	980d883a 	mov	r6,r19
 18093c4:	e00b883a 	mov	r5,fp
 18093c8:	18096140 	call	1809614 <memmove>
 18093cc:	80800217 	ldw	r2,8(r16)
 18093d0:	80c00017 	ldw	r3,0(r16)
 18093d4:	14c5c83a 	sub	r2,r2,r19
 18093d8:	1cc7883a 	add	r3,r3,r19
 18093dc:	80800215 	stw	r2,8(r16)
 18093e0:	80c00015 	stw	r3,0(r16)
 18093e4:	10004326 	beq	r2,zero,18094f4 <__sfvwrite_r+0x450>
 18093e8:	9805883a 	mov	r2,r19
 18093ec:	003f8606 	br	1809208 <__ram_exceptions_end+0xff7f8f18>
 18093f0:	b00d883a 	mov	r6,r22
 18093f4:	e00b883a 	mov	r5,fp
 18093f8:	da000115 	stw	r8,4(sp)
 18093fc:	18096140 	call	1809614 <memmove>
 1809400:	80800217 	ldw	r2,8(r16)
 1809404:	80c00017 	ldw	r3,0(r16)
 1809408:	da000117 	ldw	r8,4(sp)
 180940c:	1585c83a 	sub	r2,r2,r22
 1809410:	1dad883a 	add	r22,r3,r22
 1809414:	80800215 	stw	r2,8(r16)
 1809418:	85800015 	stw	r22,0(r16)
 180941c:	003fbf06 	br	180931c <__ram_exceptions_end+0xff7f902c>
 1809420:	81000017 	ldw	r4,0(r16)
 1809424:	9027883a 	mov	r19,r18
 1809428:	902f883a 	mov	r23,r18
 180942c:	003f6c06 	br	18091e0 <__ram_exceptions_end+0xff7f8ef0>
 1809430:	900d883a 	mov	r6,r18
 1809434:	01400284 	movi	r5,10
 1809438:	e009883a 	mov	r4,fp
 180943c:	1805eb40 	call	1805eb4 <memchr>
 1809440:	10003e26 	beq	r2,zero,180953c <__sfvwrite_r+0x498>
 1809444:	10800044 	addi	r2,r2,1
 1809448:	1727c83a 	sub	r19,r2,fp
 180944c:	02000044 	movi	r8,1
 1809450:	003f9d06 	br	18092c8 <__ram_exceptions_end+0xff7f8fd8>
 1809454:	80800517 	ldw	r2,20(r16)
 1809458:	81400417 	ldw	r5,16(r16)
 180945c:	81c00017 	ldw	r7,0(r16)
 1809460:	10a7883a 	add	r19,r2,r2
 1809464:	9885883a 	add	r2,r19,r2
 1809468:	1026d7fa 	srli	r19,r2,31
 180946c:	396dc83a 	sub	r22,r7,r5
 1809470:	b1000044 	addi	r4,r22,1
 1809474:	9885883a 	add	r2,r19,r2
 1809478:	1027d07a 	srai	r19,r2,1
 180947c:	2485883a 	add	r2,r4,r18
 1809480:	980d883a 	mov	r6,r19
 1809484:	9880022e 	bgeu	r19,r2,1809490 <__sfvwrite_r+0x3ec>
 1809488:	1027883a 	mov	r19,r2
 180948c:	100d883a 	mov	r6,r2
 1809490:	18c1000c 	andi	r3,r3,1024
 1809494:	18001c26 	beq	r3,zero,1809508 <__sfvwrite_r+0x464>
 1809498:	300b883a 	mov	r5,r6
 180949c:	a809883a 	mov	r4,r21
 18094a0:	18056a80 	call	18056a8 <_malloc_r>
 18094a4:	102f883a 	mov	r23,r2
 18094a8:	10002926 	beq	r2,zero,1809550 <__sfvwrite_r+0x4ac>
 18094ac:	81400417 	ldw	r5,16(r16)
 18094b0:	b00d883a 	mov	r6,r22
 18094b4:	1009883a 	mov	r4,r2
 18094b8:	1805f980 	call	1805f98 <memcpy>
 18094bc:	8080030b 	ldhu	r2,12(r16)
 18094c0:	00fedfc4 	movi	r3,-1153
 18094c4:	10c4703a 	and	r2,r2,r3
 18094c8:	10802014 	ori	r2,r2,128
 18094cc:	8080030d 	sth	r2,12(r16)
 18094d0:	bd89883a 	add	r4,r23,r22
 18094d4:	9d8fc83a 	sub	r7,r19,r22
 18094d8:	85c00415 	stw	r23,16(r16)
 18094dc:	84c00515 	stw	r19,20(r16)
 18094e0:	81000015 	stw	r4,0(r16)
 18094e4:	9027883a 	mov	r19,r18
 18094e8:	81c00215 	stw	r7,8(r16)
 18094ec:	902f883a 	mov	r23,r18
 18094f0:	003f3b06 	br	18091e0 <__ram_exceptions_end+0xff7f8ef0>
 18094f4:	800b883a 	mov	r5,r16
 18094f8:	a809883a 	mov	r4,r21
 18094fc:	1804a280 	call	1804a28 <_fflush_r>
 1809500:	103fb926 	beq	r2,zero,18093e8 <__ram_exceptions_end+0xff7f90f8>
 1809504:	003f6506 	br	180929c <__ram_exceptions_end+0xff7f8fac>
 1809508:	a809883a 	mov	r4,r21
 180950c:	18097d00 	call	18097d0 <_realloc_r>
 1809510:	102f883a 	mov	r23,r2
 1809514:	103fee1e 	bne	r2,zero,18094d0 <__ram_exceptions_end+0xff7f91e0>
 1809518:	81400417 	ldw	r5,16(r16)
 180951c:	a809883a 	mov	r4,r21
 1809520:	1804f780 	call	1804f78 <_free_r>
 1809524:	8080030b 	ldhu	r2,12(r16)
 1809528:	00ffdfc4 	movi	r3,-129
 180952c:	1884703a 	and	r2,r3,r2
 1809530:	00c00304 	movi	r3,12
 1809534:	a8c00015 	stw	r3,0(r21)
 1809538:	003f5906 	br	18092a0 <__ram_exceptions_end+0xff7f8fb0>
 180953c:	94c00044 	addi	r19,r18,1
 1809540:	02000044 	movi	r8,1
 1809544:	003f6006 	br	18092c8 <__ram_exceptions_end+0xff7f8fd8>
 1809548:	00bfffc4 	movi	r2,-1
 180954c:	003f0306 	br	180915c <__ram_exceptions_end+0xff7f8e6c>
 1809550:	00800304 	movi	r2,12
 1809554:	a8800015 	stw	r2,0(r21)
 1809558:	8080030b 	ldhu	r2,12(r16)
 180955c:	003f5006 	br	18092a0 <__ram_exceptions_end+0xff7f8fb0>

01809560 <_isatty_r>:
 1809560:	defffd04 	addi	sp,sp,-12
 1809564:	dc000015 	stw	r16,0(sp)
 1809568:	04006134 	movhi	r16,388
 180956c:	dc400115 	stw	r17,4(sp)
 1809570:	841c3604 	addi	r16,r16,28888
 1809574:	2023883a 	mov	r17,r4
 1809578:	2809883a 	mov	r4,r5
 180957c:	dfc00215 	stw	ra,8(sp)
 1809580:	80000015 	stw	zero,0(r16)
 1809584:	181292c0 	call	181292c <isatty>
 1809588:	00ffffc4 	movi	r3,-1
 180958c:	10c00526 	beq	r2,r3,18095a4 <_isatty_r+0x44>
 1809590:	dfc00217 	ldw	ra,8(sp)
 1809594:	dc400117 	ldw	r17,4(sp)
 1809598:	dc000017 	ldw	r16,0(sp)
 180959c:	dec00304 	addi	sp,sp,12
 18095a0:	f800283a 	ret
 18095a4:	80c00017 	ldw	r3,0(r16)
 18095a8:	183ff926 	beq	r3,zero,1809590 <__ram_exceptions_end+0xff7f92a0>
 18095ac:	88c00015 	stw	r3,0(r17)
 18095b0:	003ff706 	br	1809590 <__ram_exceptions_end+0xff7f92a0>

018095b4 <_lseek_r>:
 18095b4:	defffd04 	addi	sp,sp,-12
 18095b8:	2805883a 	mov	r2,r5
 18095bc:	dc000015 	stw	r16,0(sp)
 18095c0:	04006134 	movhi	r16,388
 18095c4:	dc400115 	stw	r17,4(sp)
 18095c8:	300b883a 	mov	r5,r6
 18095cc:	841c3604 	addi	r16,r16,28888
 18095d0:	2023883a 	mov	r17,r4
 18095d4:	380d883a 	mov	r6,r7
 18095d8:	1009883a 	mov	r4,r2
 18095dc:	dfc00215 	stw	ra,8(sp)
 18095e0:	80000015 	stw	zero,0(r16)
 18095e4:	1812af80 	call	1812af8 <lseek>
 18095e8:	00ffffc4 	movi	r3,-1
 18095ec:	10c00526 	beq	r2,r3,1809604 <_lseek_r+0x50>
 18095f0:	dfc00217 	ldw	ra,8(sp)
 18095f4:	dc400117 	ldw	r17,4(sp)
 18095f8:	dc000017 	ldw	r16,0(sp)
 18095fc:	dec00304 	addi	sp,sp,12
 1809600:	f800283a 	ret
 1809604:	80c00017 	ldw	r3,0(r16)
 1809608:	183ff926 	beq	r3,zero,18095f0 <__ram_exceptions_end+0xff7f9300>
 180960c:	88c00015 	stw	r3,0(r17)
 1809610:	003ff706 	br	18095f0 <__ram_exceptions_end+0xff7f9300>

01809614 <memmove>:
 1809614:	2005883a 	mov	r2,r4
 1809618:	29000b2e 	bgeu	r5,r4,1809648 <memmove+0x34>
 180961c:	298f883a 	add	r7,r5,r6
 1809620:	21c0092e 	bgeu	r4,r7,1809648 <memmove+0x34>
 1809624:	2187883a 	add	r3,r4,r6
 1809628:	198bc83a 	sub	r5,r3,r6
 180962c:	30004826 	beq	r6,zero,1809750 <memmove+0x13c>
 1809630:	39ffffc4 	addi	r7,r7,-1
 1809634:	39000003 	ldbu	r4,0(r7)
 1809638:	18ffffc4 	addi	r3,r3,-1
 180963c:	19000005 	stb	r4,0(r3)
 1809640:	28fffb1e 	bne	r5,r3,1809630 <__ram_exceptions_end+0xff7f9340>
 1809644:	f800283a 	ret
 1809648:	00c003c4 	movi	r3,15
 180964c:	1980412e 	bgeu	r3,r6,1809754 <memmove+0x140>
 1809650:	2886b03a 	or	r3,r5,r2
 1809654:	18c000cc 	andi	r3,r3,3
 1809658:	1800401e 	bne	r3,zero,180975c <memmove+0x148>
 180965c:	33fffc04 	addi	r15,r6,-16
 1809660:	781ed13a 	srli	r15,r15,4
 1809664:	28c00104 	addi	r3,r5,4
 1809668:	13400104 	addi	r13,r2,4
 180966c:	781c913a 	slli	r14,r15,4
 1809670:	2b000204 	addi	r12,r5,8
 1809674:	12c00204 	addi	r11,r2,8
 1809678:	73800504 	addi	r14,r14,20
 180967c:	2a800304 	addi	r10,r5,12
 1809680:	12400304 	addi	r9,r2,12
 1809684:	2b9d883a 	add	r14,r5,r14
 1809688:	2811883a 	mov	r8,r5
 180968c:	100f883a 	mov	r7,r2
 1809690:	41000017 	ldw	r4,0(r8)
 1809694:	39c00404 	addi	r7,r7,16
 1809698:	18c00404 	addi	r3,r3,16
 180969c:	393ffc15 	stw	r4,-16(r7)
 18096a0:	193ffc17 	ldw	r4,-16(r3)
 18096a4:	6b400404 	addi	r13,r13,16
 18096a8:	5ac00404 	addi	r11,r11,16
 18096ac:	693ffc15 	stw	r4,-16(r13)
 18096b0:	61000017 	ldw	r4,0(r12)
 18096b4:	4a400404 	addi	r9,r9,16
 18096b8:	42000404 	addi	r8,r8,16
 18096bc:	593ffc15 	stw	r4,-16(r11)
 18096c0:	51000017 	ldw	r4,0(r10)
 18096c4:	63000404 	addi	r12,r12,16
 18096c8:	52800404 	addi	r10,r10,16
 18096cc:	493ffc15 	stw	r4,-16(r9)
 18096d0:	1bbfef1e 	bne	r3,r14,1809690 <__ram_exceptions_end+0xff7f93a0>
 18096d4:	79000044 	addi	r4,r15,1
 18096d8:	2008913a 	slli	r4,r4,4
 18096dc:	328003cc 	andi	r10,r6,15
 18096e0:	02c000c4 	movi	r11,3
 18096e4:	1107883a 	add	r3,r2,r4
 18096e8:	290b883a 	add	r5,r5,r4
 18096ec:	5a801e2e 	bgeu	r11,r10,1809768 <memmove+0x154>
 18096f0:	1813883a 	mov	r9,r3
 18096f4:	2811883a 	mov	r8,r5
 18096f8:	500f883a 	mov	r7,r10
 18096fc:	41000017 	ldw	r4,0(r8)
 1809700:	4a400104 	addi	r9,r9,4
 1809704:	39ffff04 	addi	r7,r7,-4
 1809708:	493fff15 	stw	r4,-4(r9)
 180970c:	42000104 	addi	r8,r8,4
 1809710:	59fffa36 	bltu	r11,r7,18096fc <__ram_exceptions_end+0xff7f940c>
 1809714:	513fff04 	addi	r4,r10,-4
 1809718:	2008d0ba 	srli	r4,r4,2
 180971c:	318000cc 	andi	r6,r6,3
 1809720:	21000044 	addi	r4,r4,1
 1809724:	2109883a 	add	r4,r4,r4
 1809728:	2109883a 	add	r4,r4,r4
 180972c:	1907883a 	add	r3,r3,r4
 1809730:	290b883a 	add	r5,r5,r4
 1809734:	30000b26 	beq	r6,zero,1809764 <memmove+0x150>
 1809738:	198d883a 	add	r6,r3,r6
 180973c:	29c00003 	ldbu	r7,0(r5)
 1809740:	18c00044 	addi	r3,r3,1
 1809744:	29400044 	addi	r5,r5,1
 1809748:	19ffffc5 	stb	r7,-1(r3)
 180974c:	19bffb1e 	bne	r3,r6,180973c <__ram_exceptions_end+0xff7f944c>
 1809750:	f800283a 	ret
 1809754:	1007883a 	mov	r3,r2
 1809758:	003ff606 	br	1809734 <__ram_exceptions_end+0xff7f9444>
 180975c:	1007883a 	mov	r3,r2
 1809760:	003ff506 	br	1809738 <__ram_exceptions_end+0xff7f9448>
 1809764:	f800283a 	ret
 1809768:	500d883a 	mov	r6,r10
 180976c:	003ff106 	br	1809734 <__ram_exceptions_end+0xff7f9444>

01809770 <_read_r>:
 1809770:	defffd04 	addi	sp,sp,-12
 1809774:	2805883a 	mov	r2,r5
 1809778:	dc000015 	stw	r16,0(sp)
 180977c:	04006134 	movhi	r16,388
 1809780:	dc400115 	stw	r17,4(sp)
 1809784:	300b883a 	mov	r5,r6
 1809788:	841c3604 	addi	r16,r16,28888
 180978c:	2023883a 	mov	r17,r4
 1809790:	380d883a 	mov	r6,r7
 1809794:	1009883a 	mov	r4,r2
 1809798:	dfc00215 	stw	ra,8(sp)
 180979c:	80000015 	stw	zero,0(r16)
 18097a0:	18132140 	call	1813214 <read>
 18097a4:	00ffffc4 	movi	r3,-1
 18097a8:	10c00526 	beq	r2,r3,18097c0 <_read_r+0x50>
 18097ac:	dfc00217 	ldw	ra,8(sp)
 18097b0:	dc400117 	ldw	r17,4(sp)
 18097b4:	dc000017 	ldw	r16,0(sp)
 18097b8:	dec00304 	addi	sp,sp,12
 18097bc:	f800283a 	ret
 18097c0:	80c00017 	ldw	r3,0(r16)
 18097c4:	183ff926 	beq	r3,zero,18097ac <__ram_exceptions_end+0xff7f94bc>
 18097c8:	88c00015 	stw	r3,0(r17)
 18097cc:	003ff706 	br	18097ac <__ram_exceptions_end+0xff7f94bc>

018097d0 <_realloc_r>:
 18097d0:	defff604 	addi	sp,sp,-40
 18097d4:	dc800215 	stw	r18,8(sp)
 18097d8:	dfc00915 	stw	ra,36(sp)
 18097dc:	df000815 	stw	fp,32(sp)
 18097e0:	ddc00715 	stw	r23,28(sp)
 18097e4:	dd800615 	stw	r22,24(sp)
 18097e8:	dd400515 	stw	r21,20(sp)
 18097ec:	dd000415 	stw	r20,16(sp)
 18097f0:	dcc00315 	stw	r19,12(sp)
 18097f4:	dc400115 	stw	r17,4(sp)
 18097f8:	dc000015 	stw	r16,0(sp)
 18097fc:	3025883a 	mov	r18,r6
 1809800:	2800b726 	beq	r5,zero,1809ae0 <_realloc_r+0x310>
 1809804:	282b883a 	mov	r21,r5
 1809808:	2029883a 	mov	r20,r4
 180980c:	180d4580 	call	180d458 <__malloc_lock>
 1809810:	a8bfff17 	ldw	r2,-4(r21)
 1809814:	043fff04 	movi	r16,-4
 1809818:	90c002c4 	addi	r3,r18,11
 180981c:	01000584 	movi	r4,22
 1809820:	acfffe04 	addi	r19,r21,-8
 1809824:	1420703a 	and	r16,r2,r16
 1809828:	20c0332e 	bgeu	r4,r3,18098f8 <_realloc_r+0x128>
 180982c:	047ffe04 	movi	r17,-8
 1809830:	1c62703a 	and	r17,r3,r17
 1809834:	8807883a 	mov	r3,r17
 1809838:	88005816 	blt	r17,zero,180999c <_realloc_r+0x1cc>
 180983c:	8c805736 	bltu	r17,r18,180999c <_realloc_r+0x1cc>
 1809840:	80c0300e 	bge	r16,r3,1809904 <_realloc_r+0x134>
 1809844:	07006134 	movhi	fp,388
 1809848:	e70e0704 	addi	fp,fp,14364
 180984c:	e1c00217 	ldw	r7,8(fp)
 1809850:	9c09883a 	add	r4,r19,r16
 1809854:	22000117 	ldw	r8,4(r4)
 1809858:	21c06326 	beq	r4,r7,18099e8 <_realloc_r+0x218>
 180985c:	017fff84 	movi	r5,-2
 1809860:	414a703a 	and	r5,r8,r5
 1809864:	214b883a 	add	r5,r4,r5
 1809868:	29800117 	ldw	r6,4(r5)
 180986c:	3180004c 	andi	r6,r6,1
 1809870:	30003f26 	beq	r6,zero,1809970 <_realloc_r+0x1a0>
 1809874:	1080004c 	andi	r2,r2,1
 1809878:	10008326 	beq	r2,zero,1809a88 <_realloc_r+0x2b8>
 180987c:	900b883a 	mov	r5,r18
 1809880:	a009883a 	mov	r4,r20
 1809884:	18056a80 	call	18056a8 <_malloc_r>
 1809888:	1025883a 	mov	r18,r2
 180988c:	10011e26 	beq	r2,zero,1809d08 <_realloc_r+0x538>
 1809890:	a93fff17 	ldw	r4,-4(r21)
 1809894:	10fffe04 	addi	r3,r2,-8
 1809898:	00bfff84 	movi	r2,-2
 180989c:	2084703a 	and	r2,r4,r2
 18098a0:	9885883a 	add	r2,r19,r2
 18098a4:	1880ee26 	beq	r3,r2,1809c60 <_realloc_r+0x490>
 18098a8:	81bfff04 	addi	r6,r16,-4
 18098ac:	00800904 	movi	r2,36
 18098b0:	1180b836 	bltu	r2,r6,1809b94 <_realloc_r+0x3c4>
 18098b4:	00c004c4 	movi	r3,19
 18098b8:	19809636 	bltu	r3,r6,1809b14 <_realloc_r+0x344>
 18098bc:	9005883a 	mov	r2,r18
 18098c0:	a807883a 	mov	r3,r21
 18098c4:	19000017 	ldw	r4,0(r3)
 18098c8:	11000015 	stw	r4,0(r2)
 18098cc:	19000117 	ldw	r4,4(r3)
 18098d0:	11000115 	stw	r4,4(r2)
 18098d4:	18c00217 	ldw	r3,8(r3)
 18098d8:	10c00215 	stw	r3,8(r2)
 18098dc:	a80b883a 	mov	r5,r21
 18098e0:	a009883a 	mov	r4,r20
 18098e4:	1804f780 	call	1804f78 <_free_r>
 18098e8:	a009883a 	mov	r4,r20
 18098ec:	180d4b80 	call	180d4b8 <__malloc_unlock>
 18098f0:	9005883a 	mov	r2,r18
 18098f4:	00001206 	br	1809940 <_realloc_r+0x170>
 18098f8:	00c00404 	movi	r3,16
 18098fc:	1823883a 	mov	r17,r3
 1809900:	003fce06 	br	180983c <__ram_exceptions_end+0xff7f954c>
 1809904:	a825883a 	mov	r18,r21
 1809908:	8445c83a 	sub	r2,r16,r17
 180990c:	00c003c4 	movi	r3,15
 1809910:	18802636 	bltu	r3,r2,18099ac <_realloc_r+0x1dc>
 1809914:	99800117 	ldw	r6,4(r19)
 1809918:	9c07883a 	add	r3,r19,r16
 180991c:	3180004c 	andi	r6,r6,1
 1809920:	3420b03a 	or	r16,r6,r16
 1809924:	9c000115 	stw	r16,4(r19)
 1809928:	18800117 	ldw	r2,4(r3)
 180992c:	10800054 	ori	r2,r2,1
 1809930:	18800115 	stw	r2,4(r3)
 1809934:	a009883a 	mov	r4,r20
 1809938:	180d4b80 	call	180d4b8 <__malloc_unlock>
 180993c:	9005883a 	mov	r2,r18
 1809940:	dfc00917 	ldw	ra,36(sp)
 1809944:	df000817 	ldw	fp,32(sp)
 1809948:	ddc00717 	ldw	r23,28(sp)
 180994c:	dd800617 	ldw	r22,24(sp)
 1809950:	dd400517 	ldw	r21,20(sp)
 1809954:	dd000417 	ldw	r20,16(sp)
 1809958:	dcc00317 	ldw	r19,12(sp)
 180995c:	dc800217 	ldw	r18,8(sp)
 1809960:	dc400117 	ldw	r17,4(sp)
 1809964:	dc000017 	ldw	r16,0(sp)
 1809968:	dec00a04 	addi	sp,sp,40
 180996c:	f800283a 	ret
 1809970:	017fff04 	movi	r5,-4
 1809974:	414a703a 	and	r5,r8,r5
 1809978:	814d883a 	add	r6,r16,r5
 180997c:	30c01f16 	blt	r6,r3,18099fc <_realloc_r+0x22c>
 1809980:	20800317 	ldw	r2,12(r4)
 1809984:	20c00217 	ldw	r3,8(r4)
 1809988:	a825883a 	mov	r18,r21
 180998c:	3021883a 	mov	r16,r6
 1809990:	18800315 	stw	r2,12(r3)
 1809994:	10c00215 	stw	r3,8(r2)
 1809998:	003fdb06 	br	1809908 <__ram_exceptions_end+0xff7f9618>
 180999c:	00800304 	movi	r2,12
 18099a0:	a0800015 	stw	r2,0(r20)
 18099a4:	0005883a 	mov	r2,zero
 18099a8:	003fe506 	br	1809940 <__ram_exceptions_end+0xff7f9650>
 18099ac:	98c00117 	ldw	r3,4(r19)
 18099b0:	9c4b883a 	add	r5,r19,r17
 18099b4:	11000054 	ori	r4,r2,1
 18099b8:	18c0004c 	andi	r3,r3,1
 18099bc:	1c62b03a 	or	r17,r3,r17
 18099c0:	9c400115 	stw	r17,4(r19)
 18099c4:	29000115 	stw	r4,4(r5)
 18099c8:	2885883a 	add	r2,r5,r2
 18099cc:	10c00117 	ldw	r3,4(r2)
 18099d0:	29400204 	addi	r5,r5,8
 18099d4:	a009883a 	mov	r4,r20
 18099d8:	18c00054 	ori	r3,r3,1
 18099dc:	10c00115 	stw	r3,4(r2)
 18099e0:	1804f780 	call	1804f78 <_free_r>
 18099e4:	003fd306 	br	1809934 <__ram_exceptions_end+0xff7f9644>
 18099e8:	017fff04 	movi	r5,-4
 18099ec:	414a703a 	and	r5,r8,r5
 18099f0:	89800404 	addi	r6,r17,16
 18099f4:	8151883a 	add	r8,r16,r5
 18099f8:	4180590e 	bge	r8,r6,1809b60 <_realloc_r+0x390>
 18099fc:	1080004c 	andi	r2,r2,1
 1809a00:	103f9e1e 	bne	r2,zero,180987c <__ram_exceptions_end+0xff7f958c>
 1809a04:	adbffe17 	ldw	r22,-8(r21)
 1809a08:	00bfff04 	movi	r2,-4
 1809a0c:	9dadc83a 	sub	r22,r19,r22
 1809a10:	b1800117 	ldw	r6,4(r22)
 1809a14:	3084703a 	and	r2,r6,r2
 1809a18:	20002026 	beq	r4,zero,1809a9c <_realloc_r+0x2cc>
 1809a1c:	80af883a 	add	r23,r16,r2
 1809a20:	b96f883a 	add	r23,r23,r5
 1809a24:	21c05f26 	beq	r4,r7,1809ba4 <_realloc_r+0x3d4>
 1809a28:	b8c01c16 	blt	r23,r3,1809a9c <_realloc_r+0x2cc>
 1809a2c:	20800317 	ldw	r2,12(r4)
 1809a30:	20c00217 	ldw	r3,8(r4)
 1809a34:	81bfff04 	addi	r6,r16,-4
 1809a38:	01000904 	movi	r4,36
 1809a3c:	18800315 	stw	r2,12(r3)
 1809a40:	10c00215 	stw	r3,8(r2)
 1809a44:	b0c00217 	ldw	r3,8(r22)
 1809a48:	b0800317 	ldw	r2,12(r22)
 1809a4c:	b4800204 	addi	r18,r22,8
 1809a50:	18800315 	stw	r2,12(r3)
 1809a54:	10c00215 	stw	r3,8(r2)
 1809a58:	21801b36 	bltu	r4,r6,1809ac8 <_realloc_r+0x2f8>
 1809a5c:	008004c4 	movi	r2,19
 1809a60:	1180352e 	bgeu	r2,r6,1809b38 <_realloc_r+0x368>
 1809a64:	a8800017 	ldw	r2,0(r21)
 1809a68:	b0800215 	stw	r2,8(r22)
 1809a6c:	a8800117 	ldw	r2,4(r21)
 1809a70:	b0800315 	stw	r2,12(r22)
 1809a74:	008006c4 	movi	r2,27
 1809a78:	11807f36 	bltu	r2,r6,1809c78 <_realloc_r+0x4a8>
 1809a7c:	b0800404 	addi	r2,r22,16
 1809a80:	ad400204 	addi	r21,r21,8
 1809a84:	00002d06 	br	1809b3c <_realloc_r+0x36c>
 1809a88:	adbffe17 	ldw	r22,-8(r21)
 1809a8c:	00bfff04 	movi	r2,-4
 1809a90:	9dadc83a 	sub	r22,r19,r22
 1809a94:	b1000117 	ldw	r4,4(r22)
 1809a98:	2084703a 	and	r2,r4,r2
 1809a9c:	b03f7726 	beq	r22,zero,180987c <__ram_exceptions_end+0xff7f958c>
 1809aa0:	80af883a 	add	r23,r16,r2
 1809aa4:	b8ff7516 	blt	r23,r3,180987c <__ram_exceptions_end+0xff7f958c>
 1809aa8:	b0800317 	ldw	r2,12(r22)
 1809aac:	b0c00217 	ldw	r3,8(r22)
 1809ab0:	81bfff04 	addi	r6,r16,-4
 1809ab4:	01000904 	movi	r4,36
 1809ab8:	18800315 	stw	r2,12(r3)
 1809abc:	10c00215 	stw	r3,8(r2)
 1809ac0:	b4800204 	addi	r18,r22,8
 1809ac4:	21bfe52e 	bgeu	r4,r6,1809a5c <__ram_exceptions_end+0xff7f976c>
 1809ac8:	a80b883a 	mov	r5,r21
 1809acc:	9009883a 	mov	r4,r18
 1809ad0:	18096140 	call	1809614 <memmove>
 1809ad4:	b821883a 	mov	r16,r23
 1809ad8:	b027883a 	mov	r19,r22
 1809adc:	003f8a06 	br	1809908 <__ram_exceptions_end+0xff7f9618>
 1809ae0:	300b883a 	mov	r5,r6
 1809ae4:	dfc00917 	ldw	ra,36(sp)
 1809ae8:	df000817 	ldw	fp,32(sp)
 1809aec:	ddc00717 	ldw	r23,28(sp)
 1809af0:	dd800617 	ldw	r22,24(sp)
 1809af4:	dd400517 	ldw	r21,20(sp)
 1809af8:	dd000417 	ldw	r20,16(sp)
 1809afc:	dcc00317 	ldw	r19,12(sp)
 1809b00:	dc800217 	ldw	r18,8(sp)
 1809b04:	dc400117 	ldw	r17,4(sp)
 1809b08:	dc000017 	ldw	r16,0(sp)
 1809b0c:	dec00a04 	addi	sp,sp,40
 1809b10:	18056a81 	jmpi	18056a8 <_malloc_r>
 1809b14:	a8c00017 	ldw	r3,0(r21)
 1809b18:	90c00015 	stw	r3,0(r18)
 1809b1c:	a8c00117 	ldw	r3,4(r21)
 1809b20:	90c00115 	stw	r3,4(r18)
 1809b24:	00c006c4 	movi	r3,27
 1809b28:	19804536 	bltu	r3,r6,1809c40 <_realloc_r+0x470>
 1809b2c:	90800204 	addi	r2,r18,8
 1809b30:	a8c00204 	addi	r3,r21,8
 1809b34:	003f6306 	br	18098c4 <__ram_exceptions_end+0xff7f95d4>
 1809b38:	9005883a 	mov	r2,r18
 1809b3c:	a8c00017 	ldw	r3,0(r21)
 1809b40:	b821883a 	mov	r16,r23
 1809b44:	b027883a 	mov	r19,r22
 1809b48:	10c00015 	stw	r3,0(r2)
 1809b4c:	a8c00117 	ldw	r3,4(r21)
 1809b50:	10c00115 	stw	r3,4(r2)
 1809b54:	a8c00217 	ldw	r3,8(r21)
 1809b58:	10c00215 	stw	r3,8(r2)
 1809b5c:	003f6a06 	br	1809908 <__ram_exceptions_end+0xff7f9618>
 1809b60:	9c67883a 	add	r19,r19,r17
 1809b64:	4445c83a 	sub	r2,r8,r17
 1809b68:	e4c00215 	stw	r19,8(fp)
 1809b6c:	10800054 	ori	r2,r2,1
 1809b70:	98800115 	stw	r2,4(r19)
 1809b74:	a8bfff17 	ldw	r2,-4(r21)
 1809b78:	a009883a 	mov	r4,r20
 1809b7c:	1080004c 	andi	r2,r2,1
 1809b80:	1462b03a 	or	r17,r2,r17
 1809b84:	ac7fff15 	stw	r17,-4(r21)
 1809b88:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1809b8c:	a805883a 	mov	r2,r21
 1809b90:	003f6b06 	br	1809940 <__ram_exceptions_end+0xff7f9650>
 1809b94:	a80b883a 	mov	r5,r21
 1809b98:	9009883a 	mov	r4,r18
 1809b9c:	18096140 	call	1809614 <memmove>
 1809ba0:	003f4e06 	br	18098dc <__ram_exceptions_end+0xff7f95ec>
 1809ba4:	89000404 	addi	r4,r17,16
 1809ba8:	b93fbc16 	blt	r23,r4,1809a9c <__ram_exceptions_end+0xff7f97ac>
 1809bac:	b0800317 	ldw	r2,12(r22)
 1809bb0:	b0c00217 	ldw	r3,8(r22)
 1809bb4:	81bfff04 	addi	r6,r16,-4
 1809bb8:	01000904 	movi	r4,36
 1809bbc:	18800315 	stw	r2,12(r3)
 1809bc0:	10c00215 	stw	r3,8(r2)
 1809bc4:	b4800204 	addi	r18,r22,8
 1809bc8:	21804336 	bltu	r4,r6,1809cd8 <_realloc_r+0x508>
 1809bcc:	008004c4 	movi	r2,19
 1809bd0:	11803f2e 	bgeu	r2,r6,1809cd0 <_realloc_r+0x500>
 1809bd4:	a8800017 	ldw	r2,0(r21)
 1809bd8:	b0800215 	stw	r2,8(r22)
 1809bdc:	a8800117 	ldw	r2,4(r21)
 1809be0:	b0800315 	stw	r2,12(r22)
 1809be4:	008006c4 	movi	r2,27
 1809be8:	11803f36 	bltu	r2,r6,1809ce8 <_realloc_r+0x518>
 1809bec:	b0800404 	addi	r2,r22,16
 1809bf0:	ad400204 	addi	r21,r21,8
 1809bf4:	a8c00017 	ldw	r3,0(r21)
 1809bf8:	10c00015 	stw	r3,0(r2)
 1809bfc:	a8c00117 	ldw	r3,4(r21)
 1809c00:	10c00115 	stw	r3,4(r2)
 1809c04:	a8c00217 	ldw	r3,8(r21)
 1809c08:	10c00215 	stw	r3,8(r2)
 1809c0c:	b447883a 	add	r3,r22,r17
 1809c10:	bc45c83a 	sub	r2,r23,r17
 1809c14:	e0c00215 	stw	r3,8(fp)
 1809c18:	10800054 	ori	r2,r2,1
 1809c1c:	18800115 	stw	r2,4(r3)
 1809c20:	b0800117 	ldw	r2,4(r22)
 1809c24:	a009883a 	mov	r4,r20
 1809c28:	1080004c 	andi	r2,r2,1
 1809c2c:	1462b03a 	or	r17,r2,r17
 1809c30:	b4400115 	stw	r17,4(r22)
 1809c34:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1809c38:	9005883a 	mov	r2,r18
 1809c3c:	003f4006 	br	1809940 <__ram_exceptions_end+0xff7f9650>
 1809c40:	a8c00217 	ldw	r3,8(r21)
 1809c44:	90c00215 	stw	r3,8(r18)
 1809c48:	a8c00317 	ldw	r3,12(r21)
 1809c4c:	90c00315 	stw	r3,12(r18)
 1809c50:	30801126 	beq	r6,r2,1809c98 <_realloc_r+0x4c8>
 1809c54:	90800404 	addi	r2,r18,16
 1809c58:	a8c00404 	addi	r3,r21,16
 1809c5c:	003f1906 	br	18098c4 <__ram_exceptions_end+0xff7f95d4>
 1809c60:	90ffff17 	ldw	r3,-4(r18)
 1809c64:	00bfff04 	movi	r2,-4
 1809c68:	a825883a 	mov	r18,r21
 1809c6c:	1884703a 	and	r2,r3,r2
 1809c70:	80a1883a 	add	r16,r16,r2
 1809c74:	003f2406 	br	1809908 <__ram_exceptions_end+0xff7f9618>
 1809c78:	a8800217 	ldw	r2,8(r21)
 1809c7c:	b0800415 	stw	r2,16(r22)
 1809c80:	a8800317 	ldw	r2,12(r21)
 1809c84:	b0800515 	stw	r2,20(r22)
 1809c88:	31000a26 	beq	r6,r4,1809cb4 <_realloc_r+0x4e4>
 1809c8c:	b0800604 	addi	r2,r22,24
 1809c90:	ad400404 	addi	r21,r21,16
 1809c94:	003fa906 	br	1809b3c <__ram_exceptions_end+0xff7f984c>
 1809c98:	a9000417 	ldw	r4,16(r21)
 1809c9c:	90800604 	addi	r2,r18,24
 1809ca0:	a8c00604 	addi	r3,r21,24
 1809ca4:	91000415 	stw	r4,16(r18)
 1809ca8:	a9000517 	ldw	r4,20(r21)
 1809cac:	91000515 	stw	r4,20(r18)
 1809cb0:	003f0406 	br	18098c4 <__ram_exceptions_end+0xff7f95d4>
 1809cb4:	a8c00417 	ldw	r3,16(r21)
 1809cb8:	ad400604 	addi	r21,r21,24
 1809cbc:	b0800804 	addi	r2,r22,32
 1809cc0:	b0c00615 	stw	r3,24(r22)
 1809cc4:	a8ffff17 	ldw	r3,-4(r21)
 1809cc8:	b0c00715 	stw	r3,28(r22)
 1809ccc:	003f9b06 	br	1809b3c <__ram_exceptions_end+0xff7f984c>
 1809cd0:	9005883a 	mov	r2,r18
 1809cd4:	003fc706 	br	1809bf4 <__ram_exceptions_end+0xff7f9904>
 1809cd8:	a80b883a 	mov	r5,r21
 1809cdc:	9009883a 	mov	r4,r18
 1809ce0:	18096140 	call	1809614 <memmove>
 1809ce4:	003fc906 	br	1809c0c <__ram_exceptions_end+0xff7f991c>
 1809ce8:	a8800217 	ldw	r2,8(r21)
 1809cec:	b0800415 	stw	r2,16(r22)
 1809cf0:	a8800317 	ldw	r2,12(r21)
 1809cf4:	b0800515 	stw	r2,20(r22)
 1809cf8:	31000726 	beq	r6,r4,1809d18 <_realloc_r+0x548>
 1809cfc:	b0800604 	addi	r2,r22,24
 1809d00:	ad400404 	addi	r21,r21,16
 1809d04:	003fbb06 	br	1809bf4 <__ram_exceptions_end+0xff7f9904>
 1809d08:	a009883a 	mov	r4,r20
 1809d0c:	180d4b80 	call	180d4b8 <__malloc_unlock>
 1809d10:	0005883a 	mov	r2,zero
 1809d14:	003f0a06 	br	1809940 <__ram_exceptions_end+0xff7f9650>
 1809d18:	a8c00417 	ldw	r3,16(r21)
 1809d1c:	ad400604 	addi	r21,r21,24
 1809d20:	b0800804 	addi	r2,r22,32
 1809d24:	b0c00615 	stw	r3,24(r22)
 1809d28:	a8ffff17 	ldw	r3,-4(r21)
 1809d2c:	b0c00715 	stw	r3,28(r22)
 1809d30:	003fb006 	br	1809bf4 <__ram_exceptions_end+0xff7f9904>

01809d34 <__swbuf_r>:
 1809d34:	defffb04 	addi	sp,sp,-20
 1809d38:	dcc00315 	stw	r19,12(sp)
 1809d3c:	dc800215 	stw	r18,8(sp)
 1809d40:	dc000015 	stw	r16,0(sp)
 1809d44:	dfc00415 	stw	ra,16(sp)
 1809d48:	dc400115 	stw	r17,4(sp)
 1809d4c:	2025883a 	mov	r18,r4
 1809d50:	2827883a 	mov	r19,r5
 1809d54:	3021883a 	mov	r16,r6
 1809d58:	20000226 	beq	r4,zero,1809d64 <__swbuf_r+0x30>
 1809d5c:	20800e17 	ldw	r2,56(r4)
 1809d60:	10004226 	beq	r2,zero,1809e6c <__swbuf_r+0x138>
 1809d64:	80800617 	ldw	r2,24(r16)
 1809d68:	8100030b 	ldhu	r4,12(r16)
 1809d6c:	80800215 	stw	r2,8(r16)
 1809d70:	2080020c 	andi	r2,r4,8
 1809d74:	10003626 	beq	r2,zero,1809e50 <__swbuf_r+0x11c>
 1809d78:	80c00417 	ldw	r3,16(r16)
 1809d7c:	18003426 	beq	r3,zero,1809e50 <__swbuf_r+0x11c>
 1809d80:	2088000c 	andi	r2,r4,8192
 1809d84:	9c403fcc 	andi	r17,r19,255
 1809d88:	10001a26 	beq	r2,zero,1809df4 <__swbuf_r+0xc0>
 1809d8c:	80800017 	ldw	r2,0(r16)
 1809d90:	81000517 	ldw	r4,20(r16)
 1809d94:	10c7c83a 	sub	r3,r2,r3
 1809d98:	1900200e 	bge	r3,r4,1809e1c <__swbuf_r+0xe8>
 1809d9c:	18c00044 	addi	r3,r3,1
 1809da0:	81000217 	ldw	r4,8(r16)
 1809da4:	11400044 	addi	r5,r2,1
 1809da8:	81400015 	stw	r5,0(r16)
 1809dac:	213fffc4 	addi	r4,r4,-1
 1809db0:	81000215 	stw	r4,8(r16)
 1809db4:	14c00005 	stb	r19,0(r2)
 1809db8:	80800517 	ldw	r2,20(r16)
 1809dbc:	10c01e26 	beq	r2,r3,1809e38 <__swbuf_r+0x104>
 1809dc0:	8080030b 	ldhu	r2,12(r16)
 1809dc4:	1080004c 	andi	r2,r2,1
 1809dc8:	10000226 	beq	r2,zero,1809dd4 <__swbuf_r+0xa0>
 1809dcc:	00800284 	movi	r2,10
 1809dd0:	88801926 	beq	r17,r2,1809e38 <__swbuf_r+0x104>
 1809dd4:	8805883a 	mov	r2,r17
 1809dd8:	dfc00417 	ldw	ra,16(sp)
 1809ddc:	dcc00317 	ldw	r19,12(sp)
 1809de0:	dc800217 	ldw	r18,8(sp)
 1809de4:	dc400117 	ldw	r17,4(sp)
 1809de8:	dc000017 	ldw	r16,0(sp)
 1809dec:	dec00504 	addi	sp,sp,20
 1809df0:	f800283a 	ret
 1809df4:	81401917 	ldw	r5,100(r16)
 1809df8:	00b7ffc4 	movi	r2,-8193
 1809dfc:	21080014 	ori	r4,r4,8192
 1809e00:	2884703a 	and	r2,r5,r2
 1809e04:	80801915 	stw	r2,100(r16)
 1809e08:	80800017 	ldw	r2,0(r16)
 1809e0c:	8100030d 	sth	r4,12(r16)
 1809e10:	81000517 	ldw	r4,20(r16)
 1809e14:	10c7c83a 	sub	r3,r2,r3
 1809e18:	193fe016 	blt	r3,r4,1809d9c <__ram_exceptions_end+0xff7f9aac>
 1809e1c:	800b883a 	mov	r5,r16
 1809e20:	9009883a 	mov	r4,r18
 1809e24:	1804a280 	call	1804a28 <_fflush_r>
 1809e28:	1000071e 	bne	r2,zero,1809e48 <__swbuf_r+0x114>
 1809e2c:	80800017 	ldw	r2,0(r16)
 1809e30:	00c00044 	movi	r3,1
 1809e34:	003fda06 	br	1809da0 <__ram_exceptions_end+0xff7f9ab0>
 1809e38:	800b883a 	mov	r5,r16
 1809e3c:	9009883a 	mov	r4,r18
 1809e40:	1804a280 	call	1804a28 <_fflush_r>
 1809e44:	103fe326 	beq	r2,zero,1809dd4 <__ram_exceptions_end+0xff7f9ae4>
 1809e48:	00bfffc4 	movi	r2,-1
 1809e4c:	003fe206 	br	1809dd8 <__ram_exceptions_end+0xff7f9ae8>
 1809e50:	800b883a 	mov	r5,r16
 1809e54:	9009883a 	mov	r4,r18
 1809e58:	1802e300 	call	1802e30 <__swsetup_r>
 1809e5c:	103ffa1e 	bne	r2,zero,1809e48 <__ram_exceptions_end+0xff7f9b58>
 1809e60:	8100030b 	ldhu	r4,12(r16)
 1809e64:	80c00417 	ldw	r3,16(r16)
 1809e68:	003fc506 	br	1809d80 <__ram_exceptions_end+0xff7f9a90>
 1809e6c:	1804e040 	call	1804e04 <__sinit>
 1809e70:	003fbc06 	br	1809d64 <__ram_exceptions_end+0xff7f9a74>

01809e74 <__swbuf>:
 1809e74:	00806134 	movhi	r2,388
 1809e78:	10946904 	addi	r2,r2,20900
 1809e7c:	280d883a 	mov	r6,r5
 1809e80:	200b883a 	mov	r5,r4
 1809e84:	11000017 	ldw	r4,0(r2)
 1809e88:	1809d341 	jmpi	1809d34 <__swbuf_r>

01809e8c <_wcrtomb_r>:
 1809e8c:	defff604 	addi	sp,sp,-40
 1809e90:	00806134 	movhi	r2,388
 1809e94:	dc800815 	stw	r18,32(sp)
 1809e98:	dc400715 	stw	r17,28(sp)
 1809e9c:	dc000615 	stw	r16,24(sp)
 1809ea0:	10946d04 	addi	r2,r2,20916
 1809ea4:	dfc00915 	stw	ra,36(sp)
 1809ea8:	2021883a 	mov	r16,r4
 1809eac:	3823883a 	mov	r17,r7
 1809eb0:	14800017 	ldw	r18,0(r2)
 1809eb4:	28001426 	beq	r5,zero,1809f08 <_wcrtomb_r+0x7c>
 1809eb8:	d9400415 	stw	r5,16(sp)
 1809ebc:	d9800515 	stw	r6,20(sp)
 1809ec0:	180548c0 	call	180548c <__locale_charset>
 1809ec4:	d9800517 	ldw	r6,20(sp)
 1809ec8:	d9400417 	ldw	r5,16(sp)
 1809ecc:	100f883a 	mov	r7,r2
 1809ed0:	dc400015 	stw	r17,0(sp)
 1809ed4:	8009883a 	mov	r4,r16
 1809ed8:	903ee83a 	callr	r18
 1809edc:	00ffffc4 	movi	r3,-1
 1809ee0:	10c0031e 	bne	r2,r3,1809ef0 <_wcrtomb_r+0x64>
 1809ee4:	88000015 	stw	zero,0(r17)
 1809ee8:	00c02284 	movi	r3,138
 1809eec:	80c00015 	stw	r3,0(r16)
 1809ef0:	dfc00917 	ldw	ra,36(sp)
 1809ef4:	dc800817 	ldw	r18,32(sp)
 1809ef8:	dc400717 	ldw	r17,28(sp)
 1809efc:	dc000617 	ldw	r16,24(sp)
 1809f00:	dec00a04 	addi	sp,sp,40
 1809f04:	f800283a 	ret
 1809f08:	180548c0 	call	180548c <__locale_charset>
 1809f0c:	100f883a 	mov	r7,r2
 1809f10:	dc400015 	stw	r17,0(sp)
 1809f14:	000d883a 	mov	r6,zero
 1809f18:	d9400104 	addi	r5,sp,4
 1809f1c:	8009883a 	mov	r4,r16
 1809f20:	903ee83a 	callr	r18
 1809f24:	003fed06 	br	1809edc <__ram_exceptions_end+0xff7f9bec>

01809f28 <wcrtomb>:
 1809f28:	defff604 	addi	sp,sp,-40
 1809f2c:	00806134 	movhi	r2,388
 1809f30:	dc800615 	stw	r18,24(sp)
 1809f34:	dc400515 	stw	r17,20(sp)
 1809f38:	10946904 	addi	r2,r2,20900
 1809f3c:	dfc00915 	stw	ra,36(sp)
 1809f40:	dd000815 	stw	r20,32(sp)
 1809f44:	dcc00715 	stw	r19,28(sp)
 1809f48:	dc000415 	stw	r16,16(sp)
 1809f4c:	3025883a 	mov	r18,r6
 1809f50:	14400017 	ldw	r17,0(r2)
 1809f54:	20001926 	beq	r4,zero,1809fbc <wcrtomb+0x94>
 1809f58:	00806134 	movhi	r2,388
 1809f5c:	10946d04 	addi	r2,r2,20916
 1809f60:	15000017 	ldw	r20,0(r2)
 1809f64:	2021883a 	mov	r16,r4
 1809f68:	2827883a 	mov	r19,r5
 1809f6c:	180548c0 	call	180548c <__locale_charset>
 1809f70:	100f883a 	mov	r7,r2
 1809f74:	dc800015 	stw	r18,0(sp)
 1809f78:	980d883a 	mov	r6,r19
 1809f7c:	800b883a 	mov	r5,r16
 1809f80:	8809883a 	mov	r4,r17
 1809f84:	a03ee83a 	callr	r20
 1809f88:	00ffffc4 	movi	r3,-1
 1809f8c:	10c0031e 	bne	r2,r3,1809f9c <wcrtomb+0x74>
 1809f90:	90000015 	stw	zero,0(r18)
 1809f94:	00c02284 	movi	r3,138
 1809f98:	88c00015 	stw	r3,0(r17)
 1809f9c:	dfc00917 	ldw	ra,36(sp)
 1809fa0:	dd000817 	ldw	r20,32(sp)
 1809fa4:	dcc00717 	ldw	r19,28(sp)
 1809fa8:	dc800617 	ldw	r18,24(sp)
 1809fac:	dc400517 	ldw	r17,20(sp)
 1809fb0:	dc000417 	ldw	r16,16(sp)
 1809fb4:	dec00a04 	addi	sp,sp,40
 1809fb8:	f800283a 	ret
 1809fbc:	00806134 	movhi	r2,388
 1809fc0:	10946d04 	addi	r2,r2,20916
 1809fc4:	14000017 	ldw	r16,0(r2)
 1809fc8:	180548c0 	call	180548c <__locale_charset>
 1809fcc:	100f883a 	mov	r7,r2
 1809fd0:	dc800015 	stw	r18,0(sp)
 1809fd4:	000d883a 	mov	r6,zero
 1809fd8:	d9400104 	addi	r5,sp,4
 1809fdc:	8809883a 	mov	r4,r17
 1809fe0:	803ee83a 	callr	r16
 1809fe4:	003fe806 	br	1809f88 <__ram_exceptions_end+0xff7f9c98>

01809fe8 <__ascii_wctomb>:
 1809fe8:	28000526 	beq	r5,zero,180a000 <__ascii_wctomb+0x18>
 1809fec:	00803fc4 	movi	r2,255
 1809ff0:	11800536 	bltu	r2,r6,180a008 <__ascii_wctomb+0x20>
 1809ff4:	29800005 	stb	r6,0(r5)
 1809ff8:	00800044 	movi	r2,1
 1809ffc:	f800283a 	ret
 180a000:	0005883a 	mov	r2,zero
 180a004:	f800283a 	ret
 180a008:	00802284 	movi	r2,138
 180a00c:	20800015 	stw	r2,0(r4)
 180a010:	00bfffc4 	movi	r2,-1
 180a014:	f800283a 	ret

0180a018 <_wctomb_r>:
 180a018:	00806134 	movhi	r2,388
 180a01c:	defff904 	addi	sp,sp,-28
 180a020:	10946d04 	addi	r2,r2,20916
 180a024:	dfc00615 	stw	ra,24(sp)
 180a028:	dc400515 	stw	r17,20(sp)
 180a02c:	dc000415 	stw	r16,16(sp)
 180a030:	3823883a 	mov	r17,r7
 180a034:	14000017 	ldw	r16,0(r2)
 180a038:	d9000115 	stw	r4,4(sp)
 180a03c:	d9400215 	stw	r5,8(sp)
 180a040:	d9800315 	stw	r6,12(sp)
 180a044:	180548c0 	call	180548c <__locale_charset>
 180a048:	d9800317 	ldw	r6,12(sp)
 180a04c:	d9400217 	ldw	r5,8(sp)
 180a050:	d9000117 	ldw	r4,4(sp)
 180a054:	100f883a 	mov	r7,r2
 180a058:	dc400015 	stw	r17,0(sp)
 180a05c:	803ee83a 	callr	r16
 180a060:	dfc00617 	ldw	ra,24(sp)
 180a064:	dc400517 	ldw	r17,20(sp)
 180a068:	dc000417 	ldw	r16,16(sp)
 180a06c:	dec00704 	addi	sp,sp,28
 180a070:	f800283a 	ret

0180a074 <__udivdi3>:
 180a074:	defff504 	addi	sp,sp,-44
 180a078:	dcc00415 	stw	r19,16(sp)
 180a07c:	dc000115 	stw	r16,4(sp)
 180a080:	dfc00a15 	stw	ra,40(sp)
 180a084:	df000915 	stw	fp,36(sp)
 180a088:	ddc00815 	stw	r23,32(sp)
 180a08c:	dd800715 	stw	r22,28(sp)
 180a090:	dd400615 	stw	r21,24(sp)
 180a094:	dd000515 	stw	r20,20(sp)
 180a098:	dc800315 	stw	r18,12(sp)
 180a09c:	dc400215 	stw	r17,8(sp)
 180a0a0:	2027883a 	mov	r19,r4
 180a0a4:	2821883a 	mov	r16,r5
 180a0a8:	3800411e 	bne	r7,zero,180a1b0 <__udivdi3+0x13c>
 180a0ac:	3023883a 	mov	r17,r6
 180a0b0:	2025883a 	mov	r18,r4
 180a0b4:	2980522e 	bgeu	r5,r6,180a200 <__udivdi3+0x18c>
 180a0b8:	00bfffd4 	movui	r2,65535
 180a0bc:	282d883a 	mov	r22,r5
 180a0c0:	1180a836 	bltu	r2,r6,180a364 <__udivdi3+0x2f0>
 180a0c4:	00803fc4 	movi	r2,255
 180a0c8:	1185803a 	cmpltu	r2,r2,r6
 180a0cc:	100490fa 	slli	r2,r2,3
 180a0d0:	3086d83a 	srl	r3,r6,r2
 180a0d4:	01006134 	movhi	r4,388
 180a0d8:	21028304 	addi	r4,r4,2572
 180a0dc:	20c7883a 	add	r3,r4,r3
 180a0e0:	18c00003 	ldbu	r3,0(r3)
 180a0e4:	1885883a 	add	r2,r3,r2
 180a0e8:	00c00804 	movi	r3,32
 180a0ec:	1887c83a 	sub	r3,r3,r2
 180a0f0:	18000526 	beq	r3,zero,180a108 <__udivdi3+0x94>
 180a0f4:	80e0983a 	sll	r16,r16,r3
 180a0f8:	9884d83a 	srl	r2,r19,r2
 180a0fc:	30e2983a 	sll	r17,r6,r3
 180a100:	98e4983a 	sll	r18,r19,r3
 180a104:	142cb03a 	or	r22,r2,r16
 180a108:	882ad43a 	srli	r21,r17,16
 180a10c:	b009883a 	mov	r4,r22
 180a110:	8d3fffcc 	andi	r20,r17,65535
 180a114:	a80b883a 	mov	r5,r21
 180a118:	180ac800 	call	180ac80 <__umodsi3>
 180a11c:	b009883a 	mov	r4,r22
 180a120:	a80b883a 	mov	r5,r21
 180a124:	1027883a 	mov	r19,r2
 180a128:	180ac1c0 	call	180ac1c <__udivsi3>
 180a12c:	102d883a 	mov	r22,r2
 180a130:	9826943a 	slli	r19,r19,16
 180a134:	9004d43a 	srli	r2,r18,16
 180a138:	a5a1383a 	mul	r16,r20,r22
 180a13c:	14c4b03a 	or	r2,r2,r19
 180a140:	1400052e 	bgeu	r2,r16,180a158 <__udivdi3+0xe4>
 180a144:	1445883a 	add	r2,r2,r17
 180a148:	b0ffffc4 	addi	r3,r22,-1
 180a14c:	14400136 	bltu	r2,r17,180a154 <__udivdi3+0xe0>
 180a150:	14012336 	bltu	r2,r16,180a5e0 <__udivdi3+0x56c>
 180a154:	182d883a 	mov	r22,r3
 180a158:	1421c83a 	sub	r16,r2,r16
 180a15c:	a80b883a 	mov	r5,r21
 180a160:	8009883a 	mov	r4,r16
 180a164:	180ac800 	call	180ac80 <__umodsi3>
 180a168:	1027883a 	mov	r19,r2
 180a16c:	a80b883a 	mov	r5,r21
 180a170:	8009883a 	mov	r4,r16
 180a174:	180ac1c0 	call	180ac1c <__udivsi3>
 180a178:	9826943a 	slli	r19,r19,16
 180a17c:	a0a9383a 	mul	r20,r20,r2
 180a180:	94bfffcc 	andi	r18,r18,65535
 180a184:	94e4b03a 	or	r18,r18,r19
 180a188:	9500052e 	bgeu	r18,r20,180a1a0 <__udivdi3+0x12c>
 180a18c:	8ca5883a 	add	r18,r17,r18
 180a190:	10ffffc4 	addi	r3,r2,-1
 180a194:	9440f136 	bltu	r18,r17,180a55c <__udivdi3+0x4e8>
 180a198:	9500f02e 	bgeu	r18,r20,180a55c <__udivdi3+0x4e8>
 180a19c:	10bfff84 	addi	r2,r2,-2
 180a1a0:	b00c943a 	slli	r6,r22,16
 180a1a4:	0007883a 	mov	r3,zero
 180a1a8:	3084b03a 	or	r2,r6,r2
 180a1ac:	00005906 	br	180a314 <__udivdi3+0x2a0>
 180a1b0:	29c05636 	bltu	r5,r7,180a30c <__udivdi3+0x298>
 180a1b4:	00bfffd4 	movui	r2,65535
 180a1b8:	11c0622e 	bgeu	r2,r7,180a344 <__udivdi3+0x2d0>
 180a1bc:	00804034 	movhi	r2,256
 180a1c0:	10bfffc4 	addi	r2,r2,-1
 180a1c4:	11c0ee36 	bltu	r2,r7,180a580 <__udivdi3+0x50c>
 180a1c8:	00800404 	movi	r2,16
 180a1cc:	3886d83a 	srl	r3,r7,r2
 180a1d0:	01006134 	movhi	r4,388
 180a1d4:	21028304 	addi	r4,r4,2572
 180a1d8:	20c7883a 	add	r3,r4,r3
 180a1dc:	18c00003 	ldbu	r3,0(r3)
 180a1e0:	05400804 	movi	r21,32
 180a1e4:	1885883a 	add	r2,r3,r2
 180a1e8:	a8abc83a 	sub	r21,r21,r2
 180a1ec:	a800621e 	bne	r21,zero,180a378 <__udivdi3+0x304>
 180a1f0:	3c00e936 	bltu	r7,r16,180a598 <__udivdi3+0x524>
 180a1f4:	9985403a 	cmpgeu	r2,r19,r6
 180a1f8:	0007883a 	mov	r3,zero
 180a1fc:	00004506 	br	180a314 <__udivdi3+0x2a0>
 180a200:	3000041e 	bne	r6,zero,180a214 <__udivdi3+0x1a0>
 180a204:	000b883a 	mov	r5,zero
 180a208:	01000044 	movi	r4,1
 180a20c:	180ac1c0 	call	180ac1c <__udivsi3>
 180a210:	1023883a 	mov	r17,r2
 180a214:	00bfffd4 	movui	r2,65535
 180a218:	14404e2e 	bgeu	r2,r17,180a354 <__udivdi3+0x2e0>
 180a21c:	00804034 	movhi	r2,256
 180a220:	10bfffc4 	addi	r2,r2,-1
 180a224:	1440d836 	bltu	r2,r17,180a588 <__udivdi3+0x514>
 180a228:	00800404 	movi	r2,16
 180a22c:	8886d83a 	srl	r3,r17,r2
 180a230:	01006134 	movhi	r4,388
 180a234:	21028304 	addi	r4,r4,2572
 180a238:	20c7883a 	add	r3,r4,r3
 180a23c:	18c00003 	ldbu	r3,0(r3)
 180a240:	1885883a 	add	r2,r3,r2
 180a244:	00c00804 	movi	r3,32
 180a248:	1887c83a 	sub	r3,r3,r2
 180a24c:	18008f1e 	bne	r3,zero,180a48c <__udivdi3+0x418>
 180a250:	882ad43a 	srli	r21,r17,16
 180a254:	8461c83a 	sub	r16,r16,r17
 180a258:	8d3fffcc 	andi	r20,r17,65535
 180a25c:	00c00044 	movi	r3,1
 180a260:	8009883a 	mov	r4,r16
 180a264:	a80b883a 	mov	r5,r21
 180a268:	d8c00015 	stw	r3,0(sp)
 180a26c:	180ac800 	call	180ac80 <__umodsi3>
 180a270:	8009883a 	mov	r4,r16
 180a274:	a80b883a 	mov	r5,r21
 180a278:	1027883a 	mov	r19,r2
 180a27c:	180ac1c0 	call	180ac1c <__udivsi3>
 180a280:	9826943a 	slli	r19,r19,16
 180a284:	9008d43a 	srli	r4,r18,16
 180a288:	1521383a 	mul	r16,r2,r20
 180a28c:	102d883a 	mov	r22,r2
 180a290:	24c8b03a 	or	r4,r4,r19
 180a294:	d8c00017 	ldw	r3,0(sp)
 180a298:	2400052e 	bgeu	r4,r16,180a2b0 <__udivdi3+0x23c>
 180a29c:	2449883a 	add	r4,r4,r17
 180a2a0:	b0bfffc4 	addi	r2,r22,-1
 180a2a4:	24400136 	bltu	r4,r17,180a2ac <__udivdi3+0x238>
 180a2a8:	2400ca36 	bltu	r4,r16,180a5d4 <__udivdi3+0x560>
 180a2ac:	102d883a 	mov	r22,r2
 180a2b0:	2421c83a 	sub	r16,r4,r16
 180a2b4:	a80b883a 	mov	r5,r21
 180a2b8:	8009883a 	mov	r4,r16
 180a2bc:	d8c00015 	stw	r3,0(sp)
 180a2c0:	180ac800 	call	180ac80 <__umodsi3>
 180a2c4:	1027883a 	mov	r19,r2
 180a2c8:	a80b883a 	mov	r5,r21
 180a2cc:	8009883a 	mov	r4,r16
 180a2d0:	180ac1c0 	call	180ac1c <__udivsi3>
 180a2d4:	9826943a 	slli	r19,r19,16
 180a2d8:	1529383a 	mul	r20,r2,r20
 180a2dc:	94bfffcc 	andi	r18,r18,65535
 180a2e0:	94e4b03a 	or	r18,r18,r19
 180a2e4:	d8c00017 	ldw	r3,0(sp)
 180a2e8:	9500052e 	bgeu	r18,r20,180a300 <__udivdi3+0x28c>
 180a2ec:	8ca5883a 	add	r18,r17,r18
 180a2f0:	113fffc4 	addi	r4,r2,-1
 180a2f4:	94409736 	bltu	r18,r17,180a554 <__udivdi3+0x4e0>
 180a2f8:	9500962e 	bgeu	r18,r20,180a554 <__udivdi3+0x4e0>
 180a2fc:	10bfff84 	addi	r2,r2,-2
 180a300:	b00c943a 	slli	r6,r22,16
 180a304:	3084b03a 	or	r2,r6,r2
 180a308:	00000206 	br	180a314 <__udivdi3+0x2a0>
 180a30c:	0007883a 	mov	r3,zero
 180a310:	0005883a 	mov	r2,zero
 180a314:	dfc00a17 	ldw	ra,40(sp)
 180a318:	df000917 	ldw	fp,36(sp)
 180a31c:	ddc00817 	ldw	r23,32(sp)
 180a320:	dd800717 	ldw	r22,28(sp)
 180a324:	dd400617 	ldw	r21,24(sp)
 180a328:	dd000517 	ldw	r20,20(sp)
 180a32c:	dcc00417 	ldw	r19,16(sp)
 180a330:	dc800317 	ldw	r18,12(sp)
 180a334:	dc400217 	ldw	r17,8(sp)
 180a338:	dc000117 	ldw	r16,4(sp)
 180a33c:	dec00b04 	addi	sp,sp,44
 180a340:	f800283a 	ret
 180a344:	00803fc4 	movi	r2,255
 180a348:	11c5803a 	cmpltu	r2,r2,r7
 180a34c:	100490fa 	slli	r2,r2,3
 180a350:	003f9e06 	br	180a1cc <__ram_exceptions_end+0xff7f9edc>
 180a354:	00803fc4 	movi	r2,255
 180a358:	1445803a 	cmpltu	r2,r2,r17
 180a35c:	100490fa 	slli	r2,r2,3
 180a360:	003fb206 	br	180a22c <__ram_exceptions_end+0xff7f9f3c>
 180a364:	00804034 	movhi	r2,256
 180a368:	10bfffc4 	addi	r2,r2,-1
 180a36c:	11808836 	bltu	r2,r6,180a590 <__udivdi3+0x51c>
 180a370:	00800404 	movi	r2,16
 180a374:	003f5606 	br	180a0d0 <__ram_exceptions_end+0xff7f9de0>
 180a378:	30aed83a 	srl	r23,r6,r2
 180a37c:	3d4e983a 	sll	r7,r7,r21
 180a380:	80acd83a 	srl	r22,r16,r2
 180a384:	9884d83a 	srl	r2,r19,r2
 180a388:	3deeb03a 	or	r23,r7,r23
 180a38c:	b824d43a 	srli	r18,r23,16
 180a390:	8560983a 	sll	r16,r16,r21
 180a394:	b009883a 	mov	r4,r22
 180a398:	900b883a 	mov	r5,r18
 180a39c:	3568983a 	sll	r20,r6,r21
 180a3a0:	1420b03a 	or	r16,r2,r16
 180a3a4:	180ac800 	call	180ac80 <__umodsi3>
 180a3a8:	b009883a 	mov	r4,r22
 180a3ac:	900b883a 	mov	r5,r18
 180a3b0:	1023883a 	mov	r17,r2
 180a3b4:	180ac1c0 	call	180ac1c <__udivsi3>
 180a3b8:	8808943a 	slli	r4,r17,16
 180a3bc:	bf3fffcc 	andi	fp,r23,65535
 180a3c0:	8006d43a 	srli	r3,r16,16
 180a3c4:	e0a3383a 	mul	r17,fp,r2
 180a3c8:	100d883a 	mov	r6,r2
 180a3cc:	1906b03a 	or	r3,r3,r4
 180a3d0:	1c40042e 	bgeu	r3,r17,180a3e4 <__udivdi3+0x370>
 180a3d4:	1dc7883a 	add	r3,r3,r23
 180a3d8:	10bfffc4 	addi	r2,r2,-1
 180a3dc:	1dc0752e 	bgeu	r3,r23,180a5b4 <__udivdi3+0x540>
 180a3e0:	100d883a 	mov	r6,r2
 180a3e4:	1c63c83a 	sub	r17,r3,r17
 180a3e8:	900b883a 	mov	r5,r18
 180a3ec:	8809883a 	mov	r4,r17
 180a3f0:	d9800015 	stw	r6,0(sp)
 180a3f4:	180ac800 	call	180ac80 <__umodsi3>
 180a3f8:	102d883a 	mov	r22,r2
 180a3fc:	8809883a 	mov	r4,r17
 180a400:	900b883a 	mov	r5,r18
 180a404:	180ac1c0 	call	180ac1c <__udivsi3>
 180a408:	b02c943a 	slli	r22,r22,16
 180a40c:	e089383a 	mul	r4,fp,r2
 180a410:	843fffcc 	andi	r16,r16,65535
 180a414:	85a0b03a 	or	r16,r16,r22
 180a418:	d9800017 	ldw	r6,0(sp)
 180a41c:	8100042e 	bgeu	r16,r4,180a430 <__udivdi3+0x3bc>
 180a420:	85e1883a 	add	r16,r16,r23
 180a424:	10ffffc4 	addi	r3,r2,-1
 180a428:	85c05e2e 	bgeu	r16,r23,180a5a4 <__udivdi3+0x530>
 180a42c:	1805883a 	mov	r2,r3
 180a430:	300c943a 	slli	r6,r6,16
 180a434:	a17fffcc 	andi	r5,r20,65535
 180a438:	a028d43a 	srli	r20,r20,16
 180a43c:	3084b03a 	or	r2,r6,r2
 180a440:	10ffffcc 	andi	r3,r2,65535
 180a444:	100cd43a 	srli	r6,r2,16
 180a448:	194f383a 	mul	r7,r3,r5
 180a44c:	1d07383a 	mul	r3,r3,r20
 180a450:	314b383a 	mul	r5,r6,r5
 180a454:	3810d43a 	srli	r8,r7,16
 180a458:	8121c83a 	sub	r16,r16,r4
 180a45c:	1947883a 	add	r3,r3,r5
 180a460:	40c7883a 	add	r3,r8,r3
 180a464:	350d383a 	mul	r6,r6,r20
 180a468:	1940022e 	bgeu	r3,r5,180a474 <__udivdi3+0x400>
 180a46c:	01000074 	movhi	r4,1
 180a470:	310d883a 	add	r6,r6,r4
 180a474:	1828d43a 	srli	r20,r3,16
 180a478:	a18d883a 	add	r6,r20,r6
 180a47c:	81803e36 	bltu	r16,r6,180a578 <__udivdi3+0x504>
 180a480:	81803826 	beq	r16,r6,180a564 <__udivdi3+0x4f0>
 180a484:	0007883a 	mov	r3,zero
 180a488:	003fa206 	br	180a314 <__ram_exceptions_end+0xff7fa024>
 180a48c:	88e2983a 	sll	r17,r17,r3
 180a490:	80a8d83a 	srl	r20,r16,r2
 180a494:	80e0983a 	sll	r16,r16,r3
 180a498:	882ad43a 	srli	r21,r17,16
 180a49c:	9884d83a 	srl	r2,r19,r2
 180a4a0:	a009883a 	mov	r4,r20
 180a4a4:	a80b883a 	mov	r5,r21
 180a4a8:	142eb03a 	or	r23,r2,r16
 180a4ac:	98e4983a 	sll	r18,r19,r3
 180a4b0:	180ac800 	call	180ac80 <__umodsi3>
 180a4b4:	a009883a 	mov	r4,r20
 180a4b8:	a80b883a 	mov	r5,r21
 180a4bc:	1021883a 	mov	r16,r2
 180a4c0:	180ac1c0 	call	180ac1c <__udivsi3>
 180a4c4:	1039883a 	mov	fp,r2
 180a4c8:	8d3fffcc 	andi	r20,r17,65535
 180a4cc:	8020943a 	slli	r16,r16,16
 180a4d0:	b804d43a 	srli	r2,r23,16
 180a4d4:	a72d383a 	mul	r22,r20,fp
 180a4d8:	1404b03a 	or	r2,r2,r16
 180a4dc:	1580062e 	bgeu	r2,r22,180a4f8 <__udivdi3+0x484>
 180a4e0:	1445883a 	add	r2,r2,r17
 180a4e4:	e0ffffc4 	addi	r3,fp,-1
 180a4e8:	14403836 	bltu	r2,r17,180a5cc <__udivdi3+0x558>
 180a4ec:	1580372e 	bgeu	r2,r22,180a5cc <__udivdi3+0x558>
 180a4f0:	e73fff84 	addi	fp,fp,-2
 180a4f4:	1445883a 	add	r2,r2,r17
 180a4f8:	15adc83a 	sub	r22,r2,r22
 180a4fc:	a80b883a 	mov	r5,r21
 180a500:	b009883a 	mov	r4,r22
 180a504:	180ac800 	call	180ac80 <__umodsi3>
 180a508:	1027883a 	mov	r19,r2
 180a50c:	b009883a 	mov	r4,r22
 180a510:	a80b883a 	mov	r5,r21
 180a514:	180ac1c0 	call	180ac1c <__udivsi3>
 180a518:	9826943a 	slli	r19,r19,16
 180a51c:	a0a1383a 	mul	r16,r20,r2
 180a520:	b93fffcc 	andi	r4,r23,65535
 180a524:	24c8b03a 	or	r4,r4,r19
 180a528:	2400062e 	bgeu	r4,r16,180a544 <__udivdi3+0x4d0>
 180a52c:	2449883a 	add	r4,r4,r17
 180a530:	10ffffc4 	addi	r3,r2,-1
 180a534:	24402336 	bltu	r4,r17,180a5c4 <__udivdi3+0x550>
 180a538:	2400222e 	bgeu	r4,r16,180a5c4 <__udivdi3+0x550>
 180a53c:	10bfff84 	addi	r2,r2,-2
 180a540:	2449883a 	add	r4,r4,r17
 180a544:	e038943a 	slli	fp,fp,16
 180a548:	2421c83a 	sub	r16,r4,r16
 180a54c:	e086b03a 	or	r3,fp,r2
 180a550:	003f4306 	br	180a260 <__ram_exceptions_end+0xff7f9f70>
 180a554:	2005883a 	mov	r2,r4
 180a558:	003f6906 	br	180a300 <__ram_exceptions_end+0xff7fa010>
 180a55c:	1805883a 	mov	r2,r3
 180a560:	003f0f06 	br	180a1a0 <__ram_exceptions_end+0xff7f9eb0>
 180a564:	1806943a 	slli	r3,r3,16
 180a568:	9d66983a 	sll	r19,r19,r21
 180a56c:	39ffffcc 	andi	r7,r7,65535
 180a570:	19c7883a 	add	r3,r3,r7
 180a574:	98ffc32e 	bgeu	r19,r3,180a484 <__ram_exceptions_end+0xff7fa194>
 180a578:	10bfffc4 	addi	r2,r2,-1
 180a57c:	003fc106 	br	180a484 <__ram_exceptions_end+0xff7fa194>
 180a580:	00800604 	movi	r2,24
 180a584:	003f1106 	br	180a1cc <__ram_exceptions_end+0xff7f9edc>
 180a588:	00800604 	movi	r2,24
 180a58c:	003f2706 	br	180a22c <__ram_exceptions_end+0xff7f9f3c>
 180a590:	00800604 	movi	r2,24
 180a594:	003ece06 	br	180a0d0 <__ram_exceptions_end+0xff7f9de0>
 180a598:	0007883a 	mov	r3,zero
 180a59c:	00800044 	movi	r2,1
 180a5a0:	003f5c06 	br	180a314 <__ram_exceptions_end+0xff7fa024>
 180a5a4:	813fa12e 	bgeu	r16,r4,180a42c <__ram_exceptions_end+0xff7fa13c>
 180a5a8:	10bfff84 	addi	r2,r2,-2
 180a5ac:	85e1883a 	add	r16,r16,r23
 180a5b0:	003f9f06 	br	180a430 <__ram_exceptions_end+0xff7fa140>
 180a5b4:	1c7f8a2e 	bgeu	r3,r17,180a3e0 <__ram_exceptions_end+0xff7fa0f0>
 180a5b8:	31bfff84 	addi	r6,r6,-2
 180a5bc:	1dc7883a 	add	r3,r3,r23
 180a5c0:	003f8806 	br	180a3e4 <__ram_exceptions_end+0xff7fa0f4>
 180a5c4:	1805883a 	mov	r2,r3
 180a5c8:	003fde06 	br	180a544 <__ram_exceptions_end+0xff7fa254>
 180a5cc:	1839883a 	mov	fp,r3
 180a5d0:	003fc906 	br	180a4f8 <__ram_exceptions_end+0xff7fa208>
 180a5d4:	b5bfff84 	addi	r22,r22,-2
 180a5d8:	2449883a 	add	r4,r4,r17
 180a5dc:	003f3406 	br	180a2b0 <__ram_exceptions_end+0xff7f9fc0>
 180a5e0:	b5bfff84 	addi	r22,r22,-2
 180a5e4:	1445883a 	add	r2,r2,r17
 180a5e8:	003edb06 	br	180a158 <__ram_exceptions_end+0xff7f9e68>

0180a5ec <__umoddi3>:
 180a5ec:	defff404 	addi	sp,sp,-48
 180a5f0:	df000a15 	stw	fp,40(sp)
 180a5f4:	dc400315 	stw	r17,12(sp)
 180a5f8:	dc000215 	stw	r16,8(sp)
 180a5fc:	dfc00b15 	stw	ra,44(sp)
 180a600:	ddc00915 	stw	r23,36(sp)
 180a604:	dd800815 	stw	r22,32(sp)
 180a608:	dd400715 	stw	r21,28(sp)
 180a60c:	dd000615 	stw	r20,24(sp)
 180a610:	dcc00515 	stw	r19,20(sp)
 180a614:	dc800415 	stw	r18,16(sp)
 180a618:	2021883a 	mov	r16,r4
 180a61c:	2823883a 	mov	r17,r5
 180a620:	2839883a 	mov	fp,r5
 180a624:	38003c1e 	bne	r7,zero,180a718 <__umoddi3+0x12c>
 180a628:	3027883a 	mov	r19,r6
 180a62c:	2029883a 	mov	r20,r4
 180a630:	2980512e 	bgeu	r5,r6,180a778 <__umoddi3+0x18c>
 180a634:	00bfffd4 	movui	r2,65535
 180a638:	11809a36 	bltu	r2,r6,180a8a4 <__umoddi3+0x2b8>
 180a63c:	01003fc4 	movi	r4,255
 180a640:	2189803a 	cmpltu	r4,r4,r6
 180a644:	200890fa 	slli	r4,r4,3
 180a648:	3104d83a 	srl	r2,r6,r4
 180a64c:	00c06134 	movhi	r3,388
 180a650:	18c28304 	addi	r3,r3,2572
 180a654:	1885883a 	add	r2,r3,r2
 180a658:	10c00003 	ldbu	r3,0(r2)
 180a65c:	00800804 	movi	r2,32
 180a660:	1909883a 	add	r4,r3,r4
 180a664:	1125c83a 	sub	r18,r2,r4
 180a668:	90000526 	beq	r18,zero,180a680 <__umoddi3+0x94>
 180a66c:	8ca2983a 	sll	r17,r17,r18
 180a670:	8108d83a 	srl	r4,r16,r4
 180a674:	34a6983a 	sll	r19,r6,r18
 180a678:	84a8983a 	sll	r20,r16,r18
 180a67c:	2478b03a 	or	fp,r4,r17
 180a680:	982ed43a 	srli	r23,r19,16
 180a684:	e009883a 	mov	r4,fp
 180a688:	9dbfffcc 	andi	r22,r19,65535
 180a68c:	b80b883a 	mov	r5,r23
 180a690:	180ac800 	call	180ac80 <__umodsi3>
 180a694:	e009883a 	mov	r4,fp
 180a698:	b80b883a 	mov	r5,r23
 180a69c:	102b883a 	mov	r21,r2
 180a6a0:	180ac1c0 	call	180ac1c <__udivsi3>
 180a6a4:	a806943a 	slli	r3,r21,16
 180a6a8:	a008d43a 	srli	r4,r20,16
 180a6ac:	b085383a 	mul	r2,r22,r2
 180a6b0:	20c8b03a 	or	r4,r4,r3
 180a6b4:	2080032e 	bgeu	r4,r2,180a6c4 <__umoddi3+0xd8>
 180a6b8:	24c9883a 	add	r4,r4,r19
 180a6bc:	24c00136 	bltu	r4,r19,180a6c4 <__umoddi3+0xd8>
 180a6c0:	20811036 	bltu	r4,r2,180ab04 <__umoddi3+0x518>
 180a6c4:	20abc83a 	sub	r21,r4,r2
 180a6c8:	b80b883a 	mov	r5,r23
 180a6cc:	a809883a 	mov	r4,r21
 180a6d0:	180ac800 	call	180ac80 <__umodsi3>
 180a6d4:	1023883a 	mov	r17,r2
 180a6d8:	b80b883a 	mov	r5,r23
 180a6dc:	a809883a 	mov	r4,r21
 180a6e0:	180ac1c0 	call	180ac1c <__udivsi3>
 180a6e4:	8822943a 	slli	r17,r17,16
 180a6e8:	b085383a 	mul	r2,r22,r2
 180a6ec:	a0ffffcc 	andi	r3,r20,65535
 180a6f0:	1c46b03a 	or	r3,r3,r17
 180a6f4:	1880042e 	bgeu	r3,r2,180a708 <__umoddi3+0x11c>
 180a6f8:	1cc7883a 	add	r3,r3,r19
 180a6fc:	1cc00236 	bltu	r3,r19,180a708 <__umoddi3+0x11c>
 180a700:	1880012e 	bgeu	r3,r2,180a708 <__umoddi3+0x11c>
 180a704:	1cc7883a 	add	r3,r3,r19
 180a708:	1885c83a 	sub	r2,r3,r2
 180a70c:	1484d83a 	srl	r2,r2,r18
 180a710:	0007883a 	mov	r3,zero
 180a714:	00004f06 	br	180a854 <__umoddi3+0x268>
 180a718:	29c04c36 	bltu	r5,r7,180a84c <__umoddi3+0x260>
 180a71c:	00bfffd4 	movui	r2,65535
 180a720:	11c0582e 	bgeu	r2,r7,180a884 <__umoddi3+0x298>
 180a724:	00804034 	movhi	r2,256
 180a728:	10bfffc4 	addi	r2,r2,-1
 180a72c:	11c0e736 	bltu	r2,r7,180aacc <__umoddi3+0x4e0>
 180a730:	01000404 	movi	r4,16
 180a734:	3904d83a 	srl	r2,r7,r4
 180a738:	00c06134 	movhi	r3,388
 180a73c:	18c28304 	addi	r3,r3,2572
 180a740:	1885883a 	add	r2,r3,r2
 180a744:	14c00003 	ldbu	r19,0(r2)
 180a748:	00c00804 	movi	r3,32
 180a74c:	9927883a 	add	r19,r19,r4
 180a750:	1ce9c83a 	sub	r20,r3,r19
 180a754:	a000581e 	bne	r20,zero,180a8b8 <__umoddi3+0x2cc>
 180a758:	3c400136 	bltu	r7,r17,180a760 <__umoddi3+0x174>
 180a75c:	8180eb36 	bltu	r16,r6,180ab0c <__umoddi3+0x520>
 180a760:	8185c83a 	sub	r2,r16,r6
 180a764:	89e3c83a 	sub	r17,r17,r7
 180a768:	8089803a 	cmpltu	r4,r16,r2
 180a76c:	8939c83a 	sub	fp,r17,r4
 180a770:	e007883a 	mov	r3,fp
 180a774:	00003706 	br	180a854 <__umoddi3+0x268>
 180a778:	3000041e 	bne	r6,zero,180a78c <__umoddi3+0x1a0>
 180a77c:	000b883a 	mov	r5,zero
 180a780:	01000044 	movi	r4,1
 180a784:	180ac1c0 	call	180ac1c <__udivsi3>
 180a788:	1027883a 	mov	r19,r2
 180a78c:	00bfffd4 	movui	r2,65535
 180a790:	14c0402e 	bgeu	r2,r19,180a894 <__umoddi3+0x2a8>
 180a794:	00804034 	movhi	r2,256
 180a798:	10bfffc4 	addi	r2,r2,-1
 180a79c:	14c0cd36 	bltu	r2,r19,180aad4 <__umoddi3+0x4e8>
 180a7a0:	00800404 	movi	r2,16
 180a7a4:	9886d83a 	srl	r3,r19,r2
 180a7a8:	01006134 	movhi	r4,388
 180a7ac:	21028304 	addi	r4,r4,2572
 180a7b0:	20c7883a 	add	r3,r4,r3
 180a7b4:	18c00003 	ldbu	r3,0(r3)
 180a7b8:	1887883a 	add	r3,r3,r2
 180a7bc:	00800804 	movi	r2,32
 180a7c0:	10e5c83a 	sub	r18,r2,r3
 180a7c4:	9000901e 	bne	r18,zero,180aa08 <__umoddi3+0x41c>
 180a7c8:	982cd43a 	srli	r22,r19,16
 180a7cc:	8ce3c83a 	sub	r17,r17,r19
 180a7d0:	9d7fffcc 	andi	r21,r19,65535
 180a7d4:	b00b883a 	mov	r5,r22
 180a7d8:	8809883a 	mov	r4,r17
 180a7dc:	180ac800 	call	180ac80 <__umodsi3>
 180a7e0:	8809883a 	mov	r4,r17
 180a7e4:	b00b883a 	mov	r5,r22
 180a7e8:	1021883a 	mov	r16,r2
 180a7ec:	180ac1c0 	call	180ac1c <__udivsi3>
 180a7f0:	8006943a 	slli	r3,r16,16
 180a7f4:	a008d43a 	srli	r4,r20,16
 180a7f8:	1545383a 	mul	r2,r2,r21
 180a7fc:	20c8b03a 	or	r4,r4,r3
 180a800:	2080042e 	bgeu	r4,r2,180a814 <__umoddi3+0x228>
 180a804:	24c9883a 	add	r4,r4,r19
 180a808:	24c00236 	bltu	r4,r19,180a814 <__umoddi3+0x228>
 180a80c:	2080012e 	bgeu	r4,r2,180a814 <__umoddi3+0x228>
 180a810:	24c9883a 	add	r4,r4,r19
 180a814:	20a1c83a 	sub	r16,r4,r2
 180a818:	b00b883a 	mov	r5,r22
 180a81c:	8009883a 	mov	r4,r16
 180a820:	180ac800 	call	180ac80 <__umodsi3>
 180a824:	1023883a 	mov	r17,r2
 180a828:	b00b883a 	mov	r5,r22
 180a82c:	8009883a 	mov	r4,r16
 180a830:	180ac1c0 	call	180ac1c <__udivsi3>
 180a834:	8822943a 	slli	r17,r17,16
 180a838:	1545383a 	mul	r2,r2,r21
 180a83c:	a53fffcc 	andi	r20,r20,65535
 180a840:	a446b03a 	or	r3,r20,r17
 180a844:	18bfb02e 	bgeu	r3,r2,180a708 <__ram_exceptions_end+0xff7fa418>
 180a848:	003fab06 	br	180a6f8 <__ram_exceptions_end+0xff7fa408>
 180a84c:	2005883a 	mov	r2,r4
 180a850:	2807883a 	mov	r3,r5
 180a854:	dfc00b17 	ldw	ra,44(sp)
 180a858:	df000a17 	ldw	fp,40(sp)
 180a85c:	ddc00917 	ldw	r23,36(sp)
 180a860:	dd800817 	ldw	r22,32(sp)
 180a864:	dd400717 	ldw	r21,28(sp)
 180a868:	dd000617 	ldw	r20,24(sp)
 180a86c:	dcc00517 	ldw	r19,20(sp)
 180a870:	dc800417 	ldw	r18,16(sp)
 180a874:	dc400317 	ldw	r17,12(sp)
 180a878:	dc000217 	ldw	r16,8(sp)
 180a87c:	dec00c04 	addi	sp,sp,48
 180a880:	f800283a 	ret
 180a884:	04c03fc4 	movi	r19,255
 180a888:	99c9803a 	cmpltu	r4,r19,r7
 180a88c:	200890fa 	slli	r4,r4,3
 180a890:	003fa806 	br	180a734 <__ram_exceptions_end+0xff7fa444>
 180a894:	00803fc4 	movi	r2,255
 180a898:	14c5803a 	cmpltu	r2,r2,r19
 180a89c:	100490fa 	slli	r2,r2,3
 180a8a0:	003fc006 	br	180a7a4 <__ram_exceptions_end+0xff7fa4b4>
 180a8a4:	00804034 	movhi	r2,256
 180a8a8:	10bfffc4 	addi	r2,r2,-1
 180a8ac:	11808b36 	bltu	r2,r6,180aadc <__umoddi3+0x4f0>
 180a8b0:	01000404 	movi	r4,16
 180a8b4:	003f6406 	br	180a648 <__ram_exceptions_end+0xff7fa358>
 180a8b8:	34c4d83a 	srl	r2,r6,r19
 180a8bc:	3d0e983a 	sll	r7,r7,r20
 180a8c0:	8cf8d83a 	srl	fp,r17,r19
 180a8c4:	8d10983a 	sll	r8,r17,r20
 180a8c8:	38aab03a 	or	r21,r7,r2
 180a8cc:	a82cd43a 	srli	r22,r21,16
 180a8d0:	84e2d83a 	srl	r17,r16,r19
 180a8d4:	e009883a 	mov	r4,fp
 180a8d8:	b00b883a 	mov	r5,r22
 180a8dc:	8a22b03a 	or	r17,r17,r8
 180a8e0:	3524983a 	sll	r18,r6,r20
 180a8e4:	180ac800 	call	180ac80 <__umodsi3>
 180a8e8:	e009883a 	mov	r4,fp
 180a8ec:	b00b883a 	mov	r5,r22
 180a8f0:	102f883a 	mov	r23,r2
 180a8f4:	180ac1c0 	call	180ac1c <__udivsi3>
 180a8f8:	100d883a 	mov	r6,r2
 180a8fc:	b808943a 	slli	r4,r23,16
 180a900:	aa3fffcc 	andi	r8,r21,65535
 180a904:	8804d43a 	srli	r2,r17,16
 180a908:	41af383a 	mul	r23,r8,r6
 180a90c:	8520983a 	sll	r16,r16,r20
 180a910:	1104b03a 	or	r2,r2,r4
 180a914:	15c0042e 	bgeu	r2,r23,180a928 <__umoddi3+0x33c>
 180a918:	1545883a 	add	r2,r2,r21
 180a91c:	30ffffc4 	addi	r3,r6,-1
 180a920:	1540742e 	bgeu	r2,r21,180aaf4 <__umoddi3+0x508>
 180a924:	180d883a 	mov	r6,r3
 180a928:	15efc83a 	sub	r23,r2,r23
 180a92c:	b00b883a 	mov	r5,r22
 180a930:	b809883a 	mov	r4,r23
 180a934:	d9800115 	stw	r6,4(sp)
 180a938:	da000015 	stw	r8,0(sp)
 180a93c:	180ac800 	call	180ac80 <__umodsi3>
 180a940:	b00b883a 	mov	r5,r22
 180a944:	b809883a 	mov	r4,r23
 180a948:	1039883a 	mov	fp,r2
 180a94c:	180ac1c0 	call	180ac1c <__udivsi3>
 180a950:	da000017 	ldw	r8,0(sp)
 180a954:	e038943a 	slli	fp,fp,16
 180a958:	100b883a 	mov	r5,r2
 180a95c:	4089383a 	mul	r4,r8,r2
 180a960:	8a3fffcc 	andi	r8,r17,65535
 180a964:	4710b03a 	or	r8,r8,fp
 180a968:	d9800117 	ldw	r6,4(sp)
 180a96c:	4100042e 	bgeu	r8,r4,180a980 <__umoddi3+0x394>
 180a970:	4551883a 	add	r8,r8,r21
 180a974:	10bfffc4 	addi	r2,r2,-1
 180a978:	45405a2e 	bgeu	r8,r21,180aae4 <__umoddi3+0x4f8>
 180a97c:	100b883a 	mov	r5,r2
 180a980:	300c943a 	slli	r6,r6,16
 180a984:	91ffffcc 	andi	r7,r18,65535
 180a988:	9004d43a 	srli	r2,r18,16
 180a98c:	314cb03a 	or	r6,r6,r5
 180a990:	317fffcc 	andi	r5,r6,65535
 180a994:	300cd43a 	srli	r6,r6,16
 180a998:	29d3383a 	mul	r9,r5,r7
 180a99c:	288b383a 	mul	r5,r5,r2
 180a9a0:	31cf383a 	mul	r7,r6,r7
 180a9a4:	4806d43a 	srli	r3,r9,16
 180a9a8:	4111c83a 	sub	r8,r8,r4
 180a9ac:	29cb883a 	add	r5,r5,r7
 180a9b0:	194b883a 	add	r5,r3,r5
 180a9b4:	3085383a 	mul	r2,r6,r2
 180a9b8:	29c0022e 	bgeu	r5,r7,180a9c4 <__umoddi3+0x3d8>
 180a9bc:	00c00074 	movhi	r3,1
 180a9c0:	10c5883a 	add	r2,r2,r3
 180a9c4:	2808d43a 	srli	r4,r5,16
 180a9c8:	280a943a 	slli	r5,r5,16
 180a9cc:	4a7fffcc 	andi	r9,r9,65535
 180a9d0:	2085883a 	add	r2,r4,r2
 180a9d4:	2a4b883a 	add	r5,r5,r9
 180a9d8:	40803636 	bltu	r8,r2,180aab4 <__umoddi3+0x4c8>
 180a9dc:	40804d26 	beq	r8,r2,180ab14 <__umoddi3+0x528>
 180a9e0:	4089c83a 	sub	r4,r8,r2
 180a9e4:	280f883a 	mov	r7,r5
 180a9e8:	81cfc83a 	sub	r7,r16,r7
 180a9ec:	81c7803a 	cmpltu	r3,r16,r7
 180a9f0:	20c7c83a 	sub	r3,r4,r3
 180a9f4:	1cc4983a 	sll	r2,r3,r19
 180a9f8:	3d0ed83a 	srl	r7,r7,r20
 180a9fc:	1d06d83a 	srl	r3,r3,r20
 180aa00:	11c4b03a 	or	r2,r2,r7
 180aa04:	003f9306 	br	180a854 <__ram_exceptions_end+0xff7fa564>
 180aa08:	9ca6983a 	sll	r19,r19,r18
 180aa0c:	88e8d83a 	srl	r20,r17,r3
 180aa10:	80c4d83a 	srl	r2,r16,r3
 180aa14:	982cd43a 	srli	r22,r19,16
 180aa18:	8ca2983a 	sll	r17,r17,r18
 180aa1c:	a009883a 	mov	r4,r20
 180aa20:	b00b883a 	mov	r5,r22
 180aa24:	1478b03a 	or	fp,r2,r17
 180aa28:	180ac800 	call	180ac80 <__umodsi3>
 180aa2c:	a009883a 	mov	r4,r20
 180aa30:	b00b883a 	mov	r5,r22
 180aa34:	1023883a 	mov	r17,r2
 180aa38:	180ac1c0 	call	180ac1c <__udivsi3>
 180aa3c:	9d7fffcc 	andi	r21,r19,65535
 180aa40:	880a943a 	slli	r5,r17,16
 180aa44:	e008d43a 	srli	r4,fp,16
 180aa48:	a885383a 	mul	r2,r21,r2
 180aa4c:	84a8983a 	sll	r20,r16,r18
 180aa50:	2148b03a 	or	r4,r4,r5
 180aa54:	2080042e 	bgeu	r4,r2,180aa68 <__umoddi3+0x47c>
 180aa58:	24c9883a 	add	r4,r4,r19
 180aa5c:	24c00236 	bltu	r4,r19,180aa68 <__umoddi3+0x47c>
 180aa60:	2080012e 	bgeu	r4,r2,180aa68 <__umoddi3+0x47c>
 180aa64:	24c9883a 	add	r4,r4,r19
 180aa68:	20a3c83a 	sub	r17,r4,r2
 180aa6c:	b00b883a 	mov	r5,r22
 180aa70:	8809883a 	mov	r4,r17
 180aa74:	180ac800 	call	180ac80 <__umodsi3>
 180aa78:	102f883a 	mov	r23,r2
 180aa7c:	8809883a 	mov	r4,r17
 180aa80:	b00b883a 	mov	r5,r22
 180aa84:	180ac1c0 	call	180ac1c <__udivsi3>
 180aa88:	b82e943a 	slli	r23,r23,16
 180aa8c:	a885383a 	mul	r2,r21,r2
 180aa90:	e13fffcc 	andi	r4,fp,65535
 180aa94:	25c8b03a 	or	r4,r4,r23
 180aa98:	2080042e 	bgeu	r4,r2,180aaac <__umoddi3+0x4c0>
 180aa9c:	24c9883a 	add	r4,r4,r19
 180aaa0:	24c00236 	bltu	r4,r19,180aaac <__umoddi3+0x4c0>
 180aaa4:	2080012e 	bgeu	r4,r2,180aaac <__umoddi3+0x4c0>
 180aaa8:	24c9883a 	add	r4,r4,r19
 180aaac:	20a3c83a 	sub	r17,r4,r2
 180aab0:	003f4806 	br	180a7d4 <__ram_exceptions_end+0xff7fa4e4>
 180aab4:	2c8fc83a 	sub	r7,r5,r18
 180aab8:	1545c83a 	sub	r2,r2,r21
 180aabc:	29cb803a 	cmpltu	r5,r5,r7
 180aac0:	1145c83a 	sub	r2,r2,r5
 180aac4:	4089c83a 	sub	r4,r8,r2
 180aac8:	003fc706 	br	180a9e8 <__ram_exceptions_end+0xff7fa6f8>
 180aacc:	01000604 	movi	r4,24
 180aad0:	003f1806 	br	180a734 <__ram_exceptions_end+0xff7fa444>
 180aad4:	00800604 	movi	r2,24
 180aad8:	003f3206 	br	180a7a4 <__ram_exceptions_end+0xff7fa4b4>
 180aadc:	01000604 	movi	r4,24
 180aae0:	003ed906 	br	180a648 <__ram_exceptions_end+0xff7fa358>
 180aae4:	413fa52e 	bgeu	r8,r4,180a97c <__ram_exceptions_end+0xff7fa68c>
 180aae8:	297fff84 	addi	r5,r5,-2
 180aaec:	4551883a 	add	r8,r8,r21
 180aaf0:	003fa306 	br	180a980 <__ram_exceptions_end+0xff7fa690>
 180aaf4:	15ff8b2e 	bgeu	r2,r23,180a924 <__ram_exceptions_end+0xff7fa634>
 180aaf8:	31bfff84 	addi	r6,r6,-2
 180aafc:	1545883a 	add	r2,r2,r21
 180ab00:	003f8906 	br	180a928 <__ram_exceptions_end+0xff7fa638>
 180ab04:	24c9883a 	add	r4,r4,r19
 180ab08:	003eee06 	br	180a6c4 <__ram_exceptions_end+0xff7fa3d4>
 180ab0c:	8005883a 	mov	r2,r16
 180ab10:	003f1706 	br	180a770 <__ram_exceptions_end+0xff7fa480>
 180ab14:	817fe736 	bltu	r16,r5,180aab4 <__ram_exceptions_end+0xff7fa7c4>
 180ab18:	280f883a 	mov	r7,r5
 180ab1c:	0009883a 	mov	r4,zero
 180ab20:	003fb106 	br	180a9e8 <__ram_exceptions_end+0xff7fa6f8>

0180ab24 <__divsi3>:
 180ab24:	20001b16 	blt	r4,zero,180ab94 <__divsi3+0x70>
 180ab28:	000f883a 	mov	r7,zero
 180ab2c:	28001616 	blt	r5,zero,180ab88 <__divsi3+0x64>
 180ab30:	200d883a 	mov	r6,r4
 180ab34:	29001a2e 	bgeu	r5,r4,180aba0 <__divsi3+0x7c>
 180ab38:	00800804 	movi	r2,32
 180ab3c:	00c00044 	movi	r3,1
 180ab40:	00000106 	br	180ab48 <__divsi3+0x24>
 180ab44:	10000d26 	beq	r2,zero,180ab7c <__divsi3+0x58>
 180ab48:	294b883a 	add	r5,r5,r5
 180ab4c:	10bfffc4 	addi	r2,r2,-1
 180ab50:	18c7883a 	add	r3,r3,r3
 180ab54:	293ffb36 	bltu	r5,r4,180ab44 <__ram_exceptions_end+0xff7fa854>
 180ab58:	0005883a 	mov	r2,zero
 180ab5c:	18000726 	beq	r3,zero,180ab7c <__divsi3+0x58>
 180ab60:	0005883a 	mov	r2,zero
 180ab64:	31400236 	bltu	r6,r5,180ab70 <__divsi3+0x4c>
 180ab68:	314dc83a 	sub	r6,r6,r5
 180ab6c:	10c4b03a 	or	r2,r2,r3
 180ab70:	1806d07a 	srli	r3,r3,1
 180ab74:	280ad07a 	srli	r5,r5,1
 180ab78:	183ffa1e 	bne	r3,zero,180ab64 <__ram_exceptions_end+0xff7fa874>
 180ab7c:	38000126 	beq	r7,zero,180ab84 <__divsi3+0x60>
 180ab80:	0085c83a 	sub	r2,zero,r2
 180ab84:	f800283a 	ret
 180ab88:	014bc83a 	sub	r5,zero,r5
 180ab8c:	39c0005c 	xori	r7,r7,1
 180ab90:	003fe706 	br	180ab30 <__ram_exceptions_end+0xff7fa840>
 180ab94:	0109c83a 	sub	r4,zero,r4
 180ab98:	01c00044 	movi	r7,1
 180ab9c:	003fe306 	br	180ab2c <__ram_exceptions_end+0xff7fa83c>
 180aba0:	00c00044 	movi	r3,1
 180aba4:	003fee06 	br	180ab60 <__ram_exceptions_end+0xff7fa870>

0180aba8 <__modsi3>:
 180aba8:	20001716 	blt	r4,zero,180ac08 <__modsi3+0x60>
 180abac:	000f883a 	mov	r7,zero
 180abb0:	2005883a 	mov	r2,r4
 180abb4:	28001216 	blt	r5,zero,180ac00 <__modsi3+0x58>
 180abb8:	2900162e 	bgeu	r5,r4,180ac14 <__modsi3+0x6c>
 180abbc:	01800804 	movi	r6,32
 180abc0:	00c00044 	movi	r3,1
 180abc4:	00000106 	br	180abcc <__modsi3+0x24>
 180abc8:	30000a26 	beq	r6,zero,180abf4 <__modsi3+0x4c>
 180abcc:	294b883a 	add	r5,r5,r5
 180abd0:	31bfffc4 	addi	r6,r6,-1
 180abd4:	18c7883a 	add	r3,r3,r3
 180abd8:	293ffb36 	bltu	r5,r4,180abc8 <__ram_exceptions_end+0xff7fa8d8>
 180abdc:	18000526 	beq	r3,zero,180abf4 <__modsi3+0x4c>
 180abe0:	1806d07a 	srli	r3,r3,1
 180abe4:	11400136 	bltu	r2,r5,180abec <__modsi3+0x44>
 180abe8:	1145c83a 	sub	r2,r2,r5
 180abec:	280ad07a 	srli	r5,r5,1
 180abf0:	183ffb1e 	bne	r3,zero,180abe0 <__ram_exceptions_end+0xff7fa8f0>
 180abf4:	38000126 	beq	r7,zero,180abfc <__modsi3+0x54>
 180abf8:	0085c83a 	sub	r2,zero,r2
 180abfc:	f800283a 	ret
 180ac00:	014bc83a 	sub	r5,zero,r5
 180ac04:	003fec06 	br	180abb8 <__ram_exceptions_end+0xff7fa8c8>
 180ac08:	0109c83a 	sub	r4,zero,r4
 180ac0c:	01c00044 	movi	r7,1
 180ac10:	003fe706 	br	180abb0 <__ram_exceptions_end+0xff7fa8c0>
 180ac14:	00c00044 	movi	r3,1
 180ac18:	003ff106 	br	180abe0 <__ram_exceptions_end+0xff7fa8f0>

0180ac1c <__udivsi3>:
 180ac1c:	200d883a 	mov	r6,r4
 180ac20:	2900152e 	bgeu	r5,r4,180ac78 <__udivsi3+0x5c>
 180ac24:	28001416 	blt	r5,zero,180ac78 <__udivsi3+0x5c>
 180ac28:	00800804 	movi	r2,32
 180ac2c:	00c00044 	movi	r3,1
 180ac30:	00000206 	br	180ac3c <__udivsi3+0x20>
 180ac34:	10000e26 	beq	r2,zero,180ac70 <__udivsi3+0x54>
 180ac38:	28000516 	blt	r5,zero,180ac50 <__udivsi3+0x34>
 180ac3c:	294b883a 	add	r5,r5,r5
 180ac40:	10bfffc4 	addi	r2,r2,-1
 180ac44:	18c7883a 	add	r3,r3,r3
 180ac48:	293ffa36 	bltu	r5,r4,180ac34 <__ram_exceptions_end+0xff7fa944>
 180ac4c:	18000826 	beq	r3,zero,180ac70 <__udivsi3+0x54>
 180ac50:	0005883a 	mov	r2,zero
 180ac54:	31400236 	bltu	r6,r5,180ac60 <__udivsi3+0x44>
 180ac58:	314dc83a 	sub	r6,r6,r5
 180ac5c:	10c4b03a 	or	r2,r2,r3
 180ac60:	1806d07a 	srli	r3,r3,1
 180ac64:	280ad07a 	srli	r5,r5,1
 180ac68:	183ffa1e 	bne	r3,zero,180ac54 <__ram_exceptions_end+0xff7fa964>
 180ac6c:	f800283a 	ret
 180ac70:	0005883a 	mov	r2,zero
 180ac74:	f800283a 	ret
 180ac78:	00c00044 	movi	r3,1
 180ac7c:	003ff406 	br	180ac50 <__ram_exceptions_end+0xff7fa960>

0180ac80 <__umodsi3>:
 180ac80:	2005883a 	mov	r2,r4
 180ac84:	2900122e 	bgeu	r5,r4,180acd0 <__umodsi3+0x50>
 180ac88:	28001116 	blt	r5,zero,180acd0 <__umodsi3+0x50>
 180ac8c:	01800804 	movi	r6,32
 180ac90:	00c00044 	movi	r3,1
 180ac94:	00000206 	br	180aca0 <__umodsi3+0x20>
 180ac98:	30000c26 	beq	r6,zero,180accc <__umodsi3+0x4c>
 180ac9c:	28000516 	blt	r5,zero,180acb4 <__umodsi3+0x34>
 180aca0:	294b883a 	add	r5,r5,r5
 180aca4:	31bfffc4 	addi	r6,r6,-1
 180aca8:	18c7883a 	add	r3,r3,r3
 180acac:	293ffa36 	bltu	r5,r4,180ac98 <__ram_exceptions_end+0xff7fa9a8>
 180acb0:	18000626 	beq	r3,zero,180accc <__umodsi3+0x4c>
 180acb4:	1806d07a 	srli	r3,r3,1
 180acb8:	11400136 	bltu	r2,r5,180acc0 <__umodsi3+0x40>
 180acbc:	1145c83a 	sub	r2,r2,r5
 180acc0:	280ad07a 	srli	r5,r5,1
 180acc4:	183ffb1e 	bne	r3,zero,180acb4 <__ram_exceptions_end+0xff7fa9c4>
 180acc8:	f800283a 	ret
 180accc:	f800283a 	ret
 180acd0:	00c00044 	movi	r3,1
 180acd4:	003ff706 	br	180acb4 <__ram_exceptions_end+0xff7fa9c4>

0180acd8 <__adddf3>:
 180acd8:	02c00434 	movhi	r11,16
 180acdc:	5affffc4 	addi	r11,r11,-1
 180ace0:	2806d7fa 	srli	r3,r5,31
 180ace4:	2ad4703a 	and	r10,r5,r11
 180ace8:	3ad2703a 	and	r9,r7,r11
 180acec:	3804d53a 	srli	r2,r7,20
 180acf0:	3018d77a 	srli	r12,r6,29
 180acf4:	280ad53a 	srli	r5,r5,20
 180acf8:	501490fa 	slli	r10,r10,3
 180acfc:	2010d77a 	srli	r8,r4,29
 180ad00:	481290fa 	slli	r9,r9,3
 180ad04:	380ed7fa 	srli	r7,r7,31
 180ad08:	defffb04 	addi	sp,sp,-20
 180ad0c:	dc800215 	stw	r18,8(sp)
 180ad10:	dc400115 	stw	r17,4(sp)
 180ad14:	dc000015 	stw	r16,0(sp)
 180ad18:	dfc00415 	stw	ra,16(sp)
 180ad1c:	dcc00315 	stw	r19,12(sp)
 180ad20:	1c803fcc 	andi	r18,r3,255
 180ad24:	2c01ffcc 	andi	r16,r5,2047
 180ad28:	5210b03a 	or	r8,r10,r8
 180ad2c:	202290fa 	slli	r17,r4,3
 180ad30:	1081ffcc 	andi	r2,r2,2047
 180ad34:	4b12b03a 	or	r9,r9,r12
 180ad38:	300c90fa 	slli	r6,r6,3
 180ad3c:	91c07526 	beq	r18,r7,180af14 <__adddf3+0x23c>
 180ad40:	8087c83a 	sub	r3,r16,r2
 180ad44:	00c0ab0e 	bge	zero,r3,180aff4 <__adddf3+0x31c>
 180ad48:	10002a1e 	bne	r2,zero,180adf4 <__adddf3+0x11c>
 180ad4c:	4984b03a 	or	r2,r9,r6
 180ad50:	1000961e 	bne	r2,zero,180afac <__adddf3+0x2d4>
 180ad54:	888001cc 	andi	r2,r17,7
 180ad58:	10000726 	beq	r2,zero,180ad78 <__adddf3+0xa0>
 180ad5c:	888003cc 	andi	r2,r17,15
 180ad60:	00c00104 	movi	r3,4
 180ad64:	10c00426 	beq	r2,r3,180ad78 <__adddf3+0xa0>
 180ad68:	88c7883a 	add	r3,r17,r3
 180ad6c:	1c63803a 	cmpltu	r17,r3,r17
 180ad70:	4451883a 	add	r8,r8,r17
 180ad74:	1823883a 	mov	r17,r3
 180ad78:	4080202c 	andhi	r2,r8,128
 180ad7c:	10005926 	beq	r2,zero,180aee4 <__adddf3+0x20c>
 180ad80:	84000044 	addi	r16,r16,1
 180ad84:	0081ffc4 	movi	r2,2047
 180ad88:	8080ba26 	beq	r16,r2,180b074 <__adddf3+0x39c>
 180ad8c:	00bfe034 	movhi	r2,65408
 180ad90:	10bfffc4 	addi	r2,r2,-1
 180ad94:	4090703a 	and	r8,r8,r2
 180ad98:	4004977a 	slli	r2,r8,29
 180ad9c:	4010927a 	slli	r8,r8,9
 180ada0:	8822d0fa 	srli	r17,r17,3
 180ada4:	8401ffcc 	andi	r16,r16,2047
 180ada8:	4010d33a 	srli	r8,r8,12
 180adac:	9007883a 	mov	r3,r18
 180adb0:	1444b03a 	or	r2,r2,r17
 180adb4:	8401ffcc 	andi	r16,r16,2047
 180adb8:	8020953a 	slli	r16,r16,20
 180adbc:	18c03fcc 	andi	r3,r3,255
 180adc0:	01000434 	movhi	r4,16
 180adc4:	213fffc4 	addi	r4,r4,-1
 180adc8:	180697fa 	slli	r3,r3,31
 180adcc:	4110703a 	and	r8,r8,r4
 180add0:	4410b03a 	or	r8,r8,r16
 180add4:	40c6b03a 	or	r3,r8,r3
 180add8:	dfc00417 	ldw	ra,16(sp)
 180addc:	dcc00317 	ldw	r19,12(sp)
 180ade0:	dc800217 	ldw	r18,8(sp)
 180ade4:	dc400117 	ldw	r17,4(sp)
 180ade8:	dc000017 	ldw	r16,0(sp)
 180adec:	dec00504 	addi	sp,sp,20
 180adf0:	f800283a 	ret
 180adf4:	0081ffc4 	movi	r2,2047
 180adf8:	80bfd626 	beq	r16,r2,180ad54 <__ram_exceptions_end+0xff7faa64>
 180adfc:	4a402034 	orhi	r9,r9,128
 180ae00:	00800e04 	movi	r2,56
 180ae04:	10c09f16 	blt	r2,r3,180b084 <__adddf3+0x3ac>
 180ae08:	008007c4 	movi	r2,31
 180ae0c:	10c0c216 	blt	r2,r3,180b118 <__adddf3+0x440>
 180ae10:	00800804 	movi	r2,32
 180ae14:	10c5c83a 	sub	r2,r2,r3
 180ae18:	488a983a 	sll	r5,r9,r2
 180ae1c:	30c8d83a 	srl	r4,r6,r3
 180ae20:	3084983a 	sll	r2,r6,r2
 180ae24:	48c6d83a 	srl	r3,r9,r3
 180ae28:	290cb03a 	or	r6,r5,r4
 180ae2c:	1004c03a 	cmpne	r2,r2,zero
 180ae30:	308cb03a 	or	r6,r6,r2
 180ae34:	898dc83a 	sub	r6,r17,r6
 180ae38:	89a3803a 	cmpltu	r17,r17,r6
 180ae3c:	40d1c83a 	sub	r8,r8,r3
 180ae40:	4451c83a 	sub	r8,r8,r17
 180ae44:	3023883a 	mov	r17,r6
 180ae48:	4080202c 	andhi	r2,r8,128
 180ae4c:	10002326 	beq	r2,zero,180aedc <__adddf3+0x204>
 180ae50:	04c02034 	movhi	r19,128
 180ae54:	9cffffc4 	addi	r19,r19,-1
 180ae58:	44e6703a 	and	r19,r8,r19
 180ae5c:	98007626 	beq	r19,zero,180b038 <__adddf3+0x360>
 180ae60:	9809883a 	mov	r4,r19
 180ae64:	180d2dc0 	call	180d2dc <__clzsi2>
 180ae68:	10fffe04 	addi	r3,r2,-8
 180ae6c:	010007c4 	movi	r4,31
 180ae70:	20c07716 	blt	r4,r3,180b050 <__adddf3+0x378>
 180ae74:	00800804 	movi	r2,32
 180ae78:	10c5c83a 	sub	r2,r2,r3
 180ae7c:	8884d83a 	srl	r2,r17,r2
 180ae80:	98d0983a 	sll	r8,r19,r3
 180ae84:	88e2983a 	sll	r17,r17,r3
 180ae88:	1204b03a 	or	r2,r2,r8
 180ae8c:	1c007416 	blt	r3,r16,180b060 <__adddf3+0x388>
 180ae90:	1c21c83a 	sub	r16,r3,r16
 180ae94:	82000044 	addi	r8,r16,1
 180ae98:	00c007c4 	movi	r3,31
 180ae9c:	1a009116 	blt	r3,r8,180b0e4 <__adddf3+0x40c>
 180aea0:	00c00804 	movi	r3,32
 180aea4:	1a07c83a 	sub	r3,r3,r8
 180aea8:	8a08d83a 	srl	r4,r17,r8
 180aeac:	88e2983a 	sll	r17,r17,r3
 180aeb0:	10c6983a 	sll	r3,r2,r3
 180aeb4:	1210d83a 	srl	r8,r2,r8
 180aeb8:	8804c03a 	cmpne	r2,r17,zero
 180aebc:	1906b03a 	or	r3,r3,r4
 180aec0:	18a2b03a 	or	r17,r3,r2
 180aec4:	0021883a 	mov	r16,zero
 180aec8:	003fa206 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180aecc:	1890b03a 	or	r8,r3,r2
 180aed0:	40017d26 	beq	r8,zero,180b4c8 <__adddf3+0x7f0>
 180aed4:	1011883a 	mov	r8,r2
 180aed8:	1823883a 	mov	r17,r3
 180aedc:	888001cc 	andi	r2,r17,7
 180aee0:	103f9e1e 	bne	r2,zero,180ad5c <__ram_exceptions_end+0xff7faa6c>
 180aee4:	4004977a 	slli	r2,r8,29
 180aee8:	8822d0fa 	srli	r17,r17,3
 180aeec:	4010d0fa 	srli	r8,r8,3
 180aef0:	9007883a 	mov	r3,r18
 180aef4:	1444b03a 	or	r2,r2,r17
 180aef8:	0101ffc4 	movi	r4,2047
 180aefc:	81002426 	beq	r16,r4,180af90 <__adddf3+0x2b8>
 180af00:	8120703a 	and	r16,r16,r4
 180af04:	01000434 	movhi	r4,16
 180af08:	213fffc4 	addi	r4,r4,-1
 180af0c:	4110703a 	and	r8,r8,r4
 180af10:	003fa806 	br	180adb4 <__ram_exceptions_end+0xff7faac4>
 180af14:	8089c83a 	sub	r4,r16,r2
 180af18:	01005e0e 	bge	zero,r4,180b094 <__adddf3+0x3bc>
 180af1c:	10002b26 	beq	r2,zero,180afcc <__adddf3+0x2f4>
 180af20:	0081ffc4 	movi	r2,2047
 180af24:	80bf8b26 	beq	r16,r2,180ad54 <__ram_exceptions_end+0xff7faa64>
 180af28:	4a402034 	orhi	r9,r9,128
 180af2c:	00800e04 	movi	r2,56
 180af30:	1100a40e 	bge	r2,r4,180b1c4 <__adddf3+0x4ec>
 180af34:	498cb03a 	or	r6,r9,r6
 180af38:	300ac03a 	cmpne	r5,r6,zero
 180af3c:	0013883a 	mov	r9,zero
 180af40:	2c4b883a 	add	r5,r5,r17
 180af44:	2c63803a 	cmpltu	r17,r5,r17
 180af48:	4a11883a 	add	r8,r9,r8
 180af4c:	8a11883a 	add	r8,r17,r8
 180af50:	2823883a 	mov	r17,r5
 180af54:	4080202c 	andhi	r2,r8,128
 180af58:	103fe026 	beq	r2,zero,180aedc <__ram_exceptions_end+0xff7fabec>
 180af5c:	84000044 	addi	r16,r16,1
 180af60:	0081ffc4 	movi	r2,2047
 180af64:	8080d226 	beq	r16,r2,180b2b0 <__adddf3+0x5d8>
 180af68:	00bfe034 	movhi	r2,65408
 180af6c:	10bfffc4 	addi	r2,r2,-1
 180af70:	4090703a 	and	r8,r8,r2
 180af74:	880ad07a 	srli	r5,r17,1
 180af78:	400897fa 	slli	r4,r8,31
 180af7c:	88c0004c 	andi	r3,r17,1
 180af80:	28e2b03a 	or	r17,r5,r3
 180af84:	4010d07a 	srli	r8,r8,1
 180af88:	2462b03a 	or	r17,r4,r17
 180af8c:	003f7106 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180af90:	4088b03a 	or	r4,r8,r2
 180af94:	20014526 	beq	r4,zero,180b4ac <__adddf3+0x7d4>
 180af98:	01000434 	movhi	r4,16
 180af9c:	42000234 	orhi	r8,r8,8
 180afa0:	213fffc4 	addi	r4,r4,-1
 180afa4:	4110703a 	and	r8,r8,r4
 180afa8:	003f8206 	br	180adb4 <__ram_exceptions_end+0xff7faac4>
 180afac:	18ffffc4 	addi	r3,r3,-1
 180afb0:	1800491e 	bne	r3,zero,180b0d8 <__adddf3+0x400>
 180afb4:	898bc83a 	sub	r5,r17,r6
 180afb8:	8963803a 	cmpltu	r17,r17,r5
 180afbc:	4251c83a 	sub	r8,r8,r9
 180afc0:	4451c83a 	sub	r8,r8,r17
 180afc4:	2823883a 	mov	r17,r5
 180afc8:	003f9f06 	br	180ae48 <__ram_exceptions_end+0xff7fab58>
 180afcc:	4984b03a 	or	r2,r9,r6
 180afd0:	103f6026 	beq	r2,zero,180ad54 <__ram_exceptions_end+0xff7faa64>
 180afd4:	213fffc4 	addi	r4,r4,-1
 180afd8:	2000931e 	bne	r4,zero,180b228 <__adddf3+0x550>
 180afdc:	898d883a 	add	r6,r17,r6
 180afe0:	3463803a 	cmpltu	r17,r6,r17
 180afe4:	4251883a 	add	r8,r8,r9
 180afe8:	8a11883a 	add	r8,r17,r8
 180afec:	3023883a 	mov	r17,r6
 180aff0:	003fd806 	br	180af54 <__ram_exceptions_end+0xff7fac64>
 180aff4:	1800541e 	bne	r3,zero,180b148 <__adddf3+0x470>
 180aff8:	80800044 	addi	r2,r16,1
 180affc:	1081ffcc 	andi	r2,r2,2047
 180b000:	00c00044 	movi	r3,1
 180b004:	1880a00e 	bge	r3,r2,180b288 <__adddf3+0x5b0>
 180b008:	8989c83a 	sub	r4,r17,r6
 180b00c:	8905803a 	cmpltu	r2,r17,r4
 180b010:	4267c83a 	sub	r19,r8,r9
 180b014:	98a7c83a 	sub	r19,r19,r2
 180b018:	9880202c 	andhi	r2,r19,128
 180b01c:	10006326 	beq	r2,zero,180b1ac <__adddf3+0x4d4>
 180b020:	3463c83a 	sub	r17,r6,r17
 180b024:	4a07c83a 	sub	r3,r9,r8
 180b028:	344d803a 	cmpltu	r6,r6,r17
 180b02c:	19a7c83a 	sub	r19,r3,r6
 180b030:	3825883a 	mov	r18,r7
 180b034:	983f8a1e 	bne	r19,zero,180ae60 <__ram_exceptions_end+0xff7fab70>
 180b038:	8809883a 	mov	r4,r17
 180b03c:	180d2dc0 	call	180d2dc <__clzsi2>
 180b040:	10800804 	addi	r2,r2,32
 180b044:	10fffe04 	addi	r3,r2,-8
 180b048:	010007c4 	movi	r4,31
 180b04c:	20ff890e 	bge	r4,r3,180ae74 <__ram_exceptions_end+0xff7fab84>
 180b050:	10bff604 	addi	r2,r2,-40
 180b054:	8884983a 	sll	r2,r17,r2
 180b058:	0023883a 	mov	r17,zero
 180b05c:	1c3f8c0e 	bge	r3,r16,180ae90 <__ram_exceptions_end+0xff7faba0>
 180b060:	023fe034 	movhi	r8,65408
 180b064:	423fffc4 	addi	r8,r8,-1
 180b068:	80e1c83a 	sub	r16,r16,r3
 180b06c:	1210703a 	and	r8,r2,r8
 180b070:	003f3806 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b074:	9007883a 	mov	r3,r18
 180b078:	0011883a 	mov	r8,zero
 180b07c:	0005883a 	mov	r2,zero
 180b080:	003f4c06 	br	180adb4 <__ram_exceptions_end+0xff7faac4>
 180b084:	498cb03a 	or	r6,r9,r6
 180b088:	300cc03a 	cmpne	r6,r6,zero
 180b08c:	0007883a 	mov	r3,zero
 180b090:	003f6806 	br	180ae34 <__ram_exceptions_end+0xff7fab44>
 180b094:	20009c1e 	bne	r4,zero,180b308 <__adddf3+0x630>
 180b098:	80800044 	addi	r2,r16,1
 180b09c:	1141ffcc 	andi	r5,r2,2047
 180b0a0:	01000044 	movi	r4,1
 180b0a4:	2140670e 	bge	r4,r5,180b244 <__adddf3+0x56c>
 180b0a8:	0101ffc4 	movi	r4,2047
 180b0ac:	11007f26 	beq	r2,r4,180b2ac <__adddf3+0x5d4>
 180b0b0:	898d883a 	add	r6,r17,r6
 180b0b4:	4247883a 	add	r3,r8,r9
 180b0b8:	3451803a 	cmpltu	r8,r6,r17
 180b0bc:	40d1883a 	add	r8,r8,r3
 180b0c0:	402297fa 	slli	r17,r8,31
 180b0c4:	300cd07a 	srli	r6,r6,1
 180b0c8:	4010d07a 	srli	r8,r8,1
 180b0cc:	1021883a 	mov	r16,r2
 180b0d0:	89a2b03a 	or	r17,r17,r6
 180b0d4:	003f1f06 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b0d8:	0081ffc4 	movi	r2,2047
 180b0dc:	80bf481e 	bne	r16,r2,180ae00 <__ram_exceptions_end+0xff7fab10>
 180b0e0:	003f1c06 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b0e4:	843ff844 	addi	r16,r16,-31
 180b0e8:	01000804 	movi	r4,32
 180b0ec:	1406d83a 	srl	r3,r2,r16
 180b0f0:	41005026 	beq	r8,r4,180b234 <__adddf3+0x55c>
 180b0f4:	01001004 	movi	r4,64
 180b0f8:	2211c83a 	sub	r8,r4,r8
 180b0fc:	1204983a 	sll	r2,r2,r8
 180b100:	88a2b03a 	or	r17,r17,r2
 180b104:	8822c03a 	cmpne	r17,r17,zero
 180b108:	1c62b03a 	or	r17,r3,r17
 180b10c:	0011883a 	mov	r8,zero
 180b110:	0021883a 	mov	r16,zero
 180b114:	003f7106 	br	180aedc <__ram_exceptions_end+0xff7fabec>
 180b118:	193ff804 	addi	r4,r3,-32
 180b11c:	00800804 	movi	r2,32
 180b120:	4908d83a 	srl	r4,r9,r4
 180b124:	18804526 	beq	r3,r2,180b23c <__adddf3+0x564>
 180b128:	00801004 	movi	r2,64
 180b12c:	10c5c83a 	sub	r2,r2,r3
 180b130:	4886983a 	sll	r3,r9,r2
 180b134:	198cb03a 	or	r6,r3,r6
 180b138:	300cc03a 	cmpne	r6,r6,zero
 180b13c:	218cb03a 	or	r6,r4,r6
 180b140:	0007883a 	mov	r3,zero
 180b144:	003f3b06 	br	180ae34 <__ram_exceptions_end+0xff7fab44>
 180b148:	80002a26 	beq	r16,zero,180b1f4 <__adddf3+0x51c>
 180b14c:	0101ffc4 	movi	r4,2047
 180b150:	11006826 	beq	r2,r4,180b2f4 <__adddf3+0x61c>
 180b154:	00c7c83a 	sub	r3,zero,r3
 180b158:	42002034 	orhi	r8,r8,128
 180b15c:	01000e04 	movi	r4,56
 180b160:	20c07c16 	blt	r4,r3,180b354 <__adddf3+0x67c>
 180b164:	010007c4 	movi	r4,31
 180b168:	20c0da16 	blt	r4,r3,180b4d4 <__adddf3+0x7fc>
 180b16c:	01000804 	movi	r4,32
 180b170:	20c9c83a 	sub	r4,r4,r3
 180b174:	4114983a 	sll	r10,r8,r4
 180b178:	88cad83a 	srl	r5,r17,r3
 180b17c:	8908983a 	sll	r4,r17,r4
 180b180:	40c6d83a 	srl	r3,r8,r3
 180b184:	5162b03a 	or	r17,r10,r5
 180b188:	2008c03a 	cmpne	r4,r4,zero
 180b18c:	8922b03a 	or	r17,r17,r4
 180b190:	3463c83a 	sub	r17,r6,r17
 180b194:	48c7c83a 	sub	r3,r9,r3
 180b198:	344d803a 	cmpltu	r6,r6,r17
 180b19c:	1991c83a 	sub	r8,r3,r6
 180b1a0:	1021883a 	mov	r16,r2
 180b1a4:	3825883a 	mov	r18,r7
 180b1a8:	003f2706 	br	180ae48 <__ram_exceptions_end+0xff7fab58>
 180b1ac:	24d0b03a 	or	r8,r4,r19
 180b1b0:	40001b1e 	bne	r8,zero,180b220 <__adddf3+0x548>
 180b1b4:	0005883a 	mov	r2,zero
 180b1b8:	0007883a 	mov	r3,zero
 180b1bc:	0021883a 	mov	r16,zero
 180b1c0:	003f4d06 	br	180aef8 <__ram_exceptions_end+0xff7fac08>
 180b1c4:	008007c4 	movi	r2,31
 180b1c8:	11003c16 	blt	r2,r4,180b2bc <__adddf3+0x5e4>
 180b1cc:	00800804 	movi	r2,32
 180b1d0:	1105c83a 	sub	r2,r2,r4
 180b1d4:	488e983a 	sll	r7,r9,r2
 180b1d8:	310ad83a 	srl	r5,r6,r4
 180b1dc:	3084983a 	sll	r2,r6,r2
 180b1e0:	4912d83a 	srl	r9,r9,r4
 180b1e4:	394ab03a 	or	r5,r7,r5
 180b1e8:	1004c03a 	cmpne	r2,r2,zero
 180b1ec:	288ab03a 	or	r5,r5,r2
 180b1f0:	003f5306 	br	180af40 <__ram_exceptions_end+0xff7fac50>
 180b1f4:	4448b03a 	or	r4,r8,r17
 180b1f8:	20003e26 	beq	r4,zero,180b2f4 <__adddf3+0x61c>
 180b1fc:	00c6303a 	nor	r3,zero,r3
 180b200:	18003a1e 	bne	r3,zero,180b2ec <__adddf3+0x614>
 180b204:	3463c83a 	sub	r17,r6,r17
 180b208:	4a07c83a 	sub	r3,r9,r8
 180b20c:	344d803a 	cmpltu	r6,r6,r17
 180b210:	1991c83a 	sub	r8,r3,r6
 180b214:	1021883a 	mov	r16,r2
 180b218:	3825883a 	mov	r18,r7
 180b21c:	003f0a06 	br	180ae48 <__ram_exceptions_end+0xff7fab58>
 180b220:	2023883a 	mov	r17,r4
 180b224:	003f0d06 	br	180ae5c <__ram_exceptions_end+0xff7fab6c>
 180b228:	0081ffc4 	movi	r2,2047
 180b22c:	80bf3f1e 	bne	r16,r2,180af2c <__ram_exceptions_end+0xff7fac3c>
 180b230:	003ec806 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b234:	0005883a 	mov	r2,zero
 180b238:	003fb106 	br	180b100 <__ram_exceptions_end+0xff7fae10>
 180b23c:	0007883a 	mov	r3,zero
 180b240:	003fbc06 	br	180b134 <__ram_exceptions_end+0xff7fae44>
 180b244:	4444b03a 	or	r2,r8,r17
 180b248:	8000871e 	bne	r16,zero,180b468 <__adddf3+0x790>
 180b24c:	1000ba26 	beq	r2,zero,180b538 <__adddf3+0x860>
 180b250:	4984b03a 	or	r2,r9,r6
 180b254:	103ebf26 	beq	r2,zero,180ad54 <__ram_exceptions_end+0xff7faa64>
 180b258:	8985883a 	add	r2,r17,r6
 180b25c:	4247883a 	add	r3,r8,r9
 180b260:	1451803a 	cmpltu	r8,r2,r17
 180b264:	40d1883a 	add	r8,r8,r3
 180b268:	40c0202c 	andhi	r3,r8,128
 180b26c:	1023883a 	mov	r17,r2
 180b270:	183f1a26 	beq	r3,zero,180aedc <__ram_exceptions_end+0xff7fabec>
 180b274:	00bfe034 	movhi	r2,65408
 180b278:	10bfffc4 	addi	r2,r2,-1
 180b27c:	2021883a 	mov	r16,r4
 180b280:	4090703a 	and	r8,r8,r2
 180b284:	003eb306 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b288:	4444b03a 	or	r2,r8,r17
 180b28c:	8000291e 	bne	r16,zero,180b334 <__adddf3+0x65c>
 180b290:	10004b1e 	bne	r2,zero,180b3c0 <__adddf3+0x6e8>
 180b294:	4990b03a 	or	r8,r9,r6
 180b298:	40008b26 	beq	r8,zero,180b4c8 <__adddf3+0x7f0>
 180b29c:	4811883a 	mov	r8,r9
 180b2a0:	3023883a 	mov	r17,r6
 180b2a4:	3825883a 	mov	r18,r7
 180b2a8:	003eaa06 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b2ac:	1021883a 	mov	r16,r2
 180b2b0:	0011883a 	mov	r8,zero
 180b2b4:	0005883a 	mov	r2,zero
 180b2b8:	003f0f06 	br	180aef8 <__ram_exceptions_end+0xff7fac08>
 180b2bc:	217ff804 	addi	r5,r4,-32
 180b2c0:	00800804 	movi	r2,32
 180b2c4:	494ad83a 	srl	r5,r9,r5
 180b2c8:	20807d26 	beq	r4,r2,180b4c0 <__adddf3+0x7e8>
 180b2cc:	00801004 	movi	r2,64
 180b2d0:	1109c83a 	sub	r4,r2,r4
 180b2d4:	4912983a 	sll	r9,r9,r4
 180b2d8:	498cb03a 	or	r6,r9,r6
 180b2dc:	300cc03a 	cmpne	r6,r6,zero
 180b2e0:	298ab03a 	or	r5,r5,r6
 180b2e4:	0013883a 	mov	r9,zero
 180b2e8:	003f1506 	br	180af40 <__ram_exceptions_end+0xff7fac50>
 180b2ec:	0101ffc4 	movi	r4,2047
 180b2f0:	113f9a1e 	bne	r2,r4,180b15c <__ram_exceptions_end+0xff7fae6c>
 180b2f4:	4811883a 	mov	r8,r9
 180b2f8:	3023883a 	mov	r17,r6
 180b2fc:	1021883a 	mov	r16,r2
 180b300:	3825883a 	mov	r18,r7
 180b304:	003e9306 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b308:	8000161e 	bne	r16,zero,180b364 <__adddf3+0x68c>
 180b30c:	444ab03a 	or	r5,r8,r17
 180b310:	28005126 	beq	r5,zero,180b458 <__adddf3+0x780>
 180b314:	0108303a 	nor	r4,zero,r4
 180b318:	20004d1e 	bne	r4,zero,180b450 <__adddf3+0x778>
 180b31c:	89a3883a 	add	r17,r17,r6
 180b320:	4253883a 	add	r9,r8,r9
 180b324:	898d803a 	cmpltu	r6,r17,r6
 180b328:	3251883a 	add	r8,r6,r9
 180b32c:	1021883a 	mov	r16,r2
 180b330:	003f0806 	br	180af54 <__ram_exceptions_end+0xff7fac64>
 180b334:	1000301e 	bne	r2,zero,180b3f8 <__adddf3+0x720>
 180b338:	4984b03a 	or	r2,r9,r6
 180b33c:	10007126 	beq	r2,zero,180b504 <__adddf3+0x82c>
 180b340:	4811883a 	mov	r8,r9
 180b344:	3023883a 	mov	r17,r6
 180b348:	3825883a 	mov	r18,r7
 180b34c:	0401ffc4 	movi	r16,2047
 180b350:	003e8006 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b354:	4462b03a 	or	r17,r8,r17
 180b358:	8822c03a 	cmpne	r17,r17,zero
 180b35c:	0007883a 	mov	r3,zero
 180b360:	003f8b06 	br	180b190 <__ram_exceptions_end+0xff7faea0>
 180b364:	0141ffc4 	movi	r5,2047
 180b368:	11403b26 	beq	r2,r5,180b458 <__adddf3+0x780>
 180b36c:	0109c83a 	sub	r4,zero,r4
 180b370:	42002034 	orhi	r8,r8,128
 180b374:	01400e04 	movi	r5,56
 180b378:	29006716 	blt	r5,r4,180b518 <__adddf3+0x840>
 180b37c:	014007c4 	movi	r5,31
 180b380:	29007016 	blt	r5,r4,180b544 <__adddf3+0x86c>
 180b384:	01400804 	movi	r5,32
 180b388:	290bc83a 	sub	r5,r5,r4
 180b38c:	4154983a 	sll	r10,r8,r5
 180b390:	890ed83a 	srl	r7,r17,r4
 180b394:	894a983a 	sll	r5,r17,r5
 180b398:	4108d83a 	srl	r4,r8,r4
 180b39c:	51e2b03a 	or	r17,r10,r7
 180b3a0:	280ac03a 	cmpne	r5,r5,zero
 180b3a4:	8962b03a 	or	r17,r17,r5
 180b3a8:	89a3883a 	add	r17,r17,r6
 180b3ac:	2253883a 	add	r9,r4,r9
 180b3b0:	898d803a 	cmpltu	r6,r17,r6
 180b3b4:	3251883a 	add	r8,r6,r9
 180b3b8:	1021883a 	mov	r16,r2
 180b3bc:	003ee506 	br	180af54 <__ram_exceptions_end+0xff7fac64>
 180b3c0:	4984b03a 	or	r2,r9,r6
 180b3c4:	103e6326 	beq	r2,zero,180ad54 <__ram_exceptions_end+0xff7faa64>
 180b3c8:	8987c83a 	sub	r3,r17,r6
 180b3cc:	88c9803a 	cmpltu	r4,r17,r3
 180b3d0:	4245c83a 	sub	r2,r8,r9
 180b3d4:	1105c83a 	sub	r2,r2,r4
 180b3d8:	1100202c 	andhi	r4,r2,128
 180b3dc:	203ebb26 	beq	r4,zero,180aecc <__ram_exceptions_end+0xff7fabdc>
 180b3e0:	3463c83a 	sub	r17,r6,r17
 180b3e4:	4a07c83a 	sub	r3,r9,r8
 180b3e8:	344d803a 	cmpltu	r6,r6,r17
 180b3ec:	1991c83a 	sub	r8,r3,r6
 180b3f0:	3825883a 	mov	r18,r7
 180b3f4:	003e5706 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b3f8:	4984b03a 	or	r2,r9,r6
 180b3fc:	10002e26 	beq	r2,zero,180b4b8 <__adddf3+0x7e0>
 180b400:	4004d0fa 	srli	r2,r8,3
 180b404:	8822d0fa 	srli	r17,r17,3
 180b408:	4010977a 	slli	r8,r8,29
 180b40c:	10c0022c 	andhi	r3,r2,8
 180b410:	4462b03a 	or	r17,r8,r17
 180b414:	18000826 	beq	r3,zero,180b438 <__adddf3+0x760>
 180b418:	4808d0fa 	srli	r4,r9,3
 180b41c:	20c0022c 	andhi	r3,r4,8
 180b420:	1800051e 	bne	r3,zero,180b438 <__adddf3+0x760>
 180b424:	300cd0fa 	srli	r6,r6,3
 180b428:	4806977a 	slli	r3,r9,29
 180b42c:	2005883a 	mov	r2,r4
 180b430:	3825883a 	mov	r18,r7
 180b434:	19a2b03a 	or	r17,r3,r6
 180b438:	8810d77a 	srli	r8,r17,29
 180b43c:	100490fa 	slli	r2,r2,3
 180b440:	882290fa 	slli	r17,r17,3
 180b444:	0401ffc4 	movi	r16,2047
 180b448:	4090b03a 	or	r8,r8,r2
 180b44c:	003e4106 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b450:	0141ffc4 	movi	r5,2047
 180b454:	117fc71e 	bne	r2,r5,180b374 <__ram_exceptions_end+0xff7fb084>
 180b458:	4811883a 	mov	r8,r9
 180b45c:	3023883a 	mov	r17,r6
 180b460:	1021883a 	mov	r16,r2
 180b464:	003e3b06 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b468:	10002f26 	beq	r2,zero,180b528 <__adddf3+0x850>
 180b46c:	4984b03a 	or	r2,r9,r6
 180b470:	10001126 	beq	r2,zero,180b4b8 <__adddf3+0x7e0>
 180b474:	4004d0fa 	srli	r2,r8,3
 180b478:	8822d0fa 	srli	r17,r17,3
 180b47c:	4010977a 	slli	r8,r8,29
 180b480:	10c0022c 	andhi	r3,r2,8
 180b484:	4462b03a 	or	r17,r8,r17
 180b488:	183feb26 	beq	r3,zero,180b438 <__ram_exceptions_end+0xff7fb148>
 180b48c:	4808d0fa 	srli	r4,r9,3
 180b490:	20c0022c 	andhi	r3,r4,8
 180b494:	183fe81e 	bne	r3,zero,180b438 <__ram_exceptions_end+0xff7fb148>
 180b498:	300cd0fa 	srli	r6,r6,3
 180b49c:	4806977a 	slli	r3,r9,29
 180b4a0:	2005883a 	mov	r2,r4
 180b4a4:	19a2b03a 	or	r17,r3,r6
 180b4a8:	003fe306 	br	180b438 <__ram_exceptions_end+0xff7fb148>
 180b4ac:	0011883a 	mov	r8,zero
 180b4b0:	0005883a 	mov	r2,zero
 180b4b4:	003e3f06 	br	180adb4 <__ram_exceptions_end+0xff7faac4>
 180b4b8:	0401ffc4 	movi	r16,2047
 180b4bc:	003e2506 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b4c0:	0013883a 	mov	r9,zero
 180b4c4:	003f8406 	br	180b2d8 <__ram_exceptions_end+0xff7fafe8>
 180b4c8:	0005883a 	mov	r2,zero
 180b4cc:	0007883a 	mov	r3,zero
 180b4d0:	003e8906 	br	180aef8 <__ram_exceptions_end+0xff7fac08>
 180b4d4:	197ff804 	addi	r5,r3,-32
 180b4d8:	01000804 	movi	r4,32
 180b4dc:	414ad83a 	srl	r5,r8,r5
 180b4e0:	19002426 	beq	r3,r4,180b574 <__adddf3+0x89c>
 180b4e4:	01001004 	movi	r4,64
 180b4e8:	20c7c83a 	sub	r3,r4,r3
 180b4ec:	40c6983a 	sll	r3,r8,r3
 180b4f0:	1c46b03a 	or	r3,r3,r17
 180b4f4:	1806c03a 	cmpne	r3,r3,zero
 180b4f8:	28e2b03a 	or	r17,r5,r3
 180b4fc:	0007883a 	mov	r3,zero
 180b500:	003f2306 	br	180b190 <__ram_exceptions_end+0xff7faea0>
 180b504:	0007883a 	mov	r3,zero
 180b508:	5811883a 	mov	r8,r11
 180b50c:	00bfffc4 	movi	r2,-1
 180b510:	0401ffc4 	movi	r16,2047
 180b514:	003e7806 	br	180aef8 <__ram_exceptions_end+0xff7fac08>
 180b518:	4462b03a 	or	r17,r8,r17
 180b51c:	8822c03a 	cmpne	r17,r17,zero
 180b520:	0009883a 	mov	r4,zero
 180b524:	003fa006 	br	180b3a8 <__ram_exceptions_end+0xff7fb0b8>
 180b528:	4811883a 	mov	r8,r9
 180b52c:	3023883a 	mov	r17,r6
 180b530:	0401ffc4 	movi	r16,2047
 180b534:	003e0706 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b538:	4811883a 	mov	r8,r9
 180b53c:	3023883a 	mov	r17,r6
 180b540:	003e0406 	br	180ad54 <__ram_exceptions_end+0xff7faa64>
 180b544:	21fff804 	addi	r7,r4,-32
 180b548:	01400804 	movi	r5,32
 180b54c:	41ced83a 	srl	r7,r8,r7
 180b550:	21400a26 	beq	r4,r5,180b57c <__adddf3+0x8a4>
 180b554:	01401004 	movi	r5,64
 180b558:	2909c83a 	sub	r4,r5,r4
 180b55c:	4108983a 	sll	r4,r8,r4
 180b560:	2448b03a 	or	r4,r4,r17
 180b564:	2008c03a 	cmpne	r4,r4,zero
 180b568:	3922b03a 	or	r17,r7,r4
 180b56c:	0009883a 	mov	r4,zero
 180b570:	003f8d06 	br	180b3a8 <__ram_exceptions_end+0xff7fb0b8>
 180b574:	0007883a 	mov	r3,zero
 180b578:	003fdd06 	br	180b4f0 <__ram_exceptions_end+0xff7fb200>
 180b57c:	0009883a 	mov	r4,zero
 180b580:	003ff706 	br	180b560 <__ram_exceptions_end+0xff7fb270>

0180b584 <__divdf3>:
 180b584:	defff204 	addi	sp,sp,-56
 180b588:	dd400915 	stw	r21,36(sp)
 180b58c:	282ad53a 	srli	r21,r5,20
 180b590:	dd000815 	stw	r20,32(sp)
 180b594:	2828d7fa 	srli	r20,r5,31
 180b598:	dc000415 	stw	r16,16(sp)
 180b59c:	04000434 	movhi	r16,16
 180b5a0:	df000c15 	stw	fp,48(sp)
 180b5a4:	843fffc4 	addi	r16,r16,-1
 180b5a8:	dfc00d15 	stw	ra,52(sp)
 180b5ac:	ddc00b15 	stw	r23,44(sp)
 180b5b0:	dd800a15 	stw	r22,40(sp)
 180b5b4:	dcc00715 	stw	r19,28(sp)
 180b5b8:	dc800615 	stw	r18,24(sp)
 180b5bc:	dc400515 	stw	r17,20(sp)
 180b5c0:	ad41ffcc 	andi	r21,r21,2047
 180b5c4:	2c20703a 	and	r16,r5,r16
 180b5c8:	a7003fcc 	andi	fp,r20,255
 180b5cc:	a8006126 	beq	r21,zero,180b754 <__divdf3+0x1d0>
 180b5d0:	0081ffc4 	movi	r2,2047
 180b5d4:	2025883a 	mov	r18,r4
 180b5d8:	a8803726 	beq	r21,r2,180b6b8 <__divdf3+0x134>
 180b5dc:	80800434 	orhi	r2,r16,16
 180b5e0:	100490fa 	slli	r2,r2,3
 180b5e4:	2020d77a 	srli	r16,r4,29
 180b5e8:	202490fa 	slli	r18,r4,3
 180b5ec:	ad7f0044 	addi	r21,r21,-1023
 180b5f0:	80a0b03a 	or	r16,r16,r2
 180b5f4:	0027883a 	mov	r19,zero
 180b5f8:	0013883a 	mov	r9,zero
 180b5fc:	3804d53a 	srli	r2,r7,20
 180b600:	382cd7fa 	srli	r22,r7,31
 180b604:	04400434 	movhi	r17,16
 180b608:	8c7fffc4 	addi	r17,r17,-1
 180b60c:	1081ffcc 	andi	r2,r2,2047
 180b610:	3011883a 	mov	r8,r6
 180b614:	3c62703a 	and	r17,r7,r17
 180b618:	b5c03fcc 	andi	r23,r22,255
 180b61c:	10006c26 	beq	r2,zero,180b7d0 <__divdf3+0x24c>
 180b620:	00c1ffc4 	movi	r3,2047
 180b624:	10c06426 	beq	r2,r3,180b7b8 <__divdf3+0x234>
 180b628:	88c00434 	orhi	r3,r17,16
 180b62c:	180690fa 	slli	r3,r3,3
 180b630:	3022d77a 	srli	r17,r6,29
 180b634:	301090fa 	slli	r8,r6,3
 180b638:	10bf0044 	addi	r2,r2,-1023
 180b63c:	88e2b03a 	or	r17,r17,r3
 180b640:	000f883a 	mov	r7,zero
 180b644:	a58cf03a 	xor	r6,r20,r22
 180b648:	3cc8b03a 	or	r4,r7,r19
 180b64c:	a8abc83a 	sub	r21,r21,r2
 180b650:	008003c4 	movi	r2,15
 180b654:	3007883a 	mov	r3,r6
 180b658:	34c03fcc 	andi	r19,r6,255
 180b65c:	11009036 	bltu	r2,r4,180b8a0 <__divdf3+0x31c>
 180b660:	200890ba 	slli	r4,r4,2
 180b664:	00806074 	movhi	r2,385
 180b668:	10ad9e04 	addi	r2,r2,-18824
 180b66c:	2089883a 	add	r4,r4,r2
 180b670:	20800017 	ldw	r2,0(r4)
 180b674:	1000683a 	jmp	r2
 180b678:	0180b8a0 	cmpeqi	r6,zero,738
 180b67c:	0180b6f0 	cmpltui	r6,zero,731
 180b680:	0180b890 	cmplti	r6,zero,738
 180b684:	0180b6e4 	muli	r6,zero,731
 180b688:	0180b890 	cmplti	r6,zero,738
 180b68c:	0180b864 	muli	r6,zero,737
 180b690:	0180b890 	cmplti	r6,zero,738
 180b694:	0180b6e4 	muli	r6,zero,731
 180b698:	0180b6f0 	cmpltui	r6,zero,731
 180b69c:	0180b6f0 	cmpltui	r6,zero,731
 180b6a0:	0180b864 	muli	r6,zero,737
 180b6a4:	0180b6e4 	muli	r6,zero,731
 180b6a8:	0180b6d4 	movui	r6,731
 180b6ac:	0180b6d4 	movui	r6,731
 180b6b0:	0180b6d4 	movui	r6,731
 180b6b4:	0180bb84 	movi	r6,750
 180b6b8:	2404b03a 	or	r2,r4,r16
 180b6bc:	1000661e 	bne	r2,zero,180b858 <__divdf3+0x2d4>
 180b6c0:	04c00204 	movi	r19,8
 180b6c4:	0021883a 	mov	r16,zero
 180b6c8:	0025883a 	mov	r18,zero
 180b6cc:	02400084 	movi	r9,2
 180b6d0:	003fca06 	br	180b5fc <__ram_exceptions_end+0xff7fb30c>
 180b6d4:	8023883a 	mov	r17,r16
 180b6d8:	9011883a 	mov	r8,r18
 180b6dc:	e02f883a 	mov	r23,fp
 180b6e0:	480f883a 	mov	r7,r9
 180b6e4:	00800084 	movi	r2,2
 180b6e8:	3881311e 	bne	r7,r2,180bbb0 <__divdf3+0x62c>
 180b6ec:	b827883a 	mov	r19,r23
 180b6f0:	98c0004c 	andi	r3,r19,1
 180b6f4:	0081ffc4 	movi	r2,2047
 180b6f8:	000b883a 	mov	r5,zero
 180b6fc:	0025883a 	mov	r18,zero
 180b700:	1004953a 	slli	r2,r2,20
 180b704:	18c03fcc 	andi	r3,r3,255
 180b708:	04400434 	movhi	r17,16
 180b70c:	8c7fffc4 	addi	r17,r17,-1
 180b710:	180697fa 	slli	r3,r3,31
 180b714:	2c4a703a 	and	r5,r5,r17
 180b718:	288ab03a 	or	r5,r5,r2
 180b71c:	28c6b03a 	or	r3,r5,r3
 180b720:	9005883a 	mov	r2,r18
 180b724:	dfc00d17 	ldw	ra,52(sp)
 180b728:	df000c17 	ldw	fp,48(sp)
 180b72c:	ddc00b17 	ldw	r23,44(sp)
 180b730:	dd800a17 	ldw	r22,40(sp)
 180b734:	dd400917 	ldw	r21,36(sp)
 180b738:	dd000817 	ldw	r20,32(sp)
 180b73c:	dcc00717 	ldw	r19,28(sp)
 180b740:	dc800617 	ldw	r18,24(sp)
 180b744:	dc400517 	ldw	r17,20(sp)
 180b748:	dc000417 	ldw	r16,16(sp)
 180b74c:	dec00e04 	addi	sp,sp,56
 180b750:	f800283a 	ret
 180b754:	2404b03a 	or	r2,r4,r16
 180b758:	2027883a 	mov	r19,r4
 180b75c:	10003926 	beq	r2,zero,180b844 <__divdf3+0x2c0>
 180b760:	80012e26 	beq	r16,zero,180bc1c <__divdf3+0x698>
 180b764:	8009883a 	mov	r4,r16
 180b768:	d9800315 	stw	r6,12(sp)
 180b76c:	d9c00215 	stw	r7,8(sp)
 180b770:	180d2dc0 	call	180d2dc <__clzsi2>
 180b774:	d9800317 	ldw	r6,12(sp)
 180b778:	d9c00217 	ldw	r7,8(sp)
 180b77c:	113ffd44 	addi	r4,r2,-11
 180b780:	00c00704 	movi	r3,28
 180b784:	19012116 	blt	r3,r4,180bc0c <__divdf3+0x688>
 180b788:	00c00744 	movi	r3,29
 180b78c:	147ffe04 	addi	r17,r2,-8
 180b790:	1907c83a 	sub	r3,r3,r4
 180b794:	8460983a 	sll	r16,r16,r17
 180b798:	98c6d83a 	srl	r3,r19,r3
 180b79c:	9c64983a 	sll	r18,r19,r17
 180b7a0:	1c20b03a 	or	r16,r3,r16
 180b7a4:	1080fcc4 	addi	r2,r2,1011
 180b7a8:	00abc83a 	sub	r21,zero,r2
 180b7ac:	0027883a 	mov	r19,zero
 180b7b0:	0013883a 	mov	r9,zero
 180b7b4:	003f9106 	br	180b5fc <__ram_exceptions_end+0xff7fb30c>
 180b7b8:	3446b03a 	or	r3,r6,r17
 180b7bc:	18001f1e 	bne	r3,zero,180b83c <__divdf3+0x2b8>
 180b7c0:	0023883a 	mov	r17,zero
 180b7c4:	0011883a 	mov	r8,zero
 180b7c8:	01c00084 	movi	r7,2
 180b7cc:	003f9d06 	br	180b644 <__ram_exceptions_end+0xff7fb354>
 180b7d0:	3446b03a 	or	r3,r6,r17
 180b7d4:	18001526 	beq	r3,zero,180b82c <__divdf3+0x2a8>
 180b7d8:	88011b26 	beq	r17,zero,180bc48 <__divdf3+0x6c4>
 180b7dc:	8809883a 	mov	r4,r17
 180b7e0:	d9800315 	stw	r6,12(sp)
 180b7e4:	da400115 	stw	r9,4(sp)
 180b7e8:	180d2dc0 	call	180d2dc <__clzsi2>
 180b7ec:	d9800317 	ldw	r6,12(sp)
 180b7f0:	da400117 	ldw	r9,4(sp)
 180b7f4:	113ffd44 	addi	r4,r2,-11
 180b7f8:	00c00704 	movi	r3,28
 180b7fc:	19010e16 	blt	r3,r4,180bc38 <__divdf3+0x6b4>
 180b800:	00c00744 	movi	r3,29
 180b804:	123ffe04 	addi	r8,r2,-8
 180b808:	1907c83a 	sub	r3,r3,r4
 180b80c:	8a22983a 	sll	r17,r17,r8
 180b810:	30c6d83a 	srl	r3,r6,r3
 180b814:	3210983a 	sll	r8,r6,r8
 180b818:	1c62b03a 	or	r17,r3,r17
 180b81c:	1080fcc4 	addi	r2,r2,1011
 180b820:	0085c83a 	sub	r2,zero,r2
 180b824:	000f883a 	mov	r7,zero
 180b828:	003f8606 	br	180b644 <__ram_exceptions_end+0xff7fb354>
 180b82c:	0023883a 	mov	r17,zero
 180b830:	0011883a 	mov	r8,zero
 180b834:	01c00044 	movi	r7,1
 180b838:	003f8206 	br	180b644 <__ram_exceptions_end+0xff7fb354>
 180b83c:	01c000c4 	movi	r7,3
 180b840:	003f8006 	br	180b644 <__ram_exceptions_end+0xff7fb354>
 180b844:	04c00104 	movi	r19,4
 180b848:	0021883a 	mov	r16,zero
 180b84c:	0025883a 	mov	r18,zero
 180b850:	02400044 	movi	r9,1
 180b854:	003f6906 	br	180b5fc <__ram_exceptions_end+0xff7fb30c>
 180b858:	04c00304 	movi	r19,12
 180b85c:	024000c4 	movi	r9,3
 180b860:	003f6606 	br	180b5fc <__ram_exceptions_end+0xff7fb30c>
 180b864:	01400434 	movhi	r5,16
 180b868:	0007883a 	mov	r3,zero
 180b86c:	297fffc4 	addi	r5,r5,-1
 180b870:	04bfffc4 	movi	r18,-1
 180b874:	0081ffc4 	movi	r2,2047
 180b878:	003fa106 	br	180b700 <__ram_exceptions_end+0xff7fb410>
 180b87c:	00c00044 	movi	r3,1
 180b880:	1887c83a 	sub	r3,r3,r2
 180b884:	01000e04 	movi	r4,56
 180b888:	20c1210e 	bge	r4,r3,180bd10 <__divdf3+0x78c>
 180b88c:	98c0004c 	andi	r3,r19,1
 180b890:	0005883a 	mov	r2,zero
 180b894:	000b883a 	mov	r5,zero
 180b898:	0025883a 	mov	r18,zero
 180b89c:	003f9806 	br	180b700 <__ram_exceptions_end+0xff7fb410>
 180b8a0:	8c00fd36 	bltu	r17,r16,180bc98 <__divdf3+0x714>
 180b8a4:	8440fb26 	beq	r16,r17,180bc94 <__divdf3+0x710>
 180b8a8:	8007883a 	mov	r3,r16
 180b8ac:	ad7fffc4 	addi	r21,r21,-1
 180b8b0:	0021883a 	mov	r16,zero
 180b8b4:	4004d63a 	srli	r2,r8,24
 180b8b8:	8822923a 	slli	r17,r17,8
 180b8bc:	1809883a 	mov	r4,r3
 180b8c0:	402c923a 	slli	r22,r8,8
 180b8c4:	88b8b03a 	or	fp,r17,r2
 180b8c8:	e028d43a 	srli	r20,fp,16
 180b8cc:	d8c00015 	stw	r3,0(sp)
 180b8d0:	e5ffffcc 	andi	r23,fp,65535
 180b8d4:	a00b883a 	mov	r5,r20
 180b8d8:	180ac1c0 	call	180ac1c <__udivsi3>
 180b8dc:	d8c00017 	ldw	r3,0(sp)
 180b8e0:	a00b883a 	mov	r5,r20
 180b8e4:	d8800315 	stw	r2,12(sp)
 180b8e8:	1809883a 	mov	r4,r3
 180b8ec:	180ac800 	call	180ac80 <__umodsi3>
 180b8f0:	d9800317 	ldw	r6,12(sp)
 180b8f4:	1006943a 	slli	r3,r2,16
 180b8f8:	9004d43a 	srli	r2,r18,16
 180b8fc:	b9a3383a 	mul	r17,r23,r6
 180b900:	10c4b03a 	or	r2,r2,r3
 180b904:	1440062e 	bgeu	r2,r17,180b920 <__divdf3+0x39c>
 180b908:	1705883a 	add	r2,r2,fp
 180b90c:	30ffffc4 	addi	r3,r6,-1
 180b910:	1700ee36 	bltu	r2,fp,180bccc <__divdf3+0x748>
 180b914:	1440ed2e 	bgeu	r2,r17,180bccc <__divdf3+0x748>
 180b918:	31bfff84 	addi	r6,r6,-2
 180b91c:	1705883a 	add	r2,r2,fp
 180b920:	1463c83a 	sub	r17,r2,r17
 180b924:	a00b883a 	mov	r5,r20
 180b928:	8809883a 	mov	r4,r17
 180b92c:	d9800315 	stw	r6,12(sp)
 180b930:	180ac1c0 	call	180ac1c <__udivsi3>
 180b934:	a00b883a 	mov	r5,r20
 180b938:	8809883a 	mov	r4,r17
 180b93c:	d8800215 	stw	r2,8(sp)
 180b940:	180ac800 	call	180ac80 <__umodsi3>
 180b944:	d9c00217 	ldw	r7,8(sp)
 180b948:	1004943a 	slli	r2,r2,16
 180b94c:	94bfffcc 	andi	r18,r18,65535
 180b950:	b9d1383a 	mul	r8,r23,r7
 180b954:	90a4b03a 	or	r18,r18,r2
 180b958:	d9800317 	ldw	r6,12(sp)
 180b95c:	9200062e 	bgeu	r18,r8,180b978 <__divdf3+0x3f4>
 180b960:	9725883a 	add	r18,r18,fp
 180b964:	38bfffc4 	addi	r2,r7,-1
 180b968:	9700d636 	bltu	r18,fp,180bcc4 <__divdf3+0x740>
 180b96c:	9200d52e 	bgeu	r18,r8,180bcc4 <__divdf3+0x740>
 180b970:	39ffff84 	addi	r7,r7,-2
 180b974:	9725883a 	add	r18,r18,fp
 180b978:	3004943a 	slli	r2,r6,16
 180b97c:	b012d43a 	srli	r9,r22,16
 180b980:	b1bfffcc 	andi	r6,r22,65535
 180b984:	11e2b03a 	or	r17,r2,r7
 180b988:	8806d43a 	srli	r3,r17,16
 180b98c:	893fffcc 	andi	r4,r17,65535
 180b990:	218b383a 	mul	r5,r4,r6
 180b994:	30c5383a 	mul	r2,r6,r3
 180b998:	2249383a 	mul	r4,r4,r9
 180b99c:	280ed43a 	srli	r7,r5,16
 180b9a0:	9225c83a 	sub	r18,r18,r8
 180b9a4:	2089883a 	add	r4,r4,r2
 180b9a8:	3909883a 	add	r4,r7,r4
 180b9ac:	1a47383a 	mul	r3,r3,r9
 180b9b0:	2080022e 	bgeu	r4,r2,180b9bc <__divdf3+0x438>
 180b9b4:	00800074 	movhi	r2,1
 180b9b8:	1887883a 	add	r3,r3,r2
 180b9bc:	2004d43a 	srli	r2,r4,16
 180b9c0:	2008943a 	slli	r4,r4,16
 180b9c4:	297fffcc 	andi	r5,r5,65535
 180b9c8:	10c7883a 	add	r3,r2,r3
 180b9cc:	2149883a 	add	r4,r4,r5
 180b9d0:	90c0a536 	bltu	r18,r3,180bc68 <__divdf3+0x6e4>
 180b9d4:	90c0bf26 	beq	r18,r3,180bcd4 <__divdf3+0x750>
 180b9d8:	90c7c83a 	sub	r3,r18,r3
 180b9dc:	810fc83a 	sub	r7,r16,r4
 180b9e0:	81e5803a 	cmpltu	r18,r16,r7
 180b9e4:	1ca5c83a 	sub	r18,r3,r18
 180b9e8:	e480c126 	beq	fp,r18,180bcf0 <__divdf3+0x76c>
 180b9ec:	a00b883a 	mov	r5,r20
 180b9f0:	9009883a 	mov	r4,r18
 180b9f4:	d9800315 	stw	r6,12(sp)
 180b9f8:	d9c00215 	stw	r7,8(sp)
 180b9fc:	da400115 	stw	r9,4(sp)
 180ba00:	180ac1c0 	call	180ac1c <__udivsi3>
 180ba04:	a00b883a 	mov	r5,r20
 180ba08:	9009883a 	mov	r4,r18
 180ba0c:	d8800015 	stw	r2,0(sp)
 180ba10:	180ac800 	call	180ac80 <__umodsi3>
 180ba14:	d9c00217 	ldw	r7,8(sp)
 180ba18:	da000017 	ldw	r8,0(sp)
 180ba1c:	1006943a 	slli	r3,r2,16
 180ba20:	3804d43a 	srli	r2,r7,16
 180ba24:	ba21383a 	mul	r16,r23,r8
 180ba28:	d9800317 	ldw	r6,12(sp)
 180ba2c:	10c4b03a 	or	r2,r2,r3
 180ba30:	da400117 	ldw	r9,4(sp)
 180ba34:	1400062e 	bgeu	r2,r16,180ba50 <__divdf3+0x4cc>
 180ba38:	1705883a 	add	r2,r2,fp
 180ba3c:	40ffffc4 	addi	r3,r8,-1
 180ba40:	1700ad36 	bltu	r2,fp,180bcf8 <__divdf3+0x774>
 180ba44:	1400ac2e 	bgeu	r2,r16,180bcf8 <__divdf3+0x774>
 180ba48:	423fff84 	addi	r8,r8,-2
 180ba4c:	1705883a 	add	r2,r2,fp
 180ba50:	1421c83a 	sub	r16,r2,r16
 180ba54:	a00b883a 	mov	r5,r20
 180ba58:	8009883a 	mov	r4,r16
 180ba5c:	d9800315 	stw	r6,12(sp)
 180ba60:	d9c00215 	stw	r7,8(sp)
 180ba64:	da000015 	stw	r8,0(sp)
 180ba68:	da400115 	stw	r9,4(sp)
 180ba6c:	180ac1c0 	call	180ac1c <__udivsi3>
 180ba70:	8009883a 	mov	r4,r16
 180ba74:	a00b883a 	mov	r5,r20
 180ba78:	1025883a 	mov	r18,r2
 180ba7c:	180ac800 	call	180ac80 <__umodsi3>
 180ba80:	d9c00217 	ldw	r7,8(sp)
 180ba84:	1004943a 	slli	r2,r2,16
 180ba88:	bcaf383a 	mul	r23,r23,r18
 180ba8c:	393fffcc 	andi	r4,r7,65535
 180ba90:	2088b03a 	or	r4,r4,r2
 180ba94:	d9800317 	ldw	r6,12(sp)
 180ba98:	da000017 	ldw	r8,0(sp)
 180ba9c:	da400117 	ldw	r9,4(sp)
 180baa0:	25c0062e 	bgeu	r4,r23,180babc <__divdf3+0x538>
 180baa4:	2709883a 	add	r4,r4,fp
 180baa8:	90bfffc4 	addi	r2,r18,-1
 180baac:	27009436 	bltu	r4,fp,180bd00 <__divdf3+0x77c>
 180bab0:	25c0932e 	bgeu	r4,r23,180bd00 <__divdf3+0x77c>
 180bab4:	94bfff84 	addi	r18,r18,-2
 180bab8:	2709883a 	add	r4,r4,fp
 180babc:	4004943a 	slli	r2,r8,16
 180bac0:	25efc83a 	sub	r23,r4,r23
 180bac4:	1490b03a 	or	r8,r2,r18
 180bac8:	4008d43a 	srli	r4,r8,16
 180bacc:	40ffffcc 	andi	r3,r8,65535
 180bad0:	30c5383a 	mul	r2,r6,r3
 180bad4:	1a47383a 	mul	r3,r3,r9
 180bad8:	310d383a 	mul	r6,r6,r4
 180badc:	100ad43a 	srli	r5,r2,16
 180bae0:	4913383a 	mul	r9,r9,r4
 180bae4:	1987883a 	add	r3,r3,r6
 180bae8:	28c7883a 	add	r3,r5,r3
 180baec:	1980022e 	bgeu	r3,r6,180baf8 <__divdf3+0x574>
 180baf0:	01000074 	movhi	r4,1
 180baf4:	4913883a 	add	r9,r9,r4
 180baf8:	1808d43a 	srli	r4,r3,16
 180bafc:	1806943a 	slli	r3,r3,16
 180bb00:	10bfffcc 	andi	r2,r2,65535
 180bb04:	2253883a 	add	r9,r4,r9
 180bb08:	1887883a 	add	r3,r3,r2
 180bb0c:	ba403836 	bltu	r23,r9,180bbf0 <__divdf3+0x66c>
 180bb10:	ba403626 	beq	r23,r9,180bbec <__divdf3+0x668>
 180bb14:	42000054 	ori	r8,r8,1
 180bb18:	a880ffc4 	addi	r2,r21,1023
 180bb1c:	00bf570e 	bge	zero,r2,180b87c <__ram_exceptions_end+0xff7fb58c>
 180bb20:	40c001cc 	andi	r3,r8,7
 180bb24:	18000726 	beq	r3,zero,180bb44 <__divdf3+0x5c0>
 180bb28:	40c003cc 	andi	r3,r8,15
 180bb2c:	01000104 	movi	r4,4
 180bb30:	19000426 	beq	r3,r4,180bb44 <__divdf3+0x5c0>
 180bb34:	4107883a 	add	r3,r8,r4
 180bb38:	1a11803a 	cmpltu	r8,r3,r8
 180bb3c:	8a23883a 	add	r17,r17,r8
 180bb40:	1811883a 	mov	r8,r3
 180bb44:	88c0402c 	andhi	r3,r17,256
 180bb48:	18000426 	beq	r3,zero,180bb5c <__divdf3+0x5d8>
 180bb4c:	00ffc034 	movhi	r3,65280
 180bb50:	18ffffc4 	addi	r3,r3,-1
 180bb54:	a8810004 	addi	r2,r21,1024
 180bb58:	88e2703a 	and	r17,r17,r3
 180bb5c:	00c1ff84 	movi	r3,2046
 180bb60:	18bee316 	blt	r3,r2,180b6f0 <__ram_exceptions_end+0xff7fb400>
 180bb64:	8824977a 	slli	r18,r17,29
 180bb68:	4010d0fa 	srli	r8,r8,3
 180bb6c:	8822927a 	slli	r17,r17,9
 180bb70:	1081ffcc 	andi	r2,r2,2047
 180bb74:	9224b03a 	or	r18,r18,r8
 180bb78:	880ad33a 	srli	r5,r17,12
 180bb7c:	98c0004c 	andi	r3,r19,1
 180bb80:	003edf06 	br	180b700 <__ram_exceptions_end+0xff7fb410>
 180bb84:	8080022c 	andhi	r2,r16,8
 180bb88:	10001226 	beq	r2,zero,180bbd4 <__divdf3+0x650>
 180bb8c:	8880022c 	andhi	r2,r17,8
 180bb90:	1000101e 	bne	r2,zero,180bbd4 <__divdf3+0x650>
 180bb94:	00800434 	movhi	r2,16
 180bb98:	89400234 	orhi	r5,r17,8
 180bb9c:	10bfffc4 	addi	r2,r2,-1
 180bba0:	b007883a 	mov	r3,r22
 180bba4:	288a703a 	and	r5,r5,r2
 180bba8:	4025883a 	mov	r18,r8
 180bbac:	003f3106 	br	180b874 <__ram_exceptions_end+0xff7fb584>
 180bbb0:	008000c4 	movi	r2,3
 180bbb4:	3880a626 	beq	r7,r2,180be50 <__divdf3+0x8cc>
 180bbb8:	00800044 	movi	r2,1
 180bbbc:	3880521e 	bne	r7,r2,180bd08 <__divdf3+0x784>
 180bbc0:	b807883a 	mov	r3,r23
 180bbc4:	0005883a 	mov	r2,zero
 180bbc8:	000b883a 	mov	r5,zero
 180bbcc:	0025883a 	mov	r18,zero
 180bbd0:	003ecb06 	br	180b700 <__ram_exceptions_end+0xff7fb410>
 180bbd4:	00800434 	movhi	r2,16
 180bbd8:	81400234 	orhi	r5,r16,8
 180bbdc:	10bfffc4 	addi	r2,r2,-1
 180bbe0:	a007883a 	mov	r3,r20
 180bbe4:	288a703a 	and	r5,r5,r2
 180bbe8:	003f2206 	br	180b874 <__ram_exceptions_end+0xff7fb584>
 180bbec:	183fca26 	beq	r3,zero,180bb18 <__ram_exceptions_end+0xff7fb828>
 180bbf0:	e5ef883a 	add	r23,fp,r23
 180bbf4:	40bfffc4 	addi	r2,r8,-1
 180bbf8:	bf00392e 	bgeu	r23,fp,180bce0 <__divdf3+0x75c>
 180bbfc:	1011883a 	mov	r8,r2
 180bc00:	ba7fc41e 	bne	r23,r9,180bb14 <__ram_exceptions_end+0xff7fb824>
 180bc04:	b0ffc31e 	bne	r22,r3,180bb14 <__ram_exceptions_end+0xff7fb824>
 180bc08:	003fc306 	br	180bb18 <__ram_exceptions_end+0xff7fb828>
 180bc0c:	143ff604 	addi	r16,r2,-40
 180bc10:	9c20983a 	sll	r16,r19,r16
 180bc14:	0025883a 	mov	r18,zero
 180bc18:	003ee206 	br	180b7a4 <__ram_exceptions_end+0xff7fb4b4>
 180bc1c:	d9800315 	stw	r6,12(sp)
 180bc20:	d9c00215 	stw	r7,8(sp)
 180bc24:	180d2dc0 	call	180d2dc <__clzsi2>
 180bc28:	10800804 	addi	r2,r2,32
 180bc2c:	d9c00217 	ldw	r7,8(sp)
 180bc30:	d9800317 	ldw	r6,12(sp)
 180bc34:	003ed106 	br	180b77c <__ram_exceptions_end+0xff7fb48c>
 180bc38:	147ff604 	addi	r17,r2,-40
 180bc3c:	3462983a 	sll	r17,r6,r17
 180bc40:	0011883a 	mov	r8,zero
 180bc44:	003ef506 	br	180b81c <__ram_exceptions_end+0xff7fb52c>
 180bc48:	3009883a 	mov	r4,r6
 180bc4c:	d9800315 	stw	r6,12(sp)
 180bc50:	da400115 	stw	r9,4(sp)
 180bc54:	180d2dc0 	call	180d2dc <__clzsi2>
 180bc58:	10800804 	addi	r2,r2,32
 180bc5c:	da400117 	ldw	r9,4(sp)
 180bc60:	d9800317 	ldw	r6,12(sp)
 180bc64:	003ee306 	br	180b7f4 <__ram_exceptions_end+0xff7fb504>
 180bc68:	85a1883a 	add	r16,r16,r22
 180bc6c:	8585803a 	cmpltu	r2,r16,r22
 180bc70:	1705883a 	add	r2,r2,fp
 180bc74:	14a5883a 	add	r18,r2,r18
 180bc78:	88bfffc4 	addi	r2,r17,-1
 180bc7c:	e4800c2e 	bgeu	fp,r18,180bcb0 <__divdf3+0x72c>
 180bc80:	90c03e36 	bltu	r18,r3,180bd7c <__divdf3+0x7f8>
 180bc84:	1c806926 	beq	r3,r18,180be2c <__divdf3+0x8a8>
 180bc88:	90c7c83a 	sub	r3,r18,r3
 180bc8c:	1023883a 	mov	r17,r2
 180bc90:	003f5206 	br	180b9dc <__ram_exceptions_end+0xff7fb6ec>
 180bc94:	923f0436 	bltu	r18,r8,180b8a8 <__ram_exceptions_end+0xff7fb5b8>
 180bc98:	800897fa 	slli	r4,r16,31
 180bc9c:	9004d07a 	srli	r2,r18,1
 180bca0:	8006d07a 	srli	r3,r16,1
 180bca4:	902097fa 	slli	r16,r18,31
 180bca8:	20a4b03a 	or	r18,r4,r2
 180bcac:	003f0106 	br	180b8b4 <__ram_exceptions_end+0xff7fb5c4>
 180bcb0:	e4bff51e 	bne	fp,r18,180bc88 <__ram_exceptions_end+0xff7fb998>
 180bcb4:	85bff22e 	bgeu	r16,r22,180bc80 <__ram_exceptions_end+0xff7fb990>
 180bcb8:	e0c7c83a 	sub	r3,fp,r3
 180bcbc:	1023883a 	mov	r17,r2
 180bcc0:	003f4606 	br	180b9dc <__ram_exceptions_end+0xff7fb6ec>
 180bcc4:	100f883a 	mov	r7,r2
 180bcc8:	003f2b06 	br	180b978 <__ram_exceptions_end+0xff7fb688>
 180bccc:	180d883a 	mov	r6,r3
 180bcd0:	003f1306 	br	180b920 <__ram_exceptions_end+0xff7fb630>
 180bcd4:	813fe436 	bltu	r16,r4,180bc68 <__ram_exceptions_end+0xff7fb978>
 180bcd8:	0007883a 	mov	r3,zero
 180bcdc:	003f3f06 	br	180b9dc <__ram_exceptions_end+0xff7fb6ec>
 180bce0:	ba402c36 	bltu	r23,r9,180bd94 <__divdf3+0x810>
 180bce4:	4dc05426 	beq	r9,r23,180be38 <__divdf3+0x8b4>
 180bce8:	1011883a 	mov	r8,r2
 180bcec:	003f8906 	br	180bb14 <__ram_exceptions_end+0xff7fb824>
 180bcf0:	023fffc4 	movi	r8,-1
 180bcf4:	003f8806 	br	180bb18 <__ram_exceptions_end+0xff7fb828>
 180bcf8:	1811883a 	mov	r8,r3
 180bcfc:	003f5406 	br	180ba50 <__ram_exceptions_end+0xff7fb760>
 180bd00:	1025883a 	mov	r18,r2
 180bd04:	003f6d06 	br	180babc <__ram_exceptions_end+0xff7fb7cc>
 180bd08:	b827883a 	mov	r19,r23
 180bd0c:	003f8206 	br	180bb18 <__ram_exceptions_end+0xff7fb828>
 180bd10:	010007c4 	movi	r4,31
 180bd14:	20c02616 	blt	r4,r3,180bdb0 <__divdf3+0x82c>
 180bd18:	00800804 	movi	r2,32
 180bd1c:	10c5c83a 	sub	r2,r2,r3
 180bd20:	888a983a 	sll	r5,r17,r2
 180bd24:	40c8d83a 	srl	r4,r8,r3
 180bd28:	4084983a 	sll	r2,r8,r2
 180bd2c:	88e2d83a 	srl	r17,r17,r3
 180bd30:	2906b03a 	or	r3,r5,r4
 180bd34:	1004c03a 	cmpne	r2,r2,zero
 180bd38:	1886b03a 	or	r3,r3,r2
 180bd3c:	188001cc 	andi	r2,r3,7
 180bd40:	10000726 	beq	r2,zero,180bd60 <__divdf3+0x7dc>
 180bd44:	188003cc 	andi	r2,r3,15
 180bd48:	01000104 	movi	r4,4
 180bd4c:	11000426 	beq	r2,r4,180bd60 <__divdf3+0x7dc>
 180bd50:	1805883a 	mov	r2,r3
 180bd54:	10c00104 	addi	r3,r2,4
 180bd58:	1885803a 	cmpltu	r2,r3,r2
 180bd5c:	88a3883a 	add	r17,r17,r2
 180bd60:	8880202c 	andhi	r2,r17,128
 180bd64:	10002726 	beq	r2,zero,180be04 <__divdf3+0x880>
 180bd68:	98c0004c 	andi	r3,r19,1
 180bd6c:	00800044 	movi	r2,1
 180bd70:	000b883a 	mov	r5,zero
 180bd74:	0025883a 	mov	r18,zero
 180bd78:	003e6106 	br	180b700 <__ram_exceptions_end+0xff7fb410>
 180bd7c:	85a1883a 	add	r16,r16,r22
 180bd80:	8585803a 	cmpltu	r2,r16,r22
 180bd84:	1705883a 	add	r2,r2,fp
 180bd88:	14a5883a 	add	r18,r2,r18
 180bd8c:	8c7fff84 	addi	r17,r17,-2
 180bd90:	003f1106 	br	180b9d8 <__ram_exceptions_end+0xff7fb6e8>
 180bd94:	b589883a 	add	r4,r22,r22
 180bd98:	25ad803a 	cmpltu	r22,r4,r22
 180bd9c:	b739883a 	add	fp,r22,fp
 180bda0:	40bfff84 	addi	r2,r8,-2
 180bda4:	bf2f883a 	add	r23,r23,fp
 180bda8:	202d883a 	mov	r22,r4
 180bdac:	003f9306 	br	180bbfc <__ram_exceptions_end+0xff7fb90c>
 180bdb0:	013ff844 	movi	r4,-31
 180bdb4:	2085c83a 	sub	r2,r4,r2
 180bdb8:	8888d83a 	srl	r4,r17,r2
 180bdbc:	00800804 	movi	r2,32
 180bdc0:	18802126 	beq	r3,r2,180be48 <__divdf3+0x8c4>
 180bdc4:	00801004 	movi	r2,64
 180bdc8:	10c5c83a 	sub	r2,r2,r3
 180bdcc:	8884983a 	sll	r2,r17,r2
 180bdd0:	1204b03a 	or	r2,r2,r8
 180bdd4:	1004c03a 	cmpne	r2,r2,zero
 180bdd8:	2084b03a 	or	r2,r4,r2
 180bddc:	144001cc 	andi	r17,r2,7
 180bde0:	88000d1e 	bne	r17,zero,180be18 <__divdf3+0x894>
 180bde4:	000b883a 	mov	r5,zero
 180bde8:	1024d0fa 	srli	r18,r2,3
 180bdec:	98c0004c 	andi	r3,r19,1
 180bdf0:	0005883a 	mov	r2,zero
 180bdf4:	9464b03a 	or	r18,r18,r17
 180bdf8:	003e4106 	br	180b700 <__ram_exceptions_end+0xff7fb410>
 180bdfc:	1007883a 	mov	r3,r2
 180be00:	0023883a 	mov	r17,zero
 180be04:	880a927a 	slli	r5,r17,9
 180be08:	1805883a 	mov	r2,r3
 180be0c:	8822977a 	slli	r17,r17,29
 180be10:	280ad33a 	srli	r5,r5,12
 180be14:	003ff406 	br	180bde8 <__ram_exceptions_end+0xff7fbaf8>
 180be18:	10c003cc 	andi	r3,r2,15
 180be1c:	01000104 	movi	r4,4
 180be20:	193ff626 	beq	r3,r4,180bdfc <__ram_exceptions_end+0xff7fbb0c>
 180be24:	0023883a 	mov	r17,zero
 180be28:	003fca06 	br	180bd54 <__ram_exceptions_end+0xff7fba64>
 180be2c:	813fd336 	bltu	r16,r4,180bd7c <__ram_exceptions_end+0xff7fba8c>
 180be30:	1023883a 	mov	r17,r2
 180be34:	003fa806 	br	180bcd8 <__ram_exceptions_end+0xff7fb9e8>
 180be38:	b0ffd636 	bltu	r22,r3,180bd94 <__ram_exceptions_end+0xff7fbaa4>
 180be3c:	1011883a 	mov	r8,r2
 180be40:	b0ff341e 	bne	r22,r3,180bb14 <__ram_exceptions_end+0xff7fb824>
 180be44:	003f3406 	br	180bb18 <__ram_exceptions_end+0xff7fb828>
 180be48:	0005883a 	mov	r2,zero
 180be4c:	003fe006 	br	180bdd0 <__ram_exceptions_end+0xff7fbae0>
 180be50:	00800434 	movhi	r2,16
 180be54:	89400234 	orhi	r5,r17,8
 180be58:	10bfffc4 	addi	r2,r2,-1
 180be5c:	b807883a 	mov	r3,r23
 180be60:	288a703a 	and	r5,r5,r2
 180be64:	4025883a 	mov	r18,r8
 180be68:	003e8206 	br	180b874 <__ram_exceptions_end+0xff7fb584>

0180be6c <__eqdf2>:
 180be6c:	2804d53a 	srli	r2,r5,20
 180be70:	3806d53a 	srli	r3,r7,20
 180be74:	02000434 	movhi	r8,16
 180be78:	423fffc4 	addi	r8,r8,-1
 180be7c:	1081ffcc 	andi	r2,r2,2047
 180be80:	0281ffc4 	movi	r10,2047
 180be84:	2a12703a 	and	r9,r5,r8
 180be88:	18c1ffcc 	andi	r3,r3,2047
 180be8c:	3a10703a 	and	r8,r7,r8
 180be90:	280ad7fa 	srli	r5,r5,31
 180be94:	380ed7fa 	srli	r7,r7,31
 180be98:	12801026 	beq	r2,r10,180bedc <__eqdf2+0x70>
 180be9c:	0281ffc4 	movi	r10,2047
 180bea0:	1a800a26 	beq	r3,r10,180becc <__eqdf2+0x60>
 180bea4:	10c00226 	beq	r2,r3,180beb0 <__eqdf2+0x44>
 180bea8:	00800044 	movi	r2,1
 180beac:	f800283a 	ret
 180beb0:	4a3ffd1e 	bne	r9,r8,180bea8 <__ram_exceptions_end+0xff7fbbb8>
 180beb4:	21bffc1e 	bne	r4,r6,180bea8 <__ram_exceptions_end+0xff7fbbb8>
 180beb8:	29c00c26 	beq	r5,r7,180beec <__eqdf2+0x80>
 180bebc:	103ffa1e 	bne	r2,zero,180bea8 <__ram_exceptions_end+0xff7fbbb8>
 180bec0:	2244b03a 	or	r2,r4,r9
 180bec4:	1004c03a 	cmpne	r2,r2,zero
 180bec8:	f800283a 	ret
 180becc:	3214b03a 	or	r10,r6,r8
 180bed0:	503ff426 	beq	r10,zero,180bea4 <__ram_exceptions_end+0xff7fbbb4>
 180bed4:	00800044 	movi	r2,1
 180bed8:	f800283a 	ret
 180bedc:	2254b03a 	or	r10,r4,r9
 180bee0:	503fee26 	beq	r10,zero,180be9c <__ram_exceptions_end+0xff7fbbac>
 180bee4:	00800044 	movi	r2,1
 180bee8:	f800283a 	ret
 180beec:	0005883a 	mov	r2,zero
 180bef0:	f800283a 	ret

0180bef4 <__gedf2>:
 180bef4:	2804d53a 	srli	r2,r5,20
 180bef8:	3806d53a 	srli	r3,r7,20
 180befc:	02000434 	movhi	r8,16
 180bf00:	423fffc4 	addi	r8,r8,-1
 180bf04:	1081ffcc 	andi	r2,r2,2047
 180bf08:	0241ffc4 	movi	r9,2047
 180bf0c:	2a14703a 	and	r10,r5,r8
 180bf10:	18c1ffcc 	andi	r3,r3,2047
 180bf14:	3a10703a 	and	r8,r7,r8
 180bf18:	280ad7fa 	srli	r5,r5,31
 180bf1c:	380ed7fa 	srli	r7,r7,31
 180bf20:	12401d26 	beq	r2,r9,180bf98 <__gedf2+0xa4>
 180bf24:	0241ffc4 	movi	r9,2047
 180bf28:	1a401226 	beq	r3,r9,180bf74 <__gedf2+0x80>
 180bf2c:	1000081e 	bne	r2,zero,180bf50 <__gedf2+0x5c>
 180bf30:	2296b03a 	or	r11,r4,r10
 180bf34:	5813003a 	cmpeq	r9,r11,zero
 180bf38:	1800091e 	bne	r3,zero,180bf60 <__gedf2+0x6c>
 180bf3c:	3218b03a 	or	r12,r6,r8
 180bf40:	6000071e 	bne	r12,zero,180bf60 <__gedf2+0x6c>
 180bf44:	0005883a 	mov	r2,zero
 180bf48:	5800101e 	bne	r11,zero,180bf8c <__gedf2+0x98>
 180bf4c:	f800283a 	ret
 180bf50:	18000c1e 	bne	r3,zero,180bf84 <__gedf2+0x90>
 180bf54:	3212b03a 	or	r9,r6,r8
 180bf58:	48000c26 	beq	r9,zero,180bf8c <__gedf2+0x98>
 180bf5c:	0013883a 	mov	r9,zero
 180bf60:	39c03fcc 	andi	r7,r7,255
 180bf64:	48000826 	beq	r9,zero,180bf88 <__gedf2+0x94>
 180bf68:	38000926 	beq	r7,zero,180bf90 <__gedf2+0x9c>
 180bf6c:	00800044 	movi	r2,1
 180bf70:	f800283a 	ret
 180bf74:	3212b03a 	or	r9,r6,r8
 180bf78:	483fec26 	beq	r9,zero,180bf2c <__ram_exceptions_end+0xff7fbc3c>
 180bf7c:	00bfff84 	movi	r2,-2
 180bf80:	f800283a 	ret
 180bf84:	39c03fcc 	andi	r7,r7,255
 180bf88:	29c00626 	beq	r5,r7,180bfa4 <__gedf2+0xb0>
 180bf8c:	283ff726 	beq	r5,zero,180bf6c <__ram_exceptions_end+0xff7fbc7c>
 180bf90:	00bfffc4 	movi	r2,-1
 180bf94:	f800283a 	ret
 180bf98:	2292b03a 	or	r9,r4,r10
 180bf9c:	483fe126 	beq	r9,zero,180bf24 <__ram_exceptions_end+0xff7fbc34>
 180bfa0:	003ff606 	br	180bf7c <__ram_exceptions_end+0xff7fbc8c>
 180bfa4:	18bff916 	blt	r3,r2,180bf8c <__ram_exceptions_end+0xff7fbc9c>
 180bfa8:	10c00316 	blt	r2,r3,180bfb8 <__gedf2+0xc4>
 180bfac:	42bff736 	bltu	r8,r10,180bf8c <__ram_exceptions_end+0xff7fbc9c>
 180bfb0:	52000326 	beq	r10,r8,180bfc0 <__gedf2+0xcc>
 180bfb4:	5200042e 	bgeu	r10,r8,180bfc8 <__gedf2+0xd4>
 180bfb8:	283fec1e 	bne	r5,zero,180bf6c <__ram_exceptions_end+0xff7fbc7c>
 180bfbc:	003ff406 	br	180bf90 <__ram_exceptions_end+0xff7fbca0>
 180bfc0:	313ff236 	bltu	r6,r4,180bf8c <__ram_exceptions_end+0xff7fbc9c>
 180bfc4:	21bffc36 	bltu	r4,r6,180bfb8 <__ram_exceptions_end+0xff7fbcc8>
 180bfc8:	0005883a 	mov	r2,zero
 180bfcc:	f800283a 	ret

0180bfd0 <__ledf2>:
 180bfd0:	2804d53a 	srli	r2,r5,20
 180bfd4:	3810d53a 	srli	r8,r7,20
 180bfd8:	00c00434 	movhi	r3,16
 180bfdc:	18ffffc4 	addi	r3,r3,-1
 180bfe0:	1081ffcc 	andi	r2,r2,2047
 180bfe4:	0241ffc4 	movi	r9,2047
 180bfe8:	28d4703a 	and	r10,r5,r3
 180bfec:	4201ffcc 	andi	r8,r8,2047
 180bff0:	38c6703a 	and	r3,r7,r3
 180bff4:	280ad7fa 	srli	r5,r5,31
 180bff8:	380ed7fa 	srli	r7,r7,31
 180bffc:	12401f26 	beq	r2,r9,180c07c <__ledf2+0xac>
 180c000:	0241ffc4 	movi	r9,2047
 180c004:	42401426 	beq	r8,r9,180c058 <__ledf2+0x88>
 180c008:	1000091e 	bne	r2,zero,180c030 <__ledf2+0x60>
 180c00c:	2296b03a 	or	r11,r4,r10
 180c010:	5813003a 	cmpeq	r9,r11,zero
 180c014:	29403fcc 	andi	r5,r5,255
 180c018:	40000a1e 	bne	r8,zero,180c044 <__ledf2+0x74>
 180c01c:	30d8b03a 	or	r12,r6,r3
 180c020:	6000081e 	bne	r12,zero,180c044 <__ledf2+0x74>
 180c024:	0005883a 	mov	r2,zero
 180c028:	5800111e 	bne	r11,zero,180c070 <__ledf2+0xa0>
 180c02c:	f800283a 	ret
 180c030:	29403fcc 	andi	r5,r5,255
 180c034:	40000c1e 	bne	r8,zero,180c068 <__ledf2+0x98>
 180c038:	30d2b03a 	or	r9,r6,r3
 180c03c:	48000c26 	beq	r9,zero,180c070 <__ledf2+0xa0>
 180c040:	0013883a 	mov	r9,zero
 180c044:	39c03fcc 	andi	r7,r7,255
 180c048:	48000826 	beq	r9,zero,180c06c <__ledf2+0x9c>
 180c04c:	38001126 	beq	r7,zero,180c094 <__ledf2+0xc4>
 180c050:	00800044 	movi	r2,1
 180c054:	f800283a 	ret
 180c058:	30d2b03a 	or	r9,r6,r3
 180c05c:	483fea26 	beq	r9,zero,180c008 <__ram_exceptions_end+0xff7fbd18>
 180c060:	00800084 	movi	r2,2
 180c064:	f800283a 	ret
 180c068:	39c03fcc 	andi	r7,r7,255
 180c06c:	39400726 	beq	r7,r5,180c08c <__ledf2+0xbc>
 180c070:	2800081e 	bne	r5,zero,180c094 <__ledf2+0xc4>
 180c074:	00800044 	movi	r2,1
 180c078:	f800283a 	ret
 180c07c:	2292b03a 	or	r9,r4,r10
 180c080:	483fdf26 	beq	r9,zero,180c000 <__ram_exceptions_end+0xff7fbd10>
 180c084:	00800084 	movi	r2,2
 180c088:	f800283a 	ret
 180c08c:	4080030e 	bge	r8,r2,180c09c <__ledf2+0xcc>
 180c090:	383fef26 	beq	r7,zero,180c050 <__ram_exceptions_end+0xff7fbd60>
 180c094:	00bfffc4 	movi	r2,-1
 180c098:	f800283a 	ret
 180c09c:	123feb16 	blt	r2,r8,180c04c <__ram_exceptions_end+0xff7fbd5c>
 180c0a0:	1abff336 	bltu	r3,r10,180c070 <__ram_exceptions_end+0xff7fbd80>
 180c0a4:	50c00326 	beq	r10,r3,180c0b4 <__ledf2+0xe4>
 180c0a8:	50c0042e 	bgeu	r10,r3,180c0bc <__ledf2+0xec>
 180c0ac:	283fe81e 	bne	r5,zero,180c050 <__ram_exceptions_end+0xff7fbd60>
 180c0b0:	003ff806 	br	180c094 <__ram_exceptions_end+0xff7fbda4>
 180c0b4:	313fee36 	bltu	r6,r4,180c070 <__ram_exceptions_end+0xff7fbd80>
 180c0b8:	21bffc36 	bltu	r4,r6,180c0ac <__ram_exceptions_end+0xff7fbdbc>
 180c0bc:	0005883a 	mov	r2,zero
 180c0c0:	f800283a 	ret

0180c0c4 <__muldf3>:
 180c0c4:	defff304 	addi	sp,sp,-52
 180c0c8:	2804d53a 	srli	r2,r5,20
 180c0cc:	dd800915 	stw	r22,36(sp)
 180c0d0:	282cd7fa 	srli	r22,r5,31
 180c0d4:	dc000315 	stw	r16,12(sp)
 180c0d8:	04000434 	movhi	r16,16
 180c0dc:	dd400815 	stw	r21,32(sp)
 180c0e0:	dc800515 	stw	r18,20(sp)
 180c0e4:	843fffc4 	addi	r16,r16,-1
 180c0e8:	dfc00c15 	stw	ra,48(sp)
 180c0ec:	df000b15 	stw	fp,44(sp)
 180c0f0:	ddc00a15 	stw	r23,40(sp)
 180c0f4:	dd000715 	stw	r20,28(sp)
 180c0f8:	dcc00615 	stw	r19,24(sp)
 180c0fc:	dc400415 	stw	r17,16(sp)
 180c100:	1481ffcc 	andi	r18,r2,2047
 180c104:	2c20703a 	and	r16,r5,r16
 180c108:	b02b883a 	mov	r21,r22
 180c10c:	b2403fcc 	andi	r9,r22,255
 180c110:	90006026 	beq	r18,zero,180c294 <__muldf3+0x1d0>
 180c114:	0081ffc4 	movi	r2,2047
 180c118:	2029883a 	mov	r20,r4
 180c11c:	90803626 	beq	r18,r2,180c1f8 <__muldf3+0x134>
 180c120:	80800434 	orhi	r2,r16,16
 180c124:	100490fa 	slli	r2,r2,3
 180c128:	2020d77a 	srli	r16,r4,29
 180c12c:	202890fa 	slli	r20,r4,3
 180c130:	94bf0044 	addi	r18,r18,-1023
 180c134:	80a0b03a 	or	r16,r16,r2
 180c138:	0027883a 	mov	r19,zero
 180c13c:	0039883a 	mov	fp,zero
 180c140:	3804d53a 	srli	r2,r7,20
 180c144:	382ed7fa 	srli	r23,r7,31
 180c148:	04400434 	movhi	r17,16
 180c14c:	8c7fffc4 	addi	r17,r17,-1
 180c150:	1081ffcc 	andi	r2,r2,2047
 180c154:	3011883a 	mov	r8,r6
 180c158:	3c62703a 	and	r17,r7,r17
 180c15c:	ba803fcc 	andi	r10,r23,255
 180c160:	10006d26 	beq	r2,zero,180c318 <__muldf3+0x254>
 180c164:	00c1ffc4 	movi	r3,2047
 180c168:	10c06526 	beq	r2,r3,180c300 <__muldf3+0x23c>
 180c16c:	88c00434 	orhi	r3,r17,16
 180c170:	180690fa 	slli	r3,r3,3
 180c174:	3022d77a 	srli	r17,r6,29
 180c178:	301090fa 	slli	r8,r6,3
 180c17c:	10bf0044 	addi	r2,r2,-1023
 180c180:	88e2b03a 	or	r17,r17,r3
 180c184:	000b883a 	mov	r5,zero
 180c188:	9085883a 	add	r2,r18,r2
 180c18c:	2cc8b03a 	or	r4,r5,r19
 180c190:	00c003c4 	movi	r3,15
 180c194:	bdacf03a 	xor	r22,r23,r22
 180c198:	12c00044 	addi	r11,r2,1
 180c19c:	19009936 	bltu	r3,r4,180c404 <__muldf3+0x340>
 180c1a0:	200890ba 	slli	r4,r4,2
 180c1a4:	00c06074 	movhi	r3,385
 180c1a8:	18f06e04 	addi	r3,r3,-15944
 180c1ac:	20c9883a 	add	r4,r4,r3
 180c1b0:	20c00017 	ldw	r3,0(r4)
 180c1b4:	1800683a 	jmp	r3
 180c1b8:	0180c404 	movi	r6,784
 180c1bc:	0180c218 	cmpnei	r6,zero,776
 180c1c0:	0180c218 	cmpnei	r6,zero,776
 180c1c4:	0180c214 	movui	r6,776
 180c1c8:	0180c3e0 	cmpeqi	r6,zero,783
 180c1cc:	0180c3e0 	cmpeqi	r6,zero,783
 180c1d0:	0180c3c8 	cmpgei	r6,zero,783
 180c1d4:	0180c214 	movui	r6,776
 180c1d8:	0180c3e0 	cmpeqi	r6,zero,783
 180c1dc:	0180c3c8 	cmpgei	r6,zero,783
 180c1e0:	0180c3e0 	cmpeqi	r6,zero,783
 180c1e4:	0180c214 	movui	r6,776
 180c1e8:	0180c3f0 	cmpltui	r6,zero,783
 180c1ec:	0180c3f0 	cmpltui	r6,zero,783
 180c1f0:	0180c3f0 	cmpltui	r6,zero,783
 180c1f4:	0180c60c 	andi	r6,zero,792
 180c1f8:	2404b03a 	or	r2,r4,r16
 180c1fc:	10006f1e 	bne	r2,zero,180c3bc <__muldf3+0x2f8>
 180c200:	04c00204 	movi	r19,8
 180c204:	0021883a 	mov	r16,zero
 180c208:	0029883a 	mov	r20,zero
 180c20c:	07000084 	movi	fp,2
 180c210:	003fcb06 	br	180c140 <__ram_exceptions_end+0xff7fbe50>
 180c214:	502d883a 	mov	r22,r10
 180c218:	00800084 	movi	r2,2
 180c21c:	28805726 	beq	r5,r2,180c37c <__muldf3+0x2b8>
 180c220:	008000c4 	movi	r2,3
 180c224:	28816626 	beq	r5,r2,180c7c0 <__muldf3+0x6fc>
 180c228:	00800044 	movi	r2,1
 180c22c:	2881411e 	bne	r5,r2,180c734 <__muldf3+0x670>
 180c230:	b02b883a 	mov	r21,r22
 180c234:	0005883a 	mov	r2,zero
 180c238:	000b883a 	mov	r5,zero
 180c23c:	0029883a 	mov	r20,zero
 180c240:	1004953a 	slli	r2,r2,20
 180c244:	a8c03fcc 	andi	r3,r21,255
 180c248:	04400434 	movhi	r17,16
 180c24c:	8c7fffc4 	addi	r17,r17,-1
 180c250:	180697fa 	slli	r3,r3,31
 180c254:	2c4a703a 	and	r5,r5,r17
 180c258:	288ab03a 	or	r5,r5,r2
 180c25c:	28c6b03a 	or	r3,r5,r3
 180c260:	a005883a 	mov	r2,r20
 180c264:	dfc00c17 	ldw	ra,48(sp)
 180c268:	df000b17 	ldw	fp,44(sp)
 180c26c:	ddc00a17 	ldw	r23,40(sp)
 180c270:	dd800917 	ldw	r22,36(sp)
 180c274:	dd400817 	ldw	r21,32(sp)
 180c278:	dd000717 	ldw	r20,28(sp)
 180c27c:	dcc00617 	ldw	r19,24(sp)
 180c280:	dc800517 	ldw	r18,20(sp)
 180c284:	dc400417 	ldw	r17,16(sp)
 180c288:	dc000317 	ldw	r16,12(sp)
 180c28c:	dec00d04 	addi	sp,sp,52
 180c290:	f800283a 	ret
 180c294:	2404b03a 	or	r2,r4,r16
 180c298:	2027883a 	mov	r19,r4
 180c29c:	10004226 	beq	r2,zero,180c3a8 <__muldf3+0x2e4>
 180c2a0:	8000fc26 	beq	r16,zero,180c694 <__muldf3+0x5d0>
 180c2a4:	8009883a 	mov	r4,r16
 180c2a8:	d9800215 	stw	r6,8(sp)
 180c2ac:	d9c00015 	stw	r7,0(sp)
 180c2b0:	da400115 	stw	r9,4(sp)
 180c2b4:	180d2dc0 	call	180d2dc <__clzsi2>
 180c2b8:	d9800217 	ldw	r6,8(sp)
 180c2bc:	d9c00017 	ldw	r7,0(sp)
 180c2c0:	da400117 	ldw	r9,4(sp)
 180c2c4:	113ffd44 	addi	r4,r2,-11
 180c2c8:	00c00704 	movi	r3,28
 180c2cc:	1900ed16 	blt	r3,r4,180c684 <__muldf3+0x5c0>
 180c2d0:	00c00744 	movi	r3,29
 180c2d4:	147ffe04 	addi	r17,r2,-8
 180c2d8:	1907c83a 	sub	r3,r3,r4
 180c2dc:	8460983a 	sll	r16,r16,r17
 180c2e0:	98c6d83a 	srl	r3,r19,r3
 180c2e4:	9c68983a 	sll	r20,r19,r17
 180c2e8:	1c20b03a 	or	r16,r3,r16
 180c2ec:	1080fcc4 	addi	r2,r2,1011
 180c2f0:	00a5c83a 	sub	r18,zero,r2
 180c2f4:	0027883a 	mov	r19,zero
 180c2f8:	0039883a 	mov	fp,zero
 180c2fc:	003f9006 	br	180c140 <__ram_exceptions_end+0xff7fbe50>
 180c300:	3446b03a 	or	r3,r6,r17
 180c304:	1800261e 	bne	r3,zero,180c3a0 <__muldf3+0x2dc>
 180c308:	0023883a 	mov	r17,zero
 180c30c:	0011883a 	mov	r8,zero
 180c310:	01400084 	movi	r5,2
 180c314:	003f9c06 	br	180c188 <__ram_exceptions_end+0xff7fbe98>
 180c318:	3446b03a 	or	r3,r6,r17
 180c31c:	18001c26 	beq	r3,zero,180c390 <__muldf3+0x2cc>
 180c320:	8800ce26 	beq	r17,zero,180c65c <__muldf3+0x598>
 180c324:	8809883a 	mov	r4,r17
 180c328:	d9800215 	stw	r6,8(sp)
 180c32c:	da400115 	stw	r9,4(sp)
 180c330:	da800015 	stw	r10,0(sp)
 180c334:	180d2dc0 	call	180d2dc <__clzsi2>
 180c338:	d9800217 	ldw	r6,8(sp)
 180c33c:	da400117 	ldw	r9,4(sp)
 180c340:	da800017 	ldw	r10,0(sp)
 180c344:	113ffd44 	addi	r4,r2,-11
 180c348:	00c00704 	movi	r3,28
 180c34c:	1900bf16 	blt	r3,r4,180c64c <__muldf3+0x588>
 180c350:	00c00744 	movi	r3,29
 180c354:	123ffe04 	addi	r8,r2,-8
 180c358:	1907c83a 	sub	r3,r3,r4
 180c35c:	8a22983a 	sll	r17,r17,r8
 180c360:	30c6d83a 	srl	r3,r6,r3
 180c364:	3210983a 	sll	r8,r6,r8
 180c368:	1c62b03a 	or	r17,r3,r17
 180c36c:	1080fcc4 	addi	r2,r2,1011
 180c370:	0085c83a 	sub	r2,zero,r2
 180c374:	000b883a 	mov	r5,zero
 180c378:	003f8306 	br	180c188 <__ram_exceptions_end+0xff7fbe98>
 180c37c:	b02b883a 	mov	r21,r22
 180c380:	0081ffc4 	movi	r2,2047
 180c384:	000b883a 	mov	r5,zero
 180c388:	0029883a 	mov	r20,zero
 180c38c:	003fac06 	br	180c240 <__ram_exceptions_end+0xff7fbf50>
 180c390:	0023883a 	mov	r17,zero
 180c394:	0011883a 	mov	r8,zero
 180c398:	01400044 	movi	r5,1
 180c39c:	003f7a06 	br	180c188 <__ram_exceptions_end+0xff7fbe98>
 180c3a0:	014000c4 	movi	r5,3
 180c3a4:	003f7806 	br	180c188 <__ram_exceptions_end+0xff7fbe98>
 180c3a8:	04c00104 	movi	r19,4
 180c3ac:	0021883a 	mov	r16,zero
 180c3b0:	0029883a 	mov	r20,zero
 180c3b4:	07000044 	movi	fp,1
 180c3b8:	003f6106 	br	180c140 <__ram_exceptions_end+0xff7fbe50>
 180c3bc:	04c00304 	movi	r19,12
 180c3c0:	070000c4 	movi	fp,3
 180c3c4:	003f5e06 	br	180c140 <__ram_exceptions_end+0xff7fbe50>
 180c3c8:	01400434 	movhi	r5,16
 180c3cc:	002b883a 	mov	r21,zero
 180c3d0:	297fffc4 	addi	r5,r5,-1
 180c3d4:	053fffc4 	movi	r20,-1
 180c3d8:	0081ffc4 	movi	r2,2047
 180c3dc:	003f9806 	br	180c240 <__ram_exceptions_end+0xff7fbf50>
 180c3e0:	8023883a 	mov	r17,r16
 180c3e4:	a011883a 	mov	r8,r20
 180c3e8:	e00b883a 	mov	r5,fp
 180c3ec:	003f8a06 	br	180c218 <__ram_exceptions_end+0xff7fbf28>
 180c3f0:	8023883a 	mov	r17,r16
 180c3f4:	a011883a 	mov	r8,r20
 180c3f8:	482d883a 	mov	r22,r9
 180c3fc:	e00b883a 	mov	r5,fp
 180c400:	003f8506 	br	180c218 <__ram_exceptions_end+0xff7fbf28>
 180c404:	a00ad43a 	srli	r5,r20,16
 180c408:	401ad43a 	srli	r13,r8,16
 180c40c:	a53fffcc 	andi	r20,r20,65535
 180c410:	423fffcc 	andi	r8,r8,65535
 180c414:	4519383a 	mul	r12,r8,r20
 180c418:	4147383a 	mul	r3,r8,r5
 180c41c:	6d09383a 	mul	r4,r13,r20
 180c420:	600cd43a 	srli	r6,r12,16
 180c424:	2b5d383a 	mul	r14,r5,r13
 180c428:	20c9883a 	add	r4,r4,r3
 180c42c:	310d883a 	add	r6,r6,r4
 180c430:	30c0022e 	bgeu	r6,r3,180c43c <__muldf3+0x378>
 180c434:	00c00074 	movhi	r3,1
 180c438:	70dd883a 	add	r14,r14,r3
 180c43c:	8826d43a 	srli	r19,r17,16
 180c440:	8bffffcc 	andi	r15,r17,65535
 180c444:	7d23383a 	mul	r17,r15,r20
 180c448:	7949383a 	mul	r4,r15,r5
 180c44c:	9d29383a 	mul	r20,r19,r20
 180c450:	8814d43a 	srli	r10,r17,16
 180c454:	3012943a 	slli	r9,r6,16
 180c458:	a129883a 	add	r20,r20,r4
 180c45c:	633fffcc 	andi	r12,r12,65535
 180c460:	5515883a 	add	r10,r10,r20
 180c464:	3006d43a 	srli	r3,r6,16
 180c468:	4b13883a 	add	r9,r9,r12
 180c46c:	2ccb383a 	mul	r5,r5,r19
 180c470:	5100022e 	bgeu	r10,r4,180c47c <__muldf3+0x3b8>
 180c474:	01000074 	movhi	r4,1
 180c478:	290b883a 	add	r5,r5,r4
 180c47c:	802ad43a 	srli	r21,r16,16
 180c480:	843fffcc 	andi	r16,r16,65535
 180c484:	440d383a 	mul	r6,r8,r16
 180c488:	4565383a 	mul	r18,r8,r21
 180c48c:	8349383a 	mul	r4,r16,r13
 180c490:	500e943a 	slli	r7,r10,16
 180c494:	3010d43a 	srli	r8,r6,16
 180c498:	5028d43a 	srli	r20,r10,16
 180c49c:	2489883a 	add	r4,r4,r18
 180c4a0:	8abfffcc 	andi	r10,r17,65535
 180c4a4:	3a95883a 	add	r10,r7,r10
 180c4a8:	4119883a 	add	r12,r8,r4
 180c4ac:	a169883a 	add	r20,r20,r5
 180c4b0:	1a87883a 	add	r3,r3,r10
 180c4b4:	6d5b383a 	mul	r13,r13,r21
 180c4b8:	6480022e 	bgeu	r12,r18,180c4c4 <__muldf3+0x400>
 180c4bc:	01000074 	movhi	r4,1
 180c4c0:	691b883a 	add	r13,r13,r4
 180c4c4:	7c25383a 	mul	r18,r15,r16
 180c4c8:	7d4b383a 	mul	r5,r15,r21
 180c4cc:	84cf383a 	mul	r7,r16,r19
 180c4d0:	901ed43a 	srli	r15,r18,16
 180c4d4:	6008d43a 	srli	r4,r12,16
 180c4d8:	6010943a 	slli	r8,r12,16
 180c4dc:	394f883a 	add	r7,r7,r5
 180c4e0:	333fffcc 	andi	r12,r6,65535
 180c4e4:	79df883a 	add	r15,r15,r7
 180c4e8:	235b883a 	add	r13,r4,r13
 180c4ec:	9d63383a 	mul	r17,r19,r21
 180c4f0:	4309883a 	add	r4,r8,r12
 180c4f4:	7940022e 	bgeu	r15,r5,180c500 <__muldf3+0x43c>
 180c4f8:	01400074 	movhi	r5,1
 180c4fc:	8963883a 	add	r17,r17,r5
 180c500:	780a943a 	slli	r5,r15,16
 180c504:	91bfffcc 	andi	r6,r18,65535
 180c508:	70c7883a 	add	r3,r14,r3
 180c50c:	298d883a 	add	r6,r5,r6
 180c510:	1a8f803a 	cmpltu	r7,r3,r10
 180c514:	350b883a 	add	r5,r6,r20
 180c518:	20c7883a 	add	r3,r4,r3
 180c51c:	3955883a 	add	r10,r7,r5
 180c520:	1909803a 	cmpltu	r4,r3,r4
 180c524:	6a91883a 	add	r8,r13,r10
 180c528:	780cd43a 	srli	r6,r15,16
 180c52c:	2219883a 	add	r12,r4,r8
 180c530:	2d0b803a 	cmpltu	r5,r5,r20
 180c534:	51cf803a 	cmpltu	r7,r10,r7
 180c538:	29ceb03a 	or	r7,r5,r7
 180c53c:	4351803a 	cmpltu	r8,r8,r13
 180c540:	610b803a 	cmpltu	r5,r12,r4
 180c544:	4148b03a 	or	r4,r8,r5
 180c548:	398f883a 	add	r7,r7,r6
 180c54c:	3909883a 	add	r4,r7,r4
 180c550:	1810927a 	slli	r8,r3,9
 180c554:	2449883a 	add	r4,r4,r17
 180c558:	2008927a 	slli	r4,r4,9
 180c55c:	6022d5fa 	srli	r17,r12,23
 180c560:	1806d5fa 	srli	r3,r3,23
 180c564:	4252b03a 	or	r9,r8,r9
 180c568:	600a927a 	slli	r5,r12,9
 180c56c:	4810c03a 	cmpne	r8,r9,zero
 180c570:	2462b03a 	or	r17,r4,r17
 180c574:	40c6b03a 	or	r3,r8,r3
 180c578:	8900402c 	andhi	r4,r17,256
 180c57c:	1950b03a 	or	r8,r3,r5
 180c580:	20000726 	beq	r4,zero,180c5a0 <__muldf3+0x4dc>
 180c584:	4006d07a 	srli	r3,r8,1
 180c588:	880497fa 	slli	r2,r17,31
 180c58c:	4200004c 	andi	r8,r8,1
 180c590:	8822d07a 	srli	r17,r17,1
 180c594:	1a10b03a 	or	r8,r3,r8
 180c598:	1210b03a 	or	r8,r2,r8
 180c59c:	5805883a 	mov	r2,r11
 180c5a0:	1140ffc4 	addi	r5,r2,1023
 180c5a4:	0140440e 	bge	zero,r5,180c6b8 <__muldf3+0x5f4>
 180c5a8:	40c001cc 	andi	r3,r8,7
 180c5ac:	18000726 	beq	r3,zero,180c5cc <__muldf3+0x508>
 180c5b0:	40c003cc 	andi	r3,r8,15
 180c5b4:	01000104 	movi	r4,4
 180c5b8:	19000426 	beq	r3,r4,180c5cc <__muldf3+0x508>
 180c5bc:	4107883a 	add	r3,r8,r4
 180c5c0:	1a11803a 	cmpltu	r8,r3,r8
 180c5c4:	8a23883a 	add	r17,r17,r8
 180c5c8:	1811883a 	mov	r8,r3
 180c5cc:	88c0402c 	andhi	r3,r17,256
 180c5d0:	18000426 	beq	r3,zero,180c5e4 <__muldf3+0x520>
 180c5d4:	11410004 	addi	r5,r2,1024
 180c5d8:	00bfc034 	movhi	r2,65280
 180c5dc:	10bfffc4 	addi	r2,r2,-1
 180c5e0:	88a2703a 	and	r17,r17,r2
 180c5e4:	0081ff84 	movi	r2,2046
 180c5e8:	117f6416 	blt	r2,r5,180c37c <__ram_exceptions_end+0xff7fc08c>
 180c5ec:	8828977a 	slli	r20,r17,29
 180c5f0:	4010d0fa 	srli	r8,r8,3
 180c5f4:	8822927a 	slli	r17,r17,9
 180c5f8:	2881ffcc 	andi	r2,r5,2047
 180c5fc:	a228b03a 	or	r20,r20,r8
 180c600:	880ad33a 	srli	r5,r17,12
 180c604:	b02b883a 	mov	r21,r22
 180c608:	003f0d06 	br	180c240 <__ram_exceptions_end+0xff7fbf50>
 180c60c:	8080022c 	andhi	r2,r16,8
 180c610:	10000926 	beq	r2,zero,180c638 <__muldf3+0x574>
 180c614:	8880022c 	andhi	r2,r17,8
 180c618:	1000071e 	bne	r2,zero,180c638 <__muldf3+0x574>
 180c61c:	00800434 	movhi	r2,16
 180c620:	89400234 	orhi	r5,r17,8
 180c624:	10bfffc4 	addi	r2,r2,-1
 180c628:	b82b883a 	mov	r21,r23
 180c62c:	288a703a 	and	r5,r5,r2
 180c630:	4029883a 	mov	r20,r8
 180c634:	003f6806 	br	180c3d8 <__ram_exceptions_end+0xff7fc0e8>
 180c638:	00800434 	movhi	r2,16
 180c63c:	81400234 	orhi	r5,r16,8
 180c640:	10bfffc4 	addi	r2,r2,-1
 180c644:	288a703a 	and	r5,r5,r2
 180c648:	003f6306 	br	180c3d8 <__ram_exceptions_end+0xff7fc0e8>
 180c64c:	147ff604 	addi	r17,r2,-40
 180c650:	3462983a 	sll	r17,r6,r17
 180c654:	0011883a 	mov	r8,zero
 180c658:	003f4406 	br	180c36c <__ram_exceptions_end+0xff7fc07c>
 180c65c:	3009883a 	mov	r4,r6
 180c660:	d9800215 	stw	r6,8(sp)
 180c664:	da400115 	stw	r9,4(sp)
 180c668:	da800015 	stw	r10,0(sp)
 180c66c:	180d2dc0 	call	180d2dc <__clzsi2>
 180c670:	10800804 	addi	r2,r2,32
 180c674:	da800017 	ldw	r10,0(sp)
 180c678:	da400117 	ldw	r9,4(sp)
 180c67c:	d9800217 	ldw	r6,8(sp)
 180c680:	003f3006 	br	180c344 <__ram_exceptions_end+0xff7fc054>
 180c684:	143ff604 	addi	r16,r2,-40
 180c688:	9c20983a 	sll	r16,r19,r16
 180c68c:	0029883a 	mov	r20,zero
 180c690:	003f1606 	br	180c2ec <__ram_exceptions_end+0xff7fbffc>
 180c694:	d9800215 	stw	r6,8(sp)
 180c698:	d9c00015 	stw	r7,0(sp)
 180c69c:	da400115 	stw	r9,4(sp)
 180c6a0:	180d2dc0 	call	180d2dc <__clzsi2>
 180c6a4:	10800804 	addi	r2,r2,32
 180c6a8:	da400117 	ldw	r9,4(sp)
 180c6ac:	d9c00017 	ldw	r7,0(sp)
 180c6b0:	d9800217 	ldw	r6,8(sp)
 180c6b4:	003f0306 	br	180c2c4 <__ram_exceptions_end+0xff7fbfd4>
 180c6b8:	00c00044 	movi	r3,1
 180c6bc:	1947c83a 	sub	r3,r3,r5
 180c6c0:	00800e04 	movi	r2,56
 180c6c4:	10feda16 	blt	r2,r3,180c230 <__ram_exceptions_end+0xff7fbf40>
 180c6c8:	008007c4 	movi	r2,31
 180c6cc:	10c01b16 	blt	r2,r3,180c73c <__muldf3+0x678>
 180c6d0:	00800804 	movi	r2,32
 180c6d4:	10c5c83a 	sub	r2,r2,r3
 180c6d8:	888a983a 	sll	r5,r17,r2
 180c6dc:	40c8d83a 	srl	r4,r8,r3
 180c6e0:	4084983a 	sll	r2,r8,r2
 180c6e4:	88e2d83a 	srl	r17,r17,r3
 180c6e8:	2906b03a 	or	r3,r5,r4
 180c6ec:	1004c03a 	cmpne	r2,r2,zero
 180c6f0:	1886b03a 	or	r3,r3,r2
 180c6f4:	188001cc 	andi	r2,r3,7
 180c6f8:	10000726 	beq	r2,zero,180c718 <__muldf3+0x654>
 180c6fc:	188003cc 	andi	r2,r3,15
 180c700:	01000104 	movi	r4,4
 180c704:	11000426 	beq	r2,r4,180c718 <__muldf3+0x654>
 180c708:	1805883a 	mov	r2,r3
 180c70c:	10c00104 	addi	r3,r2,4
 180c710:	1885803a 	cmpltu	r2,r3,r2
 180c714:	88a3883a 	add	r17,r17,r2
 180c718:	8880202c 	andhi	r2,r17,128
 180c71c:	10001c26 	beq	r2,zero,180c790 <__muldf3+0x6cc>
 180c720:	b02b883a 	mov	r21,r22
 180c724:	00800044 	movi	r2,1
 180c728:	000b883a 	mov	r5,zero
 180c72c:	0029883a 	mov	r20,zero
 180c730:	003ec306 	br	180c240 <__ram_exceptions_end+0xff7fbf50>
 180c734:	5805883a 	mov	r2,r11
 180c738:	003f9906 	br	180c5a0 <__ram_exceptions_end+0xff7fc2b0>
 180c73c:	00bff844 	movi	r2,-31
 180c740:	1145c83a 	sub	r2,r2,r5
 180c744:	8888d83a 	srl	r4,r17,r2
 180c748:	00800804 	movi	r2,32
 180c74c:	18801a26 	beq	r3,r2,180c7b8 <__muldf3+0x6f4>
 180c750:	00801004 	movi	r2,64
 180c754:	10c5c83a 	sub	r2,r2,r3
 180c758:	8884983a 	sll	r2,r17,r2
 180c75c:	1204b03a 	or	r2,r2,r8
 180c760:	1004c03a 	cmpne	r2,r2,zero
 180c764:	2084b03a 	or	r2,r4,r2
 180c768:	144001cc 	andi	r17,r2,7
 180c76c:	88000d1e 	bne	r17,zero,180c7a4 <__muldf3+0x6e0>
 180c770:	000b883a 	mov	r5,zero
 180c774:	1028d0fa 	srli	r20,r2,3
 180c778:	b02b883a 	mov	r21,r22
 180c77c:	0005883a 	mov	r2,zero
 180c780:	a468b03a 	or	r20,r20,r17
 180c784:	003eae06 	br	180c240 <__ram_exceptions_end+0xff7fbf50>
 180c788:	1007883a 	mov	r3,r2
 180c78c:	0023883a 	mov	r17,zero
 180c790:	880a927a 	slli	r5,r17,9
 180c794:	1805883a 	mov	r2,r3
 180c798:	8822977a 	slli	r17,r17,29
 180c79c:	280ad33a 	srli	r5,r5,12
 180c7a0:	003ff406 	br	180c774 <__ram_exceptions_end+0xff7fc484>
 180c7a4:	10c003cc 	andi	r3,r2,15
 180c7a8:	01000104 	movi	r4,4
 180c7ac:	193ff626 	beq	r3,r4,180c788 <__ram_exceptions_end+0xff7fc498>
 180c7b0:	0023883a 	mov	r17,zero
 180c7b4:	003fd506 	br	180c70c <__ram_exceptions_end+0xff7fc41c>
 180c7b8:	0005883a 	mov	r2,zero
 180c7bc:	003fe706 	br	180c75c <__ram_exceptions_end+0xff7fc46c>
 180c7c0:	00800434 	movhi	r2,16
 180c7c4:	89400234 	orhi	r5,r17,8
 180c7c8:	10bfffc4 	addi	r2,r2,-1
 180c7cc:	b02b883a 	mov	r21,r22
 180c7d0:	288a703a 	and	r5,r5,r2
 180c7d4:	4029883a 	mov	r20,r8
 180c7d8:	003eff06 	br	180c3d8 <__ram_exceptions_end+0xff7fc0e8>

0180c7dc <__subdf3>:
 180c7dc:	02000434 	movhi	r8,16
 180c7e0:	423fffc4 	addi	r8,r8,-1
 180c7e4:	defffb04 	addi	sp,sp,-20
 180c7e8:	2a14703a 	and	r10,r5,r8
 180c7ec:	3812d53a 	srli	r9,r7,20
 180c7f0:	3a10703a 	and	r8,r7,r8
 180c7f4:	2006d77a 	srli	r3,r4,29
 180c7f8:	3004d77a 	srli	r2,r6,29
 180c7fc:	dc000015 	stw	r16,0(sp)
 180c800:	501490fa 	slli	r10,r10,3
 180c804:	2820d53a 	srli	r16,r5,20
 180c808:	401090fa 	slli	r8,r8,3
 180c80c:	dc800215 	stw	r18,8(sp)
 180c810:	dc400115 	stw	r17,4(sp)
 180c814:	dfc00415 	stw	ra,16(sp)
 180c818:	202290fa 	slli	r17,r4,3
 180c81c:	dcc00315 	stw	r19,12(sp)
 180c820:	4a41ffcc 	andi	r9,r9,2047
 180c824:	0101ffc4 	movi	r4,2047
 180c828:	2824d7fa 	srli	r18,r5,31
 180c82c:	8401ffcc 	andi	r16,r16,2047
 180c830:	50c6b03a 	or	r3,r10,r3
 180c834:	380ed7fa 	srli	r7,r7,31
 180c838:	408ab03a 	or	r5,r8,r2
 180c83c:	300c90fa 	slli	r6,r6,3
 180c840:	49009626 	beq	r9,r4,180ca9c <__subdf3+0x2c0>
 180c844:	39c0005c 	xori	r7,r7,1
 180c848:	8245c83a 	sub	r2,r16,r9
 180c84c:	3c807426 	beq	r7,r18,180ca20 <__subdf3+0x244>
 180c850:	0080af0e 	bge	zero,r2,180cb10 <__subdf3+0x334>
 180c854:	48002a1e 	bne	r9,zero,180c900 <__subdf3+0x124>
 180c858:	2988b03a 	or	r4,r5,r6
 180c85c:	20009a1e 	bne	r4,zero,180cac8 <__subdf3+0x2ec>
 180c860:	888001cc 	andi	r2,r17,7
 180c864:	10000726 	beq	r2,zero,180c884 <__subdf3+0xa8>
 180c868:	888003cc 	andi	r2,r17,15
 180c86c:	01000104 	movi	r4,4
 180c870:	11000426 	beq	r2,r4,180c884 <__subdf3+0xa8>
 180c874:	890b883a 	add	r5,r17,r4
 180c878:	2c63803a 	cmpltu	r17,r5,r17
 180c87c:	1c47883a 	add	r3,r3,r17
 180c880:	2823883a 	mov	r17,r5
 180c884:	1880202c 	andhi	r2,r3,128
 180c888:	10005926 	beq	r2,zero,180c9f0 <__subdf3+0x214>
 180c88c:	84000044 	addi	r16,r16,1
 180c890:	0081ffc4 	movi	r2,2047
 180c894:	8080be26 	beq	r16,r2,180cb90 <__subdf3+0x3b4>
 180c898:	017fe034 	movhi	r5,65408
 180c89c:	297fffc4 	addi	r5,r5,-1
 180c8a0:	1946703a 	and	r3,r3,r5
 180c8a4:	1804977a 	slli	r2,r3,29
 180c8a8:	1806927a 	slli	r3,r3,9
 180c8ac:	8822d0fa 	srli	r17,r17,3
 180c8b0:	8401ffcc 	andi	r16,r16,2047
 180c8b4:	180ad33a 	srli	r5,r3,12
 180c8b8:	9100004c 	andi	r4,r18,1
 180c8bc:	1444b03a 	or	r2,r2,r17
 180c8c0:	80c1ffcc 	andi	r3,r16,2047
 180c8c4:	1820953a 	slli	r16,r3,20
 180c8c8:	20c03fcc 	andi	r3,r4,255
 180c8cc:	180897fa 	slli	r4,r3,31
 180c8d0:	00c00434 	movhi	r3,16
 180c8d4:	18ffffc4 	addi	r3,r3,-1
 180c8d8:	28c6703a 	and	r3,r5,r3
 180c8dc:	1c06b03a 	or	r3,r3,r16
 180c8e0:	1906b03a 	or	r3,r3,r4
 180c8e4:	dfc00417 	ldw	ra,16(sp)
 180c8e8:	dcc00317 	ldw	r19,12(sp)
 180c8ec:	dc800217 	ldw	r18,8(sp)
 180c8f0:	dc400117 	ldw	r17,4(sp)
 180c8f4:	dc000017 	ldw	r16,0(sp)
 180c8f8:	dec00504 	addi	sp,sp,20
 180c8fc:	f800283a 	ret
 180c900:	0101ffc4 	movi	r4,2047
 180c904:	813fd626 	beq	r16,r4,180c860 <__ram_exceptions_end+0xff7fc570>
 180c908:	29402034 	orhi	r5,r5,128
 180c90c:	01000e04 	movi	r4,56
 180c910:	2080a316 	blt	r4,r2,180cba0 <__subdf3+0x3c4>
 180c914:	010007c4 	movi	r4,31
 180c918:	2080c616 	blt	r4,r2,180cc34 <__subdf3+0x458>
 180c91c:	01000804 	movi	r4,32
 180c920:	2089c83a 	sub	r4,r4,r2
 180c924:	2910983a 	sll	r8,r5,r4
 180c928:	308ed83a 	srl	r7,r6,r2
 180c92c:	3108983a 	sll	r4,r6,r4
 180c930:	2884d83a 	srl	r2,r5,r2
 180c934:	41ccb03a 	or	r6,r8,r7
 180c938:	2008c03a 	cmpne	r4,r4,zero
 180c93c:	310cb03a 	or	r6,r6,r4
 180c940:	898dc83a 	sub	r6,r17,r6
 180c944:	89a3803a 	cmpltu	r17,r17,r6
 180c948:	1887c83a 	sub	r3,r3,r2
 180c94c:	1c47c83a 	sub	r3,r3,r17
 180c950:	3023883a 	mov	r17,r6
 180c954:	1880202c 	andhi	r2,r3,128
 180c958:	10002326 	beq	r2,zero,180c9e8 <__subdf3+0x20c>
 180c95c:	04c02034 	movhi	r19,128
 180c960:	9cffffc4 	addi	r19,r19,-1
 180c964:	1ce6703a 	and	r19,r3,r19
 180c968:	98007a26 	beq	r19,zero,180cb54 <__subdf3+0x378>
 180c96c:	9809883a 	mov	r4,r19
 180c970:	180d2dc0 	call	180d2dc <__clzsi2>
 180c974:	113ffe04 	addi	r4,r2,-8
 180c978:	00c007c4 	movi	r3,31
 180c97c:	19007b16 	blt	r3,r4,180cb6c <__subdf3+0x390>
 180c980:	00800804 	movi	r2,32
 180c984:	1105c83a 	sub	r2,r2,r4
 180c988:	8884d83a 	srl	r2,r17,r2
 180c98c:	9906983a 	sll	r3,r19,r4
 180c990:	8922983a 	sll	r17,r17,r4
 180c994:	10c4b03a 	or	r2,r2,r3
 180c998:	24007816 	blt	r4,r16,180cb7c <__subdf3+0x3a0>
 180c99c:	2421c83a 	sub	r16,r4,r16
 180c9a0:	80c00044 	addi	r3,r16,1
 180c9a4:	010007c4 	movi	r4,31
 180c9a8:	20c09516 	blt	r4,r3,180cc00 <__subdf3+0x424>
 180c9ac:	01400804 	movi	r5,32
 180c9b0:	28cbc83a 	sub	r5,r5,r3
 180c9b4:	88c8d83a 	srl	r4,r17,r3
 180c9b8:	8962983a 	sll	r17,r17,r5
 180c9bc:	114a983a 	sll	r5,r2,r5
 180c9c0:	10c6d83a 	srl	r3,r2,r3
 180c9c4:	8804c03a 	cmpne	r2,r17,zero
 180c9c8:	290ab03a 	or	r5,r5,r4
 180c9cc:	28a2b03a 	or	r17,r5,r2
 180c9d0:	0021883a 	mov	r16,zero
 180c9d4:	003fa206 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180c9d8:	2090b03a 	or	r8,r4,r2
 180c9dc:	40018e26 	beq	r8,zero,180d018 <__subdf3+0x83c>
 180c9e0:	1007883a 	mov	r3,r2
 180c9e4:	2023883a 	mov	r17,r4
 180c9e8:	888001cc 	andi	r2,r17,7
 180c9ec:	103f9e1e 	bne	r2,zero,180c868 <__ram_exceptions_end+0xff7fc578>
 180c9f0:	1804977a 	slli	r2,r3,29
 180c9f4:	8822d0fa 	srli	r17,r17,3
 180c9f8:	1810d0fa 	srli	r8,r3,3
 180c9fc:	9100004c 	andi	r4,r18,1
 180ca00:	1444b03a 	or	r2,r2,r17
 180ca04:	00c1ffc4 	movi	r3,2047
 180ca08:	80c02826 	beq	r16,r3,180caac <__subdf3+0x2d0>
 180ca0c:	01400434 	movhi	r5,16
 180ca10:	297fffc4 	addi	r5,r5,-1
 180ca14:	80e0703a 	and	r16,r16,r3
 180ca18:	414a703a 	and	r5,r8,r5
 180ca1c:	003fa806 	br	180c8c0 <__ram_exceptions_end+0xff7fc5d0>
 180ca20:	0080630e 	bge	zero,r2,180cbb0 <__subdf3+0x3d4>
 180ca24:	48003026 	beq	r9,zero,180cae8 <__subdf3+0x30c>
 180ca28:	0101ffc4 	movi	r4,2047
 180ca2c:	813f8c26 	beq	r16,r4,180c860 <__ram_exceptions_end+0xff7fc570>
 180ca30:	29402034 	orhi	r5,r5,128
 180ca34:	01000e04 	movi	r4,56
 180ca38:	2080a90e 	bge	r4,r2,180cce0 <__subdf3+0x504>
 180ca3c:	298cb03a 	or	r6,r5,r6
 180ca40:	3012c03a 	cmpne	r9,r6,zero
 180ca44:	0005883a 	mov	r2,zero
 180ca48:	4c53883a 	add	r9,r9,r17
 180ca4c:	4c63803a 	cmpltu	r17,r9,r17
 180ca50:	10c7883a 	add	r3,r2,r3
 180ca54:	88c7883a 	add	r3,r17,r3
 180ca58:	4823883a 	mov	r17,r9
 180ca5c:	1880202c 	andhi	r2,r3,128
 180ca60:	1000d026 	beq	r2,zero,180cda4 <__subdf3+0x5c8>
 180ca64:	84000044 	addi	r16,r16,1
 180ca68:	0081ffc4 	movi	r2,2047
 180ca6c:	8080fe26 	beq	r16,r2,180ce68 <__subdf3+0x68c>
 180ca70:	00bfe034 	movhi	r2,65408
 180ca74:	10bfffc4 	addi	r2,r2,-1
 180ca78:	1886703a 	and	r3,r3,r2
 180ca7c:	880ad07a 	srli	r5,r17,1
 180ca80:	180497fa 	slli	r2,r3,31
 180ca84:	8900004c 	andi	r4,r17,1
 180ca88:	2922b03a 	or	r17,r5,r4
 180ca8c:	1806d07a 	srli	r3,r3,1
 180ca90:	1462b03a 	or	r17,r2,r17
 180ca94:	3825883a 	mov	r18,r7
 180ca98:	003f7106 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180ca9c:	2984b03a 	or	r2,r5,r6
 180caa0:	103f6826 	beq	r2,zero,180c844 <__ram_exceptions_end+0xff7fc554>
 180caa4:	39c03fcc 	andi	r7,r7,255
 180caa8:	003f6706 	br	180c848 <__ram_exceptions_end+0xff7fc558>
 180caac:	4086b03a 	or	r3,r8,r2
 180cab0:	18015226 	beq	r3,zero,180cffc <__subdf3+0x820>
 180cab4:	00c00434 	movhi	r3,16
 180cab8:	41400234 	orhi	r5,r8,8
 180cabc:	18ffffc4 	addi	r3,r3,-1
 180cac0:	28ca703a 	and	r5,r5,r3
 180cac4:	003f7e06 	br	180c8c0 <__ram_exceptions_end+0xff7fc5d0>
 180cac8:	10bfffc4 	addi	r2,r2,-1
 180cacc:	1000491e 	bne	r2,zero,180cbf4 <__subdf3+0x418>
 180cad0:	898fc83a 	sub	r7,r17,r6
 180cad4:	89e3803a 	cmpltu	r17,r17,r7
 180cad8:	1947c83a 	sub	r3,r3,r5
 180cadc:	1c47c83a 	sub	r3,r3,r17
 180cae0:	3823883a 	mov	r17,r7
 180cae4:	003f9b06 	br	180c954 <__ram_exceptions_end+0xff7fc664>
 180cae8:	2988b03a 	or	r4,r5,r6
 180caec:	203f5c26 	beq	r4,zero,180c860 <__ram_exceptions_end+0xff7fc570>
 180caf0:	10bfffc4 	addi	r2,r2,-1
 180caf4:	1000931e 	bne	r2,zero,180cd44 <__subdf3+0x568>
 180caf8:	898d883a 	add	r6,r17,r6
 180cafc:	3463803a 	cmpltu	r17,r6,r17
 180cb00:	1947883a 	add	r3,r3,r5
 180cb04:	88c7883a 	add	r3,r17,r3
 180cb08:	3023883a 	mov	r17,r6
 180cb0c:	003fd306 	br	180ca5c <__ram_exceptions_end+0xff7fc76c>
 180cb10:	1000541e 	bne	r2,zero,180cc64 <__subdf3+0x488>
 180cb14:	80800044 	addi	r2,r16,1
 180cb18:	1081ffcc 	andi	r2,r2,2047
 180cb1c:	01000044 	movi	r4,1
 180cb20:	2080a20e 	bge	r4,r2,180cdac <__subdf3+0x5d0>
 180cb24:	8989c83a 	sub	r4,r17,r6
 180cb28:	8905803a 	cmpltu	r2,r17,r4
 180cb2c:	1967c83a 	sub	r19,r3,r5
 180cb30:	98a7c83a 	sub	r19,r19,r2
 180cb34:	9880202c 	andhi	r2,r19,128
 180cb38:	10006326 	beq	r2,zero,180ccc8 <__subdf3+0x4ec>
 180cb3c:	3463c83a 	sub	r17,r6,r17
 180cb40:	28c7c83a 	sub	r3,r5,r3
 180cb44:	344d803a 	cmpltu	r6,r6,r17
 180cb48:	19a7c83a 	sub	r19,r3,r6
 180cb4c:	3825883a 	mov	r18,r7
 180cb50:	983f861e 	bne	r19,zero,180c96c <__ram_exceptions_end+0xff7fc67c>
 180cb54:	8809883a 	mov	r4,r17
 180cb58:	180d2dc0 	call	180d2dc <__clzsi2>
 180cb5c:	10800804 	addi	r2,r2,32
 180cb60:	113ffe04 	addi	r4,r2,-8
 180cb64:	00c007c4 	movi	r3,31
 180cb68:	193f850e 	bge	r3,r4,180c980 <__ram_exceptions_end+0xff7fc690>
 180cb6c:	10bff604 	addi	r2,r2,-40
 180cb70:	8884983a 	sll	r2,r17,r2
 180cb74:	0023883a 	mov	r17,zero
 180cb78:	243f880e 	bge	r4,r16,180c99c <__ram_exceptions_end+0xff7fc6ac>
 180cb7c:	00ffe034 	movhi	r3,65408
 180cb80:	18ffffc4 	addi	r3,r3,-1
 180cb84:	8121c83a 	sub	r16,r16,r4
 180cb88:	10c6703a 	and	r3,r2,r3
 180cb8c:	003f3406 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cb90:	9100004c 	andi	r4,r18,1
 180cb94:	000b883a 	mov	r5,zero
 180cb98:	0005883a 	mov	r2,zero
 180cb9c:	003f4806 	br	180c8c0 <__ram_exceptions_end+0xff7fc5d0>
 180cba0:	298cb03a 	or	r6,r5,r6
 180cba4:	300cc03a 	cmpne	r6,r6,zero
 180cba8:	0005883a 	mov	r2,zero
 180cbac:	003f6406 	br	180c940 <__ram_exceptions_end+0xff7fc650>
 180cbb0:	10009a1e 	bne	r2,zero,180ce1c <__subdf3+0x640>
 180cbb4:	82400044 	addi	r9,r16,1
 180cbb8:	4881ffcc 	andi	r2,r9,2047
 180cbbc:	02800044 	movi	r10,1
 180cbc0:	5080670e 	bge	r10,r2,180cd60 <__subdf3+0x584>
 180cbc4:	0081ffc4 	movi	r2,2047
 180cbc8:	4880af26 	beq	r9,r2,180ce88 <__subdf3+0x6ac>
 180cbcc:	898d883a 	add	r6,r17,r6
 180cbd0:	1945883a 	add	r2,r3,r5
 180cbd4:	3447803a 	cmpltu	r3,r6,r17
 180cbd8:	1887883a 	add	r3,r3,r2
 180cbdc:	182297fa 	slli	r17,r3,31
 180cbe0:	300cd07a 	srli	r6,r6,1
 180cbe4:	1806d07a 	srli	r3,r3,1
 180cbe8:	4821883a 	mov	r16,r9
 180cbec:	89a2b03a 	or	r17,r17,r6
 180cbf0:	003f1b06 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cbf4:	0101ffc4 	movi	r4,2047
 180cbf8:	813f441e 	bne	r16,r4,180c90c <__ram_exceptions_end+0xff7fc61c>
 180cbfc:	003f1806 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cc00:	843ff844 	addi	r16,r16,-31
 180cc04:	01400804 	movi	r5,32
 180cc08:	1408d83a 	srl	r4,r2,r16
 180cc0c:	19405026 	beq	r3,r5,180cd50 <__subdf3+0x574>
 180cc10:	01401004 	movi	r5,64
 180cc14:	28c7c83a 	sub	r3,r5,r3
 180cc18:	10c4983a 	sll	r2,r2,r3
 180cc1c:	88a2b03a 	or	r17,r17,r2
 180cc20:	8822c03a 	cmpne	r17,r17,zero
 180cc24:	2462b03a 	or	r17,r4,r17
 180cc28:	0007883a 	mov	r3,zero
 180cc2c:	0021883a 	mov	r16,zero
 180cc30:	003f6d06 	br	180c9e8 <__ram_exceptions_end+0xff7fc6f8>
 180cc34:	11fff804 	addi	r7,r2,-32
 180cc38:	01000804 	movi	r4,32
 180cc3c:	29ced83a 	srl	r7,r5,r7
 180cc40:	11004526 	beq	r2,r4,180cd58 <__subdf3+0x57c>
 180cc44:	01001004 	movi	r4,64
 180cc48:	2089c83a 	sub	r4,r4,r2
 180cc4c:	2904983a 	sll	r2,r5,r4
 180cc50:	118cb03a 	or	r6,r2,r6
 180cc54:	300cc03a 	cmpne	r6,r6,zero
 180cc58:	398cb03a 	or	r6,r7,r6
 180cc5c:	0005883a 	mov	r2,zero
 180cc60:	003f3706 	br	180c940 <__ram_exceptions_end+0xff7fc650>
 180cc64:	80002a26 	beq	r16,zero,180cd10 <__subdf3+0x534>
 180cc68:	0101ffc4 	movi	r4,2047
 180cc6c:	49006626 	beq	r9,r4,180ce08 <__subdf3+0x62c>
 180cc70:	0085c83a 	sub	r2,zero,r2
 180cc74:	18c02034 	orhi	r3,r3,128
 180cc78:	01000e04 	movi	r4,56
 180cc7c:	20807e16 	blt	r4,r2,180ce78 <__subdf3+0x69c>
 180cc80:	010007c4 	movi	r4,31
 180cc84:	2080e716 	blt	r4,r2,180d024 <__subdf3+0x848>
 180cc88:	01000804 	movi	r4,32
 180cc8c:	2089c83a 	sub	r4,r4,r2
 180cc90:	1914983a 	sll	r10,r3,r4
 180cc94:	8890d83a 	srl	r8,r17,r2
 180cc98:	8908983a 	sll	r4,r17,r4
 180cc9c:	1884d83a 	srl	r2,r3,r2
 180cca0:	5222b03a 	or	r17,r10,r8
 180cca4:	2006c03a 	cmpne	r3,r4,zero
 180cca8:	88e2b03a 	or	r17,r17,r3
 180ccac:	3463c83a 	sub	r17,r6,r17
 180ccb0:	2885c83a 	sub	r2,r5,r2
 180ccb4:	344d803a 	cmpltu	r6,r6,r17
 180ccb8:	1187c83a 	sub	r3,r2,r6
 180ccbc:	4821883a 	mov	r16,r9
 180ccc0:	3825883a 	mov	r18,r7
 180ccc4:	003f2306 	br	180c954 <__ram_exceptions_end+0xff7fc664>
 180ccc8:	24d0b03a 	or	r8,r4,r19
 180cccc:	40001b1e 	bne	r8,zero,180cd3c <__subdf3+0x560>
 180ccd0:	0005883a 	mov	r2,zero
 180ccd4:	0009883a 	mov	r4,zero
 180ccd8:	0021883a 	mov	r16,zero
 180ccdc:	003f4906 	br	180ca04 <__ram_exceptions_end+0xff7fc714>
 180cce0:	010007c4 	movi	r4,31
 180cce4:	20803a16 	blt	r4,r2,180cdd0 <__subdf3+0x5f4>
 180cce8:	01000804 	movi	r4,32
 180ccec:	2089c83a 	sub	r4,r4,r2
 180ccf0:	2912983a 	sll	r9,r5,r4
 180ccf4:	3090d83a 	srl	r8,r6,r2
 180ccf8:	3108983a 	sll	r4,r6,r4
 180ccfc:	2884d83a 	srl	r2,r5,r2
 180cd00:	4a12b03a 	or	r9,r9,r8
 180cd04:	2008c03a 	cmpne	r4,r4,zero
 180cd08:	4912b03a 	or	r9,r9,r4
 180cd0c:	003f4e06 	br	180ca48 <__ram_exceptions_end+0xff7fc758>
 180cd10:	1c48b03a 	or	r4,r3,r17
 180cd14:	20003c26 	beq	r4,zero,180ce08 <__subdf3+0x62c>
 180cd18:	0084303a 	nor	r2,zero,r2
 180cd1c:	1000381e 	bne	r2,zero,180ce00 <__subdf3+0x624>
 180cd20:	3463c83a 	sub	r17,r6,r17
 180cd24:	28c5c83a 	sub	r2,r5,r3
 180cd28:	344d803a 	cmpltu	r6,r6,r17
 180cd2c:	1187c83a 	sub	r3,r2,r6
 180cd30:	4821883a 	mov	r16,r9
 180cd34:	3825883a 	mov	r18,r7
 180cd38:	003f0606 	br	180c954 <__ram_exceptions_end+0xff7fc664>
 180cd3c:	2023883a 	mov	r17,r4
 180cd40:	003f0906 	br	180c968 <__ram_exceptions_end+0xff7fc678>
 180cd44:	0101ffc4 	movi	r4,2047
 180cd48:	813f3a1e 	bne	r16,r4,180ca34 <__ram_exceptions_end+0xff7fc744>
 180cd4c:	003ec406 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cd50:	0005883a 	mov	r2,zero
 180cd54:	003fb106 	br	180cc1c <__ram_exceptions_end+0xff7fc92c>
 180cd58:	0005883a 	mov	r2,zero
 180cd5c:	003fbc06 	br	180cc50 <__ram_exceptions_end+0xff7fc960>
 180cd60:	1c44b03a 	or	r2,r3,r17
 180cd64:	80008e1e 	bne	r16,zero,180cfa0 <__subdf3+0x7c4>
 180cd68:	1000c826 	beq	r2,zero,180d08c <__subdf3+0x8b0>
 180cd6c:	2984b03a 	or	r2,r5,r6
 180cd70:	103ebb26 	beq	r2,zero,180c860 <__ram_exceptions_end+0xff7fc570>
 180cd74:	8989883a 	add	r4,r17,r6
 180cd78:	1945883a 	add	r2,r3,r5
 180cd7c:	2447803a 	cmpltu	r3,r4,r17
 180cd80:	1887883a 	add	r3,r3,r2
 180cd84:	1880202c 	andhi	r2,r3,128
 180cd88:	2023883a 	mov	r17,r4
 180cd8c:	103f1626 	beq	r2,zero,180c9e8 <__ram_exceptions_end+0xff7fc6f8>
 180cd90:	00bfe034 	movhi	r2,65408
 180cd94:	10bfffc4 	addi	r2,r2,-1
 180cd98:	5021883a 	mov	r16,r10
 180cd9c:	1886703a 	and	r3,r3,r2
 180cda0:	003eaf06 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cda4:	3825883a 	mov	r18,r7
 180cda8:	003f0f06 	br	180c9e8 <__ram_exceptions_end+0xff7fc6f8>
 180cdac:	1c44b03a 	or	r2,r3,r17
 180cdb0:	8000251e 	bne	r16,zero,180ce48 <__subdf3+0x66c>
 180cdb4:	1000661e 	bne	r2,zero,180cf50 <__subdf3+0x774>
 180cdb8:	2990b03a 	or	r8,r5,r6
 180cdbc:	40009626 	beq	r8,zero,180d018 <__subdf3+0x83c>
 180cdc0:	2807883a 	mov	r3,r5
 180cdc4:	3023883a 	mov	r17,r6
 180cdc8:	3825883a 	mov	r18,r7
 180cdcc:	003ea406 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cdd0:	127ff804 	addi	r9,r2,-32
 180cdd4:	01000804 	movi	r4,32
 180cdd8:	2a52d83a 	srl	r9,r5,r9
 180cddc:	11008c26 	beq	r2,r4,180d010 <__subdf3+0x834>
 180cde0:	01001004 	movi	r4,64
 180cde4:	2085c83a 	sub	r2,r4,r2
 180cde8:	2884983a 	sll	r2,r5,r2
 180cdec:	118cb03a 	or	r6,r2,r6
 180cdf0:	300cc03a 	cmpne	r6,r6,zero
 180cdf4:	4992b03a 	or	r9,r9,r6
 180cdf8:	0005883a 	mov	r2,zero
 180cdfc:	003f1206 	br	180ca48 <__ram_exceptions_end+0xff7fc758>
 180ce00:	0101ffc4 	movi	r4,2047
 180ce04:	493f9c1e 	bne	r9,r4,180cc78 <__ram_exceptions_end+0xff7fc988>
 180ce08:	2807883a 	mov	r3,r5
 180ce0c:	3023883a 	mov	r17,r6
 180ce10:	4821883a 	mov	r16,r9
 180ce14:	3825883a 	mov	r18,r7
 180ce18:	003e9106 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180ce1c:	80001f1e 	bne	r16,zero,180ce9c <__subdf3+0x6c0>
 180ce20:	1c48b03a 	or	r4,r3,r17
 180ce24:	20005a26 	beq	r4,zero,180cf90 <__subdf3+0x7b4>
 180ce28:	0084303a 	nor	r2,zero,r2
 180ce2c:	1000561e 	bne	r2,zero,180cf88 <__subdf3+0x7ac>
 180ce30:	89a3883a 	add	r17,r17,r6
 180ce34:	1945883a 	add	r2,r3,r5
 180ce38:	898d803a 	cmpltu	r6,r17,r6
 180ce3c:	3087883a 	add	r3,r6,r2
 180ce40:	4821883a 	mov	r16,r9
 180ce44:	003f0506 	br	180ca5c <__ram_exceptions_end+0xff7fc76c>
 180ce48:	10002b1e 	bne	r2,zero,180cef8 <__subdf3+0x71c>
 180ce4c:	2984b03a 	or	r2,r5,r6
 180ce50:	10008026 	beq	r2,zero,180d054 <__subdf3+0x878>
 180ce54:	2807883a 	mov	r3,r5
 180ce58:	3023883a 	mov	r17,r6
 180ce5c:	3825883a 	mov	r18,r7
 180ce60:	0401ffc4 	movi	r16,2047
 180ce64:	003e7e06 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180ce68:	3809883a 	mov	r4,r7
 180ce6c:	0011883a 	mov	r8,zero
 180ce70:	0005883a 	mov	r2,zero
 180ce74:	003ee306 	br	180ca04 <__ram_exceptions_end+0xff7fc714>
 180ce78:	1c62b03a 	or	r17,r3,r17
 180ce7c:	8822c03a 	cmpne	r17,r17,zero
 180ce80:	0005883a 	mov	r2,zero
 180ce84:	003f8906 	br	180ccac <__ram_exceptions_end+0xff7fc9bc>
 180ce88:	3809883a 	mov	r4,r7
 180ce8c:	4821883a 	mov	r16,r9
 180ce90:	0011883a 	mov	r8,zero
 180ce94:	0005883a 	mov	r2,zero
 180ce98:	003eda06 	br	180ca04 <__ram_exceptions_end+0xff7fc714>
 180ce9c:	0101ffc4 	movi	r4,2047
 180cea0:	49003b26 	beq	r9,r4,180cf90 <__subdf3+0x7b4>
 180cea4:	0085c83a 	sub	r2,zero,r2
 180cea8:	18c02034 	orhi	r3,r3,128
 180ceac:	01000e04 	movi	r4,56
 180ceb0:	20806e16 	blt	r4,r2,180d06c <__subdf3+0x890>
 180ceb4:	010007c4 	movi	r4,31
 180ceb8:	20807716 	blt	r4,r2,180d098 <__subdf3+0x8bc>
 180cebc:	01000804 	movi	r4,32
 180cec0:	2089c83a 	sub	r4,r4,r2
 180cec4:	1914983a 	sll	r10,r3,r4
 180cec8:	8890d83a 	srl	r8,r17,r2
 180cecc:	8908983a 	sll	r4,r17,r4
 180ced0:	1884d83a 	srl	r2,r3,r2
 180ced4:	5222b03a 	or	r17,r10,r8
 180ced8:	2006c03a 	cmpne	r3,r4,zero
 180cedc:	88e2b03a 	or	r17,r17,r3
 180cee0:	89a3883a 	add	r17,r17,r6
 180cee4:	1145883a 	add	r2,r2,r5
 180cee8:	898d803a 	cmpltu	r6,r17,r6
 180ceec:	3087883a 	add	r3,r6,r2
 180cef0:	4821883a 	mov	r16,r9
 180cef4:	003ed906 	br	180ca5c <__ram_exceptions_end+0xff7fc76c>
 180cef8:	2984b03a 	or	r2,r5,r6
 180cefc:	10004226 	beq	r2,zero,180d008 <__subdf3+0x82c>
 180cf00:	1808d0fa 	srli	r4,r3,3
 180cf04:	8822d0fa 	srli	r17,r17,3
 180cf08:	1806977a 	slli	r3,r3,29
 180cf0c:	2080022c 	andhi	r2,r4,8
 180cf10:	1c62b03a 	or	r17,r3,r17
 180cf14:	10000826 	beq	r2,zero,180cf38 <__subdf3+0x75c>
 180cf18:	2812d0fa 	srli	r9,r5,3
 180cf1c:	4880022c 	andhi	r2,r9,8
 180cf20:	1000051e 	bne	r2,zero,180cf38 <__subdf3+0x75c>
 180cf24:	300cd0fa 	srli	r6,r6,3
 180cf28:	2804977a 	slli	r2,r5,29
 180cf2c:	4809883a 	mov	r4,r9
 180cf30:	3825883a 	mov	r18,r7
 180cf34:	11a2b03a 	or	r17,r2,r6
 180cf38:	8806d77a 	srli	r3,r17,29
 180cf3c:	200890fa 	slli	r4,r4,3
 180cf40:	882290fa 	slli	r17,r17,3
 180cf44:	0401ffc4 	movi	r16,2047
 180cf48:	1906b03a 	or	r3,r3,r4
 180cf4c:	003e4406 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cf50:	2984b03a 	or	r2,r5,r6
 180cf54:	103e4226 	beq	r2,zero,180c860 <__ram_exceptions_end+0xff7fc570>
 180cf58:	8989c83a 	sub	r4,r17,r6
 180cf5c:	8911803a 	cmpltu	r8,r17,r4
 180cf60:	1945c83a 	sub	r2,r3,r5
 180cf64:	1205c83a 	sub	r2,r2,r8
 180cf68:	1200202c 	andhi	r8,r2,128
 180cf6c:	403e9a26 	beq	r8,zero,180c9d8 <__ram_exceptions_end+0xff7fc6e8>
 180cf70:	3463c83a 	sub	r17,r6,r17
 180cf74:	28c5c83a 	sub	r2,r5,r3
 180cf78:	344d803a 	cmpltu	r6,r6,r17
 180cf7c:	1187c83a 	sub	r3,r2,r6
 180cf80:	3825883a 	mov	r18,r7
 180cf84:	003e3606 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cf88:	0101ffc4 	movi	r4,2047
 180cf8c:	493fc71e 	bne	r9,r4,180ceac <__ram_exceptions_end+0xff7fcbbc>
 180cf90:	2807883a 	mov	r3,r5
 180cf94:	3023883a 	mov	r17,r6
 180cf98:	4821883a 	mov	r16,r9
 180cf9c:	003e3006 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cfa0:	10003626 	beq	r2,zero,180d07c <__subdf3+0x8a0>
 180cfa4:	2984b03a 	or	r2,r5,r6
 180cfa8:	10001726 	beq	r2,zero,180d008 <__subdf3+0x82c>
 180cfac:	1808d0fa 	srli	r4,r3,3
 180cfb0:	8822d0fa 	srli	r17,r17,3
 180cfb4:	1806977a 	slli	r3,r3,29
 180cfb8:	2080022c 	andhi	r2,r4,8
 180cfbc:	1c62b03a 	or	r17,r3,r17
 180cfc0:	10000726 	beq	r2,zero,180cfe0 <__subdf3+0x804>
 180cfc4:	2812d0fa 	srli	r9,r5,3
 180cfc8:	4880022c 	andhi	r2,r9,8
 180cfcc:	1000041e 	bne	r2,zero,180cfe0 <__subdf3+0x804>
 180cfd0:	300cd0fa 	srli	r6,r6,3
 180cfd4:	2804977a 	slli	r2,r5,29
 180cfd8:	4809883a 	mov	r4,r9
 180cfdc:	11a2b03a 	or	r17,r2,r6
 180cfe0:	8806d77a 	srli	r3,r17,29
 180cfe4:	200890fa 	slli	r4,r4,3
 180cfe8:	882290fa 	slli	r17,r17,3
 180cfec:	3825883a 	mov	r18,r7
 180cff0:	1906b03a 	or	r3,r3,r4
 180cff4:	0401ffc4 	movi	r16,2047
 180cff8:	003e1906 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180cffc:	000b883a 	mov	r5,zero
 180d000:	0005883a 	mov	r2,zero
 180d004:	003e2e06 	br	180c8c0 <__ram_exceptions_end+0xff7fc5d0>
 180d008:	0401ffc4 	movi	r16,2047
 180d00c:	003e1406 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180d010:	0005883a 	mov	r2,zero
 180d014:	003f7506 	br	180cdec <__ram_exceptions_end+0xff7fcafc>
 180d018:	0005883a 	mov	r2,zero
 180d01c:	0009883a 	mov	r4,zero
 180d020:	003e7806 	br	180ca04 <__ram_exceptions_end+0xff7fc714>
 180d024:	123ff804 	addi	r8,r2,-32
 180d028:	01000804 	movi	r4,32
 180d02c:	1a10d83a 	srl	r8,r3,r8
 180d030:	11002526 	beq	r2,r4,180d0c8 <__subdf3+0x8ec>
 180d034:	01001004 	movi	r4,64
 180d038:	2085c83a 	sub	r2,r4,r2
 180d03c:	1884983a 	sll	r2,r3,r2
 180d040:	1444b03a 	or	r2,r2,r17
 180d044:	1004c03a 	cmpne	r2,r2,zero
 180d048:	40a2b03a 	or	r17,r8,r2
 180d04c:	0005883a 	mov	r2,zero
 180d050:	003f1606 	br	180ccac <__ram_exceptions_end+0xff7fc9bc>
 180d054:	02000434 	movhi	r8,16
 180d058:	0009883a 	mov	r4,zero
 180d05c:	423fffc4 	addi	r8,r8,-1
 180d060:	00bfffc4 	movi	r2,-1
 180d064:	0401ffc4 	movi	r16,2047
 180d068:	003e6606 	br	180ca04 <__ram_exceptions_end+0xff7fc714>
 180d06c:	1c62b03a 	or	r17,r3,r17
 180d070:	8822c03a 	cmpne	r17,r17,zero
 180d074:	0005883a 	mov	r2,zero
 180d078:	003f9906 	br	180cee0 <__ram_exceptions_end+0xff7fcbf0>
 180d07c:	2807883a 	mov	r3,r5
 180d080:	3023883a 	mov	r17,r6
 180d084:	0401ffc4 	movi	r16,2047
 180d088:	003df506 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180d08c:	2807883a 	mov	r3,r5
 180d090:	3023883a 	mov	r17,r6
 180d094:	003df206 	br	180c860 <__ram_exceptions_end+0xff7fc570>
 180d098:	123ff804 	addi	r8,r2,-32
 180d09c:	01000804 	movi	r4,32
 180d0a0:	1a10d83a 	srl	r8,r3,r8
 180d0a4:	11000a26 	beq	r2,r4,180d0d0 <__subdf3+0x8f4>
 180d0a8:	01001004 	movi	r4,64
 180d0ac:	2085c83a 	sub	r2,r4,r2
 180d0b0:	1884983a 	sll	r2,r3,r2
 180d0b4:	1444b03a 	or	r2,r2,r17
 180d0b8:	1004c03a 	cmpne	r2,r2,zero
 180d0bc:	40a2b03a 	or	r17,r8,r2
 180d0c0:	0005883a 	mov	r2,zero
 180d0c4:	003f8606 	br	180cee0 <__ram_exceptions_end+0xff7fcbf0>
 180d0c8:	0005883a 	mov	r2,zero
 180d0cc:	003fdc06 	br	180d040 <__ram_exceptions_end+0xff7fcd50>
 180d0d0:	0005883a 	mov	r2,zero
 180d0d4:	003ff706 	br	180d0b4 <__ram_exceptions_end+0xff7fcdc4>

0180d0d8 <__fixdfsi>:
 180d0d8:	280cd53a 	srli	r6,r5,20
 180d0dc:	00c00434 	movhi	r3,16
 180d0e0:	18ffffc4 	addi	r3,r3,-1
 180d0e4:	3181ffcc 	andi	r6,r6,2047
 180d0e8:	01c0ff84 	movi	r7,1022
 180d0ec:	28c6703a 	and	r3,r5,r3
 180d0f0:	280ad7fa 	srli	r5,r5,31
 180d0f4:	3980120e 	bge	r7,r6,180d140 <__fixdfsi+0x68>
 180d0f8:	00810744 	movi	r2,1053
 180d0fc:	11800c16 	blt	r2,r6,180d130 <__fixdfsi+0x58>
 180d100:	00810cc4 	movi	r2,1075
 180d104:	1185c83a 	sub	r2,r2,r6
 180d108:	01c007c4 	movi	r7,31
 180d10c:	18c00434 	orhi	r3,r3,16
 180d110:	38800d16 	blt	r7,r2,180d148 <__fixdfsi+0x70>
 180d114:	31befb44 	addi	r6,r6,-1043
 180d118:	2084d83a 	srl	r2,r4,r2
 180d11c:	1986983a 	sll	r3,r3,r6
 180d120:	1884b03a 	or	r2,r3,r2
 180d124:	28000726 	beq	r5,zero,180d144 <__fixdfsi+0x6c>
 180d128:	0085c83a 	sub	r2,zero,r2
 180d12c:	f800283a 	ret
 180d130:	00a00034 	movhi	r2,32768
 180d134:	10bfffc4 	addi	r2,r2,-1
 180d138:	2885883a 	add	r2,r5,r2
 180d13c:	f800283a 	ret
 180d140:	0005883a 	mov	r2,zero
 180d144:	f800283a 	ret
 180d148:	008104c4 	movi	r2,1043
 180d14c:	1185c83a 	sub	r2,r2,r6
 180d150:	1884d83a 	srl	r2,r3,r2
 180d154:	003ff306 	br	180d124 <__ram_exceptions_end+0xff7fce34>

0180d158 <__floatsidf>:
 180d158:	defffd04 	addi	sp,sp,-12
 180d15c:	dfc00215 	stw	ra,8(sp)
 180d160:	dc400115 	stw	r17,4(sp)
 180d164:	dc000015 	stw	r16,0(sp)
 180d168:	20002b26 	beq	r4,zero,180d218 <__floatsidf+0xc0>
 180d16c:	2023883a 	mov	r17,r4
 180d170:	2020d7fa 	srli	r16,r4,31
 180d174:	20002d16 	blt	r4,zero,180d22c <__floatsidf+0xd4>
 180d178:	8809883a 	mov	r4,r17
 180d17c:	180d2dc0 	call	180d2dc <__clzsi2>
 180d180:	01410784 	movi	r5,1054
 180d184:	288bc83a 	sub	r5,r5,r2
 180d188:	01010cc4 	movi	r4,1075
 180d18c:	2149c83a 	sub	r4,r4,r5
 180d190:	00c007c4 	movi	r3,31
 180d194:	1900160e 	bge	r3,r4,180d1f0 <__floatsidf+0x98>
 180d198:	00c104c4 	movi	r3,1043
 180d19c:	1947c83a 	sub	r3,r3,r5
 180d1a0:	88c6983a 	sll	r3,r17,r3
 180d1a4:	00800434 	movhi	r2,16
 180d1a8:	10bfffc4 	addi	r2,r2,-1
 180d1ac:	1886703a 	and	r3,r3,r2
 180d1b0:	2941ffcc 	andi	r5,r5,2047
 180d1b4:	800d883a 	mov	r6,r16
 180d1b8:	0005883a 	mov	r2,zero
 180d1bc:	280a953a 	slli	r5,r5,20
 180d1c0:	31803fcc 	andi	r6,r6,255
 180d1c4:	01000434 	movhi	r4,16
 180d1c8:	300c97fa 	slli	r6,r6,31
 180d1cc:	213fffc4 	addi	r4,r4,-1
 180d1d0:	1906703a 	and	r3,r3,r4
 180d1d4:	1946b03a 	or	r3,r3,r5
 180d1d8:	1986b03a 	or	r3,r3,r6
 180d1dc:	dfc00217 	ldw	ra,8(sp)
 180d1e0:	dc400117 	ldw	r17,4(sp)
 180d1e4:	dc000017 	ldw	r16,0(sp)
 180d1e8:	dec00304 	addi	sp,sp,12
 180d1ec:	f800283a 	ret
 180d1f0:	00c002c4 	movi	r3,11
 180d1f4:	1887c83a 	sub	r3,r3,r2
 180d1f8:	88c6d83a 	srl	r3,r17,r3
 180d1fc:	8904983a 	sll	r2,r17,r4
 180d200:	01000434 	movhi	r4,16
 180d204:	213fffc4 	addi	r4,r4,-1
 180d208:	2941ffcc 	andi	r5,r5,2047
 180d20c:	1906703a 	and	r3,r3,r4
 180d210:	800d883a 	mov	r6,r16
 180d214:	003fe906 	br	180d1bc <__ram_exceptions_end+0xff7fcecc>
 180d218:	000d883a 	mov	r6,zero
 180d21c:	000b883a 	mov	r5,zero
 180d220:	0007883a 	mov	r3,zero
 180d224:	0005883a 	mov	r2,zero
 180d228:	003fe406 	br	180d1bc <__ram_exceptions_end+0xff7fcecc>
 180d22c:	0123c83a 	sub	r17,zero,r4
 180d230:	003fd106 	br	180d178 <__ram_exceptions_end+0xff7fce88>

0180d234 <__floatunsidf>:
 180d234:	defffe04 	addi	sp,sp,-8
 180d238:	dc000015 	stw	r16,0(sp)
 180d23c:	dfc00115 	stw	ra,4(sp)
 180d240:	2021883a 	mov	r16,r4
 180d244:	20002226 	beq	r4,zero,180d2d0 <__floatunsidf+0x9c>
 180d248:	180d2dc0 	call	180d2dc <__clzsi2>
 180d24c:	01010784 	movi	r4,1054
 180d250:	2089c83a 	sub	r4,r4,r2
 180d254:	01810cc4 	movi	r6,1075
 180d258:	310dc83a 	sub	r6,r6,r4
 180d25c:	00c007c4 	movi	r3,31
 180d260:	1980120e 	bge	r3,r6,180d2ac <__floatunsidf+0x78>
 180d264:	00c104c4 	movi	r3,1043
 180d268:	1907c83a 	sub	r3,r3,r4
 180d26c:	80ca983a 	sll	r5,r16,r3
 180d270:	00800434 	movhi	r2,16
 180d274:	10bfffc4 	addi	r2,r2,-1
 180d278:	2101ffcc 	andi	r4,r4,2047
 180d27c:	0021883a 	mov	r16,zero
 180d280:	288a703a 	and	r5,r5,r2
 180d284:	2008953a 	slli	r4,r4,20
 180d288:	00c00434 	movhi	r3,16
 180d28c:	18ffffc4 	addi	r3,r3,-1
 180d290:	28c6703a 	and	r3,r5,r3
 180d294:	8005883a 	mov	r2,r16
 180d298:	1906b03a 	or	r3,r3,r4
 180d29c:	dfc00117 	ldw	ra,4(sp)
 180d2a0:	dc000017 	ldw	r16,0(sp)
 180d2a4:	dec00204 	addi	sp,sp,8
 180d2a8:	f800283a 	ret
 180d2ac:	00c002c4 	movi	r3,11
 180d2b0:	188bc83a 	sub	r5,r3,r2
 180d2b4:	814ad83a 	srl	r5,r16,r5
 180d2b8:	00c00434 	movhi	r3,16
 180d2bc:	18ffffc4 	addi	r3,r3,-1
 180d2c0:	81a0983a 	sll	r16,r16,r6
 180d2c4:	2101ffcc 	andi	r4,r4,2047
 180d2c8:	28ca703a 	and	r5,r5,r3
 180d2cc:	003fed06 	br	180d284 <__ram_exceptions_end+0xff7fcf94>
 180d2d0:	0009883a 	mov	r4,zero
 180d2d4:	000b883a 	mov	r5,zero
 180d2d8:	003fea06 	br	180d284 <__ram_exceptions_end+0xff7fcf94>

0180d2dc <__clzsi2>:
 180d2dc:	00bfffd4 	movui	r2,65535
 180d2e0:	11000536 	bltu	r2,r4,180d2f8 <__clzsi2+0x1c>
 180d2e4:	00803fc4 	movi	r2,255
 180d2e8:	11000f36 	bltu	r2,r4,180d328 <__clzsi2+0x4c>
 180d2ec:	00800804 	movi	r2,32
 180d2f0:	0007883a 	mov	r3,zero
 180d2f4:	00000506 	br	180d30c <__clzsi2+0x30>
 180d2f8:	00804034 	movhi	r2,256
 180d2fc:	10bfffc4 	addi	r2,r2,-1
 180d300:	11000c2e 	bgeu	r2,r4,180d334 <__clzsi2+0x58>
 180d304:	00800204 	movi	r2,8
 180d308:	00c00604 	movi	r3,24
 180d30c:	20c8d83a 	srl	r4,r4,r3
 180d310:	00c06134 	movhi	r3,388
 180d314:	18c28304 	addi	r3,r3,2572
 180d318:	1909883a 	add	r4,r3,r4
 180d31c:	20c00003 	ldbu	r3,0(r4)
 180d320:	10c5c83a 	sub	r2,r2,r3
 180d324:	f800283a 	ret
 180d328:	00800604 	movi	r2,24
 180d32c:	00c00204 	movi	r3,8
 180d330:	003ff606 	br	180d30c <__ram_exceptions_end+0xff7fd01c>
 180d334:	00800404 	movi	r2,16
 180d338:	1007883a 	mov	r3,r2
 180d33c:	003ff306 	br	180d30c <__ram_exceptions_end+0xff7fd01c>

0180d340 <pre_constructors>:
/*
 * We want this pre_constructors and post_constructors functions to be called when it is defined by the user, if the user didn't define it
 * we don't want a link error, just call this empty function
 */
void __attribute__((weak)) pre_constructors()
{
 180d340:	deffff04 	addi	sp,sp,-4
 180d344:	df000015 	stw	fp,0(sp)
 180d348:	d839883a 	mov	fp,sp
	// nothing to do here... may be overloaded by the application
}
 180d34c:	0001883a 	nop
 180d350:	e037883a 	mov	sp,fp
 180d354:	df000017 	ldw	fp,0(sp)
 180d358:	dec00104 	addi	sp,sp,4
 180d35c:	f800283a 	ret

0180d360 <post_constructors>:

void __attribute__((weak)) post_constructors()
{
 180d360:	deffff04 	addi	sp,sp,-4
 180d364:	df000015 	stw	fp,0(sp)
 180d368:	d839883a 	mov	fp,sp
	// nothing to do here... may be overloaded by the application
}
 180d36c:	0001883a 	nop
 180d370:	e037883a 	mov	sp,fp
 180d374:	df000017 	ldw	fp,0(sp)
 180d378:	dec00104 	addi	sp,sp,4
 180d37c:	f800283a 	ret

0180d380 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 180d380:	defff904 	addi	sp,sp,-28
 180d384:	dfc00615 	stw	ra,24(sp)
 180d388:	df000515 	stw	fp,20(sp)
 180d38c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 180d390:	0009883a 	mov	r4,zero
 180d394:	18242800 	call	1824280 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 180d398:	01000104 	movi	r4,4
 180d39c:	180d7a80 	call	180d7a8 <xQueueCreateMutex>
 180d3a0:	d0a7d215 	stw	r2,-24760(gp)
 180d3a4:	01000104 	movi	r4,4
 180d3a8:	180d7a80 	call	180d7a8 <xQueueCreateMutex>
 180d3ac:	d0a7ff15 	stw	r2,-24580(gp)
 180d3b0:	d0a7e704 	addi	r2,gp,-24676
 180d3b4:	e0bffc15 	stw	r2,-16(fp)
 180d3b8:	00800044 	movi	r2,1
 180d3bc:	e0bffd0d 	sth	r2,-12(fp)
 * alt_sem_create() is a wrapper for xSemaphoreCreateCounting(). The return value is 0 if 
 * the semaphore has been successfully created, or non-zero otherwise.
 */
static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (xSemaphoreHandle* sem, alt_u16 value)
{
	*sem = xSemaphoreCreateCounting(value ? value : 1, value);
 180d3c0:	e0bffd0b 	ldhu	r2,-12(fp)
 180d3c4:	10000226 	beq	r2,zero,180d3d0 <alt_main+0x50>
 180d3c8:	e0bffd0b 	ldhu	r2,-12(fp)
 180d3cc:	00000106 	br	180d3d4 <alt_main+0x54>
 180d3d0:	00800044 	movi	r2,1
 180d3d4:	e0fffd0b 	ldhu	r3,-12(fp)
 180d3d8:	180b883a 	mov	r5,r3
 180d3dc:	1009883a 	mov	r4,r2
 180d3e0:	180d9300 	call	180d930 <xQueueCreateCountingSemaphore>
 180d3e4:	1007883a 	mov	r3,r2
 180d3e8:	e0bffc17 	ldw	r2,-16(fp)
 180d3ec:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 180d3f0:	18242b80 	call	18242b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 180d3f4:	01806134 	movhi	r6,388
 180d3f8:	3182c304 	addi	r6,r6,2828
 180d3fc:	01406134 	movhi	r5,388
 180d400:	2942c304 	addi	r5,r5,2828
 180d404:	01006134 	movhi	r4,388
 180d408:	2102c304 	addi	r4,r4,2828
 180d40c:	18128740 	call	1812874 <alt_io_redirect>
#endif

  /*
   * Call the pre_constructors function
   */
  pre_constructors();
 180d410:	180d3400 	call	180d340 <pre_constructors>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 180d414:	18126040 	call	1812604 <_do_ctors>
#endif /* ALT_NO_C_PLUS_PLUS */

  /*
   * Call the post_constructors function
   */
  post_constructors();
 180d418:	180d3600 	call	180d360 <post_constructors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 180d41c:	01006074 	movhi	r4,385
 180d420:	21099904 	addi	r4,r4,9828
 180d424:	183c2f40 	call	183c2f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 180d428:	d0a7cf17 	ldw	r2,-24772(gp)
 180d42c:	d0e7d017 	ldw	r3,-24768(gp)
 180d430:	d127d117 	ldw	r4,-24764(gp)
 180d434:	200d883a 	mov	r6,r4
 180d438:	180b883a 	mov	r5,r3
 180d43c:	1009883a 	mov	r4,r2
 180d440:	18009d00 	call	18009d0 <main>
 180d444:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 180d448:	01000044 	movi	r4,1
 180d44c:	18131cc0 	call	18131cc <close>
  exit (result);
 180d450:	e13ffb17 	ldw	r4,-20(fp)
 180d454:	183c3180 	call	183c318 <exit>

0180d458 <__malloc_lock>:
xSemaphoreHandle alt_heapsem;

/* __malloc_lock needs to provide recursive mutex locking */

void __malloc_lock ( struct _reent *_r )
{
 180d458:	defffd04 	addi	sp,sp,-12
 180d45c:	dfc00215 	stw	ra,8(sp)
 180d460:	df000115 	stw	fp,4(sp)
 180d464:	df000104 	addi	fp,sp,4
 180d468:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 180d46c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180d470:	10000b26 	beq	r2,zero,180d4a0 <__malloc_lock+0x48>
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_heapsem, 10) != pdTRUE)
 180d474:	00000206 	br	180d480 <__malloc_lock+0x28>
		vTaskDelay(1);
 180d478:	01000044 	movi	r4,1
 180d47c:	180f1d80 	call	180f1d8 <vTaskDelay>
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_heapsem, 10) != pdTRUE)
 180d480:	d0a7d217 	ldw	r2,-24760(gp)
 180d484:	01400284 	movi	r5,10
 180d488:	1009883a 	mov	r4,r2
 180d48c:	180d8940 	call	180d894 <xQueueTakeMutexRecursive>
 180d490:	10800058 	cmpnei	r2,r2,1
 180d494:	103ff81e 	bne	r2,zero,180d478 <__ram_exceptions_end+0xff7fd188>
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
 180d498:	0001883a 	nop
 180d49c:	00000106 	br	180d4a4 <__malloc_lock+0x4c>

void __malloc_lock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 180d4a0:	0001883a 	nop
	while (xSemaphoreTakeRecursive(alt_heapsem, 10) != pdTRUE)
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
}
 180d4a4:	e037883a 	mov	sp,fp
 180d4a8:	dfc00117 	ldw	ra,4(sp)
 180d4ac:	df000017 	ldw	fp,0(sp)
 180d4b0:	dec00204 	addi	sp,sp,8
 180d4b4:	f800283a 	ret

0180d4b8 <__malloc_unlock>:

/* __malloc_unlock needs to provide recursive mutex unlocking */

void __malloc_unlock ( struct _reent *_r )
{
 180d4b8:	defffd04 	addi	sp,sp,-12
 180d4bc:	dfc00215 	stw	ra,8(sp)
 180d4c0:	df000115 	stw	fp,4(sp)
 180d4c4:	df000104 	addi	fp,sp,4
 180d4c8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 180d4cc:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180d4d0:	10000426 	beq	r2,zero,180d4e4 <__malloc_unlock+0x2c>
		return;
	  
	xSemaphoreGiveRecursive(alt_heapsem);
 180d4d4:	d0a7d217 	ldw	r2,-24760(gp)
 180d4d8:	1009883a 	mov	r4,r2
 180d4dc:	180d8040 	call	180d804 <xQueueGiveMutexRecursive>
 180d4e0:	00000106 	br	180d4e8 <__malloc_unlock+0x30>

void __malloc_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 180d4e4:	0001883a 	nop
	  
	xSemaphoreGiveRecursive(alt_heapsem);
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 180d4e8:	e037883a 	mov	sp,fp
 180d4ec:	dfc00117 	ldw	ra,4(sp)
 180d4f0:	df000017 	ldw	fp,0(sp)
 180d4f4:	dec00204 	addi	sp,sp,8
 180d4f8:	f800283a 	ret

0180d4fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 180d4fc:	defffb04 	addi	sp,sp,-20
 180d500:	dfc00415 	stw	ra,16(sp)
 180d504:	df000315 	stw	fp,12(sp)
 180d508:	df000304 	addi	fp,sp,12
 180d50c:	e13ffe15 	stw	r4,-8(fp)
 180d510:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = xQueue;
 180d514:	e0bffe17 	ldw	r2,-8(fp)
 180d518:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 180d51c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180d520:	10000126 	beq	r2,zero,180d528 <xQueueGenericReset+0x2c>
 180d524:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 180d528:	e0bffd17 	ldw	r2,-12(fp)
 180d52c:	10c00017 	ldw	r3,0(r2)
 180d530:	e0bffd17 	ldw	r2,-12(fp)
 180d534:	11000f17 	ldw	r4,60(r2)
 180d538:	e0bffd17 	ldw	r2,-12(fp)
 180d53c:	10801017 	ldw	r2,64(r2)
 180d540:	2085383a 	mul	r2,r4,r2
 180d544:	1887883a 	add	r3,r3,r2
 180d548:	e0bffd17 	ldw	r2,-12(fp)
 180d54c:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 180d550:	e0bffd17 	ldw	r2,-12(fp)
 180d554:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 180d558:	e0bffd17 	ldw	r2,-12(fp)
 180d55c:	10c00017 	ldw	r3,0(r2)
 180d560:	e0bffd17 	ldw	r2,-12(fp)
 180d564:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 180d568:	e0bffd17 	ldw	r2,-12(fp)
 180d56c:	10c00017 	ldw	r3,0(r2)
 180d570:	e0bffd17 	ldw	r2,-12(fp)
 180d574:	10800f17 	ldw	r2,60(r2)
 180d578:	113fffc4 	addi	r4,r2,-1
 180d57c:	e0bffd17 	ldw	r2,-12(fp)
 180d580:	10801017 	ldw	r2,64(r2)
 180d584:	2085383a 	mul	r2,r4,r2
 180d588:	1887883a 	add	r3,r3,r2
 180d58c:	e0bffd17 	ldw	r2,-12(fp)
 180d590:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 180d594:	e0bffd17 	ldw	r2,-12(fp)
 180d598:	00ffffc4 	movi	r3,-1
 180d59c:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 180d5a0:	e0bffd17 	ldw	r2,-12(fp)
 180d5a4:	00ffffc4 	movi	r3,-1
 180d5a8:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 180d5ac:	e0bfff17 	ldw	r2,-4(fp)
 180d5b0:	10000a1e 	bne	r2,zero,180d5dc <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180d5b4:	e0bffd17 	ldw	r2,-12(fp)
 180d5b8:	10800417 	ldw	r2,16(r2)
 180d5bc:	10000f26 	beq	r2,zero,180d5fc <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180d5c0:	e0bffd17 	ldw	r2,-12(fp)
 180d5c4:	10800404 	addi	r2,r2,16
 180d5c8:	1009883a 	mov	r4,r2
 180d5cc:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180d5d0:	10000a26 	beq	r2,zero,180d5fc <xQueueGenericReset+0x100>
				{
					queueYIELD_IF_USING_PREEMPTION();
 180d5d4:	003b683a 	trap	0
 180d5d8:	00000806 	br	180d5fc <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 180d5dc:	e0bffd17 	ldw	r2,-12(fp)
 180d5e0:	10800404 	addi	r2,r2,16
 180d5e4:	1009883a 	mov	r4,r2
 180d5e8:	182b8640 	call	182b864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 180d5ec:	e0bffd17 	ldw	r2,-12(fp)
 180d5f0:	10800904 	addi	r2,r2,36
 180d5f4:	1009883a 	mov	r4,r2
 180d5f8:	182b8640 	call	182b864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 180d5fc:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180d600:	10000126 	beq	r2,zero,180d608 <xQueueGenericReset+0x10c>
 180d604:	1810f900 	call	1810f90 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 180d608:	00800044 	movi	r2,1
}
 180d60c:	e037883a 	mov	sp,fp
 180d610:	dfc00117 	ldw	ra,4(sp)
 180d614:	df000017 	ldw	fp,0(sp)
 180d618:	dec00204 	addi	sp,sp,8
 180d61c:	f800283a 	ret

0180d620 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 180d620:	defff704 	addi	sp,sp,-36
 180d624:	dfc00815 	stw	ra,32(sp)
 180d628:	df000715 	stw	fp,28(sp)
 180d62c:	df000704 	addi	fp,sp,28
 180d630:	e13ffd15 	stw	r4,-12(fp)
 180d634:	e17ffe15 	stw	r5,-8(fp)
 180d638:	3005883a 	mov	r2,r6
 180d63c:	e0bfff05 	stb	r2,-4(fp)
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180d640:	e0fffd17 	ldw	r3,-12(fp)
 180d644:	e0bffe17 	ldw	r2,-8(fp)
 180d648:	1885383a 	mul	r2,r3,r2
 180d64c:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 180d650:	e0bffa17 	ldw	r2,-24(fp)
 180d654:	10801404 	addi	r2,r2,80
 180d658:	1009883a 	mov	r4,r2
 180d65c:	182b7d40 	call	182b7d4 <pvPortMalloc>
 180d660:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 180d664:	e0bffb17 	ldw	r2,-20(fp)
 180d668:	10000d26 	beq	r2,zero,180d6a0 <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 180d66c:	e0bffb17 	ldw	r2,-20(fp)
 180d670:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 180d674:	e0bffc17 	ldw	r2,-16(fp)
 180d678:	10801404 	addi	r2,r2,80
 180d67c:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 180d680:	e0ffff03 	ldbu	r3,-4(fp)
 180d684:	e0bffb17 	ldw	r2,-20(fp)
 180d688:	d8800015 	stw	r2,0(sp)
 180d68c:	180f883a 	mov	r7,r3
 180d690:	e1bffc17 	ldw	r6,-16(fp)
 180d694:	e17ffe17 	ldw	r5,-8(fp)
 180d698:	e13ffd17 	ldw	r4,-12(fp)
 180d69c:	180d6b80 	call	180d6b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 180d6a0:	e0bffb17 	ldw	r2,-20(fp)
	}
 180d6a4:	e037883a 	mov	sp,fp
 180d6a8:	dfc00117 	ldw	ra,4(sp)
 180d6ac:	df000017 	ldw	fp,0(sp)
 180d6b0:	dec00204 	addi	sp,sp,8
 180d6b4:	f800283a 	ret

0180d6b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 180d6b8:	defffa04 	addi	sp,sp,-24
 180d6bc:	dfc00515 	stw	ra,20(sp)
 180d6c0:	df000415 	stw	fp,16(sp)
 180d6c4:	df000404 	addi	fp,sp,16
 180d6c8:	e13ffc15 	stw	r4,-16(fp)
 180d6cc:	e17ffd15 	stw	r5,-12(fp)
 180d6d0:	e1bffe15 	stw	r6,-8(fp)
 180d6d4:	3805883a 	mov	r2,r7
 180d6d8:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 180d6dc:	e0bffd17 	ldw	r2,-12(fp)
 180d6e0:	1000041e 	bne	r2,zero,180d6f4 <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 180d6e4:	e0800217 	ldw	r2,8(fp)
 180d6e8:	e0c00217 	ldw	r3,8(fp)
 180d6ec:	10c00015 	stw	r3,0(r2)
 180d6f0:	00000306 	br	180d700 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 180d6f4:	e0800217 	ldw	r2,8(fp)
 180d6f8:	e0fffe17 	ldw	r3,-8(fp)
 180d6fc:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 180d700:	e0800217 	ldw	r2,8(fp)
 180d704:	e0fffc17 	ldw	r3,-16(fp)
 180d708:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 180d70c:	e0800217 	ldw	r2,8(fp)
 180d710:	e0fffd17 	ldw	r3,-12(fp)
 180d714:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 180d718:	01400044 	movi	r5,1
 180d71c:	e1000217 	ldw	r4,8(fp)
 180d720:	180d4fc0 	call	180d4fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 180d724:	e0800217 	ldw	r2,8(fp)
 180d728:	e0ffff03 	ldbu	r3,-4(fp)
 180d72c:	10c01305 	stb	r3,76(r2)
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 180d730:	0001883a 	nop
 180d734:	e037883a 	mov	sp,fp
 180d738:	dfc00117 	ldw	ra,4(sp)
 180d73c:	df000017 	ldw	fp,0(sp)
 180d740:	dec00204 	addi	sp,sp,8
 180d744:	f800283a 	ret

0180d748 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 180d748:	defffd04 	addi	sp,sp,-12
 180d74c:	dfc00215 	stw	ra,8(sp)
 180d750:	df000115 	stw	fp,4(sp)
 180d754:	df000104 	addi	fp,sp,4
 180d758:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 180d75c:	e0bfff17 	ldw	r2,-4(fp)
 180d760:	10000b26 	beq	r2,zero,180d790 <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 180d764:	e0bfff17 	ldw	r2,-4(fp)
 180d768:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 180d76c:	e0bfff17 	ldw	r2,-4(fp)
 180d770:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 180d774:	e0bfff17 	ldw	r2,-4(fp)
 180d778:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 180d77c:	000f883a 	mov	r7,zero
 180d780:	000d883a 	mov	r6,zero
 180d784:	000b883a 	mov	r5,zero
 180d788:	e13fff17 	ldw	r4,-4(fp)
 180d78c:	180d9880 	call	180d988 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 180d790:	0001883a 	nop
 180d794:	e037883a 	mov	sp,fp
 180d798:	dfc00117 	ldw	ra,4(sp)
 180d79c:	df000017 	ldw	fp,0(sp)
 180d7a0:	dec00204 	addi	sp,sp,8
 180d7a4:	f800283a 	ret

0180d7a8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 180d7a8:	defffa04 	addi	sp,sp,-24
 180d7ac:	dfc00515 	stw	ra,20(sp)
 180d7b0:	df000415 	stw	fp,16(sp)
 180d7b4:	df000404 	addi	fp,sp,16
 180d7b8:	2005883a 	mov	r2,r4
 180d7bc:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 180d7c0:	00800044 	movi	r2,1
 180d7c4:	e0bffc15 	stw	r2,-16(fp)
 180d7c8:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 180d7cc:	e0bfff03 	ldbu	r2,-4(fp)
 180d7d0:	100d883a 	mov	r6,r2
 180d7d4:	e17ffd17 	ldw	r5,-12(fp)
 180d7d8:	e13ffc17 	ldw	r4,-16(fp)
 180d7dc:	180d6200 	call	180d620 <xQueueGenericCreate>
 180d7e0:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 180d7e4:	e13ffe17 	ldw	r4,-8(fp)
 180d7e8:	180d7480 	call	180d748 <prvInitialiseMutex>

		return xNewQueue;
 180d7ec:	e0bffe17 	ldw	r2,-8(fp)
	}
 180d7f0:	e037883a 	mov	sp,fp
 180d7f4:	dfc00117 	ldw	ra,4(sp)
 180d7f8:	df000017 	ldw	fp,0(sp)
 180d7fc:	dec00204 	addi	sp,sp,8
 180d800:	f800283a 	ret

0180d804 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 180d804:	defffa04 	addi	sp,sp,-24
 180d808:	dfc00515 	stw	ra,20(sp)
 180d80c:	df000415 	stw	fp,16(sp)
 180d810:	dc000315 	stw	r16,12(sp)
 180d814:	df000404 	addi	fp,sp,16
 180d818:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 180d81c:	e0bffe17 	ldw	r2,-8(fp)
 180d820:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 180d824:	e0bffd17 	ldw	r2,-12(fp)
 180d828:	14000217 	ldw	r16,8(r2)
 180d82c:	1810b580 	call	1810b58 <xTaskGetCurrentTaskHandle>
 180d830:	8080101e 	bne	r16,r2,180d874 <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 180d834:	e0bffd17 	ldw	r2,-12(fp)
 180d838:	10800317 	ldw	r2,12(r2)
 180d83c:	10ffffc4 	addi	r3,r2,-1
 180d840:	e0bffd17 	ldw	r2,-12(fp)
 180d844:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 180d848:	e0bffd17 	ldw	r2,-12(fp)
 180d84c:	10800317 	ldw	r2,12(r2)
 180d850:	1000051e 	bne	r2,zero,180d868 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 180d854:	000f883a 	mov	r7,zero
 180d858:	000d883a 	mov	r6,zero
 180d85c:	000b883a 	mov	r5,zero
 180d860:	e13ffd17 	ldw	r4,-12(fp)
 180d864:	180d9880 	call	180d988 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 180d868:	00800044 	movi	r2,1
 180d86c:	e0bffc15 	stw	r2,-16(fp)
 180d870:	00000106 	br	180d878 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 180d874:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 180d878:	e0bffc17 	ldw	r2,-16(fp)
	}
 180d87c:	e6ffff04 	addi	sp,fp,-4
 180d880:	dfc00217 	ldw	ra,8(sp)
 180d884:	df000117 	ldw	fp,4(sp)
 180d888:	dc000017 	ldw	r16,0(sp)
 180d88c:	dec00304 	addi	sp,sp,12
 180d890:	f800283a 	ret

0180d894 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 180d894:	defff904 	addi	sp,sp,-28
 180d898:	dfc00615 	stw	ra,24(sp)
 180d89c:	df000515 	stw	fp,20(sp)
 180d8a0:	dc000415 	stw	r16,16(sp)
 180d8a4:	df000504 	addi	fp,sp,20
 180d8a8:	e13ffd15 	stw	r4,-12(fp)
 180d8ac:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 180d8b0:	e0bffd17 	ldw	r2,-12(fp)
 180d8b4:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 180d8b8:	e0bffc17 	ldw	r2,-16(fp)
 180d8bc:	14000217 	ldw	r16,8(r2)
 180d8c0:	1810b580 	call	1810b58 <xTaskGetCurrentTaskHandle>
 180d8c4:	8080081e 	bne	r16,r2,180d8e8 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 180d8c8:	e0bffc17 	ldw	r2,-16(fp)
 180d8cc:	10800317 	ldw	r2,12(r2)
 180d8d0:	10c00044 	addi	r3,r2,1
 180d8d4:	e0bffc17 	ldw	r2,-16(fp)
 180d8d8:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 180d8dc:	00800044 	movi	r2,1
 180d8e0:	e0bffb15 	stw	r2,-20(fp)
 180d8e4:	00000b06 	br	180d914 <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 180d8e8:	e17ffe17 	ldw	r5,-8(fp)
 180d8ec:	e13ffc17 	ldw	r4,-16(fp)
 180d8f0:	180df140 	call	180df14 <xQueueSemaphoreTake>
 180d8f4:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 180d8f8:	e0bffb17 	ldw	r2,-20(fp)
 180d8fc:	10000526 	beq	r2,zero,180d914 <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 180d900:	e0bffc17 	ldw	r2,-16(fp)
 180d904:	10800317 	ldw	r2,12(r2)
 180d908:	10c00044 	addi	r3,r2,1
 180d90c:	e0bffc17 	ldw	r2,-16(fp)
 180d910:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 180d914:	e0bffb17 	ldw	r2,-20(fp)
	}
 180d918:	e6ffff04 	addi	sp,fp,-4
 180d91c:	dfc00217 	ldw	ra,8(sp)
 180d920:	df000117 	ldw	fp,4(sp)
 180d924:	dc000017 	ldw	r16,0(sp)
 180d928:	dec00304 	addi	sp,sp,12
 180d92c:	f800283a 	ret

0180d930 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 180d930:	defffb04 	addi	sp,sp,-20
 180d934:	dfc00415 	stw	ra,16(sp)
 180d938:	df000315 	stw	fp,12(sp)
 180d93c:	df000304 	addi	fp,sp,12
 180d940:	e13ffe15 	stw	r4,-8(fp)
 180d944:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 180d948:	01800084 	movi	r6,2
 180d94c:	000b883a 	mov	r5,zero
 180d950:	e13ffe17 	ldw	r4,-8(fp)
 180d954:	180d6200 	call	180d620 <xQueueGenericCreate>
 180d958:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 180d95c:	e0bffd17 	ldw	r2,-12(fp)
 180d960:	10000326 	beq	r2,zero,180d970 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 180d964:	e0bffd17 	ldw	r2,-12(fp)
 180d968:	e0ffff17 	ldw	r3,-4(fp)
 180d96c:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 180d970:	e0bffd17 	ldw	r2,-12(fp)
	}
 180d974:	e037883a 	mov	sp,fp
 180d978:	dfc00117 	ldw	ra,4(sp)
 180d97c:	df000017 	ldw	fp,0(sp)
 180d980:	dec00204 	addi	sp,sp,8
 180d984:	f800283a 	ret

0180d988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 180d988:	defff504 	addi	sp,sp,-44
 180d98c:	dfc00a15 	stw	ra,40(sp)
 180d990:	df000915 	stw	fp,36(sp)
 180d994:	df000904 	addi	fp,sp,36
 180d998:	e13ffc15 	stw	r4,-16(fp)
 180d99c:	e17ffd15 	stw	r5,-12(fp)
 180d9a0:	e1bffe15 	stw	r6,-8(fp)
 180d9a4:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 180d9a8:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 180d9ac:	e0bffc17 	ldw	r2,-16(fp)
 180d9b0:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 180d9b4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180d9b8:	10000126 	beq	r2,zero,180d9c0 <xQueueGenericSend+0x38>
 180d9bc:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 180d9c0:	e0bff817 	ldw	r2,-32(fp)
 180d9c4:	10c00e17 	ldw	r3,56(r2)
 180d9c8:	e0bff817 	ldw	r2,-32(fp)
 180d9cc:	10800f17 	ldw	r2,60(r2)
 180d9d0:	18800336 	bltu	r3,r2,180d9e0 <xQueueGenericSend+0x58>
 180d9d4:	e0bfff17 	ldw	r2,-4(fp)
 180d9d8:	10800098 	cmpnei	r2,r2,2
 180d9dc:	1000171e 	bne	r2,zero,180da3c <xQueueGenericSend+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 180d9e0:	e1bfff17 	ldw	r6,-4(fp)
 180d9e4:	e17ffd17 	ldw	r5,-12(fp)
 180d9e8:	e13ff817 	ldw	r4,-32(fp)
 180d9ec:	180e6b00 	call	180e6b0 <prvCopyDataToQueue>
 180d9f0:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180d9f4:	e0bff817 	ldw	r2,-32(fp)
 180d9f8:	10800917 	ldw	r2,36(r2)
 180d9fc:	10000726 	beq	r2,zero,180da1c <xQueueGenericSend+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180da00:	e0bff817 	ldw	r2,-32(fp)
 180da04:	10800904 	addi	r2,r2,36
 180da08:	1009883a 	mov	r4,r2
 180da0c:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180da10:	10000526 	beq	r2,zero,180da28 <xQueueGenericSend+0xa0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 180da14:	003b683a 	trap	0
 180da18:	00000306 	br	180da28 <xQueueGenericSend+0xa0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 180da1c:	e0bff917 	ldw	r2,-28(fp)
 180da20:	10000126 	beq	r2,zero,180da28 <xQueueGenericSend+0xa0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 180da24:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 180da28:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180da2c:	10000126 	beq	r2,zero,180da34 <xQueueGenericSend+0xac>
 180da30:	1810f900 	call	1810f90 <vTaskExitCritical>
				return pdPASS;
 180da34:	00800044 	movi	r2,1
 180da38:	00004706 	br	180db58 <xQueueGenericSend+0x1d0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 180da3c:	e0bffe17 	ldw	r2,-8(fp)
 180da40:	1000051e 	bne	r2,zero,180da58 <xQueueGenericSend+0xd0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 180da44:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180da48:	10000126 	beq	r2,zero,180da50 <xQueueGenericSend+0xc8>
 180da4c:	1810f900 	call	1810f90 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 180da50:	0005883a 	mov	r2,zero
 180da54:	00004006 	br	180db58 <xQueueGenericSend+0x1d0>
				}
				else if( xEntryTimeSet == pdFALSE )
 180da58:	e0bff717 	ldw	r2,-36(fp)
 180da5c:	1000051e 	bne	r2,zero,180da74 <xQueueGenericSend+0xec>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 180da60:	e0bffa04 	addi	r2,fp,-24
 180da64:	1009883a 	mov	r4,r2
 180da68:	181043c0 	call	181043c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 180da6c:	00800044 	movi	r2,1
 180da70:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 180da74:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180da78:	10000126 	beq	r2,zero,180da80 <xQueueGenericSend+0xf8>
 180da7c:	1810f900 	call	1810f90 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 180da80:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 180da84:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180da88:	10000126 	beq	r2,zero,180da90 <xQueueGenericSend+0x108>
 180da8c:	1810f480 	call	1810f48 <vTaskEnterCritical>
 180da90:	e0bff817 	ldw	r2,-32(fp)
 180da94:	10801103 	ldbu	r2,68(r2)
 180da98:	10803fcc 	andi	r2,r2,255
 180da9c:	1080201c 	xori	r2,r2,128
 180daa0:	10bfe004 	addi	r2,r2,-128
 180daa4:	10bfffd8 	cmpnei	r2,r2,-1
 180daa8:	1000021e 	bne	r2,zero,180dab4 <xQueueGenericSend+0x12c>
 180daac:	e0bff817 	ldw	r2,-32(fp)
 180dab0:	10001105 	stb	zero,68(r2)
 180dab4:	e0bff817 	ldw	r2,-32(fp)
 180dab8:	10801143 	ldbu	r2,69(r2)
 180dabc:	10803fcc 	andi	r2,r2,255
 180dac0:	1080201c 	xori	r2,r2,128
 180dac4:	10bfe004 	addi	r2,r2,-128
 180dac8:	10bfffd8 	cmpnei	r2,r2,-1
 180dacc:	1000021e 	bne	r2,zero,180dad8 <xQueueGenericSend+0x150>
 180dad0:	e0bff817 	ldw	r2,-32(fp)
 180dad4:	10001145 	stb	zero,69(r2)
 180dad8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180dadc:	10000126 	beq	r2,zero,180dae4 <xQueueGenericSend+0x15c>
 180dae0:	1810f900 	call	1810f90 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 180dae4:	e0fffe04 	addi	r3,fp,-8
 180dae8:	e0bffa04 	addi	r2,fp,-24
 180daec:	180b883a 	mov	r5,r3
 180daf0:	1009883a 	mov	r4,r2
 180daf4:	18104780 	call	1810478 <xTaskCheckForTimeOut>
 180daf8:	1000131e 	bne	r2,zero,180db48 <xQueueGenericSend+0x1c0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 180dafc:	e13ff817 	ldw	r4,-32(fp)
 180db00:	180ea940 	call	180ea94 <prvIsQueueFull>
 180db04:	10000c26 	beq	r2,zero,180db38 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 180db08:	e0bff817 	ldw	r2,-32(fp)
 180db0c:	10800404 	addi	r2,r2,16
 180db10:	e0fffe17 	ldw	r3,-8(fp)
 180db14:	180b883a 	mov	r5,r3
 180db18:	1009883a 	mov	r4,r2
 180db1c:	181010c0 	call	181010c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 180db20:	e13ff817 	ldw	r4,-32(fp)
 180db24:	180e8d80 	call	180e8d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 180db28:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180db2c:	103fa11e 	bne	r2,zero,180d9b4 <__ram_exceptions_end+0xff7fd6c4>
				{
					portYIELD_WITHIN_API();
 180db30:	003b683a 	trap	0
 180db34:	003f9f06 	br	180d9b4 <__ram_exceptions_end+0xff7fd6c4>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 180db38:	e13ff817 	ldw	r4,-32(fp)
 180db3c:	180e8d80 	call	180e8d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 180db40:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180db44:	003f9b06 	br	180d9b4 <__ram_exceptions_end+0xff7fd6c4>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 180db48:	e13ff817 	ldw	r4,-32(fp)
 180db4c:	180e8d80 	call	180e8d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 180db50:	180f9f00 	call	180f9f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 180db54:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 180db58:	e037883a 	mov	sp,fp
 180db5c:	dfc00117 	ldw	ra,4(sp)
 180db60:	df000017 	ldw	fp,0(sp)
 180db64:	dec00204 	addi	sp,sp,8
 180db68:	f800283a 	ret

0180db6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 180db6c:	defff504 	addi	sp,sp,-44
 180db70:	dfc00a15 	stw	ra,40(sp)
 180db74:	df000915 	stw	fp,36(sp)
 180db78:	df000904 	addi	fp,sp,36
 180db7c:	e13ffc15 	stw	r4,-16(fp)
 180db80:	e17ffd15 	stw	r5,-12(fp)
 180db84:	e1bffe15 	stw	r6,-8(fp)
 180db88:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 180db8c:	e0bffc17 	ldw	r2,-16(fp)
 180db90:	e0bff815 	stw	r2,-32(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180db94:	e03ff915 	stw	zero,-28(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 180db98:	e0bff817 	ldw	r2,-32(fp)
 180db9c:	10c00e17 	ldw	r3,56(r2)
 180dba0:	e0bff817 	ldw	r2,-32(fp)
 180dba4:	10800f17 	ldw	r2,60(r2)
 180dba8:	18800336 	bltu	r3,r2,180dbb8 <xQueueGenericSendFromISR+0x4c>
 180dbac:	e0bfff17 	ldw	r2,-4(fp)
 180dbb0:	10800098 	cmpnei	r2,r2,2
 180dbb4:	1000231e 	bne	r2,zero,180dc44 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 180dbb8:	e0bff817 	ldw	r2,-32(fp)
 180dbbc:	10801143 	ldbu	r2,69(r2)
 180dbc0:	e0bffa05 	stb	r2,-24(fp)
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 180dbc4:	e0bff817 	ldw	r2,-32(fp)
 180dbc8:	10800e17 	ldw	r2,56(r2)
 180dbcc:	e0bffb15 	stw	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 180dbd0:	e1bfff17 	ldw	r6,-4(fp)
 180dbd4:	e17ffd17 	ldw	r5,-12(fp)
 180dbd8:	e13ff817 	ldw	r4,-32(fp)
 180dbdc:	180e6b00 	call	180e6b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 180dbe0:	e0bffa07 	ldb	r2,-24(fp)
 180dbe4:	10bfffd8 	cmpnei	r2,r2,-1
 180dbe8:	10000e1e 	bne	r2,zero,180dc24 <xQueueGenericSendFromISR+0xb8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180dbec:	e0bff817 	ldw	r2,-32(fp)
 180dbf0:	10800917 	ldw	r2,36(r2)
 180dbf4:	10001026 	beq	r2,zero,180dc38 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180dbf8:	e0bff817 	ldw	r2,-32(fp)
 180dbfc:	10800904 	addi	r2,r2,36
 180dc00:	1009883a 	mov	r4,r2
 180dc04:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180dc08:	10000b26 	beq	r2,zero,180dc38 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 180dc0c:	e0bffe17 	ldw	r2,-8(fp)
 180dc10:	10000926 	beq	r2,zero,180dc38 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 180dc14:	e0bffe17 	ldw	r2,-8(fp)
 180dc18:	00c00044 	movi	r3,1
 180dc1c:	10c00015 	stw	r3,0(r2)
 180dc20:	00000506 	br	180dc38 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 180dc24:	e0bffa03 	ldbu	r2,-24(fp)
 180dc28:	10800044 	addi	r2,r2,1
 180dc2c:	1007883a 	mov	r3,r2
 180dc30:	e0bff817 	ldw	r2,-32(fp)
 180dc34:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 180dc38:	00800044 	movi	r2,1
 180dc3c:	e0bff715 	stw	r2,-36(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 180dc40:	00000106 	br	180dc48 <xQueueGenericSendFromISR+0xdc>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 180dc44:	e03ff715 	stw	zero,-36(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180dc48:	e0bff717 	ldw	r2,-36(fp)
}
 180dc4c:	e037883a 	mov	sp,fp
 180dc50:	dfc00117 	ldw	ra,4(sp)
 180dc54:	df000017 	ldw	fp,0(sp)
 180dc58:	dec00204 	addi	sp,sp,8
 180dc5c:	f800283a 	ret

0180dc60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 180dc60:	defff704 	addi	sp,sp,-36
 180dc64:	dfc00815 	stw	ra,32(sp)
 180dc68:	df000715 	stw	fp,28(sp)
 180dc6c:	df000704 	addi	fp,sp,28
 180dc70:	e13ffe15 	stw	r4,-8(fp)
 180dc74:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 180dc78:	e0bffe17 	ldw	r2,-8(fp)
 180dc7c:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180dc80:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180dc84:	e0bffa17 	ldw	r2,-24(fp)
 180dc88:	10800e17 	ldw	r2,56(r2)
 180dc8c:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 180dc90:	e0bffa17 	ldw	r2,-24(fp)
 180dc94:	10800f17 	ldw	r2,60(r2)
 180dc98:	e0fffc17 	ldw	r3,-16(fp)
 180dc9c:	1880202e 	bgeu	r3,r2,180dd20 <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 180dca0:	e0bffa17 	ldw	r2,-24(fp)
 180dca4:	10801143 	ldbu	r2,69(r2)
 180dca8:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 180dcac:	e0bffc17 	ldw	r2,-16(fp)
 180dcb0:	10c00044 	addi	r3,r2,1
 180dcb4:	e0bffa17 	ldw	r2,-24(fp)
 180dcb8:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 180dcbc:	e0bffd07 	ldb	r2,-12(fp)
 180dcc0:	10bfffd8 	cmpnei	r2,r2,-1
 180dcc4:	10000e1e 	bne	r2,zero,180dd00 <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180dcc8:	e0bffa17 	ldw	r2,-24(fp)
 180dccc:	10800917 	ldw	r2,36(r2)
 180dcd0:	10001026 	beq	r2,zero,180dd14 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180dcd4:	e0bffa17 	ldw	r2,-24(fp)
 180dcd8:	10800904 	addi	r2,r2,36
 180dcdc:	1009883a 	mov	r4,r2
 180dce0:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180dce4:	10000b26 	beq	r2,zero,180dd14 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 180dce8:	e0bfff17 	ldw	r2,-4(fp)
 180dcec:	10000926 	beq	r2,zero,180dd14 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 180dcf0:	e0bfff17 	ldw	r2,-4(fp)
 180dcf4:	00c00044 	movi	r3,1
 180dcf8:	10c00015 	stw	r3,0(r2)
 180dcfc:	00000506 	br	180dd14 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 180dd00:	e0bffd03 	ldbu	r2,-12(fp)
 180dd04:	10800044 	addi	r2,r2,1
 180dd08:	1007883a 	mov	r3,r2
 180dd0c:	e0bffa17 	ldw	r2,-24(fp)
 180dd10:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 180dd14:	00800044 	movi	r2,1
 180dd18:	e0bff915 	stw	r2,-28(fp)
 180dd1c:	00000106 	br	180dd24 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 180dd20:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180dd24:	e0bff917 	ldw	r2,-28(fp)
}
 180dd28:	e037883a 	mov	sp,fp
 180dd2c:	dfc00117 	ldw	ra,4(sp)
 180dd30:	df000017 	ldw	fp,0(sp)
 180dd34:	dec00204 	addi	sp,sp,8
 180dd38:	f800283a 	ret

0180dd3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 180dd3c:	defff604 	addi	sp,sp,-40
 180dd40:	dfc00915 	stw	ra,36(sp)
 180dd44:	df000815 	stw	fp,32(sp)
 180dd48:	df000804 	addi	fp,sp,32
 180dd4c:	e13ffd15 	stw	r4,-12(fp)
 180dd50:	e17ffe15 	stw	r5,-8(fp)
 180dd54:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 180dd58:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 180dd5c:	e0bffd17 	ldw	r2,-12(fp)
 180dd60:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 180dd64:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180dd68:	10000126 	beq	r2,zero,180dd70 <xQueueReceive+0x34>
 180dd6c:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180dd70:	e0bff917 	ldw	r2,-28(fp)
 180dd74:	10800e17 	ldw	r2,56(r2)
 180dd78:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 180dd7c:	e0bffa17 	ldw	r2,-24(fp)
 180dd80:	10001526 	beq	r2,zero,180ddd8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 180dd84:	e17ffe17 	ldw	r5,-8(fp)
 180dd88:	e13ff917 	ldw	r4,-28(fp)
 180dd8c:	180e83c0 	call	180e83c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 180dd90:	e0bffa17 	ldw	r2,-24(fp)
 180dd94:	10ffffc4 	addi	r3,r2,-1
 180dd98:	e0bff917 	ldw	r2,-28(fp)
 180dd9c:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180dda0:	e0bff917 	ldw	r2,-28(fp)
 180dda4:	10800417 	ldw	r2,16(r2)
 180dda8:	10000626 	beq	r2,zero,180ddc4 <xQueueReceive+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180ddac:	e0bff917 	ldw	r2,-28(fp)
 180ddb0:	10800404 	addi	r2,r2,16
 180ddb4:	1009883a 	mov	r4,r2
 180ddb8:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180ddbc:	10000126 	beq	r2,zero,180ddc4 <xQueueReceive+0x88>
					{
						queueYIELD_IF_USING_PREEMPTION();
 180ddc0:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 180ddc4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180ddc8:	10000126 	beq	r2,zero,180ddd0 <xQueueReceive+0x94>
 180ddcc:	1810f900 	call	1810f90 <vTaskExitCritical>
				return pdPASS;
 180ddd0:	00800044 	movi	r2,1
 180ddd4:	00004a06 	br	180df00 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 180ddd8:	e0bfff17 	ldw	r2,-4(fp)
 180dddc:	1000051e 	bne	r2,zero,180ddf4 <xQueueReceive+0xb8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 180dde0:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180dde4:	10000126 	beq	r2,zero,180ddec <xQueueReceive+0xb0>
 180dde8:	1810f900 	call	1810f90 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 180ddec:	0005883a 	mov	r2,zero
 180ddf0:	00004306 	br	180df00 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 180ddf4:	e0bff817 	ldw	r2,-32(fp)
 180ddf8:	1000051e 	bne	r2,zero,180de10 <xQueueReceive+0xd4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 180ddfc:	e0bffb04 	addi	r2,fp,-20
 180de00:	1009883a 	mov	r4,r2
 180de04:	181043c0 	call	181043c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 180de08:	00800044 	movi	r2,1
 180de0c:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 180de10:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180de14:	10000126 	beq	r2,zero,180de1c <xQueueReceive+0xe0>
 180de18:	1810f900 	call	1810f90 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 180de1c:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 180de20:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180de24:	10000126 	beq	r2,zero,180de2c <xQueueReceive+0xf0>
 180de28:	1810f480 	call	1810f48 <vTaskEnterCritical>
 180de2c:	e0bff917 	ldw	r2,-28(fp)
 180de30:	10801103 	ldbu	r2,68(r2)
 180de34:	10803fcc 	andi	r2,r2,255
 180de38:	1080201c 	xori	r2,r2,128
 180de3c:	10bfe004 	addi	r2,r2,-128
 180de40:	10bfffd8 	cmpnei	r2,r2,-1
 180de44:	1000021e 	bne	r2,zero,180de50 <xQueueReceive+0x114>
 180de48:	e0bff917 	ldw	r2,-28(fp)
 180de4c:	10001105 	stb	zero,68(r2)
 180de50:	e0bff917 	ldw	r2,-28(fp)
 180de54:	10801143 	ldbu	r2,69(r2)
 180de58:	10803fcc 	andi	r2,r2,255
 180de5c:	1080201c 	xori	r2,r2,128
 180de60:	10bfe004 	addi	r2,r2,-128
 180de64:	10bfffd8 	cmpnei	r2,r2,-1
 180de68:	1000021e 	bne	r2,zero,180de74 <xQueueReceive+0x138>
 180de6c:	e0bff917 	ldw	r2,-28(fp)
 180de70:	10001145 	stb	zero,69(r2)
 180de74:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180de78:	10000126 	beq	r2,zero,180de80 <xQueueReceive+0x144>
 180de7c:	1810f900 	call	1810f90 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 180de80:	e0ffff04 	addi	r3,fp,-4
 180de84:	e0bffb04 	addi	r2,fp,-20
 180de88:	180b883a 	mov	r5,r3
 180de8c:	1009883a 	mov	r4,r2
 180de90:	18104780 	call	1810478 <xTaskCheckForTimeOut>
 180de94:	1000131e 	bne	r2,zero,180dee4 <xQueueReceive+0x1a8>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180de98:	e13ff917 	ldw	r4,-28(fp)
 180de9c:	180e9ec0 	call	180e9ec <prvIsQueueEmpty>
 180dea0:	10000c26 	beq	r2,zero,180ded4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 180dea4:	e0bff917 	ldw	r2,-28(fp)
 180dea8:	10800904 	addi	r2,r2,36
 180deac:	e0ffff17 	ldw	r3,-4(fp)
 180deb0:	180b883a 	mov	r5,r3
 180deb4:	1009883a 	mov	r4,r2
 180deb8:	181010c0 	call	181010c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 180debc:	e13ff917 	ldw	r4,-28(fp)
 180dec0:	180e8d80 	call	180e8d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 180dec4:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180dec8:	103fa61e 	bne	r2,zero,180dd64 <__ram_exceptions_end+0xff7fda74>
				{
					portYIELD_WITHIN_API();
 180decc:	003b683a 	trap	0
 180ded0:	003fa406 	br	180dd64 <__ram_exceptions_end+0xff7fda74>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 180ded4:	e13ff917 	ldw	r4,-28(fp)
 180ded8:	180e8d80 	call	180e8d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 180dedc:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180dee0:	003fa006 	br	180dd64 <__ram_exceptions_end+0xff7fda74>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 180dee4:	e13ff917 	ldw	r4,-28(fp)
 180dee8:	180e8d80 	call	180e8d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 180deec:	180f9f00 	call	180f9f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180def0:	e13ff917 	ldw	r4,-28(fp)
 180def4:	180e9ec0 	call	180e9ec <prvIsQueueEmpty>
 180def8:	103f9a26 	beq	r2,zero,180dd64 <__ram_exceptions_end+0xff7fda74>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 180defc:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 180df00:	e037883a 	mov	sp,fp
 180df04:	dfc00117 	ldw	ra,4(sp)
 180df08:	df000017 	ldw	fp,0(sp)
 180df0c:	dec00204 	addi	sp,sp,8
 180df10:	f800283a 	ret

0180df14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 180df14:	defff504 	addi	sp,sp,-44
 180df18:	dfc00a15 	stw	ra,40(sp)
 180df1c:	df000915 	stw	fp,36(sp)
 180df20:	df000904 	addi	fp,sp,36
 180df24:	e13ffe15 	stw	r4,-8(fp)
 180df28:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 180df2c:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 180df30:	e0bffe17 	ldw	r2,-8(fp)
 180df34:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 180df38:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 180df3c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180df40:	10000126 	beq	r2,zero,180df48 <xQueueSemaphoreTake+0x34>
 180df44:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 180df48:	e0bff917 	ldw	r2,-28(fp)
 180df4c:	10800e17 	ldw	r2,56(r2)
 180df50:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 180df54:	e0bffa17 	ldw	r2,-24(fp)
 180df58:	10001926 	beq	r2,zero,180dfc0 <xQueueSemaphoreTake+0xac>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 180df5c:	e0bffa17 	ldw	r2,-24(fp)
 180df60:	10ffffc4 	addi	r3,r2,-1
 180df64:	e0bff917 	ldw	r2,-28(fp)
 180df68:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 180df6c:	e0bff917 	ldw	r2,-28(fp)
 180df70:	10800017 	ldw	r2,0(r2)
 180df74:	1000041e 	bne	r2,zero,180df88 <xQueueSemaphoreTake+0x74>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 180df78:	18110300 	call	1811030 <pvTaskIncrementMutexHeldCount>
 180df7c:	1007883a 	mov	r3,r2
 180df80:	e0bff917 	ldw	r2,-28(fp)
 180df84:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180df88:	e0bff917 	ldw	r2,-28(fp)
 180df8c:	10800417 	ldw	r2,16(r2)
 180df90:	10000626 	beq	r2,zero,180dfac <xQueueSemaphoreTake+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180df94:	e0bff917 	ldw	r2,-28(fp)
 180df98:	10800404 	addi	r2,r2,16
 180df9c:	1009883a 	mov	r4,r2
 180dfa0:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180dfa4:	10000126 	beq	r2,zero,180dfac <xQueueSemaphoreTake+0x98>
					{
						queueYIELD_IF_USING_PREEMPTION();
 180dfa8:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 180dfac:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180dfb0:	10000126 	beq	r2,zero,180dfb8 <xQueueSemaphoreTake+0xa4>
 180dfb4:	1810f900 	call	1810f90 <vTaskExitCritical>
				return pdPASS;
 180dfb8:	00800044 	movi	r2,1
 180dfbc:	00006806 	br	180e160 <xQueueSemaphoreTake+0x24c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 180dfc0:	e0bfff17 	ldw	r2,-4(fp)
 180dfc4:	1000051e 	bne	r2,zero,180dfdc <xQueueSemaphoreTake+0xc8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 180dfc8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180dfcc:	10000126 	beq	r2,zero,180dfd4 <xQueueSemaphoreTake+0xc0>
 180dfd0:	1810f900 	call	1810f90 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 180dfd4:	0005883a 	mov	r2,zero
 180dfd8:	00006106 	br	180e160 <xQueueSemaphoreTake+0x24c>
				}
				else if( xEntryTimeSet == pdFALSE )
 180dfdc:	e0bff717 	ldw	r2,-36(fp)
 180dfe0:	1000051e 	bne	r2,zero,180dff8 <xQueueSemaphoreTake+0xe4>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 180dfe4:	e0bffc04 	addi	r2,fp,-16
 180dfe8:	1009883a 	mov	r4,r2
 180dfec:	181043c0 	call	181043c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 180dff0:	00800044 	movi	r2,1
 180dff4:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 180dff8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180dffc:	10000126 	beq	r2,zero,180e004 <xQueueSemaphoreTake+0xf0>
 180e000:	1810f900 	call	1810f90 <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 180e004:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 180e008:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e00c:	10000126 	beq	r2,zero,180e014 <xQueueSemaphoreTake+0x100>
 180e010:	1810f480 	call	1810f48 <vTaskEnterCritical>
 180e014:	e0bff917 	ldw	r2,-28(fp)
 180e018:	10801103 	ldbu	r2,68(r2)
 180e01c:	10803fcc 	andi	r2,r2,255
 180e020:	1080201c 	xori	r2,r2,128
 180e024:	10bfe004 	addi	r2,r2,-128
 180e028:	10bfffd8 	cmpnei	r2,r2,-1
 180e02c:	1000021e 	bne	r2,zero,180e038 <xQueueSemaphoreTake+0x124>
 180e030:	e0bff917 	ldw	r2,-28(fp)
 180e034:	10001105 	stb	zero,68(r2)
 180e038:	e0bff917 	ldw	r2,-28(fp)
 180e03c:	10801143 	ldbu	r2,69(r2)
 180e040:	10803fcc 	andi	r2,r2,255
 180e044:	1080201c 	xori	r2,r2,128
 180e048:	10bfe004 	addi	r2,r2,-128
 180e04c:	10bfffd8 	cmpnei	r2,r2,-1
 180e050:	1000021e 	bne	r2,zero,180e05c <xQueueSemaphoreTake+0x148>
 180e054:	e0bff917 	ldw	r2,-28(fp)
 180e058:	10001145 	stb	zero,69(r2)
 180e05c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e060:	10000126 	beq	r2,zero,180e068 <xQueueSemaphoreTake+0x154>
 180e064:	1810f900 	call	1810f90 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 180e068:	e0ffff04 	addi	r3,fp,-4
 180e06c:	e0bffc04 	addi	r2,fp,-16
 180e070:	180b883a 	mov	r5,r3
 180e074:	1009883a 	mov	r4,r2
 180e078:	18104780 	call	1810478 <xTaskCheckForTimeOut>
 180e07c:	1000211e 	bne	r2,zero,180e104 <xQueueSemaphoreTake+0x1f0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180e080:	e13ff917 	ldw	r4,-28(fp)
 180e084:	180e9ec0 	call	180e9ec <prvIsQueueEmpty>
 180e088:	10001a26 	beq	r2,zero,180e0f4 <xQueueSemaphoreTake+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 180e08c:	e0bff917 	ldw	r2,-28(fp)
 180e090:	10800017 	ldw	r2,0(r2)
 180e094:	10000b1e 	bne	r2,zero,180e0c4 <xQueueSemaphoreTake+0x1b0>
					{
						taskENTER_CRITICAL();
 180e098:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e09c:	10000126 	beq	r2,zero,180e0a4 <xQueueSemaphoreTake+0x190>
 180e0a0:	1810f480 	call	1810f48 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 180e0a4:	e0bff917 	ldw	r2,-28(fp)
 180e0a8:	10800217 	ldw	r2,8(r2)
 180e0ac:	1009883a 	mov	r4,r2
 180e0b0:	1810bcc0 	call	1810bcc <xTaskPriorityInherit>
 180e0b4:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 180e0b8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e0bc:	10000126 	beq	r2,zero,180e0c4 <xQueueSemaphoreTake+0x1b0>
 180e0c0:	1810f900 	call	1810f90 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 180e0c4:	e0bff917 	ldw	r2,-28(fp)
 180e0c8:	10800904 	addi	r2,r2,36
 180e0cc:	e0ffff17 	ldw	r3,-4(fp)
 180e0d0:	180b883a 	mov	r5,r3
 180e0d4:	1009883a 	mov	r4,r2
 180e0d8:	181010c0 	call	181010c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 180e0dc:	e13ff917 	ldw	r4,-28(fp)
 180e0e0:	180e8d80 	call	180e8d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 180e0e4:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180e0e8:	103f941e 	bne	r2,zero,180df3c <__ram_exceptions_end+0xff7fdc4c>
				{
					portYIELD_WITHIN_API();
 180e0ec:	003b683a 	trap	0
 180e0f0:	003f9206 	br	180df3c <__ram_exceptions_end+0xff7fdc4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 180e0f4:	e13ff917 	ldw	r4,-28(fp)
 180e0f8:	180e8d80 	call	180e8d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 180e0fc:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180e100:	003f8e06 	br	180df3c <__ram_exceptions_end+0xff7fdc4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 180e104:	e13ff917 	ldw	r4,-28(fp)
 180e108:	180e8d80 	call	180e8d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 180e10c:	180f9f00 	call	180f9f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180e110:	e13ff917 	ldw	r4,-28(fp)
 180e114:	180e9ec0 	call	180e9ec <prvIsQueueEmpty>
 180e118:	103f8826 	beq	r2,zero,180df3c <__ram_exceptions_end+0xff7fdc4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 180e11c:	e0bff817 	ldw	r2,-32(fp)
 180e120:	10000e26 	beq	r2,zero,180e15c <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 180e124:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e128:	10000126 	beq	r2,zero,180e130 <xQueueSemaphoreTake+0x21c>
 180e12c:	1810f480 	call	1810f48 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 180e130:	e13ff917 	ldw	r4,-28(fp)
 180e134:	180e6600 	call	180e660 <prvGetDisinheritPriorityAfterTimeout>
 180e138:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 180e13c:	e0bff917 	ldw	r2,-28(fp)
 180e140:	10800217 	ldw	r2,8(r2)
 180e144:	e17ffb17 	ldw	r5,-20(fp)
 180e148:	1009883a 	mov	r4,r2
 180e14c:	1810e080 	call	1810e08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 180e150:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e154:	10000126 	beq	r2,zero,180e15c <xQueueSemaphoreTake+0x248>
 180e158:	1810f900 	call	1810f90 <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 180e15c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 180e160:	e037883a 	mov	sp,fp
 180e164:	dfc00117 	ldw	ra,4(sp)
 180e168:	df000017 	ldw	fp,0(sp)
 180e16c:	dec00204 	addi	sp,sp,8
 180e170:	f800283a 	ret

0180e174 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 180e174:	defff504 	addi	sp,sp,-44
 180e178:	dfc00a15 	stw	ra,40(sp)
 180e17c:	df000915 	stw	fp,36(sp)
 180e180:	df000904 	addi	fp,sp,36
 180e184:	e13ffd15 	stw	r4,-12(fp)
 180e188:	e17ffe15 	stw	r5,-8(fp)
 180e18c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 180e190:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 180e194:	e0bffd17 	ldw	r2,-12(fp)
 180e198:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 180e19c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e1a0:	10000126 	beq	r2,zero,180e1a8 <xQueuePeek+0x34>
 180e1a4:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180e1a8:	e0bff817 	ldw	r2,-32(fp)
 180e1ac:	10800e17 	ldw	r2,56(r2)
 180e1b0:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 180e1b4:	e0bff917 	ldw	r2,-28(fp)
 180e1b8:	10001726 	beq	r2,zero,180e218 <xQueuePeek+0xa4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 180e1bc:	e0bff817 	ldw	r2,-32(fp)
 180e1c0:	10800317 	ldw	r2,12(r2)
 180e1c4:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 180e1c8:	e17ffe17 	ldw	r5,-8(fp)
 180e1cc:	e13ff817 	ldw	r4,-32(fp)
 180e1d0:	180e83c0 	call	180e83c <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 180e1d4:	e0bff817 	ldw	r2,-32(fp)
 180e1d8:	e0fffa17 	ldw	r3,-24(fp)
 180e1dc:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180e1e0:	e0bff817 	ldw	r2,-32(fp)
 180e1e4:	10800917 	ldw	r2,36(r2)
 180e1e8:	10000626 	beq	r2,zero,180e204 <xQueuePeek+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180e1ec:	e0bff817 	ldw	r2,-32(fp)
 180e1f0:	10800904 	addi	r2,r2,36
 180e1f4:	1009883a 	mov	r4,r2
 180e1f8:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180e1fc:	10000126 	beq	r2,zero,180e204 <xQueuePeek+0x90>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 180e200:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 180e204:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e208:	10000126 	beq	r2,zero,180e210 <xQueuePeek+0x9c>
 180e20c:	1810f900 	call	1810f90 <vTaskExitCritical>
				return pdPASS;
 180e210:	00800044 	movi	r2,1
 180e214:	00004a06 	br	180e340 <xQueuePeek+0x1cc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 180e218:	e0bfff17 	ldw	r2,-4(fp)
 180e21c:	1000051e 	bne	r2,zero,180e234 <xQueuePeek+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 180e220:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e224:	10000126 	beq	r2,zero,180e22c <xQueuePeek+0xb8>
 180e228:	1810f900 	call	1810f90 <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 180e22c:	0005883a 	mov	r2,zero
 180e230:	00004306 	br	180e340 <xQueuePeek+0x1cc>
				}
				else if( xEntryTimeSet == pdFALSE )
 180e234:	e0bff717 	ldw	r2,-36(fp)
 180e238:	1000051e 	bne	r2,zero,180e250 <xQueuePeek+0xdc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 180e23c:	e0bffb04 	addi	r2,fp,-20
 180e240:	1009883a 	mov	r4,r2
 180e244:	181043c0 	call	181043c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 180e248:	00800044 	movi	r2,1
 180e24c:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 180e250:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e254:	10000126 	beq	r2,zero,180e25c <xQueuePeek+0xe8>
 180e258:	1810f900 	call	1810f90 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 180e25c:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 180e260:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e264:	10000126 	beq	r2,zero,180e26c <xQueuePeek+0xf8>
 180e268:	1810f480 	call	1810f48 <vTaskEnterCritical>
 180e26c:	e0bff817 	ldw	r2,-32(fp)
 180e270:	10801103 	ldbu	r2,68(r2)
 180e274:	10803fcc 	andi	r2,r2,255
 180e278:	1080201c 	xori	r2,r2,128
 180e27c:	10bfe004 	addi	r2,r2,-128
 180e280:	10bfffd8 	cmpnei	r2,r2,-1
 180e284:	1000021e 	bne	r2,zero,180e290 <xQueuePeek+0x11c>
 180e288:	e0bff817 	ldw	r2,-32(fp)
 180e28c:	10001105 	stb	zero,68(r2)
 180e290:	e0bff817 	ldw	r2,-32(fp)
 180e294:	10801143 	ldbu	r2,69(r2)
 180e298:	10803fcc 	andi	r2,r2,255
 180e29c:	1080201c 	xori	r2,r2,128
 180e2a0:	10bfe004 	addi	r2,r2,-128
 180e2a4:	10bfffd8 	cmpnei	r2,r2,-1
 180e2a8:	1000021e 	bne	r2,zero,180e2b4 <xQueuePeek+0x140>
 180e2ac:	e0bff817 	ldw	r2,-32(fp)
 180e2b0:	10001145 	stb	zero,69(r2)
 180e2b4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e2b8:	10000126 	beq	r2,zero,180e2c0 <xQueuePeek+0x14c>
 180e2bc:	1810f900 	call	1810f90 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 180e2c0:	e0ffff04 	addi	r3,fp,-4
 180e2c4:	e0bffb04 	addi	r2,fp,-20
 180e2c8:	180b883a 	mov	r5,r3
 180e2cc:	1009883a 	mov	r4,r2
 180e2d0:	18104780 	call	1810478 <xTaskCheckForTimeOut>
 180e2d4:	1000131e 	bne	r2,zero,180e324 <xQueuePeek+0x1b0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180e2d8:	e13ff817 	ldw	r4,-32(fp)
 180e2dc:	180e9ec0 	call	180e9ec <prvIsQueueEmpty>
 180e2e0:	10000c26 	beq	r2,zero,180e314 <xQueuePeek+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 180e2e4:	e0bff817 	ldw	r2,-32(fp)
 180e2e8:	10800904 	addi	r2,r2,36
 180e2ec:	e0ffff17 	ldw	r3,-4(fp)
 180e2f0:	180b883a 	mov	r5,r3
 180e2f4:	1009883a 	mov	r4,r2
 180e2f8:	181010c0 	call	181010c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 180e2fc:	e13ff817 	ldw	r4,-32(fp)
 180e300:	180e8d80 	call	180e8d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 180e304:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180e308:	103fa41e 	bne	r2,zero,180e19c <__ram_exceptions_end+0xff7fdeac>
				{
					portYIELD_WITHIN_API();
 180e30c:	003b683a 	trap	0
 180e310:	003fa206 	br	180e19c <__ram_exceptions_end+0xff7fdeac>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 180e314:	e13ff817 	ldw	r4,-32(fp)
 180e318:	180e8d80 	call	180e8d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 180e31c:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180e320:	003f9e06 	br	180e19c <__ram_exceptions_end+0xff7fdeac>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 180e324:	e13ff817 	ldw	r4,-32(fp)
 180e328:	180e8d80 	call	180e8d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 180e32c:	180f9f00 	call	180f9f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180e330:	e13ff817 	ldw	r4,-32(fp)
 180e334:	180e9ec0 	call	180e9ec <prvIsQueueEmpty>
 180e338:	103f9826 	beq	r2,zero,180e19c <__ram_exceptions_end+0xff7fdeac>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 180e33c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 180e340:	e037883a 	mov	sp,fp
 180e344:	dfc00117 	ldw	ra,4(sp)
 180e348:	df000017 	ldw	fp,0(sp)
 180e34c:	dec00204 	addi	sp,sp,8
 180e350:	f800283a 	ret

0180e354 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 180e354:	defff604 	addi	sp,sp,-40
 180e358:	dfc00915 	stw	ra,36(sp)
 180e35c:	df000815 	stw	fp,32(sp)
 180e360:	df000804 	addi	fp,sp,32
 180e364:	e13ffd15 	stw	r4,-12(fp)
 180e368:	e17ffe15 	stw	r5,-8(fp)
 180e36c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 180e370:	e0bffd17 	ldw	r2,-12(fp)
 180e374:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180e378:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180e37c:	e0bff917 	ldw	r2,-28(fp)
 180e380:	10800e17 	ldw	r2,56(r2)
 180e384:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 180e388:	e0bffb17 	ldw	r2,-20(fp)
 180e38c:	10002326 	beq	r2,zero,180e41c <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 180e390:	e0bff917 	ldw	r2,-28(fp)
 180e394:	10801103 	ldbu	r2,68(r2)
 180e398:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 180e39c:	e17ffe17 	ldw	r5,-8(fp)
 180e3a0:	e13ff917 	ldw	r4,-28(fp)
 180e3a4:	180e83c0 	call	180e83c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 180e3a8:	e0bffb17 	ldw	r2,-20(fp)
 180e3ac:	10ffffc4 	addi	r3,r2,-1
 180e3b0:	e0bff917 	ldw	r2,-28(fp)
 180e3b4:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 180e3b8:	e0bffc07 	ldb	r2,-16(fp)
 180e3bc:	10bfffd8 	cmpnei	r2,r2,-1
 180e3c0:	10000e1e 	bne	r2,zero,180e3fc <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180e3c4:	e0bff917 	ldw	r2,-28(fp)
 180e3c8:	10800417 	ldw	r2,16(r2)
 180e3cc:	10001026 	beq	r2,zero,180e410 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180e3d0:	e0bff917 	ldw	r2,-28(fp)
 180e3d4:	10800404 	addi	r2,r2,16
 180e3d8:	1009883a 	mov	r4,r2
 180e3dc:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180e3e0:	10000b26 	beq	r2,zero,180e410 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 180e3e4:	e0bfff17 	ldw	r2,-4(fp)
 180e3e8:	10000926 	beq	r2,zero,180e410 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 180e3ec:	e0bfff17 	ldw	r2,-4(fp)
 180e3f0:	00c00044 	movi	r3,1
 180e3f4:	10c00015 	stw	r3,0(r2)
 180e3f8:	00000506 	br	180e410 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 180e3fc:	e0bffc03 	ldbu	r2,-16(fp)
 180e400:	10800044 	addi	r2,r2,1
 180e404:	1007883a 	mov	r3,r2
 180e408:	e0bff917 	ldw	r2,-28(fp)
 180e40c:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 180e410:	00800044 	movi	r2,1
 180e414:	e0bff815 	stw	r2,-32(fp)
 180e418:	00000106 	br	180e420 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 180e41c:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180e420:	e0bff817 	ldw	r2,-32(fp)
}
 180e424:	e037883a 	mov	sp,fp
 180e428:	dfc00117 	ldw	ra,4(sp)
 180e42c:	df000017 	ldw	fp,0(sp)
 180e430:	dec00204 	addi	sp,sp,8
 180e434:	f800283a 	ret

0180e438 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 180e438:	defff804 	addi	sp,sp,-32
 180e43c:	dfc00715 	stw	ra,28(sp)
 180e440:	df000615 	stw	fp,24(sp)
 180e444:	df000604 	addi	fp,sp,24
 180e448:	e13ffe15 	stw	r4,-8(fp)
 180e44c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 180e450:	e0bffe17 	ldw	r2,-8(fp)
 180e454:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180e458:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 180e45c:	e0bffb17 	ldw	r2,-20(fp)
 180e460:	10800e17 	ldw	r2,56(r2)
 180e464:	10000c26 	beq	r2,zero,180e498 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 180e468:	e0bffb17 	ldw	r2,-20(fp)
 180e46c:	10800317 	ldw	r2,12(r2)
 180e470:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 180e474:	e17fff17 	ldw	r5,-4(fp)
 180e478:	e13ffb17 	ldw	r4,-20(fp)
 180e47c:	180e83c0 	call	180e83c <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 180e480:	e0bffb17 	ldw	r2,-20(fp)
 180e484:	e0fffd17 	ldw	r3,-12(fp)
 180e488:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 180e48c:	00800044 	movi	r2,1
 180e490:	e0bffa15 	stw	r2,-24(fp)
 180e494:	00000106 	br	180e49c <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 180e498:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180e49c:	e0bffa17 	ldw	r2,-24(fp)
}
 180e4a0:	e037883a 	mov	sp,fp
 180e4a4:	dfc00117 	ldw	ra,4(sp)
 180e4a8:	df000017 	ldw	fp,0(sp)
 180e4ac:	dec00204 	addi	sp,sp,8
 180e4b0:	f800283a 	ret

0180e4b4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 180e4b4:	defffc04 	addi	sp,sp,-16
 180e4b8:	dfc00315 	stw	ra,12(sp)
 180e4bc:	df000215 	stw	fp,8(sp)
 180e4c0:	df000204 	addi	fp,sp,8
 180e4c4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 180e4c8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e4cc:	10000126 	beq	r2,zero,180e4d4 <uxQueueMessagesWaiting+0x20>
 180e4d0:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 180e4d4:	e0bfff17 	ldw	r2,-4(fp)
 180e4d8:	10800e17 	ldw	r2,56(r2)
 180e4dc:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 180e4e0:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e4e4:	10000126 	beq	r2,zero,180e4ec <uxQueueMessagesWaiting+0x38>
 180e4e8:	1810f900 	call	1810f90 <vTaskExitCritical>

	return uxReturn;
 180e4ec:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 180e4f0:	e037883a 	mov	sp,fp
 180e4f4:	dfc00117 	ldw	ra,4(sp)
 180e4f8:	df000017 	ldw	fp,0(sp)
 180e4fc:	dec00204 	addi	sp,sp,8
 180e500:	f800283a 	ret

0180e504 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 180e504:	defffb04 	addi	sp,sp,-20
 180e508:	dfc00415 	stw	ra,16(sp)
 180e50c:	df000315 	stw	fp,12(sp)
 180e510:	df000304 	addi	fp,sp,12
 180e514:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 180e518:	e0bfff17 	ldw	r2,-4(fp)
 180e51c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 180e520:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e524:	10000126 	beq	r2,zero,180e52c <uxQueueSpacesAvailable+0x28>
 180e528:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 180e52c:	e0bffd17 	ldw	r2,-12(fp)
 180e530:	10c00f17 	ldw	r3,60(r2)
 180e534:	e0bffd17 	ldw	r2,-12(fp)
 180e538:	10800e17 	ldw	r2,56(r2)
 180e53c:	1885c83a 	sub	r2,r3,r2
 180e540:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 180e544:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e548:	10000126 	beq	r2,zero,180e550 <uxQueueSpacesAvailable+0x4c>
 180e54c:	1810f900 	call	1810f90 <vTaskExitCritical>

	return uxReturn;
 180e550:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 180e554:	e037883a 	mov	sp,fp
 180e558:	dfc00117 	ldw	ra,4(sp)
 180e55c:	df000017 	ldw	fp,0(sp)
 180e560:	dec00204 	addi	sp,sp,8
 180e564:	f800283a 	ret

0180e568 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 180e568:	defffc04 	addi	sp,sp,-16
 180e56c:	df000315 	stw	fp,12(sp)
 180e570:	df000304 	addi	fp,sp,12
 180e574:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 180e578:	e0bfff17 	ldw	r2,-4(fp)
 180e57c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 180e580:	e0bffd17 	ldw	r2,-12(fp)
 180e584:	10800e17 	ldw	r2,56(r2)
 180e588:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 180e58c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 180e590:	e037883a 	mov	sp,fp
 180e594:	df000017 	ldw	fp,0(sp)
 180e598:	dec00104 	addi	sp,sp,4
 180e59c:	f800283a 	ret

0180e5a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 180e5a0:	defffc04 	addi	sp,sp,-16
 180e5a4:	dfc00315 	stw	ra,12(sp)
 180e5a8:	df000215 	stw	fp,8(sp)
 180e5ac:	df000204 	addi	fp,sp,8
 180e5b0:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 180e5b4:	e0bfff17 	ldw	r2,-4(fp)
 180e5b8:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 180e5bc:	e13ffe17 	ldw	r4,-8(fp)
 180e5c0:	182b8200 	call	182b820 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 180e5c4:	0001883a 	nop
 180e5c8:	e037883a 	mov	sp,fp
 180e5cc:	dfc00117 	ldw	ra,4(sp)
 180e5d0:	df000017 	ldw	fp,0(sp)
 180e5d4:	dec00204 	addi	sp,sp,8
 180e5d8:	f800283a 	ret

0180e5dc <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 180e5dc:	defffe04 	addi	sp,sp,-8
 180e5e0:	df000115 	stw	fp,4(sp)
 180e5e4:	df000104 	addi	fp,sp,4
 180e5e8:	e13fff15 	stw	r4,-4(fp)
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 180e5ec:	e0bfff17 	ldw	r2,-4(fp)
 180e5f0:	10801217 	ldw	r2,72(r2)
	}
 180e5f4:	e037883a 	mov	sp,fp
 180e5f8:	df000017 	ldw	fp,0(sp)
 180e5fc:	dec00104 	addi	sp,sp,4
 180e600:	f800283a 	ret

0180e604 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 180e604:	defffd04 	addi	sp,sp,-12
 180e608:	df000215 	stw	fp,8(sp)
 180e60c:	df000204 	addi	fp,sp,8
 180e610:	e13ffe15 	stw	r4,-8(fp)
 180e614:	e17fff15 	stw	r5,-4(fp)
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 180e618:	e0bffe17 	ldw	r2,-8(fp)
 180e61c:	e0ffff17 	ldw	r3,-4(fp)
 180e620:	10c01215 	stw	r3,72(r2)
	}
 180e624:	0001883a 	nop
 180e628:	e037883a 	mov	sp,fp
 180e62c:	df000017 	ldw	fp,0(sp)
 180e630:	dec00104 	addi	sp,sp,4
 180e634:	f800283a 	ret

0180e638 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 180e638:	defffe04 	addi	sp,sp,-8
 180e63c:	df000115 	stw	fp,4(sp)
 180e640:	df000104 	addi	fp,sp,4
 180e644:	e13fff15 	stw	r4,-4(fp)
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 180e648:	e0bfff17 	ldw	r2,-4(fp)
 180e64c:	10801303 	ldbu	r2,76(r2)
	}
 180e650:	e037883a 	mov	sp,fp
 180e654:	df000017 	ldw	fp,0(sp)
 180e658:	dec00104 	addi	sp,sp,4
 180e65c:	f800283a 	ret

0180e660 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 180e660:	defffd04 	addi	sp,sp,-12
 180e664:	df000215 	stw	fp,8(sp)
 180e668:	df000204 	addi	fp,sp,8
 180e66c:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 180e670:	e0bfff17 	ldw	r2,-4(fp)
 180e674:	10800917 	ldw	r2,36(r2)
 180e678:	10000726 	beq	r2,zero,180e698 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 180e67c:	e0bfff17 	ldw	r2,-4(fp)
 180e680:	10800c17 	ldw	r2,48(r2)
 180e684:	10800017 	ldw	r2,0(r2)
 180e688:	00c00144 	movi	r3,5
 180e68c:	1885c83a 	sub	r2,r3,r2
 180e690:	e0bffe15 	stw	r2,-8(fp)
 180e694:	00000106 	br	180e69c <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 180e698:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 180e69c:	e0bffe17 	ldw	r2,-8(fp)
	}
 180e6a0:	e037883a 	mov	sp,fp
 180e6a4:	df000017 	ldw	fp,0(sp)
 180e6a8:	dec00104 	addi	sp,sp,4
 180e6ac:	f800283a 	ret

0180e6b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 180e6b0:	defff904 	addi	sp,sp,-28
 180e6b4:	dfc00615 	stw	ra,24(sp)
 180e6b8:	df000515 	stw	fp,20(sp)
 180e6bc:	df000504 	addi	fp,sp,20
 180e6c0:	e13ffd15 	stw	r4,-12(fp)
 180e6c4:	e17ffe15 	stw	r5,-8(fp)
 180e6c8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 180e6cc:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180e6d0:	e0bffd17 	ldw	r2,-12(fp)
 180e6d4:	10800e17 	ldw	r2,56(r2)
 180e6d8:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 180e6dc:	e0bffd17 	ldw	r2,-12(fp)
 180e6e0:	10801017 	ldw	r2,64(r2)
 180e6e4:	10000b1e 	bne	r2,zero,180e714 <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 180e6e8:	e0bffd17 	ldw	r2,-12(fp)
 180e6ec:	10800017 	ldw	r2,0(r2)
 180e6f0:	1000481e 	bne	r2,zero,180e814 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 180e6f4:	e0bffd17 	ldw	r2,-12(fp)
 180e6f8:	10800217 	ldw	r2,8(r2)
 180e6fc:	1009883a 	mov	r4,r2
 180e700:	1810d0c0 	call	1810d0c <xTaskPriorityDisinherit>
 180e704:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 180e708:	e0bffd17 	ldw	r2,-12(fp)
 180e70c:	10000215 	stw	zero,8(r2)
 180e710:	00004006 	br	180e814 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 180e714:	e0bfff17 	ldw	r2,-4(fp)
 180e718:	1000191e 	bne	r2,zero,180e780 <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 180e71c:	e0bffd17 	ldw	r2,-12(fp)
 180e720:	10c00117 	ldw	r3,4(r2)
 180e724:	e0bffd17 	ldw	r2,-12(fp)
 180e728:	10801017 	ldw	r2,64(r2)
 180e72c:	100d883a 	mov	r6,r2
 180e730:	e17ffe17 	ldw	r5,-8(fp)
 180e734:	1809883a 	mov	r4,r3
 180e738:	1805f980 	call	1805f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 180e73c:	e0bffd17 	ldw	r2,-12(fp)
 180e740:	10c00117 	ldw	r3,4(r2)
 180e744:	e0bffd17 	ldw	r2,-12(fp)
 180e748:	10801017 	ldw	r2,64(r2)
 180e74c:	1887883a 	add	r3,r3,r2
 180e750:	e0bffd17 	ldw	r2,-12(fp)
 180e754:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 180e758:	e0bffd17 	ldw	r2,-12(fp)
 180e75c:	10c00117 	ldw	r3,4(r2)
 180e760:	e0bffd17 	ldw	r2,-12(fp)
 180e764:	10800217 	ldw	r2,8(r2)
 180e768:	18802a36 	bltu	r3,r2,180e814 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 180e76c:	e0bffd17 	ldw	r2,-12(fp)
 180e770:	10c00017 	ldw	r3,0(r2)
 180e774:	e0bffd17 	ldw	r2,-12(fp)
 180e778:	10c00115 	stw	r3,4(r2)
 180e77c:	00002506 	br	180e814 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 180e780:	e0bffd17 	ldw	r2,-12(fp)
 180e784:	10c00317 	ldw	r3,12(r2)
 180e788:	e0bffd17 	ldw	r2,-12(fp)
 180e78c:	10801017 	ldw	r2,64(r2)
 180e790:	100d883a 	mov	r6,r2
 180e794:	e17ffe17 	ldw	r5,-8(fp)
 180e798:	1809883a 	mov	r4,r3
 180e79c:	1805f980 	call	1805f98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 180e7a0:	e0bffd17 	ldw	r2,-12(fp)
 180e7a4:	10c00317 	ldw	r3,12(r2)
 180e7a8:	e0bffd17 	ldw	r2,-12(fp)
 180e7ac:	10801017 	ldw	r2,64(r2)
 180e7b0:	0085c83a 	sub	r2,zero,r2
 180e7b4:	1887883a 	add	r3,r3,r2
 180e7b8:	e0bffd17 	ldw	r2,-12(fp)
 180e7bc:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 180e7c0:	e0bffd17 	ldw	r2,-12(fp)
 180e7c4:	10c00317 	ldw	r3,12(r2)
 180e7c8:	e0bffd17 	ldw	r2,-12(fp)
 180e7cc:	10800017 	ldw	r2,0(r2)
 180e7d0:	1880082e 	bgeu	r3,r2,180e7f4 <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 180e7d4:	e0bffd17 	ldw	r2,-12(fp)
 180e7d8:	10c00217 	ldw	r3,8(r2)
 180e7dc:	e0bffd17 	ldw	r2,-12(fp)
 180e7e0:	10801017 	ldw	r2,64(r2)
 180e7e4:	0085c83a 	sub	r2,zero,r2
 180e7e8:	1887883a 	add	r3,r3,r2
 180e7ec:	e0bffd17 	ldw	r2,-12(fp)
 180e7f0:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 180e7f4:	e0bfff17 	ldw	r2,-4(fp)
 180e7f8:	10800098 	cmpnei	r2,r2,2
 180e7fc:	1000051e 	bne	r2,zero,180e814 <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 180e800:	e0bffc17 	ldw	r2,-16(fp)
 180e804:	10000326 	beq	r2,zero,180e814 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 180e808:	e0bffc17 	ldw	r2,-16(fp)
 180e80c:	10bfffc4 	addi	r2,r2,-1
 180e810:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 180e814:	e0bffc17 	ldw	r2,-16(fp)
 180e818:	10c00044 	addi	r3,r2,1
 180e81c:	e0bffd17 	ldw	r2,-12(fp)
 180e820:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 180e824:	e0bffb17 	ldw	r2,-20(fp)
}
 180e828:	e037883a 	mov	sp,fp
 180e82c:	dfc00117 	ldw	ra,4(sp)
 180e830:	df000017 	ldw	fp,0(sp)
 180e834:	dec00204 	addi	sp,sp,8
 180e838:	f800283a 	ret

0180e83c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 180e83c:	defffc04 	addi	sp,sp,-16
 180e840:	dfc00315 	stw	ra,12(sp)
 180e844:	df000215 	stw	fp,8(sp)
 180e848:	df000204 	addi	fp,sp,8
 180e84c:	e13ffe15 	stw	r4,-8(fp)
 180e850:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 180e854:	e0bffe17 	ldw	r2,-8(fp)
 180e858:	10801017 	ldw	r2,64(r2)
 180e85c:	10001826 	beq	r2,zero,180e8c0 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 180e860:	e0bffe17 	ldw	r2,-8(fp)
 180e864:	10c00317 	ldw	r3,12(r2)
 180e868:	e0bffe17 	ldw	r2,-8(fp)
 180e86c:	10801017 	ldw	r2,64(r2)
 180e870:	1887883a 	add	r3,r3,r2
 180e874:	e0bffe17 	ldw	r2,-8(fp)
 180e878:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 180e87c:	e0bffe17 	ldw	r2,-8(fp)
 180e880:	10c00317 	ldw	r3,12(r2)
 180e884:	e0bffe17 	ldw	r2,-8(fp)
 180e888:	10800217 	ldw	r2,8(r2)
 180e88c:	18800436 	bltu	r3,r2,180e8a0 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 180e890:	e0bffe17 	ldw	r2,-8(fp)
 180e894:	10c00017 	ldw	r3,0(r2)
 180e898:	e0bffe17 	ldw	r2,-8(fp)
 180e89c:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 180e8a0:	e0bffe17 	ldw	r2,-8(fp)
 180e8a4:	10c00317 	ldw	r3,12(r2)
 180e8a8:	e0bffe17 	ldw	r2,-8(fp)
 180e8ac:	10801017 	ldw	r2,64(r2)
 180e8b0:	100d883a 	mov	r6,r2
 180e8b4:	180b883a 	mov	r5,r3
 180e8b8:	e13fff17 	ldw	r4,-4(fp)
 180e8bc:	1805f980 	call	1805f98 <memcpy>
	}
}
 180e8c0:	0001883a 	nop
 180e8c4:	e037883a 	mov	sp,fp
 180e8c8:	dfc00117 	ldw	ra,4(sp)
 180e8cc:	df000017 	ldw	fp,0(sp)
 180e8d0:	dec00204 	addi	sp,sp,8
 180e8d4:	f800283a 	ret

0180e8d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 180e8d8:	defffc04 	addi	sp,sp,-16
 180e8dc:	dfc00315 	stw	ra,12(sp)
 180e8e0:	df000215 	stw	fp,8(sp)
 180e8e4:	df000204 	addi	fp,sp,8
 180e8e8:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 180e8ec:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e8f0:	10000126 	beq	r2,zero,180e8f8 <prvUnlockQueue+0x20>
 180e8f4:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 180e8f8:	e0bfff17 	ldw	r2,-4(fp)
 180e8fc:	10801143 	ldbu	r2,69(r2)
 180e900:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 180e904:	00000c06 	br	180e938 <prvUnlockQueue+0x60>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180e908:	e0bfff17 	ldw	r2,-4(fp)
 180e90c:	10800917 	ldw	r2,36(r2)
 180e910:	10000c26 	beq	r2,zero,180e944 <prvUnlockQueue+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180e914:	e0bfff17 	ldw	r2,-4(fp)
 180e918:	10800904 	addi	r2,r2,36
 180e91c:	1009883a 	mov	r4,r2
 180e920:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180e924:	10000126 	beq	r2,zero,180e92c <prvUnlockQueue+0x54>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 180e928:	18105680 	call	1810568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 180e92c:	e0bffe03 	ldbu	r2,-8(fp)
 180e930:	10bfffc4 	addi	r2,r2,-1
 180e934:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 180e938:	e0bffe07 	ldb	r2,-8(fp)
 180e93c:	00bff216 	blt	zero,r2,180e908 <__ram_exceptions_end+0xff7fe618>
 180e940:	00000106 	br	180e948 <prvUnlockQueue+0x70>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 180e944:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 180e948:	e0bfff17 	ldw	r2,-4(fp)
 180e94c:	00ffffc4 	movi	r3,-1
 180e950:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 180e954:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e958:	10000126 	beq	r2,zero,180e960 <prvUnlockQueue+0x88>
 180e95c:	1810f900 	call	1810f90 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 180e960:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e964:	10000126 	beq	r2,zero,180e96c <prvUnlockQueue+0x94>
 180e968:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 180e96c:	e0bfff17 	ldw	r2,-4(fp)
 180e970:	10801103 	ldbu	r2,68(r2)
 180e974:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 180e978:	00000c06 	br	180e9ac <prvUnlockQueue+0xd4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180e97c:	e0bfff17 	ldw	r2,-4(fp)
 180e980:	10800417 	ldw	r2,16(r2)
 180e984:	10000c26 	beq	r2,zero,180e9b8 <prvUnlockQueue+0xe0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180e988:	e0bfff17 	ldw	r2,-4(fp)
 180e98c:	10800404 	addi	r2,r2,16
 180e990:	1009883a 	mov	r4,r2
 180e994:	18102240 	call	1810224 <xTaskRemoveFromEventList>
 180e998:	10000126 	beq	r2,zero,180e9a0 <prvUnlockQueue+0xc8>
				{
					vTaskMissedYield();
 180e99c:	18105680 	call	1810568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 180e9a0:	e0bffe43 	ldbu	r2,-7(fp)
 180e9a4:	10bfffc4 	addi	r2,r2,-1
 180e9a8:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 180e9ac:	e0bffe47 	ldb	r2,-7(fp)
 180e9b0:	00bff216 	blt	zero,r2,180e97c <__ram_exceptions_end+0xff7fe68c>
 180e9b4:	00000106 	br	180e9bc <prvUnlockQueue+0xe4>

				--cRxLock;
			}
			else
			{
				break;
 180e9b8:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 180e9bc:	e0bfff17 	ldw	r2,-4(fp)
 180e9c0:	00ffffc4 	movi	r3,-1
 180e9c4:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 180e9c8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180e9cc:	10000126 	beq	r2,zero,180e9d4 <prvUnlockQueue+0xfc>
 180e9d0:	1810f900 	call	1810f90 <vTaskExitCritical>
}
 180e9d4:	0001883a 	nop
 180e9d8:	e037883a 	mov	sp,fp
 180e9dc:	dfc00117 	ldw	ra,4(sp)
 180e9e0:	df000017 	ldw	fp,0(sp)
 180e9e4:	dec00204 	addi	sp,sp,8
 180e9e8:	f800283a 	ret

0180e9ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 180e9ec:	defffc04 	addi	sp,sp,-16
 180e9f0:	dfc00315 	stw	ra,12(sp)
 180e9f4:	df000215 	stw	fp,8(sp)
 180e9f8:	df000204 	addi	fp,sp,8
 180e9fc:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 180ea00:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180ea04:	10000126 	beq	r2,zero,180ea0c <prvIsQueueEmpty+0x20>
 180ea08:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 180ea0c:	e0bfff17 	ldw	r2,-4(fp)
 180ea10:	10800e17 	ldw	r2,56(r2)
 180ea14:	1000031e 	bne	r2,zero,180ea24 <prvIsQueueEmpty+0x38>
		{
			xReturn = pdTRUE;
 180ea18:	00800044 	movi	r2,1
 180ea1c:	e0bffe15 	stw	r2,-8(fp)
 180ea20:	00000106 	br	180ea28 <prvIsQueueEmpty+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 180ea24:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 180ea28:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180ea2c:	10000126 	beq	r2,zero,180ea34 <prvIsQueueEmpty+0x48>
 180ea30:	1810f900 	call	1810f90 <vTaskExitCritical>

	return xReturn;
 180ea34:	e0bffe17 	ldw	r2,-8(fp)
}
 180ea38:	e037883a 	mov	sp,fp
 180ea3c:	dfc00117 	ldw	ra,4(sp)
 180ea40:	df000017 	ldw	fp,0(sp)
 180ea44:	dec00204 	addi	sp,sp,8
 180ea48:	f800283a 	ret

0180ea4c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 180ea4c:	defffc04 	addi	sp,sp,-16
 180ea50:	df000315 	stw	fp,12(sp)
 180ea54:	df000304 	addi	fp,sp,12
 180ea58:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 180ea5c:	e0bfff17 	ldw	r2,-4(fp)
 180ea60:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 180ea64:	e0bffe17 	ldw	r2,-8(fp)
 180ea68:	10800e17 	ldw	r2,56(r2)
 180ea6c:	1000031e 	bne	r2,zero,180ea7c <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 180ea70:	00800044 	movi	r2,1
 180ea74:	e0bffd15 	stw	r2,-12(fp)
 180ea78:	00000106 	br	180ea80 <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 180ea7c:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 180ea80:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 180ea84:	e037883a 	mov	sp,fp
 180ea88:	df000017 	ldw	fp,0(sp)
 180ea8c:	dec00104 	addi	sp,sp,4
 180ea90:	f800283a 	ret

0180ea94 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 180ea94:	defffc04 	addi	sp,sp,-16
 180ea98:	dfc00315 	stw	ra,12(sp)
 180ea9c:	df000215 	stw	fp,8(sp)
 180eaa0:	df000204 	addi	fp,sp,8
 180eaa4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 180eaa8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180eaac:	10000126 	beq	r2,zero,180eab4 <prvIsQueueFull+0x20>
 180eab0:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 180eab4:	e0bfff17 	ldw	r2,-4(fp)
 180eab8:	10c00e17 	ldw	r3,56(r2)
 180eabc:	e0bfff17 	ldw	r2,-4(fp)
 180eac0:	10800f17 	ldw	r2,60(r2)
 180eac4:	1880031e 	bne	r3,r2,180ead4 <prvIsQueueFull+0x40>
		{
			xReturn = pdTRUE;
 180eac8:	00800044 	movi	r2,1
 180eacc:	e0bffe15 	stw	r2,-8(fp)
 180ead0:	00000106 	br	180ead8 <prvIsQueueFull+0x44>
		}
		else
		{
			xReturn = pdFALSE;
 180ead4:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 180ead8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180eadc:	10000126 	beq	r2,zero,180eae4 <prvIsQueueFull+0x50>
 180eae0:	1810f900 	call	1810f90 <vTaskExitCritical>

	return xReturn;
 180eae4:	e0bffe17 	ldw	r2,-8(fp)
}
 180eae8:	e037883a 	mov	sp,fp
 180eaec:	dfc00117 	ldw	ra,4(sp)
 180eaf0:	df000017 	ldw	fp,0(sp)
 180eaf4:	dec00204 	addi	sp,sp,8
 180eaf8:	f800283a 	ret

0180eafc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 180eafc:	defffc04 	addi	sp,sp,-16
 180eb00:	df000315 	stw	fp,12(sp)
 180eb04:	df000304 	addi	fp,sp,12
 180eb08:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 180eb0c:	e0bfff17 	ldw	r2,-4(fp)
 180eb10:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 180eb14:	e0bffe17 	ldw	r2,-8(fp)
 180eb18:	10c00e17 	ldw	r3,56(r2)
 180eb1c:	e0bffe17 	ldw	r2,-8(fp)
 180eb20:	10800f17 	ldw	r2,60(r2)
 180eb24:	1880031e 	bne	r3,r2,180eb34 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 180eb28:	00800044 	movi	r2,1
 180eb2c:	e0bffd15 	stw	r2,-12(fp)
 180eb30:	00000106 	br	180eb38 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 180eb34:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 180eb38:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 180eb3c:	e037883a 	mov	sp,fp
 180eb40:	df000017 	ldw	fp,0(sp)
 180eb44:	dec00104 	addi	sp,sp,4
 180eb48:	f800283a 	ret

0180eb4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 180eb4c:	defffa04 	addi	sp,sp,-24
 180eb50:	dfc00515 	stw	ra,20(sp)
 180eb54:	df000415 	stw	fp,16(sp)
 180eb58:	df000404 	addi	fp,sp,16
 180eb5c:	e13ffd15 	stw	r4,-12(fp)
 180eb60:	e17ffe15 	stw	r5,-8(fp)
 180eb64:	e1bfff15 	stw	r6,-4(fp)
	Queue_t * const pxQueue = xQueue;
 180eb68:	e0bffd17 	ldw	r2,-12(fp)
 180eb6c:	e0bffc15 	stw	r2,-16(fp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 180eb70:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180eb74:	10000126 	beq	r2,zero,180eb7c <vQueueWaitForMessageRestricted+0x30>
 180eb78:	1810f480 	call	1810f48 <vTaskEnterCritical>
 180eb7c:	e0bffc17 	ldw	r2,-16(fp)
 180eb80:	10801103 	ldbu	r2,68(r2)
 180eb84:	10803fcc 	andi	r2,r2,255
 180eb88:	1080201c 	xori	r2,r2,128
 180eb8c:	10bfe004 	addi	r2,r2,-128
 180eb90:	10bfffd8 	cmpnei	r2,r2,-1
 180eb94:	1000021e 	bne	r2,zero,180eba0 <vQueueWaitForMessageRestricted+0x54>
 180eb98:	e0bffc17 	ldw	r2,-16(fp)
 180eb9c:	10001105 	stb	zero,68(r2)
 180eba0:	e0bffc17 	ldw	r2,-16(fp)
 180eba4:	10801143 	ldbu	r2,69(r2)
 180eba8:	10803fcc 	andi	r2,r2,255
 180ebac:	1080201c 	xori	r2,r2,128
 180ebb0:	10bfe004 	addi	r2,r2,-128
 180ebb4:	10bfffd8 	cmpnei	r2,r2,-1
 180ebb8:	1000021e 	bne	r2,zero,180ebc4 <vQueueWaitForMessageRestricted+0x78>
 180ebbc:	e0bffc17 	ldw	r2,-16(fp)
 180ebc0:	10001145 	stb	zero,69(r2)
 180ebc4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180ebc8:	10000126 	beq	r2,zero,180ebd0 <vQueueWaitForMessageRestricted+0x84>
 180ebcc:	1810f900 	call	1810f90 <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 180ebd0:	e0bffc17 	ldw	r2,-16(fp)
 180ebd4:	10800e17 	ldw	r2,56(r2)
 180ebd8:	1000061e 	bne	r2,zero,180ebf4 <vQueueWaitForMessageRestricted+0xa8>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 180ebdc:	e0bffc17 	ldw	r2,-16(fp)
 180ebe0:	10800904 	addi	r2,r2,36
 180ebe4:	e1bfff17 	ldw	r6,-4(fp)
 180ebe8:	e17ffe17 	ldw	r5,-8(fp)
 180ebec:	1009883a 	mov	r4,r2
 180ebf0:	18101c00 	call	18101c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 180ebf4:	e13ffc17 	ldw	r4,-16(fp)
 180ebf8:	180e8d80 	call	180e8d8 <prvUnlockQueue>
	}
 180ebfc:	0001883a 	nop
 180ec00:	e037883a 	mov	sp,fp
 180ec04:	dfc00117 	ldw	ra,4(sp)
 180ec08:	df000017 	ldw	fp,0(sp)
 180ec0c:	dec00204 	addi	sp,sp,8
 180ec10:	f800283a 	ret

0180ec14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 180ec14:	defff304 	addi	sp,sp,-52
 180ec18:	dfc00c15 	stw	ra,48(sp)
 180ec1c:	df000b15 	stw	fp,44(sp)
 180ec20:	df000b04 	addi	fp,sp,44
 180ec24:	e13ffc15 	stw	r4,-16(fp)
 180ec28:	e17ffd15 	stw	r5,-12(fp)
 180ec2c:	e1bffe15 	stw	r6,-8(fp)
 180ec30:	e1ffff15 	stw	r7,-4(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 180ec34:	e0bffe17 	ldw	r2,-8(fp)
 180ec38:	1085883a 	add	r2,r2,r2
 180ec3c:	1085883a 	add	r2,r2,r2
 180ec40:	1009883a 	mov	r4,r2
 180ec44:	182b7d40 	call	182b7d4 <pvPortMalloc>
 180ec48:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 180ec4c:	e0bffb17 	ldw	r2,-20(fp)
 180ec50:	10000c26 	beq	r2,zero,180ec84 <xTaskCreate+0x70>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 180ec54:	01001e04 	movi	r4,120
 180ec58:	182b7d40 	call	182b7d4 <pvPortMalloc>
 180ec5c:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 180ec60:	e0bff917 	ldw	r2,-28(fp)
 180ec64:	10000426 	beq	r2,zero,180ec78 <xTaskCreate+0x64>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 180ec68:	e0bff917 	ldw	r2,-28(fp)
 180ec6c:	e0fffb17 	ldw	r3,-20(fp)
 180ec70:	10c00c15 	stw	r3,48(r2)
 180ec74:	00000406 	br	180ec88 <xTaskCreate+0x74>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 180ec78:	e13ffb17 	ldw	r4,-20(fp)
 180ec7c:	182b8200 	call	182b820 <vPortFree>
 180ec80:	00000106 	br	180ec88 <xTaskCreate+0x74>
				}
			}
			else
			{
				pxNewTCB = NULL;
 180ec84:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 180ec88:	e0bff917 	ldw	r2,-28(fp)
 180ec8c:	10001126 	beq	r2,zero,180ecd4 <xTaskCreate+0xc0>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 180ec90:	d8000315 	stw	zero,12(sp)
 180ec94:	e0bff917 	ldw	r2,-28(fp)
 180ec98:	d8800215 	stw	r2,8(sp)
 180ec9c:	e0800317 	ldw	r2,12(fp)
 180eca0:	d8800115 	stw	r2,4(sp)
 180eca4:	e0800217 	ldw	r2,8(fp)
 180eca8:	d8800015 	stw	r2,0(sp)
 180ecac:	e1ffff17 	ldw	r7,-4(fp)
 180ecb0:	e1bffe17 	ldw	r6,-8(fp)
 180ecb4:	e17ffd17 	ldw	r5,-12(fp)
 180ecb8:	e13ffc17 	ldw	r4,-16(fp)
 180ecbc:	180ecf40 	call	180ecf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 180ecc0:	e13ff917 	ldw	r4,-28(fp)
 180ecc4:	180eed80 	call	180eed8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 180ecc8:	00800044 	movi	r2,1
 180eccc:	e0bffa15 	stw	r2,-24(fp)
 180ecd0:	00000206 	br	180ecdc <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 180ecd4:	00bfffc4 	movi	r2,-1
 180ecd8:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 180ecdc:	e0bffa17 	ldw	r2,-24(fp)
	}
 180ece0:	e037883a 	mov	sp,fp
 180ece4:	dfc00117 	ldw	ra,4(sp)
 180ece8:	df000017 	ldw	fp,0(sp)
 180ecec:	dec00204 	addi	sp,sp,8
 180ecf0:	f800283a 	ret

0180ecf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 180ecf4:	defff804 	addi	sp,sp,-32
 180ecf8:	dfc00715 	stw	ra,28(sp)
 180ecfc:	df000615 	stw	fp,24(sp)
 180ed00:	df000604 	addi	fp,sp,24
 180ed04:	e13ffc15 	stw	r4,-16(fp)
 180ed08:	e17ffd15 	stw	r5,-12(fp)
 180ed0c:	e1bffe15 	stw	r6,-8(fp)
 180ed10:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 180ed14:	e0800417 	ldw	r2,16(fp)
 180ed18:	10c00c17 	ldw	r3,48(r2)
 180ed1c:	e0bffe17 	ldw	r2,-8(fp)
 180ed20:	1085883a 	add	r2,r2,r2
 180ed24:	1085883a 	add	r2,r2,r2
 180ed28:	100d883a 	mov	r6,r2
 180ed2c:	01402944 	movi	r5,165
 180ed30:	1809883a 	mov	r4,r3
 180ed34:	18060e00 	call	18060e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 180ed38:	e0800417 	ldw	r2,16(fp)
 180ed3c:	10c00c17 	ldw	r3,48(r2)
 180ed40:	e13ffe17 	ldw	r4,-8(fp)
 180ed44:	00900034 	movhi	r2,16384
 180ed48:	10bfffc4 	addi	r2,r2,-1
 180ed4c:	2085883a 	add	r2,r4,r2
 180ed50:	1085883a 	add	r2,r2,r2
 180ed54:	1085883a 	add	r2,r2,r2
 180ed58:	1885883a 	add	r2,r3,r2
 180ed5c:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 180ed60:	e0fffb17 	ldw	r3,-20(fp)
 180ed64:	00bfff04 	movi	r2,-4
 180ed68:	1884703a 	and	r2,r3,r2
 180ed6c:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 180ed70:	e0bffd17 	ldw	r2,-12(fp)
 180ed74:	10001e26 	beq	r2,zero,180edf0 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 180ed78:	e03ffa15 	stw	zero,-24(fp)
 180ed7c:	00001406 	br	180edd0 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 180ed80:	e0fffd17 	ldw	r3,-12(fp)
 180ed84:	e0bffa17 	ldw	r2,-24(fp)
 180ed88:	1885883a 	add	r2,r3,r2
 180ed8c:	10c00003 	ldbu	r3,0(r2)
 180ed90:	e1000417 	ldw	r4,16(fp)
 180ed94:	e0bffa17 	ldw	r2,-24(fp)
 180ed98:	2085883a 	add	r2,r4,r2
 180ed9c:	10800d04 	addi	r2,r2,52
 180eda0:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 180eda4:	e0fffd17 	ldw	r3,-12(fp)
 180eda8:	e0bffa17 	ldw	r2,-24(fp)
 180edac:	1885883a 	add	r2,r3,r2
 180edb0:	10800003 	ldbu	r2,0(r2)
 180edb4:	10803fcc 	andi	r2,r2,255
 180edb8:	1080201c 	xori	r2,r2,128
 180edbc:	10bfe004 	addi	r2,r2,-128
 180edc0:	10000726 	beq	r2,zero,180ede0 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 180edc4:	e0bffa17 	ldw	r2,-24(fp)
 180edc8:	10800044 	addi	r2,r2,1
 180edcc:	e0bffa15 	stw	r2,-24(fp)
 180edd0:	e0bffa17 	ldw	r2,-24(fp)
 180edd4:	10800a30 	cmpltui	r2,r2,40
 180edd8:	103fe91e 	bne	r2,zero,180ed80 <__ram_exceptions_end+0xff7fea90>
 180eddc:	00000106 	br	180ede4 <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 180ede0:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 180ede4:	e0800417 	ldw	r2,16(fp)
 180ede8:	100016c5 	stb	zero,91(r2)
 180edec:	00000206 	br	180edf8 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 180edf0:	e0800417 	ldw	r2,16(fp)
 180edf4:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 180edf8:	e0800217 	ldw	r2,8(fp)
 180edfc:	10800170 	cmpltui	r2,r2,5
 180ee00:	1000021e 	bne	r2,zero,180ee0c <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 180ee04:	00800104 	movi	r2,4
 180ee08:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 180ee0c:	e0800417 	ldw	r2,16(fp)
 180ee10:	e0c00217 	ldw	r3,8(fp)
 180ee14:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 180ee18:	e0800417 	ldw	r2,16(fp)
 180ee1c:	e0c00217 	ldw	r3,8(fp)
 180ee20:	10c01a15 	stw	r3,104(r2)
		pxNewTCB->uxMutexesHeld = 0;
 180ee24:	e0800417 	ldw	r2,16(fp)
 180ee28:	10001b15 	stw	zero,108(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 180ee2c:	e0800417 	ldw	r2,16(fp)
 180ee30:	10800104 	addi	r2,r2,4
 180ee34:	1009883a 	mov	r4,r2
 180ee38:	182b8cc0 	call	182b8cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 180ee3c:	e0800417 	ldw	r2,16(fp)
 180ee40:	10800604 	addi	r2,r2,24
 180ee44:	1009883a 	mov	r4,r2
 180ee48:	182b8cc0 	call	182b8cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 180ee4c:	e0800417 	ldw	r2,16(fp)
 180ee50:	e0c00417 	ldw	r3,16(fp)
 180ee54:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180ee58:	00c00144 	movi	r3,5
 180ee5c:	e0800217 	ldw	r2,8(fp)
 180ee60:	1887c83a 	sub	r3,r3,r2
 180ee64:	e0800417 	ldw	r2,16(fp)
 180ee68:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 180ee6c:	e0800417 	ldw	r2,16(fp)
 180ee70:	e0c00417 	ldw	r3,16(fp)
 180ee74:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 180ee78:	e0800417 	ldw	r2,16(fp)
 180ee7c:	10001715 	stw	zero,92(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 180ee80:	e0800417 	ldw	r2,16(fp)
 180ee84:	10001c15 	stw	zero,112(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 180ee88:	e0800417 	ldw	r2,16(fp)
 180ee8c:	10001d05 	stb	zero,116(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 180ee90:	e1bfff17 	ldw	r6,-4(fp)
 180ee94:	e17ffc17 	ldw	r5,-16(fp)
 180ee98:	e13ffb17 	ldw	r4,-20(fp)
 180ee9c:	182bbac0 	call	182bbac <pxPortInitialiseStack>
 180eea0:	1007883a 	mov	r3,r2
 180eea4:	e0800417 	ldw	r2,16(fp)
 180eea8:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 180eeac:	e0800317 	ldw	r2,12(fp)
 180eeb0:	10000326 	beq	r2,zero,180eec0 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 180eeb4:	e0800317 	ldw	r2,12(fp)
 180eeb8:	e0c00417 	ldw	r3,16(fp)
 180eebc:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 180eec0:	0001883a 	nop
 180eec4:	e037883a 	mov	sp,fp
 180eec8:	dfc00117 	ldw	ra,4(sp)
 180eecc:	df000017 	ldw	fp,0(sp)
 180eed0:	dec00204 	addi	sp,sp,8
 180eed4:	f800283a 	ret

0180eed8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 180eed8:	defffd04 	addi	sp,sp,-12
 180eedc:	dfc00215 	stw	ra,8(sp)
 180eee0:	df000115 	stw	fp,4(sp)
 180eee4:	df000104 	addi	fp,sp,4
 180eee8:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 180eeec:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180eef0:	10000126 	beq	r2,zero,180eef8 <prvAddNewTaskToReadyList+0x20>
 180eef4:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 180eef8:	d0a7d717 	ldw	r2,-24740(gp)
 180eefc:	10800044 	addi	r2,r2,1
 180ef00:	d0a7d715 	stw	r2,-24740(gp)
		if( pxCurrentTCB == NULL )
 180ef04:	d0a7d317 	ldw	r2,-24756(gp)
 180ef08:	1000071e 	bne	r2,zero,180ef28 <prvAddNewTaskToReadyList+0x50>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 180ef0c:	e0bfff17 	ldw	r2,-4(fp)
 180ef10:	d0a7d315 	stw	r2,-24756(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 180ef14:	d0a7d717 	ldw	r2,-24740(gp)
 180ef18:	10800058 	cmpnei	r2,r2,1
 180ef1c:	10000b1e 	bne	r2,zero,180ef4c <prvAddNewTaskToReadyList+0x74>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 180ef20:	18106380 	call	1810638 <prvInitialiseTaskLists>
 180ef24:	00000906 	br	180ef4c <prvAddNewTaskToReadyList+0x74>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 180ef28:	d0a7da17 	ldw	r2,-24728(gp)
 180ef2c:	1000071e 	bne	r2,zero,180ef4c <prvAddNewTaskToReadyList+0x74>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 180ef30:	d0a7d317 	ldw	r2,-24756(gp)
 180ef34:	10800b17 	ldw	r2,44(r2)
 180ef38:	e0ffff17 	ldw	r3,-4(fp)
 180ef3c:	18c00b17 	ldw	r3,44(r3)
 180ef40:	18800236 	bltu	r3,r2,180ef4c <prvAddNewTaskToReadyList+0x74>
				{
					pxCurrentTCB = pxNewTCB;
 180ef44:	e0bfff17 	ldw	r2,-4(fp)
 180ef48:	d0a7d315 	stw	r2,-24756(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 180ef4c:	d0a7de17 	ldw	r2,-24712(gp)
 180ef50:	10800044 	addi	r2,r2,1
 180ef54:	d0a7de15 	stw	r2,-24712(gp)

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 180ef58:	d0e7de17 	ldw	r3,-24712(gp)
 180ef5c:	e0bfff17 	ldw	r2,-4(fp)
 180ef60:	10c01815 	stw	r3,96(r2)
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 180ef64:	e0bfff17 	ldw	r2,-4(fp)
 180ef68:	10800b17 	ldw	r2,44(r2)
 180ef6c:	d0e7d917 	ldw	r3,-24732(gp)
 180ef70:	1880032e 	bgeu	r3,r2,180ef80 <prvAddNewTaskToReadyList+0xa8>
 180ef74:	e0bfff17 	ldw	r2,-4(fp)
 180ef78:	10800b17 	ldw	r2,44(r2)
 180ef7c:	d0a7d915 	stw	r2,-24732(gp)
 180ef80:	e0bfff17 	ldw	r2,-4(fp)
 180ef84:	10800b17 	ldw	r2,44(r2)
 180ef88:	10c00524 	muli	r3,r2,20
 180ef8c:	00806134 	movhi	r2,388
 180ef90:	109c9004 	addi	r2,r2,29248
 180ef94:	1887883a 	add	r3,r3,r2
 180ef98:	e0bfff17 	ldw	r2,-4(fp)
 180ef9c:	10800104 	addi	r2,r2,4
 180efa0:	100b883a 	mov	r5,r2
 180efa4:	1809883a 	mov	r4,r3
 180efa8:	182b8f80 	call	182b8f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 180efac:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180efb0:	10000126 	beq	r2,zero,180efb8 <prvAddNewTaskToReadyList+0xe0>
 180efb4:	1810f900 	call	1810f90 <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 180efb8:	d0a7da17 	ldw	r2,-24728(gp)
 180efbc:	10000626 	beq	r2,zero,180efd8 <prvAddNewTaskToReadyList+0x100>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 180efc0:	d0a7d317 	ldw	r2,-24756(gp)
 180efc4:	10c00b17 	ldw	r3,44(r2)
 180efc8:	e0bfff17 	ldw	r2,-4(fp)
 180efcc:	10800b17 	ldw	r2,44(r2)
 180efd0:	1880012e 	bgeu	r3,r2,180efd8 <prvAddNewTaskToReadyList+0x100>
		{
			taskYIELD_IF_USING_PREEMPTION();
 180efd4:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 180efd8:	0001883a 	nop
 180efdc:	e037883a 	mov	sp,fp
 180efe0:	dfc00117 	ldw	ra,4(sp)
 180efe4:	df000017 	ldw	fp,0(sp)
 180efe8:	dec00204 	addi	sp,sp,8
 180efec:	f800283a 	ret

0180eff0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 180eff0:	defffc04 	addi	sp,sp,-16
 180eff4:	dfc00315 	stw	ra,12(sp)
 180eff8:	df000215 	stw	fp,8(sp)
 180effc:	df000204 	addi	fp,sp,8
 180f000:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 180f004:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f008:	10000126 	beq	r2,zero,180f010 <vTaskDelete+0x20>
 180f00c:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 180f010:	e0bfff17 	ldw	r2,-4(fp)
 180f014:	1000021e 	bne	r2,zero,180f020 <vTaskDelete+0x30>
 180f018:	d0a7d317 	ldw	r2,-24756(gp)
 180f01c:	00000106 	br	180f024 <vTaskDelete+0x34>
 180f020:	e0bfff17 	ldw	r2,-4(fp)
 180f024:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 180f028:	e0bffe17 	ldw	r2,-8(fp)
 180f02c:	10800104 	addi	r2,r2,4
 180f030:	1009883a 	mov	r4,r2
 180f034:	182ba5c0 	call	182ba5c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 180f038:	e0bffe17 	ldw	r2,-8(fp)
 180f03c:	10800a17 	ldw	r2,40(r2)
 180f040:	10000426 	beq	r2,zero,180f054 <vTaskDelete+0x64>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 180f044:	e0bffe17 	ldw	r2,-8(fp)
 180f048:	10800604 	addi	r2,r2,24
 180f04c:	1009883a 	mov	r4,r2
 180f050:	182ba5c0 	call	182ba5c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 180f054:	d0a7de17 	ldw	r2,-24712(gp)
 180f058:	10800044 	addi	r2,r2,1
 180f05c:	d0a7de15 	stw	r2,-24712(gp)

			if( pxTCB == pxCurrentTCB )
 180f060:	d0a7d317 	ldw	r2,-24756(gp)
 180f064:	e0fffe17 	ldw	r3,-8(fp)
 180f068:	18800a1e 	bne	r3,r2,180f094 <vTaskDelete+0xa4>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 180f06c:	e0bffe17 	ldw	r2,-8(fp)
 180f070:	10800104 	addi	r2,r2,4
 180f074:	100b883a 	mov	r5,r2
 180f078:	01006134 	movhi	r4,388
 180f07c:	211cb804 	addi	r4,r4,29408
 180f080:	182b8f80 	call	182b8f8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 180f084:	d0a7d617 	ldw	r2,-24744(gp)
 180f088:	10800044 	addi	r2,r2,1
 180f08c:	d0a7d615 	stw	r2,-24744(gp)
 180f090:	00000606 	br	180f0ac <vTaskDelete+0xbc>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 180f094:	d0a7d717 	ldw	r2,-24740(gp)
 180f098:	10bfffc4 	addi	r2,r2,-1
 180f09c:	d0a7d715 	stw	r2,-24740(gp)
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 180f0a0:	e13ffe17 	ldw	r4,-8(fp)
 180f0a4:	1810ac00 	call	1810ac0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 180f0a8:	1810b040 	call	1810b04 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 180f0ac:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f0b0:	10000126 	beq	r2,zero,180f0b8 <vTaskDelete+0xc8>
 180f0b4:	1810f900 	call	1810f90 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 180f0b8:	d0a7da17 	ldw	r2,-24728(gp)
 180f0bc:	10000426 	beq	r2,zero,180f0d0 <vTaskDelete+0xe0>
		{
			if( pxTCB == pxCurrentTCB )
 180f0c0:	d0a7d317 	ldw	r2,-24756(gp)
 180f0c4:	e0fffe17 	ldw	r3,-8(fp)
 180f0c8:	1880011e 	bne	r3,r2,180f0d0 <vTaskDelete+0xe0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 180f0cc:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 180f0d0:	0001883a 	nop
 180f0d4:	e037883a 	mov	sp,fp
 180f0d8:	dfc00117 	ldw	ra,4(sp)
 180f0dc:	df000017 	ldw	fp,0(sp)
 180f0e0:	dec00204 	addi	sp,sp,8
 180f0e4:	f800283a 	ret

0180f0e8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 180f0e8:	defff804 	addi	sp,sp,-32
 180f0ec:	dfc00715 	stw	ra,28(sp)
 180f0f0:	df000615 	stw	fp,24(sp)
 180f0f4:	df000604 	addi	fp,sp,24
 180f0f8:	e13ffe15 	stw	r4,-8(fp)
 180f0fc:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 180f100:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 180f104:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 180f108:	d0a7d817 	ldw	r2,-24736(gp)
 180f10c:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 180f110:	e0bffe17 	ldw	r2,-8(fp)
 180f114:	10c00017 	ldw	r3,0(r2)
 180f118:	e0bfff17 	ldw	r2,-4(fp)
 180f11c:	1885883a 	add	r2,r3,r2
 180f120:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 180f124:	e0bffe17 	ldw	r2,-8(fp)
 180f128:	10800017 	ldw	r2,0(r2)
 180f12c:	e0fffb17 	ldw	r3,-20(fp)
 180f130:	18800a2e 	bgeu	r3,r2,180f15c <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 180f134:	e0bffe17 	ldw	r2,-8(fp)
 180f138:	10800017 	ldw	r2,0(r2)
 180f13c:	e0fffc17 	ldw	r3,-16(fp)
 180f140:	18800f2e 	bgeu	r3,r2,180f180 <vTaskDelayUntil+0x98>
 180f144:	e0bffc17 	ldw	r2,-16(fp)
 180f148:	e0fffb17 	ldw	r3,-20(fp)
 180f14c:	18800c2e 	bgeu	r3,r2,180f180 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 180f150:	00800044 	movi	r2,1
 180f154:	e0bffa15 	stw	r2,-24(fp)
 180f158:	00000906 	br	180f180 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 180f15c:	e0bffe17 	ldw	r2,-8(fp)
 180f160:	10800017 	ldw	r2,0(r2)
 180f164:	e0fffc17 	ldw	r3,-16(fp)
 180f168:	18800336 	bltu	r3,r2,180f178 <vTaskDelayUntil+0x90>
 180f16c:	e0bffc17 	ldw	r2,-16(fp)
 180f170:	e0fffb17 	ldw	r3,-20(fp)
 180f174:	1880022e 	bgeu	r3,r2,180f180 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 180f178:	00800044 	movi	r2,1
 180f17c:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 180f180:	e0bffe17 	ldw	r2,-8(fp)
 180f184:	e0fffc17 	ldw	r3,-16(fp)
 180f188:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 180f18c:	e0bffa17 	ldw	r2,-24(fp)
 180f190:	10000626 	beq	r2,zero,180f1ac <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 180f194:	e0fffc17 	ldw	r3,-16(fp)
 180f198:	e0bffb17 	ldw	r2,-20(fp)
 180f19c:	1885c83a 	sub	r2,r3,r2
 180f1a0:	000b883a 	mov	r5,zero
 180f1a4:	1009883a 	mov	r4,r2
 180f1a8:	181181c0 	call	181181c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 180f1ac:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180f1b0:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 180f1b4:	e0bffd17 	ldw	r2,-12(fp)
 180f1b8:	1000011e 	bne	r2,zero,180f1c0 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 180f1bc:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f1c0:	0001883a 	nop
 180f1c4:	e037883a 	mov	sp,fp
 180f1c8:	dfc00117 	ldw	ra,4(sp)
 180f1cc:	df000017 	ldw	fp,0(sp)
 180f1d0:	dec00204 	addi	sp,sp,8
 180f1d4:	f800283a 	ret

0180f1d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 180f1d8:	defffc04 	addi	sp,sp,-16
 180f1dc:	dfc00315 	stw	ra,12(sp)
 180f1e0:	df000215 	stw	fp,8(sp)
 180f1e4:	df000204 	addi	fp,sp,8
 180f1e8:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 180f1ec:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 180f1f0:	e0bfff17 	ldw	r2,-4(fp)
 180f1f4:	10000626 	beq	r2,zero,180f210 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 180f1f8:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 180f1fc:	000b883a 	mov	r5,zero
 180f200:	e13fff17 	ldw	r4,-4(fp)
 180f204:	181181c0 	call	181181c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 180f208:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180f20c:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 180f210:	e0bffe17 	ldw	r2,-8(fp)
 180f214:	1000011e 	bne	r2,zero,180f21c <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 180f218:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f21c:	0001883a 	nop
 180f220:	e037883a 	mov	sp,fp
 180f224:	dfc00117 	ldw	ra,4(sp)
 180f228:	df000017 	ldw	fp,0(sp)
 180f22c:	dec00204 	addi	sp,sp,8
 180f230:	f800283a 	ret

0180f234 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 180f234:	defff804 	addi	sp,sp,-32
 180f238:	dfc00715 	stw	ra,28(sp)
 180f23c:	df000615 	stw	fp,24(sp)
 180f240:	df000604 	addi	fp,sp,24
 180f244:	e13fff15 	stw	r4,-4(fp)
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 180f248:	e0bfff17 	ldw	r2,-4(fp)
 180f24c:	e0bffb15 	stw	r2,-20(fp)

		configASSERT( pxTCB );

		if( pxTCB == pxCurrentTCB )
 180f250:	d0a7d317 	ldw	r2,-24756(gp)
 180f254:	e0fffb17 	ldw	r3,-20(fp)
 180f258:	1880021e 	bne	r3,r2,180f264 <eTaskGetState+0x30>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 180f25c:	e03ffa15 	stw	zero,-24(fp)
 180f260:	00003606 	br	180f33c <eTaskGetState+0x108>
		}
		else
		{
			taskENTER_CRITICAL();
 180f264:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f268:	10000126 	beq	r2,zero,180f270 <eTaskGetState+0x3c>
 180f26c:	1810f480 	call	1810f48 <vTaskEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 180f270:	e0bffb17 	ldw	r2,-20(fp)
 180f274:	10800517 	ldw	r2,20(r2)
 180f278:	e0bffc15 	stw	r2,-16(fp)
				pxDelayedList = pxDelayedTaskList;
 180f27c:	d0a7d417 	ldw	r2,-24752(gp)
 180f280:	e0bffd15 	stw	r2,-12(fp)
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 180f284:	d0a7d517 	ldw	r2,-24748(gp)
 180f288:	e0bffe15 	stw	r2,-8(fp)
			}
			taskEXIT_CRITICAL();
 180f28c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f290:	10000126 	beq	r2,zero,180f298 <eTaskGetState+0x64>
 180f294:	1810f900 	call	1810f90 <vTaskExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 180f298:	e0fffc17 	ldw	r3,-16(fp)
 180f29c:	e0bffd17 	ldw	r2,-12(fp)
 180f2a0:	18800326 	beq	r3,r2,180f2b0 <eTaskGetState+0x7c>
 180f2a4:	e0fffc17 	ldw	r3,-16(fp)
 180f2a8:	e0bffe17 	ldw	r2,-8(fp)
 180f2ac:	1880031e 	bne	r3,r2,180f2bc <eTaskGetState+0x88>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 180f2b0:	00800084 	movi	r2,2
 180f2b4:	e0bffa15 	stw	r2,-24(fp)
 180f2b8:	00002006 	br	180f33c <eTaskGetState+0x108>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 180f2bc:	e0fffc17 	ldw	r3,-16(fp)
 180f2c0:	00806134 	movhi	r2,388
 180f2c4:	109cbd04 	addi	r2,r2,29428
 180f2c8:	1880111e 	bne	r3,r2,180f310 <eTaskGetState+0xdc>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 180f2cc:	e0bffb17 	ldw	r2,-20(fp)
 180f2d0:	10800a17 	ldw	r2,40(r2)
 180f2d4:	10000b1e 	bne	r2,zero,180f304 <eTaskGetState+0xd0>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 180f2d8:	e0bffb17 	ldw	r2,-20(fp)
 180f2dc:	10801d03 	ldbu	r2,116(r2)
 180f2e0:	10803fcc 	andi	r2,r2,255
 180f2e4:	10800058 	cmpnei	r2,r2,1
 180f2e8:	1000031e 	bne	r2,zero,180f2f8 <eTaskGetState+0xc4>
							{
								eReturn = eBlocked;
 180f2ec:	00800084 	movi	r2,2
 180f2f0:	e0bffa15 	stw	r2,-24(fp)
 180f2f4:	00001106 	br	180f33c <eTaskGetState+0x108>
							}
							else
							{
								eReturn = eSuspended;
 180f2f8:	008000c4 	movi	r2,3
 180f2fc:	e0bffa15 	stw	r2,-24(fp)
 180f300:	00000e06 	br	180f33c <eTaskGetState+0x108>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 180f304:	00800084 	movi	r2,2
 180f308:	e0bffa15 	stw	r2,-24(fp)
 180f30c:	00000b06 	br	180f33c <eTaskGetState+0x108>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 180f310:	e0fffc17 	ldw	r3,-16(fp)
 180f314:	00806134 	movhi	r2,388
 180f318:	109cb804 	addi	r2,r2,29408
 180f31c:	18800226 	beq	r3,r2,180f328 <eTaskGetState+0xf4>
 180f320:	e0bffc17 	ldw	r2,-16(fp)
 180f324:	1000031e 	bne	r2,zero,180f334 <eTaskGetState+0x100>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 180f328:	00800104 	movi	r2,4
 180f32c:	e0bffa15 	stw	r2,-24(fp)
 180f330:	00000206 	br	180f33c <eTaskGetState+0x108>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 180f334:	00800044 	movi	r2,1
 180f338:	e0bffa15 	stw	r2,-24(fp)
			}
		}

		return eReturn;
 180f33c:	e0bffa17 	ldw	r2,-24(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 180f340:	e037883a 	mov	sp,fp
 180f344:	dfc00117 	ldw	ra,4(sp)
 180f348:	df000017 	ldw	fp,0(sp)
 180f34c:	dec00204 	addi	sp,sp,8
 180f350:	f800283a 	ret

0180f354 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 180f354:	defffb04 	addi	sp,sp,-20
 180f358:	dfc00415 	stw	ra,16(sp)
 180f35c:	df000315 	stw	fp,12(sp)
 180f360:	df000304 	addi	fp,sp,12
 180f364:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 180f368:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f36c:	10000126 	beq	r2,zero,180f374 <uxTaskPriorityGet+0x20>
 180f370:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 180f374:	e0bfff17 	ldw	r2,-4(fp)
 180f378:	1000021e 	bne	r2,zero,180f384 <uxTaskPriorityGet+0x30>
 180f37c:	d0a7d317 	ldw	r2,-24756(gp)
 180f380:	00000106 	br	180f388 <uxTaskPriorityGet+0x34>
 180f384:	e0bfff17 	ldw	r2,-4(fp)
 180f388:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 180f38c:	e0bffd17 	ldw	r2,-12(fp)
 180f390:	10800b17 	ldw	r2,44(r2)
 180f394:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 180f398:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f39c:	10000126 	beq	r2,zero,180f3a4 <uxTaskPriorityGet+0x50>
 180f3a0:	1810f900 	call	1810f90 <vTaskExitCritical>

		return uxReturn;
 180f3a4:	e0bffe17 	ldw	r2,-8(fp)
	}
 180f3a8:	e037883a 	mov	sp,fp
 180f3ac:	dfc00117 	ldw	ra,4(sp)
 180f3b0:	df000017 	ldw	fp,0(sp)
 180f3b4:	dec00204 	addi	sp,sp,8
 180f3b8:	f800283a 	ret

0180f3bc <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 180f3bc:	defffb04 	addi	sp,sp,-20
 180f3c0:	df000415 	stw	fp,16(sp)
 180f3c4:	df000404 	addi	fp,sp,16
 180f3c8:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 180f3cc:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 180f3d0:	e0bfff17 	ldw	r2,-4(fp)
 180f3d4:	1000021e 	bne	r2,zero,180f3e0 <uxTaskPriorityGetFromISR+0x24>
 180f3d8:	d0a7d317 	ldw	r2,-24756(gp)
 180f3dc:	00000106 	br	180f3e4 <uxTaskPriorityGetFromISR+0x28>
 180f3e0:	e0bfff17 	ldw	r2,-4(fp)
 180f3e4:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 180f3e8:	e0bffd17 	ldw	r2,-12(fp)
 180f3ec:	10800b17 	ldw	r2,44(r2)
 180f3f0:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 180f3f4:	e0bffe17 	ldw	r2,-8(fp)
	}
 180f3f8:	e037883a 	mov	sp,fp
 180f3fc:	df000017 	ldw	fp,0(sp)
 180f400:	dec00104 	addi	sp,sp,4
 180f404:	f800283a 	ret

0180f408 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 180f408:	defff804 	addi	sp,sp,-32
 180f40c:	dfc00715 	stw	ra,28(sp)
 180f410:	df000615 	stw	fp,24(sp)
 180f414:	df000604 	addi	fp,sp,24
 180f418:	e13ffe15 	stw	r4,-8(fp)
 180f41c:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 180f420:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 180f424:	e0bfff17 	ldw	r2,-4(fp)
 180f428:	10800170 	cmpltui	r2,r2,5
 180f42c:	1000021e 	bne	r2,zero,180f438 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 180f430:	00800104 	movi	r2,4
 180f434:	e0bfff15 	stw	r2,-4(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 180f438:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f43c:	10000126 	beq	r2,zero,180f444 <vTaskPrioritySet+0x3c>
 180f440:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 180f444:	e0bffe17 	ldw	r2,-8(fp)
 180f448:	1000021e 	bne	r2,zero,180f454 <vTaskPrioritySet+0x4c>
 180f44c:	d0a7d317 	ldw	r2,-24756(gp)
 180f450:	00000106 	br	180f458 <vTaskPrioritySet+0x50>
 180f454:	e0bffe17 	ldw	r2,-8(fp)
 180f458:	e0bffb15 	stw	r2,-20(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 180f45c:	e0bffb17 	ldw	r2,-20(fp)
 180f460:	10801a17 	ldw	r2,104(r2)
 180f464:	e0bffc15 	stw	r2,-16(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 180f468:	e0fffc17 	ldw	r3,-16(fp)
 180f46c:	e0bfff17 	ldw	r2,-4(fp)
 180f470:	18804926 	beq	r3,r2,180f598 <vTaskPrioritySet+0x190>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 180f474:	e0bfff17 	ldw	r2,-4(fp)
 180f478:	e0fffc17 	ldw	r3,-16(fp)
 180f47c:	18800a2e 	bgeu	r3,r2,180f4a8 <vTaskPrioritySet+0xa0>
				{
					if( pxTCB != pxCurrentTCB )
 180f480:	d0a7d317 	ldw	r2,-24756(gp)
 180f484:	e0fffb17 	ldw	r3,-20(fp)
 180f488:	18800c26 	beq	r3,r2,180f4bc <vTaskPrioritySet+0xb4>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 180f48c:	d0a7d317 	ldw	r2,-24756(gp)
 180f490:	10800b17 	ldw	r2,44(r2)
 180f494:	e0ffff17 	ldw	r3,-4(fp)
 180f498:	18800836 	bltu	r3,r2,180f4bc <vTaskPrioritySet+0xb4>
						{
							xYieldRequired = pdTRUE;
 180f49c:	00800044 	movi	r2,1
 180f4a0:	e0bffa15 	stw	r2,-24(fp)
 180f4a4:	00000506 	br	180f4bc <vTaskPrioritySet+0xb4>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 180f4a8:	d0a7d317 	ldw	r2,-24756(gp)
 180f4ac:	e0fffb17 	ldw	r3,-20(fp)
 180f4b0:	1880021e 	bne	r3,r2,180f4bc <vTaskPrioritySet+0xb4>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 180f4b4:	00800044 	movi	r2,1
 180f4b8:	e0bffa15 	stw	r2,-24(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 180f4bc:	e0bffb17 	ldw	r2,-20(fp)
 180f4c0:	10800b17 	ldw	r2,44(r2)
 180f4c4:	e0bffd15 	stw	r2,-12(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 180f4c8:	e0bffb17 	ldw	r2,-20(fp)
 180f4cc:	10c01a17 	ldw	r3,104(r2)
 180f4d0:	e0bffb17 	ldw	r2,-20(fp)
 180f4d4:	10800b17 	ldw	r2,44(r2)
 180f4d8:	1880031e 	bne	r3,r2,180f4e8 <vTaskPrioritySet+0xe0>
					{
						pxTCB->uxPriority = uxNewPriority;
 180f4dc:	e0bffb17 	ldw	r2,-20(fp)
 180f4e0:	e0ffff17 	ldw	r3,-4(fp)
 180f4e4:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 180f4e8:	e0bffb17 	ldw	r2,-20(fp)
 180f4ec:	e0ffff17 	ldw	r3,-4(fp)
 180f4f0:	10c01a15 	stw	r3,104(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 180f4f4:	e0bffb17 	ldw	r2,-20(fp)
 180f4f8:	10800617 	ldw	r2,24(r2)
 180f4fc:	10000516 	blt	r2,zero,180f514 <vTaskPrioritySet+0x10c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180f500:	00c00144 	movi	r3,5
 180f504:	e0bfff17 	ldw	r2,-4(fp)
 180f508:	1887c83a 	sub	r3,r3,r2
 180f50c:	e0bffb17 	ldw	r2,-20(fp)
 180f510:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 180f514:	e0bffb17 	ldw	r2,-20(fp)
 180f518:	10c00517 	ldw	r3,20(r2)
 180f51c:	e0bffd17 	ldw	r2,-12(fp)
 180f520:	11000524 	muli	r4,r2,20
 180f524:	00806134 	movhi	r2,388
 180f528:	109c9004 	addi	r2,r2,29248
 180f52c:	2085883a 	add	r2,r4,r2
 180f530:	1880161e 	bne	r3,r2,180f58c <vTaskPrioritySet+0x184>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 180f534:	e0bffb17 	ldw	r2,-20(fp)
 180f538:	10800104 	addi	r2,r2,4
 180f53c:	1009883a 	mov	r4,r2
 180f540:	182ba5c0 	call	182ba5c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 180f544:	e0bffb17 	ldw	r2,-20(fp)
 180f548:	10800b17 	ldw	r2,44(r2)
 180f54c:	d0e7d917 	ldw	r3,-24732(gp)
 180f550:	1880032e 	bgeu	r3,r2,180f560 <vTaskPrioritySet+0x158>
 180f554:	e0bffb17 	ldw	r2,-20(fp)
 180f558:	10800b17 	ldw	r2,44(r2)
 180f55c:	d0a7d915 	stw	r2,-24732(gp)
 180f560:	e0bffb17 	ldw	r2,-20(fp)
 180f564:	10800b17 	ldw	r2,44(r2)
 180f568:	10c00524 	muli	r3,r2,20
 180f56c:	00806134 	movhi	r2,388
 180f570:	109c9004 	addi	r2,r2,29248
 180f574:	1887883a 	add	r3,r3,r2
 180f578:	e0bffb17 	ldw	r2,-20(fp)
 180f57c:	10800104 	addi	r2,r2,4
 180f580:	100b883a 	mov	r5,r2
 180f584:	1809883a 	mov	r4,r3
 180f588:	182b8f80 	call	182b8f8 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 180f58c:	e0bffa17 	ldw	r2,-24(fp)
 180f590:	10000126 	beq	r2,zero,180f598 <vTaskPrioritySet+0x190>
				{
					taskYIELD_IF_USING_PREEMPTION();
 180f594:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 180f598:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f59c:	10000126 	beq	r2,zero,180f5a4 <vTaskPrioritySet+0x19c>
 180f5a0:	1810f900 	call	1810f90 <vTaskExitCritical>
	}
 180f5a4:	0001883a 	nop
 180f5a8:	e037883a 	mov	sp,fp
 180f5ac:	dfc00117 	ldw	ra,4(sp)
 180f5b0:	df000017 	ldw	fp,0(sp)
 180f5b4:	dec00204 	addi	sp,sp,8
 180f5b8:	f800283a 	ret

0180f5bc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 180f5bc:	defffc04 	addi	sp,sp,-16
 180f5c0:	dfc00315 	stw	ra,12(sp)
 180f5c4:	df000215 	stw	fp,8(sp)
 180f5c8:	df000204 	addi	fp,sp,8
 180f5cc:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 180f5d0:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f5d4:	10000126 	beq	r2,zero,180f5dc <vTaskSuspend+0x20>
 180f5d8:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 180f5dc:	e0bfff17 	ldw	r2,-4(fp)
 180f5e0:	1000021e 	bne	r2,zero,180f5ec <vTaskSuspend+0x30>
 180f5e4:	d0a7d317 	ldw	r2,-24756(gp)
 180f5e8:	00000106 	br	180f5f0 <vTaskSuspend+0x34>
 180f5ec:	e0bfff17 	ldw	r2,-4(fp)
 180f5f0:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 180f5f4:	e0bffe17 	ldw	r2,-8(fp)
 180f5f8:	10800104 	addi	r2,r2,4
 180f5fc:	1009883a 	mov	r4,r2
 180f600:	182ba5c0 	call	182ba5c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 180f604:	e0bffe17 	ldw	r2,-8(fp)
 180f608:	10800a17 	ldw	r2,40(r2)
 180f60c:	10000426 	beq	r2,zero,180f620 <vTaskSuspend+0x64>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 180f610:	e0bffe17 	ldw	r2,-8(fp)
 180f614:	10800604 	addi	r2,r2,24
 180f618:	1009883a 	mov	r4,r2
 180f61c:	182ba5c0 	call	182ba5c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 180f620:	e0bffe17 	ldw	r2,-8(fp)
 180f624:	10800104 	addi	r2,r2,4
 180f628:	100b883a 	mov	r5,r2
 180f62c:	01006134 	movhi	r4,388
 180f630:	211cbd04 	addi	r4,r4,29428
 180f634:	182b8f80 	call	182b8f8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 180f638:	e0bffe17 	ldw	r2,-8(fp)
 180f63c:	10801d03 	ldbu	r2,116(r2)
 180f640:	10803fcc 	andi	r2,r2,255
 180f644:	10800058 	cmpnei	r2,r2,1
 180f648:	1000021e 	bne	r2,zero,180f654 <vTaskSuspend+0x98>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 180f64c:	e0bffe17 	ldw	r2,-8(fp)
 180f650:	10001d05 	stb	zero,116(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 180f654:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f658:	10000126 	beq	r2,zero,180f660 <vTaskSuspend+0xa4>
 180f65c:	1810f900 	call	1810f90 <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 180f660:	d0a7da17 	ldw	r2,-24728(gp)
 180f664:	10000726 	beq	r2,zero,180f684 <vTaskSuspend+0xc8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 180f668:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f66c:	10000126 	beq	r2,zero,180f674 <vTaskSuspend+0xb8>
 180f670:	1810f480 	call	1810f48 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 180f674:	1810b040 	call	1810b04 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 180f678:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f67c:	10000126 	beq	r2,zero,180f684 <vTaskSuspend+0xc8>
 180f680:	1810f900 	call	1810f90 <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 180f684:	d0a7d317 	ldw	r2,-24756(gp)
 180f688:	e0fffe17 	ldw	r3,-8(fp)
 180f68c:	18800c1e 	bne	r3,r2,180f6c0 <vTaskSuspend+0x104>
		{
			if( xSchedulerRunning != pdFALSE )
 180f690:	d0a7da17 	ldw	r2,-24728(gp)
 180f694:	10000226 	beq	r2,zero,180f6a0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 180f698:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f69c:	00000806 	br	180f6c0 <vTaskSuspend+0x104>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 180f6a0:	00806134 	movhi	r2,388
 180f6a4:	109cbd04 	addi	r2,r2,29428
 180f6a8:	10c00017 	ldw	r3,0(r2)
 180f6ac:	d0a7d717 	ldw	r2,-24740(gp)
 180f6b0:	1880021e 	bne	r3,r2,180f6bc <vTaskSuspend+0x100>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 180f6b4:	d027d315 	stw	zero,-24756(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f6b8:	00000106 	br	180f6c0 <vTaskSuspend+0x104>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 180f6bc:	180ffb00 	call	180ffb0 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f6c0:	0001883a 	nop
 180f6c4:	e037883a 	mov	sp,fp
 180f6c8:	dfc00117 	ldw	ra,4(sp)
 180f6cc:	df000017 	ldw	fp,0(sp)
 180f6d0:	dec00204 	addi	sp,sp,8
 180f6d4:	f800283a 	ret

0180f6d8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 180f6d8:	defffc04 	addi	sp,sp,-16
 180f6dc:	df000315 	stw	fp,12(sp)
 180f6e0:	df000304 	addi	fp,sp,12
 180f6e4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 180f6e8:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 180f6ec:	e0bfff17 	ldw	r2,-4(fp)
 180f6f0:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 180f6f4:	e0bffe17 	ldw	r2,-8(fp)
 180f6f8:	10c00517 	ldw	r3,20(r2)
 180f6fc:	00806134 	movhi	r2,388
 180f700:	109cbd04 	addi	r2,r2,29428
 180f704:	18800a1e 	bne	r3,r2,180f730 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 180f708:	e0bffe17 	ldw	r2,-8(fp)
 180f70c:	10c00a17 	ldw	r3,40(r2)
 180f710:	00806134 	movhi	r2,388
 180f714:	109cb304 	addi	r2,r2,29388
 180f718:	18800526 	beq	r3,r2,180f730 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 180f71c:	e0bffe17 	ldw	r2,-8(fp)
 180f720:	10800a17 	ldw	r2,40(r2)
 180f724:	1000021e 	bne	r2,zero,180f730 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 180f728:	00800044 	movi	r2,1
 180f72c:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 180f730:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 180f734:	e037883a 	mov	sp,fp
 180f738:	df000017 	ldw	fp,0(sp)
 180f73c:	dec00104 	addi	sp,sp,4
 180f740:	f800283a 	ret

0180f744 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 180f744:	defffc04 	addi	sp,sp,-16
 180f748:	dfc00315 	stw	ra,12(sp)
 180f74c:	df000215 	stw	fp,8(sp)
 180f750:	df000204 	addi	fp,sp,8
 180f754:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 180f758:	e0bfff17 	ldw	r2,-4(fp)
 180f75c:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 180f760:	d0a7d317 	ldw	r2,-24756(gp)
 180f764:	e0fffe17 	ldw	r3,-8(fp)
 180f768:	18802726 	beq	r3,r2,180f808 <vTaskResume+0xc4>
 180f76c:	e0bffe17 	ldw	r2,-8(fp)
 180f770:	10002526 	beq	r2,zero,180f808 <vTaskResume+0xc4>
		{
			taskENTER_CRITICAL();
 180f774:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f778:	10000126 	beq	r2,zero,180f780 <vTaskResume+0x3c>
 180f77c:	1810f480 	call	1810f48 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 180f780:	e13ffe17 	ldw	r4,-8(fp)
 180f784:	180f6d80 	call	180f6d8 <prvTaskIsTaskSuspended>
 180f788:	10001c26 	beq	r2,zero,180f7fc <vTaskResume+0xb8>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 180f78c:	e0bffe17 	ldw	r2,-8(fp)
 180f790:	10800104 	addi	r2,r2,4
 180f794:	1009883a 	mov	r4,r2
 180f798:	182ba5c0 	call	182ba5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 180f79c:	e0bffe17 	ldw	r2,-8(fp)
 180f7a0:	10800b17 	ldw	r2,44(r2)
 180f7a4:	d0e7d917 	ldw	r3,-24732(gp)
 180f7a8:	1880032e 	bgeu	r3,r2,180f7b8 <vTaskResume+0x74>
 180f7ac:	e0bffe17 	ldw	r2,-8(fp)
 180f7b0:	10800b17 	ldw	r2,44(r2)
 180f7b4:	d0a7d915 	stw	r2,-24732(gp)
 180f7b8:	e0bffe17 	ldw	r2,-8(fp)
 180f7bc:	10800b17 	ldw	r2,44(r2)
 180f7c0:	10c00524 	muli	r3,r2,20
 180f7c4:	00806134 	movhi	r2,388
 180f7c8:	109c9004 	addi	r2,r2,29248
 180f7cc:	1887883a 	add	r3,r3,r2
 180f7d0:	e0bffe17 	ldw	r2,-8(fp)
 180f7d4:	10800104 	addi	r2,r2,4
 180f7d8:	100b883a 	mov	r5,r2
 180f7dc:	1809883a 	mov	r4,r3
 180f7e0:	182b8f80 	call	182b8f8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 180f7e4:	e0bffe17 	ldw	r2,-8(fp)
 180f7e8:	10c00b17 	ldw	r3,44(r2)
 180f7ec:	d0a7d317 	ldw	r2,-24756(gp)
 180f7f0:	10800b17 	ldw	r2,44(r2)
 180f7f4:	18800136 	bltu	r3,r2,180f7fc <vTaskResume+0xb8>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 180f7f8:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 180f7fc:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180f800:	10000126 	beq	r2,zero,180f808 <vTaskResume+0xc4>
 180f804:	1810f900 	call	1810f90 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f808:	0001883a 	nop
 180f80c:	e037883a 	mov	sp,fp
 180f810:	dfc00117 	ldw	ra,4(sp)
 180f814:	df000017 	ldw	fp,0(sp)
 180f818:	dec00204 	addi	sp,sp,8
 180f81c:	f800283a 	ret

0180f820 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 180f820:	defffa04 	addi	sp,sp,-24
 180f824:	dfc00515 	stw	ra,20(sp)
 180f828:	df000415 	stw	fp,16(sp)
 180f82c:	df000404 	addi	fp,sp,16
 180f830:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 180f834:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 180f838:	e0bfff17 	ldw	r2,-4(fp)
 180f83c:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180f840:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 180f844:	e13ffd17 	ldw	r4,-12(fp)
 180f848:	180f6d80 	call	180f6d8 <prvTaskIsTaskSuspended>
 180f84c:	10002626 	beq	r2,zero,180f8e8 <xTaskResumeFromISR+0xc8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 180f850:	d0a7e117 	ldw	r2,-24700(gp)
 180f854:	10001e1e 	bne	r2,zero,180f8d0 <xTaskResumeFromISR+0xb0>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 180f858:	e0bffd17 	ldw	r2,-12(fp)
 180f85c:	10c00b17 	ldw	r3,44(r2)
 180f860:	d0a7d317 	ldw	r2,-24756(gp)
 180f864:	10800b17 	ldw	r2,44(r2)
 180f868:	18800236 	bltu	r3,r2,180f874 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 180f86c:	00800044 	movi	r2,1
 180f870:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 180f874:	e0bffd17 	ldw	r2,-12(fp)
 180f878:	10800104 	addi	r2,r2,4
 180f87c:	1009883a 	mov	r4,r2
 180f880:	182ba5c0 	call	182ba5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 180f884:	e0bffd17 	ldw	r2,-12(fp)
 180f888:	10800b17 	ldw	r2,44(r2)
 180f88c:	d0e7d917 	ldw	r3,-24732(gp)
 180f890:	1880032e 	bgeu	r3,r2,180f8a0 <xTaskResumeFromISR+0x80>
 180f894:	e0bffd17 	ldw	r2,-12(fp)
 180f898:	10800b17 	ldw	r2,44(r2)
 180f89c:	d0a7d915 	stw	r2,-24732(gp)
 180f8a0:	e0bffd17 	ldw	r2,-12(fp)
 180f8a4:	10800b17 	ldw	r2,44(r2)
 180f8a8:	10c00524 	muli	r3,r2,20
 180f8ac:	00806134 	movhi	r2,388
 180f8b0:	109c9004 	addi	r2,r2,29248
 180f8b4:	1887883a 	add	r3,r3,r2
 180f8b8:	e0bffd17 	ldw	r2,-12(fp)
 180f8bc:	10800104 	addi	r2,r2,4
 180f8c0:	100b883a 	mov	r5,r2
 180f8c4:	1809883a 	mov	r4,r3
 180f8c8:	182b8f80 	call	182b8f8 <vListInsertEnd>
 180f8cc:	00000606 	br	180f8e8 <xTaskResumeFromISR+0xc8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 180f8d0:	e0bffd17 	ldw	r2,-12(fp)
 180f8d4:	10800604 	addi	r2,r2,24
 180f8d8:	100b883a 	mov	r5,r2
 180f8dc:	01006134 	movhi	r4,388
 180f8e0:	211cb304 	addi	r4,r4,29388
 180f8e4:	182b8f80 	call	182b8f8 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 180f8e8:	e0bffc17 	ldw	r2,-16(fp)
	}
 180f8ec:	e037883a 	mov	sp,fp
 180f8f0:	dfc00117 	ldw	ra,4(sp)
 180f8f4:	df000017 	ldw	fp,0(sp)
 180f8f8:	dec00204 	addi	sp,sp,8
 180f8fc:	f800283a 	ret

0180f900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 180f900:	defffb04 	addi	sp,sp,-20
 180f904:	dfc00415 	stw	ra,16(sp)
 180f908:	df000315 	stw	fp,12(sp)
 180f90c:	df000304 	addi	fp,sp,12
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 180f910:	d0a7e004 	addi	r2,gp,-24704
 180f914:	d8800115 	stw	r2,4(sp)
 180f918:	d8000015 	stw	zero,0(sp)
 180f91c:	000f883a 	mov	r7,zero
 180f920:	01820004 	movi	r6,2048
 180f924:	01406134 	movhi	r5,388
 180f928:	2942c804 	addi	r5,r5,2848
 180f92c:	01006074 	movhi	r4,385
 180f930:	21018704 	addi	r4,r4,1564
 180f934:	180ec140 	call	180ec14 <xTaskCreate>
 180f938:	e0bfff15 	stw	r2,-4(fp)
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 180f93c:	e0bfff17 	ldw	r2,-4(fp)
 180f940:	10800058 	cmpnei	r2,r2,1
 180f944:	1000021e 	bne	r2,zero,180f950 <vTaskStartScheduler+0x50>
		{
			xReturn = xTimerCreateTimerTask();
 180f948:	18119040 	call	1811904 <xTimerCreateTimerTask>
 180f94c:	e0bfff15 	stw	r2,-4(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 180f950:	e0bfff17 	ldw	r2,-4(fp)
 180f954:	10800058 	cmpnei	r2,r2,1
 180f958:	1000071e 	bne	r2,zero,180f978 <vTaskStartScheduler+0x78>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 180f95c:	182bb200 	call	182bb20 <enh_alt_irq_disable_all>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 180f960:	00bfffc4 	movi	r2,-1
 180f964:	d0a7df15 	stw	r2,-24708(gp)
		xSchedulerRunning = pdTRUE;
 180f968:	00800044 	movi	r2,1
 180f96c:	d0a7da15 	stw	r2,-24728(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 180f970:	d027d815 	stw	zero,-24736(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 180f974:	182bc9c0 	call	182bc9c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 180f978:	0001883a 	nop
 180f97c:	e037883a 	mov	sp,fp
 180f980:	dfc00117 	ldw	ra,4(sp)
 180f984:	df000017 	ldw	fp,0(sp)
 180f988:	dec00204 	addi	sp,sp,8
 180f98c:	f800283a 	ret

0180f990 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 180f990:	defffe04 	addi	sp,sp,-8
 180f994:	dfc00115 	stw	ra,4(sp)
 180f998:	df000015 	stw	fp,0(sp)
 180f99c:	d839883a 	mov	fp,sp
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
 180f9a0:	182bb200 	call	182bb20 <enh_alt_irq_disable_all>
	xSchedulerRunning = pdFALSE;
 180f9a4:	d027da15 	stw	zero,-24728(gp)
	vPortEndScheduler();
 180f9a8:	182bcc80 	call	182bcc8 <vPortEndScheduler>
}
 180f9ac:	0001883a 	nop
 180f9b0:	e037883a 	mov	sp,fp
 180f9b4:	dfc00117 	ldw	ra,4(sp)
 180f9b8:	df000017 	ldw	fp,0(sp)
 180f9bc:	dec00204 	addi	sp,sp,8
 180f9c0:	f800283a 	ret

0180f9c4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 180f9c4:	deffff04 	addi	sp,sp,-4
 180f9c8:	df000015 	stw	fp,0(sp)
 180f9cc:	d839883a 	mov	fp,sp
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 180f9d0:	d0a7e117 	ldw	r2,-24700(gp)
 180f9d4:	10800044 	addi	r2,r2,1
 180f9d8:	d0a7e115 	stw	r2,-24700(gp)

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 180f9dc:	0001883a 	nop
 180f9e0:	e037883a 	mov	sp,fp
 180f9e4:	df000017 	ldw	fp,0(sp)
 180f9e8:	dec00104 	addi	sp,sp,4
 180f9ec:	f800283a 	ret

0180f9f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 180f9f0:	defffb04 	addi	sp,sp,-20
 180f9f4:	dfc00415 	stw	ra,16(sp)
 180f9f8:	df000315 	stw	fp,12(sp)
 180f9fc:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 180fa00:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 180fa04:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 180fa08:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180fa0c:	10000126 	beq	r2,zero,180fa14 <xTaskResumeAll+0x24>
 180fa10:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 180fa14:	d0a7e117 	ldw	r2,-24700(gp)
 180fa18:	10bfffc4 	addi	r2,r2,-1
 180fa1c:	d0a7e115 	stw	r2,-24700(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 180fa20:	d0a7e117 	ldw	r2,-24700(gp)
 180fa24:	1000431e 	bne	r2,zero,180fb34 <xTaskResumeAll+0x144>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 180fa28:	d0a7d717 	ldw	r2,-24740(gp)
 180fa2c:	10004126 	beq	r2,zero,180fb34 <xTaskResumeAll+0x144>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 180fa30:	00002606 	br	180facc <xTaskResumeAll+0xdc>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 180fa34:	00806134 	movhi	r2,388
 180fa38:	109cb304 	addi	r2,r2,29388
 180fa3c:	10800317 	ldw	r2,12(r2)
 180fa40:	10800317 	ldw	r2,12(r2)
 180fa44:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 180fa48:	e0bffd17 	ldw	r2,-12(fp)
 180fa4c:	10800604 	addi	r2,r2,24
 180fa50:	1009883a 	mov	r4,r2
 180fa54:	182ba5c0 	call	182ba5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 180fa58:	e0bffd17 	ldw	r2,-12(fp)
 180fa5c:	10800104 	addi	r2,r2,4
 180fa60:	1009883a 	mov	r4,r2
 180fa64:	182ba5c0 	call	182ba5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 180fa68:	e0bffd17 	ldw	r2,-12(fp)
 180fa6c:	10800b17 	ldw	r2,44(r2)
 180fa70:	d0e7d917 	ldw	r3,-24732(gp)
 180fa74:	1880032e 	bgeu	r3,r2,180fa84 <xTaskResumeAll+0x94>
 180fa78:	e0bffd17 	ldw	r2,-12(fp)
 180fa7c:	10800b17 	ldw	r2,44(r2)
 180fa80:	d0a7d915 	stw	r2,-24732(gp)
 180fa84:	e0bffd17 	ldw	r2,-12(fp)
 180fa88:	10800b17 	ldw	r2,44(r2)
 180fa8c:	10c00524 	muli	r3,r2,20
 180fa90:	00806134 	movhi	r2,388
 180fa94:	109c9004 	addi	r2,r2,29248
 180fa98:	1887883a 	add	r3,r3,r2
 180fa9c:	e0bffd17 	ldw	r2,-12(fp)
 180faa0:	10800104 	addi	r2,r2,4
 180faa4:	100b883a 	mov	r5,r2
 180faa8:	1809883a 	mov	r4,r3
 180faac:	182b8f80 	call	182b8f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 180fab0:	e0bffd17 	ldw	r2,-12(fp)
 180fab4:	10c00b17 	ldw	r3,44(r2)
 180fab8:	d0a7d317 	ldw	r2,-24756(gp)
 180fabc:	10800b17 	ldw	r2,44(r2)
 180fac0:	18800236 	bltu	r3,r2,180facc <xTaskResumeAll+0xdc>
					{
						xYieldPending = pdTRUE;
 180fac4:	00800044 	movi	r2,1
 180fac8:	d0a7dc15 	stw	r2,-24720(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 180facc:	00806134 	movhi	r2,388
 180fad0:	109cb304 	addi	r2,r2,29388
 180fad4:	10800017 	ldw	r2,0(r2)
 180fad8:	103fd61e 	bne	r2,zero,180fa34 <__ram_exceptions_end+0xff7ff744>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 180fadc:	e0bffd17 	ldw	r2,-12(fp)
 180fae0:	10000126 	beq	r2,zero,180fae8 <xTaskResumeAll+0xf8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 180fae4:	1810b040 	call	1810b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 180fae8:	d0a7db17 	ldw	r2,-24724(gp)
 180faec:	e0bfff15 	stw	r2,-4(fp)

					if( xPendedCounts > ( TickType_t ) 0U )
 180faf0:	e0bfff17 	ldw	r2,-4(fp)
 180faf4:	10000a26 	beq	r2,zero,180fb20 <xTaskResumeAll+0x130>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 180faf8:	180fe000 	call	180fe00 <xTaskIncrementTick>
 180fafc:	10000226 	beq	r2,zero,180fb08 <xTaskResumeAll+0x118>
							{
								xYieldPending = pdTRUE;
 180fb00:	00800044 	movi	r2,1
 180fb04:	d0a7dc15 	stw	r2,-24720(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 180fb08:	e0bfff17 	ldw	r2,-4(fp)
 180fb0c:	10bfffc4 	addi	r2,r2,-1
 180fb10:	e0bfff15 	stw	r2,-4(fp)
						} while( xPendedCounts > ( TickType_t ) 0U );
 180fb14:	e0bfff17 	ldw	r2,-4(fp)
 180fb18:	103ff71e 	bne	r2,zero,180faf8 <__ram_exceptions_end+0xff7ff808>

						xPendedTicks = 0;
 180fb1c:	d027db15 	stw	zero,-24724(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 180fb20:	d0a7dc17 	ldw	r2,-24720(gp)
 180fb24:	10000326 	beq	r2,zero,180fb34 <xTaskResumeAll+0x144>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 180fb28:	00800044 	movi	r2,1
 180fb2c:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 180fb30:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 180fb34:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180fb38:	10000126 	beq	r2,zero,180fb40 <xTaskResumeAll+0x150>
 180fb3c:	1810f900 	call	1810f90 <vTaskExitCritical>

	return xAlreadyYielded;
 180fb40:	e0bffe17 	ldw	r2,-8(fp)
}
 180fb44:	e037883a 	mov	sp,fp
 180fb48:	dfc00117 	ldw	ra,4(sp)
 180fb4c:	df000017 	ldw	fp,0(sp)
 180fb50:	dec00204 	addi	sp,sp,8
 180fb54:	f800283a 	ret

0180fb58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 180fb58:	defffd04 	addi	sp,sp,-12
 180fb5c:	dfc00215 	stw	ra,8(sp)
 180fb60:	df000115 	stw	fp,4(sp)
 180fb64:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
 180fb68:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180fb6c:	10000126 	beq	r2,zero,180fb74 <xTaskGetTickCount+0x1c>
 180fb70:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		xTicks = xTickCount;
 180fb74:	d0a7d817 	ldw	r2,-24736(gp)
 180fb78:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();
 180fb7c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 180fb80:	10000126 	beq	r2,zero,180fb88 <xTaskGetTickCount+0x30>
 180fb84:	1810f900 	call	1810f90 <vTaskExitCritical>

	return xTicks;
 180fb88:	e0bfff17 	ldw	r2,-4(fp)
}
 180fb8c:	e037883a 	mov	sp,fp
 180fb90:	dfc00117 	ldw	ra,4(sp)
 180fb94:	df000017 	ldw	fp,0(sp)
 180fb98:	dec00204 	addi	sp,sp,8
 180fb9c:	f800283a 	ret

0180fba0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 180fba0:	defffd04 	addi	sp,sp,-12
 180fba4:	df000215 	stw	fp,8(sp)
 180fba8:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 180fbac:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 180fbb0:	d0a7d817 	ldw	r2,-24736(gp)
 180fbb4:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180fbb8:	e0bfff17 	ldw	r2,-4(fp)
}
 180fbbc:	e037883a 	mov	sp,fp
 180fbc0:	df000017 	ldw	fp,0(sp)
 180fbc4:	dec00104 	addi	sp,sp,4
 180fbc8:	f800283a 	ret

0180fbcc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 180fbcc:	deffff04 	addi	sp,sp,-4
 180fbd0:	df000015 	stw	fp,0(sp)
 180fbd4:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 180fbd8:	d0a7d717 	ldw	r2,-24740(gp)
}
 180fbdc:	e037883a 	mov	sp,fp
 180fbe0:	df000017 	ldw	fp,0(sp)
 180fbe4:	dec00104 	addi	sp,sp,4
 180fbe8:	f800283a 	ret

0180fbec <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 180fbec:	defffd04 	addi	sp,sp,-12
 180fbf0:	df000215 	stw	fp,8(sp)
 180fbf4:	df000204 	addi	fp,sp,8
 180fbf8:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 180fbfc:	e0bfff17 	ldw	r2,-4(fp)
 180fc00:	1000021e 	bne	r2,zero,180fc0c <pcTaskGetName+0x20>
 180fc04:	d0a7d317 	ldw	r2,-24756(gp)
 180fc08:	00000106 	br	180fc10 <pcTaskGetName+0x24>
 180fc0c:	e0bfff17 	ldw	r2,-4(fp)
 180fc10:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 180fc14:	e0bffe17 	ldw	r2,-8(fp)
 180fc18:	10800d04 	addi	r2,r2,52
}
 180fc1c:	e037883a 	mov	sp,fp
 180fc20:	df000017 	ldw	fp,0(sp)
 180fc24:	dec00104 	addi	sp,sp,4
 180fc28:	f800283a 	ret

0180fc2c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 180fc2c:	defff904 	addi	sp,sp,-28
 180fc30:	dfc00615 	stw	ra,24(sp)
 180fc34:	df000515 	stw	fp,20(sp)
 180fc38:	df000504 	addi	fp,sp,20
 180fc3c:	e13ffd15 	stw	r4,-12(fp)
 180fc40:	e17ffe15 	stw	r5,-8(fp)
 180fc44:	e1bfff15 	stw	r6,-4(fp)
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 180fc48:	e03ffb15 	stw	zero,-20(fp)
 180fc4c:	00800144 	movi	r2,5
 180fc50:	e0bffc15 	stw	r2,-16(fp)

		vTaskSuspendAll();
 180fc54:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 180fc58:	d0a7d717 	ldw	r2,-24740(gp)
 180fc5c:	e0fffe17 	ldw	r3,-8(fp)
 180fc60:	18804d36 	bltu	r3,r2,180fd98 <uxTaskGetSystemState+0x16c>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 180fc64:	e0bffc17 	ldw	r2,-16(fp)
 180fc68:	10bfffc4 	addi	r2,r2,-1
 180fc6c:	e0bffc15 	stw	r2,-16(fp)
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 180fc70:	e0bffb17 	ldw	r2,-20(fp)
 180fc74:	10800924 	muli	r2,r2,36
 180fc78:	e0fffd17 	ldw	r3,-12(fp)
 180fc7c:	1889883a 	add	r4,r3,r2
 180fc80:	e0bffc17 	ldw	r2,-16(fp)
 180fc84:	10c00524 	muli	r3,r2,20
 180fc88:	00806134 	movhi	r2,388
 180fc8c:	109c9004 	addi	r2,r2,29248
 180fc90:	1885883a 	add	r2,r3,r2
 180fc94:	01800044 	movi	r6,1
 180fc98:	100b883a 	mov	r5,r2
 180fc9c:	18108d80 	call	18108d8 <prvListTasksWithinSingleList>
 180fca0:	1007883a 	mov	r3,r2
 180fca4:	e0bffb17 	ldw	r2,-20(fp)
 180fca8:	10c5883a 	add	r2,r2,r3
 180fcac:	e0bffb15 	stw	r2,-20(fp)

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180fcb0:	e0bffc17 	ldw	r2,-16(fp)
 180fcb4:	103feb1e 	bne	r2,zero,180fc64 <__ram_exceptions_end+0xff7ff974>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 180fcb8:	e0bffb17 	ldw	r2,-20(fp)
 180fcbc:	10800924 	muli	r2,r2,36
 180fcc0:	e0fffd17 	ldw	r3,-12(fp)
 180fcc4:	1885883a 	add	r2,r3,r2
 180fcc8:	d0e7d417 	ldw	r3,-24752(gp)
 180fccc:	01800084 	movi	r6,2
 180fcd0:	180b883a 	mov	r5,r3
 180fcd4:	1009883a 	mov	r4,r2
 180fcd8:	18108d80 	call	18108d8 <prvListTasksWithinSingleList>
 180fcdc:	1007883a 	mov	r3,r2
 180fce0:	e0bffb17 	ldw	r2,-20(fp)
 180fce4:	10c5883a 	add	r2,r2,r3
 180fce8:	e0bffb15 	stw	r2,-20(fp)
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 180fcec:	e0bffb17 	ldw	r2,-20(fp)
 180fcf0:	10800924 	muli	r2,r2,36
 180fcf4:	e0fffd17 	ldw	r3,-12(fp)
 180fcf8:	1885883a 	add	r2,r3,r2
 180fcfc:	d0e7d517 	ldw	r3,-24748(gp)
 180fd00:	01800084 	movi	r6,2
 180fd04:	180b883a 	mov	r5,r3
 180fd08:	1009883a 	mov	r4,r2
 180fd0c:	18108d80 	call	18108d8 <prvListTasksWithinSingleList>
 180fd10:	1007883a 	mov	r3,r2
 180fd14:	e0bffb17 	ldw	r2,-20(fp)
 180fd18:	10c5883a 	add	r2,r2,r3
 180fd1c:	e0bffb15 	stw	r2,-20(fp)

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 180fd20:	e0bffb17 	ldw	r2,-20(fp)
 180fd24:	10800924 	muli	r2,r2,36
 180fd28:	e0fffd17 	ldw	r3,-12(fp)
 180fd2c:	1885883a 	add	r2,r3,r2
 180fd30:	01800104 	movi	r6,4
 180fd34:	01406134 	movhi	r5,388
 180fd38:	295cb804 	addi	r5,r5,29408
 180fd3c:	1009883a 	mov	r4,r2
 180fd40:	18108d80 	call	18108d8 <prvListTasksWithinSingleList>
 180fd44:	1007883a 	mov	r3,r2
 180fd48:	e0bffb17 	ldw	r2,-20(fp)
 180fd4c:	10c5883a 	add	r2,r2,r3
 180fd50:	e0bffb15 	stw	r2,-20(fp)

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 180fd54:	e0bffb17 	ldw	r2,-20(fp)
 180fd58:	10800924 	muli	r2,r2,36
 180fd5c:	e0fffd17 	ldw	r3,-12(fp)
 180fd60:	1885883a 	add	r2,r3,r2
 180fd64:	018000c4 	movi	r6,3
 180fd68:	01406134 	movhi	r5,388
 180fd6c:	295cbd04 	addi	r5,r5,29428
 180fd70:	1009883a 	mov	r4,r2
 180fd74:	18108d80 	call	18108d8 <prvListTasksWithinSingleList>
 180fd78:	1007883a 	mov	r3,r2
 180fd7c:	e0bffb17 	ldw	r2,-20(fp)
 180fd80:	10c5883a 	add	r2,r2,r3
 180fd84:	e0bffb15 	stw	r2,-20(fp)
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 180fd88:	e0bfff17 	ldw	r2,-4(fp)
 180fd8c:	10000226 	beq	r2,zero,180fd98 <uxTaskGetSystemState+0x16c>
					{
						*pulTotalRunTime = 0;
 180fd90:	e0bfff17 	ldw	r2,-4(fp)
 180fd94:	10000015 	stw	zero,0(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 180fd98:	180f9f00 	call	180f9f0 <xTaskResumeAll>

		return uxTask;
 180fd9c:	e0bffb17 	ldw	r2,-20(fp)
	}
 180fda0:	e037883a 	mov	sp,fp
 180fda4:	dfc00117 	ldw	ra,4(sp)
 180fda8:	df000017 	ldw	fp,0(sp)
 180fdac:	dec00204 	addi	sp,sp,8
 180fdb0:	f800283a 	ret

0180fdb4 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
 180fdb4:	defffc04 	addi	sp,sp,-16
 180fdb8:	dfc00315 	stw	ra,12(sp)
 180fdbc:	df000215 	stw	fp,8(sp)
 180fdc0:	df000204 	addi	fp,sp,8
 180fdc4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xYieldRequired = pdFALSE;
 180fdc8:	e03ffe15 	stw	zero,-8(fp)
	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
	configASSERT( uxSchedulerSuspended == 0 );

	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
	vTaskSuspendAll();
 180fdcc:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
	xPendedTicks += xTicksToCatchUp;
 180fdd0:	d0e7db17 	ldw	r3,-24724(gp)
 180fdd4:	e0bfff17 	ldw	r2,-4(fp)
 180fdd8:	1885883a 	add	r2,r3,r2
 180fddc:	d0a7db15 	stw	r2,-24724(gp)
	xYieldRequired = xTaskResumeAll();
 180fde0:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 180fde4:	e0bffe15 	stw	r2,-8(fp)

	return xYieldRequired;
 180fde8:	e0bffe17 	ldw	r2,-8(fp)
}
 180fdec:	e037883a 	mov	sp,fp
 180fdf0:	dfc00117 	ldw	ra,4(sp)
 180fdf4:	df000017 	ldw	fp,0(sp)
 180fdf8:	dec00204 	addi	sp,sp,8
 180fdfc:	f800283a 	ret

0180fe00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 180fe00:	defff904 	addi	sp,sp,-28
 180fe04:	dfc00615 	stw	ra,24(sp)
 180fe08:	df000515 	stw	fp,20(sp)
 180fe0c:	df000504 	addi	fp,sp,20
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 180fe10:	e03ffb15 	stw	zero,-20(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 180fe14:	d0a7e117 	ldw	r2,-24700(gp)
 180fe18:	10005c1e 	bne	r2,zero,180ff8c <xTaskIncrementTick+0x18c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 180fe1c:	d0a7d817 	ldw	r2,-24736(gp)
 180fe20:	10800044 	addi	r2,r2,1
 180fe24:	e0bffc15 	stw	r2,-16(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 180fe28:	e0bffc17 	ldw	r2,-16(fp)
 180fe2c:	d0a7d815 	stw	r2,-24736(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 180fe30:	e0bffc17 	ldw	r2,-16(fp)
 180fe34:	10000a1e 	bne	r2,zero,180fe60 <xTaskIncrementTick+0x60>
		{
			taskSWITCH_DELAYED_LISTS();
 180fe38:	d0a7d417 	ldw	r2,-24752(gp)
 180fe3c:	e0bffd15 	stw	r2,-12(fp)
 180fe40:	d0a7d517 	ldw	r2,-24748(gp)
 180fe44:	d0a7d415 	stw	r2,-24752(gp)
 180fe48:	e0bffd17 	ldw	r2,-12(fp)
 180fe4c:	d0a7d515 	stw	r2,-24748(gp)
 180fe50:	d0a7dd17 	ldw	r2,-24716(gp)
 180fe54:	10800044 	addi	r2,r2,1
 180fe58:	d0a7dd15 	stw	r2,-24716(gp)
 180fe5c:	1810b040 	call	1810b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 180fe60:	d0a7df17 	ldw	r2,-24708(gp)
 180fe64:	e0fffc17 	ldw	r3,-16(fp)
 180fe68:	18803836 	bltu	r3,r2,180ff4c <xTaskIncrementTick+0x14c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 180fe6c:	d0a7d417 	ldw	r2,-24752(gp)
 180fe70:	10800017 	ldw	r2,0(r2)
 180fe74:	1000031e 	bne	r2,zero,180fe84 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180fe78:	00bfffc4 	movi	r2,-1
 180fe7c:	d0a7df15 	stw	r2,-24708(gp)
					break;
 180fe80:	00003206 	br	180ff4c <xTaskIncrementTick+0x14c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 180fe84:	d0a7d417 	ldw	r2,-24752(gp)
 180fe88:	10800317 	ldw	r2,12(r2)
 180fe8c:	10800317 	ldw	r2,12(r2)
 180fe90:	e0bffe15 	stw	r2,-8(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 180fe94:	e0bffe17 	ldw	r2,-8(fp)
 180fe98:	10800117 	ldw	r2,4(r2)
 180fe9c:	e0bfff15 	stw	r2,-4(fp)

					if( xConstTickCount < xItemValue )
 180fea0:	e0fffc17 	ldw	r3,-16(fp)
 180fea4:	e0bfff17 	ldw	r2,-4(fp)
 180fea8:	1880032e 	bgeu	r3,r2,180feb8 <xTaskIncrementTick+0xb8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 180feac:	e0bfff17 	ldw	r2,-4(fp)
 180feb0:	d0a7df15 	stw	r2,-24708(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 180feb4:	00002506 	br	180ff4c <xTaskIncrementTick+0x14c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 180feb8:	e0bffe17 	ldw	r2,-8(fp)
 180febc:	10800104 	addi	r2,r2,4
 180fec0:	1009883a 	mov	r4,r2
 180fec4:	182ba5c0 	call	182ba5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 180fec8:	e0bffe17 	ldw	r2,-8(fp)
 180fecc:	10800a17 	ldw	r2,40(r2)
 180fed0:	10000426 	beq	r2,zero,180fee4 <xTaskIncrementTick+0xe4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 180fed4:	e0bffe17 	ldw	r2,-8(fp)
 180fed8:	10800604 	addi	r2,r2,24
 180fedc:	1009883a 	mov	r4,r2
 180fee0:	182ba5c0 	call	182ba5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 180fee4:	e0bffe17 	ldw	r2,-8(fp)
 180fee8:	10800b17 	ldw	r2,44(r2)
 180feec:	d0e7d917 	ldw	r3,-24732(gp)
 180fef0:	1880032e 	bgeu	r3,r2,180ff00 <xTaskIncrementTick+0x100>
 180fef4:	e0bffe17 	ldw	r2,-8(fp)
 180fef8:	10800b17 	ldw	r2,44(r2)
 180fefc:	d0a7d915 	stw	r2,-24732(gp)
 180ff00:	e0bffe17 	ldw	r2,-8(fp)
 180ff04:	10800b17 	ldw	r2,44(r2)
 180ff08:	10c00524 	muli	r3,r2,20
 180ff0c:	00806134 	movhi	r2,388
 180ff10:	109c9004 	addi	r2,r2,29248
 180ff14:	1887883a 	add	r3,r3,r2
 180ff18:	e0bffe17 	ldw	r2,-8(fp)
 180ff1c:	10800104 	addi	r2,r2,4
 180ff20:	100b883a 	mov	r5,r2
 180ff24:	1809883a 	mov	r4,r3
 180ff28:	182b8f80 	call	182b8f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 180ff2c:	e0bffe17 	ldw	r2,-8(fp)
 180ff30:	10c00b17 	ldw	r3,44(r2)
 180ff34:	d0a7d317 	ldw	r2,-24756(gp)
 180ff38:	10800b17 	ldw	r2,44(r2)
 180ff3c:	18bfcb36 	bltu	r3,r2,180fe6c <__ram_exceptions_end+0xff7ffb7c>
						{
							xSwitchRequired = pdTRUE;
 180ff40:	00800044 	movi	r2,1
 180ff44:	e0bffb15 	stw	r2,-20(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 180ff48:	003fc806 	br	180fe6c <__ram_exceptions_end+0xff7ffb7c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 180ff4c:	d0a7d317 	ldw	r2,-24756(gp)
 180ff50:	10c00b17 	ldw	r3,44(r2)
 180ff54:	00806134 	movhi	r2,388
 180ff58:	109c9004 	addi	r2,r2,29248
 180ff5c:	18c00524 	muli	r3,r3,20
 180ff60:	10c5883a 	add	r2,r2,r3
 180ff64:	10800017 	ldw	r2,0(r2)
 180ff68:	108000b0 	cmpltui	r2,r2,2
 180ff6c:	1000021e 	bne	r2,zero,180ff78 <xTaskIncrementTick+0x178>
			{
				xSwitchRequired = pdTRUE;
 180ff70:	00800044 	movi	r2,1
 180ff74:	e0bffb15 	stw	r2,-20(fp)
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 180ff78:	d0a7dc17 	ldw	r2,-24720(gp)
 180ff7c:	10000626 	beq	r2,zero,180ff98 <xTaskIncrementTick+0x198>
			{
				xSwitchRequired = pdTRUE;
 180ff80:	00800044 	movi	r2,1
 180ff84:	e0bffb15 	stw	r2,-20(fp)
 180ff88:	00000306 	br	180ff98 <xTaskIncrementTick+0x198>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 180ff8c:	d0a7db17 	ldw	r2,-24724(gp)
 180ff90:	10800044 	addi	r2,r2,1
 180ff94:	d0a7db15 	stw	r2,-24724(gp)
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 180ff98:	e0bffb17 	ldw	r2,-20(fp)
}
 180ff9c:	e037883a 	mov	sp,fp
 180ffa0:	dfc00117 	ldw	ra,4(sp)
 180ffa4:	df000017 	ldw	fp,0(sp)
 180ffa8:	dec00204 	addi	sp,sp,8
 180ffac:	f800283a 	ret

0180ffb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 180ffb0:	defffa04 	addi	sp,sp,-24
 180ffb4:	dfc00515 	stw	ra,20(sp)
 180ffb8:	df000415 	stw	fp,16(sp)
 180ffbc:	df000404 	addi	fp,sp,16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 180ffc0:	d0a7e117 	ldw	r2,-24700(gp)
 180ffc4:	10000326 	beq	r2,zero,180ffd4 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 180ffc8:	00800044 	movi	r2,1
 180ffcc:	d0a7dc15 	stw	r2,-24720(gp)
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 180ffd0:	00004806 	br	18100f4 <vTaskSwitchContext+0x144>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 180ffd4:	d027dc15 	stw	zero,-24720(gp)
			ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 180ffd8:	d0a7d317 	ldw	r2,-24756(gp)
 180ffdc:	10800c17 	ldw	r2,48(r2)
 180ffe0:	e0bffd15 	stw	r2,-12(fp)
 180ffe4:	00a969b4 	movhi	r2,42406
 180ffe8:	10a96944 	addi	r2,r2,-23131
 180ffec:	e0bffe15 	stw	r2,-8(fp)
 180fff0:	e0bffd17 	ldw	r2,-12(fp)
 180fff4:	10c00017 	ldw	r3,0(r2)
 180fff8:	e0bffe17 	ldw	r2,-8(fp)
 180fffc:	18800f1e 	bne	r3,r2,181003c <vTaskSwitchContext+0x8c>
 1810000:	e0bffd17 	ldw	r2,-12(fp)
 1810004:	10800104 	addi	r2,r2,4
 1810008:	10c00017 	ldw	r3,0(r2)
 181000c:	e0bffe17 	ldw	r2,-8(fp)
 1810010:	18800a1e 	bne	r3,r2,181003c <vTaskSwitchContext+0x8c>
 1810014:	e0bffd17 	ldw	r2,-12(fp)
 1810018:	10800204 	addi	r2,r2,8
 181001c:	10c00017 	ldw	r3,0(r2)
 1810020:	e0bffe17 	ldw	r2,-8(fp)
 1810024:	1880051e 	bne	r3,r2,181003c <vTaskSwitchContext+0x8c>
 1810028:	e0bffd17 	ldw	r2,-12(fp)
 181002c:	10800304 	addi	r2,r2,12
 1810030:	10c00017 	ldw	r3,0(r2)
 1810034:	e0bffe17 	ldw	r2,-8(fp)
 1810038:	18800626 	beq	r3,r2,1810054 <vTaskSwitchContext+0xa4>
 181003c:	d0e7d317 	ldw	r3,-24756(gp)
 1810040:	d0a7d317 	ldw	r2,-24756(gp)
 1810044:	10800d04 	addi	r2,r2,52
 1810048:	100b883a 	mov	r5,r2
 181004c:	1809883a 	mov	r4,r3
 1810050:	18003440 	call	1800344 <vApplicationStackOverflowHook>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1810054:	d0a7d917 	ldw	r2,-24732(gp)
 1810058:	e0bffc15 	stw	r2,-16(fp)
 181005c:	00000306 	br	181006c <vTaskSwitchContext+0xbc>
 1810060:	e0bffc17 	ldw	r2,-16(fp)
 1810064:	10bfffc4 	addi	r2,r2,-1
 1810068:	e0bffc15 	stw	r2,-16(fp)
 181006c:	00806134 	movhi	r2,388
 1810070:	109c9004 	addi	r2,r2,29248
 1810074:	e0fffc17 	ldw	r3,-16(fp)
 1810078:	18c00524 	muli	r3,r3,20
 181007c:	10c5883a 	add	r2,r2,r3
 1810080:	10800017 	ldw	r2,0(r2)
 1810084:	103ff626 	beq	r2,zero,1810060 <__ram_exceptions_end+0xff7ffd70>
 1810088:	e0bffc17 	ldw	r2,-16(fp)
 181008c:	10c00524 	muli	r3,r2,20
 1810090:	00806134 	movhi	r2,388
 1810094:	109c9004 	addi	r2,r2,29248
 1810098:	1885883a 	add	r2,r3,r2
 181009c:	e0bfff15 	stw	r2,-4(fp)
 18100a0:	e0bfff17 	ldw	r2,-4(fp)
 18100a4:	10800117 	ldw	r2,4(r2)
 18100a8:	10c00117 	ldw	r3,4(r2)
 18100ac:	e0bfff17 	ldw	r2,-4(fp)
 18100b0:	10c00115 	stw	r3,4(r2)
 18100b4:	e0bfff17 	ldw	r2,-4(fp)
 18100b8:	10c00117 	ldw	r3,4(r2)
 18100bc:	e0bfff17 	ldw	r2,-4(fp)
 18100c0:	10800204 	addi	r2,r2,8
 18100c4:	1880051e 	bne	r3,r2,18100dc <vTaskSwitchContext+0x12c>
 18100c8:	e0bfff17 	ldw	r2,-4(fp)
 18100cc:	10800117 	ldw	r2,4(r2)
 18100d0:	10c00117 	ldw	r3,4(r2)
 18100d4:	e0bfff17 	ldw	r2,-4(fp)
 18100d8:	10c00115 	stw	r3,4(r2)
 18100dc:	e0bfff17 	ldw	r2,-4(fp)
 18100e0:	10800117 	ldw	r2,4(r2)
 18100e4:	10800317 	ldw	r2,12(r2)
 18100e8:	d0a7d315 	stw	r2,-24756(gp)
 18100ec:	e0bffc17 	ldw	r2,-16(fp)
 18100f0:	d0a7d915 	stw	r2,-24732(gp)
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 18100f4:	0001883a 	nop
 18100f8:	e037883a 	mov	sp,fp
 18100fc:	dfc00117 	ldw	ra,4(sp)
 1810100:	df000017 	ldw	fp,0(sp)
 1810104:	dec00204 	addi	sp,sp,8
 1810108:	f800283a 	ret

0181010c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 181010c:	defffc04 	addi	sp,sp,-16
 1810110:	dfc00315 	stw	ra,12(sp)
 1810114:	df000215 	stw	fp,8(sp)
 1810118:	df000204 	addi	fp,sp,8
 181011c:	e13ffe15 	stw	r4,-8(fp)
 1810120:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1810124:	d0a7d317 	ldw	r2,-24756(gp)
 1810128:	10800604 	addi	r2,r2,24
 181012c:	100b883a 	mov	r5,r2
 1810130:	e13ffe17 	ldw	r4,-8(fp)
 1810134:	182b9840 	call	182b984 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 1810138:	01400044 	movi	r5,1
 181013c:	e13fff17 	ldw	r4,-4(fp)
 1810140:	181181c0 	call	181181c <prvAddCurrentTaskToDelayedList>
}
 1810144:	0001883a 	nop
 1810148:	e037883a 	mov	sp,fp
 181014c:	dfc00117 	ldw	ra,4(sp)
 1810150:	df000017 	ldw	fp,0(sp)
 1810154:	dec00204 	addi	sp,sp,8
 1810158:	f800283a 	ret

0181015c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 181015c:	defffb04 	addi	sp,sp,-20
 1810160:	dfc00415 	stw	ra,16(sp)
 1810164:	df000315 	stw	fp,12(sp)
 1810168:	df000304 	addi	fp,sp,12
 181016c:	e13ffd15 	stw	r4,-12(fp)
 1810170:	e17ffe15 	stw	r5,-8(fp)
 1810174:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 1810178:	d0a7d317 	ldw	r2,-24756(gp)
 181017c:	e0fffe17 	ldw	r3,-8(fp)
 1810180:	18e00034 	orhi	r3,r3,32768
 1810184:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1810188:	d0a7d317 	ldw	r2,-24756(gp)
 181018c:	10800604 	addi	r2,r2,24
 1810190:	100b883a 	mov	r5,r2
 1810194:	e13ffd17 	ldw	r4,-12(fp)
 1810198:	182b8f80 	call	182b8f8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 181019c:	01400044 	movi	r5,1
 18101a0:	e13fff17 	ldw	r4,-4(fp)
 18101a4:	181181c0 	call	181181c <prvAddCurrentTaskToDelayedList>
}
 18101a8:	0001883a 	nop
 18101ac:	e037883a 	mov	sp,fp
 18101b0:	dfc00117 	ldw	ra,4(sp)
 18101b4:	df000017 	ldw	fp,0(sp)
 18101b8:	dec00204 	addi	sp,sp,8
 18101bc:	f800283a 	ret

018101c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 18101c0:	defffb04 	addi	sp,sp,-20
 18101c4:	dfc00415 	stw	ra,16(sp)
 18101c8:	df000315 	stw	fp,12(sp)
 18101cc:	df000304 	addi	fp,sp,12
 18101d0:	e13ffd15 	stw	r4,-12(fp)
 18101d4:	e17ffe15 	stw	r5,-8(fp)
 18101d8:	e1bfff15 	stw	r6,-4(fp)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 18101dc:	d0a7d317 	ldw	r2,-24756(gp)
 18101e0:	10800604 	addi	r2,r2,24
 18101e4:	100b883a 	mov	r5,r2
 18101e8:	e13ffd17 	ldw	r4,-12(fp)
 18101ec:	182b8f80 	call	182b8f8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 18101f0:	e0bfff17 	ldw	r2,-4(fp)
 18101f4:	10000226 	beq	r2,zero,1810200 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 18101f8:	00bfffc4 	movi	r2,-1
 18101fc:	e0bffe15 	stw	r2,-8(fp)
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 1810200:	e17fff17 	ldw	r5,-4(fp)
 1810204:	e13ffe17 	ldw	r4,-8(fp)
 1810208:	181181c0 	call	181181c <prvAddCurrentTaskToDelayedList>
	}
 181020c:	0001883a 	nop
 1810210:	e037883a 	mov	sp,fp
 1810214:	dfc00117 	ldw	ra,4(sp)
 1810218:	df000017 	ldw	fp,0(sp)
 181021c:	dec00204 	addi	sp,sp,8
 1810220:	f800283a 	ret

01810224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 1810224:	defffb04 	addi	sp,sp,-20
 1810228:	dfc00415 	stw	ra,16(sp)
 181022c:	df000315 	stw	fp,12(sp)
 1810230:	df000304 	addi	fp,sp,12
 1810234:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1810238:	e0bfff17 	ldw	r2,-4(fp)
 181023c:	10800317 	ldw	r2,12(r2)
 1810240:	10800317 	ldw	r2,12(r2)
 1810244:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 1810248:	e0bffe17 	ldw	r2,-8(fp)
 181024c:	10800604 	addi	r2,r2,24
 1810250:	1009883a 	mov	r4,r2
 1810254:	182ba5c0 	call	182ba5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1810258:	d0a7e117 	ldw	r2,-24700(gp)
 181025c:	1000171e 	bne	r2,zero,18102bc <xTaskRemoveFromEventList+0x98>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 1810260:	e0bffe17 	ldw	r2,-8(fp)
 1810264:	10800104 	addi	r2,r2,4
 1810268:	1009883a 	mov	r4,r2
 181026c:	182ba5c0 	call	182ba5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 1810270:	e0bffe17 	ldw	r2,-8(fp)
 1810274:	10800b17 	ldw	r2,44(r2)
 1810278:	d0e7d917 	ldw	r3,-24732(gp)
 181027c:	1880032e 	bgeu	r3,r2,181028c <xTaskRemoveFromEventList+0x68>
 1810280:	e0bffe17 	ldw	r2,-8(fp)
 1810284:	10800b17 	ldw	r2,44(r2)
 1810288:	d0a7d915 	stw	r2,-24732(gp)
 181028c:	e0bffe17 	ldw	r2,-8(fp)
 1810290:	10800b17 	ldw	r2,44(r2)
 1810294:	10c00524 	muli	r3,r2,20
 1810298:	00806134 	movhi	r2,388
 181029c:	109c9004 	addi	r2,r2,29248
 18102a0:	1887883a 	add	r3,r3,r2
 18102a4:	e0bffe17 	ldw	r2,-8(fp)
 18102a8:	10800104 	addi	r2,r2,4
 18102ac:	100b883a 	mov	r5,r2
 18102b0:	1809883a 	mov	r4,r3
 18102b4:	182b8f80 	call	182b8f8 <vListInsertEnd>
 18102b8:	00000606 	br	18102d4 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 18102bc:	e0bffe17 	ldw	r2,-8(fp)
 18102c0:	10800604 	addi	r2,r2,24
 18102c4:	100b883a 	mov	r5,r2
 18102c8:	01006134 	movhi	r4,388
 18102cc:	211cb304 	addi	r4,r4,29388
 18102d0:	182b8f80 	call	182b8f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 18102d4:	e0bffe17 	ldw	r2,-8(fp)
 18102d8:	10800b17 	ldw	r2,44(r2)
 18102dc:	d0e7d317 	ldw	r3,-24756(gp)
 18102e0:	18c00b17 	ldw	r3,44(r3)
 18102e4:	1880052e 	bgeu	r3,r2,18102fc <xTaskRemoveFromEventList+0xd8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 18102e8:	00800044 	movi	r2,1
 18102ec:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 18102f0:	00800044 	movi	r2,1
 18102f4:	d0a7dc15 	stw	r2,-24720(gp)
 18102f8:	00000106 	br	1810300 <xTaskRemoveFromEventList+0xdc>
	}
	else
	{
		xReturn = pdFALSE;
 18102fc:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 1810300:	e0bffd17 	ldw	r2,-12(fp)
}
 1810304:	e037883a 	mov	sp,fp
 1810308:	dfc00117 	ldw	ra,4(sp)
 181030c:	df000017 	ldw	fp,0(sp)
 1810310:	dec00204 	addi	sp,sp,8
 1810314:	f800283a 	ret

01810318 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 1810318:	defffb04 	addi	sp,sp,-20
 181031c:	dfc00415 	stw	ra,16(sp)
 1810320:	df000315 	stw	fp,12(sp)
 1810324:	df000304 	addi	fp,sp,12
 1810328:	e13ffe15 	stw	r4,-8(fp)
 181032c:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 1810330:	e0bfff17 	ldw	r2,-4(fp)
 1810334:	10e00034 	orhi	r3,r2,32768
 1810338:	e0bffe17 	ldw	r2,-8(fp)
 181033c:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1810340:	e0bffe17 	ldw	r2,-8(fp)
 1810344:	10800317 	ldw	r2,12(r2)
 1810348:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 181034c:	e13ffe17 	ldw	r4,-8(fp)
 1810350:	182ba5c0 	call	182ba5c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 1810354:	e0bffd17 	ldw	r2,-12(fp)
 1810358:	10800104 	addi	r2,r2,4
 181035c:	1009883a 	mov	r4,r2
 1810360:	182ba5c0 	call	182ba5c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 1810364:	e0bffd17 	ldw	r2,-12(fp)
 1810368:	10800b17 	ldw	r2,44(r2)
 181036c:	d0e7d917 	ldw	r3,-24732(gp)
 1810370:	1880032e 	bgeu	r3,r2,1810380 <vTaskRemoveFromUnorderedEventList+0x68>
 1810374:	e0bffd17 	ldw	r2,-12(fp)
 1810378:	10800b17 	ldw	r2,44(r2)
 181037c:	d0a7d915 	stw	r2,-24732(gp)
 1810380:	e0bffd17 	ldw	r2,-12(fp)
 1810384:	10800b17 	ldw	r2,44(r2)
 1810388:	10c00524 	muli	r3,r2,20
 181038c:	00806134 	movhi	r2,388
 1810390:	109c9004 	addi	r2,r2,29248
 1810394:	1887883a 	add	r3,r3,r2
 1810398:	e0bffd17 	ldw	r2,-12(fp)
 181039c:	10800104 	addi	r2,r2,4
 18103a0:	100b883a 	mov	r5,r2
 18103a4:	1809883a 	mov	r4,r3
 18103a8:	182b8f80 	call	182b8f8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 18103ac:	e0bffd17 	ldw	r2,-12(fp)
 18103b0:	10800b17 	ldw	r2,44(r2)
 18103b4:	d0e7d317 	ldw	r3,-24756(gp)
 18103b8:	18c00b17 	ldw	r3,44(r3)
 18103bc:	1880022e 	bgeu	r3,r2,18103c8 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 18103c0:	00800044 	movi	r2,1
 18103c4:	d0a7dc15 	stw	r2,-24720(gp)
	}
}
 18103c8:	0001883a 	nop
 18103cc:	e037883a 	mov	sp,fp
 18103d0:	dfc00117 	ldw	ra,4(sp)
 18103d4:	df000017 	ldw	fp,0(sp)
 18103d8:	dec00204 	addi	sp,sp,8
 18103dc:	f800283a 	ret

018103e0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 18103e0:	defffd04 	addi	sp,sp,-12
 18103e4:	dfc00215 	stw	ra,8(sp)
 18103e8:	df000115 	stw	fp,4(sp)
 18103ec:	df000104 	addi	fp,sp,4
 18103f0:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 18103f4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18103f8:	10000126 	beq	r2,zero,1810400 <vTaskSetTimeOutState+0x20>
 18103fc:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 1810400:	d0e7dd17 	ldw	r3,-24716(gp)
 1810404:	e0bfff17 	ldw	r2,-4(fp)
 1810408:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 181040c:	d0e7d817 	ldw	r3,-24736(gp)
 1810410:	e0bfff17 	ldw	r2,-4(fp)
 1810414:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 1810418:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 181041c:	10000126 	beq	r2,zero,1810424 <vTaskSetTimeOutState+0x44>
 1810420:	1810f900 	call	1810f90 <vTaskExitCritical>
}
 1810424:	0001883a 	nop
 1810428:	e037883a 	mov	sp,fp
 181042c:	dfc00117 	ldw	ra,4(sp)
 1810430:	df000017 	ldw	fp,0(sp)
 1810434:	dec00204 	addi	sp,sp,8
 1810438:	f800283a 	ret

0181043c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 181043c:	defffe04 	addi	sp,sp,-8
 1810440:	df000115 	stw	fp,4(sp)
 1810444:	df000104 	addi	fp,sp,4
 1810448:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 181044c:	d0e7dd17 	ldw	r3,-24716(gp)
 1810450:	e0bfff17 	ldw	r2,-4(fp)
 1810454:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 1810458:	d0e7d817 	ldw	r3,-24736(gp)
 181045c:	e0bfff17 	ldw	r2,-4(fp)
 1810460:	10c00115 	stw	r3,4(r2)
}
 1810464:	0001883a 	nop
 1810468:	e037883a 	mov	sp,fp
 181046c:	df000017 	ldw	fp,0(sp)
 1810470:	dec00104 	addi	sp,sp,4
 1810474:	f800283a 	ret

01810478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 1810478:	defff904 	addi	sp,sp,-28
 181047c:	dfc00615 	stw	ra,24(sp)
 1810480:	df000515 	stw	fp,20(sp)
 1810484:	df000504 	addi	fp,sp,20
 1810488:	e13ffe15 	stw	r4,-8(fp)
 181048c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 1810490:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1810494:	10000126 	beq	r2,zero,181049c <xTaskCheckForTimeOut+0x24>
 1810498:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 181049c:	d0a7d817 	ldw	r2,-24736(gp)
 18104a0:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 18104a4:	e0bffe17 	ldw	r2,-8(fp)
 18104a8:	10800117 	ldw	r2,4(r2)
 18104ac:	e0fffc17 	ldw	r3,-16(fp)
 18104b0:	1885c83a 	sub	r2,r3,r2
 18104b4:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 18104b8:	e0bfff17 	ldw	r2,-4(fp)
 18104bc:	10800017 	ldw	r2,0(r2)
 18104c0:	10bfffd8 	cmpnei	r2,r2,-1
 18104c4:	1000021e 	bne	r2,zero,18104d0 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 18104c8:	e03ffb15 	stw	zero,-20(fp)
 18104cc:	00001d06 	br	1810544 <xTaskCheckForTimeOut+0xcc>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 18104d0:	e0bffe17 	ldw	r2,-8(fp)
 18104d4:	10c00017 	ldw	r3,0(r2)
 18104d8:	d0a7dd17 	ldw	r2,-24716(gp)
 18104dc:	18800726 	beq	r3,r2,18104fc <xTaskCheckForTimeOut+0x84>
 18104e0:	e0bffe17 	ldw	r2,-8(fp)
 18104e4:	10800117 	ldw	r2,4(r2)
 18104e8:	e0fffc17 	ldw	r3,-16(fp)
 18104ec:	18800336 	bltu	r3,r2,18104fc <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 18104f0:	00800044 	movi	r2,1
 18104f4:	e0bffb15 	stw	r2,-20(fp)
 18104f8:	00001206 	br	1810544 <xTaskCheckForTimeOut+0xcc>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 18104fc:	e0bfff17 	ldw	r2,-4(fp)
 1810500:	10800017 	ldw	r2,0(r2)
 1810504:	e0fffd17 	ldw	r3,-12(fp)
 1810508:	18800a2e 	bgeu	r3,r2,1810534 <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 181050c:	e0bfff17 	ldw	r2,-4(fp)
 1810510:	10c00017 	ldw	r3,0(r2)
 1810514:	e0bffd17 	ldw	r2,-12(fp)
 1810518:	1887c83a 	sub	r3,r3,r2
 181051c:	e0bfff17 	ldw	r2,-4(fp)
 1810520:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 1810524:	e13ffe17 	ldw	r4,-8(fp)
 1810528:	181043c0 	call	181043c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 181052c:	e03ffb15 	stw	zero,-20(fp)
 1810530:	00000406 	br	1810544 <xTaskCheckForTimeOut+0xcc>
		}
		else
		{
			*pxTicksToWait = 0;
 1810534:	e0bfff17 	ldw	r2,-4(fp)
 1810538:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 181053c:	00800044 	movi	r2,1
 1810540:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 1810544:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1810548:	10000126 	beq	r2,zero,1810550 <xTaskCheckForTimeOut+0xd8>
 181054c:	1810f900 	call	1810f90 <vTaskExitCritical>

	return xReturn;
 1810550:	e0bffb17 	ldw	r2,-20(fp)
}
 1810554:	e037883a 	mov	sp,fp
 1810558:	dfc00117 	ldw	ra,4(sp)
 181055c:	df000017 	ldw	fp,0(sp)
 1810560:	dec00204 	addi	sp,sp,8
 1810564:	f800283a 	ret

01810568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 1810568:	deffff04 	addi	sp,sp,-4
 181056c:	df000015 	stw	fp,0(sp)
 1810570:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 1810574:	00800044 	movi	r2,1
 1810578:	d0a7dc15 	stw	r2,-24720(gp)
}
 181057c:	0001883a 	nop
 1810580:	e037883a 	mov	sp,fp
 1810584:	df000017 	ldw	fp,0(sp)
 1810588:	dec00104 	addi	sp,sp,4
 181058c:	f800283a 	ret

01810590 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 1810590:	defffc04 	addi	sp,sp,-16
 1810594:	df000315 	stw	fp,12(sp)
 1810598:	df000304 	addi	fp,sp,12
 181059c:	e13fff15 	stw	r4,-4(fp)
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 18105a0:	e0bfff17 	ldw	r2,-4(fp)
 18105a4:	10000626 	beq	r2,zero,18105c0 <uxTaskGetTaskNumber+0x30>
		{
			pxTCB = xTask;
 18105a8:	e0bfff17 	ldw	r2,-4(fp)
 18105ac:	e0bffe15 	stw	r2,-8(fp)
			uxReturn = pxTCB->uxTaskNumber;
 18105b0:	e0bffe17 	ldw	r2,-8(fp)
 18105b4:	10801917 	ldw	r2,100(r2)
 18105b8:	e0bffd15 	stw	r2,-12(fp)
 18105bc:	00000106 	br	18105c4 <uxTaskGetTaskNumber+0x34>
		}
		else
		{
			uxReturn = 0U;
 18105c0:	e03ffd15 	stw	zero,-12(fp)
		}

		return uxReturn;
 18105c4:	e0bffd17 	ldw	r2,-12(fp)
	}
 18105c8:	e037883a 	mov	sp,fp
 18105cc:	df000017 	ldw	fp,0(sp)
 18105d0:	dec00104 	addi	sp,sp,4
 18105d4:	f800283a 	ret

018105d8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 18105d8:	defffc04 	addi	sp,sp,-16
 18105dc:	df000315 	stw	fp,12(sp)
 18105e0:	df000304 	addi	fp,sp,12
 18105e4:	e13ffe15 	stw	r4,-8(fp)
 18105e8:	e17fff15 	stw	r5,-4(fp)
	TCB_t * pxTCB;

		if( xTask != NULL )
 18105ec:	e0bffe17 	ldw	r2,-8(fp)
 18105f0:	10000526 	beq	r2,zero,1810608 <vTaskSetTaskNumber+0x30>
		{
			pxTCB = xTask;
 18105f4:	e0bffe17 	ldw	r2,-8(fp)
 18105f8:	e0bffd15 	stw	r2,-12(fp)
			pxTCB->uxTaskNumber = uxHandle;
 18105fc:	e0bffd17 	ldw	r2,-12(fp)
 1810600:	e0ffff17 	ldw	r3,-4(fp)
 1810604:	10c01915 	stw	r3,100(r2)
		}
	}
 1810608:	0001883a 	nop
 181060c:	e037883a 	mov	sp,fp
 1810610:	df000017 	ldw	fp,0(sp)
 1810614:	dec00104 	addi	sp,sp,4
 1810618:	f800283a 	ret

0181061c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 181061c:	defffd04 	addi	sp,sp,-12
 1810620:	dfc00215 	stw	ra,8(sp)
 1810624:	df000115 	stw	fp,4(sp)
 1810628:	df000104 	addi	fp,sp,4
 181062c:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 1810630:	18106f00 	call	18106f0 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 1810634:	003ffe06 	br	1810630 <__ram_exceptions_end+0xff800340>

01810638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 1810638:	defffd04 	addi	sp,sp,-12
 181063c:	dfc00215 	stw	ra,8(sp)
 1810640:	df000115 	stw	fp,4(sp)
 1810644:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1810648:	e03fff15 	stw	zero,-4(fp)
 181064c:	00000a06 	br	1810678 <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 1810650:	e0bfff17 	ldw	r2,-4(fp)
 1810654:	10c00524 	muli	r3,r2,20
 1810658:	00806134 	movhi	r2,388
 181065c:	109c9004 	addi	r2,r2,29248
 1810660:	1885883a 	add	r2,r3,r2
 1810664:	1009883a 	mov	r4,r2
 1810668:	182b8640 	call	182b864 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 181066c:	e0bfff17 	ldw	r2,-4(fp)
 1810670:	10800044 	addi	r2,r2,1
 1810674:	e0bfff15 	stw	r2,-4(fp)
 1810678:	e0bfff17 	ldw	r2,-4(fp)
 181067c:	10800170 	cmpltui	r2,r2,5
 1810680:	103ff31e 	bne	r2,zero,1810650 <__ram_exceptions_end+0xff800360>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 1810684:	01006134 	movhi	r4,388
 1810688:	211ca904 	addi	r4,r4,29348
 181068c:	182b8640 	call	182b864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 1810690:	01006134 	movhi	r4,388
 1810694:	211cae04 	addi	r4,r4,29368
 1810698:	182b8640 	call	182b864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 181069c:	01006134 	movhi	r4,388
 18106a0:	211cb304 	addi	r4,r4,29388
 18106a4:	182b8640 	call	182b864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 18106a8:	01006134 	movhi	r4,388
 18106ac:	211cb804 	addi	r4,r4,29408
 18106b0:	182b8640 	call	182b864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 18106b4:	01006134 	movhi	r4,388
 18106b8:	211cbd04 	addi	r4,r4,29428
 18106bc:	182b8640 	call	182b864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 18106c0:	00806134 	movhi	r2,388
 18106c4:	109ca904 	addi	r2,r2,29348
 18106c8:	d0a7d415 	stw	r2,-24752(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 18106cc:	00806134 	movhi	r2,388
 18106d0:	109cae04 	addi	r2,r2,29368
 18106d4:	d0a7d515 	stw	r2,-24748(gp)
}
 18106d8:	0001883a 	nop
 18106dc:	e037883a 	mov	sp,fp
 18106e0:	dfc00117 	ldw	ra,4(sp)
 18106e4:	df000017 	ldw	fp,0(sp)
 18106e8:	dec00204 	addi	sp,sp,8
 18106ec:	f800283a 	ret

018106f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 18106f0:	defffd04 	addi	sp,sp,-12
 18106f4:	dfc00215 	stw	ra,8(sp)
 18106f8:	df000115 	stw	fp,4(sp)
 18106fc:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1810700:	00001706 	br	1810760 <prvCheckTasksWaitingTermination+0x70>
		{
			taskENTER_CRITICAL();
 1810704:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1810708:	10000126 	beq	r2,zero,1810710 <prvCheckTasksWaitingTermination+0x20>
 181070c:	1810f480 	call	1810f48 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1810710:	00806134 	movhi	r2,388
 1810714:	109cb804 	addi	r2,r2,29408
 1810718:	10800317 	ldw	r2,12(r2)
 181071c:	10800317 	ldw	r2,12(r2)
 1810720:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1810724:	e0bfff17 	ldw	r2,-4(fp)
 1810728:	10800104 	addi	r2,r2,4
 181072c:	1009883a 	mov	r4,r2
 1810730:	182ba5c0 	call	182ba5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 1810734:	d0a7d717 	ldw	r2,-24740(gp)
 1810738:	10bfffc4 	addi	r2,r2,-1
 181073c:	d0a7d715 	stw	r2,-24740(gp)
				--uxDeletedTasksWaitingCleanUp;
 1810740:	d0a7d617 	ldw	r2,-24744(gp)
 1810744:	10bfffc4 	addi	r2,r2,-1
 1810748:	d0a7d615 	stw	r2,-24744(gp)
			}
			taskEXIT_CRITICAL();
 181074c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1810750:	10000126 	beq	r2,zero,1810758 <prvCheckTasksWaitingTermination+0x68>
 1810754:	1810f900 	call	1810f90 <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 1810758:	e13fff17 	ldw	r4,-4(fp)
 181075c:	1810ac00 	call	1810ac0 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1810760:	d0a7d617 	ldw	r2,-24744(gp)
 1810764:	103fe71e 	bne	r2,zero,1810704 <__ram_exceptions_end+0xff800414>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 1810768:	0001883a 	nop
 181076c:	e037883a 	mov	sp,fp
 1810770:	dfc00117 	ldw	ra,4(sp)
 1810774:	df000017 	ldw	fp,0(sp)
 1810778:	dec00204 	addi	sp,sp,8
 181077c:	f800283a 	ret

01810780 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 1810780:	defff904 	addi	sp,sp,-28
 1810784:	dfc00615 	stw	ra,24(sp)
 1810788:	df000515 	stw	fp,20(sp)
 181078c:	df000504 	addi	fp,sp,20
 1810790:	e13ffc15 	stw	r4,-16(fp)
 1810794:	e17ffd15 	stw	r5,-12(fp)
 1810798:	e1bffe15 	stw	r6,-8(fp)
 181079c:	e1ffff15 	stw	r7,-4(fp)
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 18107a0:	e0bffc17 	ldw	r2,-16(fp)
 18107a4:	1000021e 	bne	r2,zero,18107b0 <vTaskGetInfo+0x30>
 18107a8:	d0a7d317 	ldw	r2,-24756(gp)
 18107ac:	00000106 	br	18107b4 <vTaskGetInfo+0x34>
 18107b0:	e0bffc17 	ldw	r2,-16(fp)
 18107b4:	e0bffb15 	stw	r2,-20(fp)

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 18107b8:	e0bffd17 	ldw	r2,-12(fp)
 18107bc:	e0fffb17 	ldw	r3,-20(fp)
 18107c0:	10c00015 	stw	r3,0(r2)
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 18107c4:	e0bffb17 	ldw	r2,-20(fp)
 18107c8:	10c00d04 	addi	r3,r2,52
 18107cc:	e0bffd17 	ldw	r2,-12(fp)
 18107d0:	10c00115 	stw	r3,4(r2)
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 18107d4:	e0bffb17 	ldw	r2,-20(fp)
 18107d8:	10c00b17 	ldw	r3,44(r2)
 18107dc:	e0bffd17 	ldw	r2,-12(fp)
 18107e0:	10c00415 	stw	r3,16(r2)
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 18107e4:	e0bffb17 	ldw	r2,-20(fp)
 18107e8:	10c00c17 	ldw	r3,48(r2)
 18107ec:	e0bffd17 	ldw	r2,-12(fp)
 18107f0:	10c00715 	stw	r3,28(r2)
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 18107f4:	e0bffb17 	ldw	r2,-20(fp)
 18107f8:	10c01817 	ldw	r3,96(r2)
 18107fc:	e0bffd17 	ldw	r2,-12(fp)
 1810800:	10c00215 	stw	r3,8(r2)

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 1810804:	e0bffb17 	ldw	r2,-20(fp)
 1810808:	10c01a17 	ldw	r3,104(r2)
 181080c:	e0bffd17 	ldw	r2,-12(fp)
 1810810:	10c00515 	stw	r3,20(r2)
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 1810814:	e0bffd17 	ldw	r2,-12(fp)
 1810818:	10000615 	stw	zero,24(r2)
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 181081c:	e0bfff17 	ldw	r2,-4(fp)
 1810820:	10800160 	cmpeqi	r2,r2,5
 1810824:	1000151e 	bne	r2,zero,181087c <vTaskGetInfo+0xfc>
		{
			if( pxTCB == pxCurrentTCB )
 1810828:	d0a7d317 	ldw	r2,-24756(gp)
 181082c:	e0fffb17 	ldw	r3,-20(fp)
 1810830:	1880031e 	bne	r3,r2,1810840 <vTaskGetInfo+0xc0>
			{
				pxTaskStatus->eCurrentState = eRunning;
 1810834:	e0bffd17 	ldw	r2,-12(fp)
 1810838:	10000315 	stw	zero,12(r2)
 181083c:	00001406 	br	1810890 <vTaskGetInfo+0x110>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 1810840:	e0bffd17 	ldw	r2,-12(fp)
 1810844:	e0ffff17 	ldw	r3,-4(fp)
 1810848:	10c00315 	stw	r3,12(r2)
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 181084c:	e0bfff17 	ldw	r2,-4(fp)
 1810850:	108000d8 	cmpnei	r2,r2,3
 1810854:	10000e1e 	bne	r2,zero,1810890 <vTaskGetInfo+0x110>
					{
						vTaskSuspendAll();
 1810858:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 181085c:	e0bffb17 	ldw	r2,-20(fp)
 1810860:	10800a17 	ldw	r2,40(r2)
 1810864:	10000326 	beq	r2,zero,1810874 <vTaskGetInfo+0xf4>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 1810868:	e0bffd17 	ldw	r2,-12(fp)
 181086c:	00c00084 	movi	r3,2
 1810870:	10c00315 	stw	r3,12(r2)
							}
						}
						( void ) xTaskResumeAll();
 1810874:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 1810878:	00000506 	br	1810890 <vTaskGetInfo+0x110>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 181087c:	e13ffb17 	ldw	r4,-20(fp)
 1810880:	180f2340 	call	180f234 <eTaskGetState>
 1810884:	1007883a 	mov	r3,r2
 1810888:	e0bffd17 	ldw	r2,-12(fp)
 181088c:	10c00315 	stw	r3,12(r2)
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 1810890:	e0bffe17 	ldw	r2,-8(fp)
 1810894:	10000826 	beq	r2,zero,18108b8 <vTaskGetInfo+0x138>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 1810898:	e0bffb17 	ldw	r2,-20(fp)
 181089c:	10800c17 	ldw	r2,48(r2)
 18108a0:	1009883a 	mov	r4,r2
 18108a4:	1810a000 	call	1810a00 <prvTaskCheckFreeStackSpace>
 18108a8:	1007883a 	mov	r3,r2
 18108ac:	e0bffd17 	ldw	r2,-12(fp)
 18108b0:	10c00815 	stw	r3,32(r2)
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 18108b4:	00000206 	br	18108c0 <vTaskGetInfo+0x140>
			}
			#endif
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
 18108b8:	e0bffd17 	ldw	r2,-12(fp)
 18108bc:	10000815 	stw	zero,32(r2)
		}
	}
 18108c0:	0001883a 	nop
 18108c4:	e037883a 	mov	sp,fp
 18108c8:	dfc00117 	ldw	ra,4(sp)
 18108cc:	df000017 	ldw	fp,0(sp)
 18108d0:	dec00204 	addi	sp,sp,8
 18108d4:	f800283a 	ret

018108d8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 18108d8:	defff604 	addi	sp,sp,-40
 18108dc:	dfc00915 	stw	ra,36(sp)
 18108e0:	df000815 	stw	fp,32(sp)
 18108e4:	df000804 	addi	fp,sp,32
 18108e8:	e13ffd15 	stw	r4,-12(fp)
 18108ec:	e17ffe15 	stw	r5,-8(fp)
 18108f0:	e1bfff15 	stw	r6,-4(fp)
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 18108f4:	e03ff815 	stw	zero,-32(fp)

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 18108f8:	e0bffe17 	ldw	r2,-8(fp)
 18108fc:	10800017 	ldw	r2,0(r2)
 1810900:	10003926 	beq	r2,zero,18109e8 <prvListTasksWithinSingleList+0x110>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1810904:	e0bffe17 	ldw	r2,-8(fp)
 1810908:	e0bff915 	stw	r2,-28(fp)
 181090c:	e0bff917 	ldw	r2,-28(fp)
 1810910:	10800117 	ldw	r2,4(r2)
 1810914:	10c00117 	ldw	r3,4(r2)
 1810918:	e0bff917 	ldw	r2,-28(fp)
 181091c:	10c00115 	stw	r3,4(r2)
 1810920:	e0bff917 	ldw	r2,-28(fp)
 1810924:	10c00117 	ldw	r3,4(r2)
 1810928:	e0bff917 	ldw	r2,-28(fp)
 181092c:	10800204 	addi	r2,r2,8
 1810930:	1880051e 	bne	r3,r2,1810948 <prvListTasksWithinSingleList+0x70>
 1810934:	e0bff917 	ldw	r2,-28(fp)
 1810938:	10800117 	ldw	r2,4(r2)
 181093c:	10c00117 	ldw	r3,4(r2)
 1810940:	e0bff917 	ldw	r2,-28(fp)
 1810944:	10c00115 	stw	r3,4(r2)
 1810948:	e0bff917 	ldw	r2,-28(fp)
 181094c:	10800117 	ldw	r2,4(r2)
 1810950:	10800317 	ldw	r2,12(r2)
 1810954:	e0bffa15 	stw	r2,-24(fp)
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1810958:	e0bffe17 	ldw	r2,-8(fp)
 181095c:	e0bffb15 	stw	r2,-20(fp)
 1810960:	e0bffb17 	ldw	r2,-20(fp)
 1810964:	10800117 	ldw	r2,4(r2)
 1810968:	10c00117 	ldw	r3,4(r2)
 181096c:	e0bffb17 	ldw	r2,-20(fp)
 1810970:	10c00115 	stw	r3,4(r2)
 1810974:	e0bffb17 	ldw	r2,-20(fp)
 1810978:	10c00117 	ldw	r3,4(r2)
 181097c:	e0bffb17 	ldw	r2,-20(fp)
 1810980:	10800204 	addi	r2,r2,8
 1810984:	1880051e 	bne	r3,r2,181099c <prvListTasksWithinSingleList+0xc4>
 1810988:	e0bffb17 	ldw	r2,-20(fp)
 181098c:	10800117 	ldw	r2,4(r2)
 1810990:	10c00117 	ldw	r3,4(r2)
 1810994:	e0bffb17 	ldw	r2,-20(fp)
 1810998:	10c00115 	stw	r3,4(r2)
 181099c:	e0bffb17 	ldw	r2,-20(fp)
 18109a0:	10800117 	ldw	r2,4(r2)
 18109a4:	10800317 	ldw	r2,12(r2)
 18109a8:	e0bffc15 	stw	r2,-16(fp)
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 18109ac:	e0bff817 	ldw	r2,-32(fp)
 18109b0:	10800924 	muli	r2,r2,36
 18109b4:	e0fffd17 	ldw	r3,-12(fp)
 18109b8:	1885883a 	add	r2,r3,r2
 18109bc:	e1ffff17 	ldw	r7,-4(fp)
 18109c0:	01800044 	movi	r6,1
 18109c4:	100b883a 	mov	r5,r2
 18109c8:	e13ffc17 	ldw	r4,-16(fp)
 18109cc:	18107800 	call	1810780 <vTaskGetInfo>
				uxTask++;
 18109d0:	e0bff817 	ldw	r2,-32(fp)
 18109d4:	10800044 	addi	r2,r2,1
 18109d8:	e0bff815 	stw	r2,-32(fp)
			} while( pxNextTCB != pxFirstTCB );
 18109dc:	e0fffc17 	ldw	r3,-16(fp)
 18109e0:	e0bffa17 	ldw	r2,-24(fp)
 18109e4:	18bfdc1e 	bne	r3,r2,1810958 <__ram_exceptions_end+0xff800668>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 18109e8:	e0bff817 	ldw	r2,-32(fp)
	}
 18109ec:	e037883a 	mov	sp,fp
 18109f0:	dfc00117 	ldw	ra,4(sp)
 18109f4:	df000017 	ldw	fp,0(sp)
 18109f8:	dec00204 	addi	sp,sp,8
 18109fc:	f800283a 	ret

01810a00 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 1810a00:	defffd04 	addi	sp,sp,-12
 1810a04:	df000215 	stw	fp,8(sp)
 1810a08:	df000204 	addi	fp,sp,8
 1810a0c:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 1810a10:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1810a14:	00000606 	br	1810a30 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 1810a18:	e0bfff17 	ldw	r2,-4(fp)
 1810a1c:	10800044 	addi	r2,r2,1
 1810a20:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 1810a24:	e0bffe17 	ldw	r2,-8(fp)
 1810a28:	10800044 	addi	r2,r2,1
 1810a2c:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1810a30:	e0bfff17 	ldw	r2,-4(fp)
 1810a34:	10800003 	ldbu	r2,0(r2)
 1810a38:	10803fcc 	andi	r2,r2,255
 1810a3c:	10802960 	cmpeqi	r2,r2,165
 1810a40:	103ff51e 	bne	r2,zero,1810a18 <__ram_exceptions_end+0xff800728>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 1810a44:	e0bffe17 	ldw	r2,-8(fp)
 1810a48:	1004d0ba 	srli	r2,r2,2
 1810a4c:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 1810a50:	e0bffe17 	ldw	r2,-8(fp)
	}
 1810a54:	e037883a 	mov	sp,fp
 1810a58:	df000017 	ldw	fp,0(sp)
 1810a5c:	dec00104 	addi	sp,sp,4
 1810a60:	f800283a 	ret

01810a64 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 1810a64:	defffa04 	addi	sp,sp,-24
 1810a68:	dfc00515 	stw	ra,20(sp)
 1810a6c:	df000415 	stw	fp,16(sp)
 1810a70:	df000404 	addi	fp,sp,16
 1810a74:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 1810a78:	e0bfff17 	ldw	r2,-4(fp)
 1810a7c:	1000021e 	bne	r2,zero,1810a88 <uxTaskGetStackHighWaterMark+0x24>
 1810a80:	d0a7d317 	ldw	r2,-24756(gp)
 1810a84:	00000106 	br	1810a8c <uxTaskGetStackHighWaterMark+0x28>
 1810a88:	e0bfff17 	ldw	r2,-4(fp)
 1810a8c:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 1810a90:	e0bffc17 	ldw	r2,-16(fp)
 1810a94:	10800c17 	ldw	r2,48(r2)
 1810a98:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 1810a9c:	e13ffd17 	ldw	r4,-12(fp)
 1810aa0:	1810a000 	call	1810a00 <prvTaskCheckFreeStackSpace>
 1810aa4:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 1810aa8:	e0bffe17 	ldw	r2,-8(fp)
	}
 1810aac:	e037883a 	mov	sp,fp
 1810ab0:	dfc00117 	ldw	ra,4(sp)
 1810ab4:	df000017 	ldw	fp,0(sp)
 1810ab8:	dec00204 	addi	sp,sp,8
 1810abc:	f800283a 	ret

01810ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 1810ac0:	defffd04 	addi	sp,sp,-12
 1810ac4:	dfc00215 	stw	ra,8(sp)
 1810ac8:	df000115 	stw	fp,4(sp)
 1810acc:	df000104 	addi	fp,sp,4
 1810ad0:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 1810ad4:	e0bfff17 	ldw	r2,-4(fp)
 1810ad8:	10800c17 	ldw	r2,48(r2)
 1810adc:	1009883a 	mov	r4,r2
 1810ae0:	182b8200 	call	182b820 <vPortFree>
			vPortFree( pxTCB );
 1810ae4:	e13fff17 	ldw	r4,-4(fp)
 1810ae8:	182b8200 	call	182b820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 1810aec:	0001883a 	nop
 1810af0:	e037883a 	mov	sp,fp
 1810af4:	dfc00117 	ldw	ra,4(sp)
 1810af8:	df000017 	ldw	fp,0(sp)
 1810afc:	dec00204 	addi	sp,sp,8
 1810b00:	f800283a 	ret

01810b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 1810b04:	defffe04 	addi	sp,sp,-8
 1810b08:	df000115 	stw	fp,4(sp)
 1810b0c:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1810b10:	d0a7d417 	ldw	r2,-24752(gp)
 1810b14:	10800017 	ldw	r2,0(r2)
 1810b18:	1000031e 	bne	r2,zero,1810b28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 1810b1c:	00bfffc4 	movi	r2,-1
 1810b20:	d0a7df15 	stw	r2,-24708(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 1810b24:	00000706 	br	1810b44 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1810b28:	d0a7d417 	ldw	r2,-24752(gp)
 1810b2c:	10800317 	ldw	r2,12(r2)
 1810b30:	10800317 	ldw	r2,12(r2)
 1810b34:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 1810b38:	e0bfff17 	ldw	r2,-4(fp)
 1810b3c:	10800117 	ldw	r2,4(r2)
 1810b40:	d0a7df15 	stw	r2,-24708(gp)
	}
}
 1810b44:	0001883a 	nop
 1810b48:	e037883a 	mov	sp,fp
 1810b4c:	df000017 	ldw	fp,0(sp)
 1810b50:	dec00104 	addi	sp,sp,4
 1810b54:	f800283a 	ret

01810b58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 1810b58:	defffe04 	addi	sp,sp,-8
 1810b5c:	df000115 	stw	fp,4(sp)
 1810b60:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 1810b64:	d0a7d317 	ldw	r2,-24756(gp)
 1810b68:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 1810b6c:	e0bfff17 	ldw	r2,-4(fp)
	}
 1810b70:	e037883a 	mov	sp,fp
 1810b74:	df000017 	ldw	fp,0(sp)
 1810b78:	dec00104 	addi	sp,sp,4
 1810b7c:	f800283a 	ret

01810b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 1810b80:	defffe04 	addi	sp,sp,-8
 1810b84:	df000115 	stw	fp,4(sp)
 1810b88:	df000104 	addi	fp,sp,4
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 1810b8c:	d0a7da17 	ldw	r2,-24728(gp)
 1810b90:	1000031e 	bne	r2,zero,1810ba0 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 1810b94:	00800044 	movi	r2,1
 1810b98:	e0bfff15 	stw	r2,-4(fp)
 1810b9c:	00000606 	br	1810bb8 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1810ba0:	d0a7e117 	ldw	r2,-24700(gp)
 1810ba4:	1000031e 	bne	r2,zero,1810bb4 <xTaskGetSchedulerState+0x34>
			{
				xReturn = taskSCHEDULER_RUNNING;
 1810ba8:	00800084 	movi	r2,2
 1810bac:	e0bfff15 	stw	r2,-4(fp)
 1810bb0:	00000106 	br	1810bb8 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 1810bb4:	e03fff15 	stw	zero,-4(fp)
			}
		}

		return xReturn;
 1810bb8:	e0bfff17 	ldw	r2,-4(fp)
	}
 1810bbc:	e037883a 	mov	sp,fp
 1810bc0:	df000017 	ldw	fp,0(sp)
 1810bc4:	dec00104 	addi	sp,sp,4
 1810bc8:	f800283a 	ret

01810bcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 1810bcc:	defffb04 	addi	sp,sp,-20
 1810bd0:	dfc00415 	stw	ra,16(sp)
 1810bd4:	df000315 	stw	fp,12(sp)
 1810bd8:	df000304 	addi	fp,sp,12
 1810bdc:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 1810be0:	e0bfff17 	ldw	r2,-4(fp)
 1810be4:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1810be8:	e03ffd15 	stw	zero,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 1810bec:	e0bfff17 	ldw	r2,-4(fp)
 1810bf0:	10004026 	beq	r2,zero,1810cf4 <xTaskPriorityInherit+0x128>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 1810bf4:	e0bffe17 	ldw	r2,-8(fp)
 1810bf8:	10c00b17 	ldw	r3,44(r2)
 1810bfc:	d0a7d317 	ldw	r2,-24756(gp)
 1810c00:	10800b17 	ldw	r2,44(r2)
 1810c04:	1880342e 	bgeu	r3,r2,1810cd8 <xTaskPriorityInherit+0x10c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1810c08:	e0bffe17 	ldw	r2,-8(fp)
 1810c0c:	10800617 	ldw	r2,24(r2)
 1810c10:	10000616 	blt	r2,zero,1810c2c <xTaskPriorityInherit+0x60>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1810c14:	d0a7d317 	ldw	r2,-24756(gp)
 1810c18:	10800b17 	ldw	r2,44(r2)
 1810c1c:	00c00144 	movi	r3,5
 1810c20:	1887c83a 	sub	r3,r3,r2
 1810c24:	e0bffe17 	ldw	r2,-8(fp)
 1810c28:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 1810c2c:	e0bffe17 	ldw	r2,-8(fp)
 1810c30:	10c00517 	ldw	r3,20(r2)
 1810c34:	e0bffe17 	ldw	r2,-8(fp)
 1810c38:	10800b17 	ldw	r2,44(r2)
 1810c3c:	11000524 	muli	r4,r2,20
 1810c40:	00806134 	movhi	r2,388
 1810c44:	109c9004 	addi	r2,r2,29248
 1810c48:	2085883a 	add	r2,r4,r2
 1810c4c:	18801b1e 	bne	r3,r2,1810cbc <xTaskPriorityInherit+0xf0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1810c50:	e0bffe17 	ldw	r2,-8(fp)
 1810c54:	10800104 	addi	r2,r2,4
 1810c58:	1009883a 	mov	r4,r2
 1810c5c:	182ba5c0 	call	182ba5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1810c60:	d0a7d317 	ldw	r2,-24756(gp)
 1810c64:	10c00b17 	ldw	r3,44(r2)
 1810c68:	e0bffe17 	ldw	r2,-8(fp)
 1810c6c:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 1810c70:	e0bffe17 	ldw	r2,-8(fp)
 1810c74:	10800b17 	ldw	r2,44(r2)
 1810c78:	d0e7d917 	ldw	r3,-24732(gp)
 1810c7c:	1880032e 	bgeu	r3,r2,1810c8c <xTaskPriorityInherit+0xc0>
 1810c80:	e0bffe17 	ldw	r2,-8(fp)
 1810c84:	10800b17 	ldw	r2,44(r2)
 1810c88:	d0a7d915 	stw	r2,-24732(gp)
 1810c8c:	e0bffe17 	ldw	r2,-8(fp)
 1810c90:	10800b17 	ldw	r2,44(r2)
 1810c94:	10c00524 	muli	r3,r2,20
 1810c98:	00806134 	movhi	r2,388
 1810c9c:	109c9004 	addi	r2,r2,29248
 1810ca0:	1887883a 	add	r3,r3,r2
 1810ca4:	e0bffe17 	ldw	r2,-8(fp)
 1810ca8:	10800104 	addi	r2,r2,4
 1810cac:	100b883a 	mov	r5,r2
 1810cb0:	1809883a 	mov	r4,r3
 1810cb4:	182b8f80 	call	182b8f8 <vListInsertEnd>
 1810cb8:	00000406 	br	1810ccc <xTaskPriorityInherit+0x100>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1810cbc:	d0a7d317 	ldw	r2,-24756(gp)
 1810cc0:	10c00b17 	ldw	r3,44(r2)
 1810cc4:	e0bffe17 	ldw	r2,-8(fp)
 1810cc8:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 1810ccc:	00800044 	movi	r2,1
 1810cd0:	e0bffd15 	stw	r2,-12(fp)
 1810cd4:	00000706 	br	1810cf4 <xTaskPriorityInherit+0x128>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 1810cd8:	e0bffe17 	ldw	r2,-8(fp)
 1810cdc:	10c01a17 	ldw	r3,104(r2)
 1810ce0:	d0a7d317 	ldw	r2,-24756(gp)
 1810ce4:	10800b17 	ldw	r2,44(r2)
 1810ce8:	1880022e 	bgeu	r3,r2,1810cf4 <xTaskPriorityInherit+0x128>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 1810cec:	00800044 	movi	r2,1
 1810cf0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1810cf4:	e0bffd17 	ldw	r2,-12(fp)
	}
 1810cf8:	e037883a 	mov	sp,fp
 1810cfc:	dfc00117 	ldw	ra,4(sp)
 1810d00:	df000017 	ldw	fp,0(sp)
 1810d04:	dec00204 	addi	sp,sp,8
 1810d08:	f800283a 	ret

01810d0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 1810d0c:	defffb04 	addi	sp,sp,-20
 1810d10:	dfc00415 	stw	ra,16(sp)
 1810d14:	df000315 	stw	fp,12(sp)
 1810d18:	df000304 	addi	fp,sp,12
 1810d1c:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1810d20:	e0bfff17 	ldw	r2,-4(fp)
 1810d24:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1810d28:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 1810d2c:	e0bfff17 	ldw	r2,-4(fp)
 1810d30:	10002f26 	beq	r2,zero,1810df0 <xTaskPriorityDisinherit+0xe4>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 1810d34:	e0bffe17 	ldw	r2,-8(fp)
 1810d38:	10801b17 	ldw	r2,108(r2)
 1810d3c:	10ffffc4 	addi	r3,r2,-1
 1810d40:	e0bffe17 	ldw	r2,-8(fp)
 1810d44:	10c01b15 	stw	r3,108(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 1810d48:	e0bffe17 	ldw	r2,-8(fp)
 1810d4c:	10c00b17 	ldw	r3,44(r2)
 1810d50:	e0bffe17 	ldw	r2,-8(fp)
 1810d54:	10801a17 	ldw	r2,104(r2)
 1810d58:	18802526 	beq	r3,r2,1810df0 <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 1810d5c:	e0bffe17 	ldw	r2,-8(fp)
 1810d60:	10801b17 	ldw	r2,108(r2)
 1810d64:	1000221e 	bne	r2,zero,1810df0 <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1810d68:	e0bffe17 	ldw	r2,-8(fp)
 1810d6c:	10800104 	addi	r2,r2,4
 1810d70:	1009883a 	mov	r4,r2
 1810d74:	182ba5c0 	call	182ba5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 1810d78:	e0bffe17 	ldw	r2,-8(fp)
 1810d7c:	10c01a17 	ldw	r3,104(r2)
 1810d80:	e0bffe17 	ldw	r2,-8(fp)
 1810d84:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1810d88:	e0bffe17 	ldw	r2,-8(fp)
 1810d8c:	10800b17 	ldw	r2,44(r2)
 1810d90:	00c00144 	movi	r3,5
 1810d94:	1887c83a 	sub	r3,r3,r2
 1810d98:	e0bffe17 	ldw	r2,-8(fp)
 1810d9c:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 1810da0:	e0bffe17 	ldw	r2,-8(fp)
 1810da4:	10800b17 	ldw	r2,44(r2)
 1810da8:	d0e7d917 	ldw	r3,-24732(gp)
 1810dac:	1880032e 	bgeu	r3,r2,1810dbc <xTaskPriorityDisinherit+0xb0>
 1810db0:	e0bffe17 	ldw	r2,-8(fp)
 1810db4:	10800b17 	ldw	r2,44(r2)
 1810db8:	d0a7d915 	stw	r2,-24732(gp)
 1810dbc:	e0bffe17 	ldw	r2,-8(fp)
 1810dc0:	10800b17 	ldw	r2,44(r2)
 1810dc4:	10c00524 	muli	r3,r2,20
 1810dc8:	00806134 	movhi	r2,388
 1810dcc:	109c9004 	addi	r2,r2,29248
 1810dd0:	1887883a 	add	r3,r3,r2
 1810dd4:	e0bffe17 	ldw	r2,-8(fp)
 1810dd8:	10800104 	addi	r2,r2,4
 1810ddc:	100b883a 	mov	r5,r2
 1810de0:	1809883a 	mov	r4,r3
 1810de4:	182b8f80 	call	182b8f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 1810de8:	00800044 	movi	r2,1
 1810dec:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1810df0:	e0bffd17 	ldw	r2,-12(fp)
	}
 1810df4:	e037883a 	mov	sp,fp
 1810df8:	dfc00117 	ldw	ra,4(sp)
 1810dfc:	df000017 	ldw	fp,0(sp)
 1810e00:	dec00204 	addi	sp,sp,8
 1810e04:	f800283a 	ret

01810e08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 1810e08:	defff804 	addi	sp,sp,-32
 1810e0c:	dfc00715 	stw	ra,28(sp)
 1810e10:	df000615 	stw	fp,24(sp)
 1810e14:	df000604 	addi	fp,sp,24
 1810e18:	e13ffe15 	stw	r4,-8(fp)
 1810e1c:	e17fff15 	stw	r5,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1810e20:	e0bffe17 	ldw	r2,-8(fp)
 1810e24:	e0bffb15 	stw	r2,-20(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 1810e28:	00800044 	movi	r2,1
 1810e2c:	e0bffc15 	stw	r2,-16(fp)

		if( pxMutexHolder != NULL )
 1810e30:	e0bffe17 	ldw	r2,-8(fp)
 1810e34:	10003e26 	beq	r2,zero,1810f30 <vTaskPriorityDisinheritAfterTimeout+0x128>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 1810e38:	e0bffb17 	ldw	r2,-20(fp)
 1810e3c:	10c01a17 	ldw	r3,104(r2)
 1810e40:	e0bfff17 	ldw	r2,-4(fp)
 1810e44:	1880032e 	bgeu	r3,r2,1810e54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 1810e48:	e0bfff17 	ldw	r2,-4(fp)
 1810e4c:	e0bffa15 	stw	r2,-24(fp)
 1810e50:	00000306 	br	1810e60 <vTaskPriorityDisinheritAfterTimeout+0x58>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 1810e54:	e0bffb17 	ldw	r2,-20(fp)
 1810e58:	10801a17 	ldw	r2,104(r2)
 1810e5c:	e0bffa15 	stw	r2,-24(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 1810e60:	e0bffb17 	ldw	r2,-20(fp)
 1810e64:	10c00b17 	ldw	r3,44(r2)
 1810e68:	e0bffa17 	ldw	r2,-24(fp)
 1810e6c:	18803026 	beq	r3,r2,1810f30 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 1810e70:	e0bffb17 	ldw	r2,-20(fp)
 1810e74:	10c01b17 	ldw	r3,108(r2)
 1810e78:	e0bffc17 	ldw	r2,-16(fp)
 1810e7c:	18802c1e 	bne	r3,r2,1810f30 <vTaskPriorityDisinheritAfterTimeout+0x128>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1810e80:	e0bffb17 	ldw	r2,-20(fp)
 1810e84:	10800b17 	ldw	r2,44(r2)
 1810e88:	e0bffd15 	stw	r2,-12(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 1810e8c:	e0bffb17 	ldw	r2,-20(fp)
 1810e90:	e0fffa17 	ldw	r3,-24(fp)
 1810e94:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1810e98:	e0bffb17 	ldw	r2,-20(fp)
 1810e9c:	10800617 	ldw	r2,24(r2)
 1810ea0:	10000516 	blt	r2,zero,1810eb8 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1810ea4:	00c00144 	movi	r3,5
 1810ea8:	e0bffa17 	ldw	r2,-24(fp)
 1810eac:	1887c83a 	sub	r3,r3,r2
 1810eb0:	e0bffb17 	ldw	r2,-20(fp)
 1810eb4:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 1810eb8:	e0bffb17 	ldw	r2,-20(fp)
 1810ebc:	10c00517 	ldw	r3,20(r2)
 1810ec0:	e0bffd17 	ldw	r2,-12(fp)
 1810ec4:	11000524 	muli	r4,r2,20
 1810ec8:	00806134 	movhi	r2,388
 1810ecc:	109c9004 	addi	r2,r2,29248
 1810ed0:	2085883a 	add	r2,r4,r2
 1810ed4:	1880161e 	bne	r3,r2,1810f30 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1810ed8:	e0bffb17 	ldw	r2,-20(fp)
 1810edc:	10800104 	addi	r2,r2,4
 1810ee0:	1009883a 	mov	r4,r2
 1810ee4:	182ba5c0 	call	182ba5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 1810ee8:	e0bffb17 	ldw	r2,-20(fp)
 1810eec:	10800b17 	ldw	r2,44(r2)
 1810ef0:	d0e7d917 	ldw	r3,-24732(gp)
 1810ef4:	1880032e 	bgeu	r3,r2,1810f04 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 1810ef8:	e0bffb17 	ldw	r2,-20(fp)
 1810efc:	10800b17 	ldw	r2,44(r2)
 1810f00:	d0a7d915 	stw	r2,-24732(gp)
 1810f04:	e0bffb17 	ldw	r2,-20(fp)
 1810f08:	10800b17 	ldw	r2,44(r2)
 1810f0c:	10c00524 	muli	r3,r2,20
 1810f10:	00806134 	movhi	r2,388
 1810f14:	109c9004 	addi	r2,r2,29248
 1810f18:	1887883a 	add	r3,r3,r2
 1810f1c:	e0bffb17 	ldw	r2,-20(fp)
 1810f20:	10800104 	addi	r2,r2,4
 1810f24:	100b883a 	mov	r5,r2
 1810f28:	1809883a 	mov	r4,r3
 1810f2c:	182b8f80 	call	182b8f8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1810f30:	0001883a 	nop
 1810f34:	e037883a 	mov	sp,fp
 1810f38:	dfc00117 	ldw	ra,4(sp)
 1810f3c:	df000017 	ldw	fp,0(sp)
 1810f40:	dec00204 	addi	sp,sp,8
 1810f44:	f800283a 	ret

01810f48 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 1810f48:	defffe04 	addi	sp,sp,-8
 1810f4c:	dfc00115 	stw	ra,4(sp)
 1810f50:	df000015 	stw	fp,0(sp)
 1810f54:	d839883a 	mov	fp,sp
		portDISABLE_INTERRUPTS();
 1810f58:	182bb200 	call	182bb20 <enh_alt_irq_disable_all>

		if( xSchedulerRunning != pdFALSE )
 1810f5c:	d0a7da17 	ldw	r2,-24728(gp)
 1810f60:	10000526 	beq	r2,zero,1810f78 <vTaskEnterCritical+0x30>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 1810f64:	d0a7d317 	ldw	r2,-24756(gp)
 1810f68:	10c01717 	ldw	r3,92(r2)
 1810f6c:	18c00044 	addi	r3,r3,1
 1810f70:	10c01715 	stw	r3,92(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 1810f74:	d0a7d317 	ldw	r2,-24756(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1810f78:	0001883a 	nop
 1810f7c:	e037883a 	mov	sp,fp
 1810f80:	dfc00117 	ldw	ra,4(sp)
 1810f84:	df000017 	ldw	fp,0(sp)
 1810f88:	dec00204 	addi	sp,sp,8
 1810f8c:	f800283a 	ret

01810f90 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 1810f90:	defffe04 	addi	sp,sp,-8
 1810f94:	dfc00115 	stw	ra,4(sp)
 1810f98:	df000015 	stw	fp,0(sp)
 1810f9c:	d839883a 	mov	fp,sp
		if( xSchedulerRunning != pdFALSE )
 1810fa0:	d0a7da17 	ldw	r2,-24728(gp)
 1810fa4:	10000b26 	beq	r2,zero,1810fd4 <vTaskExitCritical+0x44>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 1810fa8:	d0a7d317 	ldw	r2,-24756(gp)
 1810fac:	10801717 	ldw	r2,92(r2)
 1810fb0:	10000826 	beq	r2,zero,1810fd4 <vTaskExitCritical+0x44>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 1810fb4:	d0a7d317 	ldw	r2,-24756(gp)
 1810fb8:	10c01717 	ldw	r3,92(r2)
 1810fbc:	18ffffc4 	addi	r3,r3,-1
 1810fc0:	10c01715 	stw	r3,92(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 1810fc4:	d0a7d317 	ldw	r2,-24756(gp)
 1810fc8:	10801717 	ldw	r2,92(r2)
 1810fcc:	1000011e 	bne	r2,zero,1810fd4 <vTaskExitCritical+0x44>
				{
					portENABLE_INTERRUPTS();
 1810fd0:	182bb700 	call	182bb70 <enh_alt_irq_enable_all>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1810fd4:	0001883a 	nop
 1810fd8:	e037883a 	mov	sp,fp
 1810fdc:	dfc00117 	ldw	ra,4(sp)
 1810fe0:	df000017 	ldw	fp,0(sp)
 1810fe4:	dec00204 	addi	sp,sp,8
 1810fe8:	f800283a 	ret

01810fec <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 1810fec:	defffe04 	addi	sp,sp,-8
 1810ff0:	df000115 	stw	fp,4(sp)
 1810ff4:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 1810ff8:	d0a7d317 	ldw	r2,-24756(gp)
 1810ffc:	10800617 	ldw	r2,24(r2)
 1811000:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1811004:	d0a7d317 	ldw	r2,-24756(gp)
 1811008:	d0e7d317 	ldw	r3,-24756(gp)
 181100c:	18c00b17 	ldw	r3,44(r3)
 1811010:	01000144 	movi	r4,5
 1811014:	20c7c83a 	sub	r3,r4,r3
 1811018:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 181101c:	e0bfff17 	ldw	r2,-4(fp)
}
 1811020:	e037883a 	mov	sp,fp
 1811024:	df000017 	ldw	fp,0(sp)
 1811028:	dec00104 	addi	sp,sp,4
 181102c:	f800283a 	ret

01811030 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 1811030:	deffff04 	addi	sp,sp,-4
 1811034:	df000015 	stw	fp,0(sp)
 1811038:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 181103c:	d0a7d317 	ldw	r2,-24756(gp)
 1811040:	10000426 	beq	r2,zero,1811054 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 1811044:	d0a7d317 	ldw	r2,-24756(gp)
 1811048:	10c01b17 	ldw	r3,108(r2)
 181104c:	18c00044 	addi	r3,r3,1
 1811050:	10c01b15 	stw	r3,108(r2)
		}

		return pxCurrentTCB;
 1811054:	d0a7d317 	ldw	r2,-24756(gp)
	}
 1811058:	e037883a 	mov	sp,fp
 181105c:	df000017 	ldw	fp,0(sp)
 1811060:	dec00104 	addi	sp,sp,4
 1811064:	f800283a 	ret

01811068 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 1811068:	defffb04 	addi	sp,sp,-20
 181106c:	dfc00415 	stw	ra,16(sp)
 1811070:	df000315 	stw	fp,12(sp)
 1811074:	df000304 	addi	fp,sp,12
 1811078:	e13ffe15 	stw	r4,-8(fp)
 181107c:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 1811080:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1811084:	10000126 	beq	r2,zero,181108c <ulTaskNotifyTake+0x24>
 1811088:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 181108c:	d0a7d317 	ldw	r2,-24756(gp)
 1811090:	10801c17 	ldw	r2,112(r2)
 1811094:	1000091e 	bne	r2,zero,18110bc <ulTaskNotifyTake+0x54>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 1811098:	d0a7d317 	ldw	r2,-24756(gp)
 181109c:	00c00044 	movi	r3,1
 18110a0:	10c01d05 	stb	r3,116(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 18110a4:	e0bfff17 	ldw	r2,-4(fp)
 18110a8:	10000426 	beq	r2,zero,18110bc <ulTaskNotifyTake+0x54>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 18110ac:	01400044 	movi	r5,1
 18110b0:	e13fff17 	ldw	r4,-4(fp)
 18110b4:	181181c0 	call	181181c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 18110b8:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 18110bc:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18110c0:	10000126 	beq	r2,zero,18110c8 <ulTaskNotifyTake+0x60>
 18110c4:	1810f900 	call	1810f90 <vTaskExitCritical>

		taskENTER_CRITICAL();
 18110c8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18110cc:	10000126 	beq	r2,zero,18110d4 <ulTaskNotifyTake+0x6c>
 18110d0:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 18110d4:	d0a7d317 	ldw	r2,-24756(gp)
 18110d8:	10801c17 	ldw	r2,112(r2)
 18110dc:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 18110e0:	e0bffd17 	ldw	r2,-12(fp)
 18110e4:	10000926 	beq	r2,zero,181110c <ulTaskNotifyTake+0xa4>
			{
				if( xClearCountOnExit != pdFALSE )
 18110e8:	e0bffe17 	ldw	r2,-8(fp)
 18110ec:	10000326 	beq	r2,zero,18110fc <ulTaskNotifyTake+0x94>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 18110f0:	d0a7d317 	ldw	r2,-24756(gp)
 18110f4:	10001c15 	stw	zero,112(r2)
 18110f8:	00000406 	br	181110c <ulTaskNotifyTake+0xa4>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 18110fc:	d0a7d317 	ldw	r2,-24756(gp)
 1811100:	e0fffd17 	ldw	r3,-12(fp)
 1811104:	18ffffc4 	addi	r3,r3,-1
 1811108:	10c01c15 	stw	r3,112(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 181110c:	d0a7d317 	ldw	r2,-24756(gp)
 1811110:	10001d05 	stb	zero,116(r2)
		}
		taskEXIT_CRITICAL();
 1811114:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1811118:	10000126 	beq	r2,zero,1811120 <ulTaskNotifyTake+0xb8>
 181111c:	1810f900 	call	1810f90 <vTaskExitCritical>

		return ulReturn;
 1811120:	e0bffd17 	ldw	r2,-12(fp)
	}
 1811124:	e037883a 	mov	sp,fp
 1811128:	dfc00117 	ldw	ra,4(sp)
 181112c:	df000017 	ldw	fp,0(sp)
 1811130:	dec00204 	addi	sp,sp,8
 1811134:	f800283a 	ret

01811138 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 1811138:	defff904 	addi	sp,sp,-28
 181113c:	dfc00615 	stw	ra,24(sp)
 1811140:	df000515 	stw	fp,20(sp)
 1811144:	df000504 	addi	fp,sp,20
 1811148:	e13ffc15 	stw	r4,-16(fp)
 181114c:	e17ffd15 	stw	r5,-12(fp)
 1811150:	e1bffe15 	stw	r6,-8(fp)
 1811154:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 1811158:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 181115c:	10000126 	beq	r2,zero,1811164 <xTaskNotifyWait+0x2c>
 1811160:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 1811164:	d0a7d317 	ldw	r2,-24756(gp)
 1811168:	10801d03 	ldbu	r2,116(r2)
 181116c:	10803fcc 	andi	r2,r2,255
 1811170:	108000a0 	cmpeqi	r2,r2,2
 1811174:	10000f1e 	bne	r2,zero,18111b4 <xTaskNotifyWait+0x7c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 1811178:	d0a7d317 	ldw	r2,-24756(gp)
 181117c:	11001c17 	ldw	r4,112(r2)
 1811180:	e0fffc17 	ldw	r3,-16(fp)
 1811184:	00c6303a 	nor	r3,zero,r3
 1811188:	20c6703a 	and	r3,r4,r3
 181118c:	10c01c15 	stw	r3,112(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 1811190:	d0a7d317 	ldw	r2,-24756(gp)
 1811194:	00c00044 	movi	r3,1
 1811198:	10c01d05 	stb	r3,116(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 181119c:	e0bfff17 	ldw	r2,-4(fp)
 18111a0:	10000426 	beq	r2,zero,18111b4 <xTaskNotifyWait+0x7c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 18111a4:	01400044 	movi	r5,1
 18111a8:	e13fff17 	ldw	r4,-4(fp)
 18111ac:	181181c0 	call	181181c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 18111b0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 18111b4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18111b8:	10000126 	beq	r2,zero,18111c0 <xTaskNotifyWait+0x88>
 18111bc:	1810f900 	call	1810f90 <vTaskExitCritical>

		taskENTER_CRITICAL();
 18111c0:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18111c4:	10000126 	beq	r2,zero,18111cc <xTaskNotifyWait+0x94>
 18111c8:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 18111cc:	e0bffe17 	ldw	r2,-8(fp)
 18111d0:	10000426 	beq	r2,zero,18111e4 <xTaskNotifyWait+0xac>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 18111d4:	d0a7d317 	ldw	r2,-24756(gp)
 18111d8:	10c01c17 	ldw	r3,112(r2)
 18111dc:	e0bffe17 	ldw	r2,-8(fp)
 18111e0:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 18111e4:	d0a7d317 	ldw	r2,-24756(gp)
 18111e8:	10801d03 	ldbu	r2,116(r2)
 18111ec:	10803fcc 	andi	r2,r2,255
 18111f0:	108000a0 	cmpeqi	r2,r2,2
 18111f4:	1000021e 	bne	r2,zero,1811200 <xTaskNotifyWait+0xc8>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 18111f8:	e03ffb15 	stw	zero,-20(fp)
 18111fc:	00000806 	br	1811220 <xTaskNotifyWait+0xe8>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 1811200:	d0a7d317 	ldw	r2,-24756(gp)
 1811204:	11001c17 	ldw	r4,112(r2)
 1811208:	e0fffd17 	ldw	r3,-12(fp)
 181120c:	00c6303a 	nor	r3,zero,r3
 1811210:	20c6703a 	and	r3,r4,r3
 1811214:	10c01c15 	stw	r3,112(r2)
				xReturn = pdTRUE;
 1811218:	00800044 	movi	r2,1
 181121c:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1811220:	d0a7d317 	ldw	r2,-24756(gp)
 1811224:	10001d05 	stb	zero,116(r2)
		}
		taskEXIT_CRITICAL();
 1811228:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 181122c:	10000126 	beq	r2,zero,1811234 <xTaskNotifyWait+0xfc>
 1811230:	1810f900 	call	1810f90 <vTaskExitCritical>

		return xReturn;
 1811234:	e0bffb17 	ldw	r2,-20(fp)
	}
 1811238:	e037883a 	mov	sp,fp
 181123c:	dfc00117 	ldw	ra,4(sp)
 1811240:	df000017 	ldw	fp,0(sp)
 1811244:	dec00204 	addi	sp,sp,8
 1811248:	f800283a 	ret

0181124c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 181124c:	defff704 	addi	sp,sp,-36
 1811250:	dfc00815 	stw	ra,32(sp)
 1811254:	df000715 	stw	fp,28(sp)
 1811258:	df000704 	addi	fp,sp,28
 181125c:	e13ffc15 	stw	r4,-16(fp)
 1811260:	e17ffd15 	stw	r5,-12(fp)
 1811264:	e1bffe15 	stw	r6,-8(fp)
 1811268:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 181126c:	00800044 	movi	r2,1
 1811270:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 1811274:	e0bffc17 	ldw	r2,-16(fp)
 1811278:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 181127c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1811280:	10000126 	beq	r2,zero,1811288 <xTaskGenericNotify+0x3c>
 1811284:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 1811288:	e0bfff17 	ldw	r2,-4(fp)
 181128c:	10000426 	beq	r2,zero,18112a0 <xTaskGenericNotify+0x54>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 1811290:	e0bffa17 	ldw	r2,-24(fp)
 1811294:	10c01c17 	ldw	r3,112(r2)
 1811298:	e0bfff17 	ldw	r2,-4(fp)
 181129c:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 18112a0:	e0bffa17 	ldw	r2,-24(fp)
 18112a4:	10801d03 	ldbu	r2,116(r2)
 18112a8:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 18112ac:	e0bffa17 	ldw	r2,-24(fp)
 18112b0:	00c00084 	movi	r3,2
 18112b4:	10c01d05 	stb	r3,116(r2)

			switch( eAction )
 18112b8:	e0bffe17 	ldw	r2,-8(fp)
 18112bc:	10800168 	cmpgeui	r2,r2,5
 18112c0:	1000261e 	bne	r2,zero,181135c <xTaskGenericNotify+0x110>
 18112c4:	e0bffe17 	ldw	r2,-8(fp)
 18112c8:	100690ba 	slli	r3,r2,2
 18112cc:	00806074 	movhi	r2,385
 18112d0:	1084b804 	addi	r2,r2,4832
 18112d4:	1885883a 	add	r2,r3,r2
 18112d8:	10800017 	ldw	r2,0(r2)
 18112dc:	1000683a 	jmp	r2
 18112e0:	01811364 	muli	r6,zero,1101
 18112e4:	018112f4 	movhi	r6,1099
 18112e8:	01811310 	cmplti	r6,zero,1100
 18112ec:	01811328 	cmpgeui	r6,zero,1100
 18112f0:	01811338 	rdprs	r6,zero,1100
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 18112f4:	e0bffa17 	ldw	r2,-24(fp)
 18112f8:	10c01c17 	ldw	r3,112(r2)
 18112fc:	e0bffd17 	ldw	r2,-12(fp)
 1811300:	1886b03a 	or	r3,r3,r2
 1811304:	e0bffa17 	ldw	r2,-24(fp)
 1811308:	10c01c15 	stw	r3,112(r2)
					break;
 181130c:	00001606 	br	1811368 <xTaskGenericNotify+0x11c>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 1811310:	e0bffa17 	ldw	r2,-24(fp)
 1811314:	10801c17 	ldw	r2,112(r2)
 1811318:	10c00044 	addi	r3,r2,1
 181131c:	e0bffa17 	ldw	r2,-24(fp)
 1811320:	10c01c15 	stw	r3,112(r2)
					break;
 1811324:	00001006 	br	1811368 <xTaskGenericNotify+0x11c>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 1811328:	e0bffa17 	ldw	r2,-24(fp)
 181132c:	e0fffd17 	ldw	r3,-12(fp)
 1811330:	10c01c15 	stw	r3,112(r2)
					break;
 1811334:	00000c06 	br	1811368 <xTaskGenericNotify+0x11c>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 1811338:	e0bffb03 	ldbu	r2,-20(fp)
 181133c:	108000a0 	cmpeqi	r2,r2,2
 1811340:	1000041e 	bne	r2,zero,1811354 <xTaskGenericNotify+0x108>
					{
						pxTCB->ulNotifiedValue = ulValue;
 1811344:	e0bffa17 	ldw	r2,-24(fp)
 1811348:	e0fffd17 	ldw	r3,-12(fp)
 181134c:	10c01c15 	stw	r3,112(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 1811350:	00000506 	br	1811368 <xTaskGenericNotify+0x11c>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 1811354:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 1811358:	00000306 	br	1811368 <xTaskGenericNotify+0x11c>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 181135c:	0001883a 	nop
 1811360:	00000106 	br	1811368 <xTaskGenericNotify+0x11c>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 1811364:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1811368:	e0bffb03 	ldbu	r2,-20(fp)
 181136c:	10800058 	cmpnei	r2,r2,1
 1811370:	10001c1e 	bne	r2,zero,18113e4 <xTaskGenericNotify+0x198>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1811374:	e0bffa17 	ldw	r2,-24(fp)
 1811378:	10800104 	addi	r2,r2,4
 181137c:	1009883a 	mov	r4,r2
 1811380:	182ba5c0 	call	182ba5c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 1811384:	e0bffa17 	ldw	r2,-24(fp)
 1811388:	10800b17 	ldw	r2,44(r2)
 181138c:	d0e7d917 	ldw	r3,-24732(gp)
 1811390:	1880032e 	bgeu	r3,r2,18113a0 <xTaskGenericNotify+0x154>
 1811394:	e0bffa17 	ldw	r2,-24(fp)
 1811398:	10800b17 	ldw	r2,44(r2)
 181139c:	d0a7d915 	stw	r2,-24732(gp)
 18113a0:	e0bffa17 	ldw	r2,-24(fp)
 18113a4:	10800b17 	ldw	r2,44(r2)
 18113a8:	10c00524 	muli	r3,r2,20
 18113ac:	00806134 	movhi	r2,388
 18113b0:	109c9004 	addi	r2,r2,29248
 18113b4:	1887883a 	add	r3,r3,r2
 18113b8:	e0bffa17 	ldw	r2,-24(fp)
 18113bc:	10800104 	addi	r2,r2,4
 18113c0:	100b883a 	mov	r5,r2
 18113c4:	1809883a 	mov	r4,r3
 18113c8:	182b8f80 	call	182b8f8 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 18113cc:	e0bffa17 	ldw	r2,-24(fp)
 18113d0:	10800b17 	ldw	r2,44(r2)
 18113d4:	d0e7d317 	ldw	r3,-24756(gp)
 18113d8:	18c00b17 	ldw	r3,44(r3)
 18113dc:	1880012e 	bgeu	r3,r2,18113e4 <xTaskGenericNotify+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 18113e0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 18113e4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18113e8:	10000126 	beq	r2,zero,18113f0 <xTaskGenericNotify+0x1a4>
 18113ec:	1810f900 	call	1810f90 <vTaskExitCritical>

		return xReturn;
 18113f0:	e0bff917 	ldw	r2,-28(fp)
	}
 18113f4:	e037883a 	mov	sp,fp
 18113f8:	dfc00117 	ldw	ra,4(sp)
 18113fc:	df000017 	ldw	fp,0(sp)
 1811400:	dec00204 	addi	sp,sp,8
 1811404:	f800283a 	ret

01811408 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 1811408:	defff604 	addi	sp,sp,-40
 181140c:	dfc00915 	stw	ra,36(sp)
 1811410:	df000815 	stw	fp,32(sp)
 1811414:	df000804 	addi	fp,sp,32
 1811418:	e13ffc15 	stw	r4,-16(fp)
 181141c:	e17ffd15 	stw	r5,-12(fp)
 1811420:	e1bffe15 	stw	r6,-8(fp)
 1811424:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 1811428:	00800044 	movi	r2,1
 181142c:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 1811430:	e0bffc17 	ldw	r2,-16(fp)
 1811434:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1811438:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 181143c:	e0bfff17 	ldw	r2,-4(fp)
 1811440:	10000426 	beq	r2,zero,1811454 <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 1811444:	e0bff917 	ldw	r2,-28(fp)
 1811448:	10c01c17 	ldw	r3,112(r2)
 181144c:	e0bfff17 	ldw	r2,-4(fp)
 1811450:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 1811454:	e0bff917 	ldw	r2,-28(fp)
 1811458:	10801d03 	ldbu	r2,116(r2)
 181145c:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1811460:	e0bff917 	ldw	r2,-28(fp)
 1811464:	00c00084 	movi	r3,2
 1811468:	10c01d05 	stb	r3,116(r2)

			switch( eAction )
 181146c:	e0bffe17 	ldw	r2,-8(fp)
 1811470:	10800168 	cmpgeui	r2,r2,5
 1811474:	1000261e 	bne	r2,zero,1811510 <xTaskGenericNotifyFromISR+0x108>
 1811478:	e0bffe17 	ldw	r2,-8(fp)
 181147c:	100690ba 	slli	r3,r2,2
 1811480:	00806074 	movhi	r2,385
 1811484:	10852504 	addi	r2,r2,5268
 1811488:	1885883a 	add	r2,r3,r2
 181148c:	10800017 	ldw	r2,0(r2)
 1811490:	1000683a 	jmp	r2
 1811494:	01811518 	cmpnei	r6,zero,1108
 1811498:	018114a8 	cmpgeui	r6,zero,1106
 181149c:	018114c4 	movi	r6,1107
 18114a0:	018114dc 	xori	r6,zero,1107
 18114a4:	018114ec 	andhi	r6,zero,1107
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 18114a8:	e0bff917 	ldw	r2,-28(fp)
 18114ac:	10c01c17 	ldw	r3,112(r2)
 18114b0:	e0bffd17 	ldw	r2,-12(fp)
 18114b4:	1886b03a 	or	r3,r3,r2
 18114b8:	e0bff917 	ldw	r2,-28(fp)
 18114bc:	10c01c15 	stw	r3,112(r2)
					break;
 18114c0:	00001606 	br	181151c <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 18114c4:	e0bff917 	ldw	r2,-28(fp)
 18114c8:	10801c17 	ldw	r2,112(r2)
 18114cc:	10c00044 	addi	r3,r2,1
 18114d0:	e0bff917 	ldw	r2,-28(fp)
 18114d4:	10c01c15 	stw	r3,112(r2)
					break;
 18114d8:	00001006 	br	181151c <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 18114dc:	e0bff917 	ldw	r2,-28(fp)
 18114e0:	e0fffd17 	ldw	r3,-12(fp)
 18114e4:	10c01c15 	stw	r3,112(r2)
					break;
 18114e8:	00000c06 	br	181151c <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 18114ec:	e0bffb03 	ldbu	r2,-20(fp)
 18114f0:	108000a0 	cmpeqi	r2,r2,2
 18114f4:	1000041e 	bne	r2,zero,1811508 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 18114f8:	e0bff917 	ldw	r2,-28(fp)
 18114fc:	e0fffd17 	ldw	r3,-12(fp)
 1811500:	10c01c15 	stw	r3,112(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 1811504:	00000506 	br	181151c <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 1811508:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 181150c:	00000306 	br	181151c <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 1811510:	0001883a 	nop
 1811514:	00000106 	br	181151c <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 1811518:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 181151c:	e0bffb03 	ldbu	r2,-20(fp)
 1811520:	10800058 	cmpnei	r2,r2,1
 1811524:	10002b1e 	bne	r2,zero,18115d4 <xTaskGenericNotifyFromISR+0x1cc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1811528:	d0a7e117 	ldw	r2,-24700(gp)
 181152c:	1000171e 	bne	r2,zero,181158c <xTaskGenericNotifyFromISR+0x184>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1811530:	e0bff917 	ldw	r2,-28(fp)
 1811534:	10800104 	addi	r2,r2,4
 1811538:	1009883a 	mov	r4,r2
 181153c:	182ba5c0 	call	182ba5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1811540:	e0bff917 	ldw	r2,-28(fp)
 1811544:	10800b17 	ldw	r2,44(r2)
 1811548:	d0e7d917 	ldw	r3,-24732(gp)
 181154c:	1880032e 	bgeu	r3,r2,181155c <xTaskGenericNotifyFromISR+0x154>
 1811550:	e0bff917 	ldw	r2,-28(fp)
 1811554:	10800b17 	ldw	r2,44(r2)
 1811558:	d0a7d915 	stw	r2,-24732(gp)
 181155c:	e0bff917 	ldw	r2,-28(fp)
 1811560:	10800b17 	ldw	r2,44(r2)
 1811564:	10c00524 	muli	r3,r2,20
 1811568:	00806134 	movhi	r2,388
 181156c:	109c9004 	addi	r2,r2,29248
 1811570:	1887883a 	add	r3,r3,r2
 1811574:	e0bff917 	ldw	r2,-28(fp)
 1811578:	10800104 	addi	r2,r2,4
 181157c:	100b883a 	mov	r5,r2
 1811580:	1809883a 	mov	r4,r3
 1811584:	182b8f80 	call	182b8f8 <vListInsertEnd>
 1811588:	00000606 	br	18115a4 <xTaskGenericNotifyFromISR+0x19c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 181158c:	e0bff917 	ldw	r2,-28(fp)
 1811590:	10800604 	addi	r2,r2,24
 1811594:	100b883a 	mov	r5,r2
 1811598:	01006134 	movhi	r4,388
 181159c:	211cb304 	addi	r4,r4,29388
 18115a0:	182b8f80 	call	182b8f8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 18115a4:	e0bff917 	ldw	r2,-28(fp)
 18115a8:	10800b17 	ldw	r2,44(r2)
 18115ac:	d0e7d317 	ldw	r3,-24756(gp)
 18115b0:	18c00b17 	ldw	r3,44(r3)
 18115b4:	1880072e 	bgeu	r3,r2,18115d4 <xTaskGenericNotifyFromISR+0x1cc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 18115b8:	e0800217 	ldw	r2,8(fp)
 18115bc:	10000326 	beq	r2,zero,18115cc <xTaskGenericNotifyFromISR+0x1c4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 18115c0:	e0800217 	ldw	r2,8(fp)
 18115c4:	00c00044 	movi	r3,1
 18115c8:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 18115cc:	00800044 	movi	r2,1
 18115d0:	d0a7dc15 	stw	r2,-24720(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 18115d4:	e0bff817 	ldw	r2,-32(fp)
	}
 18115d8:	e037883a 	mov	sp,fp
 18115dc:	dfc00117 	ldw	ra,4(sp)
 18115e0:	df000017 	ldw	fp,0(sp)
 18115e4:	dec00204 	addi	sp,sp,8
 18115e8:	f800283a 	ret

018115ec <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 18115ec:	defff904 	addi	sp,sp,-28
 18115f0:	dfc00615 	stw	ra,24(sp)
 18115f4:	df000515 	stw	fp,20(sp)
 18115f8:	df000504 	addi	fp,sp,20
 18115fc:	e13ffe15 	stw	r4,-8(fp)
 1811600:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 1811604:	e0bffe17 	ldw	r2,-8(fp)
 1811608:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 181160c:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 1811610:	e0bffb17 	ldw	r2,-20(fp)
 1811614:	10801d03 	ldbu	r2,116(r2)
 1811618:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 181161c:	e0bffb17 	ldw	r2,-20(fp)
 1811620:	00c00084 	movi	r3,2
 1811624:	10c01d05 	stb	r3,116(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 1811628:	e0bffb17 	ldw	r2,-20(fp)
 181162c:	10801c17 	ldw	r2,112(r2)
 1811630:	10c00044 	addi	r3,r2,1
 1811634:	e0bffb17 	ldw	r2,-20(fp)
 1811638:	10c01c15 	stw	r3,112(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 181163c:	e0bffd03 	ldbu	r2,-12(fp)
 1811640:	10800058 	cmpnei	r2,r2,1
 1811644:	10002b1e 	bne	r2,zero,18116f4 <vTaskNotifyGiveFromISR+0x108>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1811648:	d0a7e117 	ldw	r2,-24700(gp)
 181164c:	1000171e 	bne	r2,zero,18116ac <vTaskNotifyGiveFromISR+0xc0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1811650:	e0bffb17 	ldw	r2,-20(fp)
 1811654:	10800104 	addi	r2,r2,4
 1811658:	1009883a 	mov	r4,r2
 181165c:	182ba5c0 	call	182ba5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1811660:	e0bffb17 	ldw	r2,-20(fp)
 1811664:	10800b17 	ldw	r2,44(r2)
 1811668:	d0e7d917 	ldw	r3,-24732(gp)
 181166c:	1880032e 	bgeu	r3,r2,181167c <vTaskNotifyGiveFromISR+0x90>
 1811670:	e0bffb17 	ldw	r2,-20(fp)
 1811674:	10800b17 	ldw	r2,44(r2)
 1811678:	d0a7d915 	stw	r2,-24732(gp)
 181167c:	e0bffb17 	ldw	r2,-20(fp)
 1811680:	10800b17 	ldw	r2,44(r2)
 1811684:	10c00524 	muli	r3,r2,20
 1811688:	00806134 	movhi	r2,388
 181168c:	109c9004 	addi	r2,r2,29248
 1811690:	1887883a 	add	r3,r3,r2
 1811694:	e0bffb17 	ldw	r2,-20(fp)
 1811698:	10800104 	addi	r2,r2,4
 181169c:	100b883a 	mov	r5,r2
 18116a0:	1809883a 	mov	r4,r3
 18116a4:	182b8f80 	call	182b8f8 <vListInsertEnd>
 18116a8:	00000606 	br	18116c4 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 18116ac:	e0bffb17 	ldw	r2,-20(fp)
 18116b0:	10800604 	addi	r2,r2,24
 18116b4:	100b883a 	mov	r5,r2
 18116b8:	01006134 	movhi	r4,388
 18116bc:	211cb304 	addi	r4,r4,29388
 18116c0:	182b8f80 	call	182b8f8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 18116c4:	e0bffb17 	ldw	r2,-20(fp)
 18116c8:	10800b17 	ldw	r2,44(r2)
 18116cc:	d0e7d317 	ldw	r3,-24756(gp)
 18116d0:	18c00b17 	ldw	r3,44(r3)
 18116d4:	1880072e 	bgeu	r3,r2,18116f4 <vTaskNotifyGiveFromISR+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 18116d8:	e0bfff17 	ldw	r2,-4(fp)
 18116dc:	10000326 	beq	r2,zero,18116ec <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 18116e0:	e0bfff17 	ldw	r2,-4(fp)
 18116e4:	00c00044 	movi	r3,1
 18116e8:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 18116ec:	00800044 	movi	r2,1
 18116f0:	d0a7dc15 	stw	r2,-24720(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 18116f4:	0001883a 	nop
 18116f8:	e037883a 	mov	sp,fp
 18116fc:	dfc00117 	ldw	ra,4(sp)
 1811700:	df000017 	ldw	fp,0(sp)
 1811704:	dec00204 	addi	sp,sp,8
 1811708:	f800283a 	ret

0181170c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 181170c:	defffb04 	addi	sp,sp,-20
 1811710:	dfc00415 	stw	ra,16(sp)
 1811714:	df000315 	stw	fp,12(sp)
 1811718:	df000304 	addi	fp,sp,12
 181171c:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 1811720:	e0bfff17 	ldw	r2,-4(fp)
 1811724:	1000021e 	bne	r2,zero,1811730 <xTaskNotifyStateClear+0x24>
 1811728:	d0a7d317 	ldw	r2,-24756(gp)
 181172c:	00000106 	br	1811734 <xTaskNotifyStateClear+0x28>
 1811730:	e0bfff17 	ldw	r2,-4(fp)
 1811734:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 1811738:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 181173c:	10000126 	beq	r2,zero,1811744 <xTaskNotifyStateClear+0x38>
 1811740:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 1811744:	e0bffe17 	ldw	r2,-8(fp)
 1811748:	10801d03 	ldbu	r2,116(r2)
 181174c:	10803fcc 	andi	r2,r2,255
 1811750:	10800098 	cmpnei	r2,r2,2
 1811754:	1000051e 	bne	r2,zero,181176c <xTaskNotifyStateClear+0x60>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1811758:	e0bffe17 	ldw	r2,-8(fp)
 181175c:	10001d05 	stb	zero,116(r2)
				xReturn = pdPASS;
 1811760:	00800044 	movi	r2,1
 1811764:	e0bffd15 	stw	r2,-12(fp)
 1811768:	00000106 	br	1811770 <xTaskNotifyStateClear+0x64>
			}
			else
			{
				xReturn = pdFAIL;
 181176c:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 1811770:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1811774:	10000126 	beq	r2,zero,181177c <xTaskNotifyStateClear+0x70>
 1811778:	1810f900 	call	1810f90 <vTaskExitCritical>

		return xReturn;
 181177c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1811780:	e037883a 	mov	sp,fp
 1811784:	dfc00117 	ldw	ra,4(sp)
 1811788:	df000017 	ldw	fp,0(sp)
 181178c:	dec00204 	addi	sp,sp,8
 1811790:	f800283a 	ret

01811794 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 1811794:	defffa04 	addi	sp,sp,-24
 1811798:	dfc00515 	stw	ra,20(sp)
 181179c:	df000415 	stw	fp,16(sp)
 18117a0:	df000404 	addi	fp,sp,16
 18117a4:	e13ffe15 	stw	r4,-8(fp)
 18117a8:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 18117ac:	e0bffe17 	ldw	r2,-8(fp)
 18117b0:	1000021e 	bne	r2,zero,18117bc <ulTaskNotifyValueClear+0x28>
 18117b4:	d0a7d317 	ldw	r2,-24756(gp)
 18117b8:	00000106 	br	18117c0 <ulTaskNotifyValueClear+0x2c>
 18117bc:	e0bffe17 	ldw	r2,-8(fp)
 18117c0:	e0bffc15 	stw	r2,-16(fp)

		taskENTER_CRITICAL();
 18117c4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18117c8:	10000126 	beq	r2,zero,18117d0 <ulTaskNotifyValueClear+0x3c>
 18117cc:	1810f480 	call	1810f48 <vTaskEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 18117d0:	d0a7d317 	ldw	r2,-24756(gp)
 18117d4:	10801c17 	ldw	r2,112(r2)
 18117d8:	e0bffd15 	stw	r2,-12(fp)
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 18117dc:	e0bffc17 	ldw	r2,-16(fp)
 18117e0:	10c01c17 	ldw	r3,112(r2)
 18117e4:	e0bfff17 	ldw	r2,-4(fp)
 18117e8:	0084303a 	nor	r2,zero,r2
 18117ec:	1886703a 	and	r3,r3,r2
 18117f0:	e0bffc17 	ldw	r2,-16(fp)
 18117f4:	10c01c15 	stw	r3,112(r2)
		}
		taskEXIT_CRITICAL();
 18117f8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18117fc:	10000126 	beq	r2,zero,1811804 <ulTaskNotifyValueClear+0x70>
 1811800:	1810f900 	call	1810f90 <vTaskExitCritical>

		return ulReturn;
 1811804:	e0bffd17 	ldw	r2,-12(fp)
	}
 1811808:	e037883a 	mov	sp,fp
 181180c:	dfc00117 	ldw	ra,4(sp)
 1811810:	df000017 	ldw	fp,0(sp)
 1811814:	dec00204 	addi	sp,sp,8
 1811818:	f800283a 	ret

0181181c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 181181c:	defffa04 	addi	sp,sp,-24
 1811820:	dfc00515 	stw	ra,20(sp)
 1811824:	df000415 	stw	fp,16(sp)
 1811828:	df000404 	addi	fp,sp,16
 181182c:	e13ffe15 	stw	r4,-8(fp)
 1811830:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 1811834:	d0a7d817 	ldw	r2,-24736(gp)
 1811838:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 181183c:	d0a7d317 	ldw	r2,-24756(gp)
 1811840:	10800104 	addi	r2,r2,4
 1811844:	1009883a 	mov	r4,r2
 1811848:	182ba5c0 	call	182ba5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 181184c:	e0bffe17 	ldw	r2,-8(fp)
 1811850:	10bfffd8 	cmpnei	r2,r2,-1
 1811854:	1000091e 	bne	r2,zero,181187c <prvAddCurrentTaskToDelayedList+0x60>
 1811858:	e0bfff17 	ldw	r2,-4(fp)
 181185c:	10000726 	beq	r2,zero,181187c <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1811860:	d0a7d317 	ldw	r2,-24756(gp)
 1811864:	10800104 	addi	r2,r2,4
 1811868:	100b883a 	mov	r5,r2
 181186c:	01006134 	movhi	r4,388
 1811870:	211cbd04 	addi	r4,r4,29428
 1811874:	182b8f80 	call	182b8f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1811878:	00001c06 	br	18118ec <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 181187c:	e0fffc17 	ldw	r3,-16(fp)
 1811880:	e0bffe17 	ldw	r2,-8(fp)
 1811884:	1885883a 	add	r2,r3,r2
 1811888:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 181188c:	d0a7d317 	ldw	r2,-24756(gp)
 1811890:	e0fffd17 	ldw	r3,-12(fp)
 1811894:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 1811898:	e0fffd17 	ldw	r3,-12(fp)
 181189c:	e0bffc17 	ldw	r2,-16(fp)
 18118a0:	1880072e 	bgeu	r3,r2,18118c0 <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 18118a4:	d0e7d517 	ldw	r3,-24748(gp)
 18118a8:	d0a7d317 	ldw	r2,-24756(gp)
 18118ac:	10800104 	addi	r2,r2,4
 18118b0:	100b883a 	mov	r5,r2
 18118b4:	1809883a 	mov	r4,r3
 18118b8:	182b9840 	call	182b984 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 18118bc:	00000b06 	br	18118ec <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 18118c0:	d0e7d417 	ldw	r3,-24752(gp)
 18118c4:	d0a7d317 	ldw	r2,-24756(gp)
 18118c8:	10800104 	addi	r2,r2,4
 18118cc:	100b883a 	mov	r5,r2
 18118d0:	1809883a 	mov	r4,r3
 18118d4:	182b9840 	call	182b984 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 18118d8:	d0a7df17 	ldw	r2,-24708(gp)
 18118dc:	e0fffd17 	ldw	r3,-12(fp)
 18118e0:	1880022e 	bgeu	r3,r2,18118ec <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 18118e4:	e0bffd17 	ldw	r2,-12(fp)
 18118e8:	d0a7df15 	stw	r2,-24708(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 18118ec:	0001883a 	nop
 18118f0:	e037883a 	mov	sp,fp
 18118f4:	dfc00117 	ldw	ra,4(sp)
 18118f8:	df000017 	ldw	fp,0(sp)
 18118fc:	dec00204 	addi	sp,sp,8
 1811900:	f800283a 	ret

01811904 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 1811904:	defffb04 	addi	sp,sp,-20
 1811908:	dfc00415 	stw	ra,16(sp)
 181190c:	df000315 	stw	fp,12(sp)
 1811910:	df000304 	addi	fp,sp,12
BaseType_t xReturn = pdFAIL;
 1811914:	e03fff15 	stw	zero,-4(fp)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 1811918:	18123cc0 	call	18123cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 181191c:	d0a7e417 	ldw	r2,-24688(gp)
 1811920:	10000c26 	beq	r2,zero,1811954 <xTimerCreateTimerTask+0x50>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 1811924:	d0a7e504 	addi	r2,gp,-24684
 1811928:	d8800115 	stw	r2,4(sp)
 181192c:	00800144 	movi	r2,5
 1811930:	d8800015 	stw	r2,0(sp)
 1811934:	000f883a 	mov	r7,zero
 1811938:	01820004 	movi	r6,2048
 181193c:	01406134 	movhi	r5,388
 1811940:	2942ca04 	addi	r5,r5,2856
 1811944:	01006074 	movhi	r4,385
 1811948:	21077d04 	addi	r4,r4,7668
 181194c:	180ec140 	call	180ec14 <xTaskCreate>
 1811950:	e0bfff15 	stw	r2,-4(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 1811954:	e0bfff17 	ldw	r2,-4(fp)
}
 1811958:	e037883a 	mov	sp,fp
 181195c:	dfc00117 	ldw	ra,4(sp)
 1811960:	df000017 	ldw	fp,0(sp)
 1811964:	dec00204 	addi	sp,sp,8
 1811968:	f800283a 	ret

0181196c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 181196c:	defff704 	addi	sp,sp,-36
 1811970:	dfc00815 	stw	ra,32(sp)
 1811974:	df000715 	stw	fp,28(sp)
 1811978:	df000704 	addi	fp,sp,28
 181197c:	e13ffc15 	stw	r4,-16(fp)
 1811980:	e17ffd15 	stw	r5,-12(fp)
 1811984:	e1bffe15 	stw	r6,-8(fp)
 1811988:	e1ffff15 	stw	r7,-4(fp)
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 181198c:	01000b04 	movi	r4,44
 1811990:	182b7d40 	call	182b7d4 <pvPortMalloc>
 1811994:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewTimer != NULL )
 1811998:	e0bffb17 	ldw	r2,-20(fp)
 181199c:	10000b26 	beq	r2,zero,18119cc <xTimerCreate+0x60>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 18119a0:	e0bffb17 	ldw	r2,-20(fp)
 18119a4:	10000a05 	stb	zero,40(r2)
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 18119a8:	e0bffb17 	ldw	r2,-20(fp)
 18119ac:	d8800115 	stw	r2,4(sp)
 18119b0:	e0800217 	ldw	r2,8(fp)
 18119b4:	d8800015 	stw	r2,0(sp)
 18119b8:	e1ffff17 	ldw	r7,-4(fp)
 18119bc:	e1bffe17 	ldw	r6,-8(fp)
 18119c0:	e17ffd17 	ldw	r5,-12(fp)
 18119c4:	e13ffc17 	ldw	r4,-16(fp)
 18119c8:	18119e40 	call	18119e4 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 18119cc:	e0bffb17 	ldw	r2,-20(fp)
	}
 18119d0:	e037883a 	mov	sp,fp
 18119d4:	dfc00117 	ldw	ra,4(sp)
 18119d8:	df000017 	ldw	fp,0(sp)
 18119dc:	dec00204 	addi	sp,sp,8
 18119e0:	f800283a 	ret

018119e4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 18119e4:	defffa04 	addi	sp,sp,-24
 18119e8:	dfc00515 	stw	ra,20(sp)
 18119ec:	df000415 	stw	fp,16(sp)
 18119f0:	df000404 	addi	fp,sp,16
 18119f4:	e13ffc15 	stw	r4,-16(fp)
 18119f8:	e17ffd15 	stw	r5,-12(fp)
 18119fc:	e1bffe15 	stw	r6,-8(fp)
 1811a00:	e1ffff15 	stw	r7,-4(fp)
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	if( pxNewTimer != NULL )
 1811a04:	e0800317 	ldw	r2,12(fp)
 1811a08:	10001926 	beq	r2,zero,1811a70 <prvInitialiseNewTimer+0x8c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 1811a0c:	18123cc0 	call	18123cc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 1811a10:	e0800317 	ldw	r2,12(fp)
 1811a14:	e0fffc17 	ldw	r3,-16(fp)
 1811a18:	10c00015 	stw	r3,0(r2)
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 1811a1c:	e0800317 	ldw	r2,12(fp)
 1811a20:	e0fffd17 	ldw	r3,-12(fp)
 1811a24:	10c00615 	stw	r3,24(r2)
		pxNewTimer->pvTimerID = pvTimerID;
 1811a28:	e0800317 	ldw	r2,12(fp)
 1811a2c:	e0ffff17 	ldw	r3,-4(fp)
 1811a30:	10c00715 	stw	r3,28(r2)
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 1811a34:	e0800317 	ldw	r2,12(fp)
 1811a38:	e0c00217 	ldw	r3,8(fp)
 1811a3c:	10c00815 	stw	r3,32(r2)
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 1811a40:	e0800317 	ldw	r2,12(fp)
 1811a44:	10800104 	addi	r2,r2,4
 1811a48:	1009883a 	mov	r4,r2
 1811a4c:	182b8cc0 	call	182b8cc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 1811a50:	e0bffe17 	ldw	r2,-8(fp)
 1811a54:	10000626 	beq	r2,zero,1811a70 <prvInitialiseNewTimer+0x8c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 1811a58:	e0800317 	ldw	r2,12(fp)
 1811a5c:	10800a03 	ldbu	r2,40(r2)
 1811a60:	10800114 	ori	r2,r2,4
 1811a64:	1007883a 	mov	r3,r2
 1811a68:	e0800317 	ldw	r2,12(fp)
 1811a6c:	10c00a05 	stb	r3,40(r2)
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 1811a70:	0001883a 	nop
 1811a74:	e037883a 	mov	sp,fp
 1811a78:	dfc00117 	ldw	ra,4(sp)
 1811a7c:	df000017 	ldw	fp,0(sp)
 1811a80:	dec00204 	addi	sp,sp,8
 1811a84:	f800283a 	ret

01811a88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 1811a88:	defff604 	addi	sp,sp,-40
 1811a8c:	dfc00915 	stw	ra,36(sp)
 1811a90:	df000815 	stw	fp,32(sp)
 1811a94:	df000804 	addi	fp,sp,32
 1811a98:	e13ffc15 	stw	r4,-16(fp)
 1811a9c:	e17ffd15 	stw	r5,-12(fp)
 1811aa0:	e1bffe15 	stw	r6,-8(fp)
 1811aa4:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn = pdFAIL;
 1811aa8:	e03ff815 	stw	zero,-32(fp)

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 1811aac:	d0a7e417 	ldw	r2,-24688(gp)
 1811ab0:	10002626 	beq	r2,zero,1811b4c <xTimerGenericCommand+0xc4>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 1811ab4:	e0bffd17 	ldw	r2,-12(fp)
 1811ab8:	e0bff915 	stw	r2,-28(fp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 1811abc:	e0bffe17 	ldw	r2,-8(fp)
 1811ac0:	e0bffa15 	stw	r2,-24(fp)
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 1811ac4:	e0bffc17 	ldw	r2,-16(fp)
 1811ac8:	e0bffb15 	stw	r2,-20(fp)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 1811acc:	e0bffd17 	ldw	r2,-12(fp)
 1811ad0:	10800188 	cmpgei	r2,r2,6
 1811ad4:	1000151e 	bne	r2,zero,1811b2c <xTimerGenericCommand+0xa4>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 1811ad8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1811adc:	10800098 	cmpnei	r2,r2,2
 1811ae0:	1000091e 	bne	r2,zero,1811b08 <xTimerGenericCommand+0x80>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 1811ae4:	d0a7e417 	ldw	r2,-24688(gp)
 1811ae8:	e0fff904 	addi	r3,fp,-28
 1811aec:	000f883a 	mov	r7,zero
 1811af0:	e1800217 	ldw	r6,8(fp)
 1811af4:	180b883a 	mov	r5,r3
 1811af8:	1009883a 	mov	r4,r2
 1811afc:	180d9880 	call	180d988 <xQueueGenericSend>
 1811b00:	e0bff815 	stw	r2,-32(fp)
 1811b04:	00001106 	br	1811b4c <xTimerGenericCommand+0xc4>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 1811b08:	d0a7e417 	ldw	r2,-24688(gp)
 1811b0c:	e0fff904 	addi	r3,fp,-28
 1811b10:	000f883a 	mov	r7,zero
 1811b14:	000d883a 	mov	r6,zero
 1811b18:	180b883a 	mov	r5,r3
 1811b1c:	1009883a 	mov	r4,r2
 1811b20:	180d9880 	call	180d988 <xQueueGenericSend>
 1811b24:	e0bff815 	stw	r2,-32(fp)
 1811b28:	00000806 	br	1811b4c <xTimerGenericCommand+0xc4>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1811b2c:	d0a7e417 	ldw	r2,-24688(gp)
 1811b30:	e0fff904 	addi	r3,fp,-28
 1811b34:	000f883a 	mov	r7,zero
 1811b38:	e1bfff17 	ldw	r6,-4(fp)
 1811b3c:	180b883a 	mov	r5,r3
 1811b40:	1009883a 	mov	r4,r2
 1811b44:	180db6c0 	call	180db6c <xQueueGenericSendFromISR>
 1811b48:	e0bff815 	stw	r2,-32(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 1811b4c:	e0bff817 	ldw	r2,-32(fp)
}
 1811b50:	e037883a 	mov	sp,fp
 1811b54:	dfc00117 	ldw	ra,4(sp)
 1811b58:	df000017 	ldw	fp,0(sp)
 1811b5c:	dec00204 	addi	sp,sp,8
 1811b60:	f800283a 	ret

01811b64 <xTimerGetTimerDaemonTaskHandle>:
/*-----------------------------------------------------------*/

TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
{
 1811b64:	deffff04 	addi	sp,sp,-4
 1811b68:	df000015 	stw	fp,0(sp)
 1811b6c:	d839883a 	mov	fp,sp
	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
	started, then xTimerTaskHandle will be NULL. */
	configASSERT( ( xTimerTaskHandle != NULL ) );
	return xTimerTaskHandle;
 1811b70:	d0a7e517 	ldw	r2,-24684(gp)
}
 1811b74:	e037883a 	mov	sp,fp
 1811b78:	df000017 	ldw	fp,0(sp)
 1811b7c:	dec00104 	addi	sp,sp,4
 1811b80:	f800283a 	ret

01811b84 <xTimerGetPeriod>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 1811b84:	defffd04 	addi	sp,sp,-12
 1811b88:	df000215 	stw	fp,8(sp)
 1811b8c:	df000204 	addi	fp,sp,8
 1811b90:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = xTimer;
 1811b94:	e0bfff17 	ldw	r2,-4(fp)
 1811b98:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( xTimer );
	return pxTimer->xTimerPeriodInTicks;
 1811b9c:	e0bffe17 	ldw	r2,-8(fp)
 1811ba0:	10800617 	ldw	r2,24(r2)
}
 1811ba4:	e037883a 	mov	sp,fp
 1811ba8:	df000017 	ldw	fp,0(sp)
 1811bac:	dec00104 	addi	sp,sp,4
 1811bb0:	f800283a 	ret

01811bb4 <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
{
 1811bb4:	defffb04 	addi	sp,sp,-20
 1811bb8:	dfc00415 	stw	ra,16(sp)
 1811bbc:	df000315 	stw	fp,12(sp)
 1811bc0:	df000304 	addi	fp,sp,12
 1811bc4:	e13ffe15 	stw	r4,-8(fp)
 1811bc8:	e17fff15 	stw	r5,-4(fp)
Timer_t * pxTimer =  xTimer;
 1811bcc:	e0bffe17 	ldw	r2,-8(fp)
 1811bd0:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( xTimer );
	taskENTER_CRITICAL();
 1811bd4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1811bd8:	10000126 	beq	r2,zero,1811be0 <vTimerSetReloadMode+0x2c>
 1811bdc:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		if( uxAutoReload != pdFALSE )
 1811be0:	e0bfff17 	ldw	r2,-4(fp)
 1811be4:	10000726 	beq	r2,zero,1811c04 <vTimerSetReloadMode+0x50>
		{
			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 1811be8:	e0bffd17 	ldw	r2,-12(fp)
 1811bec:	10800a03 	ldbu	r2,40(r2)
 1811bf0:	10800114 	ori	r2,r2,4
 1811bf4:	1007883a 	mov	r3,r2
 1811bf8:	e0bffd17 	ldw	r2,-12(fp)
 1811bfc:	10c00a05 	stb	r3,40(r2)
 1811c00:	00000706 	br	1811c20 <vTimerSetReloadMode+0x6c>
		}
		else
		{
			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 1811c04:	e0bffd17 	ldw	r2,-12(fp)
 1811c08:	10c00a03 	ldbu	r3,40(r2)
 1811c0c:	00bffec4 	movi	r2,-5
 1811c10:	1884703a 	and	r2,r3,r2
 1811c14:	1007883a 	mov	r3,r2
 1811c18:	e0bffd17 	ldw	r2,-12(fp)
 1811c1c:	10c00a05 	stb	r3,40(r2)
		}
	}
	taskEXIT_CRITICAL();
 1811c20:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1811c24:	10000126 	beq	r2,zero,1811c2c <vTimerSetReloadMode+0x78>
 1811c28:	1810f900 	call	1810f90 <vTaskExitCritical>
}
 1811c2c:	0001883a 	nop
 1811c30:	e037883a 	mov	sp,fp
 1811c34:	dfc00117 	ldw	ra,4(sp)
 1811c38:	df000017 	ldw	fp,0(sp)
 1811c3c:	dec00204 	addi	sp,sp,8
 1811c40:	f800283a 	ret

01811c44 <uxTimerGetReloadMode>:
/*-----------------------------------------------------------*/

UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
{
 1811c44:	defffb04 	addi	sp,sp,-20
 1811c48:	dfc00415 	stw	ra,16(sp)
 1811c4c:	df000315 	stw	fp,12(sp)
 1811c50:	df000304 	addi	fp,sp,12
 1811c54:	e13fff15 	stw	r4,-4(fp)
Timer_t * pxTimer =  xTimer;
 1811c58:	e0bfff17 	ldw	r2,-4(fp)
 1811c5c:	e0bffe15 	stw	r2,-8(fp)
UBaseType_t uxReturn;

	configASSERT( xTimer );
	taskENTER_CRITICAL();
 1811c60:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1811c64:	10000126 	beq	r2,zero,1811c6c <uxTimerGetReloadMode+0x28>
 1811c68:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 1811c6c:	e0bffe17 	ldw	r2,-8(fp)
 1811c70:	10800a03 	ldbu	r2,40(r2)
 1811c74:	10803fcc 	andi	r2,r2,255
 1811c78:	1080010c 	andi	r2,r2,4
 1811c7c:	1000021e 	bne	r2,zero,1811c88 <uxTimerGetReloadMode+0x44>
		{
			/* Not an auto-reload timer. */
			uxReturn = ( UBaseType_t ) pdFALSE;
 1811c80:	e03ffd15 	stw	zero,-12(fp)
 1811c84:	00000206 	br	1811c90 <uxTimerGetReloadMode+0x4c>
		}
		else
		{
			/* Is an auto-reload timer. */
			uxReturn = ( UBaseType_t ) pdTRUE;
 1811c88:	00800044 	movi	r2,1
 1811c8c:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
 1811c90:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1811c94:	10000126 	beq	r2,zero,1811c9c <uxTimerGetReloadMode+0x58>
 1811c98:	1810f900 	call	1810f90 <vTaskExitCritical>

	return uxReturn;
 1811c9c:	e0bffd17 	ldw	r2,-12(fp)
}
 1811ca0:	e037883a 	mov	sp,fp
 1811ca4:	dfc00117 	ldw	ra,4(sp)
 1811ca8:	df000017 	ldw	fp,0(sp)
 1811cac:	dec00204 	addi	sp,sp,8
 1811cb0:	f800283a 	ret

01811cb4 <xTimerGetExpiryTime>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 1811cb4:	defffc04 	addi	sp,sp,-16
 1811cb8:	df000315 	stw	fp,12(sp)
 1811cbc:	df000304 	addi	fp,sp,12
 1811cc0:	e13fff15 	stw	r4,-4(fp)
Timer_t * pxTimer =  xTimer;
 1811cc4:	e0bfff17 	ldw	r2,-4(fp)
 1811cc8:	e0bffd15 	stw	r2,-12(fp)
TickType_t xReturn;

	configASSERT( xTimer );
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1811ccc:	e0bffd17 	ldw	r2,-12(fp)
 1811cd0:	10800117 	ldw	r2,4(r2)
 1811cd4:	e0bffe15 	stw	r2,-8(fp)
	return xReturn;
 1811cd8:	e0bffe17 	ldw	r2,-8(fp)
}
 1811cdc:	e037883a 	mov	sp,fp
 1811ce0:	df000017 	ldw	fp,0(sp)
 1811ce4:	dec00104 	addi	sp,sp,4
 1811ce8:	f800283a 	ret

01811cec <pcTimerGetName>:
/*-----------------------------------------------------------*/

const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 1811cec:	defffd04 	addi	sp,sp,-12
 1811cf0:	df000215 	stw	fp,8(sp)
 1811cf4:	df000204 	addi	fp,sp,8
 1811cf8:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = xTimer;
 1811cfc:	e0bfff17 	ldw	r2,-4(fp)
 1811d00:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
 1811d04:	e0bffe17 	ldw	r2,-8(fp)
 1811d08:	10800017 	ldw	r2,0(r2)
}
 1811d0c:	e037883a 	mov	sp,fp
 1811d10:	df000017 	ldw	fp,0(sp)
 1811d14:	dec00104 	addi	sp,sp,4
 1811d18:	f800283a 	ret

01811d1c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 1811d1c:	defff904 	addi	sp,sp,-28
 1811d20:	dfc00615 	stw	ra,24(sp)
 1811d24:	df000515 	stw	fp,20(sp)
 1811d28:	df000504 	addi	fp,sp,20
 1811d2c:	e13ffe15 	stw	r4,-8(fp)
 1811d30:	e17fff15 	stw	r5,-4(fp)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1811d34:	d0a7e217 	ldw	r2,-24696(gp)
 1811d38:	10800317 	ldw	r2,12(r2)
 1811d3c:	10800317 	ldw	r2,12(r2)
 1811d40:	e0bffc15 	stw	r2,-16(fp)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1811d44:	e0bffc17 	ldw	r2,-16(fp)
 1811d48:	10800104 	addi	r2,r2,4
 1811d4c:	1009883a 	mov	r4,r2
 1811d50:	182ba5c0 	call	182ba5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1811d54:	e0bffc17 	ldw	r2,-16(fp)
 1811d58:	10800a03 	ldbu	r2,40(r2)
 1811d5c:	10803fcc 	andi	r2,r2,255
 1811d60:	1080010c 	andi	r2,r2,4
 1811d64:	10001226 	beq	r2,zero,1811db0 <prvProcessExpiredTimer+0x94>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 1811d68:	e0bffc17 	ldw	r2,-16(fp)
 1811d6c:	10c00617 	ldw	r3,24(r2)
 1811d70:	e0bffe17 	ldw	r2,-8(fp)
 1811d74:	1885883a 	add	r2,r3,r2
 1811d78:	e1fffe17 	ldw	r7,-8(fp)
 1811d7c:	e1bfff17 	ldw	r6,-4(fp)
 1811d80:	100b883a 	mov	r5,r2
 1811d84:	e13ffc17 	ldw	r4,-16(fp)
 1811d88:	1811fc40 	call	1811fc4 <prvInsertTimerInActiveList>
 1811d8c:	10000f26 	beq	r2,zero,1811dcc <prvProcessExpiredTimer+0xb0>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 1811d90:	d8000015 	stw	zero,0(sp)
 1811d94:	000f883a 	mov	r7,zero
 1811d98:	e1bffe17 	ldw	r6,-8(fp)
 1811d9c:	000b883a 	mov	r5,zero
 1811da0:	e13ffc17 	ldw	r4,-16(fp)
 1811da4:	1811a880 	call	1811a88 <xTimerGenericCommand>
 1811da8:	e0bffd15 	stw	r2,-12(fp)
 1811dac:	00000706 	br	1811dcc <prvProcessExpiredTimer+0xb0>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1811db0:	e0bffc17 	ldw	r2,-16(fp)
 1811db4:	10c00a03 	ldbu	r3,40(r2)
 1811db8:	00bfff84 	movi	r2,-2
 1811dbc:	1884703a 	and	r2,r3,r2
 1811dc0:	1007883a 	mov	r3,r2
 1811dc4:	e0bffc17 	ldw	r2,-16(fp)
 1811dc8:	10c00a05 	stb	r3,40(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1811dcc:	e0bffc17 	ldw	r2,-16(fp)
 1811dd0:	10800817 	ldw	r2,32(r2)
 1811dd4:	e13ffc17 	ldw	r4,-16(fp)
 1811dd8:	103ee83a 	callr	r2
}
 1811ddc:	0001883a 	nop
 1811de0:	e037883a 	mov	sp,fp
 1811de4:	dfc00117 	ldw	ra,4(sp)
 1811de8:	df000017 	ldw	fp,0(sp)
 1811dec:	dec00204 	addi	sp,sp,8
 1811df0:	f800283a 	ret

01811df4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 1811df4:	defffb04 	addi	sp,sp,-20
 1811df8:	dfc00415 	stw	ra,16(sp)
 1811dfc:	df000315 	stw	fp,12(sp)
 1811e00:	df000304 	addi	fp,sp,12
 1811e04:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 1811e08:	e0bffe04 	addi	r2,fp,-8
 1811e0c:	1009883a 	mov	r4,r2
 1811e10:	1811ef80 	call	1811ef8 <prvGetNextExpireTime>
 1811e14:	e0bffd15 	stw	r2,-12(fp)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 1811e18:	e0bffe17 	ldw	r2,-8(fp)
 1811e1c:	100b883a 	mov	r5,r2
 1811e20:	e13ffd17 	ldw	r4,-12(fp)
 1811e24:	1811e300 	call	1811e30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 1811e28:	18120a00 	call	18120a0 <prvProcessReceivedCommands>
	}
 1811e2c:	003ff606 	br	1811e08 <__ram_exceptions_end+0xff801b18>

01811e30 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 1811e30:	defffa04 	addi	sp,sp,-24
 1811e34:	dfc00515 	stw	ra,20(sp)
 1811e38:	df000415 	stw	fp,16(sp)
 1811e3c:	df000404 	addi	fp,sp,16
 1811e40:	e13ffe15 	stw	r4,-8(fp)
 1811e44:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 1811e48:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1811e4c:	e0bffd04 	addi	r2,fp,-12
 1811e50:	1009883a 	mov	r4,r2
 1811e54:	1811f600 	call	1811f60 <prvSampleTimeNow>
 1811e58:	e0bffc15 	stw	r2,-16(fp)
		if( xTimerListsWereSwitched == pdFALSE )
 1811e5c:	e0bffd17 	ldw	r2,-12(fp)
 1811e60:	10001e1e 	bne	r2,zero,1811edc <prvProcessTimerOrBlockTask+0xac>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 1811e64:	e0bfff17 	ldw	r2,-4(fp)
 1811e68:	1000081e 	bne	r2,zero,1811e8c <prvProcessTimerOrBlockTask+0x5c>
 1811e6c:	e0bffe17 	ldw	r2,-8(fp)
 1811e70:	e0fffc17 	ldw	r3,-16(fp)
 1811e74:	18800536 	bltu	r3,r2,1811e8c <prvProcessTimerOrBlockTask+0x5c>
			{
				( void ) xTaskResumeAll();
 1811e78:	180f9f00 	call	180f9f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1811e7c:	e17ffc17 	ldw	r5,-16(fp)
 1811e80:	e13ffe17 	ldw	r4,-8(fp)
 1811e84:	1811d1c0 	call	1811d1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 1811e88:	00001506 	br	1811ee0 <prvProcessTimerOrBlockTask+0xb0>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 1811e8c:	e0bfff17 	ldw	r2,-4(fp)
 1811e90:	10000726 	beq	r2,zero,1811eb0 <prvProcessTimerOrBlockTask+0x80>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 1811e94:	d0a7e317 	ldw	r2,-24692(gp)
 1811e98:	10800017 	ldw	r2,0(r2)
 1811e9c:	1000021e 	bne	r2,zero,1811ea8 <prvProcessTimerOrBlockTask+0x78>
 1811ea0:	00800044 	movi	r2,1
 1811ea4:	00000106 	br	1811eac <prvProcessTimerOrBlockTask+0x7c>
 1811ea8:	0005883a 	mov	r2,zero
 1811eac:	e0bfff15 	stw	r2,-4(fp)
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 1811eb0:	d127e417 	ldw	r4,-24688(gp)
 1811eb4:	e0fffe17 	ldw	r3,-8(fp)
 1811eb8:	e0bffc17 	ldw	r2,-16(fp)
 1811ebc:	1885c83a 	sub	r2,r3,r2
 1811ec0:	e1bfff17 	ldw	r6,-4(fp)
 1811ec4:	100b883a 	mov	r5,r2
 1811ec8:	180eb4c0 	call	180eb4c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 1811ecc:	180f9f00 	call	180f9f0 <xTaskResumeAll>
 1811ed0:	1000031e 	bne	r2,zero,1811ee0 <prvProcessTimerOrBlockTask+0xb0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 1811ed4:	003b683a 	trap	0
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 1811ed8:	00000106 	br	1811ee0 <prvProcessTimerOrBlockTask+0xb0>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 1811edc:	180f9f00 	call	180f9f0 <xTaskResumeAll>
		}
	}
}
 1811ee0:	0001883a 	nop
 1811ee4:	e037883a 	mov	sp,fp
 1811ee8:	dfc00117 	ldw	ra,4(sp)
 1811eec:	df000017 	ldw	fp,0(sp)
 1811ef0:	dec00204 	addi	sp,sp,8
 1811ef4:	f800283a 	ret

01811ef8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 1811ef8:	defffd04 	addi	sp,sp,-12
 1811efc:	df000215 	stw	fp,8(sp)
 1811f00:	df000204 	addi	fp,sp,8
 1811f04:	e13fff15 	stw	r4,-4(fp)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 1811f08:	d0a7e217 	ldw	r2,-24696(gp)
 1811f0c:	10800017 	ldw	r2,0(r2)
 1811f10:	1000021e 	bne	r2,zero,1811f1c <prvGetNextExpireTime+0x24>
 1811f14:	00800044 	movi	r2,1
 1811f18:	00000106 	br	1811f20 <prvGetNextExpireTime+0x28>
 1811f1c:	0005883a 	mov	r2,zero
 1811f20:	e0ffff17 	ldw	r3,-4(fp)
 1811f24:	18800015 	stw	r2,0(r3)
	if( *pxListWasEmpty == pdFALSE )
 1811f28:	e0bfff17 	ldw	r2,-4(fp)
 1811f2c:	10800017 	ldw	r2,0(r2)
 1811f30:	1000051e 	bne	r2,zero,1811f48 <prvGetNextExpireTime+0x50>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1811f34:	d0a7e217 	ldw	r2,-24696(gp)
 1811f38:	10800317 	ldw	r2,12(r2)
 1811f3c:	10800017 	ldw	r2,0(r2)
 1811f40:	e0bffe15 	stw	r2,-8(fp)
 1811f44:	00000106 	br	1811f4c <prvGetNextExpireTime+0x54>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 1811f48:	e03ffe15 	stw	zero,-8(fp)
	}

	return xNextExpireTime;
 1811f4c:	e0bffe17 	ldw	r2,-8(fp)
}
 1811f50:	e037883a 	mov	sp,fp
 1811f54:	df000017 	ldw	fp,0(sp)
 1811f58:	dec00104 	addi	sp,sp,4
 1811f5c:	f800283a 	ret

01811f60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 1811f60:	defffc04 	addi	sp,sp,-16
 1811f64:	dfc00315 	stw	ra,12(sp)
 1811f68:	df000215 	stw	fp,8(sp)
 1811f6c:	df000204 	addi	fp,sp,8
 1811f70:	e13fff15 	stw	r4,-4(fp)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 1811f74:	180fb580 	call	180fb58 <xTaskGetTickCount>
 1811f78:	e0bffe15 	stw	r2,-8(fp)

	if( xTimeNow < xLastTime )
 1811f7c:	d0a7e617 	ldw	r2,-24680(gp)
 1811f80:	e0fffe17 	ldw	r3,-8(fp)
 1811f84:	1880052e 	bgeu	r3,r2,1811f9c <prvSampleTimeNow+0x3c>
	{
		prvSwitchTimerLists();
 1811f88:	18122b80 	call	18122b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 1811f8c:	e0bfff17 	ldw	r2,-4(fp)
 1811f90:	00c00044 	movi	r3,1
 1811f94:	10c00015 	stw	r3,0(r2)
 1811f98:	00000206 	br	1811fa4 <prvSampleTimeNow+0x44>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 1811f9c:	e0bfff17 	ldw	r2,-4(fp)
 1811fa0:	10000015 	stw	zero,0(r2)
	}

	xLastTime = xTimeNow;
 1811fa4:	e0bffe17 	ldw	r2,-8(fp)
 1811fa8:	d0a7e615 	stw	r2,-24680(gp)

	return xTimeNow;
 1811fac:	e0bffe17 	ldw	r2,-8(fp)
}
 1811fb0:	e037883a 	mov	sp,fp
 1811fb4:	dfc00117 	ldw	ra,4(sp)
 1811fb8:	df000017 	ldw	fp,0(sp)
 1811fbc:	dec00204 	addi	sp,sp,8
 1811fc0:	f800283a 	ret

01811fc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 1811fc4:	defff904 	addi	sp,sp,-28
 1811fc8:	dfc00615 	stw	ra,24(sp)
 1811fcc:	df000515 	stw	fp,20(sp)
 1811fd0:	df000504 	addi	fp,sp,20
 1811fd4:	e13ffc15 	stw	r4,-16(fp)
 1811fd8:	e17ffd15 	stw	r5,-12(fp)
 1811fdc:	e1bffe15 	stw	r6,-8(fp)
 1811fe0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xProcessTimerNow = pdFALSE;
 1811fe4:	e03ffb15 	stw	zero,-20(fp)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 1811fe8:	e0bffc17 	ldw	r2,-16(fp)
 1811fec:	e0fffd17 	ldw	r3,-12(fp)
 1811ff0:	10c00115 	stw	r3,4(r2)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1811ff4:	e0bffc17 	ldw	r2,-16(fp)
 1811ff8:	e0fffc17 	ldw	r3,-16(fp)
 1811ffc:	10c00415 	stw	r3,16(r2)

	if( xNextExpiryTime <= xTimeNow )
 1812000:	e0bffd17 	ldw	r2,-12(fp)
 1812004:	e0fffe17 	ldw	r3,-8(fp)
 1812008:	18801036 	bltu	r3,r2,181204c <prvInsertTimerInActiveList+0x88>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 181200c:	e0fffe17 	ldw	r3,-8(fp)
 1812010:	e0bfff17 	ldw	r2,-4(fp)
 1812014:	1887c83a 	sub	r3,r3,r2
 1812018:	e0bffc17 	ldw	r2,-16(fp)
 181201c:	10800617 	ldw	r2,24(r2)
 1812020:	18800336 	bltu	r3,r2,1812030 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 1812024:	00800044 	movi	r2,1
 1812028:	e0bffb15 	stw	r2,-20(fp)
 181202c:	00001606 	br	1812088 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 1812030:	d0e7e317 	ldw	r3,-24692(gp)
 1812034:	e0bffc17 	ldw	r2,-16(fp)
 1812038:	10800104 	addi	r2,r2,4
 181203c:	100b883a 	mov	r5,r2
 1812040:	1809883a 	mov	r4,r3
 1812044:	182b9840 	call	182b984 <vListInsert>
 1812048:	00000f06 	br	1812088 <prvInsertTimerInActiveList+0xc4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 181204c:	e0fffe17 	ldw	r3,-8(fp)
 1812050:	e0bfff17 	ldw	r2,-4(fp)
 1812054:	1880062e 	bgeu	r3,r2,1812070 <prvInsertTimerInActiveList+0xac>
 1812058:	e0fffd17 	ldw	r3,-12(fp)
 181205c:	e0bfff17 	ldw	r2,-4(fp)
 1812060:	18800336 	bltu	r3,r2,1812070 <prvInsertTimerInActiveList+0xac>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 1812064:	00800044 	movi	r2,1
 1812068:	e0bffb15 	stw	r2,-20(fp)
 181206c:	00000606 	br	1812088 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1812070:	d0e7e217 	ldw	r3,-24696(gp)
 1812074:	e0bffc17 	ldw	r2,-16(fp)
 1812078:	10800104 	addi	r2,r2,4
 181207c:	100b883a 	mov	r5,r2
 1812080:	1809883a 	mov	r4,r3
 1812084:	182b9840 	call	182b984 <vListInsert>
		}
	}

	return xProcessTimerNow;
 1812088:	e0bffb17 	ldw	r2,-20(fp)
}
 181208c:	e037883a 	mov	sp,fp
 1812090:	dfc00117 	ldw	ra,4(sp)
 1812094:	df000017 	ldw	fp,0(sp)
 1812098:	dec00204 	addi	sp,sp,8
 181209c:	f800283a 	ret

018120a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 18120a0:	defff604 	addi	sp,sp,-40
 18120a4:	dfc00915 	stw	ra,36(sp)
 18120a8:	df000815 	stw	fp,32(sp)
 18120ac:	df000804 	addi	fp,sp,32
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 18120b0:	00007406 	br	1812284 <prvProcessReceivedCommands+0x1e4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 18120b4:	e0bffc17 	ldw	r2,-16(fp)
 18120b8:	10007216 	blt	r2,zero,1812284 <prvProcessReceivedCommands+0x1e4>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 18120bc:	e0bffe17 	ldw	r2,-8(fp)
 18120c0:	e0bff915 	stw	r2,-28(fp)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 18120c4:	e0bff917 	ldw	r2,-28(fp)
 18120c8:	10800517 	ldw	r2,20(r2)
 18120cc:	10000426 	beq	r2,zero,18120e0 <prvProcessReceivedCommands+0x40>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 18120d0:	e0bff917 	ldw	r2,-28(fp)
 18120d4:	10800104 	addi	r2,r2,4
 18120d8:	1009883a 	mov	r4,r2
 18120dc:	182ba5c0 	call	182ba5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 18120e0:	e0bfff04 	addi	r2,fp,-4
 18120e4:	1009883a 	mov	r4,r2
 18120e8:	1811f600 	call	1811f60 <prvSampleTimeNow>
 18120ec:	e0bffa15 	stw	r2,-24(fp)

			switch( xMessage.xMessageID )
 18120f0:	e0bffc17 	ldw	r2,-16(fp)
 18120f4:	10c002a8 	cmpgeui	r3,r2,10
 18120f8:	1800611e 	bne	r3,zero,1812280 <prvProcessReceivedCommands+0x1e0>
 18120fc:	100690ba 	slli	r3,r2,2
 1812100:	00806074 	movhi	r2,385
 1812104:	10884504 	addi	r2,r2,8468
 1812108:	1885883a 	add	r2,r3,r2
 181210c:	10800017 	ldw	r2,0(r2)
 1812110:	1000683a 	jmp	r2
 1812114:	0181213c 	xorhi	r6,zero,1156
 1812118:	0181213c 	xorhi	r6,zero,1156
 181211c:	0181213c 	xorhi	r6,zero,1156
 1812120:	018121d4 	movui	r6,1159
 1812124:	018121f4 	movhi	r6,1159
 1812128:	01812240 	call	181224 <__alt_mem_tse_descriptor_memory_0+0x181224>
 181212c:	0181213c 	xorhi	r6,zero,1156
 1812130:	0181213c 	xorhi	r6,zero,1156
 1812134:	018121d4 	movui	r6,1159
 1812138:	018121f4 	movhi	r6,1159
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 181213c:	e0bff917 	ldw	r2,-28(fp)
 1812140:	10800a03 	ldbu	r2,40(r2)
 1812144:	10800054 	ori	r2,r2,1
 1812148:	1007883a 	mov	r3,r2
 181214c:	e0bff917 	ldw	r2,-28(fp)
 1812150:	10c00a05 	stb	r3,40(r2)
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 1812154:	e0fffd17 	ldw	r3,-12(fp)
 1812158:	e0bff917 	ldw	r2,-28(fp)
 181215c:	10800617 	ldw	r2,24(r2)
 1812160:	1885883a 	add	r2,r3,r2
 1812164:	e0fffd17 	ldw	r3,-12(fp)
 1812168:	180f883a 	mov	r7,r3
 181216c:	e1bffa17 	ldw	r6,-24(fp)
 1812170:	100b883a 	mov	r5,r2
 1812174:	e13ff917 	ldw	r4,-28(fp)
 1812178:	1811fc40 	call	1811fc4 <prvInsertTimerInActiveList>
 181217c:	10004126 	beq	r2,zero,1812284 <prvProcessReceivedCommands+0x1e4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1812180:	e0bff917 	ldw	r2,-28(fp)
 1812184:	10800817 	ldw	r2,32(r2)
 1812188:	e13ff917 	ldw	r4,-28(fp)
 181218c:	103ee83a 	callr	r2
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1812190:	e0bff917 	ldw	r2,-28(fp)
 1812194:	10800a03 	ldbu	r2,40(r2)
 1812198:	10803fcc 	andi	r2,r2,255
 181219c:	1080010c 	andi	r2,r2,4
 18121a0:	10003826 	beq	r2,zero,1812284 <prvProcessReceivedCommands+0x1e4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 18121a4:	e0fffd17 	ldw	r3,-12(fp)
 18121a8:	e0bff917 	ldw	r2,-28(fp)
 18121ac:	10800617 	ldw	r2,24(r2)
 18121b0:	1885883a 	add	r2,r3,r2
 18121b4:	d8000015 	stw	zero,0(sp)
 18121b8:	000f883a 	mov	r7,zero
 18121bc:	100d883a 	mov	r6,r2
 18121c0:	000b883a 	mov	r5,zero
 18121c4:	e13ff917 	ldw	r4,-28(fp)
 18121c8:	1811a880 	call	1811a88 <xTimerGenericCommand>
 18121cc:	e0bffb15 	stw	r2,-20(fp)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 18121d0:	00002c06 	br	1812284 <prvProcessReceivedCommands+0x1e4>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 18121d4:	e0bff917 	ldw	r2,-28(fp)
 18121d8:	10c00a03 	ldbu	r3,40(r2)
 18121dc:	00bfff84 	movi	r2,-2
 18121e0:	1884703a 	and	r2,r3,r2
 18121e4:	1007883a 	mov	r3,r2
 18121e8:	e0bff917 	ldw	r2,-28(fp)
 18121ec:	10c00a05 	stb	r3,40(r2)
					break;
 18121f0:	00002406 	br	1812284 <prvProcessReceivedCommands+0x1e4>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 18121f4:	e0bff917 	ldw	r2,-28(fp)
 18121f8:	10800a03 	ldbu	r2,40(r2)
 18121fc:	10800054 	ori	r2,r2,1
 1812200:	1007883a 	mov	r3,r2
 1812204:	e0bff917 	ldw	r2,-28(fp)
 1812208:	10c00a05 	stb	r3,40(r2)
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 181220c:	e0fffd17 	ldw	r3,-12(fp)
 1812210:	e0bff917 	ldw	r2,-28(fp)
 1812214:	10c00615 	stw	r3,24(r2)
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 1812218:	e0bff917 	ldw	r2,-28(fp)
 181221c:	10c00617 	ldw	r3,24(r2)
 1812220:	e0bffa17 	ldw	r2,-24(fp)
 1812224:	1885883a 	add	r2,r3,r2
 1812228:	e1fffa17 	ldw	r7,-24(fp)
 181222c:	e1bffa17 	ldw	r6,-24(fp)
 1812230:	100b883a 	mov	r5,r2
 1812234:	e13ff917 	ldw	r4,-28(fp)
 1812238:	1811fc40 	call	1811fc4 <prvInsertTimerInActiveList>
					break;
 181223c:	00001106 	br	1812284 <prvProcessReceivedCommands+0x1e4>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 1812240:	e0bff917 	ldw	r2,-28(fp)
 1812244:	10800a03 	ldbu	r2,40(r2)
 1812248:	10803fcc 	andi	r2,r2,255
 181224c:	1080008c 	andi	r2,r2,2
 1812250:	1000031e 	bne	r2,zero,1812260 <prvProcessReceivedCommands+0x1c0>
						{
							vPortFree( pxTimer );
 1812254:	e13ff917 	ldw	r4,-28(fp)
 1812258:	182b8200 	call	182b820 <vPortFree>
 181225c:	00000906 	br	1812284 <prvProcessReceivedCommands+0x1e4>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1812260:	e0bff917 	ldw	r2,-28(fp)
 1812264:	10c00a03 	ldbu	r3,40(r2)
 1812268:	00bfff84 	movi	r2,-2
 181226c:	1884703a 	and	r2,r3,r2
 1812270:	1007883a 	mov	r3,r2
 1812274:	e0bff917 	ldw	r2,-28(fp)
 1812278:	10c00a05 	stb	r3,40(r2)
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 181227c:	00000106 	br	1812284 <prvProcessReceivedCommands+0x1e4>

				default	:
					/* Don't expect to get here. */
					break;
 1812280:	0001883a 	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 1812284:	d0a7e417 	ldw	r2,-24688(gp)
 1812288:	e0fffc04 	addi	r3,fp,-16
 181228c:	000d883a 	mov	r6,zero
 1812290:	180b883a 	mov	r5,r3
 1812294:	1009883a 	mov	r4,r2
 1812298:	180dd3c0 	call	180dd3c <xQueueReceive>
 181229c:	103f851e 	bne	r2,zero,18120b4 <__ram_exceptions_end+0xff801dc4>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 18122a0:	0001883a 	nop
 18122a4:	e037883a 	mov	sp,fp
 18122a8:	dfc00117 	ldw	ra,4(sp)
 18122ac:	df000017 	ldw	fp,0(sp)
 18122b0:	dec00204 	addi	sp,sp,8
 18122b4:	f800283a 	ret

018122b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 18122b8:	defff804 	addi	sp,sp,-32
 18122bc:	dfc00715 	stw	ra,28(sp)
 18122c0:	df000615 	stw	fp,24(sp)
 18122c4:	df000604 	addi	fp,sp,24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 18122c8:	00003106 	br	1812390 <prvSwitchTimerLists+0xd8>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 18122cc:	d0a7e217 	ldw	r2,-24696(gp)
 18122d0:	10800317 	ldw	r2,12(r2)
 18122d4:	10800017 	ldw	r2,0(r2)
 18122d8:	e0bffb15 	stw	r2,-20(fp)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 18122dc:	d0a7e217 	ldw	r2,-24696(gp)
 18122e0:	10800317 	ldw	r2,12(r2)
 18122e4:	10800317 	ldw	r2,12(r2)
 18122e8:	e0bffc15 	stw	r2,-16(fp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 18122ec:	e0bffc17 	ldw	r2,-16(fp)
 18122f0:	10800104 	addi	r2,r2,4
 18122f4:	1009883a 	mov	r4,r2
 18122f8:	182ba5c0 	call	182ba5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 18122fc:	e0bffc17 	ldw	r2,-16(fp)
 1812300:	10800817 	ldw	r2,32(r2)
 1812304:	e13ffc17 	ldw	r4,-16(fp)
 1812308:	103ee83a 	callr	r2

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 181230c:	e0bffc17 	ldw	r2,-16(fp)
 1812310:	10800a03 	ldbu	r2,40(r2)
 1812314:	10803fcc 	andi	r2,r2,255
 1812318:	1080010c 	andi	r2,r2,4
 181231c:	10001c26 	beq	r2,zero,1812390 <prvSwitchTimerLists+0xd8>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 1812320:	e0bffc17 	ldw	r2,-16(fp)
 1812324:	10c00617 	ldw	r3,24(r2)
 1812328:	e0bffb17 	ldw	r2,-20(fp)
 181232c:	1885883a 	add	r2,r3,r2
 1812330:	e0bffd15 	stw	r2,-12(fp)
			if( xReloadTime > xNextExpireTime )
 1812334:	e0bffd17 	ldw	r2,-12(fp)
 1812338:	e0fffb17 	ldw	r3,-20(fp)
 181233c:	18800d2e 	bgeu	r3,r2,1812374 <prvSwitchTimerLists+0xbc>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 1812340:	e0bffc17 	ldw	r2,-16(fp)
 1812344:	e0fffd17 	ldw	r3,-12(fp)
 1812348:	10c00115 	stw	r3,4(r2)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 181234c:	e0bffc17 	ldw	r2,-16(fp)
 1812350:	e0fffc17 	ldw	r3,-16(fp)
 1812354:	10c00415 	stw	r3,16(r2)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1812358:	d0e7e217 	ldw	r3,-24696(gp)
 181235c:	e0bffc17 	ldw	r2,-16(fp)
 1812360:	10800104 	addi	r2,r2,4
 1812364:	100b883a 	mov	r5,r2
 1812368:	1809883a 	mov	r4,r3
 181236c:	182b9840 	call	182b984 <vListInsert>
 1812370:	00000706 	br	1812390 <prvSwitchTimerLists+0xd8>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 1812374:	d8000015 	stw	zero,0(sp)
 1812378:	000f883a 	mov	r7,zero
 181237c:	e1bffb17 	ldw	r6,-20(fp)
 1812380:	000b883a 	mov	r5,zero
 1812384:	e13ffc17 	ldw	r4,-16(fp)
 1812388:	1811a880 	call	1811a88 <xTimerGenericCommand>
 181238c:	e0bffe15 	stw	r2,-8(fp)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 1812390:	d0a7e217 	ldw	r2,-24696(gp)
 1812394:	10800017 	ldw	r2,0(r2)
 1812398:	103fcc1e 	bne	r2,zero,18122cc <__ram_exceptions_end+0xff801fdc>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 181239c:	d0a7e217 	ldw	r2,-24696(gp)
 18123a0:	e0bfff15 	stw	r2,-4(fp)
	pxCurrentTimerList = pxOverflowTimerList;
 18123a4:	d0a7e317 	ldw	r2,-24692(gp)
 18123a8:	d0a7e215 	stw	r2,-24696(gp)
	pxOverflowTimerList = pxTemp;
 18123ac:	e0bfff17 	ldw	r2,-4(fp)
 18123b0:	d0a7e315 	stw	r2,-24692(gp)
}
 18123b4:	0001883a 	nop
 18123b8:	e037883a 	mov	sp,fp
 18123bc:	dfc00117 	ldw	ra,4(sp)
 18123c0:	df000017 	ldw	fp,0(sp)
 18123c4:	dec00204 	addi	sp,sp,8
 18123c8:	f800283a 	ret

018123cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 18123cc:	defffe04 	addi	sp,sp,-8
 18123d0:	dfc00115 	stw	ra,4(sp)
 18123d4:	df000015 	stw	fp,0(sp)
 18123d8:	d839883a 	mov	fp,sp
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 18123dc:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18123e0:	10000126 	beq	r2,zero,18123e8 <prvCheckForValidListAndQueue+0x1c>
 18123e4:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
 18123e8:	d0a7e417 	ldw	r2,-24688(gp)
 18123ec:	1000111e 	bne	r2,zero,1812434 <prvCheckForValidListAndQueue+0x68>
		{
			vListInitialise( &xActiveTimerList1 );
 18123f0:	01006134 	movhi	r4,388
 18123f4:	211cc204 	addi	r4,r4,29448
 18123f8:	182b8640 	call	182b864 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 18123fc:	01006134 	movhi	r4,388
 1812400:	211cc704 	addi	r4,r4,29468
 1812404:	182b8640 	call	182b864 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 1812408:	00806134 	movhi	r2,388
 181240c:	109cc204 	addi	r2,r2,29448
 1812410:	d0a7e215 	stw	r2,-24696(gp)
			pxOverflowTimerList = &xActiveTimerList2;
 1812414:	00806134 	movhi	r2,388
 1812418:	109cc704 	addi	r2,r2,29468
 181241c:	d0a7e315 	stw	r2,-24692(gp)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 1812420:	000d883a 	mov	r6,zero
 1812424:	01400304 	movi	r5,12
 1812428:	01000284 	movi	r4,10
 181242c:	180d6200 	call	180d620 <xQueueGenericCreate>
 1812430:	d0a7e415 	stw	r2,-24688(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 1812434:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1812438:	10000126 	beq	r2,zero,1812440 <prvCheckForValidListAndQueue+0x74>
 181243c:	1810f900 	call	1810f90 <vTaskExitCritical>
}
 1812440:	0001883a 	nop
 1812444:	e037883a 	mov	sp,fp
 1812448:	dfc00117 	ldw	ra,4(sp)
 181244c:	df000017 	ldw	fp,0(sp)
 1812450:	dec00204 	addi	sp,sp,8
 1812454:	f800283a 	ret

01812458 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 1812458:	defffb04 	addi	sp,sp,-20
 181245c:	dfc00415 	stw	ra,16(sp)
 1812460:	df000315 	stw	fp,12(sp)
 1812464:	df000304 	addi	fp,sp,12
 1812468:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 181246c:	e0bfff17 	ldw	r2,-4(fp)
 1812470:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 1812474:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1812478:	10000126 	beq	r2,zero,1812480 <xTimerIsTimerActive+0x28>
 181247c:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 1812480:	e0bffe17 	ldw	r2,-8(fp)
 1812484:	10800a03 	ldbu	r2,40(r2)
 1812488:	10803fcc 	andi	r2,r2,255
 181248c:	1080004c 	andi	r2,r2,1
 1812490:	1000021e 	bne	r2,zero,181249c <xTimerIsTimerActive+0x44>
		{
			xReturn = pdFALSE;
 1812494:	e03ffd15 	stw	zero,-12(fp)
 1812498:	00000206 	br	18124a4 <xTimerIsTimerActive+0x4c>
		}
		else
		{
			xReturn = pdTRUE;
 181249c:	00800044 	movi	r2,1
 18124a0:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
 18124a4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18124a8:	10000126 	beq	r2,zero,18124b0 <xTimerIsTimerActive+0x58>
 18124ac:	1810f900 	call	1810f90 <vTaskExitCritical>

	return xReturn;
 18124b0:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 Can't be pointer to const due to the typedef. */
 18124b4:	e037883a 	mov	sp,fp
 18124b8:	dfc00117 	ldw	ra,4(sp)
 18124bc:	df000017 	ldw	fp,0(sp)
 18124c0:	dec00204 	addi	sp,sp,8
 18124c4:	f800283a 	ret

018124c8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 18124c8:	defffb04 	addi	sp,sp,-20
 18124cc:	dfc00415 	stw	ra,16(sp)
 18124d0:	df000315 	stw	fp,12(sp)
 18124d4:	df000304 	addi	fp,sp,12
 18124d8:	e13fff15 	stw	r4,-4(fp)
Timer_t * const pxTimer = xTimer;
 18124dc:	e0bfff17 	ldw	r2,-4(fp)
 18124e0:	e0bffd15 	stw	r2,-12(fp)
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 18124e4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18124e8:	10000126 	beq	r2,zero,18124f0 <pvTimerGetTimerID+0x28>
 18124ec:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 18124f0:	e0bffd17 	ldw	r2,-12(fp)
 18124f4:	10800717 	ldw	r2,28(r2)
 18124f8:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 18124fc:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1812500:	10000126 	beq	r2,zero,1812508 <pvTimerGetTimerID+0x40>
 1812504:	1810f900 	call	1810f90 <vTaskExitCritical>

	return pvReturn;
 1812508:	e0bffe17 	ldw	r2,-8(fp)
}
 181250c:	e037883a 	mov	sp,fp
 1812510:	dfc00117 	ldw	ra,4(sp)
 1812514:	df000017 	ldw	fp,0(sp)
 1812518:	dec00204 	addi	sp,sp,8
 181251c:	f800283a 	ret

01812520 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 1812520:	defffb04 	addi	sp,sp,-20
 1812524:	dfc00415 	stw	ra,16(sp)
 1812528:	df000315 	stw	fp,12(sp)
 181252c:	df000304 	addi	fp,sp,12
 1812530:	e13ffe15 	stw	r4,-8(fp)
 1812534:	e17fff15 	stw	r5,-4(fp)
Timer_t * const pxTimer = xTimer;
 1812538:	e0bffe17 	ldw	r2,-8(fp)
 181253c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 1812540:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1812544:	10000126 	beq	r2,zero,181254c <vTimerSetTimerID+0x2c>
 1812548:	1810f480 	call	1810f48 <vTaskEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 181254c:	e0bffd17 	ldw	r2,-12(fp)
 1812550:	e0ffff17 	ldw	r3,-4(fp)
 1812554:	10c00715 	stw	r3,28(r2)
	}
	taskEXIT_CRITICAL();
 1812558:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 181255c:	10000126 	beq	r2,zero,1812564 <vTimerSetTimerID+0x44>
 1812560:	1810f900 	call	1810f90 <vTaskExitCritical>
}
 1812564:	0001883a 	nop
 1812568:	e037883a 	mov	sp,fp
 181256c:	dfc00117 	ldw	ra,4(sp)
 1812570:	df000017 	ldw	fp,0(sp)
 1812574:	dec00204 	addi	sp,sp,8
 1812578:	f800283a 	ret

0181257c <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
	{
 181257c:	defffe04 	addi	sp,sp,-8
 1812580:	df000115 	stw	fp,4(sp)
 1812584:	df000104 	addi	fp,sp,4
 1812588:	e13fff15 	stw	r4,-4(fp)
		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 181258c:	e0bfff17 	ldw	r2,-4(fp)
 1812590:	10800917 	ldw	r2,36(r2)
	}
 1812594:	e037883a 	mov	sp,fp
 1812598:	df000017 	ldw	fp,0(sp)
 181259c:	dec00104 	addi	sp,sp,4
 18125a0:	f800283a 	ret

018125a4 <vTimerSetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
	{
 18125a4:	defffd04 	addi	sp,sp,-12
 18125a8:	df000215 	stw	fp,8(sp)
 18125ac:	df000204 	addi	fp,sp,8
 18125b0:	e13ffe15 	stw	r4,-8(fp)
 18125b4:	e17fff15 	stw	r5,-4(fp)
		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 18125b8:	e0bffe17 	ldw	r2,-8(fp)
 18125bc:	e0ffff17 	ldw	r3,-4(fp)
 18125c0:	10c00915 	stw	r3,36(r2)
	}
 18125c4:	0001883a 	nop
 18125c8:	e037883a 	mov	sp,fp
 18125cc:	df000017 	ldw	fp,0(sp)
 18125d0:	dec00104 	addi	sp,sp,4
 18125d4:	f800283a 	ret

018125d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 18125d8:	defffc04 	addi	sp,sp,-16
 18125dc:	df000315 	stw	fp,12(sp)
 18125e0:	df000304 	addi	fp,sp,12
 18125e4:	e13ffd15 	stw	r4,-12(fp)
 18125e8:	e17ffe15 	stw	r5,-8(fp)
 18125ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
 18125f0:	e0bfff17 	ldw	r2,-4(fp)
}
 18125f4:	e037883a 	mov	sp,fp
 18125f8:	df000017 	ldw	fp,0(sp)
 18125fc:	dec00104 	addi	sp,sp,4
 1812600:	f800283a 	ret

01812604 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1812604:	defffd04 	addi	sp,sp,-12
 1812608:	dfc00215 	stw	ra,8(sp)
 181260c:	df000115 	stw	fp,4(sp)
 1812610:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1812614:	00806134 	movhi	r2,388
 1812618:	1080cd04 	addi	r2,r2,820
 181261c:	e0bfff15 	stw	r2,-4(fp)
 1812620:	00000606 	br	181263c <_do_ctors+0x38>
        (*ctor) (); 
 1812624:	e0bfff17 	ldw	r2,-4(fp)
 1812628:	10800017 	ldw	r2,0(r2)
 181262c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1812630:	e0bfff17 	ldw	r2,-4(fp)
 1812634:	10bfff04 	addi	r2,r2,-4
 1812638:	e0bfff15 	stw	r2,-4(fp)
 181263c:	e0ffff17 	ldw	r3,-4(fp)
 1812640:	00806134 	movhi	r2,388
 1812644:	1080ce04 	addi	r2,r2,824
 1812648:	18bff62e 	bgeu	r3,r2,1812624 <__ram_exceptions_end+0xff802334>
        (*ctor) (); 
}
 181264c:	0001883a 	nop
 1812650:	e037883a 	mov	sp,fp
 1812654:	dfc00117 	ldw	ra,4(sp)
 1812658:	df000017 	ldw	fp,0(sp)
 181265c:	dec00204 	addi	sp,sp,8
 1812660:	f800283a 	ret

01812664 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1812664:	defffd04 	addi	sp,sp,-12
 1812668:	dfc00215 	stw	ra,8(sp)
 181266c:	df000115 	stw	fp,4(sp)
 1812670:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1812674:	00806134 	movhi	r2,388
 1812678:	1080cd04 	addi	r2,r2,820
 181267c:	e0bfff15 	stw	r2,-4(fp)
 1812680:	00000606 	br	181269c <_do_dtors+0x38>
        (*dtor) (); 
 1812684:	e0bfff17 	ldw	r2,-4(fp)
 1812688:	10800017 	ldw	r2,0(r2)
 181268c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1812690:	e0bfff17 	ldw	r2,-4(fp)
 1812694:	10bfff04 	addi	r2,r2,-4
 1812698:	e0bfff15 	stw	r2,-4(fp)
 181269c:	e0ffff17 	ldw	r3,-4(fp)
 18126a0:	00806134 	movhi	r2,388
 18126a4:	1080ce04 	addi	r2,r2,824
 18126a8:	18bff62e 	bgeu	r3,r2,1812684 <__ram_exceptions_end+0xff802394>
        (*dtor) (); 
}
 18126ac:	0001883a 	nop
 18126b0:	e037883a 	mov	sp,fp
 18126b4:	dfc00117 	ldw	ra,4(sp)
 18126b8:	df000017 	ldw	fp,0(sp)
 18126bc:	dec00204 	addi	sp,sp,8
 18126c0:	f800283a 	ret

018126c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 18126c4:	defffe04 	addi	sp,sp,-8
 18126c8:	dfc00115 	stw	ra,4(sp)
 18126cc:	df000015 	stw	fp,0(sp)
 18126d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 18126d4:	d0a01a17 	ldw	r2,-32664(gp)
 18126d8:	10000326 	beq	r2,zero,18126e8 <alt_get_errno+0x24>
 18126dc:	d0a01a17 	ldw	r2,-32664(gp)
 18126e0:	103ee83a 	callr	r2
 18126e4:	00000106 	br	18126ec <alt_get_errno+0x28>
 18126e8:	d0a7ce04 	addi	r2,gp,-24776
}
 18126ec:	e037883a 	mov	sp,fp
 18126f0:	dfc00117 	ldw	ra,4(sp)
 18126f4:	df000017 	ldw	fp,0(sp)
 18126f8:	dec00204 	addi	sp,sp,8
 18126fc:	f800283a 	ret

01812700 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1812700:	defffb04 	addi	sp,sp,-20
 1812704:	dfc00415 	stw	ra,16(sp)
 1812708:	df000315 	stw	fp,12(sp)
 181270c:	df000304 	addi	fp,sp,12
 1812710:	e13ffe15 	stw	r4,-8(fp)
 1812714:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1812718:	e0bffe17 	ldw	r2,-8(fp)
 181271c:	10000616 	blt	r2,zero,1812738 <fstat+0x38>
 1812720:	e0bffe17 	ldw	r2,-8(fp)
 1812724:	10c00324 	muli	r3,r2,12
 1812728:	00806134 	movhi	r2,388
 181272c:	108f1304 	addi	r2,r2,15436
 1812730:	1885883a 	add	r2,r3,r2
 1812734:	00000106 	br	181273c <fstat+0x3c>
 1812738:	0005883a 	mov	r2,zero
 181273c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1812740:	e0bffd17 	ldw	r2,-12(fp)
 1812744:	10001026 	beq	r2,zero,1812788 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1812748:	e0bffd17 	ldw	r2,-12(fp)
 181274c:	10800017 	ldw	r2,0(r2)
 1812750:	10800817 	ldw	r2,32(r2)
 1812754:	10000726 	beq	r2,zero,1812774 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 1812758:	e0bffd17 	ldw	r2,-12(fp)
 181275c:	10800017 	ldw	r2,0(r2)
 1812760:	10800817 	ldw	r2,32(r2)
 1812764:	e17fff17 	ldw	r5,-4(fp)
 1812768:	e13ffd17 	ldw	r4,-12(fp)
 181276c:	103ee83a 	callr	r2
 1812770:	00000a06 	br	181279c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1812774:	e0bfff17 	ldw	r2,-4(fp)
 1812778:	00c80004 	movi	r3,8192
 181277c:	10c00115 	stw	r3,4(r2)
      return 0;
 1812780:	0005883a 	mov	r2,zero
 1812784:	00000506 	br	181279c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1812788:	18126c40 	call	18126c4 <alt_get_errno>
 181278c:	1007883a 	mov	r3,r2
 1812790:	00801444 	movi	r2,81
 1812794:	18800015 	stw	r2,0(r3)
    return -1;
 1812798:	00bfffc4 	movi	r2,-1
  }
}
 181279c:	e037883a 	mov	sp,fp
 18127a0:	dfc00117 	ldw	ra,4(sp)
 18127a4:	df000017 	ldw	fp,0(sp)
 18127a8:	dec00204 	addi	sp,sp,8
 18127ac:	f800283a 	ret

018127b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 18127b0:	defff904 	addi	sp,sp,-28
 18127b4:	dfc00615 	stw	ra,24(sp)
 18127b8:	df000515 	stw	fp,20(sp)
 18127bc:	df000504 	addi	fp,sp,20
 18127c0:	e13ffc15 	stw	r4,-16(fp)
 18127c4:	e17ffd15 	stw	r5,-12(fp)
 18127c8:	e1bffe15 	stw	r6,-8(fp)
 18127cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 18127d0:	e1bfff17 	ldw	r6,-4(fp)
 18127d4:	e17ffe17 	ldw	r5,-8(fp)
 18127d8:	e13ffd17 	ldw	r4,-12(fp)
 18127dc:	1812ccc0 	call	1812ccc <open>
 18127e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 18127e4:	e0bffb17 	ldw	r2,-20(fp)
 18127e8:	10001c16 	blt	r2,zero,181285c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 18127ec:	00806134 	movhi	r2,388
 18127f0:	108f1304 	addi	r2,r2,15436
 18127f4:	e0fffb17 	ldw	r3,-20(fp)
 18127f8:	18c00324 	muli	r3,r3,12
 18127fc:	10c5883a 	add	r2,r2,r3
 1812800:	10c00017 	ldw	r3,0(r2)
 1812804:	e0bffc17 	ldw	r2,-16(fp)
 1812808:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 181280c:	00806134 	movhi	r2,388
 1812810:	108f1304 	addi	r2,r2,15436
 1812814:	e0fffb17 	ldw	r3,-20(fp)
 1812818:	18c00324 	muli	r3,r3,12
 181281c:	10c5883a 	add	r2,r2,r3
 1812820:	10800104 	addi	r2,r2,4
 1812824:	10c00017 	ldw	r3,0(r2)
 1812828:	e0bffc17 	ldw	r2,-16(fp)
 181282c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1812830:	00806134 	movhi	r2,388
 1812834:	108f1304 	addi	r2,r2,15436
 1812838:	e0fffb17 	ldw	r3,-20(fp)
 181283c:	18c00324 	muli	r3,r3,12
 1812840:	10c5883a 	add	r2,r2,r3
 1812844:	10800204 	addi	r2,r2,8
 1812848:	10c00017 	ldw	r3,0(r2)
 181284c:	e0bffc17 	ldw	r2,-16(fp)
 1812850:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1812854:	e13ffb17 	ldw	r4,-20(fp)
 1812858:	18130880 	call	1813088 <alt_release_fd>
  }
} 
 181285c:	0001883a 	nop
 1812860:	e037883a 	mov	sp,fp
 1812864:	dfc00117 	ldw	ra,4(sp)
 1812868:	df000017 	ldw	fp,0(sp)
 181286c:	dec00204 	addi	sp,sp,8
 1812870:	f800283a 	ret

01812874 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1812874:	defffb04 	addi	sp,sp,-20
 1812878:	dfc00415 	stw	ra,16(sp)
 181287c:	df000315 	stw	fp,12(sp)
 1812880:	df000304 	addi	fp,sp,12
 1812884:	e13ffd15 	stw	r4,-12(fp)
 1812888:	e17ffe15 	stw	r5,-8(fp)
 181288c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1812890:	01c07fc4 	movi	r7,511
 1812894:	01800044 	movi	r6,1
 1812898:	e17ffd17 	ldw	r5,-12(fp)
 181289c:	01006134 	movhi	r4,388
 18128a0:	210f1604 	addi	r4,r4,15448
 18128a4:	18127b00 	call	18127b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 18128a8:	01c07fc4 	movi	r7,511
 18128ac:	000d883a 	mov	r6,zero
 18128b0:	e17ffe17 	ldw	r5,-8(fp)
 18128b4:	01006134 	movhi	r4,388
 18128b8:	210f1304 	addi	r4,r4,15436
 18128bc:	18127b00 	call	18127b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 18128c0:	01c07fc4 	movi	r7,511
 18128c4:	01800044 	movi	r6,1
 18128c8:	e17fff17 	ldw	r5,-4(fp)
 18128cc:	01006134 	movhi	r4,388
 18128d0:	210f1904 	addi	r4,r4,15460
 18128d4:	18127b00 	call	18127b0 <alt_open_fd>
}  
 18128d8:	0001883a 	nop
 18128dc:	e037883a 	mov	sp,fp
 18128e0:	dfc00117 	ldw	ra,4(sp)
 18128e4:	df000017 	ldw	fp,0(sp)
 18128e8:	dec00204 	addi	sp,sp,8
 18128ec:	f800283a 	ret

018128f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 18128f0:	defffe04 	addi	sp,sp,-8
 18128f4:	dfc00115 	stw	ra,4(sp)
 18128f8:	df000015 	stw	fp,0(sp)
 18128fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1812900:	d0a01a17 	ldw	r2,-32664(gp)
 1812904:	10000326 	beq	r2,zero,1812914 <alt_get_errno+0x24>
 1812908:	d0a01a17 	ldw	r2,-32664(gp)
 181290c:	103ee83a 	callr	r2
 1812910:	00000106 	br	1812918 <alt_get_errno+0x28>
 1812914:	d0a7ce04 	addi	r2,gp,-24776
}
 1812918:	e037883a 	mov	sp,fp
 181291c:	dfc00117 	ldw	ra,4(sp)
 1812920:	df000017 	ldw	fp,0(sp)
 1812924:	dec00204 	addi	sp,sp,8
 1812928:	f800283a 	ret

0181292c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 181292c:	deffed04 	addi	sp,sp,-76
 1812930:	dfc01215 	stw	ra,72(sp)
 1812934:	df001115 	stw	fp,68(sp)
 1812938:	df001104 	addi	fp,sp,68
 181293c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1812940:	e0bfff17 	ldw	r2,-4(fp)
 1812944:	10000616 	blt	r2,zero,1812960 <isatty+0x34>
 1812948:	e0bfff17 	ldw	r2,-4(fp)
 181294c:	10c00324 	muli	r3,r2,12
 1812950:	00806134 	movhi	r2,388
 1812954:	108f1304 	addi	r2,r2,15436
 1812958:	1885883a 	add	r2,r3,r2
 181295c:	00000106 	br	1812964 <isatty+0x38>
 1812960:	0005883a 	mov	r2,zero
 1812964:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1812968:	e0bfef17 	ldw	r2,-68(fp)
 181296c:	10000e26 	beq	r2,zero,18129a8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1812970:	e0bfef17 	ldw	r2,-68(fp)
 1812974:	10800017 	ldw	r2,0(r2)
 1812978:	10800817 	ldw	r2,32(r2)
 181297c:	1000021e 	bne	r2,zero,1812988 <isatty+0x5c>
    {
      return 1;
 1812980:	00800044 	movi	r2,1
 1812984:	00000d06 	br	18129bc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1812988:	e0bff004 	addi	r2,fp,-64
 181298c:	100b883a 	mov	r5,r2
 1812990:	e13fff17 	ldw	r4,-4(fp)
 1812994:	18127000 	call	1812700 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1812998:	e0bff117 	ldw	r2,-60(fp)
 181299c:	10880020 	cmpeqi	r2,r2,8192
 18129a0:	10803fcc 	andi	r2,r2,255
 18129a4:	00000506 	br	18129bc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 18129a8:	18128f00 	call	18128f0 <alt_get_errno>
 18129ac:	1007883a 	mov	r3,r2
 18129b0:	00801444 	movi	r2,81
 18129b4:	18800015 	stw	r2,0(r3)
    return 0;
 18129b8:	0005883a 	mov	r2,zero
  }
}
 18129bc:	e037883a 	mov	sp,fp
 18129c0:	dfc00117 	ldw	ra,4(sp)
 18129c4:	df000017 	ldw	fp,0(sp)
 18129c8:	dec00204 	addi	sp,sp,8
 18129cc:	f800283a 	ret

018129d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 18129d0:	defffc04 	addi	sp,sp,-16
 18129d4:	df000315 	stw	fp,12(sp)
 18129d8:	df000304 	addi	fp,sp,12
 18129dc:	e13ffd15 	stw	r4,-12(fp)
 18129e0:	e17ffe15 	stw	r5,-8(fp)
 18129e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 18129e8:	e0fffe17 	ldw	r3,-8(fp)
 18129ec:	e0bffd17 	ldw	r2,-12(fp)
 18129f0:	18800c26 	beq	r3,r2,1812a24 <alt_load_section+0x54>
  {
    while( to != end )
 18129f4:	00000806 	br	1812a18 <alt_load_section+0x48>
    {
      *to++ = *from++;
 18129f8:	e0bffe17 	ldw	r2,-8(fp)
 18129fc:	10c00104 	addi	r3,r2,4
 1812a00:	e0fffe15 	stw	r3,-8(fp)
 1812a04:	e0fffd17 	ldw	r3,-12(fp)
 1812a08:	19000104 	addi	r4,r3,4
 1812a0c:	e13ffd15 	stw	r4,-12(fp)
 1812a10:	18c00017 	ldw	r3,0(r3)
 1812a14:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1812a18:	e0fffe17 	ldw	r3,-8(fp)
 1812a1c:	e0bfff17 	ldw	r2,-4(fp)
 1812a20:	18bff51e 	bne	r3,r2,18129f8 <__ram_exceptions_end+0xff802708>
    {
      *to++ = *from++;
    }
  }
}
 1812a24:	0001883a 	nop
 1812a28:	e037883a 	mov	sp,fp
 1812a2c:	df000017 	ldw	fp,0(sp)
 1812a30:	dec00104 	addi	sp,sp,4
 1812a34:	f800283a 	ret

01812a38 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1812a38:	defffe04 	addi	sp,sp,-8
 1812a3c:	dfc00115 	stw	ra,4(sp)
 1812a40:	df000015 	stw	fp,0(sp)
 1812a44:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1812a48:	01806134 	movhi	r6,388
 1812a4c:	31948604 	addi	r6,r6,21016
 1812a50:	01406134 	movhi	r5,388
 1812a54:	294ce004 	addi	r5,r5,13184
 1812a58:	01006134 	movhi	r4,388
 1812a5c:	21148604 	addi	r4,r4,21016
 1812a60:	18129d00 	call	18129d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1812a64:	01808074 	movhi	r6,513
 1812a68:	3180bc04 	addi	r6,r6,752
 1812a6c:	01408074 	movhi	r5,513
 1812a70:	29400804 	addi	r5,r5,32
 1812a74:	01006034 	movhi	r4,384
 1812a78:	21000004 	addi	r4,r4,0
 1812a7c:	18129d00 	call	18129d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1812a80:	01806134 	movhi	r6,388
 1812a84:	318ce004 	addi	r6,r6,13184
 1812a88:	01406134 	movhi	r5,388
 1812a8c:	2940ce04 	addi	r5,r5,824
 1812a90:	01006134 	movhi	r4,388
 1812a94:	2100ce04 	addi	r4,r4,824
 1812a98:	18129d00 	call	18129d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1812a9c:	182c12c0 	call	182c12c <alt_dcache_flush_all>
  alt_icache_flush_all();
 1812aa0:	182c6c00 	call	182c6c0 <alt_icache_flush_all>
}
 1812aa4:	0001883a 	nop
 1812aa8:	e037883a 	mov	sp,fp
 1812aac:	dfc00117 	ldw	ra,4(sp)
 1812ab0:	df000017 	ldw	fp,0(sp)
 1812ab4:	dec00204 	addi	sp,sp,8
 1812ab8:	f800283a 	ret

01812abc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1812abc:	defffe04 	addi	sp,sp,-8
 1812ac0:	dfc00115 	stw	ra,4(sp)
 1812ac4:	df000015 	stw	fp,0(sp)
 1812ac8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1812acc:	d0a01a17 	ldw	r2,-32664(gp)
 1812ad0:	10000326 	beq	r2,zero,1812ae0 <alt_get_errno+0x24>
 1812ad4:	d0a01a17 	ldw	r2,-32664(gp)
 1812ad8:	103ee83a 	callr	r2
 1812adc:	00000106 	br	1812ae4 <alt_get_errno+0x28>
 1812ae0:	d0a7ce04 	addi	r2,gp,-24776
}
 1812ae4:	e037883a 	mov	sp,fp
 1812ae8:	dfc00117 	ldw	ra,4(sp)
 1812aec:	df000017 	ldw	fp,0(sp)
 1812af0:	dec00204 	addi	sp,sp,8
 1812af4:	f800283a 	ret

01812af8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1812af8:	defff904 	addi	sp,sp,-28
 1812afc:	dfc00615 	stw	ra,24(sp)
 1812b00:	df000515 	stw	fp,20(sp)
 1812b04:	df000504 	addi	fp,sp,20
 1812b08:	e13ffd15 	stw	r4,-12(fp)
 1812b0c:	e17ffe15 	stw	r5,-8(fp)
 1812b10:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1812b14:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1812b18:	e0bffd17 	ldw	r2,-12(fp)
 1812b1c:	10000616 	blt	r2,zero,1812b38 <lseek+0x40>
 1812b20:	e0bffd17 	ldw	r2,-12(fp)
 1812b24:	10c00324 	muli	r3,r2,12
 1812b28:	00806134 	movhi	r2,388
 1812b2c:	108f1304 	addi	r2,r2,15436
 1812b30:	1885883a 	add	r2,r3,r2
 1812b34:	00000106 	br	1812b3c <lseek+0x44>
 1812b38:	0005883a 	mov	r2,zero
 1812b3c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1812b40:	e0bffc17 	ldw	r2,-16(fp)
 1812b44:	10001026 	beq	r2,zero,1812b88 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1812b48:	e0bffc17 	ldw	r2,-16(fp)
 1812b4c:	10800017 	ldw	r2,0(r2)
 1812b50:	10800717 	ldw	r2,28(r2)
 1812b54:	10000926 	beq	r2,zero,1812b7c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1812b58:	e0bffc17 	ldw	r2,-16(fp)
 1812b5c:	10800017 	ldw	r2,0(r2)
 1812b60:	10800717 	ldw	r2,28(r2)
 1812b64:	e1bfff17 	ldw	r6,-4(fp)
 1812b68:	e17ffe17 	ldw	r5,-8(fp)
 1812b6c:	e13ffc17 	ldw	r4,-16(fp)
 1812b70:	103ee83a 	callr	r2
 1812b74:	e0bffb15 	stw	r2,-20(fp)
 1812b78:	00000506 	br	1812b90 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1812b7c:	00bfde84 	movi	r2,-134
 1812b80:	e0bffb15 	stw	r2,-20(fp)
 1812b84:	00000206 	br	1812b90 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1812b88:	00bfebc4 	movi	r2,-81
 1812b8c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1812b90:	e0bffb17 	ldw	r2,-20(fp)
 1812b94:	1000070e 	bge	r2,zero,1812bb4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 1812b98:	1812abc0 	call	1812abc <alt_get_errno>
 1812b9c:	1007883a 	mov	r3,r2
 1812ba0:	e0bffb17 	ldw	r2,-20(fp)
 1812ba4:	0085c83a 	sub	r2,zero,r2
 1812ba8:	18800015 	stw	r2,0(r3)
    rc = -1;
 1812bac:	00bfffc4 	movi	r2,-1
 1812bb0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1812bb4:	e0bffb17 	ldw	r2,-20(fp)
}
 1812bb8:	e037883a 	mov	sp,fp
 1812bbc:	dfc00117 	ldw	ra,4(sp)
 1812bc0:	df000017 	ldw	fp,0(sp)
 1812bc4:	dec00204 	addi	sp,sp,8
 1812bc8:	f800283a 	ret

01812bcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1812bcc:	defffe04 	addi	sp,sp,-8
 1812bd0:	dfc00115 	stw	ra,4(sp)
 1812bd4:	df000015 	stw	fp,0(sp)
 1812bd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1812bdc:	d0a01a17 	ldw	r2,-32664(gp)
 1812be0:	10000326 	beq	r2,zero,1812bf0 <alt_get_errno+0x24>
 1812be4:	d0a01a17 	ldw	r2,-32664(gp)
 1812be8:	103ee83a 	callr	r2
 1812bec:	00000106 	br	1812bf4 <alt_get_errno+0x28>
 1812bf0:	d0a7ce04 	addi	r2,gp,-24776
}
 1812bf4:	e037883a 	mov	sp,fp
 1812bf8:	dfc00117 	ldw	ra,4(sp)
 1812bfc:	df000017 	ldw	fp,0(sp)
 1812c00:	dec00204 	addi	sp,sp,8
 1812c04:	f800283a 	ret

01812c08 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1812c08:	defffd04 	addi	sp,sp,-12
 1812c0c:	df000215 	stw	fp,8(sp)
 1812c10:	df000204 	addi	fp,sp,8
 1812c14:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1812c18:	e0bfff17 	ldw	r2,-4(fp)
 1812c1c:	10800217 	ldw	r2,8(r2)
 1812c20:	10d00034 	orhi	r3,r2,16384
 1812c24:	e0bfff17 	ldw	r2,-4(fp)
 1812c28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1812c2c:	e03ffe15 	stw	zero,-8(fp)
 1812c30:	00001d06 	br	1812ca8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1812c34:	00806134 	movhi	r2,388
 1812c38:	108f1304 	addi	r2,r2,15436
 1812c3c:	e0fffe17 	ldw	r3,-8(fp)
 1812c40:	18c00324 	muli	r3,r3,12
 1812c44:	10c5883a 	add	r2,r2,r3
 1812c48:	10c00017 	ldw	r3,0(r2)
 1812c4c:	e0bfff17 	ldw	r2,-4(fp)
 1812c50:	10800017 	ldw	r2,0(r2)
 1812c54:	1880111e 	bne	r3,r2,1812c9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1812c58:	00806134 	movhi	r2,388
 1812c5c:	108f1304 	addi	r2,r2,15436
 1812c60:	e0fffe17 	ldw	r3,-8(fp)
 1812c64:	18c00324 	muli	r3,r3,12
 1812c68:	10c5883a 	add	r2,r2,r3
 1812c6c:	10800204 	addi	r2,r2,8
 1812c70:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1812c74:	1000090e 	bge	r2,zero,1812c9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1812c78:	e0bffe17 	ldw	r2,-8(fp)
 1812c7c:	10c00324 	muli	r3,r2,12
 1812c80:	00806134 	movhi	r2,388
 1812c84:	108f1304 	addi	r2,r2,15436
 1812c88:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1812c8c:	e0bfff17 	ldw	r2,-4(fp)
 1812c90:	18800226 	beq	r3,r2,1812c9c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1812c94:	00bffcc4 	movi	r2,-13
 1812c98:	00000806 	br	1812cbc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1812c9c:	e0bffe17 	ldw	r2,-8(fp)
 1812ca0:	10800044 	addi	r2,r2,1
 1812ca4:	e0bffe15 	stw	r2,-8(fp)
 1812ca8:	d0a00a17 	ldw	r2,-32728(gp)
 1812cac:	1007883a 	mov	r3,r2
 1812cb0:	e0bffe17 	ldw	r2,-8(fp)
 1812cb4:	18bfdf2e 	bgeu	r3,r2,1812c34 <__ram_exceptions_end+0xff802944>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1812cb8:	0005883a 	mov	r2,zero
}
 1812cbc:	e037883a 	mov	sp,fp
 1812cc0:	df000017 	ldw	fp,0(sp)
 1812cc4:	dec00104 	addi	sp,sp,4
 1812cc8:	f800283a 	ret

01812ccc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1812ccc:	defff604 	addi	sp,sp,-40
 1812cd0:	dfc00915 	stw	ra,36(sp)
 1812cd4:	df000815 	stw	fp,32(sp)
 1812cd8:	df000804 	addi	fp,sp,32
 1812cdc:	e13ffd15 	stw	r4,-12(fp)
 1812ce0:	e17ffe15 	stw	r5,-8(fp)
 1812ce4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1812ce8:	00bfffc4 	movi	r2,-1
 1812cec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1812cf0:	00bffb44 	movi	r2,-19
 1812cf4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1812cf8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1812cfc:	d1600804 	addi	r5,gp,-32736
 1812d00:	e13ffd17 	ldw	r4,-12(fp)
 1812d04:	182c2540 	call	182c254 <alt_find_dev>
 1812d08:	e0bff815 	stw	r2,-32(fp)
 1812d0c:	e0bff817 	ldw	r2,-32(fp)
 1812d10:	1000051e 	bne	r2,zero,1812d28 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1812d14:	e13ffd17 	ldw	r4,-12(fp)
 1812d18:	182c2e40 	call	182c2e4 <alt_find_file>
 1812d1c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1812d20:	00800044 	movi	r2,1
 1812d24:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1812d28:	e0bff817 	ldw	r2,-32(fp)
 1812d2c:	10002926 	beq	r2,zero,1812dd4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1812d30:	e13ff817 	ldw	r4,-32(fp)
 1812d34:	182c3ec0 	call	182c3ec <alt_get_fd>
 1812d38:	e0bff915 	stw	r2,-28(fp)
 1812d3c:	e0bff917 	ldw	r2,-28(fp)
 1812d40:	1000030e 	bge	r2,zero,1812d50 <open+0x84>
    {
      status = index;
 1812d44:	e0bff917 	ldw	r2,-28(fp)
 1812d48:	e0bffa15 	stw	r2,-24(fp)
 1812d4c:	00002306 	br	1812ddc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 1812d50:	e0bff917 	ldw	r2,-28(fp)
 1812d54:	10c00324 	muli	r3,r2,12
 1812d58:	00806134 	movhi	r2,388
 1812d5c:	108f1304 	addi	r2,r2,15436
 1812d60:	1885883a 	add	r2,r3,r2
 1812d64:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1812d68:	e0fffe17 	ldw	r3,-8(fp)
 1812d6c:	00900034 	movhi	r2,16384
 1812d70:	10bfffc4 	addi	r2,r2,-1
 1812d74:	1886703a 	and	r3,r3,r2
 1812d78:	e0bffc17 	ldw	r2,-16(fp)
 1812d7c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1812d80:	e0bffb17 	ldw	r2,-20(fp)
 1812d84:	1000051e 	bne	r2,zero,1812d9c <open+0xd0>
 1812d88:	e13ffc17 	ldw	r4,-16(fp)
 1812d8c:	1812c080 	call	1812c08 <alt_file_locked>
 1812d90:	e0bffa15 	stw	r2,-24(fp)
 1812d94:	e0bffa17 	ldw	r2,-24(fp)
 1812d98:	10001016 	blt	r2,zero,1812ddc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1812d9c:	e0bff817 	ldw	r2,-32(fp)
 1812da0:	10800317 	ldw	r2,12(r2)
 1812da4:	10000826 	beq	r2,zero,1812dc8 <open+0xfc>
 1812da8:	e0bff817 	ldw	r2,-32(fp)
 1812dac:	10800317 	ldw	r2,12(r2)
 1812db0:	e1ffff17 	ldw	r7,-4(fp)
 1812db4:	e1bffe17 	ldw	r6,-8(fp)
 1812db8:	e17ffd17 	ldw	r5,-12(fp)
 1812dbc:	e13ffc17 	ldw	r4,-16(fp)
 1812dc0:	103ee83a 	callr	r2
 1812dc4:	00000106 	br	1812dcc <open+0x100>
 1812dc8:	0005883a 	mov	r2,zero
 1812dcc:	e0bffa15 	stw	r2,-24(fp)
 1812dd0:	00000206 	br	1812ddc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1812dd4:	00bffb44 	movi	r2,-19
 1812dd8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1812ddc:	e0bffa17 	ldw	r2,-24(fp)
 1812de0:	1000090e 	bge	r2,zero,1812e08 <open+0x13c>
  {
    alt_release_fd (index);  
 1812de4:	e13ff917 	ldw	r4,-28(fp)
 1812de8:	18130880 	call	1813088 <alt_release_fd>
    ALT_ERRNO = -status;
 1812dec:	1812bcc0 	call	1812bcc <alt_get_errno>
 1812df0:	1007883a 	mov	r3,r2
 1812df4:	e0bffa17 	ldw	r2,-24(fp)
 1812df8:	0085c83a 	sub	r2,zero,r2
 1812dfc:	18800015 	stw	r2,0(r3)
    return -1;
 1812e00:	00bfffc4 	movi	r2,-1
 1812e04:	00000106 	br	1812e0c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 1812e08:	e0bff917 	ldw	r2,-28(fp)
}
 1812e0c:	e037883a 	mov	sp,fp
 1812e10:	dfc00117 	ldw	ra,4(sp)
 1812e14:	df000017 	ldw	fp,0(sp)
 1812e18:	dec00204 	addi	sp,sp,8
 1812e1c:	f800283a 	ret

01812e20 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 1812e20:	defff204 	addi	sp,sp,-56
 1812e24:	dfc00a15 	stw	ra,40(sp)
 1812e28:	df000915 	stw	fp,36(sp)
 1812e2c:	df000904 	addi	fp,sp,36
 1812e30:	e13fff15 	stw	r4,-4(fp)
 1812e34:	e1400215 	stw	r5,8(fp)
 1812e38:	e1800315 	stw	r6,12(fp)
 1812e3c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 1812e40:	e0800204 	addi	r2,fp,8
 1812e44:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 1812e48:	e0bfff17 	ldw	r2,-4(fp)
 1812e4c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 1812e50:	00006f06 	br	1813010 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 1812e54:	e0bff807 	ldb	r2,-32(fp)
 1812e58:	10800960 	cmpeqi	r2,r2,37
 1812e5c:	1000041e 	bne	r2,zero,1812e70 <alt_printf+0x50>
        {
            alt_putchar(c);
 1812e60:	e0bff807 	ldb	r2,-32(fp)
 1812e64:	1009883a 	mov	r4,r2
 1812e68:	181304c0 	call	181304c <alt_putchar>
 1812e6c:	00006806 	br	1813010 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 1812e70:	e0bff717 	ldw	r2,-36(fp)
 1812e74:	10c00044 	addi	r3,r2,1
 1812e78:	e0fff715 	stw	r3,-36(fp)
 1812e7c:	10800003 	ldbu	r2,0(r2)
 1812e80:	e0bff805 	stb	r2,-32(fp)
 1812e84:	e0bff807 	ldb	r2,-32(fp)
 1812e88:	10006926 	beq	r2,zero,1813030 <alt_printf+0x210>
            {
                if (c == '%')
 1812e8c:	e0bff807 	ldb	r2,-32(fp)
 1812e90:	10800958 	cmpnei	r2,r2,37
 1812e94:	1000041e 	bne	r2,zero,1812ea8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 1812e98:	e0bff807 	ldb	r2,-32(fp)
 1812e9c:	1009883a 	mov	r4,r2
 1812ea0:	181304c0 	call	181304c <alt_putchar>
 1812ea4:	00005a06 	br	1813010 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 1812ea8:	e0bff807 	ldb	r2,-32(fp)
 1812eac:	108018d8 	cmpnei	r2,r2,99
 1812eb0:	1000081e 	bne	r2,zero,1812ed4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 1812eb4:	e0bffe17 	ldw	r2,-8(fp)
 1812eb8:	10c00104 	addi	r3,r2,4
 1812ebc:	e0fffe15 	stw	r3,-8(fp)
 1812ec0:	10800017 	ldw	r2,0(r2)
 1812ec4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 1812ec8:	e13ffd17 	ldw	r4,-12(fp)
 1812ecc:	181304c0 	call	181304c <alt_putchar>
 1812ed0:	00004f06 	br	1813010 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 1812ed4:	e0bff807 	ldb	r2,-32(fp)
 1812ed8:	10801e18 	cmpnei	r2,r2,120
 1812edc:	1000341e 	bne	r2,zero,1812fb0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 1812ee0:	e0bffe17 	ldw	r2,-8(fp)
 1812ee4:	10c00104 	addi	r3,r2,4
 1812ee8:	e0fffe15 	stw	r3,-8(fp)
 1812eec:	10800017 	ldw	r2,0(r2)
 1812ef0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 1812ef4:	e0bffb17 	ldw	r2,-20(fp)
 1812ef8:	1000031e 	bne	r2,zero,1812f08 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 1812efc:	01000c04 	movi	r4,48
 1812f00:	181304c0 	call	181304c <alt_putchar>
                        continue;
 1812f04:	00004206 	br	1813010 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 1812f08:	00800704 	movi	r2,28
 1812f0c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 1812f10:	00000306 	br	1812f20 <alt_printf+0x100>
                        digit_shift -= 4;
 1812f14:	e0bff917 	ldw	r2,-28(fp)
 1812f18:	10bfff04 	addi	r2,r2,-4
 1812f1c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 1812f20:	00c003c4 	movi	r3,15
 1812f24:	e0bff917 	ldw	r2,-28(fp)
 1812f28:	1884983a 	sll	r2,r3,r2
 1812f2c:	1007883a 	mov	r3,r2
 1812f30:	e0bffb17 	ldw	r2,-20(fp)
 1812f34:	1884703a 	and	r2,r3,r2
 1812f38:	103ff626 	beq	r2,zero,1812f14 <__ram_exceptions_end+0xff802c24>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 1812f3c:	00001906 	br	1812fa4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 1812f40:	00c003c4 	movi	r3,15
 1812f44:	e0bff917 	ldw	r2,-28(fp)
 1812f48:	1884983a 	sll	r2,r3,r2
 1812f4c:	1007883a 	mov	r3,r2
 1812f50:	e0bffb17 	ldw	r2,-20(fp)
 1812f54:	1886703a 	and	r3,r3,r2
 1812f58:	e0bff917 	ldw	r2,-28(fp)
 1812f5c:	1884d83a 	srl	r2,r3,r2
 1812f60:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 1812f64:	e0bffc17 	ldw	r2,-16(fp)
 1812f68:	108002a8 	cmpgeui	r2,r2,10
 1812f6c:	1000041e 	bne	r2,zero,1812f80 <alt_printf+0x160>
                            c = '0' + digit;
 1812f70:	e0bffc17 	ldw	r2,-16(fp)
 1812f74:	10800c04 	addi	r2,r2,48
 1812f78:	e0bff805 	stb	r2,-32(fp)
 1812f7c:	00000306 	br	1812f8c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 1812f80:	e0bffc17 	ldw	r2,-16(fp)
 1812f84:	108015c4 	addi	r2,r2,87
 1812f88:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 1812f8c:	e0bff807 	ldb	r2,-32(fp)
 1812f90:	1009883a 	mov	r4,r2
 1812f94:	181304c0 	call	181304c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 1812f98:	e0bff917 	ldw	r2,-28(fp)
 1812f9c:	10bfff04 	addi	r2,r2,-4
 1812fa0:	e0bff915 	stw	r2,-28(fp)
 1812fa4:	e0bff917 	ldw	r2,-28(fp)
 1812fa8:	103fe50e 	bge	r2,zero,1812f40 <__ram_exceptions_end+0xff802c50>
 1812fac:	00001806 	br	1813010 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 1812fb0:	e0bff807 	ldb	r2,-32(fp)
 1812fb4:	10801cd8 	cmpnei	r2,r2,115
 1812fb8:	1000151e 	bne	r2,zero,1813010 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 1812fbc:	e0bffe17 	ldw	r2,-8(fp)
 1812fc0:	10c00104 	addi	r3,r2,4
 1812fc4:	e0fffe15 	stw	r3,-8(fp)
 1812fc8:	10800017 	ldw	r2,0(r2)
 1812fcc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 1812fd0:	00000906 	br	1812ff8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 1812fd4:	e0bffa17 	ldw	r2,-24(fp)
 1812fd8:	10c00044 	addi	r3,r2,1
 1812fdc:	e0fffa15 	stw	r3,-24(fp)
 1812fe0:	10800003 	ldbu	r2,0(r2)
 1812fe4:	10803fcc 	andi	r2,r2,255
 1812fe8:	1080201c 	xori	r2,r2,128
 1812fec:	10bfe004 	addi	r2,r2,-128
 1812ff0:	1009883a 	mov	r4,r2
 1812ff4:	181304c0 	call	181304c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 1812ff8:	e0bffa17 	ldw	r2,-24(fp)
 1812ffc:	10800003 	ldbu	r2,0(r2)
 1813000:	10803fcc 	andi	r2,r2,255
 1813004:	1080201c 	xori	r2,r2,128
 1813008:	10bfe004 	addi	r2,r2,-128
 181300c:	103ff11e 	bne	r2,zero,1812fd4 <__ram_exceptions_end+0xff802ce4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 1813010:	e0bff717 	ldw	r2,-36(fp)
 1813014:	10c00044 	addi	r3,r2,1
 1813018:	e0fff715 	stw	r3,-36(fp)
 181301c:	10800003 	ldbu	r2,0(r2)
 1813020:	e0bff805 	stb	r2,-32(fp)
 1813024:	e0bff807 	ldb	r2,-32(fp)
 1813028:	103f8a1e 	bne	r2,zero,1812e54 <__ram_exceptions_end+0xff802b64>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 181302c:	00000106 	br	1813034 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 1813030:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 1813034:	0001883a 	nop
 1813038:	e037883a 	mov	sp,fp
 181303c:	dfc00117 	ldw	ra,4(sp)
 1813040:	df000017 	ldw	fp,0(sp)
 1813044:	dec00504 	addi	sp,sp,20
 1813048:	f800283a 	ret

0181304c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 181304c:	defffd04 	addi	sp,sp,-12
 1813050:	dfc00215 	stw	ra,8(sp)
 1813054:	df000115 	stw	fp,4(sp)
 1813058:	df000104 	addi	fp,sp,4
 181305c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 1813060:	d0a00117 	ldw	r2,-32764(gp)
 1813064:	10800217 	ldw	r2,8(r2)
 1813068:	100b883a 	mov	r5,r2
 181306c:	e13fff17 	ldw	r4,-4(fp)
 1813070:	183c6440 	call	183c644 <putc>
#endif
#endif
}
 1813074:	e037883a 	mov	sp,fp
 1813078:	dfc00117 	ldw	ra,4(sp)
 181307c:	df000017 	ldw	fp,0(sp)
 1813080:	dec00204 	addi	sp,sp,8
 1813084:	f800283a 	ret

01813088 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1813088:	defffe04 	addi	sp,sp,-8
 181308c:	df000115 	stw	fp,4(sp)
 1813090:	df000104 	addi	fp,sp,4
 1813094:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1813098:	e0bfff17 	ldw	r2,-4(fp)
 181309c:	108000d0 	cmplti	r2,r2,3
 18130a0:	10000d1e 	bne	r2,zero,18130d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 18130a4:	00806134 	movhi	r2,388
 18130a8:	108f1304 	addi	r2,r2,15436
 18130ac:	e0ffff17 	ldw	r3,-4(fp)
 18130b0:	18c00324 	muli	r3,r3,12
 18130b4:	10c5883a 	add	r2,r2,r3
 18130b8:	10800204 	addi	r2,r2,8
 18130bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 18130c0:	00806134 	movhi	r2,388
 18130c4:	108f1304 	addi	r2,r2,15436
 18130c8:	e0ffff17 	ldw	r3,-4(fp)
 18130cc:	18c00324 	muli	r3,r3,12
 18130d0:	10c5883a 	add	r2,r2,r3
 18130d4:	10000015 	stw	zero,0(r2)
  }
}
 18130d8:	0001883a 	nop
 18130dc:	e037883a 	mov	sp,fp
 18130e0:	df000017 	ldw	fp,0(sp)
 18130e4:	dec00104 	addi	sp,sp,4
 18130e8:	f800283a 	ret

018130ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 18130ec:	defff904 	addi	sp,sp,-28
 18130f0:	df000615 	stw	fp,24(sp)
 18130f4:	df000604 	addi	fp,sp,24
 18130f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 18130fc:	0005303a 	rdctl	r2,status
 1813100:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1813104:	e0fffe17 	ldw	r3,-8(fp)
 1813108:	00bfff84 	movi	r2,-2
 181310c:	1884703a 	and	r2,r3,r2
 1813110:	1001703a 	wrctl	status,r2
  
  return context;
 1813114:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1813118:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 181311c:	d0a00b17 	ldw	r2,-32724(gp)
 1813120:	10c000c4 	addi	r3,r2,3
 1813124:	00bfff04 	movi	r2,-4
 1813128:	1884703a 	and	r2,r3,r2
 181312c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1813130:	d0e00b17 	ldw	r3,-32724(gp)
 1813134:	e0bfff17 	ldw	r2,-4(fp)
 1813138:	1887883a 	add	r3,r3,r2
 181313c:	00808034 	movhi	r2,512
 1813140:	10800004 	addi	r2,r2,0
 1813144:	10c0062e 	bgeu	r2,r3,1813160 <sbrk+0x74>
 1813148:	e0bffb17 	ldw	r2,-20(fp)
 181314c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1813150:	e0bffa17 	ldw	r2,-24(fp)
 1813154:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1813158:	00bfffc4 	movi	r2,-1
 181315c:	00000b06 	br	181318c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1813160:	d0a00b17 	ldw	r2,-32724(gp)
 1813164:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1813168:	d0e00b17 	ldw	r3,-32724(gp)
 181316c:	e0bfff17 	ldw	r2,-4(fp)
 1813170:	1885883a 	add	r2,r3,r2
 1813174:	d0a00b15 	stw	r2,-32724(gp)
 1813178:	e0bffb17 	ldw	r2,-20(fp)
 181317c:	e0bffc15 	stw	r2,-16(fp)
 1813180:	e0bffc17 	ldw	r2,-16(fp)
 1813184:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1813188:	e0bffd17 	ldw	r2,-12(fp)
} 
 181318c:	e037883a 	mov	sp,fp
 1813190:	df000017 	ldw	fp,0(sp)
 1813194:	dec00104 	addi	sp,sp,4
 1813198:	f800283a 	ret

0181319c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 181319c:	defffd04 	addi	sp,sp,-12
 18131a0:	dfc00215 	stw	ra,8(sp)
 18131a4:	df000115 	stw	fp,4(sp)
 18131a8:	df000104 	addi	fp,sp,4
 18131ac:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 18131b0:	e13fff17 	ldw	r4,-4(fp)
 18131b4:	182be500 	call	182be50 <alt_busy_sleep>
}
 18131b8:	e037883a 	mov	sp,fp
 18131bc:	dfc00117 	ldw	ra,4(sp)
 18131c0:	df000017 	ldw	fp,0(sp)
 18131c4:	dec00204 	addi	sp,sp,8
 18131c8:	f800283a 	ret

018131cc <close>:
 * (for files and device drivers) or the InterNiche soclose() function for
 * sockets.
 */
 
int close (int fd)
{
 18131cc:	defffd04 	addi	sp,sp,-12
 18131d0:	dfc00215 	stw	ra,8(sp)
 18131d4:	df000115 	stw	fp,4(sp)
 18131d8:	df000104 	addi	fp,sp,4
 18131dc:	e13fff15 	stw	r4,-4(fp)
	if (fd < ALT_MAX_FD)
 18131e0:	e0bfff17 	ldw	r2,-4(fp)
 18131e4:	10800808 	cmpgei	r2,r2,32
 18131e8:	1000031e 	bne	r2,zero,18131f8 <close+0x2c>
		return ALT_CLOSE (fd);
 18131ec:	e13fff17 	ldw	r4,-4(fp)
 18131f0:	182bfe40 	call	182bfe4 <alt_close>
 18131f4:	00000206 	br	1813200 <close+0x34>
#if LWIP_SOCKET
	else
		return lwip_close((long) fd);
 18131f8:	e13fff17 	ldw	r4,-4(fp)
 18131fc:	182d6ac0 	call	182d6ac <lwip_close>
#else
	else
		return -1;
#endif
}
 1813200:	e037883a 	mov	sp,fp
 1813204:	dfc00117 	ldw	ra,4(sp)
 1813208:	df000017 	ldw	fp,0(sp)
 181320c:	dec00204 	addi	sp,sp,8
 1813210:	f800283a 	ret

01813214 <read>:
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
 1813214:	defff904 	addi	sp,sp,-28
 1813218:	dfc00615 	stw	ra,24(sp)
 181321c:	df000515 	stw	fp,20(sp)
 1813220:	df000504 	addi	fp,sp,20
 1813224:	e13ffd15 	stw	r4,-12(fp)
 1813228:	e17ffe15 	stw	r5,-8(fp)
 181322c:	e1bfff15 	stw	r6,-4(fp)
	if (fd < ALT_MAX_FD)
 1813230:	e0bffd17 	ldw	r2,-12(fp)
 1813234:	10800808 	cmpgei	r2,r2,32
 1813238:	1000051e 	bne	r2,zero,1813250 <read+0x3c>
		return ALT_READ (fd, ptr, len);
 181323c:	e1bfff17 	ldw	r6,-4(fp)
 1813240:	e17ffe17 	ldw	r5,-8(fp)
 1813244:	e13ffd17 	ldw	r4,-12(fp)
 1813248:	182ca6c0 	call	182ca6c <alt_read>
 181324c:	00000706 	br	181326c <read+0x58>
#if LWIP_SOCKET
	else
		return recvfrom(fd, ptr, len, 0, NULL, NULL);
 1813250:	d8000115 	stw	zero,4(sp)
 1813254:	d8000015 	stw	zero,0(sp)
 1813258:	000f883a 	mov	r7,zero
 181325c:	e1bfff17 	ldw	r6,-4(fp)
 1813260:	e17ffe17 	ldw	r5,-8(fp)
 1813264:	e13ffd17 	ldw	r4,-12(fp)
 1813268:	182d9c40 	call	182d9c4 <lwip_recvfrom>
#else
	else
		return -1;
#endif
}
 181326c:	e037883a 	mov	sp,fp
 1813270:	dfc00117 	ldw	ra,4(sp)
 1813274:	df000017 	ldw	fp,0(sp)
 1813278:	dec00204 	addi	sp,sp,8
 181327c:	f800283a 	ret

01813280 <write>:
 * This implementation vectors requests to either the HAL alt_write() function 
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
 1813280:	defffb04 	addi	sp,sp,-20
 1813284:	dfc00415 	stw	ra,16(sp)
 1813288:	df000315 	stw	fp,12(sp)
 181328c:	df000304 	addi	fp,sp,12
 1813290:	e13ffd15 	stw	r4,-12(fp)
 1813294:	e17ffe15 	stw	r5,-8(fp)
 1813298:	e1bfff15 	stw	r6,-4(fp)
  if (fd < ALT_MAX_FD)
 181329c:	e0bffd17 	ldw	r2,-12(fp)
 18132a0:	10800808 	cmpgei	r2,r2,32
 18132a4:	1000051e 	bne	r2,zero,18132bc <write+0x3c>
    return ALT_WRITE(fd, ptr, len);
 18132a8:	e1bfff17 	ldw	r6,-4(fp)
 18132ac:	e17ffe17 	ldw	r5,-8(fp)
 18132b0:	e13ffd17 	ldw	r4,-12(fp)
 18132b4:	182cde80 	call	182cde8 <alt_write>
 18132b8:	00000506 	br	18132d0 <write+0x50>
#if LWIP_SOCKET
  else
    return send (fd, (void*) ptr, len, 0);
 18132bc:	000f883a 	mov	r7,zero
 18132c0:	e1bfff17 	ldw	r6,-4(fp)
 18132c4:	e17ffe17 	ldw	r5,-8(fp)
 18132c8:	e13ffd17 	ldw	r4,-12(fp)
 18132cc:	182df380 	call	182df38 <lwip_send>
#else
	else
		return -1;
#endif
}
 18132d0:	e037883a 	mov	sp,fp
 18132d4:	dfc00117 	ldw	ra,4(sp)
 18132d8:	df000017 	ldw	fp,0(sp)
 18132dc:	dec00204 	addi	sp,sp,8
 18132e0:	f800283a 	ret

018132e4 <low_level_init>:
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void
low_level_init(struct netif *netif)
{
 18132e4:	defffc04 	addi	sp,sp,-16
 18132e8:	dfc00315 	stw	ra,12(sp)
 18132ec:	df000215 	stw	fp,8(sp)
 18132f0:	df000204 	addi	fp,sp,8
 18132f4:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif = netif->state;
 18132f8:	e0bfff17 	ldw	r2,-4(fp)
 18132fc:	10800917 	ldw	r2,36(r2)
 1813300:	e0bffe15 	stw	r2,-8(fp)

	/* set MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;
 1813304:	e0bfff17 	ldw	r2,-4(fp)
 1813308:	00c00184 	movi	r3,6
 181330c:	10c00c85 	stb	r3,50(r2)

	/* maximum transfer unit */
	netif->mtu = IP_FRAG_MAX_MTU;
 1813310:	e0bfff17 	ldw	r2,-4(fp)
 1813314:	00c17704 	movi	r3,1500
 1813318:	10c00c0d 	sth	r3,48(r2)

	/* device capabilities */
	/* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
	netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
 181331c:	e0bfff17 	ldw	r2,-4(fp)
 1813320:	00c00c84 	movi	r3,50
 1813324:	10c00e45 	stb	r3,57(r2)

	tse_mac_init(netif->num, ethernetif);
 1813328:	e0bfff17 	ldw	r2,-4(fp)
 181332c:	10800f03 	ldbu	r2,60(r2)
 1813330:	10803fcc 	andi	r2,r2,255
 1813334:	e17ffe17 	ldw	r5,-8(fp)
 1813338:	1009883a 	mov	r4,r2
 181333c:	18141600 	call	1814160 <tse_mac_init>
}
 1813340:	0001883a 	nop
 1813344:	e037883a 	mov	sp,fp
 1813348:	dfc00117 	ldw	ra,4(sp)
 181334c:	df000017 	ldw	fp,0(sp)
 1813350:	dec00204 	addi	sp,sp,8
 1813354:	f800283a 	ret

01813358 <low_level_input>:
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf *
low_level_input(struct netif *netif)
{
 1813358:	defffa04 	addi	sp,sp,-24
 181335c:	dfc00515 	stw	ra,20(sp)
 1813360:	df000415 	stw	fp,16(sp)
 1813364:	df000404 	addi	fp,sp,16
 1813368:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif = netif->state;
 181336c:	e0bfff17 	ldw	r2,-4(fp)
 1813370:	10800917 	ldw	r2,36(r2)
 1813374:	e0bffd15 	stw	r2,-12(fp)
	struct pbuf *p, *nextPkt;

	if(ethernetif->lwipRxCount <= 0)
 1813378:	e0bffd17 	ldw	r2,-12(fp)
 181337c:	10801517 	ldw	r2,84(r2)
 1813380:	00800216 	blt	zero,r2,181338c <low_level_input+0x34>
		return NULL;
 1813384:	0005883a 	mov	r2,zero
 1813388:	00004b06 	br	18134b8 <low_level_input+0x160>

	//  Dump current packet if there is no memory for the next packet.
	//  The lwipRxPbuf must contain pointers to pbufs at all times.
	nextPkt = pbuf_alloc(PBUF_RAW,  PBUF_POOL_BUFSIZE, PBUF_POOL);
 181338c:	018000c4 	movi	r6,3
 1813390:	01417b04 	movi	r5,1516
 1813394:	010000c4 	movi	r4,3
 1813398:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181339c:	e0bffe15 	stw	r2,-8(fp)
	if(nextPkt == NULL)
 18133a0:	e0bffe17 	ldw	r2,-8(fp)
 18133a4:	1000101e 	bne	r2,zero,18133e8 <low_level_input+0x90>
	{
		LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("no pbuf available\n"));

		LINK_STATS_INC(link.memerr);
 18133a8:	00806134 	movhi	r2,388
 18133ac:	109e7504 	addi	r2,r2,31188
 18133b0:	10800617 	ldw	r2,24(r2)
 18133b4:	10c00044 	addi	r3,r2,1
 18133b8:	00806134 	movhi	r2,388
 18133bc:	109e7504 	addi	r2,r2,31188
 18133c0:	10c00615 	stw	r3,24(r2)
		LINK_STATS_INC(link.drop);
 18133c4:	00806134 	movhi	r2,388
 18133c8:	109e7504 	addi	r2,r2,31188
 18133cc:	10800317 	ldw	r2,12(r2)
 18133d0:	10c00044 	addi	r3,r2,1
 18133d4:	00806134 	movhi	r2,388
 18133d8:	109e7504 	addi	r2,r2,31188
 18133dc:	10c00315 	stw	r3,12(r2)
		return NULL;
 18133e0:	0005883a 	mov	r2,zero
 18133e4:	00003406 	br	18134b8 <low_level_input+0x160>
	}

	nextPkt = (void *) alt_remap_uncached(nextPkt,sizeof *nextPkt);
 18133e8:	01400404 	movi	r5,16
 18133ec:	e13ffe17 	ldw	r4,-8(fp)
 18133f0:	182cb680 	call	182cb68 <alt_remap_uncached>
 18133f4:	e0bffe15 	stw	r2,-8(fp)
	nextPkt->payload = (void *) alt_remap_uncached(nextPkt->payload, PBUF_POOL_BUFSIZE);
 18133f8:	e0bffe17 	ldw	r2,-8(fp)
 18133fc:	10800117 	ldw	r2,4(r2)
 1813400:	01417b04 	movi	r5,1516
 1813404:	1009883a 	mov	r4,r2
 1813408:	182cb680 	call	182cb68 <alt_remap_uncached>
 181340c:	1007883a 	mov	r3,r2
 1813410:	e0bffe17 	ldw	r2,-8(fp)
 1813414:	10c00115 	stw	r3,4(r2)

	enh_alt_irq_disable_all();
 1813418:	182bb200 	call	182bb20 <enh_alt_irq_disable_all>

	p = ethernetif->lwipRxPbuf[ethernetif->lwipRxIndex];
 181341c:	e0bffd17 	ldw	r2,-12(fp)
 1813420:	10801417 	ldw	r2,80(r2)
 1813424:	e0fffd17 	ldw	r3,-12(fp)
 1813428:	108001c4 	addi	r2,r2,7
 181342c:	1085883a 	add	r2,r2,r2
 1813430:	1085883a 	add	r2,r2,r2
 1813434:	1885883a 	add	r2,r3,r2
 1813438:	10800017 	ldw	r2,0(r2)
 181343c:	e0bffc15 	stw	r2,-16(fp)
	ethernetif->lwipRxPbuf[ethernetif->lwipRxIndex] = nextPkt;
 1813440:	e0bffd17 	ldw	r2,-12(fp)
 1813444:	10801417 	ldw	r2,80(r2)
 1813448:	e0fffd17 	ldw	r3,-12(fp)
 181344c:	108001c4 	addi	r2,r2,7
 1813450:	1085883a 	add	r2,r2,r2
 1813454:	1085883a 	add	r2,r2,r2
 1813458:	1885883a 	add	r2,r3,r2
 181345c:	e0fffe17 	ldw	r3,-8(fp)
 1813460:	10c00015 	stw	r3,0(r2)
	if(++ethernetif->lwipRxIndex >= LWIP_RX_ETH_BUFFER)
 1813464:	e0bffd17 	ldw	r2,-12(fp)
 1813468:	10801417 	ldw	r2,80(r2)
 181346c:	10800044 	addi	r2,r2,1
 1813470:	e0fffd17 	ldw	r3,-12(fp)
 1813474:	18801415 	stw	r2,80(r3)
 1813478:	10800310 	cmplti	r2,r2,12
 181347c:	1000021e 	bne	r2,zero,1813488 <low_level_input+0x130>
		ethernetif->lwipRxIndex = 0;
 1813480:	e0bffd17 	ldw	r2,-12(fp)
 1813484:	10001415 	stw	zero,80(r2)

	--ethernetif->lwipRxCount;
 1813488:	e0bffd17 	ldw	r2,-12(fp)
 181348c:	10801517 	ldw	r2,84(r2)
 1813490:	10ffffc4 	addi	r3,r2,-1
 1813494:	e0bffd17 	ldw	r2,-12(fp)
 1813498:	10c01515 	stw	r3,84(r2)

	enh_alt_irq_enable_all();
 181349c:	182bb700 	call	182bb70 <enh_alt_irq_enable_all>

	LWIP_ASSERT("low_level_input: pbuf in rx buffer is NULL", p != NULL );
	LWIP_ASSERT("low_level_input: pbuf->len in rx buffer is 0", p->len != 0 );

	if( p->len == 0 )
 18134a0:	e0bffc17 	ldw	r2,-16(fp)
 18134a4:	1080028b 	ldhu	r2,10(r2)
 18134a8:	10bfffcc 	andi	r2,r2,65535
 18134ac:	1000011e 	bne	r2,zero,18134b4 <low_level_input+0x15c>
		p = NULL;
 18134b0:	e03ffc15 	stw	zero,-16(fp)

	return p;
 18134b4:	e0bffc17 	ldw	r2,-16(fp)
}
 18134b8:	e037883a 	mov	sp,fp
 18134bc:	dfc00117 	ldw	ra,4(sp)
 18134c0:	df000017 	ldw	fp,0(sp)
 18134c4:	dec00204 	addi	sp,sp,8
 18134c8:	f800283a 	ret

018134cc <ethernetif_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
int
ethernetif_input(struct netif *netif)
{
 18134cc:	defffa04 	addi	sp,sp,-24
 18134d0:	dfc00515 	stw	ra,20(sp)
 18134d4:	df000415 	stw	fp,16(sp)
 18134d8:	df000404 	addi	fp,sp,16
 18134dc:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif;
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	ethernetif = netif->state;
 18134e0:	e0bfff17 	ldw	r2,-4(fp)
 18134e4:	10800917 	ldw	r2,36(r2)
 18134e8:	e0bffc15 	stw	r2,-16(fp)

	/* move received packet into a new pbuf */
	p = low_level_input(netif);
 18134ec:	e13fff17 	ldw	r4,-4(fp)
 18134f0:	18133580 	call	1813358 <low_level_input>
 18134f4:	e0bffd15 	stw	r2,-12(fp)

	/* no packet could be read, silently ignore this */
	if (p == NULL) return -1;
 18134f8:	e0bffd17 	ldw	r2,-12(fp)
 18134fc:	1000021e 	bne	r2,zero,1813508 <ethernetif_input+0x3c>
 1813500:	00bfffc4 	movi	r2,-1
 1813504:	00002b06 	br	18135b4 <ethernetif_input+0xe8>

	/* points to packet payload, which starts with an Ethernet header */
	ethhdr = p->payload;
 1813508:	e0bffd17 	ldw	r2,-12(fp)
 181350c:	10800117 	ldw	r2,4(r2)
 1813510:	e0bffe15 	stw	r2,-8(fp)

	LINK_STATS_INC(link.recv);
 1813514:	00806134 	movhi	r2,388
 1813518:	109e7504 	addi	r2,r2,31188
 181351c:	10800117 	ldw	r2,4(r2)
 1813520:	10c00044 	addi	r3,r2,1
 1813524:	00806134 	movhi	r2,388
 1813528:	109e7504 	addi	r2,r2,31188
 181352c:	10c00115 	stw	r3,4(r2)
		pbuf_free(p);
		p = NULL;
		break;
	}
#else
	switch (htons(ethhdr->type)) {
 1813530:	e0bffe17 	ldw	r2,-8(fp)
 1813534:	10c00383 	ldbu	r3,14(r2)
 1813538:	108003c3 	ldbu	r2,15(r2)
 181353c:	1004923a 	slli	r2,r2,8
 1813540:	10c4b03a 	or	r2,r2,r3
 1813544:	10bfffcc 	andi	r2,r2,65535
 1813548:	1004d23a 	srli	r2,r2,8
 181354c:	10ffffcc 	andi	r3,r2,65535
 1813550:	e0bffe17 	ldw	r2,-8(fp)
 1813554:	11000383 	ldbu	r4,14(r2)
 1813558:	108003c3 	ldbu	r2,15(r2)
 181355c:	1004923a 	slli	r2,r2,8
 1813560:	1104b03a 	or	r2,r2,r4
 1813564:	10bfffcc 	andi	r2,r2,65535
 1813568:	1004923a 	slli	r2,r2,8
 181356c:	10bfffcc 	andi	r2,r2,65535
 1813570:	1884b03a 	or	r2,r3,r2
 1813574:	10c20020 	cmpeqi	r3,r2,2048
 1813578:	1800021e 	bne	r3,zero,1813584 <ethernetif_input+0xb8>
 181357c:	108201a0 	cmpeqi	r2,r2,2054
 1813580:	10000626 	beq	r2,zero,181359c <ethernetif_input+0xd0>
#if PPPOE_SUPPORT
	/* PPPoE packet? */
	case ETHTYPE_PPPOEDISC:
	case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
		netif->input(p, netif);
 1813584:	e0bfff17 	ldw	r2,-4(fp)
 1813588:	10800417 	ldw	r2,16(r2)
 181358c:	e17fff17 	ldw	r5,-4(fp)
 1813590:	e13ffd17 	ldw	r4,-12(fp)
 1813594:	103ee83a 	callr	r2
		break;
 1813598:	00000406 	br	18135ac <ethernetif_input+0xe0>

	default:
		pbuf_free( p );
 181359c:	e13ffd17 	ldw	r4,-12(fp)
 18135a0:	181a22c0 	call	181a22c <pbuf_free>
		p = NULL;
 18135a4:	e03ffd15 	stw	zero,-12(fp)
		break;
 18135a8:	0001883a 	nop
	}
#endif

	// return the waiting packet count
	return ethernetif->lwipRxCount;
 18135ac:	e0bffc17 	ldw	r2,-16(fp)
 18135b0:	10801517 	ldw	r2,84(r2)
}
 18135b4:	e037883a 	mov	sp,fp
 18135b8:	dfc00117 	ldw	ra,4(sp)
 18135bc:	df000017 	ldw	fp,0(sp)
 18135c0:	dec00204 	addi	sp,sp,8
 18135c4:	f800283a 	ret

018135c8 <ethernetif_init>:
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t
ethernetif_init(struct netif *netif)
{
 18135c8:	defff904 	addi	sp,sp,-28
 18135cc:	dfc00615 	stw	ra,24(sp)
 18135d0:	df000515 	stw	fp,20(sp)
 18135d4:	df000504 	addi	fp,sp,20
 18135d8:	e13fff15 	stw	r4,-4(fp)
	err_t tse_mac_raw_send(struct netif *netif, struct pbuf *p);
	char *tmpptr;

	LWIP_ASSERT("netif != NULL", (netif != NULL));

	ethernetif = mem_malloc(sizeof(struct ethernetif));
 18135dc:	01001804 	movi	r4,96
 18135e0:	183c5000 	call	183c500 <malloc>
 18135e4:	e0bffc15 	stw	r2,-16(fp)
	if (ethernetif == NULL) {
 18135e8:	e0bffc17 	ldw	r2,-16(fp)
 18135ec:	1000021e 	bne	r2,zero,18135f8 <ethernetif_init+0x30>
		LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("ethernetif_init: out of memory\n"));
		return ERR_MEM;
 18135f0:	00bfffc4 	movi	r2,-1
 18135f4:	00006306 	br	1813784 <ethernetif_init+0x1bc>
	}

#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	if (get_hostname(netif->num, (const char**)&tmpptr) == ERR_OK)
 18135f8:	e0bfff17 	ldw	r2,-4(fp)
 18135fc:	10800f03 	ldbu	r2,60(r2)
 1813600:	10803fcc 	andi	r2,r2,255
 1813604:	e0fffe04 	addi	r3,fp,-8
 1813608:	180b883a 	mov	r5,r3
 181360c:	1009883a 	mov	r4,r2
 1813610:	180092c0 	call	180092c <get_hostname>
 1813614:	1000041e 	bne	r2,zero,1813628 <ethernetif_init+0x60>
		netif->hostname = tmpptr;
 1813618:	e0fffe17 	ldw	r3,-8(fp)
 181361c:	e0bfff17 	ldw	r2,-4(fp)
 1813620:	10c00b15 	stw	r3,44(r2)
 1813624:	00000406 	br	1813638 <ethernetif_init+0x70>
	else
		netif->hostname = "lwip";
 1813628:	e0ffff17 	ldw	r3,-4(fp)
 181362c:	00806134 	movhi	r2,388
 1813630:	1082cf04 	addi	r2,r2,2876
 1813634:	18800b15 	stw	r2,44(r3)
	 * of bits per second.
	 */
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

	// pointer abuse, don't worry ;)
	netif->state = ethernetif;
 1813638:	e0bfff17 	ldw	r2,-4(fp)
 181363c:	e0fffc17 	ldw	r3,-16(fp)
 1813640:	10c00915 	stw	r3,36(r2)
	if (get_iface_name(netif->num, (char*)&tmpptr) == ERR_OK) {
 1813644:	e0bfff17 	ldw	r2,-4(fp)
 1813648:	10800f03 	ldbu	r2,60(r2)
 181364c:	10803fcc 	andi	r2,r2,255
 1813650:	e0fffe04 	addi	r3,fp,-8
 1813654:	180b883a 	mov	r5,r3
 1813658:	1009883a 	mov	r4,r2
 181365c:	18009640 	call	1800964 <get_iface_name>
 1813660:	1000081e 	bne	r2,zero,1813684 <ethernetif_init+0xbc>
		netif->name[0] = ((char*)&tmpptr)[0];
 1813664:	e0bffe04 	addi	r2,fp,-8
 1813668:	10c00003 	ldbu	r3,0(r2)
 181366c:	e0bfff17 	ldw	r2,-4(fp)
 1813670:	10c00e85 	stb	r3,58(r2)
		netif->name[1] = ((char*)&tmpptr)[1];
 1813674:	e0fffe43 	ldbu	r3,-7(fp)
 1813678:	e0bfff17 	ldw	r2,-4(fp)
 181367c:	10c00ec5 	stb	r3,59(r2)
 1813680:	00000606 	br	181369c <ethernetif_init+0xd4>
	} else {
		netif->name[0] = 'e';
 1813684:	e0bfff17 	ldw	r2,-4(fp)
 1813688:	00c01944 	movi	r3,101
 181368c:	10c00e85 	stb	r3,58(r2)
		netif->name[1] = 't';
 1813690:	e0bfff17 	ldw	r2,-4(fp)
 1813694:	00c01d04 	movi	r3,116
 1813698:	10c00ec5 	stb	r3,59(r2)

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
 181369c:	e0ffff17 	ldw	r3,-4(fp)
 18136a0:	008060b4 	movhi	r2,386
 18136a4:	108c4504 	addi	r2,r2,12564
 18136a8:	18800515 	stw	r2,20(r3)
	netif->linkoutput = tse_mac_raw_send;
 18136ac:	e0ffff17 	ldw	r3,-4(fp)
 18136b0:	00806074 	movhi	r2,385
 18136b4:	1092b904 	addi	r2,r2,19172
 18136b8:	18800615 	stw	r2,24(r3)

	ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
 18136bc:	e0bfff17 	ldw	r2,-4(fp)
 18136c0:	10c00cc4 	addi	r3,r2,51
 18136c4:	e0bffc17 	ldw	r2,-16(fp)
 18136c8:	10c00015 	stw	r3,0(r2)

	/* initialize the rx buffer for access by the TSE ISR */
	for(idx = 0; idx < LWIP_RX_ETH_BUFFER; ++idx)
 18136cc:	e03ffb15 	stw	zero,-20(fp)
 18136d0:	00002006 	br	1813754 <ethernetif_init+0x18c>
	{
		p = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_POOL);
 18136d4:	018000c4 	movi	r6,3
 18136d8:	01417b04 	movi	r5,1516
 18136dc:	010000c4 	movi	r4,3
 18136e0:	1819aa40 	call	1819aa4 <pbuf_alloc>
 18136e4:	e0bffd15 	stw	r2,-12(fp)
		if (p == NULL)
 18136e8:	e0bffd17 	ldw	r2,-12(fp)
 18136ec:	1000021e 	bne	r2,zero,18136f8 <ethernetif_init+0x130>
			return ERR_MEM;
 18136f0:	00bfffc4 	movi	r2,-1
 18136f4:	00002306 	br	1813784 <ethernetif_init+0x1bc>
		p = (void *) alt_remap_uncached(p,sizeof *p);
 18136f8:	01400404 	movi	r5,16
 18136fc:	e13ffd17 	ldw	r4,-12(fp)
 1813700:	182cb680 	call	182cb68 <alt_remap_uncached>
 1813704:	e0bffd15 	stw	r2,-12(fp)
		p->payload = (void *) alt_remap_uncached(p->payload,PBUF_POOL_BUFSIZE);
 1813708:	e0bffd17 	ldw	r2,-12(fp)
 181370c:	10800117 	ldw	r2,4(r2)
 1813710:	01417b04 	movi	r5,1516
 1813714:	1009883a 	mov	r4,r2
 1813718:	182cb680 	call	182cb68 <alt_remap_uncached>
 181371c:	1007883a 	mov	r3,r2
 1813720:	e0bffd17 	ldw	r2,-12(fp)
 1813724:	10c00115 	stw	r3,4(r2)
		ethernetif->lwipRxPbuf[idx] = p;
 1813728:	e0fffc17 	ldw	r3,-16(fp)
 181372c:	e0bffb17 	ldw	r2,-20(fp)
 1813730:	108001c4 	addi	r2,r2,7
 1813734:	1085883a 	add	r2,r2,r2
 1813738:	1085883a 	add	r2,r2,r2
 181373c:	1885883a 	add	r2,r3,r2
 1813740:	e0fffd17 	ldw	r3,-12(fp)
 1813744:	10c00015 	stw	r3,0(r2)
	netif->linkoutput = tse_mac_raw_send;

	ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);

	/* initialize the rx buffer for access by the TSE ISR */
	for(idx = 0; idx < LWIP_RX_ETH_BUFFER; ++idx)
 1813748:	e0bffb17 	ldw	r2,-20(fp)
 181374c:	10800044 	addi	r2,r2,1
 1813750:	e0bffb15 	stw	r2,-20(fp)
 1813754:	e0bffb17 	ldw	r2,-20(fp)
 1813758:	10800310 	cmplti	r2,r2,12
 181375c:	103fdd1e 	bne	r2,zero,18136d4 <__ram_exceptions_end+0xff8033e4>
			return ERR_MEM;
		p = (void *) alt_remap_uncached(p,sizeof *p);
		p->payload = (void *) alt_remap_uncached(p->payload,PBUF_POOL_BUFSIZE);
		ethernetif->lwipRxPbuf[idx] = p;
	}
	ethernetif->lwipRxCount = 0;
 1813760:	e0bffc17 	ldw	r2,-16(fp)
 1813764:	10001515 	stw	zero,84(r2)
	ethernetif->lwipRxIndex = 0;
 1813768:	e0bffc17 	ldw	r2,-16(fp)
 181376c:	10001415 	stw	zero,80(r2)
	ethernetif->lwipRxIndexIsr = 0;
 1813770:	e0bffc17 	ldw	r2,-16(fp)
 1813774:	10001315 	stw	zero,76(r2)

	/* initialize the low level hardware */
	low_level_init(netif);
 1813778:	e13fff17 	ldw	r4,-4(fp)
 181377c:	18132e40 	call	18132e4 <low_level_init>

	return ERR_OK;
 1813780:	0005883a 	mov	r2,zero
}
 1813784:	e037883a 	mov	sp,fp
 1813788:	dfc00117 	ldw	ra,4(sp)
 181378c:	df000017 	ldw	fp,0(sp)
 1813790:	dec00204 	addi	sp,sp,8
 1813794:	f800283a 	ret

01813798 <lwip_initialize>:
}
#endif

// Function which initializes the LwIP TCP/IP stack
void lwip_initialize(int waitForAll)
{
 1813798:	defffa04 	addi	sp,sp,-24
 181379c:	dfc00515 	stw	ra,20(sp)
 18137a0:	df000415 	stw	fp,16(sp)
 18137a4:	df000404 	addi	fp,sp,16
 18137a8:	e13fff15 	stw	r4,-4(fp)
	int idx;
	int upCount = 0;
 18137ac:	e03ffd15 	stw	zero,-12(fp)
	int activeCount = 0;
 18137b0:	e03ffe15 	stw	zero,-8(fp)
		return;
	}
#endif

	// Initialize the TCP/IP stack and give our configuration function as callback
	tcpip_init(lwip_handle_interfaces, NULL);
 18137b4:	000b883a 	mov	r5,zero
 18137b8:	01006074 	movhi	r4,385
 18137bc:	210e4e04 	addi	r4,r4,14648
 18137c0:	18307880 	call	1830788 <tcpip_init>

	for (idx = 0; idx < PHY_COUNT; ++idx)
 18137c4:	e03ffc15 	stw	zero,-16(fp)
 18137c8:	00000906 	br	18137f0 <lwip_initialize+0x58>
		if (is_interface_active(idx))
 18137cc:	e13ffc17 	ldw	r4,-16(fp)
 18137d0:	18009ac0 	call	18009ac <is_interface_active>
 18137d4:	10000326 	beq	r2,zero,18137e4 <lwip_initialize+0x4c>
			++activeCount;
 18137d8:	e0bffe17 	ldw	r2,-8(fp)
 18137dc:	10800044 	addi	r2,r2,1
 18137e0:	e0bffe15 	stw	r2,-8(fp)
#endif

	// Initialize the TCP/IP stack and give our configuration function as callback
	tcpip_init(lwip_handle_interfaces, NULL);

	for (idx = 0; idx < PHY_COUNT; ++idx)
 18137e4:	e0bffc17 	ldw	r2,-16(fp)
 18137e8:	10800044 	addi	r2,r2,1
 18137ec:	e0bffc15 	stw	r2,-16(fp)
 18137f0:	e0bffc17 	ldw	r2,-16(fp)
 18137f4:	00bff50e 	bge	zero,r2,18137cc <__ram_exceptions_end+0xff8034dc>
		if (is_interface_active(idx))
			++activeCount;

	// Wait for the network to get up
	while ((waitForAll && activeCount != upCount) || (!waitForAll && !upCount))
 18137f8:	00001d06 	br	1813870 <lwip_initialize+0xd8>
	{
		for (idx = 0; idx < PHY_COUNT; ++idx)
 18137fc:	e03ffc15 	stw	zero,-16(fp)
 1813800:	00001706 	br	1813860 <lwip_initialize+0xc8>
		{
			if (is_interface_active(idx) && netif_is_up(&eth_tse[idx]))
 1813804:	e13ffc17 	ldw	r4,-16(fp)
 1813808:	18009ac0 	call	18009ac <is_interface_active>
 181380c:	10001126 	beq	r2,zero,1813854 <lwip_initialize+0xbc>
 1813810:	00806134 	movhi	r2,388
 1813814:	109e4e04 	addi	r2,r2,31032
 1813818:	e0fffc17 	ldw	r3,-16(fp)
 181381c:	18c01124 	muli	r3,r3,68
 1813820:	10c5883a 	add	r2,r2,r3
 1813824:	10800e44 	addi	r2,r2,57
 1813828:	10800003 	ldbu	r2,0(r2)
 181382c:	10803fcc 	andi	r2,r2,255
 1813830:	1080004c 	andi	r2,r2,1
 1813834:	10000726 	beq	r2,zero,1813854 <lwip_initialize+0xbc>
			{
				printf("[lwip_eth%d] up\r\n", idx);
 1813838:	e17ffc17 	ldw	r5,-16(fp)
 181383c:	01006134 	movhi	r4,388
 1813840:	2102d104 	addi	r4,r4,2884
 1813844:	1800b240 	call	1800b24 <printf>
				++upCount;
 1813848:	e0bffd17 	ldw	r2,-12(fp)
 181384c:	10800044 	addi	r2,r2,1
 1813850:	e0bffd15 	stw	r2,-12(fp)
			++activeCount;

	// Wait for the network to get up
	while ((waitForAll && activeCount != upCount) || (!waitForAll && !upCount))
	{
		for (idx = 0; idx < PHY_COUNT; ++idx)
 1813854:	e0bffc17 	ldw	r2,-16(fp)
 1813858:	10800044 	addi	r2,r2,1
 181385c:	e0bffc15 	stw	r2,-16(fp)
 1813860:	e0bffc17 	ldw	r2,-16(fp)
 1813864:	00bfe70e 	bge	zero,r2,1813804 <__ram_exceptions_end+0xff803514>
				printf("[lwip_eth%d] up\r\n", idx);
				++upCount;
			}
		}

		mssleep(10);
 1813868:	0109c404 	movi	r4,10000
 181386c:	181319c0 	call	181319c <usleep>
	for (idx = 0; idx < PHY_COUNT; ++idx)
		if (is_interface_active(idx))
			++activeCount;

	// Wait for the network to get up
	while ((waitForAll && activeCount != upCount) || (!waitForAll && !upCount))
 1813870:	e0bfff17 	ldw	r2,-4(fp)
 1813874:	10000326 	beq	r2,zero,1813884 <lwip_initialize+0xec>
 1813878:	e0fffe17 	ldw	r3,-8(fp)
 181387c:	e0bffd17 	ldw	r2,-12(fp)
 1813880:	18bfde1e 	bne	r3,r2,18137fc <__ram_exceptions_end+0xff80350c>
 1813884:	e0bfff17 	ldw	r2,-4(fp)
 1813888:	1000021e 	bne	r2,zero,1813894 <lwip_initialize+0xfc>
 181388c:	e0bffd17 	ldw	r2,-12(fp)
 1813890:	103fda26 	beq	r2,zero,18137fc <__ram_exceptions_end+0xff80350c>
			}
		}

		mssleep(10);
	}
}
 1813894:	0001883a 	nop
 1813898:	e037883a 	mov	sp,fp
 181389c:	dfc00117 	ldw	ra,4(sp)
 18138a0:	df000017 	ldw	fp,0(sp)
 18138a4:	dec00204 	addi	sp,sp,8
 18138a8:	f800283a 	ret

018138ac <lwip_wait_for_an>:
#endif

#define MAX_RETRY_COUNT			3

int lwip_wait_for_an(int idx, struct ethernetif *ethernetif)
{
 18138ac:	defffb04 	addi	sp,sp,-20
 18138b0:	dfc00415 	stw	ra,16(sp)
 18138b4:	df000315 	stw	fp,12(sp)
 18138b8:	df000304 	addi	fp,sp,12
 18138bc:	e13ffe15 	stw	r4,-8(fp)
 18138c0:	e17fff15 	stw	r5,-4(fp)
	int retryCount = MAX_RETRY_COUNT;
 18138c4:	008000c4 	movi	r2,3
 18138c8:	e0bffd15 	stw	r2,-12(fp)

	while (ethernetif->link_alive != 1 && --retryCount) {
 18138cc:	00000b06 	br	18138fc <lwip_wait_for_an+0x50>
		mssleep(100 * (MAX_RETRY_COUNT - retryCount));
 18138d0:	00c000c4 	movi	r3,3
 18138d4:	e0bffd17 	ldw	r2,-12(fp)
 18138d8:	1887c83a 	sub	r3,r3,r2
 18138dc:	008000b4 	movhi	r2,2
 18138e0:	10a1a804 	addi	r2,r2,-31072
 18138e4:	1885383a 	mul	r2,r3,r2
 18138e8:	1009883a 	mov	r4,r2
 18138ec:	181319c0 	call	181319c <usleep>
		tse_mac_init(idx, ethernetif);
 18138f0:	e17fff17 	ldw	r5,-4(fp)
 18138f4:	e13ffe17 	ldw	r4,-8(fp)
 18138f8:	18141600 	call	1814160 <tse_mac_init>

int lwip_wait_for_an(int idx, struct ethernetif *ethernetif)
{
	int retryCount = MAX_RETRY_COUNT;

	while (ethernetif->link_alive != 1 && --retryCount) {
 18138fc:	e0bfff17 	ldw	r2,-4(fp)
 1813900:	10800217 	ldw	r2,8(r2)
 1813904:	10800060 	cmpeqi	r2,r2,1
 1813908:	1000051e 	bne	r2,zero,1813920 <lwip_wait_for_an+0x74>
 181390c:	e0bffd17 	ldw	r2,-12(fp)
 1813910:	10bfffc4 	addi	r2,r2,-1
 1813914:	e0bffd15 	stw	r2,-12(fp)
 1813918:	e0bffd17 	ldw	r2,-12(fp)
 181391c:	103fec1e 	bne	r2,zero,18138d0 <__ram_exceptions_end+0xff8035e0>
		mssleep(100 * (MAX_RETRY_COUNT - retryCount));
		tse_mac_init(idx, ethernetif);
	}

	return retryCount;
 1813920:	e0bffd17 	ldw	r2,-12(fp)
}
 1813924:	e037883a 	mov	sp,fp
 1813928:	dfc00117 	ldw	ra,4(sp)
 181392c:	df000017 	ldw	fp,0(sp)
 1813930:	dec00204 	addi	sp,sp,8
 1813934:	f800283a 	ret

01813938 <lwip_handle_interfaces>:

void lwip_handle_interfaces(__unused void *params)
{
 1813938:	deffe904 	addi	sp,sp,-92
 181393c:	dfc01615 	stw	ra,88(sp)
 1813940:	df001515 	stw	fp,84(sp)
 1813944:	df001504 	addi	fp,sp,84
 1813948:	e13fff15 	stw	r4,-4(fp)
	int idx;
	int active_macs = 0;
 181394c:	e03fef15 	stw	zero,-68(fp)
	char tmpbuf[OS_MAX_TASK_NAME_LEN];

	ip_addr_t ip = {0}, subnet = {0}, gateway = {0};
 1813950:	e03ffb15 	stw	zero,-20(fp)
 1813954:	e03ffc15 	stw	zero,-16(fp)
 1813958:	e03ffd15 	stw	zero,-12(fp)
	int dhcp;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 181395c:	e03fee15 	stw	zero,-72(fp)
 1813960:	00008406 	br	1813b74 <lwip_handle_interfaces+0x23c>
	{
		struct netif *eth = &eth_tse[idx];
 1813964:	e0bfee17 	ldw	r2,-72(fp)
 1813968:	10c01124 	muli	r3,r2,68
 181396c:	00806134 	movhi	r2,388
 1813970:	109e4e04 	addi	r2,r2,31032
 1813974:	1885883a 	add	r2,r3,r2
 1813978:	e0bff015 	stw	r2,-64(fp)

		// Load platform specific MAC address into netif
		if (get_mac_addr(idx, eth, eth->hwaddr) != EXIT_SUCCESS)
 181397c:	e0bff017 	ldw	r2,-64(fp)
 1813980:	10800cc4 	addi	r2,r2,51
 1813984:	100d883a 	mov	r6,r2
 1813988:	e17ff017 	ldw	r5,-64(fp)
 181398c:	e13fee17 	ldw	r4,-72(fp)
 1813990:	18007580 	call	1800758 <get_mac_addr>
 1813994:	10000326 	beq	r2,zero,18139a4 <lwip_handle_interfaces+0x6c>
			printf("[LwIP] Failed to get MAC address\n");
 1813998:	01006134 	movhi	r4,388
 181399c:	2102d604 	addi	r4,r4,2904
 18139a0:	183c7cc0 	call	183c7cc <puts>

		// Get the requested IP configuration for the given interface
		if (get_ip_addr(idx, &ip, &subnet, &gateway, &dhcp) != EXIT_SUCCESS)
 18139a4:	e17ffd04 	addi	r5,fp,-12
 18139a8:	e13ffc04 	addi	r4,fp,-16
 18139ac:	e0fffb04 	addi	r3,fp,-20
 18139b0:	e0bffe04 	addi	r2,fp,-8
 18139b4:	d8800015 	stw	r2,0(sp)
 18139b8:	280f883a 	mov	r7,r5
 18139bc:	200d883a 	mov	r6,r4
 18139c0:	180b883a 	mov	r5,r3
 18139c4:	e13fee17 	ldw	r4,-72(fp)
 18139c8:	18008740 	call	1800874 <get_ip_addr>
 18139cc:	10000326 	beq	r2,zero,18139dc <lwip_handle_interfaces+0xa4>
			printf("[LwIP] Failed to get IP config\n");
 18139d0:	01006134 	movhi	r4,388
 18139d4:	2102df04 	addi	r4,r4,2940
 18139d8:	183c7cc0 	call	183c7cc <puts>

		//  Initialize lwIP, Altera TSE and the ethernetif
#if NO_SYS
		if (netif_add(eth, &ip, &subnet, &gateway, eth->state, ethernetif_init, ethernet_input) == NULL)
#else
			if (netif_add(eth, &ip, &subnet, &gateway, eth->state, ethernetif_init, tcpip_input) == NULL)
 18139dc:	e0bff017 	ldw	r2,-64(fp)
 18139e0:	10c00917 	ldw	r3,36(r2)
 18139e4:	e1bffd04 	addi	r6,fp,-12
 18139e8:	e17ffc04 	addi	r5,fp,-16
 18139ec:	e13ffb04 	addi	r4,fp,-20
 18139f0:	008060f4 	movhi	r2,387
 18139f4:	1080d004 	addi	r2,r2,832
 18139f8:	d8800215 	stw	r2,8(sp)
 18139fc:	00806074 	movhi	r2,385
 1813a00:	108d7204 	addi	r2,r2,13768
 1813a04:	d8800115 	stw	r2,4(sp)
 1813a08:	d8c00015 	stw	r3,0(sp)
 1813a0c:	300f883a 	mov	r7,r6
 1813a10:	280d883a 	mov	r6,r5
 1813a14:	200b883a 	mov	r5,r4
 1813a18:	e13ff017 	ldw	r4,-64(fp)
 1813a1c:	18191740 	call	1819174 <netif_add>
 1813a20:	1000051e 	bne	r2,zero,1813a38 <lwip_handle_interfaces+0x100>
#endif
			{
				printf("[eth%d] Fatal error initializing...\n", idx);
 1813a24:	e17fee17 	ldw	r5,-72(fp)
 1813a28:	01006134 	movhi	r4,388
 1813a2c:	2102e704 	addi	r4,r4,2972
 1813a30:	1800b240 	call	1800b24 <printf>
				for(;;) ;
 1813a34:	003fff06 	br	1813a34 <__ram_exceptions_end+0xff803744>
			}

		// check whether this interface should be used
		if (!is_interface_active(idx))
 1813a38:	e13fee17 	ldw	r4,-72(fp)
 1813a3c:	18009ac0 	call	18009ac <is_interface_active>
 1813a40:	10004826 	beq	r2,zero,1813b64 <lwip_handle_interfaces+0x22c>
			continue;

		// update the active phy count
		++active_macs;
 1813a44:	e0bfef17 	ldw	r2,-68(fp)
 1813a48:	10800044 	addi	r2,r2,1
 1813a4c:	e0bfef15 	stw	r2,-68(fp)

		if (active_macs == 1)
 1813a50:	e0bfef17 	ldw	r2,-68(fp)
 1813a54:	10800058 	cmpnei	r2,r2,1
 1813a58:	1000021e 	bne	r2,zero,1813a64 <lwip_handle_interfaces+0x12c>
			netif_set_default(eth);
 1813a5c:	e13ff017 	ldw	r4,-64(fp)
 1813a60:	18196300 	call	1819630 <netif_set_default>

		// Set status and link callback (link is not working?)
		netif_set_status_callback(eth, lwip_status_callback);
 1813a64:	01406074 	movhi	r5,385
 1813a68:	294fcb04 	addi	r5,r5,16172
 1813a6c:	e13ff017 	ldw	r4,-64(fp)
 1813a70:	18197a00 	call	18197a0 <netif_set_status_callback>

		if (link_callback)
 1813a74:	d0a7e917 	ldw	r2,-24668(gp)
 1813a78:	10000426 	beq	r2,zero,1813a8c <lwip_handle_interfaces+0x154>
			netif_set_link_callback(eth, link_callback);
 1813a7c:	d0a7e917 	ldw	r2,-24668(gp)
 1813a80:	100b883a 	mov	r5,r2
 1813a84:	e13ff017 	ldw	r4,-64(fp)
 1813a88:	18199180 	call	1819918 <netif_set_link_callback>

		// Initialize Altera TSE in a loop if waiting for a link
		printf("Waiting for link... ");
 1813a8c:	01006134 	movhi	r4,388
 1813a90:	2102f104 	addi	r4,r4,3012
 1813a94:	1800b240 	call	1800b24 <printf>
		if (lwip_wait_for_an(idx, eth->state) < 0) {
 1813a98:	e0bff017 	ldw	r2,-64(fp)
 1813a9c:	10800917 	ldw	r2,36(r2)
 1813aa0:	100b883a 	mov	r5,r2
 1813aa4:	e13fee17 	ldw	r4,-72(fp)
 1813aa8:	18138ac0 	call	18138ac <lwip_wait_for_an>
 1813aac:	1000040e 	bge	r2,zero,1813ac0 <lwip_handle_interfaces+0x188>
			printf("FAILED\n");
 1813ab0:	01006134 	movhi	r4,388
 1813ab4:	2102f704 	addi	r4,r4,3036
 1813ab8:	183c7cc0 	call	183c7cc <puts>
			continue;
 1813abc:	00002a06 	br	1813b68 <lwip_handle_interfaces+0x230>
		}

		printf("OK\n");
 1813ac0:	01006134 	movhi	r4,388
 1813ac4:	2102f904 	addi	r4,r4,3044
 1813ac8:	183c7cc0 	call	183c7cc <puts>

		// create input output task and start DHCP or static w/e
		snprintf(tmpbuf, OS_MAX_TASK_NAME_LEN, "LwIP %*sih", 2, eth->name);
 1813acc:	e0bff017 	ldw	r2,-64(fp)
 1813ad0:	10800e84 	addi	r2,r2,58
 1813ad4:	e0fff104 	addi	r3,fp,-60
 1813ad8:	d8800015 	stw	r2,0(sp)
 1813adc:	01c00084 	movi	r7,2
 1813ae0:	01806134 	movhi	r6,388
 1813ae4:	3182fa04 	addi	r6,r6,3048
 1813ae8:	01400a04 	movi	r5,40
 1813aec:	1809883a 	mov	r4,r3
 1813af0:	183c8b80 	call	183c8b8 <snprintf>
		tmpbuf[(OS_MAX_TASK_NAME_LEN - 1)] = 0;
 1813af4:	e03ffac5 	stb	zero,-21(fp)

		// create input task, this must be started before we can do any DHCP request
		if (sys_thread_new(tmpbuf, lwip_handle_ethernet_input, eth, KB(32), TCPIP_THREAD_PRIO) == NULL)
 1813af8:	e0fff104 	addi	r3,fp,-60
 1813afc:	008000c4 	movi	r2,3
 1813b00:	d8800015 	stw	r2,0(sp)
 1813b04:	01e00014 	movui	r7,32768
 1813b08:	e1bff017 	ldw	r6,-64(fp)
 1813b0c:	01406074 	movhi	r5,385
 1813b10:	294f6904 	addi	r5,r5,15780
 1813b14:	1809883a 	mov	r4,r3
 1813b18:	18155f40 	call	18155f4 <sys_thread_new>
 1813b1c:	1000031e 	bne	r2,zero,1813b2c <lwip_handle_interfaces+0x1f4>
			printf("LwIP Couldn't create input / output task for ethernet\n");
 1813b20:	01006134 	movhi	r4,388
 1813b24:	2102fd04 	addi	r4,r4,3060
 1813b28:	183c7cc0 	call	183c7cc <puts>

		// wait previous DHCP to finish
		if (dhcp) {
 1813b2c:	e0bffe17 	ldw	r2,-8(fp)
 1813b30:	10000926 	beq	r2,zero,1813b58 <lwip_handle_interfaces+0x220>
			printf("[LwIP] Start DHCP request...\n");
 1813b34:	01006134 	movhi	r4,388
 1813b38:	21030b04 	addi	r4,r4,3116
 1813b3c:	183c7cc0 	call	183c7cc <puts>

			dhcp_start(eth);
 1813b40:	e13ff017 	ldw	r4,-64(fp)
 1813b44:	18161ac0 	call	18161ac <dhcp_start>

			// wait till we got our address
			printf("[LwIP] Waiting for DHCP IP address...\n");
 1813b48:	01006134 	movhi	r4,388
 1813b4c:	21031304 	addi	r4,r4,3148
 1813b50:	183c7cc0 	call	183c7cc <puts>
 1813b54:	00000406 	br	1813b68 <lwip_handle_interfaces+0x230>
		} else {
			// the static IP has already been set, just bring up the interface
			netif_set_up(eth);
 1813b58:	e13ff017 	ldw	r4,-64(fp)
 1813b5c:	181965c0 	call	181965c <netif_set_up>
 1813b60:	00000106 	br	1813b68 <lwip_handle_interfaces+0x230>
				for(;;) ;
			}

		// check whether this interface should be used
		if (!is_interface_active(idx))
			continue;
 1813b64:	0001883a 	nop
	char tmpbuf[OS_MAX_TASK_NAME_LEN];

	ip_addr_t ip = {0}, subnet = {0}, gateway = {0};
	int dhcp;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 1813b68:	e0bfee17 	ldw	r2,-72(fp)
 1813b6c:	10800044 	addi	r2,r2,1
 1813b70:	e0bfee15 	stw	r2,-72(fp)
 1813b74:	e0bfee17 	ldw	r2,-72(fp)
 1813b78:	00bf7a0e 	bge	zero,r2,1813964 <__ram_exceptions_end+0xff803674>
		} else {
			// the static IP has already been set, just bring up the interface
			netif_set_up(eth);
		}
	}
}
 1813b7c:	0001883a 	nop
 1813b80:	e037883a 	mov	sp,fp
 1813b84:	dfc00117 	ldw	ra,4(sp)
 1813b88:	df000017 	ldw	fp,0(sp)
 1813b8c:	dec00204 	addi	sp,sp,8
 1813b90:	f800283a 	ret

01813b94 <get_mac_count>:
 * \brief Get the number of MAC's available in the NIOS build
 *
 * \returns the number of MAC's in the NIOS build
 */
int get_mac_count(void)
{
 1813b94:	deffff04 	addi	sp,sp,-4
 1813b98:	df000015 	stw	fp,0(sp)
 1813b9c:	d839883a 	mov	fp,sp
	return PHY_COUNT;
 1813ba0:	00800044 	movi	r2,1
}
 1813ba4:	e037883a 	mov	sp,fp
 1813ba8:	df000017 	ldw	fp,0(sp)
 1813bac:	dec00104 	addi	sp,sp,4
 1813bb0:	f800283a 	ret

01813bb4 <get_mac_base>:
 * \param [in] idx the index of the MAC
 *
 * \returns the base address of the MAC
 */
volatile np_tse_mac* get_mac_base(int idx)
{
 1813bb4:	defffe04 	addi	sp,sp,-8
 1813bb8:	df000115 	stw	fp,4(sp)
 1813bbc:	df000104 	addi	fp,sp,4
 1813bc0:	e13fff15 	stw	r4,-4(fp)
	if (idx > PHY_COUNT)
 1813bc4:	e0bfff17 	ldw	r2,-4(fp)
 1813bc8:	10800090 	cmplti	r2,r2,2
 1813bcc:	1000021e 	bne	r2,zero,1813bd8 <get_mac_base+0x24>
		return NULL;
 1813bd0:	0005883a 	mov	r2,zero
 1813bd4:	00000606 	br	1813bf0 <get_mac_base+0x3c>

	return (volatile np_tse_mac*)tse_mac_device[idx].tse_mac_base;
 1813bd8:	00806134 	movhi	r2,388
 1813bdc:	1093d804 	addi	r2,r2,20320
 1813be0:	e0ffff17 	ldw	r3,-4(fp)
 1813be4:	18c01224 	muli	r3,r3,72
 1813be8:	10c5883a 	add	r2,r2,r3
 1813bec:	10800017 	ldw	r2,0(r2)
}
 1813bf0:	e037883a 	mov	sp,fp
 1813bf4:	df000017 	ldw	fp,0(sp)
 1813bf8:	dec00104 	addi	sp,sp,4
 1813bfc:	f800283a 	ret

01813c00 <get_netif>:
 * \brief Get the netif struct used by LwIP
 *
 * \return the reference to the netif used by LwIP
 */
struct netif* get_netif(int idx)
{
 1813c00:	defffe04 	addi	sp,sp,-8
 1813c04:	df000115 	stw	fp,4(sp)
 1813c08:	df000104 	addi	fp,sp,4
 1813c0c:	e13fff15 	stw	r4,-4(fp)
	if (idx > PHY_COUNT)
 1813c10:	e0bfff17 	ldw	r2,-4(fp)
 1813c14:	10800090 	cmplti	r2,r2,2
 1813c18:	1000021e 	bne	r2,zero,1813c24 <get_netif+0x24>
		return NULL;
 1813c1c:	0005883a 	mov	r2,zero
 1813c20:	00000506 	br	1813c38 <get_netif+0x38>

	return eth_tse + idx;
 1813c24:	e0bfff17 	ldw	r2,-4(fp)
 1813c28:	10c01124 	muli	r3,r2,68
 1813c2c:	00806134 	movhi	r2,388
 1813c30:	109e4e04 	addi	r2,r2,31032
 1813c34:	1885883a 	add	r2,r3,r2
}
 1813c38:	e037883a 	mov	sp,fp
 1813c3c:	df000017 	ldw	fp,0(sp)
 1813c40:	dec00104 	addi	sp,sp,4
 1813c44:	f800283a 	ret

01813c48 <lwip_set_status_callback>:

netif_status_callback_fn lwip_set_status_callback(netif_status_callback_fn callback)
{
 1813c48:	defffd04 	addi	sp,sp,-12
 1813c4c:	df000215 	stw	fp,8(sp)
 1813c50:	df000204 	addi	fp,sp,8
 1813c54:	e13fff15 	stw	r4,-4(fp)
	netif_status_callback_fn old = status_callback;
 1813c58:	d0a7e817 	ldw	r2,-24672(gp)
 1813c5c:	e0bffe15 	stw	r2,-8(fp)

	status_callback = callback;
 1813c60:	e0bfff17 	ldw	r2,-4(fp)
 1813c64:	d0a7e815 	stw	r2,-24672(gp)

	return old;
 1813c68:	e0bffe17 	ldw	r2,-8(fp)
}
 1813c6c:	e037883a 	mov	sp,fp
 1813c70:	df000017 	ldw	fp,0(sp)
 1813c74:	dec00104 	addi	sp,sp,4
 1813c78:	f800283a 	ret

01813c7c <lwip_set_link_callback>:

netif_status_callback_fn lwip_set_link_callback(netif_status_callback_fn callback)
{
 1813c7c:	defffd04 	addi	sp,sp,-12
 1813c80:	df000215 	stw	fp,8(sp)
 1813c84:	df000204 	addi	fp,sp,8
 1813c88:	e13fff15 	stw	r4,-4(fp)
	netif_status_callback_fn old = link_callback;
 1813c8c:	d0a7e917 	ldw	r2,-24668(gp)
 1813c90:	e0bffe15 	stw	r2,-8(fp)

	link_callback = callback;
 1813c94:	e0bfff17 	ldw	r2,-4(fp)
 1813c98:	d0a7e915 	stw	r2,-24668(gp)

	return old;
 1813c9c:	e0bffe17 	ldw	r2,-8(fp)
}
 1813ca0:	e037883a 	mov	sp,fp
 1813ca4:	df000017 	ldw	fp,0(sp)
 1813ca8:	dec00104 	addi	sp,sp,4
 1813cac:	f800283a 	ret

01813cb0 <lwip_is_interface_up>:

#define REG_STATS_LS					(1 << 2)	// Link Status

int __attribute__((weak)) lwip_is_interface_up(__unused np_tse_mac* pmac)
{
 1813cb0:	defffd04 	addi	sp,sp,-12
 1813cb4:	df000215 	stw	fp,8(sp)
 1813cb8:	df000204 	addi	fp,sp,8
 1813cbc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 reg = IORD(&pmac->mdio1.STATUS, 0);
 1813cc0:	e0bfff17 	ldw	r2,-4(fp)
 1813cc4:	1080a104 	addi	r2,r2,644
 1813cc8:	10800037 	ldwio	r2,0(r2)
 1813ccc:	e0bffe0d 	sth	r2,-8(fp)

	return ((reg & (REG_STATS_LS)) == REG_STATS_LS) ? ETH_INTERFACE_UP : ETH_INTERFACE_DOWN;
 1813cd0:	e0bffe0b 	ldhu	r2,-8(fp)
 1813cd4:	1080010c 	andi	r2,r2,4
 1813cd8:	1004c03a 	cmpne	r2,r2,zero
 1813cdc:	10803fcc 	andi	r2,r2,255
}
 1813ce0:	e037883a 	mov	sp,fp
 1813ce4:	df000017 	ldw	fp,0(sp)
 1813ce8:	dec00104 	addi	sp,sp,4
 1813cec:	f800283a 	ret

01813cf0 <lwip_check_link_status>:

static void lwip_check_link_status(struct netif *netif, np_tse_mac* base)
{
 1813cf0:	defffa04 	addi	sp,sp,-24
 1813cf4:	dfc00515 	stw	ra,20(sp)
 1813cf8:	df000415 	stw	fp,16(sp)
 1813cfc:	df000404 	addi	fp,sp,16
 1813d00:	e13ffe15 	stw	r4,-8(fp)
 1813d04:	e17fff15 	stw	r5,-4(fp)
	struct ethernetif *ethif = (struct ethernetif*)netif->state;
 1813d08:	e0bffe17 	ldw	r2,-8(fp)
 1813d0c:	10800917 	ldw	r2,36(r2)
 1813d10:	e0bffc15 	stw	r2,-16(fp)

	// check if the interface is up
	int cur_status = lwip_is_interface_up(base);
 1813d14:	e13fff17 	ldw	r4,-4(fp)
 1813d18:	1813cb00 	call	1813cb0 <lwip_is_interface_up>
 1813d1c:	e0bffd15 	stw	r2,-12(fp)

	// is there a state change in the ethernet connectivity
	if (cur_status != ethif->current_state)
 1813d20:	e0bffc17 	ldw	r2,-16(fp)
 1813d24:	10c01617 	ldw	r3,88(r2)
 1813d28:	e0bffd17 	ldw	r2,-12(fp)
 1813d2c:	18801726 	beq	r3,r2,1813d8c <lwip_check_link_status+0x9c>
	{
		// check if the Auto-Negotiate is successful
		if (cur_status == ETH_INTERFACE_UP)
 1813d30:	e0bffd17 	ldw	r2,-12(fp)
 1813d34:	10800058 	cmpnei	r2,r2,1
 1813d38:	10000d1e 	bne	r2,zero,1813d70 <lwip_check_link_status+0x80>
		{
			// wait for auto-negotiate...
			if (lwip_wait_for_an(netif->num, ethif) > 0)
 1813d3c:	e0bffe17 	ldw	r2,-8(fp)
 1813d40:	10800f03 	ldbu	r2,60(r2)
 1813d44:	10803fcc 	andi	r2,r2,255
 1813d48:	e17ffc17 	ldw	r5,-16(fp)
 1813d4c:	1009883a 	mov	r4,r2
 1813d50:	18138ac0 	call	18138ac <lwip_wait_for_an>
 1813d54:	00800d0e 	bge	zero,r2,1813d8c <lwip_check_link_status+0x9c>
			{
				netif_set_link_up(netif);
 1813d58:	e13ffe17 	ldw	r4,-8(fp)
 1813d5c:	18197dc0 	call	18197dc <netif_set_link_up>
				ethif->current_state = cur_status;
 1813d60:	e0bffc17 	ldw	r2,-16(fp)
 1813d64:	e0fffd17 	ldw	r3,-12(fp)
 1813d68:	10c01615 	stw	r3,88(r2)

			netif_set_link_down(netif);
			ethif->current_state = cur_status;
		}
	}
}
 1813d6c:	00000706 	br	1813d8c <lwip_check_link_status+0x9c>
			}
		}
		else
		{
			// bring down the link
			ethif->link_alive = 0;
 1813d70:	e0bffc17 	ldw	r2,-16(fp)
 1813d74:	10000215 	stw	zero,8(r2)

			netif_set_link_down(netif);
 1813d78:	e13ffe17 	ldw	r4,-8(fp)
 1813d7c:	18198a00 	call	18198a0 <netif_set_link_down>
			ethif->current_state = cur_status;
 1813d80:	e0bffc17 	ldw	r2,-16(fp)
 1813d84:	e0fffd17 	ldw	r3,-12(fp)
 1813d88:	10c01615 	stw	r3,88(r2)
		}
	}
}
 1813d8c:	0001883a 	nop
 1813d90:	e037883a 	mov	sp,fp
 1813d94:	dfc00117 	ldw	ra,4(sp)
 1813d98:	df000017 	ldw	fp,0(sp)
 1813d9c:	dec00204 	addi	sp,sp,8
 1813da0:	f800283a 	ret

01813da4 <lwip_handle_ethernet_input>:

#define NR_TEST_PACKETS						50000

// Input / monitor task per ethernet device
static void lwip_handle_ethernet_input(void *pvParameters)
{
 1813da4:	defe7104 	addi	sp,sp,-1596
 1813da8:	dfc18e15 	stw	ra,1592(sp)
 1813dac:	df018d15 	stw	fp,1588(sp)
 1813db0:	df018d04 	addi	fp,sp,1588
 1813db4:	e13fff15 	stw	r4,-4(fp)
	sys_sem_t rcvsem = NULL;
 1813db8:	e03e7815 	stw	zero,-1568(fp)
	np_tse_mac* base = NULL;
 1813dbc:	e03e7415 	stw	zero,-1584(fp)
	struct netif *cur_netif = (struct netif*)pvParameters;
 1813dc0:	e0bfff17 	ldw	r2,-4(fp)
 1813dc4:	e0be7515 	stw	r2,-1580(fp)
	struct ethernetif *cur_ethif = (struct ethernetif*)cur_netif->state;
 1813dc8:	e0be7517 	ldw	r2,-1580(fp)
 1813dcc:	10800917 	ldw	r2,36(r2)
 1813dd0:	e0be7615 	stw	r2,-1576(fp)
	int packets_waiting = 0;
 1813dd4:	e03e7315 	stw	zero,-1588(fp)

	/* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
	char buf2[1560]; // TODO remove
	int replug_state = 0; // TODO remove
 1813dd8:	e03e7715 	stw	zero,-1572(fp)

#if LWIP_RECEIVE_SEMAPHORE
	rcvsem = cur_ethif->tse_info->rx_semaphore;
 1813ddc:	e0be7617 	ldw	r2,-1576(fp)
 1813de0:	10801717 	ldw	r2,92(r2)
 1813de4:	10800817 	ldw	r2,32(r2)
 1813de8:	e0be7815 	stw	r2,-1568(fp)
#endif

	// get the actual MAC peripheral
	base = get_mac_base(cur_netif->num);
 1813dec:	e0be7517 	ldw	r2,-1580(fp)
 1813df0:	10800f03 	ldbu	r2,60(r2)
 1813df4:	10803fcc 	andi	r2,r2,255
 1813df8:	1009883a 	mov	r4,r2
 1813dfc:	1813bb40 	call	1813bb4 <get_mac_base>
 1813e00:	e0be7415 	stw	r2,-1584(fp)
	if (!base)
 1813e04:	e0be7417 	ldw	r2,-1584(fp)
 1813e08:	10001426 	beq	r2,zero,1813e5c <lwip_handle_ethernet_input+0xb8>
	// else we'll poll the function once every 100ms
		while (1) {
		// if we have a semaphore wait for it to be released by the SGDMA IRQ, or sleep for 1 ms
			// if we timeout also call ethernetif_input although most likely it would be useless
			// it is use full however to check the link status
		if (rcvsem)
 1813e0c:	e0be7817 	ldw	r2,-1568(fp)
 1813e10:	10000526 	beq	r2,zero,1813e28 <lwip_handle_ethernet_input+0x84>
			sys_arch_sem_wait(&rcvsem, 100);
 1813e14:	e0be7804 	addi	r2,fp,-1568
 1813e18:	01401904 	movi	r5,100
 1813e1c:	1009883a 	mov	r4,r2
 1813e20:	18150140 	call	1815014 <sys_arch_sem_wait>
 1813e24:	00000406 	br	1813e38 <lwip_handle_ethernet_input+0x94>
		else if (packets_waiting <= 0)	// only sleep if there are no packets waiting
 1813e28:	e0be7317 	ldw	r2,-1588(fp)
 1813e2c:	00800216 	blt	zero,r2,1813e38 <lwip_handle_ethernet_input+0x94>
			mssleep(1);					// sleep a bit to be nice to the CPU
 1813e30:	0100fa04 	movi	r4,1000
 1813e34:	181319c0 	call	181319c <usleep>

			// Use semaphore or the timeout to call ethernet_input
			// this to avoid unnecessary load and faster responses ;)
		packets_waiting = ethernetif_input(cur_netif);
 1813e38:	e13e7517 	ldw	r4,-1580(fp)
 1813e3c:	18134cc0 	call	18134cc <ethernetif_input>
 1813e40:	e0be7315 	stw	r2,-1588(fp)

		// check the link status if there are no packets waiting
		if (packets_waiting <= 0)
 1813e44:	e0be7317 	ldw	r2,-1588(fp)
 1813e48:	00bff016 	blt	zero,r2,1813e0c <__ram_exceptions_end+0xff803b1c>
			lwip_check_link_status(cur_netif, base);
 1813e4c:	e17e7417 	ldw	r5,-1584(fp)
 1813e50:	e13e7517 	ldw	r4,-1580(fp)
 1813e54:	1813cf00 	call	1813cf0 <lwip_check_link_status>
	}
 1813e58:	003fec06 	br	1813e0c <__ram_exceptions_end+0xff803b1c>
#endif

	// get the actual MAC peripheral
	base = get_mac_base(cur_netif->num);
	if (!base)
		return;
 1813e5c:	0001883a 	nop

		// check the link status if there are no packets waiting
		if (packets_waiting <= 0)
			lwip_check_link_status(cur_netif, base);
	}
}
 1813e60:	e037883a 	mov	sp,fp
 1813e64:	dfc00117 	ldw	ra,4(sp)
 1813e68:	df000017 	ldw	fp,0(sp)
 1813e6c:	dec00204 	addi	sp,sp,8
 1813e70:	f800283a 	ret

01813e74 <print_ipad>:

const char* print_ipad(alt_u32 ip, char* buf)
{
 1813e74:	defff704 	addi	sp,sp,-36
 1813e78:	dfc00815 	stw	ra,32(sp)
 1813e7c:	df000715 	stw	fp,28(sp)
 1813e80:	df000704 	addi	fp,sp,28
 1813e84:	e13ffe15 	stw	r4,-8(fp)
 1813e88:	e17fff15 	stw	r5,-4(fp)
	alt_u8 bip[4];
	alt_u32 idx = 0;
 1813e8c:	e03ffc15 	stw	zero,-16(fp)

	for (; idx < sizeof(bip); idx++) {
 1813e90:	00000c06 	br	1813ec4 <print_ipad+0x50>
		bip[idx] = ip & 0xFF;
 1813e94:	e0bffe17 	ldw	r2,-8(fp)
 1813e98:	1009883a 	mov	r4,r2
 1813e9c:	e0fffd04 	addi	r3,fp,-12
 1813ea0:	e0bffc17 	ldw	r2,-16(fp)
 1813ea4:	1885883a 	add	r2,r3,r2
 1813ea8:	11000005 	stb	r4,0(r2)
		ip >>= 8;
 1813eac:	e0bffe17 	ldw	r2,-8(fp)
 1813eb0:	1004d23a 	srli	r2,r2,8
 1813eb4:	e0bffe15 	stw	r2,-8(fp)
const char* print_ipad(alt_u32 ip, char* buf)
{
	alt_u8 bip[4];
	alt_u32 idx = 0;

	for (; idx < sizeof(bip); idx++) {
 1813eb8:	e0bffc17 	ldw	r2,-16(fp)
 1813ebc:	10800044 	addi	r2,r2,1
 1813ec0:	e0bffc15 	stw	r2,-16(fp)
 1813ec4:	e0bffc17 	ldw	r2,-16(fp)
 1813ec8:	10800130 	cmpltui	r2,r2,4
 1813ecc:	103ff11e 	bne	r2,zero,1813e94 <__ram_exceptions_end+0xff803ba4>
		bip[idx] = ip & 0xFF;
		ip >>= 8;
	}

	snprintf(buf, 17, "%d.%d.%d.%d", bip[0], bip[1], bip[2], bip[3]);
 1813ed0:	e0bffd03 	ldbu	r2,-12(fp)
 1813ed4:	11403fcc 	andi	r5,r2,255
 1813ed8:	e0bffd43 	ldbu	r2,-11(fp)
 1813edc:	10803fcc 	andi	r2,r2,255
 1813ee0:	e0fffd83 	ldbu	r3,-10(fp)
 1813ee4:	18c03fcc 	andi	r3,r3,255
 1813ee8:	e13ffdc3 	ldbu	r4,-9(fp)
 1813eec:	21003fcc 	andi	r4,r4,255
 1813ef0:	d9000215 	stw	r4,8(sp)
 1813ef4:	d8c00115 	stw	r3,4(sp)
 1813ef8:	d8800015 	stw	r2,0(sp)
 1813efc:	280f883a 	mov	r7,r5
 1813f00:	01806134 	movhi	r6,388
 1813f04:	31831d04 	addi	r6,r6,3188
 1813f08:	01400444 	movi	r5,17
 1813f0c:	e13fff17 	ldw	r4,-4(fp)
 1813f10:	183c8b80 	call	183c8b8 <snprintf>

	return buf;
 1813f14:	e0bfff17 	ldw	r2,-4(fp)
}
 1813f18:	e037883a 	mov	sp,fp
 1813f1c:	dfc00117 	ldw	ra,4(sp)
 1813f20:	df000017 	ldw	fp,0(sp)
 1813f24:	dec00204 	addi	sp,sp,8
 1813f28:	f800283a 	ret

01813f2c <lwip_status_callback>:

static void lwip_status_callback(struct netif *netif)
{
 1813f2c:	defffd04 	addi	sp,sp,-12
 1813f30:	dfc00215 	stw	ra,8(sp)
 1813f34:	df000115 	stw	fp,4(sp)
 1813f38:	df000104 	addi	fp,sp,4
 1813f3c:	e13fff15 	stw	r4,-4(fp)
	if (status_callback)
 1813f40:	d0a7e817 	ldw	r2,-24672(gp)
 1813f44:	10000326 	beq	r2,zero,1813f54 <lwip_status_callback+0x28>
		status_callback(netif);
 1813f48:	d0a7e817 	ldw	r2,-24672(gp)
 1813f4c:	e13fff17 	ldw	r4,-4(fp)
 1813f50:	103ee83a 	callr	r2
}
 1813f54:	0001883a 	nop
 1813f58:	e037883a 	mov	sp,fp
 1813f5c:	dfc00117 	ldw	ra,4(sp)
 1813f60:	df000017 	ldw	fp,0(sp)
 1813f64:	dec00204 	addi	sp,sp,8
 1813f68:	f800283a 	ret

01813f6c <lwip_initialize_phys>:

void lwip_initialize_phys(void)
{
 1813f6c:	defff604 	addi	sp,sp,-40
 1813f70:	dfc00915 	stw	ra,36(sp)
 1813f74:	df000815 	stw	fp,32(sp)
 1813f78:	df000804 	addi	fp,sp,32
	int idx, phyadd, phyid, phyid2;
	np_tse_mac *pmac;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 1813f7c:	e03ff815 	stw	zero,-32(fp)
 1813f80:	00006f06 	br	1814140 <lwip_initialize_phys+0x1d4>
	{
		// check whether this interface should be used
		if (!is_interface_active(idx))
 1813f84:	e13ff817 	ldw	r4,-32(fp)
 1813f88:	18009ac0 	call	18009ac <is_interface_active>
 1813f8c:	10006426 	beq	r2,zero,1814120 <lwip_initialize_phys+0x1b4>
			continue;

		// the PHY is active... let's get the mac base
		pmac = get_mac_base(idx);
 1813f90:	e13ff817 	ldw	r4,-32(fp)
 1813f94:	1813bb40 	call	1813bb4 <get_mac_base>
 1813f98:	e0bffd15 	stw	r2,-12(fp)
		if (!pmac)
 1813f9c:	e0bffd17 	ldw	r2,-12(fp)
 1813fa0:	10006126 	beq	r2,zero,1814128 <lwip_initialize_phys+0x1bc>
			continue;

		// search the PHY and it's ID
		for (phyadd = 0x01; phyadd < 0x20; ++phyadd)
 1813fa4:	00800044 	movi	r2,1
 1813fa8:	e0bff915 	stw	r2,-28(fp)
 1813fac:	00001206 	br	1813ff8 <lwip_initialize_phys+0x8c>
		{
			IOWR(&pmac->MDIO_ADDR1, 0, phyadd);
 1813fb0:	e0bffd17 	ldw	r2,-12(fp)
 1813fb4:	10801004 	addi	r2,r2,64
 1813fb8:	e0fff917 	ldw	r3,-28(fp)
 1813fbc:	10c00035 	stwio	r3,0(r2)

			phyid = IORD(&pmac->mdio1.PHY_ID1, 0);
 1813fc0:	e0bffd17 	ldw	r2,-12(fp)
 1813fc4:	1080a204 	addi	r2,r2,648
 1813fc8:	10800037 	ldwio	r2,0(r2)
 1813fcc:	e0bffa15 	stw	r2,-24(fp)
			phyid2 = IORD(&pmac->mdio1.PHY_ID2, 0);
 1813fd0:	e0bffd17 	ldw	r2,-12(fp)
 1813fd4:	1080a304 	addi	r2,r2,652
 1813fd8:	10800037 	ldwio	r2,0(r2)
 1813fdc:	e0bffb15 	stw	r2,-20(fp)

			if (phyid != phyid2)
 1813fe0:	e0fffa17 	ldw	r3,-24(fp)
 1813fe4:	e0bffb17 	ldw	r2,-20(fp)
 1813fe8:	1880071e 	bne	r3,r2,1814008 <lwip_initialize_phys+0x9c>
		pmac = get_mac_base(idx);
		if (!pmac)
			continue;

		// search the PHY and it's ID
		for (phyadd = 0x01; phyadd < 0x20; ++phyadd)
 1813fec:	e0bff917 	ldw	r2,-28(fp)
 1813ff0:	10800044 	addi	r2,r2,1
 1813ff4:	e0bff915 	stw	r2,-28(fp)
 1813ff8:	e0bff917 	ldw	r2,-28(fp)
 1813ffc:	10800810 	cmplti	r2,r2,32
 1814000:	103feb1e 	bne	r2,zero,1813fb0 <__ram_exceptions_end+0xff803cc0>
 1814004:	00000106 	br	181400c <lwip_initialize_phys+0xa0>

			phyid = IORD(&pmac->mdio1.PHY_ID1, 0);
			phyid2 = IORD(&pmac->mdio1.PHY_ID2, 0);

			if (phyid != phyid2)
				break;
 1814008:	0001883a 	nop
		}

		// if we have the PHY we can initialize it if we can find the driver in the pphy_profiles array
		if (phyid != phyid2)
 181400c:	e0fffa17 	ldw	r3,-24(fp)
 1814010:	e0bffb17 	ldw	r2,-20(fp)
 1814014:	18804726 	beq	r3,r2,1814134 <lwip_initialize_phys+0x1c8>
            extern alt_tse_phy_profile *pphy_profiles[];
            extern alt_u8 phy_profile_count;

            int i;

            for(i = 0; i < phy_profile_count; i++) {
 1814018:	e03ffc15 	stw	zero,-16(fp)
 181401c:	00003b06 	br	181410c <lwip_initialize_phys+0x1a0>
                alt_u32 oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 1814020:	e0bffa17 	ldw	r2,-24(fp)
 1814024:	100691ba 	slli	r3,r2,6
 1814028:	e0bffb17 	ldw	r2,-20(fp)
 181402c:	1005d2ba 	srai	r2,r2,10
 1814030:	10800fcc 	andi	r2,r2,63
 1814034:	1884b03a 	or	r2,r3,r2
 1814038:	e0bffe15 	stw	r2,-8(fp)
                alt_u8 model_number = (phyid2 >> 4) & 0x3f;
 181403c:	e0bffb17 	ldw	r2,-20(fp)
 1814040:	1005d13a 	srai	r2,r2,4
 1814044:	10800fcc 	andi	r2,r2,63
 1814048:	e0bfff05 	stb	r2,-4(fp)
                // unused so far... alt_u8 revision_number = phyid2 & 0x0f;

                // if PHY match with PHY in profile we can call the initialize function
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 181404c:	00806134 	movhi	r2,388
 1814050:	109eda04 	addi	r2,r2,31592
 1814054:	e0fffc17 	ldw	r3,-16(fp)
 1814058:	18c7883a 	add	r3,r3,r3
 181405c:	18c7883a 	add	r3,r3,r3
 1814060:	10c5883a 	add	r2,r2,r3
 1814064:	10800017 	ldw	r2,0(r2)
 1814068:	10c01417 	ldw	r3,80(r2)
 181406c:	e0bffe17 	ldw	r2,-8(fp)
 1814070:	1880231e 	bne	r3,r2,1814100 <lwip_initialize_phys+0x194>
 1814074:	00806134 	movhi	r2,388
 1814078:	109eda04 	addi	r2,r2,31592
 181407c:	e0fffc17 	ldw	r3,-16(fp)
 1814080:	18c7883a 	add	r3,r3,r3
 1814084:	18c7883a 	add	r3,r3,r3
 1814088:	10c5883a 	add	r2,r2,r3
 181408c:	10800017 	ldw	r2,0(r2)
 1814090:	10801503 	ldbu	r2,84(r2)
 1814094:	10c03fcc 	andi	r3,r2,255
 1814098:	e0bfff03 	ldbu	r2,-4(fp)
 181409c:	1880181e 	bne	r3,r2,1814100 <lwip_initialize_phys+0x194>
                {
                    if (pphy_profiles[i]->phy_cfg)
 18140a0:	00806134 	movhi	r2,388
 18140a4:	109eda04 	addi	r2,r2,31592
 18140a8:	e0fffc17 	ldw	r3,-16(fp)
 18140ac:	18c7883a 	add	r3,r3,r3
 18140b0:	18c7883a 	add	r3,r3,r3
 18140b4:	10c5883a 	add	r2,r2,r3
 18140b8:	10800017 	ldw	r2,0(r2)
 18140bc:	10801717 	ldw	r2,92(r2)
 18140c0:	10001b26 	beq	r2,zero,1814130 <lwip_initialize_phys+0x1c4>
                    {
                    	// initialize the PHY
                    	pphy_profiles[i]->phy_cfg(pmac);
 18140c4:	00806134 	movhi	r2,388
 18140c8:	109eda04 	addi	r2,r2,31592
 18140cc:	e0fffc17 	ldw	r3,-16(fp)
 18140d0:	18c7883a 	add	r3,r3,r3
 18140d4:	18c7883a 	add	r3,r3,r3
 18140d8:	10c5883a 	add	r2,r2,r3
 18140dc:	10800017 	ldw	r2,0(r2)
 18140e0:	10801717 	ldw	r2,92(r2)
 18140e4:	e13ffd17 	ldw	r4,-12(fp)
 18140e8:	103ee83a 	callr	r2

                    	// and restart the Auto-Negotiation
                    	IOWR(&pmac->mdio1.CONTROL, 0, (1<<12 | 1<<9));
 18140ec:	e0bffd17 	ldw	r2,-12(fp)
 18140f0:	1080a004 	addi	r2,r2,640
 18140f4:	00c48004 	movi	r3,4608
 18140f8:	10c00035 	stwio	r3,0(r2)
                    }

                    // and done for this PHY
                    break;
 18140fc:	00000c06 	br	1814130 <lwip_initialize_phys+0x1c4>
            extern alt_tse_phy_profile *pphy_profiles[];
            extern alt_u8 phy_profile_count;

            int i;

            for(i = 0; i < phy_profile_count; i++) {
 1814100:	e0bffc17 	ldw	r2,-16(fp)
 1814104:	10800044 	addi	r2,r2,1
 1814108:	e0bffc15 	stw	r2,-16(fp)
 181410c:	d0a7fe03 	ldbu	r2,-24584(gp)
 1814110:	10803fcc 	andi	r2,r2,255
 1814114:	e0fffc17 	ldw	r3,-16(fp)
 1814118:	18bfc116 	blt	r3,r2,1814020 <__ram_exceptions_end+0xff803d30>
 181411c:	00000506 	br	1814134 <lwip_initialize_phys+0x1c8>

	for (idx = 0; idx < PHY_COUNT; ++idx)
	{
		// check whether this interface should be used
		if (!is_interface_active(idx))
			continue;
 1814120:	0001883a 	nop
 1814124:	00000306 	br	1814134 <lwip_initialize_phys+0x1c8>

		// the PHY is active... let's get the mac base
		pmac = get_mac_base(idx);
		if (!pmac)
			continue;
 1814128:	0001883a 	nop
 181412c:	00000106 	br	1814134 <lwip_initialize_phys+0x1c8>
                    	// and restart the Auto-Negotiation
                    	IOWR(&pmac->mdio1.CONTROL, 0, (1<<12 | 1<<9));
                    }

                    // and done for this PHY
                    break;
 1814130:	0001883a 	nop
void lwip_initialize_phys(void)
{
	int idx, phyadd, phyid, phyid2;
	np_tse_mac *pmac;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 1814134:	e0bff817 	ldw	r2,-32(fp)
 1814138:	10800044 	addi	r2,r2,1
 181413c:	e0bff815 	stw	r2,-32(fp)
 1814140:	e0bff817 	ldw	r2,-32(fp)
 1814144:	00bf8f0e 	bge	zero,r2,1813f84 <__ram_exceptions_end+0xff803c94>
                    break;
                }
            }
		}
	}
}
 1814148:	0001883a 	nop
 181414c:	e037883a 	mov	sp,fp
 1814150:	dfc00117 	ldw	ra,4(sp)
 1814154:	df000017 	ldw	fp,0(sp)
 1814158:	dec00204 	addi	sp,sp,8
 181415c:	f800283a 	ret

01814160 <tse_mac_init>:
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface, struct ethernetif *ethernetif)
{
 1814160:	defff004 	addi	sp,sp,-64
 1814164:	dfc00f15 	stw	ra,60(sp)
 1814168:	df000e15 	stw	fp,56(sp)
 181416c:	df000e04 	addi	fp,sp,56
 1814170:	e13ffe15 	stw	r4,-8(fp)
 1814174:	e17fff15 	stw	r5,-4(fp)
	int speed, duplex, result;
	int x;

	alt_sgdma_dev *sgdma_tx_dev;
	alt_sgdma_dev *sgdma_rx_dev;
	alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 1814178:	00806134 	movhi	r2,388
 181417c:	109e5f04 	addi	r2,r2,31100
 1814180:	e0fffe17 	ldw	r3,-8(fp)
 1814184:	18c00924 	muli	r3,r3,36
 1814188:	10c5883a 	add	r2,r2,r3
 181418c:	10800704 	addi	r2,r2,28
 1814190:	10800017 	ldw	r2,0(r2)
 1814194:	e0bff715 	stw	r2,-36(fp)
	np_tse_mac *mi_base;
	alt_tse_mac_info *pmac_info;

#if LWIP_RECEIVE_SEMAPHORE
	if (!tse[iface].rx_semaphore) {
 1814198:	00806134 	movhi	r2,388
 181419c:	109e5f04 	addi	r2,r2,31100
 18141a0:	e0fffe17 	ldw	r3,-8(fp)
 18141a4:	18c00924 	muli	r3,r3,36
 18141a8:	10c5883a 	add	r2,r2,r3
 18141ac:	10800804 	addi	r2,r2,32
 18141b0:	10800017 	ldw	r2,0(r2)
 18141b4:	10001e1e 	bne	r2,zero,1814230 <tse_mac_init+0xd0>
		dprintf(("creating RX SGDMA semaphore\n"));
		// create a counting semaphore so we can 'release' the semaphore for each rx input buffer filled
		if (sys_sem_new(&tse[iface].rx_semaphore, LWIP_RX_ETH_BUFFER) != ERR_OK) {
 18141b8:	e0bffe17 	ldw	r2,-8(fp)
 18141bc:	10800924 	muli	r2,r2,36
 18141c0:	10c00804 	addi	r3,r2,32
 18141c4:	00806134 	movhi	r2,388
 18141c8:	109e5f04 	addi	r2,r2,31100
 18141cc:	1885883a 	add	r2,r3,r2
 18141d0:	01400304 	movi	r5,12
 18141d4:	1009883a 	mov	r4,r2
 18141d8:	1814e900 	call	1814e90 <sys_sem_new>
 18141dc:	10803fcc 	andi	r2,r2,255
 18141e0:	1080201c 	xori	r2,r2,128
 18141e4:	10bfe004 	addi	r2,r2,-128
 18141e8:	1000111e 	bne	r2,zero,1814230 <tse_mac_init+0xd0>
			dprintf(("[LwIP] Couldn't create the rx_semephore\n"));
		} else {
			// we got a semaphore, completely lock it
			for (x = 0; x < LWIP_RX_ETH_BUFFER; x++)
 18141ec:	e03ff515 	stw	zero,-44(fp)
 18141f0:	00000c06 	br	1814224 <tse_mac_init+0xc4>
				sys_arch_sem_wait(&tse[iface].rx_semaphore, 1);
 18141f4:	e0bffe17 	ldw	r2,-8(fp)
 18141f8:	10800924 	muli	r2,r2,36
 18141fc:	10c00804 	addi	r3,r2,32
 1814200:	00806134 	movhi	r2,388
 1814204:	109e5f04 	addi	r2,r2,31100
 1814208:	1885883a 	add	r2,r3,r2
 181420c:	01400044 	movi	r5,1
 1814210:	1009883a 	mov	r4,r2
 1814214:	18150140 	call	1815014 <sys_arch_sem_wait>
		// create a counting semaphore so we can 'release' the semaphore for each rx input buffer filled
		if (sys_sem_new(&tse[iface].rx_semaphore, LWIP_RX_ETH_BUFFER) != ERR_OK) {
			dprintf(("[LwIP] Couldn't create the rx_semephore\n"));
		} else {
			// we got a semaphore, completely lock it
			for (x = 0; x < LWIP_RX_ETH_BUFFER; x++)
 1814218:	e0bff517 	ldw	r2,-44(fp)
 181421c:	10800044 	addi	r2,r2,1
 1814220:	e0bff515 	stw	r2,-44(fp)
 1814224:	e0bff517 	ldw	r2,-44(fp)
 1814228:	10800310 	cmplti	r2,r2,12
 181422c:	103ff11e 	bne	r2,zero,18141f4 <__ram_exceptions_end+0xff803f04>
	dprintf(("[tse_mac_init]\n"));
#ifdef PRINTIF
	dprintf(("tse_mac_init %d\n", iface));
#endif    
	// These lines were done in prep_tse_mac
	tse_hw = &tse_mac_device[iface];
 1814230:	e0bffe17 	ldw	r2,-8(fp)
 1814234:	10c01224 	muli	r3,r2,72
 1814238:	00806134 	movhi	r2,388
 181423c:	1093d804 	addi	r2,r2,20320
 1814240:	1885883a 	add	r2,r3,r2
 1814244:	e0bff715 	stw	r2,-36(fp)
	tse[iface].tse = tse_hw;
 1814248:	00806134 	movhi	r2,388
 181424c:	109e5f04 	addi	r2,r2,31100
 1814250:	e0fffe17 	ldw	r3,-8(fp)
 1814254:	18c00924 	muli	r3,r3,36
 1814258:	10c5883a 	add	r2,r2,r3
 181425c:	10800704 	addi	r2,r2,28
 1814260:	e0fff717 	ldw	r3,-36(fp)
 1814264:	10c00015 	stw	r3,0(r2)

	// Store ethernetif for access, and the tse in ethernetif for access in tse_mac_raw_send/tse_mac_rcv
	tse[iface].ethernetif = ethernetif;
 1814268:	00806134 	movhi	r2,388
 181426c:	109e5f04 	addi	r2,r2,31100
 1814270:	e0fffe17 	ldw	r3,-8(fp)
 1814274:	18c00924 	muli	r3,r3,36
 1814278:	10c5883a 	add	r2,r2,r3
 181427c:	10800604 	addi	r2,r2,24
 1814280:	e0ffff17 	ldw	r3,-4(fp)
 1814284:	10c00015 	stw	r3,0(r2)
	ethernetif->iface = iface;
 1814288:	e0bfff17 	ldw	r2,-4(fp)
 181428c:	e0fffe17 	ldw	r3,-8(fp)
 1814290:	10c00115 	stw	r3,4(r2)
	ethernetif->tse_info = &tse[iface];
 1814294:	e0bffe17 	ldw	r2,-8(fp)
 1814298:	10c00924 	muli	r3,r2,36
 181429c:	00806134 	movhi	r2,388
 18142a0:	109e5f04 	addi	r2,r2,31100
 18142a4:	1887883a 	add	r3,r3,r2
 18142a8:	e0bfff17 	ldw	r2,-4(fp)
 18142ac:	10c01715 	stw	r3,92(r2)

	if (tse_hw->ext_desc_mem == 1)
 18142b0:	e0bff717 	ldw	r2,-36(fp)
 18142b4:	10800783 	ldbu	r2,30(r2)
 18142b8:	10803fcc 	andi	r2,r2,255
 18142bc:	10800058 	cmpnei	r2,r2,1
 18142c0:	10000b1e 	bne	r2,zero,18142f0 <tse_mac_init+0x190>
	{
		tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
 18142c4:	e0bff717 	ldw	r2,-36(fp)
 18142c8:	10800817 	ldw	r2,32(r2)
 18142cc:	1009883a 	mov	r4,r2
 18142d0:	00806134 	movhi	r2,388
 18142d4:	109e5f04 	addi	r2,r2,31100
 18142d8:	e0fffe17 	ldw	r3,-8(fp)
 18142dc:	18c00924 	muli	r3,r3,36
 18142e0:	10c5883a 	add	r2,r2,r3
 18142e4:	10800504 	addi	r2,r2,20
 18142e8:	11000015 	stw	r4,0(r2)
 18142ec:	00001206 	br	1814338 <tse_mac_init+0x1d8>
	}
	else
	{
		unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
 18142f0:	01002804 	movi	r4,160
 18142f4:	182cd340 	call	182cd34 <alt_uncached_malloc>
 18142f8:	e0bff615 	stw	r2,-40(fp)

		while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 18142fc:	00000306 	br	181430c <tse_mac_init+0x1ac>
			temp_desc++;
 1814300:	e0bff617 	ldw	r2,-40(fp)
 1814304:	10800044 	addi	r2,r2,1
 1814308:	e0bff615 	stw	r2,-40(fp)
	}
	else
	{
		unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));

		while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 181430c:	e0bff617 	ldw	r2,-40(fp)
 1814310:	108007cc 	andi	r2,r2,31
 1814314:	103ffa1e 	bne	r2,zero,1814300 <__ram_exceptions_end+0xff804010>
			temp_desc++;
		tse[iface].desc = (alt_sgdma_descriptor *) temp_desc;
 1814318:	00806134 	movhi	r2,388
 181431c:	109e5f04 	addi	r2,r2,31100
 1814320:	e0fffe17 	ldw	r3,-8(fp)
 1814324:	18c00924 	muli	r3,r3,36
 1814328:	10c5883a 	add	r2,r2,r3
 181432c:	10800504 	addi	r2,r2,20
 1814330:	e0fff617 	ldw	r3,-40(fp)
 1814334:	10c00015 	stw	r3,0(r2)
	}

	/* Get the Rx and Tx SGDMA addresses */
	sgdma_tx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_tx);
 1814338:	e0bff717 	ldw	r2,-36(fp)
 181433c:	10800517 	ldw	r2,20(r2)
 1814340:	1009883a 	mov	r4,r2
 1814344:	18255840 	call	1825584 <alt_avalon_sgdma_open>
 1814348:	e0bff815 	stw	r2,-32(fp)

	if (!sgdma_tx_dev)
 181434c:	e0bff817 	ldw	r2,-32(fp)
 1814350:	1000021e 	bne	r2,zero,181435c <tse_mac_init+0x1fc>
	{
		dprintf(("[triple_speed_ethernet_init] Error opening TX SGDMA\n"));
		return ENP_RESOURCE;
 1814354:	00bffa84 	movi	r2,-22
 1814358:	00018f06 	br	1814998 <tse_mac_init+0x838>
	}

	sgdma_rx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_rx);
 181435c:	e0bff717 	ldw	r2,-36(fp)
 1814360:	10800617 	ldw	r2,24(r2)
 1814364:	1009883a 	mov	r4,r2
 1814368:	18255840 	call	1825584 <alt_avalon_sgdma_open>
 181436c:	e0bff915 	stw	r2,-28(fp)
	if (!sgdma_rx_dev)
 1814370:	e0bff917 	ldw	r2,-28(fp)
 1814374:	1000021e 	bne	r2,zero,1814380 <tse_mac_init+0x220>
	{
		dprintf(("[triple_speed_ethernet_init] Error opening RX SGDMA\n"));
		return ENP_RESOURCE;
 1814378:	00bffa84 	movi	r2,-22
 181437c:	00018606 	br	1814998 <tse_mac_init+0x838>
	}

	/* Initialize mtip_mac_trans_info structure with values from <system.h>*/

	tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
 1814380:	e0bffe17 	ldw	r2,-8(fp)
 1814384:	10c00924 	muli	r3,r2,36
 1814388:	00806134 	movhi	r2,388
 181438c:	109e5f04 	addi	r2,r2,31100
 1814390:	1887883a 	add	r3,r3,r2
 1814394:	e0bff717 	ldw	r2,-36(fp)
 1814398:	10800017 	ldw	r2,0(r2)
 181439c:	e13ff817 	ldw	r4,-32(fp)
 18143a0:	e17ff917 	ldw	r5,-28(fp)
 18143a4:	d8000015 	stw	zero,0(sp)
 18143a8:	280f883a 	mov	r7,r5
 18143ac:	200d883a 	mov	r6,r4
 18143b0:	100b883a 	mov	r5,r2
 18143b4:	1809883a 	mov	r4,r3
 18143b8:	1825d840 	call	1825d84 <tse_mac_initTransInfo2>
			(unsigned int)sgdma_tx_dev,
			(unsigned int)sgdma_rx_dev,
			0);
	mi_base = tse[iface].mi.base;
 18143bc:	00806134 	movhi	r2,388
 18143c0:	109e5f04 	addi	r2,r2,31100
 18143c4:	e0fffe17 	ldw	r3,-8(fp)
 18143c8:	18c00924 	muli	r3,r3,36
 18143cc:	10c5883a 	add	r2,r2,r3
 18143d0:	10800017 	ldw	r2,0(r2)
 18143d4:	e0bffa15 	stw	r2,-24(fp)

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
 18143d8:	00806134 	movhi	r2,388
 18143dc:	109e5f04 	addi	r2,r2,31100
 18143e0:	e0fffe17 	ldw	r3,-8(fp)
 18143e4:	18c00924 	muli	r3,r3,36
 18143e8:	10c5883a 	add	r2,r2,r3
 18143ec:	10800204 	addi	r2,r2,8
 18143f0:	10800017 	ldw	r2,0(r2)
 18143f4:	10800317 	ldw	r2,12(r2)
 18143f8:	10800404 	addi	r2,r2,16
 18143fc:	00c00074 	movhi	r3,1
 1814400:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, 0x0);
 1814404:	00806134 	movhi	r2,388
 1814408:	109e5f04 	addi	r2,r2,31100
 181440c:	e0fffe17 	ldw	r3,-8(fp)
 1814410:	18c00924 	muli	r3,r3,36
 1814414:	10c5883a 	add	r2,r2,r3
 1814418:	10800204 	addi	r2,r2,8
 181441c:	10800017 	ldw	r2,0(r2)
 1814420:	10800317 	ldw	r2,12(r2)
 1814424:	10800404 	addi	r2,r2,16
 1814428:	0007883a 	mov	r3,zero
 181442c:	10c00035 	stwio	r3,0(r2)

	/* reset the PHY if necessary */
	result = getPHYSpeed(tse[iface].mi.base);
 1814430:	00806134 	movhi	r2,388
 1814434:	109e5f04 	addi	r2,r2,31100
 1814438:	e0fffe17 	ldw	r3,-8(fp)
 181443c:	18c00924 	muli	r3,r3,36
 1814440:	10c5883a 	add	r2,r2,r3
 1814444:	10800017 	ldw	r2,0(r2)
 1814448:	1009883a 	mov	r4,r2
 181444c:	18272100 	call	1827210 <getPHYSpeed>
 1814450:	e0bffb15 	stw	r2,-20(fp)
	speed = (result >> 1) & 0x07;
 1814454:	e0bffb17 	ldw	r2,-20(fp)
 1814458:	1005d07a 	srai	r2,r2,1
 181445c:	108001cc 	andi	r2,r2,7
 1814460:	e0bffc15 	stw	r2,-16(fp)
	duplex = result & 0x01;
 1814464:	e0bffb17 	ldw	r2,-20(fp)
 1814468:	1080004c 	andi	r2,r2,1
 181446c:	e0bff415 	stw	r2,-48(fp)

	/* reset the mac */
	IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
 1814470:	00806134 	movhi	r2,388
 1814474:	109e5f04 	addi	r2,r2,31100
 1814478:	e0fffe17 	ldw	r3,-8(fp)
 181447c:	18c00924 	muli	r3,r3,36
 1814480:	10c5883a 	add	r2,r2,r3
 1814484:	10800017 	ldw	r2,0(r2)
 1814488:	10800204 	addi	r2,r2,8
 181448c:	00c800c4 	movi	r3,8195
 1814490:	10c00035 	stwio	r3,0(r2)
			mmac_cc_SW_RESET_mask |
			mmac_cc_TX_ENA_mask |
			mmac_cc_RX_ENA_mask);

	x = 0;
 1814494:	e03ff515 	stw	zero,-44(fp)
	while (IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) &
 1814498:	00000506 	br	18144b0 <tse_mac_init+0x350>
			ALTERA_TSEMAC_CMD_SW_RESET_MSK)
	{
		if( x++ > 10000 )
 181449c:	e0bff517 	ldw	r2,-44(fp)
 18144a0:	10c00044 	addi	r3,r2,1
 18144a4:	e0fff515 	stw	r3,-44(fp)
 18144a8:	1089c450 	cmplti	r2,r2,10001
 18144ac:	10000b26 	beq	r2,zero,18144dc <tse_mac_init+0x37c>
			mmac_cc_SW_RESET_mask |
			mmac_cc_TX_ENA_mask |
			mmac_cc_RX_ENA_mask);

	x = 0;
	while (IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) &
 18144b0:	00806134 	movhi	r2,388
 18144b4:	109e5f04 	addi	r2,r2,31100
 18144b8:	e0fffe17 	ldw	r3,-8(fp)
 18144bc:	18c00924 	muli	r3,r3,36
 18144c0:	10c5883a 	add	r2,r2,r3
 18144c4:	10800017 	ldw	r2,0(r2)
 18144c8:	10800204 	addi	r2,r2,8
 18144cc:	10800037 	ldwio	r2,0(r2)
 18144d0:	1088000c 	andi	r2,r2,8192
 18144d4:	103ff11e 	bne	r2,zero,181449c <__ram_exceptions_end+0xff8041ac>
 18144d8:	00000106 	br	18144e0 <tse_mac_init+0x380>
			ALTERA_TSEMAC_CMD_SW_RESET_MSK)
	{
		if( x++ > 10000 )
			break;
 18144dc:	0001883a 	nop
	}

	if (x >= 10000)
		dprintf(("TSEMAC SW reset bit never cleared!\n"));

	dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 18144e0:	00806134 	movhi	r2,388
 18144e4:	109e5f04 	addi	r2,r2,31100
 18144e8:	e0fffe17 	ldw	r3,-8(fp)
 18144ec:	18c00924 	muli	r3,r3,36
 18144f0:	10c5883a 	add	r2,r2,r3
 18144f4:	10800017 	ldw	r2,0(r2)
 18144f8:	10800204 	addi	r2,r2,8
 18144fc:	10800037 	ldwio	r2,0(r2)
 1814500:	e0bff315 	stw	r2,-52(fp)
		dprintf(("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat));
	else
		dprintf(("OK, x=%d, CMD_CONFIG=0x%08x\n", x, dat));

	/* Initialize MAC registers */
	IOWR_ALTERA_TSEMAC_FRM_LENGTH(mi_base, PBUF_POOL_BUFSIZE+ETH_PAD_SIZE);
 1814504:	e0bffa17 	ldw	r2,-24(fp)
 1814508:	10800504 	addi	r2,r2,20
 181450c:	00c17b84 	movi	r3,1518
 1814510:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(mi_base, 8);
 1814514:	e0bffa17 	ldw	r2,-24(fp)
 1814518:	10800b04 	addi	r2,r2,44
 181451c:	00c00204 	movi	r3,8
 1814520:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(mi_base, 8);
 1814524:	e0bffa17 	ldw	r2,-24(fp)
 1814528:	10800c04 	addi	r2,r2,48
 181452c:	00c00204 	movi	r3,8
 1814530:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(mi_base, 8);
 1814534:	e0bffa17 	ldw	r2,-24(fp)
 1814538:	10800d04 	addi	r2,r2,52
 181453c:	00c00204 	movi	r3,8
 1814540:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(mi_base,  3);
 1814544:	e0bffa17 	ldw	r2,-24(fp)
 1814548:	10800e04 	addi	r2,r2,56
 181454c:	00c000c4 	movi	r3,3
 1814550:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(mi_base, tse_hw->tse_tx_depth - 16);
 1814554:	e0bffa17 	ldw	r2,-24(fp)
 1814558:	10800904 	addi	r2,r2,36
 181455c:	e0fff717 	ldw	r3,-36(fp)
 1814560:	18c0010b 	ldhu	r3,4(r3)
 1814564:	18ffffcc 	andi	r3,r3,65535
 1814568:	18fffc04 	addi	r3,r3,-16
 181456c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(mi_base,  0);
 1814570:	e0bffa17 	ldw	r2,-24(fp)
 1814574:	10800a04 	addi	r2,r2,40
 1814578:	0007883a 	mov	r3,zero
 181457c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(mi_base, tse_hw->tse_rx_depth - 16);
 1814580:	e0bffa17 	ldw	r2,-24(fp)
 1814584:	10800704 	addi	r2,r2,28
 1814588:	e0fff717 	ldw	r3,-36(fp)
 181458c:	18c0018b 	ldhu	r3,6(r3)
 1814590:	18ffffcc 	andi	r3,r3,65535
 1814594:	18fffc04 	addi	r3,r3,-16
 1814598:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(mi_base,  0);
 181459c:	e0bffa17 	ldw	r2,-24(fp)
 18145a0:	10800804 	addi	r2,r2,32
 18145a4:	0007883a 	mov	r3,zero
 18145a8:	10c00035 	stwio	r3,0(r2)

	/* Enable TX shift 16 for removing two bytes from the start of all transmitted frames */
	IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK);
 18145ac:	00806134 	movhi	r2,388
 18145b0:	109e5f04 	addi	r2,r2,31100
 18145b4:	e0fffe17 	ldw	r3,-8(fp)
 18145b8:	18c00924 	muli	r3,r3,36
 18145bc:	10c5883a 	add	r2,r2,r3
 18145c0:	10800017 	ldw	r2,0(r2)
 18145c4:	10803a04 	addi	r2,r2,232
 18145c8:	00c00134 	movhi	r3,4
 18145cc:	10c00035 	stwio	r3,0(r2)

	/*
	 * check if the MAC supports the 16-bit shift option allowing us
	 * to send BIASed frames without copying. Used by the send function later.
	 */
	if ((IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) == 0)
 18145d0:	00806134 	movhi	r2,388
 18145d4:	109e5f04 	addi	r2,r2,31100
 18145d8:	e0fffe17 	ldw	r3,-8(fp)
 18145dc:	18c00924 	muli	r3,r3,36
 18145e0:	10c5883a 	add	r2,r2,r3
 18145e4:	10800017 	ldw	r2,0(r2)
 18145e8:	10803a04 	addi	r2,r2,232
 18145ec:	10800037 	ldwio	r2,0(r2)
 18145f0:	1080012c 	andhi	r2,r2,4
 18145f4:	1000021e 	bne	r2,zero,1814600 <tse_mac_init+0x4a0>
	{
		dprintf(("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETH_PAD_SIZE));
		return ERR_IF;
 18145f8:	00bffc44 	movi	r2,-15
 18145fc:	0000e606 	br	1814998 <tse_mac_init+0x838>
	}

	/* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
	IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 1814600:	00806134 	movhi	r2,388
 1814604:	109e5f04 	addi	r2,r2,31100
 1814608:	e0fffe17 	ldw	r3,-8(fp)
 181460c:	18c00924 	muli	r3,r3,36
 1814610:	10c5883a 	add	r2,r2,r3
 1814614:	10800017 	ldw	r2,0(r2)
 1814618:	10803b04 	addi	r2,r2,236
 181461c:	00c08034 	movhi	r3,512
 1814620:	10c00035 	stwio	r3,0(r2)

	/* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */
	if ((IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK) == 0)
 1814624:	00806134 	movhi	r2,388
 1814628:	109e5f04 	addi	r2,r2,31100
 181462c:	e0fffe17 	ldw	r3,-8(fp)
 1814630:	18c00924 	muli	r3,r3,36
 1814634:	10c5883a 	add	r2,r2,r3
 1814638:	10800017 	ldw	r2,0(r2)
 181463c:	10803b04 	addi	r2,r2,236
 1814640:	10800037 	ldwio	r2,0(r2)
 1814644:	1080802c 	andhi	r2,r2,512
 1814648:	1000021e 	bne	r2,zero,1814654 <tse_mac_init+0x4f4>
	{
		dprintf(("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETH_PAD_SIZE));
		return ERR_IF;
 181464c:	00bffc44 	movi	r2,-15
 1814650:	0000d106 	br	1814998 <tse_mac_init+0x838>
	}

	/* Set the MAC address */
	IOWR_ALTERA_TSEMAC_MAC_0(mi_base,
 1814654:	e0bffa17 	ldw	r2,-24(fp)
 1814658:	10800304 	addi	r2,r2,12
 181465c:	e0ffff17 	ldw	r3,-4(fp)
 1814660:	18c00017 	ldw	r3,0(r3)
 1814664:	18c00003 	ldbu	r3,0(r3)
 1814668:	19003fcc 	andi	r4,r3,255
 181466c:	e0ffff17 	ldw	r3,-4(fp)
 1814670:	18c00017 	ldw	r3,0(r3)
 1814674:	18c00043 	ldbu	r3,1(r3)
 1814678:	18c03fcc 	andi	r3,r3,255
 181467c:	1806923a 	slli	r3,r3,8
 1814680:	20c8b03a 	or	r4,r4,r3
 1814684:	e0ffff17 	ldw	r3,-4(fp)
 1814688:	18c00017 	ldw	r3,0(r3)
 181468c:	18c00083 	ldbu	r3,2(r3)
 1814690:	18c03fcc 	andi	r3,r3,255
 1814694:	1806943a 	slli	r3,r3,16
 1814698:	20c8b03a 	or	r4,r4,r3
 181469c:	e0ffff17 	ldw	r3,-4(fp)
 18146a0:	18c00017 	ldw	r3,0(r3)
 18146a4:	18c000c3 	ldbu	r3,3(r3)
 18146a8:	18c03fcc 	andi	r3,r3,255
 18146ac:	1806963a 	slli	r3,r3,24
 18146b0:	20c6b03a 	or	r3,r4,r3
 18146b4:	10c00035 	stwio	r3,0(r2)
			((int)((unsigned char) ethernetif->ethaddr->addr[0]) |
					(int)((unsigned char) ethernetif->ethaddr->addr[1] <<  8) |
					(int)((unsigned char) ethernetif->ethaddr->addr[2] << 16) |
					(int)((unsigned char) ethernetif->ethaddr->addr[3] << 24)));

	IOWR_ALTERA_TSEMAC_MAC_1(mi_base,
 18146b8:	e0bffa17 	ldw	r2,-24(fp)
 18146bc:	10800404 	addi	r2,r2,16
 18146c0:	e0ffff17 	ldw	r3,-4(fp)
 18146c4:	18c00017 	ldw	r3,0(r3)
 18146c8:	18c00103 	ldbu	r3,4(r3)
 18146cc:	19003fcc 	andi	r4,r3,255
 18146d0:	e0ffff17 	ldw	r3,-4(fp)
 18146d4:	18c00017 	ldw	r3,0(r3)
 18146d8:	18c00143 	ldbu	r3,5(r3)
 18146dc:	18c03fcc 	andi	r3,r3,255
 18146e0:	1806923a 	slli	r3,r3,8
 18146e4:	20c6b03a 	or	r3,r4,r3
 18146e8:	18ffffcc 	andi	r3,r3,65535
 18146ec:	10c00035 	stwio	r3,0(r2)
			(((int)((unsigned char) ethernetif->ethaddr->addr[4]) |
					(int)((unsigned char) ethernetif->ethaddr->addr[5] <<  8)) & 0xFFFF));

	/* enable MAC */
	dat = ALTERA_TSEMAC_CMD_TX_ENA_MSK       |
 18146f0:	00810034 	movhi	r2,1024
 18146f4:	108080c4 	addi	r2,r2,515
 18146f8:	e0bff315 	stw	r2,-52(fp)
			ALTERA_TSEMAC_CMD_LOOPBACK_MSK     |     // promiscuous mode
#endif
			ALTERA_TSEMAC_CMD_TX_ADDR_INS_MSK  |
			ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */

	if ((result & ALT_TSE_E_AN_NOT_COMPLETE) == 0)
 18146fc:	e0bffb17 	ldw	r2,-20(fp)
 1814700:	1080022c 	andhi	r2,r2,8
 1814704:	1000461e 	bne	r2,zero,1814820 <tse_mac_init+0x6c0>
	{
		speed = (result >> 1) & 0x07;
 1814708:	e0bffb17 	ldw	r2,-20(fp)
 181470c:	1005d07a 	srai	r2,r2,1
 1814710:	108001cc 	andi	r2,r2,7
 1814714:	e0bffc15 	stw	r2,-16(fp)
		duplex = result & 0x01;
 1814718:	e0bffb17 	ldw	r2,-20(fp)
 181471c:	1080004c 	andi	r2,r2,1
 1814720:	e0bff415 	stw	r2,-48(fp)

		/* 1000 Mbps */
		if(speed == 0x01)
 1814724:	e0bffc17 	ldw	r2,-16(fp)
 1814728:	10800058 	cmpnei	r2,r2,1
 181472c:	1000121e 	bne	r2,zero,1814778 <tse_mac_init+0x618>
		{
			dat |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 1814730:	e0bff317 	ldw	r2,-52(fp)
 1814734:	10800214 	ori	r2,r2,8
 1814738:	e0bff315 	stw	r2,-52(fp)
			dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 181473c:	e0fff317 	ldw	r3,-52(fp)
 1814740:	00bf8034 	movhi	r2,65024
 1814744:	10bfffc4 	addi	r2,r2,-1
 1814748:	1884703a 	and	r2,r3,r2
 181474c:	e0bff315 	stw	r2,-52(fp)
			tse[iface].ethernetif->link_speed = 1000;
 1814750:	00806134 	movhi	r2,388
 1814754:	109e5f04 	addi	r2,r2,31100
 1814758:	e0fffe17 	ldw	r3,-8(fp)
 181475c:	18c00924 	muli	r3,r3,36
 1814760:	10c5883a 	add	r2,r2,r3
 1814764:	10800604 	addi	r2,r2,24
 1814768:	10800017 	ldw	r2,0(r2)
 181476c:	00c0fa04 	movi	r3,1000
 1814770:	10c00315 	stw	r3,12(r2)
 1814774:	00003306 	br	1814844 <tse_mac_init+0x6e4>
		}
		/* 100 Mbps */
		else if(speed == 0x02)
 1814778:	e0bffc17 	ldw	r2,-16(fp)
 181477c:	10800098 	cmpnei	r2,r2,2
 1814780:	1000131e 	bne	r2,zero,18147d0 <tse_mac_init+0x670>
		{
			dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 1814784:	e0fff317 	ldw	r3,-52(fp)
 1814788:	00bffdc4 	movi	r2,-9
 181478c:	1884703a 	and	r2,r3,r2
 1814790:	e0bff315 	stw	r2,-52(fp)
			dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 1814794:	e0fff317 	ldw	r3,-52(fp)
 1814798:	00bf8034 	movhi	r2,65024
 181479c:	10bfffc4 	addi	r2,r2,-1
 18147a0:	1884703a 	and	r2,r3,r2
 18147a4:	e0bff315 	stw	r2,-52(fp)
			tse[iface].ethernetif->link_speed = 100;
 18147a8:	00806134 	movhi	r2,388
 18147ac:	109e5f04 	addi	r2,r2,31100
 18147b0:	e0fffe17 	ldw	r3,-8(fp)
 18147b4:	18c00924 	muli	r3,r3,36
 18147b8:	10c5883a 	add	r2,r2,r3
 18147bc:	10800604 	addi	r2,r2,24
 18147c0:	10800017 	ldw	r2,0(r2)
 18147c4:	00c01904 	movi	r3,100
 18147c8:	10c00315 	stw	r3,12(r2)
 18147cc:	00001d06 	br	1814844 <tse_mac_init+0x6e4>
		}
		/* 10 Mbps */
		else if(speed == 0x04)
 18147d0:	e0bffc17 	ldw	r2,-16(fp)
 18147d4:	10800118 	cmpnei	r2,r2,4
 18147d8:	10001a1e 	bne	r2,zero,1814844 <tse_mac_init+0x6e4>
		{
			dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 18147dc:	e0fff317 	ldw	r3,-52(fp)
 18147e0:	00bffdc4 	movi	r2,-9
 18147e4:	1884703a 	and	r2,r3,r2
 18147e8:	e0bff315 	stw	r2,-52(fp)
			dat |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 18147ec:	e0bff317 	ldw	r2,-52(fp)
 18147f0:	10808034 	orhi	r2,r2,512
 18147f4:	e0bff315 	stw	r2,-52(fp)
			tse[iface].ethernetif->link_speed = 10;
 18147f8:	00806134 	movhi	r2,388
 18147fc:	109e5f04 	addi	r2,r2,31100
 1814800:	e0fffe17 	ldw	r3,-8(fp)
 1814804:	18c00924 	muli	r3,r3,36
 1814808:	10c5883a 	add	r2,r2,r3
 181480c:	10800604 	addi	r2,r2,24
 1814810:	10800017 	ldw	r2,0(r2)
 1814814:	00c00284 	movi	r3,10
 1814818:	10c00315 	stw	r3,12(r2)
 181481c:	00000906 	br	1814844 <tse_mac_init+0x6e4>
		}
	}
	/* default to 100 Mbps if returned invalid speed */
	else
	{
		dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 1814820:	e0fff317 	ldw	r3,-52(fp)
 1814824:	00bffdc4 	movi	r2,-9
 1814828:	1884703a 	and	r2,r3,r2
 181482c:	e0bff315 	stw	r2,-52(fp)
		dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 1814830:	e0fff317 	ldw	r3,-52(fp)
 1814834:	00bf8034 	movhi	r2,65024
 1814838:	10bfffc4 	addi	r2,r2,-1
 181483c:	1884703a 	and	r2,r3,r2
 1814840:	e0bff315 	stw	r2,-52(fp)
	}

	/* Half Duplex */
	if(duplex == TSE_PHY_DUPLEX_HALF)
 1814844:	e0bff417 	ldw	r2,-48(fp)
 1814848:	10000c1e 	bne	r2,zero,181487c <tse_mac_init+0x71c>
	{
		dat |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 181484c:	e0bff317 	ldw	r2,-52(fp)
 1814850:	10810014 	ori	r2,r2,1024
 1814854:	e0bff315 	stw	r2,-52(fp)
		tse[iface].ethernetif->full_duplex = 0;
 1814858:	00806134 	movhi	r2,388
 181485c:	109e5f04 	addi	r2,r2,31100
 1814860:	e0fffe17 	ldw	r3,-8(fp)
 1814864:	18c00924 	muli	r3,r3,36
 1814868:	10c5883a 	add	r2,r2,r3
 181486c:	10800604 	addi	r2,r2,24
 1814870:	10800017 	ldw	r2,0(r2)
 1814874:	10000415 	stw	zero,16(r2)
 1814878:	00000d06 	br	18148b0 <tse_mac_init+0x750>
	}
	/* Full Duplex */
	else
	{
		dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 181487c:	e0fff317 	ldw	r3,-52(fp)
 1814880:	00beffc4 	movi	r2,-1025
 1814884:	1884703a 	and	r2,r3,r2
 1814888:	e0bff315 	stw	r2,-52(fp)
		tse[iface].ethernetif->full_duplex = 1;
 181488c:	00806134 	movhi	r2,388
 1814890:	109e5f04 	addi	r2,r2,31100
 1814894:	e0fffe17 	ldw	r3,-8(fp)
 1814898:	18c00924 	muli	r3,r3,36
 181489c:	10c5883a 	add	r2,r2,r3
 18148a0:	10800604 	addi	r2,r2,24
 18148a4:	10800017 	ldw	r2,0(r2)
 18148a8:	00c00044 	movi	r3,1
 18148ac:	10c00415 	stw	r3,16(r2)
	}

	IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
 18148b0:	00806134 	movhi	r2,388
 18148b4:	109e5f04 	addi	r2,r2,31100
 18148b8:	e0fffe17 	ldw	r3,-8(fp)
 18148bc:	18c00924 	muli	r3,r3,36
 18148c0:	10c5883a 	add	r2,r2,r3
 18148c4:	10800017 	ldw	r2,0(r2)
 18148c8:	10800204 	addi	r2,r2,8
 18148cc:	e0fff317 	ldw	r3,-52(fp)
 18148d0:	10c00035 	stwio	r3,0(r2)
	dprintf(("\nMAC post-initialization: CMD_CONFIG=0x%08x\n",
			IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base)));

	alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma,
 18148d4:	00806134 	movhi	r2,388
 18148d8:	109e5f04 	addi	r2,r2,31100
 18148dc:	e0fffe17 	ldw	r3,-8(fp)
 18148e0:	18c00924 	muli	r3,r3,36
 18148e4:	10c5883a 	add	r2,r2,r3
 18148e8:	10800204 	addi	r2,r2,8
 18148ec:	11000017 	ldw	r4,0(r2)
#ifndef ALTERA_TSE_IRQ_R
			(alt_avalon_sgdma_callback)&tse_sgdma_rx_isr,
#else
			(alt_avalon_sgdma_callback)&ALTERA_TSE_IRQ_R,
#endif
			(alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,(void*)(&tse[iface]));
 18148f0:	e0bffe17 	ldw	r2,-8(fp)
 18148f4:	10c00924 	muli	r3,r2,36
 18148f8:	00806134 	movhi	r2,388
 18148fc:	109e5f04 	addi	r2,r2,31100
 1814900:	1885883a 	add	r2,r3,r2

	IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
	dprintf(("\nMAC post-initialization: CMD_CONFIG=0x%08x\n",
			IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base)));

	alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma,
 1814904:	100f883a 	mov	r7,r2
 1814908:	01800604 	movi	r6,24
 181490c:	01406074 	movhi	r5,385
 1814910:	29529404 	addi	r5,r5,19024
 1814914:	18254180 	call	1825418 <alt_avalon_sgdma_register_callback>
#else
			(alt_avalon_sgdma_callback)&ALTERA_TSE_IRQ_R,
#endif
			(alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,(void*)(&tse[iface]));

	tse_sgdma_read_init(&tse[iface]);
 1814918:	e0bffe17 	ldw	r2,-8(fp)
 181491c:	10c00924 	muli	r3,r2,36
 1814920:	00806134 	movhi	r2,388
 1814924:	109e5f04 	addi	r2,r2,31100
 1814928:	1885883a 	add	r2,r3,r2
 181492c:	1009883a 	mov	r4,r2
 1814930:	18149ac0 	call	18149ac <tse_sgdma_read_init>
	pmac_info = alt_tse_get_mac_info(mi_base);
 1814934:	e13ffa17 	ldw	r4,-24(fp)
 1814938:	1826fcc0 	call	1826fcc <alt_tse_get_mac_info>
 181493c:	e0bffd15 	stw	r2,-12(fp)
	alt_tse_phy_wr_mdio_addr(pmac_info->pphy_info, pmac_info->pphy_info->mdio_address);
 1814940:	e0bffd17 	ldw	r2,-12(fp)
 1814944:	10c00117 	ldw	r3,4(r2)
 1814948:	e0bffd17 	ldw	r2,-12(fp)
 181494c:	10800117 	ldw	r2,4(r2)
 1814950:	10800003 	ldbu	r2,0(r2)
 1814954:	10803fcc 	andi	r2,r2,255
 1814958:	100b883a 	mov	r5,r2
 181495c:	1809883a 	mov	r4,r3
 1814960:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
	ethernetif->link_alive = alt_tse_phy_rd_mdio_reg(pmac_info->pphy_info, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) != 0;// && (((IORD(&(mi_base->mdio1.reg10), 0) >> 4) & 0xF) <= 3);
 1814964:	e0bffd17 	ldw	r2,-12(fp)
 1814968:	10800117 	ldw	r2,4(r2)
 181496c:	01c00044 	movi	r7,1
 1814970:	01800144 	movi	r6,5
 1814974:	01400044 	movi	r5,1
 1814978:	1009883a 	mov	r4,r2
 181497c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1814980:	1004c03a 	cmpne	r2,r2,zero
 1814984:	10c03fcc 	andi	r3,r2,255
 1814988:	e0bfff17 	ldw	r2,-4(fp)
 181498c:	10c00215 	stw	r3,8(r2)
	return ethernetif->link_alive;
 1814990:	e0bfff17 	ldw	r2,-4(fp)
 1814994:	10800217 	ldw	r2,8(r2)
}
 1814998:	e037883a 	mov	sp,fp
 181499c:	dfc00117 	ldw	ra,4(sp)
 18149a0:	df000017 	ldw	fp,0(sp)
 18149a4:	dec00204 	addi	sp,sp,8
 18149a8:	f800283a 	ret

018149ac <tse_sgdma_read_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_sgdma_read_init(lwip_tse_info* tse_ptr)
{     
 18149ac:	defffb04 	addi	sp,sp,-20
 18149b0:	dfc00415 	stw	ra,16(sp)
 18149b4:	df000315 	stw	fp,12(sp)
 18149b8:	df000304 	addi	fp,sp,12
 18149bc:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;
 18149c0:	e0bfff17 	ldw	r2,-4(fp)
 18149c4:	10800617 	ldw	r2,24(r2)
 18149c8:	e0bffe15 	stw	r2,-8(fp)

	alt_avalon_sgdma_construct_stream_to_mem_desc(
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
 18149cc:	e0bfff17 	ldw	r2,-4(fp)
 18149d0:	10800517 	ldw	r2,20(r2)
{     
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;

	alt_avalon_sgdma_construct_stream_to_mem_desc(
 18149d4:	11001004 	addi	r4,r2,64
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
 18149d8:	e0bfff17 	ldw	r2,-4(fp)
 18149dc:	10800517 	ldw	r2,20(r2)
{     
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;

	alt_avalon_sgdma_construct_stream_to_mem_desc(
 18149e0:	11401804 	addi	r5,r2,96
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
			(alt_u32 *) ethernetif->lwipRxPbuf[tse_ptr->ethernetif->lwipRxIndexIsr]->payload,          // starting write_address
 18149e4:	e0bfff17 	ldw	r2,-4(fp)
 18149e8:	10800617 	ldw	r2,24(r2)
 18149ec:	10801317 	ldw	r2,76(r2)
 18149f0:	e0fffe17 	ldw	r3,-8(fp)
 18149f4:	108001c4 	addi	r2,r2,7
 18149f8:	1085883a 	add	r2,r2,r2
 18149fc:	1085883a 	add	r2,r2,r2
 1814a00:	1885883a 	add	r2,r3,r2
 1814a04:	10800017 	ldw	r2,0(r2)
 1814a08:	10800117 	ldw	r2,4(r2)
{     
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;

	alt_avalon_sgdma_construct_stream_to_mem_desc(
 1814a0c:	d8000015 	stw	zero,0(sp)
 1814a10:	000f883a 	mov	r7,zero
 1814a14:	100d883a 	mov	r6,r2
 1814a18:	18252340 	call	1825234 <alt_avalon_sgdma_construct_stream_to_mem_desc>
			0,                                  // read until EOP
			0);          // don't write to constant address

	dprintf(("[tse_sgdma_read_init] RX descriptor chain desc (%d depth) created\n",0));

	tse_mac_aRxRead( &tse_ptr->mi, &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
 1814a1c:	e0ffff17 	ldw	r3,-4(fp)
 1814a20:	e0bfff17 	ldw	r2,-4(fp)
 1814a24:	10800517 	ldw	r2,20(r2)
 1814a28:	10801004 	addi	r2,r2,64
 1814a2c:	100b883a 	mov	r5,r2
 1814a30:	1809883a 	mov	r4,r3
 1814a34:	1825ec80 	call	1825ec8 <tse_mac_aRxRead>

	return SUCCESS;
 1814a38:	0005883a 	mov	r2,zero
}
 1814a3c:	e037883a 	mov	sp,fp
 1814a40:	dfc00117 	ldw	ra,4(sp)
 1814a44:	df000017 	ldw	fp,0(sp)
 1814a48:	dec00204 	addi	sp,sp,8
 1814a4c:	f800283a 	ret

01814a50 <tse_sgdma_rx_isr>:
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
int tse_sgdma_rx_isr(void * context, __unused u_long intnum)
{
 1814a50:	defffb04 	addi	sp,sp,-20
 1814a54:	dfc00415 	stw	ra,16(sp)
 1814a58:	df000315 	stw	fp,12(sp)
 1814a5c:	df000304 	addi	fp,sp,12
 1814a60:	e13ffe15 	stw	r4,-8(fp)
 1814a64:	e17fff15 	stw	r5,-4(fp)
	lwip_tse_info* tse_ptr = (lwip_tse_info *) context;
 1814a68:	e0bffe17 	ldw	r2,-8(fp)
 1814a6c:	e0bffd15 	stw	r2,-12(fp)

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(&tse_ptr->mi.rx_sgdma->base,ALTERA_AVALON_SGDMA_CONTROL_CLEAR_INTERRUPT_MSK);
 1814a70:	e0bffd17 	ldw	r2,-12(fp)
 1814a74:	10800217 	ldw	r2,8(r2)
 1814a78:	10800304 	addi	r2,r2,12
 1814a7c:	10800404 	addi	r2,r2,16
 1814a80:	00e00034 	movhi	r3,32768
 1814a84:	10c00035 	stwio	r3,0(r2)

	// process the newly received data and cycle to the next free pbuf for receive
	tse_mac_rcv(tse_ptr->ethernetif);
 1814a88:	e0bffd17 	ldw	r2,-12(fp)
 1814a8c:	10800617 	ldw	r2,24(r2)
 1814a90:	1009883a 	mov	r4,r2
 1814a94:	1814c4c0 	call	1814c4c <tse_mac_rcv>

	// start a new async read transaction
	tse_mac_aRxRead( &tse_ptr->mi, &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
 1814a98:	e0fffd17 	ldw	r3,-12(fp)
 1814a9c:	e0bffd17 	ldw	r2,-12(fp)
 1814aa0:	10800517 	ldw	r2,20(r2)
 1814aa4:	10801004 	addi	r2,r2,64
 1814aa8:	100b883a 	mov	r5,r2
 1814aac:	1809883a 	mov	r4,r3
 1814ab0:	1825ec80 	call	1825ec8 <tse_mac_aRxRead>

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(&tse_ptr->mi.rx_sgdma->base, ALTERA_TSE_SGDMA_INTR_MASK);
 1814ab4:	e0bffd17 	ldw	r2,-12(fp)
 1814ab8:	10800217 	ldw	r2,8(r2)
 1814abc:	10800304 	addi	r2,r2,12
 1814ac0:	10800404 	addi	r2,r2,16
 1814ac4:	00c00604 	movi	r3,24
 1814ac8:	10c00035 	stwio	r3,0(r2)

	return SUCCESS;
 1814acc:	0005883a 	mov	r2,zero
}
 1814ad0:	e037883a 	mov	sp,fp
 1814ad4:	dfc00117 	ldw	ra,4(sp)
 1814ad8:	df000017 	ldw	fp,0(sp)
 1814adc:	dec00204 	addi	sp,sp,8
 1814ae0:	f800283a 	ret

01814ae4 <tse_mac_raw_send>:
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
err_t tse_mac_raw_send(struct netif *netif, struct pbuf *pkt)
{
 1814ae4:	defe6a04 	addi	sp,sp,-1624
 1814ae8:	dfc19515 	stw	ra,1620(sp)
 1814aec:	df019415 	stw	fp,1616(sp)
 1814af0:	df019404 	addi	fp,sp,1616
 1814af4:	e13ffe15 	stw	r4,-8(fp)
 1814af8:	e17fff15 	stw	r5,-4(fp)
	alt_u32			   *ActualData;

	/* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
	char buf2[1560];

	ethernetif = netif->state;
 1814afc:	e0bffe17 	ldw	r2,-8(fp)
 1814b00:	10800917 	ldw	r2,36(r2)
 1814b04:	e0be7215 	stw	r2,-1592(fp)
	tse_ptr = ethernetif->tse_info;
 1814b08:	e0be7217 	ldw	r2,-1592(fp)
 1814b0c:	10801717 	ldw	r2,92(r2)
 1814b10:	e0be7315 	stw	r2,-1588(fp)
	mi = &tse_ptr->mi;
 1814b14:	e0be7317 	ldw	r2,-1588(fp)
 1814b18:	e0be7415 	stw	r2,-1584(fp)

	for(p = pkt; p != NULL; p = p->next)
 1814b1c:	e0bfff17 	ldw	r2,-4(fp)
 1814b20:	e0be7015 	stw	r2,-1600(fp)
 1814b24:	00003a06 	br	1814c10 <tse_mac_raw_send+0x12c>
	{
		data = p->payload;
 1814b28:	e0be7017 	ldw	r2,-1600(fp)
 1814b2c:	10800117 	ldw	r2,4(r2)
 1814b30:	e0be7115 	stw	r2,-1596(fp)
		len = p->len;
 1814b34:	e0be7017 	ldw	r2,-1600(fp)
 1814b38:	1080028b 	ldhu	r2,10(r2)
 1814b3c:	10bfffcc 	andi	r2,r2,65535
 1814b40:	e0be7515 	stw	r2,-1580(fp)

		// just in case we have an unaligned buffer, this should never occur
		if(((unsigned long)data & 0x03) != 0)
 1814b44:	e0be7117 	ldw	r2,-1596(fp)
 1814b48:	108000cc 	andi	r2,r2,3
 1814b4c:	10000726 	beq	r2,zero,1814b6c <tse_mac_raw_send+0x88>
			/*
			 * Copy data to temporary buffer <buf2>. This is done because of alignment
			 * issues. The SGDMA cannot copy the data directly from (data + ETH_PAD_SIZE)
			 * because it needs a 32-bit aligned address space.
			 */
			memcpy(buf2,data,len);
 1814b50:	e0be7804 	addi	r2,fp,-1568
 1814b54:	e1be7517 	ldw	r6,-1580(fp)
 1814b58:	e17e7117 	ldw	r5,-1596(fp)
 1814b5c:	1009883a 	mov	r4,r2
 1814b60:	1805f980 	call	1805f98 <memcpy>
			data = (alt_u32 *)buf2;
 1814b64:	e0be7804 	addi	r2,fp,-1568
 1814b68:	e0be7115 	stw	r2,-1596(fp)
		}

		// uncache the ethernet frame
		ActualData = (void *)alt_remap_uncached (data, len);
 1814b6c:	e17e7517 	ldw	r5,-1580(fp)
 1814b70:	e13e7117 	ldw	r4,-1596(fp)
 1814b74:	182cb680 	call	182cb68 <alt_remap_uncached>
 1814b78:	e0be7615 	stw	r2,-1576(fp)

		/* Write data to Tx FIFO using the DMA */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
 1814b7c:	e0be7317 	ldw	r2,-1588(fp)
 1814b80:	11000517 	ldw	r4,20(r2)
				(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST], // descriptor I want to work with
				(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
 1814b84:	e0be7317 	ldw	r2,-1588(fp)
 1814b88:	10800517 	ldw	r2,20(r2)

		// uncache the ethernet frame
		ActualData = (void *)alt_remap_uncached (data, len);

		/* Write data to Tx FIFO using the DMA */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
 1814b8c:	11400804 	addi	r5,r2,32
 1814b90:	e0be7517 	ldw	r2,-1580(fp)
 1814b94:	11bfffcc 	andi	r6,r2,65535
 1814b98:	e0fe7017 	ldw	r3,-1600(fp)
 1814b9c:	e0bfff17 	ldw	r2,-4(fp)
 1814ba0:	1885003a 	cmpeq	r2,r3,r2
 1814ba4:	10803fcc 	andi	r2,r2,255
				(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
				(alt_u32*)ActualData,                    // starting read address
				(len),                                   // # bytes
				0,                                       // don't read from constant address
				p == pkt,                                // generate sop
				p->next == NULL,                         // generate endofpacket signal
 1814ba8:	e0fe7017 	ldw	r3,-1600(fp)
 1814bac:	18c00017 	ldw	r3,0(r3)

		// uncache the ethernet frame
		ActualData = (void *)alt_remap_uncached (data, len);

		/* Write data to Tx FIFO using the DMA */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
 1814bb0:	1807003a 	cmpeq	r3,r3,zero
 1814bb4:	18c03fcc 	andi	r3,r3,255
 1814bb8:	d8000315 	stw	zero,12(sp)
 1814bbc:	d8c00215 	stw	r3,8(sp)
 1814bc0:	d8800115 	stw	r2,4(sp)
 1814bc4:	d8000015 	stw	zero,0(sp)
 1814bc8:	300f883a 	mov	r7,r6
 1814bcc:	e1be7617 	ldw	r6,-1576(fp)
 1814bd0:	182530c0 	call	182530c <alt_avalon_sgdma_construct_mem_to_stream_desc>
				0,                                       // don't read from constant address
				p == pkt,                                // generate sop
				p->next == NULL,                         // generate endofpacket signal
				0);                                      // atlantic channel (don't know/don't care: set to 0)

		tx_length = tse_mac_sTxWrite(mi,&tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST]);
 1814bd4:	e0be7317 	ldw	r2,-1588(fp)
 1814bd8:	10800517 	ldw	r2,20(r2)
 1814bdc:	100b883a 	mov	r5,r2
 1814be0:	e13e7417 	ldw	r4,-1584(fp)
 1814be4:	1825de40 	call	1825de4 <tse_mac_sTxWrite>
 1814be8:	e0be7715 	stw	r2,-1572(fp)

		if (tx_length != p->len)
			dprintf(("failed to send all bytes, send %d out of %d\r\n", tx_length, p->len));

		ethernetif->bytes_sent += tx_length;
 1814bec:	e0be7217 	ldw	r2,-1592(fp)
 1814bf0:	10c00517 	ldw	r3,20(r2)
 1814bf4:	e0be7717 	ldw	r2,-1572(fp)
 1814bf8:	1887883a 	add	r3,r3,r2
 1814bfc:	e0be7217 	ldw	r2,-1592(fp)
 1814c00:	10c00515 	stw	r3,20(r2)

	ethernetif = netif->state;
	tse_ptr = ethernetif->tse_info;
	mi = &tse_ptr->mi;

	for(p = pkt; p != NULL; p = p->next)
 1814c04:	e0be7017 	ldw	r2,-1600(fp)
 1814c08:	10800017 	ldw	r2,0(r2)
 1814c0c:	e0be7015 	stw	r2,-1600(fp)
 1814c10:	e0be7017 	ldw	r2,-1600(fp)
 1814c14:	103fc41e 	bne	r2,zero,1814b28 <__ram_exceptions_end+0xff804838>
			dprintf(("failed to send all bytes, send %d out of %d\r\n", tx_length, p->len));

		ethernetif->bytes_sent += tx_length;
	}

	LINK_STATS_INC(link.xmit);
 1814c18:	00806134 	movhi	r2,388
 1814c1c:	109e7504 	addi	r2,r2,31188
 1814c20:	10800017 	ldw	r2,0(r2)
 1814c24:	10c00044 	addi	r3,r2,1
 1814c28:	00806134 	movhi	r2,388
 1814c2c:	109e7504 	addi	r2,r2,31188
 1814c30:	10c00015 	stw	r3,0(r2)

	return ERR_OK;
 1814c34:	0005883a 	mov	r2,zero
}
 1814c38:	e037883a 	mov	sp,fp
 1814c3c:	dfc00117 	ldw	ra,4(sp)
 1814c40:	df000017 	ldw	fp,0(sp)
 1814c44:	dec00204 	addi	sp,sp,8
 1814c48:	f800283a 	ret

01814c4c <tse_mac_rcv>:
 * 
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */
int tse_mac_rcv(struct ethernetif *ethernetif)
{
 1814c4c:	defff704 	addi	sp,sp,-36
 1814c50:	dfc00815 	stw	ra,32(sp)
 1814c54:	df000715 	stw	fp,28(sp)
 1814c58:	df000704 	addi	fp,sp,28
 1814c5c:	e13fff15 	stw	r4,-4(fp)
#if LWIP_RECEIVE_SEMAPHORE
	signed portBASE_TYPE switch_context = 0;
 1814c60:	e03ffe15 	stw	zero,-8(fp)
	int pklen;
	lwip_tse_info* tse_ptr;
	alt_u32 *uncached_packet_payload;
	struct pbuf *p;

	tse_ptr = ethernetif->tse_info;
 1814c64:	e0bfff17 	ldw	r2,-4(fp)
 1814c68:	10801717 	ldw	r2,92(r2)
 1814c6c:	e0bffa15 	stw	r2,-24(fp)
	pklen = IORD_16DIRECT(&(tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST].actual_bytes_transferred),0);
 1814c70:	e0bffa17 	ldw	r2,-24(fp)
 1814c74:	10800517 	ldw	r2,20(r2)
 1814c78:	10801004 	addi	r2,r2,64
 1814c7c:	10800704 	addi	r2,r2,28
 1814c80:	1080002b 	ldhuio	r2,0(r2)
 1814c84:	10bfffcc 	andi	r2,r2,65535
 1814c88:	e0bffb15 	stw	r2,-20(fp)
	p = ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr];
 1814c8c:	e0bfff17 	ldw	r2,-4(fp)
 1814c90:	10801317 	ldw	r2,76(r2)
 1814c94:	e0ffff17 	ldw	r3,-4(fp)
 1814c98:	108001c4 	addi	r2,r2,7
 1814c9c:	1085883a 	add	r2,r2,r2
 1814ca0:	1085883a 	add	r2,r2,r2
 1814ca4:	1885883a 	add	r2,r3,r2
 1814ca8:	10800017 	ldw	r2,0(r2)
 1814cac:	e0bffc15 	stw	r2,-16(fp)
	p->tot_len = pklen;
 1814cb0:	e0bffb17 	ldw	r2,-20(fp)
 1814cb4:	1007883a 	mov	r3,r2
 1814cb8:	e0bffc17 	ldw	r2,-16(fp)
 1814cbc:	10c0020d 	sth	r3,8(r2)
	p->len = pklen;
 1814cc0:	e0bffb17 	ldw	r2,-20(fp)
 1814cc4:	1007883a 	mov	r3,r2
 1814cc8:	e0bffc17 	ldw	r2,-16(fp)
 1814ccc:	10c0028d 	sth	r3,10(r2)
	if ((IORD_ALTERA_TSE_SGDMA_DESC_STATUS(&tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]) & ( ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_CRC_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_PARITY_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK )) == 0)
 1814cd0:	e0bffa17 	ldw	r2,-24(fp)
 1814cd4:	10800517 	ldw	r2,20(r2)
 1814cd8:	10801704 	addi	r2,r2,92
 1814cdc:	10800037 	ldwio	r2,0(r2)
 1814ce0:	1005d43a 	srai	r2,r2,16
 1814ce4:	10801fcc 	andi	r2,r2,127
 1814ce8:	10002d1e 	bne	r2,zero,1814da0 <tse_mac_rcv+0x154>
	{
		enh_alt_irq_disable_all();
 1814cec:	182bb200 	call	182bb20 <enh_alt_irq_disable_all>

		if (++ethernetif->lwipRxCount >= LWIP_RX_ETH_BUFFER)
 1814cf0:	e0bfff17 	ldw	r2,-4(fp)
 1814cf4:	10801517 	ldw	r2,84(r2)
 1814cf8:	10800044 	addi	r2,r2,1
 1814cfc:	e0ffff17 	ldw	r3,-4(fp)
 1814d00:	18801515 	stw	r2,84(r3)
 1814d04:	10800310 	cmplti	r2,r2,12
 1814d08:	10000e1e 	bne	r2,zero,1814d44 <tse_mac_rcv+0xf8>
		{
			LINK_STATS_INC(link.drop);
 1814d0c:	00806134 	movhi	r2,388
 1814d10:	109e7504 	addi	r2,r2,31188
 1814d14:	10800317 	ldw	r2,12(r2)
 1814d18:	10c00044 	addi	r3,r2,1
 1814d1c:	00806134 	movhi	r2,388
 1814d20:	109e7504 	addi	r2,r2,31188
 1814d24:	10c00315 	stw	r3,12(r2)
			--ethernetif->lwipRxCount;
 1814d28:	e0bfff17 	ldw	r2,-4(fp)
 1814d2c:	10801517 	ldw	r2,84(r2)
 1814d30:	10ffffc4 	addi	r3,r2,-1
 1814d34:	e0bfff17 	ldw	r2,-4(fp)
 1814d38:	10c01515 	stw	r3,84(r2)

			enh_alt_irq_enable_all();
 1814d3c:	182bb700 	call	182bb70 <enh_alt_irq_enable_all>
 1814d40:	00001706 	br	1814da0 <tse_mac_rcv+0x154>

			dprintf(("No free buffers for RX on iface: %hhd\n", ethernetif->iface));
		}
		else
		{
			ethernetif->bytes_recv += pklen;
 1814d44:	e0bfff17 	ldw	r2,-4(fp)
 1814d48:	10c00617 	ldw	r3,24(r2)
 1814d4c:	e0bffb17 	ldw	r2,-20(fp)
 1814d50:	1887883a 	add	r3,r3,r2
 1814d54:	e0bfff17 	ldw	r2,-4(fp)
 1814d58:	10c00615 	stw	r3,24(r2)

			//  Set up DMA for the next pbuf in the buffer
			if (++ethernetif->lwipRxIndexIsr >= LWIP_RX_ETH_BUFFER)
 1814d5c:	e0bfff17 	ldw	r2,-4(fp)
 1814d60:	10801317 	ldw	r2,76(r2)
 1814d64:	10800044 	addi	r2,r2,1
 1814d68:	e0ffff17 	ldw	r3,-4(fp)
 1814d6c:	18801315 	stw	r2,76(r3)
 1814d70:	10800310 	cmplti	r2,r2,12
 1814d74:	1000021e 	bne	r2,zero,1814d80 <tse_mac_rcv+0x134>
				ethernetif->lwipRxIndexIsr = 0;
 1814d78:	e0bfff17 	ldw	r2,-4(fp)
 1814d7c:	10001315 	stw	zero,76(r2)

			enh_alt_irq_enable_all();
 1814d80:	182bb700 	call	182bb70 <enh_alt_irq_enable_all>

#if LWIP_RECEIVE_SEMAPHORE
			// we can't use the LwIP sys_signal_sem since this can't be used in an ISR
			// release the semaphore and check if a task with a higher priority then the current one is waiting for it
			xSemaphoreGiveFromISR(ethernetif->tse_info->rx_semaphore, &switch_context);
 1814d84:	e0bfff17 	ldw	r2,-4(fp)
 1814d88:	10801717 	ldw	r2,92(r2)
 1814d8c:	10800817 	ldw	r2,32(r2)
 1814d90:	e0fffe04 	addi	r3,fp,-8
 1814d94:	180b883a 	mov	r5,r3
 1814d98:	1009883a 	mov	r4,r2
 1814d9c:	180dc600 	call	180dc60 <xQueueGiveFromISR>
#endif
		}
	}

	uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
 1814da0:	e0bfff17 	ldw	r2,-4(fp)
 1814da4:	10801317 	ldw	r2,76(r2)
 1814da8:	e0ffff17 	ldw	r3,-4(fp)
 1814dac:	108001c4 	addi	r2,r2,7
 1814db0:	1085883a 	add	r2,r2,r2
 1814db4:	1085883a 	add	r2,r2,r2
 1814db8:	1885883a 	add	r2,r3,r2
 1814dbc:	10800017 	ldw	r2,0(r2)
 1814dc0:	10800117 	ldw	r2,4(r2)
 1814dc4:	e0bffd15 	stw	r2,-12(fp)
	alt_avalon_sgdma_construct_stream_to_mem_desc(
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],	// descriptor I want to work with
 1814dc8:	e0bffa17 	ldw	r2,-24(fp)
 1814dcc:	10800517 	ldw	r2,20(r2)
#endif
		}
	}

	uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
	alt_avalon_sgdma_construct_stream_to_mem_desc(
 1814dd0:	10c01004 	addi	r3,r2,64
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],	// descriptor I want to work with
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
 1814dd4:	e0bffa17 	ldw	r2,-24(fp)
 1814dd8:	10800517 	ldw	r2,20(r2)
#endif
		}
	}

	uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
	alt_avalon_sgdma_construct_stream_to_mem_desc(
 1814ddc:	10801804 	addi	r2,r2,96
 1814de0:	d8000015 	stw	zero,0(sp)
 1814de4:	000f883a 	mov	r7,zero
 1814de8:	e1bffd17 	ldw	r6,-12(fp)
 1814dec:	100b883a 	mov	r5,r2
 1814df0:	1809883a 	mov	r4,r3
 1814df4:	18252340 	call	1825234 <alt_avalon_sgdma_construct_stream_to_mem_desc>
			0,                                  											// read until EOP
			0);          																	// don't write to constant address

#if LWIP_RECEIVE_SEMAPHORE
	// if it's waiting we will force a context switch so this task will run right away
	portEND_SWITCHING_ISR(switch_context);
 1814df8:	e0bffe17 	ldw	r2,-8(fp)
 1814dfc:	10000126 	beq	r2,zero,1814e04 <tse_mac_rcv+0x1b8>
 1814e00:	180ffb00 	call	180ffb0 <vTaskSwitchContext>
#endif

	return ERR_OK;
 1814e04:	0005883a 	mov	r2,zero
}
 1814e08:	e037883a 	mov	sp,fp
 1814e0c:	dfc00117 	ldw	ra,4(sp)
 1814e10:	df000017 	ldw	fp,0(sp)
 1814e14:	dec00204 	addi	sp,sp,8
 1814e18:	f800283a 	ret

01814e1c <sys_init>:
#include <lwip/err.h>
#include <lwip/stats.h>

// LwIP FreeRTOS port
void sys_init(void)
{
 1814e1c:	deffff04 	addi	sp,sp,-4
 1814e20:	df000015 	stw	fp,0(sp)
 1814e24:	d839883a 	mov	fp,sp
	return;
 1814e28:	0001883a 	nop
}
 1814e2c:	e037883a 	mov	sp,fp
 1814e30:	df000017 	ldw	fp,0(sp)
 1814e34:	dec00104 	addi	sp,sp,4
 1814e38:	f800283a 	ret

01814e3c <sys_now>:

u32_t sys_now(void)
{
 1814e3c:	defffb04 	addi	sp,sp,-20
 1814e40:	dfc00415 	stw	ra,16(sp)
 1814e44:	df000315 	stw	fp,12(sp)
 1814e48:	dc000215 	stw	r16,8(sp)
 1814e4c:	df000304 	addi	fp,sp,12
	struct timeval tv;
	gettimeofday(&tv, NULL);
 1814e50:	000b883a 	mov	r5,zero
 1814e54:	e13ffd04 	addi	r4,fp,-12
 1814e58:	182c4cc0 	call	182c4cc <gettimeofday>

	return ((tv.tv_sec * 1000) + (tv.tv_usec / 1000));
 1814e5c:	e0bffd17 	ldw	r2,-12(fp)
 1814e60:	1400fa24 	muli	r16,r2,1000
 1814e64:	e0bffe17 	ldw	r2,-8(fp)
 1814e68:	0140fa04 	movi	r5,1000
 1814e6c:	1009883a 	mov	r4,r2
 1814e70:	180ab240 	call	180ab24 <__divsi3>
 1814e74:	8085883a 	add	r2,r16,r2
}
 1814e78:	e6ffff04 	addi	sp,fp,-4
 1814e7c:	dfc00217 	ldw	ra,8(sp)
 1814e80:	df000117 	ldw	fp,4(sp)
 1814e84:	dc000017 	ldw	r16,0(sp)
 1814e88:	dec00304 	addi	sp,sp,12
 1814e8c:	f800283a 	ret

01814e90 <sys_sem_new>:
/**
 * Creates and returns a new semaphore. The "count" argument specifies
 * the initial state of the semaphore.
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 1814e90:	defffc04 	addi	sp,sp,-16
 1814e94:	dfc00315 	stw	ra,12(sp)
 1814e98:	df000215 	stw	fp,8(sp)
 1814e9c:	df000204 	addi	fp,sp,8
 1814ea0:	e13ffe15 	stw	r4,-8(fp)
 1814ea4:	2805883a 	mov	r2,r5
 1814ea8:	e0bfff05 	stb	r2,-4(fp)
	// count 0 means a binary semaphore so max value should be 1
	*sem = xSemaphoreCreateCounting((count ? count : 1), count);
 1814eac:	e0bfff03 	ldbu	r2,-4(fp)
 1814eb0:	10000226 	beq	r2,zero,1814ebc <sys_sem_new+0x2c>
 1814eb4:	e0bfff03 	ldbu	r2,-4(fp)
 1814eb8:	00000106 	br	1814ec0 <sys_sem_new+0x30>
 1814ebc:	00800044 	movi	r2,1
 1814ec0:	e0ffff03 	ldbu	r3,-4(fp)
 1814ec4:	180b883a 	mov	r5,r3
 1814ec8:	1009883a 	mov	r4,r2
 1814ecc:	180d9300 	call	180d930 <xQueueCreateCountingSemaphore>
 1814ed0:	1007883a 	mov	r3,r2
 1814ed4:	e0bffe17 	ldw	r2,-8(fp)
 1814ed8:	10c00015 	stw	r3,0(r2)

	if (*sem == NULL) {
 1814edc:	e0bffe17 	ldw	r2,-8(fp)
 1814ee0:	10800017 	ldw	r2,0(r2)
 1814ee4:	1000091e 	bne	r2,zero,1814f0c <sys_sem_new+0x7c>
		SYS_STATS_INC(sem.err);
 1814ee8:	00806134 	movhi	r2,388
 1814eec:	109e7504 	addi	r2,r2,31188
 1814ef0:	10805617 	ldw	r2,344(r2)
 1814ef4:	10c00044 	addi	r3,r2,1
 1814ef8:	00806134 	movhi	r2,388
 1814efc:	109e7504 	addi	r2,r2,31188
 1814f00:	10c05615 	stw	r3,344(r2)
		return ERR_MEM;  // TBD need assert
 1814f04:	00bfffc4 	movi	r2,-1
 1814f08:	00001506 	br	1814f60 <sys_sem_new+0xd0>
	}

	SYS_STATS_INC_USED(sem);
 1814f0c:	00806134 	movhi	r2,388
 1814f10:	109e7504 	addi	r2,r2,31188
 1814f14:	10805417 	ldw	r2,336(r2)
 1814f18:	10c00044 	addi	r3,r2,1
 1814f1c:	00806134 	movhi	r2,388
 1814f20:	109e7504 	addi	r2,r2,31188
 1814f24:	10c05415 	stw	r3,336(r2)
 1814f28:	00806134 	movhi	r2,388
 1814f2c:	109e7504 	addi	r2,r2,31188
 1814f30:	10c05517 	ldw	r3,340(r2)
 1814f34:	00806134 	movhi	r2,388
 1814f38:	109e7504 	addi	r2,r2,31188
 1814f3c:	10805417 	ldw	r2,336(r2)
 1814f40:	1880062e 	bgeu	r3,r2,1814f5c <sys_sem_new+0xcc>
 1814f44:	00806134 	movhi	r2,388
 1814f48:	109e7504 	addi	r2,r2,31188
 1814f4c:	10c05417 	ldw	r3,336(r2)
 1814f50:	00806134 	movhi	r2,388
 1814f54:	109e7504 	addi	r2,r2,31188
 1814f58:	10c05515 	stw	r3,340(r2)

	return ERR_OK;
 1814f5c:	0005883a 	mov	r2,zero
}
 1814f60:	e037883a 	mov	sp,fp
 1814f64:	dfc00117 	ldw	ra,4(sp)
 1814f68:	df000017 	ldw	fp,0(sp)
 1814f6c:	dec00204 	addi	sp,sp,8
 1814f70:	f800283a 	ret

01814f74 <sys_sem_free>:

/**
 * Deallocates a semaphore.
 */
void sys_sem_free(sys_sem_t *sem)
{
 1814f74:	defffd04 	addi	sp,sp,-12
 1814f78:	dfc00215 	stw	ra,8(sp)
 1814f7c:	df000115 	stw	fp,4(sp)
 1814f80:	df000104 	addi	fp,sp,4
 1814f84:	e13fff15 	stw	r4,-4(fp)
	vQueueDelete(*sem);
 1814f88:	e0bfff17 	ldw	r2,-4(fp)
 1814f8c:	10800017 	ldw	r2,0(r2)
 1814f90:	1009883a 	mov	r4,r2
 1814f94:	180e5a00 	call	180e5a0 <vQueueDelete>

	SYS_STATS_DEC(sem.used);
 1814f98:	00806134 	movhi	r2,388
 1814f9c:	109e7504 	addi	r2,r2,31188
 1814fa0:	10805417 	ldw	r2,336(r2)
 1814fa4:	10ffffc4 	addi	r3,r2,-1
 1814fa8:	00806134 	movhi	r2,388
 1814fac:	109e7504 	addi	r2,r2,31188
 1814fb0:	10c05415 	stw	r3,336(r2)
}
 1814fb4:	0001883a 	nop
 1814fb8:	e037883a 	mov	sp,fp
 1814fbc:	dfc00117 	ldw	ra,4(sp)
 1814fc0:	df000017 	ldw	fp,0(sp)
 1814fc4:	dec00204 	addi	sp,sp,8
 1814fc8:	f800283a 	ret

01814fcc <sys_sem_signal>:

/**
 * Signals a semaphore.
 */
void sys_sem_signal(sys_sem_t *sem)
{
 1814fcc:	defffd04 	addi	sp,sp,-12
 1814fd0:	dfc00215 	stw	ra,8(sp)
 1814fd4:	df000115 	stw	fp,4(sp)
 1814fd8:	df000104 	addi	fp,sp,4
 1814fdc:	e13fff15 	stw	r4,-4(fp)
	xSemaphoreGive(*sem);
 1814fe0:	e0bfff17 	ldw	r2,-4(fp)
 1814fe4:	10800017 	ldw	r2,0(r2)
 1814fe8:	000f883a 	mov	r7,zero
 1814fec:	000d883a 	mov	r6,zero
 1814ff0:	000b883a 	mov	r5,zero
 1814ff4:	1009883a 	mov	r4,r2
 1814ff8:	180d9880 	call	180d988 <xQueueGenericSend>
}
 1814ffc:	0001883a 	nop
 1815000:	e037883a 	mov	sp,fp
 1815004:	dfc00117 	ldw	ra,4(sp)
 1815008:	df000017 	ldw	fp,0(sp)
 181500c:	dec00204 	addi	sp,sp,8
 1815010:	f800283a 	ret

01815014 <sys_arch_sem_wait>:
 *
 * Notice that lwIP implements a function with a similar name,
 * sys_sem_wait(), that uses the sys_arch_sem_wait() function.
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 1815014:	defff904 	addi	sp,sp,-28
 1815018:	dfc00615 	stw	ra,24(sp)
 181501c:	df000515 	stw	fp,20(sp)
 1815020:	df000504 	addi	fp,sp,20
 1815024:	e13ffe15 	stw	r4,-8(fp)
 1815028:	e17fff15 	stw	r5,-4(fp)
	portTickType nStartTime, nEndTime, nElapsed;

	nStartTime = xTaskGetTickCount();
 181502c:	180fb580 	call	180fb58 <xTaskGetTickCount>
 1815030:	e0bffc15 	stw	r2,-16(fp)

	if (timeout != 0)
 1815034:	e0bfff17 	ldw	r2,-4(fp)
 1815038:	10001526 	beq	r2,zero,1815090 <sys_arch_sem_wait+0x7c>
	{
		if (xSemaphoreTake(*sem, timeout) == pdTRUE)
 181503c:	e0bffe17 	ldw	r2,-8(fp)
 1815040:	10800017 	ldw	r2,0(r2)
 1815044:	e17fff17 	ldw	r5,-4(fp)
 1815048:	1009883a 	mov	r4,r2
 181504c:	180df140 	call	180df14 <xQueueSemaphoreTake>
 1815050:	10800058 	cmpnei	r2,r2,1
 1815054:	10000c1e 	bne	r2,zero,1815088 <sys_arch_sem_wait+0x74>
		{
			nEndTime = xTaskGetTickCount();
 1815058:	180fb580 	call	180fb58 <xTaskGetTickCount>
 181505c:	e0bffd15 	stw	r2,-12(fp)
			nElapsed = nEndTime - nStartTime;
 1815060:	e0fffd17 	ldw	r3,-12(fp)
 1815064:	e0bffc17 	ldw	r2,-16(fp)
 1815068:	1885c83a 	sub	r2,r3,r2
 181506c:	e0bffb15 	stw	r2,-20(fp)

			if (nElapsed == 0)
 1815070:	e0bffb17 	ldw	r2,-20(fp)
 1815074:	1000021e 	bne	r2,zero,1815080 <sys_arch_sem_wait+0x6c>
				nElapsed = 1;
 1815078:	00800044 	movi	r2,1
 181507c:	e0bffb15 	stw	r2,-20(fp)

			return nElapsed; // return time blocked TBD test
 1815080:	e0bffb17 	ldw	r2,-20(fp)
 1815084:	00001506 	br	18150dc <sys_arch_sem_wait+0xc8>
		}
		else
			return SYS_ARCH_TIMEOUT;
 1815088:	00bfffc4 	movi	r2,-1
 181508c:	00001306 	br	18150dc <sys_arch_sem_wait+0xc8>
	}
	else // must block without a timeout
	{
		while (xSemaphoreTake(*sem, 10000) != pdTRUE);
 1815090:	0001883a 	nop
 1815094:	e0bffe17 	ldw	r2,-8(fp)
 1815098:	10800017 	ldw	r2,0(r2)
 181509c:	0149c404 	movi	r5,10000
 18150a0:	1009883a 	mov	r4,r2
 18150a4:	180df140 	call	180df14 <xQueueSemaphoreTake>
 18150a8:	10800058 	cmpnei	r2,r2,1
 18150ac:	103ff91e 	bne	r2,zero,1815094 <__ram_exceptions_end+0xff804da4>

		nEndTime = xTaskGetTickCount();
 18150b0:	180fb580 	call	180fb58 <xTaskGetTickCount>
 18150b4:	e0bffd15 	stw	r2,-12(fp)
		nElapsed = nEndTime - nStartTime;
 18150b8:	e0fffd17 	ldw	r3,-12(fp)
 18150bc:	e0bffc17 	ldw	r2,-16(fp)
 18150c0:	1885c83a 	sub	r2,r3,r2
 18150c4:	e0bffb15 	stw	r2,-20(fp)
		if( nElapsed == 0 )
 18150c8:	e0bffb17 	ldw	r2,-20(fp)
 18150cc:	1000021e 	bne	r2,zero,18150d8 <sys_arch_sem_wait+0xc4>
			nElapsed = 1;
 18150d0:	00800044 	movi	r2,1
 18150d4:	e0bffb15 	stw	r2,-20(fp)

		return nElapsed; // return time blocked
 18150d8:	e0bffb17 	ldw	r2,-20(fp)
	}
}
 18150dc:	e037883a 	mov	sp,fp
 18150e0:	dfc00117 	ldw	ra,4(sp)
 18150e4:	df000017 	ldw	fp,0(sp)
 18150e8:	dec00204 	addi	sp,sp,8
 18150ec:	f800283a 	ret

018150f0 <sys_mutex_new>:
#if ! LWIP_COMPAT_MUTEX
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
 18150f0:	defffd04 	addi	sp,sp,-12
 18150f4:	dfc00215 	stw	ra,8(sp)
 18150f8:	df000115 	stw	fp,4(sp)
 18150fc:	df000104 	addi	fp,sp,4
 1815100:	e13fff15 	stw	r4,-4(fp)
	*mutex = xSemaphoreCreateMutex();
 1815104:	01000044 	movi	r4,1
 1815108:	180d7a80 	call	180d7a8 <xQueueCreateMutex>
 181510c:	1007883a 	mov	r3,r2
 1815110:	e0bfff17 	ldw	r2,-4(fp)
 1815114:	10c00015 	stw	r3,0(r2)

	if (!*mutex) {
 1815118:	e0bfff17 	ldw	r2,-4(fp)
 181511c:	10800017 	ldw	r2,0(r2)
 1815120:	1000091e 	bne	r2,zero,1815148 <sys_mutex_new+0x58>
		SYS_STATS_INC(mutex.err);
 1815124:	00806134 	movhi	r2,388
 1815128:	109e7504 	addi	r2,r2,31188
 181512c:	10805917 	ldw	r2,356(r2)
 1815130:	10c00044 	addi	r3,r2,1
 1815134:	00806134 	movhi	r2,388
 1815138:	109e7504 	addi	r2,r2,31188
 181513c:	10c05915 	stw	r3,356(r2)
		return ERR_MEM;
 1815140:	00bfffc4 	movi	r2,-1
 1815144:	00001506 	br	181519c <sys_mutex_new+0xac>
	}

	SYS_STATS_INC_USED(mutex);
 1815148:	00806134 	movhi	r2,388
 181514c:	109e7504 	addi	r2,r2,31188
 1815150:	10805717 	ldw	r2,348(r2)
 1815154:	10c00044 	addi	r3,r2,1
 1815158:	00806134 	movhi	r2,388
 181515c:	109e7504 	addi	r2,r2,31188
 1815160:	10c05715 	stw	r3,348(r2)
 1815164:	00806134 	movhi	r2,388
 1815168:	109e7504 	addi	r2,r2,31188
 181516c:	10c05817 	ldw	r3,352(r2)
 1815170:	00806134 	movhi	r2,388
 1815174:	109e7504 	addi	r2,r2,31188
 1815178:	10805717 	ldw	r2,348(r2)
 181517c:	1880062e 	bgeu	r3,r2,1815198 <sys_mutex_new+0xa8>
 1815180:	00806134 	movhi	r2,388
 1815184:	109e7504 	addi	r2,r2,31188
 1815188:	10c05717 	ldw	r3,348(r2)
 181518c:	00806134 	movhi	r2,388
 1815190:	109e7504 	addi	r2,r2,31188
 1815194:	10c05815 	stw	r3,352(r2)

	return ERR_OK;
 1815198:	0005883a 	mov	r2,zero
}
 181519c:	e037883a 	mov	sp,fp
 18151a0:	dfc00117 	ldw	ra,4(sp)
 18151a4:	df000017 	ldw	fp,0(sp)
 18151a8:	dec00204 	addi	sp,sp,8
 18151ac:	f800283a 	ret

018151b0 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock */
void sys_mutex_lock(sys_mutex_t *mutex)
{
 18151b0:	defffd04 	addi	sp,sp,-12
 18151b4:	dfc00215 	stw	ra,8(sp)
 18151b8:	df000115 	stw	fp,4(sp)
 18151bc:	df000104 	addi	fp,sp,4
 18151c0:	e13fff15 	stw	r4,-4(fp)
	// wait on mutex forever
	while (xSemaphoreTake(*mutex, 10000) != pdTRUE);
 18151c4:	0001883a 	nop
 18151c8:	e0bfff17 	ldw	r2,-4(fp)
 18151cc:	10800017 	ldw	r2,0(r2)
 18151d0:	0149c404 	movi	r5,10000
 18151d4:	1009883a 	mov	r4,r2
 18151d8:	180df140 	call	180df14 <xQueueSemaphoreTake>
 18151dc:	10800058 	cmpnei	r2,r2,1
 18151e0:	103ff91e 	bne	r2,zero,18151c8 <__ram_exceptions_end+0xff804ed8>
}
 18151e4:	0001883a 	nop
 18151e8:	e037883a 	mov	sp,fp
 18151ec:	dfc00117 	ldw	ra,4(sp)
 18151f0:	df000017 	ldw	fp,0(sp)
 18151f4:	dec00204 	addi	sp,sp,8
 18151f8:	f800283a 	ret

018151fc <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 18151fc:	defffd04 	addi	sp,sp,-12
 1815200:	dfc00215 	stw	ra,8(sp)
 1815204:	df000115 	stw	fp,4(sp)
 1815208:	df000104 	addi	fp,sp,4
 181520c:	e13fff15 	stw	r4,-4(fp)
	xSemaphoreGive(*mutex);
 1815210:	e0bfff17 	ldw	r2,-4(fp)
 1815214:	10800017 	ldw	r2,0(r2)
 1815218:	000f883a 	mov	r7,zero
 181521c:	000d883a 	mov	r6,zero
 1815220:	000b883a 	mov	r5,zero
 1815224:	1009883a 	mov	r4,r2
 1815228:	180d9880 	call	180d988 <xQueueGenericSend>
}
 181522c:	0001883a 	nop
 1815230:	e037883a 	mov	sp,fp
 1815234:	dfc00117 	ldw	ra,4(sp)
 1815238:	df000017 	ldw	fp,0(sp)
 181523c:	dec00204 	addi	sp,sp,8
 1815240:	f800283a 	ret

01815244 <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete */
void sys_mutex_free(sys_mutex_t *mutex)
{
 1815244:	defffd04 	addi	sp,sp,-12
 1815248:	dfc00215 	stw	ra,8(sp)
 181524c:	df000115 	stw	fp,4(sp)
 1815250:	df000104 	addi	fp,sp,4
 1815254:	e13fff15 	stw	r4,-4(fp)
	vQueueDelete(*mutex);
 1815258:	e0bfff17 	ldw	r2,-4(fp)
 181525c:	10800017 	ldw	r2,0(r2)
 1815260:	1009883a 	mov	r4,r2
 1815264:	180e5a00 	call	180e5a0 <vQueueDelete>
	SYS_STATS_DEC(mutex.used);
 1815268:	00806134 	movhi	r2,388
 181526c:	109e7504 	addi	r2,r2,31188
 1815270:	10805717 	ldw	r2,348(r2)
 1815274:	10ffffc4 	addi	r3,r2,-1
 1815278:	00806134 	movhi	r2,388
 181527c:	109e7504 	addi	r2,r2,31188
 1815280:	10c05715 	stw	r3,348(r2)
}
 1815284:	0001883a 	nop
 1815288:	e037883a 	mov	sp,fp
 181528c:	dfc00117 	ldw	ra,4(sp)
 1815290:	df000017 	ldw	fp,0(sp)
 1815294:	dec00204 	addi	sp,sp,8
 1815298:	f800283a 	ret

0181529c <sys_mbox_new>:
 * in mailboxes are pointers. You have to define macros "_MBOX_SIZE"
 * in your lwipopts.h, or ignore this parameter in your implementation
 * and use a default size.
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 181529c:	defffc04 	addi	sp,sp,-16
 18152a0:	dfc00315 	stw	ra,12(sp)
 18152a4:	df000215 	stw	fp,8(sp)
 18152a8:	df000204 	addi	fp,sp,8
 18152ac:	e13ffe15 	stw	r4,-8(fp)
 18152b0:	e17fff15 	stw	r5,-4(fp)
	*mbox = xQueueCreate(size, sizeof(void *)); // XXX correct? We are posting pointers so I guess it is...
 18152b4:	e0bfff17 	ldw	r2,-4(fp)
 18152b8:	000d883a 	mov	r6,zero
 18152bc:	01400104 	movi	r5,4
 18152c0:	1009883a 	mov	r4,r2
 18152c4:	180d6200 	call	180d620 <xQueueGenericCreate>
 18152c8:	1007883a 	mov	r3,r2
 18152cc:	e0bffe17 	ldw	r2,-8(fp)
 18152d0:	10c00015 	stw	r3,0(r2)

	if (!*mbox) {
 18152d4:	e0bffe17 	ldw	r2,-8(fp)
 18152d8:	10800017 	ldw	r2,0(r2)
 18152dc:	1000091e 	bne	r2,zero,1815304 <sys_mbox_new+0x68>
		SYS_STATS_INC(mbox.err);
 18152e0:	00806134 	movhi	r2,388
 18152e4:	109e7504 	addi	r2,r2,31188
 18152e8:	10805c17 	ldw	r2,368(r2)
 18152ec:	10c00044 	addi	r3,r2,1
 18152f0:	00806134 	movhi	r2,388
 18152f4:	109e7504 	addi	r2,r2,31188
 18152f8:	10c05c15 	stw	r3,368(r2)
		return ERR_MEM;
 18152fc:	00bfffc4 	movi	r2,-1
 1815300:	00001506 	br	1815358 <sys_mbox_new+0xbc>
	}

	SYS_STATS_INC_USED(mbox);
 1815304:	00806134 	movhi	r2,388
 1815308:	109e7504 	addi	r2,r2,31188
 181530c:	10805a17 	ldw	r2,360(r2)
 1815310:	10c00044 	addi	r3,r2,1
 1815314:	00806134 	movhi	r2,388
 1815318:	109e7504 	addi	r2,r2,31188
 181531c:	10c05a15 	stw	r3,360(r2)
 1815320:	00806134 	movhi	r2,388
 1815324:	109e7504 	addi	r2,r2,31188
 1815328:	10c05b17 	ldw	r3,364(r2)
 181532c:	00806134 	movhi	r2,388
 1815330:	109e7504 	addi	r2,r2,31188
 1815334:	10805a17 	ldw	r2,360(r2)
 1815338:	1880062e 	bgeu	r3,r2,1815354 <sys_mbox_new+0xb8>
 181533c:	00806134 	movhi	r2,388
 1815340:	109e7504 	addi	r2,r2,31188
 1815344:	10c05a17 	ldw	r3,360(r2)
 1815348:	00806134 	movhi	r2,388
 181534c:	109e7504 	addi	r2,r2,31188
 1815350:	10c05b15 	stw	r3,364(r2)

	return ERR_OK;
 1815354:	0005883a 	mov	r2,zero
}
 1815358:	e037883a 	mov	sp,fp
 181535c:	dfc00117 	ldw	ra,4(sp)
 1815360:	df000017 	ldw	fp,0(sp)
 1815364:	dec00204 	addi	sp,sp,8
 1815368:	f800283a 	ret

0181536c <sys_mbox_free>:
 * Deallocates a mailbox. If there are messages still present in the
 * mailbox when the mailbox is deallocated, it is an indication of a
 * programming error in lwIP and the developer should be notified.
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
 181536c:	defffd04 	addi	sp,sp,-12
 1815370:	dfc00215 	stw	ra,8(sp)
 1815374:	df000115 	stw	fp,4(sp)
 1815378:	df000104 	addi	fp,sp,4
 181537c:	e13fff15 	stw	r4,-4(fp)
	if (uxQueueMessagesWaiting(*mbox))
 1815380:	e0bfff17 	ldw	r2,-4(fp)
 1815384:	10800017 	ldw	r2,0(r2)
 1815388:	1009883a 	mov	r4,r2
 181538c:	180e4b40 	call	180e4b4 <uxQueueMessagesWaiting>
 1815390:	10000126 	beq	r2,zero,1815398 <sys_mbox_free+0x2c>
	{
		// Line for breakpoint.  Should never break here!
		__asm__ __volatile__ ( "nop" );
 1815394:	0001883a 	nop
	}

	vQueueDelete(*mbox);
 1815398:	e0bfff17 	ldw	r2,-4(fp)
 181539c:	10800017 	ldw	r2,0(r2)
 18153a0:	1009883a 	mov	r4,r2
 18153a4:	180e5a00 	call	180e5a0 <vQueueDelete>

	SYS_STATS_DEC(mbox.used);
 18153a8:	00806134 	movhi	r2,388
 18153ac:	109e7504 	addi	r2,r2,31188
 18153b0:	10805a17 	ldw	r2,360(r2)
 18153b4:	10ffffc4 	addi	r3,r2,-1
 18153b8:	00806134 	movhi	r2,388
 18153bc:	109e7504 	addi	r2,r2,31188
 18153c0:	10c05a15 	stw	r3,360(r2)
}
 18153c4:	0001883a 	nop
 18153c8:	e037883a 	mov	sp,fp
 18153cc:	dfc00117 	ldw	ra,4(sp)
 18153d0:	df000017 	ldw	fp,0(sp)
 18153d4:	dec00204 	addi	sp,sp,8
 18153d8:	f800283a 	ret

018153dc <sys_mbox_post>:
/**
 * Posts the "msg" to the mailbox. This function have to block until
 * the "msg" is really posted.
 */
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 18153dc:	defffc04 	addi	sp,sp,-16
 18153e0:	dfc00315 	stw	ra,12(sp)
 18153e4:	df000215 	stw	fp,8(sp)
 18153e8:	df000204 	addi	fp,sp,8
 18153ec:	e13ffe15 	stw	r4,-8(fp)
 18153f0:	e17fff15 	stw	r5,-4(fp)
	xQueueSend(*mbox, &data, (portTickType)(archPOST_BLOCK_TIME_MS / portTICK_RATE_MS));
 18153f4:	e0bffe17 	ldw	r2,-8(fp)
 18153f8:	10800017 	ldw	r2,0(r2)
 18153fc:	e0ffff04 	addi	r3,fp,-4
 1815400:	000f883a 	mov	r7,zero
 1815404:	0189c404 	movi	r6,10000
 1815408:	180b883a 	mov	r5,r3
 181540c:	1009883a 	mov	r4,r2
 1815410:	180d9880 	call	180d988 <xQueueGenericSend>
}
 1815414:	0001883a 	nop
 1815418:	e037883a 	mov	sp,fp
 181541c:	dfc00117 	ldw	ra,4(sp)
 1815420:	df000017 	ldw	fp,0(sp)
 1815424:	dec00204 	addi	sp,sp,8
 1815428:	f800283a 	ret

0181542c <sys_mbox_trypost>:
/**
 * Try to post the "msg" to the mailbox. Returns ERR_MEM if this one
 * is full, else, ERR_OK if the "msg" is posted.
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *data)
{
 181542c:	defffc04 	addi	sp,sp,-16
 1815430:	dfc00315 	stw	ra,12(sp)
 1815434:	df000215 	stw	fp,8(sp)
 1815438:	df000204 	addi	fp,sp,8
 181543c:	e13ffe15 	stw	r4,-8(fp)
 1815440:	e17fff15 	stw	r5,-4(fp)
	return (xQueueSend(*mbox, &data, 0) == pdTRUE) ? ERR_OK : ERR_MEM;
 1815444:	e0bffe17 	ldw	r2,-8(fp)
 1815448:	10800017 	ldw	r2,0(r2)
 181544c:	e0ffff04 	addi	r3,fp,-4
 1815450:	000f883a 	mov	r7,zero
 1815454:	000d883a 	mov	r6,zero
 1815458:	180b883a 	mov	r5,r3
 181545c:	1009883a 	mov	r4,r2
 1815460:	180d9880 	call	180d988 <xQueueGenericSend>
 1815464:	10800058 	cmpnei	r2,r2,1
 1815468:	1000021e 	bne	r2,zero,1815474 <sys_mbox_trypost+0x48>
 181546c:	0005883a 	mov	r2,zero
 1815470:	00000106 	br	1815478 <sys_mbox_trypost+0x4c>
 1815474:	00bfffc4 	movi	r2,-1
}
 1815478:	e037883a 	mov	sp,fp
 181547c:	dfc00117 	ldw	ra,4(sp)
 1815480:	df000017 	ldw	fp,0(sp)
 1815484:	dec00204 	addi	sp,sp,8
 1815488:	f800283a 	ret

0181548c <sys_arch_mbox_fetch>:
 *
 * Note that a function with a similar name, sys_mbox_fetch(), is
 * implemented by lwIP.
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 181548c:	defff704 	addi	sp,sp,-36
 1815490:	dfc00815 	stw	ra,32(sp)
 1815494:	df000715 	stw	fp,28(sp)
 1815498:	df000704 	addi	fp,sp,28
 181549c:	e13ffd15 	stw	r4,-12(fp)
 18154a0:	e17ffe15 	stw	r5,-8(fp)
 18154a4:	e1bfff15 	stw	r6,-4(fp)
	void *dummyptr;
	portTickType nStartTime, nEndTime, nElapsed;

	nStartTime = xTaskGetTickCount();
 18154a8:	180fb580 	call	180fb58 <xTaskGetTickCount>
 18154ac:	e0bffa15 	stw	r2,-24(fp)

	if (msg == NULL)
 18154b0:	e0bffe17 	ldw	r2,-8(fp)
 18154b4:	1000021e 	bne	r2,zero,18154c0 <sys_arch_mbox_fetch+0x34>
		msg = &dummyptr;
 18154b8:	e0bffc04 	addi	r2,fp,-16
 18154bc:	e0bffe15 	stw	r2,-8(fp)

	if (timeout != 0)
 18154c0:	e0bfff17 	ldw	r2,-4(fp)
 18154c4:	10001826 	beq	r2,zero,1815528 <sys_arch_mbox_fetch+0x9c>
	{
		if (pdTRUE == xQueueReceive(*mbox, msg, timeout))
 18154c8:	e0bffd17 	ldw	r2,-12(fp)
 18154cc:	10800017 	ldw	r2,0(r2)
 18154d0:	e1bfff17 	ldw	r6,-4(fp)
 18154d4:	e17ffe17 	ldw	r5,-8(fp)
 18154d8:	1009883a 	mov	r4,r2
 18154dc:	180dd3c0 	call	180dd3c <xQueueReceive>
 18154e0:	10800058 	cmpnei	r2,r2,1
 18154e4:	10000c1e 	bne	r2,zero,1815518 <sys_arch_mbox_fetch+0x8c>
		{
			nEndTime = xTaskGetTickCount();
 18154e8:	180fb580 	call	180fb58 <xTaskGetTickCount>
 18154ec:	e0bffb15 	stw	r2,-20(fp)
			nElapsed = nEndTime - nStartTime;
 18154f0:	e0fffb17 	ldw	r3,-20(fp)
 18154f4:	e0bffa17 	ldw	r2,-24(fp)
 18154f8:	1885c83a 	sub	r2,r3,r2
 18154fc:	e0bff915 	stw	r2,-28(fp)

			if (nElapsed == 0)
 1815500:	e0bff917 	ldw	r2,-28(fp)
 1815504:	1000021e 	bne	r2,zero,1815510 <sys_arch_mbox_fetch+0x84>
				nElapsed = 1;
 1815508:	00800044 	movi	r2,1
 181550c:	e0bff915 	stw	r2,-28(fp)

			return nElapsed;
 1815510:	e0bff917 	ldw	r2,-28(fp)
 1815514:	00001806 	br	1815578 <sys_arch_mbox_fetch+0xec>
		}
		else // timed out blocking for message
		{
			*msg = NULL;
 1815518:	e0bffe17 	ldw	r2,-8(fp)
 181551c:	10000015 	stw	zero,0(r2)
			return SYS_ARCH_TIMEOUT;
 1815520:	00bfffc4 	movi	r2,-1
 1815524:	00001406 	br	1815578 <sys_arch_mbox_fetch+0xec>
		}
	}
	else // block forever for a message.
	{
		// wait on message forever
		while (pdTRUE != xQueueReceive(*mbox, msg, 10000));
 1815528:	0001883a 	nop
 181552c:	e0bffd17 	ldw	r2,-12(fp)
 1815530:	10800017 	ldw	r2,0(r2)
 1815534:	0189c404 	movi	r6,10000
 1815538:	e17ffe17 	ldw	r5,-8(fp)
 181553c:	1009883a 	mov	r4,r2
 1815540:	180dd3c0 	call	180dd3c <xQueueReceive>
 1815544:	10800058 	cmpnei	r2,r2,1
 1815548:	103ff81e 	bne	r2,zero,181552c <__ram_exceptions_end+0xff80523c>

		nEndTime = xTaskGetTickCount();
 181554c:	180fb580 	call	180fb58 <xTaskGetTickCount>
 1815550:	e0bffb15 	stw	r2,-20(fp)
		nElapsed = nEndTime - nStartTime;
 1815554:	e0fffb17 	ldw	r3,-20(fp)
 1815558:	e0bffa17 	ldw	r2,-24(fp)
 181555c:	1885c83a 	sub	r2,r3,r2
 1815560:	e0bff915 	stw	r2,-28(fp)

		if (nElapsed == 0)
 1815564:	e0bff917 	ldw	r2,-28(fp)
 1815568:	1000021e 	bne	r2,zero,1815574 <sys_arch_mbox_fetch+0xe8>
			nElapsed = 1;
 181556c:	00800044 	movi	r2,1
 1815570:	e0bff915 	stw	r2,-28(fp)

		return nElapsed; // return time blocked TBD test
 1815574:	e0bff917 	ldw	r2,-28(fp)
	}
}
 1815578:	e037883a 	mov	sp,fp
 181557c:	dfc00117 	ldw	ra,4(sp)
 1815580:	df000017 	ldw	fp,0(sp)
 1815584:	dec00204 	addi	sp,sp,8
 1815588:	f800283a 	ret

0181558c <sys_arch_mbox_tryfetch>:
 * #define sys_arch_mbox_tryfetch(mbox,msg) \
 * 		sys_arch_mbox_fetch(mbox,msg,1)
 * although this would introduce unnecessary delays.
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 181558c:	defffb04 	addi	sp,sp,-20
 1815590:	dfc00415 	stw	ra,16(sp)
 1815594:	df000315 	stw	fp,12(sp)
 1815598:	df000304 	addi	fp,sp,12
 181559c:	e13ffe15 	stw	r4,-8(fp)
 18155a0:	e17fff15 	stw	r5,-4(fp)
	void *dummyptr;

	if (msg == NULL)
 18155a4:	e0bfff17 	ldw	r2,-4(fp)
 18155a8:	1000021e 	bne	r2,zero,18155b4 <sys_arch_mbox_tryfetch+0x28>
		msg = &dummyptr;
 18155ac:	e0bffd04 	addi	r2,fp,-12
 18155b0:	e0bfff15 	stw	r2,-4(fp)

	return (pdTRUE == xQueueReceive(*mbox, msg, 0)) ? 0 : SYS_MBOX_EMPTY;
 18155b4:	e0bffe17 	ldw	r2,-8(fp)
 18155b8:	10800017 	ldw	r2,0(r2)
 18155bc:	000d883a 	mov	r6,zero
 18155c0:	e17fff17 	ldw	r5,-4(fp)
 18155c4:	1009883a 	mov	r4,r2
 18155c8:	180dd3c0 	call	180dd3c <xQueueReceive>
 18155cc:	10800058 	cmpnei	r2,r2,1
 18155d0:	1000021e 	bne	r2,zero,18155dc <sys_arch_mbox_tryfetch+0x50>
 18155d4:	0005883a 	mov	r2,zero
 18155d8:	00000106 	br	18155e0 <sys_arch_mbox_tryfetch+0x54>
 18155dc:	00bfffc4 	movi	r2,-1
}
 18155e0:	e037883a 	mov	sp,fp
 18155e4:	dfc00117 	ldw	ra,4(sp)
 18155e8:	df000017 	ldw	fp,0(sp)
 18155ec:	dec00204 	addi	sp,sp,8
 18155f0:	f800283a 	ret

018155f4 <sys_thread_new>:
 * argument to the thread() function. The stack size to used for this thread is
 * the "stacksize" parameter. The id of the new thread is returned. Both the id
 * and the priority are system dependent.
 */
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio)
{
 18155f4:	defff604 	addi	sp,sp,-40
 18155f8:	dfc00915 	stw	ra,36(sp)
 18155fc:	df000815 	stw	fp,32(sp)
 1815600:	df000804 	addi	fp,sp,32
 1815604:	e13ffc15 	stw	r4,-16(fp)
 1815608:	e17ffd15 	stw	r5,-12(fp)
 181560c:	e1bffe15 	stw	r6,-8(fp)
 1815610:	e1ffff15 	stw	r7,-4(fp)
	xTaskHandle objTask;
	int result = pdFAIL;
 1815614:	e03ffa15 	stw	zero,-24(fp)

	result = xTaskCreate(thread, (signed portCHAR*)name, stacksize, arg, prio, &objTask);
 1815618:	e13fff17 	ldw	r4,-4(fp)
 181561c:	e0800217 	ldw	r2,8(fp)
 1815620:	e0fffb04 	addi	r3,fp,-20
 1815624:	d8c00115 	stw	r3,4(sp)
 1815628:	d8800015 	stw	r2,0(sp)
 181562c:	e1fffe17 	ldw	r7,-8(fp)
 1815630:	200d883a 	mov	r6,r4
 1815634:	e17ffc17 	ldw	r5,-16(fp)
 1815638:	e13ffd17 	ldw	r4,-12(fp)
 181563c:	180ec140 	call	180ec14 <xTaskCreate>
 1815640:	e0bffa15 	stw	r2,-24(fp)

	return (result == pdPASS) ? objTask : NULL;
 1815644:	e0bffa17 	ldw	r2,-24(fp)
 1815648:	10800058 	cmpnei	r2,r2,1
 181564c:	1000021e 	bne	r2,zero,1815658 <sys_thread_new+0x64>
 1815650:	e0bffb17 	ldw	r2,-20(fp)
 1815654:	00000106 	br	181565c <sys_thread_new+0x68>
 1815658:	0005883a 	mov	r2,zero
}
 181565c:	e037883a 	mov	sp,fp
 1815660:	dfc00117 	ldw	ra,4(sp)
 1815664:	df000017 	ldw	fp,0(sp)
 1815668:	dec00204 	addi	sp,sp,8
 181566c:	f800283a 	ret

01815670 <dhcp_clear_assignment>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_clear_assignment(struct netif *netif)
{
 1815670:	defffd04 	addi	sp,sp,-12
 1815674:	dfc00215 	stw	ra,8(sp)
 1815678:	df000115 	stw	fp,4(sp)
 181567c:	df000104 	addi	fp,sp,4
 1815680:	e13fff15 	stw	r4,-4(fp)
  netif_set_down(netif);
 1815684:	e13fff17 	ldw	r4,-4(fp)
 1815688:	181970c0 	call	181970c <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
 181568c:	d1600d04 	addi	r5,gp,-32716
 1815690:	e13fff17 	ldw	r4,-4(fp)
 1815694:	18194780 	call	1819478 <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
 1815698:	d1600d04 	addi	r5,gp,-32716
 181569c:	e13fff17 	ldw	r4,-4(fp)
 18156a0:	18195a00 	call	18195a0 <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY); 
 18156a4:	d1600d04 	addi	r5,gp,-32716
 18156a8:	e13fff17 	ldw	r4,-4(fp)
 18156ac:	18195e80 	call	18195e8 <netif_set_netmask>
}
 18156b0:	0001883a 	nop
 18156b4:	e037883a 	mov	sp,fp
 18156b8:	dfc00117 	ldw	ra,4(sp)
 18156bc:	df000017 	ldw	fp,0(sp)
 18156c0:	dec00204 	addi	sp,sp,8
 18156c4:	f800283a 	ret

018156c8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 18156c8:	defffc04 	addi	sp,sp,-16
 18156cc:	dfc00315 	stw	ra,12(sp)
 18156d0:	df000215 	stw	fp,8(sp)
 18156d4:	df000204 	addi	fp,sp,8
 18156d8:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 18156dc:	e0bfff17 	ldw	r2,-4(fp)
 18156e0:	10800a17 	ldw	r2,40(r2)
 18156e4:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Set the interface down since the address must no longer be used, as per RFC2131 */
  dhcp_clear_assignment(netif);
 18156e8:	e13fff17 	ldw	r4,-4(fp)
 18156ec:	18156700 	call	1815670 <dhcp_clear_assignment>
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
 18156f0:	01400304 	movi	r5,12
 18156f4:	e13ffe17 	ldw	r4,-8(fp)
 18156f8:	18172dc0 	call	18172dc <dhcp_set_state>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 18156fc:	e13fff17 	ldw	r4,-4(fp)
 1815700:	18167f00 	call	18167f0 <dhcp_discover>
}
 1815704:	0001883a 	nop
 1815708:	e037883a 	mov	sp,fp
 181570c:	dfc00117 	ldw	ra,4(sp)
 1815710:	df000017 	ldw	fp,0(sp)
 1815714:	dec00204 	addi	sp,sp,8
 1815718:	f800283a 	ret

0181571c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 181571c:	defffb04 	addi	sp,sp,-20
 1815720:	dfc00415 	stw	ra,16(sp)
 1815724:	df000315 	stw	fp,12(sp)
 1815728:	df000304 	addi	fp,sp,12
 181572c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815730:	e0bfff17 	ldw	r2,-4(fp)
 1815734:	10800a17 	ldw	r2,40(r2)
 1815738:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_CHECKING);
 181573c:	01400204 	movi	r5,8
 1815740:	e13ffd17 	ldw	r4,-12(fp)
 1815744:	18172dc0 	call	18172dc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 1815748:	e0bffd17 	ldw	r2,-12(fp)
 181574c:	10800904 	addi	r2,r2,36
 1815750:	000d883a 	mov	r6,zero
 1815754:	100b883a 	mov	r5,r2
 1815758:	e13fff17 	ldw	r4,-4(fp)
 181575c:	18234000 	call	1823400 <etharp_query>
 1815760:	e0bffe05 	stb	r2,-8(fp)
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  dhcp->tries++;
 1815764:	e0bffd17 	ldw	r2,-12(fp)
 1815768:	10800343 	ldbu	r2,13(r2)
 181576c:	10800044 	addi	r2,r2,1
 1815770:	1007883a 	mov	r3,r2
 1815774:	e0bffd17 	ldw	r2,-12(fp)
 1815778:	10c00345 	stb	r3,13(r2)
  msecs = 500;
 181577c:	00807d04 	movi	r2,500
 1815780:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1815784:	e0bffe8b 	ldhu	r2,-6(fp)
 1815788:	10807cc4 	addi	r2,r2,499
 181578c:	01407d04 	movi	r5,500
 1815790:	1009883a 	mov	r4,r2
 1815794:	180ab240 	call	180ab24 <__divsi3>
 1815798:	1007883a 	mov	r3,r2
 181579c:	e0bffd17 	ldw	r2,-12(fp)
 18157a0:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 18157a4:	0001883a 	nop
 18157a8:	e037883a 	mov	sp,fp
 18157ac:	dfc00117 	ldw	ra,4(sp)
 18157b0:	df000017 	ldw	fp,0(sp)
 18157b4:	dec00204 	addi	sp,sp,8
 18157b8:	f800283a 	ret

018157bc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 18157bc:	defffc04 	addi	sp,sp,-16
 18157c0:	dfc00315 	stw	ra,12(sp)
 18157c4:	df000215 	stw	fp,8(sp)
 18157c8:	df000204 	addi	fp,sp,8
 18157cc:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 18157d0:	e0bfff17 	ldw	r2,-4(fp)
 18157d4:	10800a17 	ldw	r2,40(r2)
 18157d8:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 18157dc:	00806134 	movhi	r2,388
 18157e0:	109e6804 	addi	r2,r2,31136
 18157e4:	10800083 	ldbu	r2,2(r2)
 18157e8:	10803fcc 	andi	r2,r2,255
 18157ec:	10002826 	beq	r2,zero,1815890 <dhcp_handle_offer+0xd4>
    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 18157f0:	00806134 	movhi	r2,388
 18157f4:	109e6b04 	addi	r2,r2,31148
 18157f8:	10800217 	ldw	r2,8(r2)
 18157fc:	1006d63a 	srli	r3,r2,24
 1815800:	00806134 	movhi	r2,388
 1815804:	109e6b04 	addi	r2,r2,31148
 1815808:	10800217 	ldw	r2,8(r2)
 181580c:	1004d23a 	srli	r2,r2,8
 1815810:	10bfc00c 	andi	r2,r2,65280
 1815814:	1886b03a 	or	r3,r3,r2
 1815818:	00806134 	movhi	r2,388
 181581c:	109e6b04 	addi	r2,r2,31148
 1815820:	10800217 	ldw	r2,8(r2)
 1815824:	10bfc00c 	andi	r2,r2,65280
 1815828:	1004923a 	slli	r2,r2,8
 181582c:	1886b03a 	or	r3,r3,r2
 1815830:	00806134 	movhi	r2,388
 1815834:	109e6b04 	addi	r2,r2,31148
 1815838:	10800217 	ldw	r2,8(r2)
 181583c:	1004963a 	slli	r2,r2,24
 1815840:	1886b03a 	or	r3,r3,r2
 1815844:	e0bffe17 	ldw	r2,-8(fp)
 1815848:	10c00815 	stw	r3,32(r2)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->server_ip_addr)));
    /* remember offered address */
    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 181584c:	e0bffe17 	ldw	r2,-8(fp)
 1815850:	10800217 	ldw	r2,8(r2)
 1815854:	10c00403 	ldbu	r3,16(r2)
 1815858:	11000443 	ldbu	r4,17(r2)
 181585c:	2008923a 	slli	r4,r4,8
 1815860:	20c6b03a 	or	r3,r4,r3
 1815864:	11000483 	ldbu	r4,18(r2)
 1815868:	2008943a 	slli	r4,r4,16
 181586c:	20c6b03a 	or	r3,r4,r3
 1815870:	108004c3 	ldbu	r2,19(r2)
 1815874:	1004963a 	slli	r2,r2,24
 1815878:	10c4b03a 	or	r2,r2,r3
 181587c:	1007883a 	mov	r3,r2
 1815880:	e0bffe17 	ldw	r2,-8(fp)
 1815884:	10c00915 	stw	r3,36(r2)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 1815888:	e13fff17 	ldw	r4,-4(fp)
 181588c:	18158a80 	call	18158a8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 1815890:	0001883a 	nop
 1815894:	e037883a 	mov	sp,fp
 1815898:	dfc00117 	ldw	ra,4(sp)
 181589c:	df000017 	ldw	fp,0(sp)
 18158a0:	dec00204 	addi	sp,sp,8
 18158a4:	f800283a 	ret

018158a8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 18158a8:	defffa04 	addi	sp,sp,-24
 18158ac:	dfc00515 	stw	ra,20(sp)
 18158b0:	df000415 	stw	fp,16(sp)
 18158b4:	df000404 	addi	fp,sp,16
 18158b8:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 18158bc:	e0bfff17 	ldw	r2,-4(fp)
 18158c0:	10800a17 	ldw	r2,40(r2)
 18158c4:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_REQUESTING);
 18158c8:	01400044 	movi	r5,1
 18158cc:	e13ffd17 	ldw	r4,-12(fp)
 18158d0:	18172dc0 	call	18172dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 18158d4:	018000c4 	movi	r6,3
 18158d8:	e17ffd17 	ldw	r5,-12(fp)
 18158dc:	e13fff17 	ldw	r4,-4(fp)
 18158e0:	18182b40 	call	18182b4 <dhcp_create_msg>
 18158e4:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 18158e8:	e0bffe07 	ldb	r2,-8(fp)
 18158ec:	1000651e 	bne	r2,zero,1815a84 <dhcp_select+0x1dc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 18158f0:	01800084 	movi	r6,2
 18158f4:	01400e44 	movi	r5,57
 18158f8:	e13ffd17 	ldw	r4,-12(fp)
 18158fc:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 1815900:	e0bfff17 	ldw	r2,-4(fp)
 1815904:	10800c0b 	ldhu	r2,48(r2)
 1815908:	10bfffcc 	andi	r2,r2,65535
 181590c:	100b883a 	mov	r5,r2
 1815910:	e13ffd17 	ldw	r4,-12(fp)
 1815914:	18174340 	call	1817434 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 1815918:	01800104 	movi	r6,4
 181591c:	01400c84 	movi	r5,50
 1815920:	e13ffd17 	ldw	r4,-12(fp)
 1815924:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 1815928:	e0bffd17 	ldw	r2,-12(fp)
 181592c:	10800917 	ldw	r2,36(r2)
 1815930:	1006d63a 	srli	r3,r2,24
 1815934:	e0bffd17 	ldw	r2,-12(fp)
 1815938:	10800917 	ldw	r2,36(r2)
 181593c:	1004d23a 	srli	r2,r2,8
 1815940:	10bfc00c 	andi	r2,r2,65280
 1815944:	1886b03a 	or	r3,r3,r2
 1815948:	e0bffd17 	ldw	r2,-12(fp)
 181594c:	10800917 	ldw	r2,36(r2)
 1815950:	10bfc00c 	andi	r2,r2,65280
 1815954:	1004923a 	slli	r2,r2,8
 1815958:	1886b03a 	or	r3,r3,r2
 181595c:	e0bffd17 	ldw	r2,-12(fp)
 1815960:	10800917 	ldw	r2,36(r2)
 1815964:	1004963a 	slli	r2,r2,24
 1815968:	1884b03a 	or	r2,r3,r2
 181596c:	100b883a 	mov	r5,r2
 1815970:	e13ffd17 	ldw	r4,-12(fp)
 1815974:	18174cc0 	call	18174cc <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 1815978:	01800104 	movi	r6,4
 181597c:	01400d84 	movi	r5,54
 1815980:	e13ffd17 	ldw	r4,-12(fp)
 1815984:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
 1815988:	e0bffd17 	ldw	r2,-12(fp)
 181598c:	10800817 	ldw	r2,32(r2)
 1815990:	1006d63a 	srli	r3,r2,24
 1815994:	e0bffd17 	ldw	r2,-12(fp)
 1815998:	10800817 	ldw	r2,32(r2)
 181599c:	1004d23a 	srli	r2,r2,8
 18159a0:	10bfc00c 	andi	r2,r2,65280
 18159a4:	1886b03a 	or	r3,r3,r2
 18159a8:	e0bffd17 	ldw	r2,-12(fp)
 18159ac:	10800817 	ldw	r2,32(r2)
 18159b0:	10bfc00c 	andi	r2,r2,65280
 18159b4:	1004923a 	slli	r2,r2,8
 18159b8:	1886b03a 	or	r3,r3,r2
 18159bc:	e0bffd17 	ldw	r2,-12(fp)
 18159c0:	10800817 	ldw	r2,32(r2)
 18159c4:	1004963a 	slli	r2,r2,24
 18159c8:	1884b03a 	or	r2,r3,r2
 18159cc:	100b883a 	mov	r5,r2
 18159d0:	e13ffd17 	ldw	r4,-12(fp)
 18159d4:	18174cc0 	call	18174cc <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
 18159d8:	01800104 	movi	r6,4
 18159dc:	01400dc4 	movi	r5,55
 18159e0:	e13ffd17 	ldw	r4,-12(fp)
 18159e4:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
 18159e8:	01400044 	movi	r5,1
 18159ec:	e13ffd17 	ldw	r4,-12(fp)
 18159f0:	18173d40 	call	18173d4 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
 18159f4:	014000c4 	movi	r5,3
 18159f8:	e13ffd17 	ldw	r4,-12(fp)
 18159fc:	18173d40 	call	18173d4 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
 1815a00:	01400704 	movi	r5,28
 1815a04:	e13ffd17 	ldw	r4,-12(fp)
 1815a08:	18173d40 	call	18173d4 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
 1815a0c:	01400184 	movi	r5,6
 1815a10:	e13ffd17 	ldw	r4,-12(fp)
 1815a14:	18173d40 	call	18173d4 <dhcp_option_byte>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
 1815a18:	e17fff17 	ldw	r5,-4(fp)
 1815a1c:	e13ffd17 	ldw	r4,-12(fp)
 1815a20:	18175d80 	call	18175d8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 1815a24:	e13ffd17 	ldw	r4,-12(fp)
 1815a28:	18188bc0 	call	18188bc <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1815a2c:	e0bffd17 	ldw	r2,-12(fp)
 1815a30:	10c00417 	ldw	r3,16(r2)
 1815a34:	e0bffd17 	ldw	r2,-12(fp)
 1815a38:	1080060b 	ldhu	r2,24(r2)
 1815a3c:	10803c04 	addi	r2,r2,240
 1815a40:	10bfffcc 	andi	r2,r2,65535
 1815a44:	100b883a 	mov	r5,r2
 1815a48:	1809883a 	mov	r4,r3
 1815a4c:	1819f740 	call	1819f74 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 1815a50:	e0bffd17 	ldw	r2,-12(fp)
 1815a54:	10c00117 	ldw	r3,4(r2)
 1815a58:	e0bffd17 	ldw	r2,-12(fp)
 1815a5c:	11000417 	ldw	r4,16(r2)
 1815a60:	e0bfff17 	ldw	r2,-4(fp)
 1815a64:	d8800015 	stw	r2,0(sp)
 1815a68:	01c010c4 	movi	r7,67
 1815a6c:	d1a00e04 	addi	r6,gp,-32712
 1815a70:	200b883a 	mov	r5,r4
 1815a74:	1809883a 	mov	r4,r3
 1815a78:	18219840 	call	1821984 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1815a7c:	e13ffd17 	ldw	r4,-12(fp)
 1815a80:	18188380 	call	1818838 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1815a84:	e0bffd17 	ldw	r2,-12(fp)
 1815a88:	10800343 	ldbu	r2,13(r2)
 1815a8c:	10800044 	addi	r2,r2,1
 1815a90:	1007883a 	mov	r3,r2
 1815a94:	e0bffd17 	ldw	r2,-12(fp)
 1815a98:	10c00345 	stb	r3,13(r2)
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 1815a9c:	e0bffd17 	ldw	r2,-12(fp)
 1815aa0:	10800343 	ldbu	r2,13(r2)
 1815aa4:	10803fcc 	andi	r2,r2,255
 1815aa8:	108001a8 	cmpgeui	r2,r2,6
 1815aac:	1000061e 	bne	r2,zero,1815ac8 <dhcp_select+0x220>
 1815ab0:	e0bffd17 	ldw	r2,-12(fp)
 1815ab4:	10800343 	ldbu	r2,13(r2)
 1815ab8:	10803fcc 	andi	r2,r2,255
 1815abc:	00c0fa04 	movi	r3,1000
 1815ac0:	1884983a 	sll	r2,r3,r2
 1815ac4:	00000106 	br	1815acc <dhcp_select+0x224>
 1815ac8:	00ba9804 	movi	r2,-5536
 1815acc:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1815ad0:	e0bffe8b 	ldhu	r2,-6(fp)
 1815ad4:	10807cc4 	addi	r2,r2,499
 1815ad8:	01407d04 	movi	r5,500
 1815adc:	1009883a 	mov	r4,r2
 1815ae0:	180ab240 	call	180ab24 <__divsi3>
 1815ae4:	1007883a 	mov	r3,r2
 1815ae8:	e0bffd17 	ldw	r2,-12(fp)
 1815aec:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1815af0:	e0bffe03 	ldbu	r2,-8(fp)
}
 1815af4:	e037883a 	mov	sp,fp
 1815af8:	dfc00117 	ldw	ra,4(sp)
 1815afc:	df000017 	ldw	fp,0(sp)
 1815b00:	dec00204 	addi	sp,sp,8
 1815b04:	f800283a 	ret

01815b08 <dhcp_coarse_tmr>:
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr()
{
 1815b08:	defffd04 	addi	sp,sp,-12
 1815b0c:	dfc00215 	stw	ra,8(sp)
 1815b10:	df000115 	stw	fp,4(sp)
 1815b14:	df000104 	addi	fp,sp,4
  struct netif *netif = netif_list;
 1815b18:	d0a7ef17 	ldw	r2,-24644(gp)
 1815b1c:	e0bfff15 	stw	r2,-4(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 1815b20:	00001b06 	br	1815b90 <dhcp_coarse_tmr+0x88>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
 1815b24:	e0bfff17 	ldw	r2,-4(fp)
 1815b28:	10800a17 	ldw	r2,40(r2)
 1815b2c:	10001526 	beq	r2,zero,1815b84 <dhcp_coarse_tmr+0x7c>
      /* timer is active (non zero), and triggers (zeroes) now? */
      if (netif->dhcp->t2_timeout-- == 1) {
 1815b30:	e0bfff17 	ldw	r2,-4(fp)
 1815b34:	10800a17 	ldw	r2,40(r2)
 1815b38:	10c0078b 	ldhu	r3,30(r2)
 1815b3c:	193fffc4 	addi	r4,r3,-1
 1815b40:	1100078d 	sth	r4,30(r2)
 1815b44:	18bfffcc 	andi	r2,r3,65535
 1815b48:	10800058 	cmpnei	r2,r2,1
 1815b4c:	1000031e 	bne	r2,zero,1815b5c <dhcp_coarse_tmr+0x54>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 1815b50:	e13fff17 	ldw	r4,-4(fp)
 1815b54:	1815e7c0 	call	1815e7c <dhcp_t2_timeout>
 1815b58:	00000a06 	br	1815b84 <dhcp_coarse_tmr+0x7c>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (netif->dhcp->t1_timeout-- == 1) {
 1815b5c:	e0bfff17 	ldw	r2,-4(fp)
 1815b60:	10800a17 	ldw	r2,40(r2)
 1815b64:	10c0070b 	ldhu	r3,28(r2)
 1815b68:	193fffc4 	addi	r4,r3,-1
 1815b6c:	1100070d 	sth	r4,28(r2)
 1815b70:	18bfffcc 	andi	r2,r3,65535
 1815b74:	10800058 	cmpnei	r2,r2,1
 1815b78:	1000021e 	bne	r2,zero,1815b84 <dhcp_coarse_tmr+0x7c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 1815b7c:	e13fff17 	ldw	r4,-4(fp)
 1815b80:	1815e000 	call	1815e00 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 1815b84:	e0bfff17 	ldw	r2,-4(fp)
 1815b88:	10800017 	ldw	r2,0(r2)
 1815b8c:	e0bfff15 	stw	r2,-4(fp)
dhcp_coarse_tmr()
{
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 1815b90:	e0bfff17 	ldw	r2,-4(fp)
 1815b94:	103fe31e 	bne	r2,zero,1815b24 <__ram_exceptions_end+0xff805834>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  }
}
 1815b98:	0001883a 	nop
 1815b9c:	e037883a 	mov	sp,fp
 1815ba0:	dfc00117 	ldw	ra,4(sp)
 1815ba4:	df000017 	ldw	fp,0(sp)
 1815ba8:	dec00204 	addi	sp,sp,8
 1815bac:	f800283a 	ret

01815bb0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr()
{
 1815bb0:	defffd04 	addi	sp,sp,-12
 1815bb4:	dfc00215 	stw	ra,8(sp)
 1815bb8:	df000115 	stw	fp,4(sp)
 1815bbc:	df000104 	addi	fp,sp,4
  struct netif *netif = netif_list;
 1815bc0:	d0a7ef17 	ldw	r2,-24644(gp)
 1815bc4:	e0bfff15 	stw	r2,-4(fp)
  /* loop through netif's */
  while (netif != NULL) {
 1815bc8:	00001f06 	br	1815c48 <dhcp_fine_tmr+0x98>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
 1815bcc:	e0bfff17 	ldw	r2,-4(fp)
 1815bd0:	10800a17 	ldw	r2,40(r2)
 1815bd4:	10001926 	beq	r2,zero,1815c3c <dhcp_fine_tmr+0x8c>
      /* timer is active (non zero), and is about to trigger now */      
      if (netif->dhcp->request_timeout > 1) {
 1815bd8:	e0bfff17 	ldw	r2,-4(fp)
 1815bdc:	10800a17 	ldw	r2,40(r2)
 1815be0:	1080068b 	ldhu	r2,26(r2)
 1815be4:	10bfffcc 	andi	r2,r2,65535
 1815be8:	108000b0 	cmpltui	r2,r2,2
 1815bec:	1000061e 	bne	r2,zero,1815c08 <dhcp_fine_tmr+0x58>
        netif->dhcp->request_timeout--;
 1815bf0:	e0bfff17 	ldw	r2,-4(fp)
 1815bf4:	10800a17 	ldw	r2,40(r2)
 1815bf8:	10c0068b 	ldhu	r3,26(r2)
 1815bfc:	18ffffc4 	addi	r3,r3,-1
 1815c00:	10c0068d 	sth	r3,26(r2)
 1815c04:	00000d06 	br	1815c3c <dhcp_fine_tmr+0x8c>
      }
      else if (netif->dhcp->request_timeout == 1) {
 1815c08:	e0bfff17 	ldw	r2,-4(fp)
 1815c0c:	10800a17 	ldw	r2,40(r2)
 1815c10:	1080068b 	ldhu	r2,26(r2)
 1815c14:	10bfffcc 	andi	r2,r2,65535
 1815c18:	10800058 	cmpnei	r2,r2,1
 1815c1c:	1000071e 	bne	r2,zero,1815c3c <dhcp_fine_tmr+0x8c>
        netif->dhcp->request_timeout--;
 1815c20:	e0bfff17 	ldw	r2,-4(fp)
 1815c24:	10800a17 	ldw	r2,40(r2)
 1815c28:	10c0068b 	ldhu	r3,26(r2)
 1815c2c:	18ffffc4 	addi	r3,r3,-1
 1815c30:	10c0068d 	sth	r3,26(r2)
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 1815c34:	e13fff17 	ldw	r4,-4(fp)
 1815c38:	1815c680 	call	1815c68 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 1815c3c:	e0bfff17 	ldw	r2,-4(fp)
 1815c40:	10800017 	ldw	r2,0(r2)
 1815c44:	e0bfff15 	stw	r2,-4(fp)
void
dhcp_fine_tmr()
{
  struct netif *netif = netif_list;
  /* loop through netif's */
  while (netif != NULL) {
 1815c48:	e0bfff17 	ldw	r2,-4(fp)
 1815c4c:	103fdf1e 	bne	r2,zero,1815bcc <__ram_exceptions_end+0xff8058dc>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  }
}
 1815c50:	0001883a 	nop
 1815c54:	e037883a 	mov	sp,fp
 1815c58:	dfc00117 	ldw	ra,4(sp)
 1815c5c:	df000017 	ldw	fp,0(sp)
 1815c60:	dec00204 	addi	sp,sp,8
 1815c64:	f800283a 	ret

01815c68 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 1815c68:	defffc04 	addi	sp,sp,-16
 1815c6c:	dfc00315 	stw	ra,12(sp)
 1815c70:	df000215 	stw	fp,8(sp)
 1815c74:	df000204 	addi	fp,sp,8
 1815c78:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815c7c:	e0bfff17 	ldw	r2,-4(fp)
 1815c80:	10800a17 	ldw	r2,40(r2)
 1815c84:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
 1815c88:	e0bffe17 	ldw	r2,-8(fp)
 1815c8c:	10800303 	ldbu	r2,12(r2)
 1815c90:	10803fcc 	andi	r2,r2,255
 1815c94:	10800320 	cmpeqi	r2,r2,12
 1815c98:	1000051e 	bne	r2,zero,1815cb0 <dhcp_timeout+0x48>
 1815c9c:	e0bffe17 	ldw	r2,-8(fp)
 1815ca0:	10800303 	ldbu	r2,12(r2)
 1815ca4:	10803fcc 	andi	r2,r2,255
 1815ca8:	10800198 	cmpnei	r2,r2,6
 1815cac:	1000031e 	bne	r2,zero,1815cbc <dhcp_timeout+0x54>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 1815cb0:	e13fff17 	ldw	r4,-4(fp)
 1815cb4:	18167f00 	call	18167f0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815cb8:	00004b06 	br	1815de8 <dhcp_timeout+0x180>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_REQUESTING) {
 1815cbc:	e0bffe17 	ldw	r2,-8(fp)
 1815cc0:	10800303 	ldbu	r2,12(r2)
 1815cc4:	10803fcc 	andi	r2,r2,255
 1815cc8:	10800058 	cmpnei	r2,r2,1
 1815ccc:	10000d1e 	bne	r2,zero,1815d04 <dhcp_timeout+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
 1815cd0:	e0bffe17 	ldw	r2,-8(fp)
 1815cd4:	10800343 	ldbu	r2,13(r2)
 1815cd8:	10803fcc 	andi	r2,r2,255
 1815cdc:	108001a8 	cmpgeui	r2,r2,6
 1815ce0:	1000031e 	bne	r2,zero,1815cf0 <dhcp_timeout+0x88>
      dhcp_select(netif);
 1815ce4:	e13fff17 	ldw	r4,-4(fp)
 1815ce8:	18158a80 	call	18158a8 <dhcp_select>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815cec:	00003e06 	br	1815de8 <dhcp_timeout+0x180>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
      dhcp_select(netif);
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
      dhcp_release(netif);
 1815cf0:	e13fff17 	ldw	r4,-4(fp)
 1815cf4:	18170800 	call	1817080 <dhcp_release>
      dhcp_discover(netif);
 1815cf8:	e13fff17 	ldw	r4,-4(fp)
 1815cfc:	18167f00 	call	18167f0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815d00:	00003906 	br	1815de8 <dhcp_timeout+0x180>
      dhcp_release(netif);
      dhcp_discover(netif);
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_CHECKING) {
 1815d04:	e0bffe17 	ldw	r2,-8(fp)
 1815d08:	10800303 	ldbu	r2,12(r2)
 1815d0c:	10803fcc 	andi	r2,r2,255
 1815d10:	10800218 	cmpnei	r2,r2,8
 1815d14:	10000b1e 	bne	r2,zero,1815d44 <dhcp_timeout+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
 1815d18:	e0bffe17 	ldw	r2,-8(fp)
 1815d1c:	10800343 	ldbu	r2,13(r2)
 1815d20:	10803fcc 	andi	r2,r2,255
 1815d24:	108000a8 	cmpgeui	r2,r2,2
 1815d28:	1000031e 	bne	r2,zero,1815d38 <dhcp_timeout+0xd0>
      dhcp_check(netif);
 1815d2c:	e13fff17 	ldw	r4,-4(fp)
 1815d30:	181571c0 	call	181571c <dhcp_check>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815d34:	00002c06 	br	1815de8 <dhcp_timeout+0x180>
      dhcp_check(netif);
    /* no ARP replies on the offered address,
       looks like the IP address is indeed free */
    } else {
      /* bind the interface to the offered address */
      dhcp_bind(netif);
 1815d38:	e13fff17 	ldw	r4,-4(fp)
 1815d3c:	18169900 	call	1816990 <dhcp_bind>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815d40:	00002906 	br	1815de8 <dhcp_timeout+0x180>
      dhcp_bind(netif);
    }
#endif /* DHCP_DOES_ARP_CHECK */
  }
  /* did not get response to renew request? */
  else if (dhcp->state == DHCP_RENEWING) {
 1815d44:	e0bffe17 	ldw	r2,-8(fp)
 1815d48:	10800303 	ldbu	r2,12(r2)
 1815d4c:	10803fcc 	andi	r2,r2,255
 1815d50:	10800158 	cmpnei	r2,r2,5
 1815d54:	1000031e 	bne	r2,zero,1815d64 <dhcp_timeout+0xfc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
 1815d58:	e13fff17 	ldw	r4,-4(fp)
 1815d5c:	1816c1c0 	call	1816c1c <dhcp_renew>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815d60:	00002106 	br	1815de8 <dhcp_timeout+0x180>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
  /* did not get response to rebind request? */
  } else if (dhcp->state == DHCP_REBINDING) {
 1815d64:	e0bffe17 	ldw	r2,-8(fp)
 1815d68:	10800303 	ldbu	r2,12(r2)
 1815d6c:	10803fcc 	andi	r2,r2,255
 1815d70:	10800118 	cmpnei	r2,r2,4
 1815d74:	10000d1e 	bne	r2,zero,1815dac <dhcp_timeout+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
 1815d78:	e0bffe17 	ldw	r2,-8(fp)
 1815d7c:	10800343 	ldbu	r2,13(r2)
 1815d80:	10803fcc 	andi	r2,r2,255
 1815d84:	10800268 	cmpgeui	r2,r2,9
 1815d88:	1000031e 	bne	r2,zero,1815d98 <dhcp_timeout+0x130>
      dhcp_rebind(netif);
 1815d8c:	e13fff17 	ldw	r4,-4(fp)
 1815d90:	1816d800 	call	1816d80 <dhcp_rebind>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815d94:	00001406 	br	1815de8 <dhcp_timeout+0x180>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
      dhcp_rebind(netif);
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
 1815d98:	e13fff17 	ldw	r4,-4(fp)
 1815d9c:	18170800 	call	1817080 <dhcp_release>
      dhcp_discover(netif);
 1815da0:	e13fff17 	ldw	r4,-4(fp)
 1815da4:	18167f00 	call	18167f0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815da8:	00000f06 	br	1815de8 <dhcp_timeout+0x180>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
      dhcp_discover(netif);
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
 1815dac:	e0bffe17 	ldw	r2,-8(fp)
 1815db0:	10800303 	ldbu	r2,12(r2)
 1815db4:	10803fcc 	andi	r2,r2,255
 1815db8:	108000d8 	cmpnei	r2,r2,3
 1815dbc:	10000a1e 	bne	r2,zero,1815de8 <dhcp_timeout+0x180>
    if (dhcp->tries < REBOOT_TRIES) {
 1815dc0:	e0bffe17 	ldw	r2,-8(fp)
 1815dc4:	10800343 	ldbu	r2,13(r2)
 1815dc8:	10803fcc 	andi	r2,r2,255
 1815dcc:	108000a8 	cmpgeui	r2,r2,2
 1815dd0:	1000031e 	bne	r2,zero,1815de0 <dhcp_timeout+0x178>
      dhcp_reboot(netif);
 1815dd4:	e13fff17 	ldw	r4,-4(fp)
 1815dd8:	1816edc0 	call	1816edc <dhcp_reboot>
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815ddc:	00000206 	br	1815de8 <dhcp_timeout+0x180>
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
    if (dhcp->tries < REBOOT_TRIES) {
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
 1815de0:	e13fff17 	ldw	r4,-4(fp)
 1815de4:	18167f00 	call	18167f0 <dhcp_discover>
    }
  }
}
 1815de8:	0001883a 	nop
 1815dec:	e037883a 	mov	sp,fp
 1815df0:	dfc00117 	ldw	ra,4(sp)
 1815df4:	df000017 	ldw	fp,0(sp)
 1815df8:	dec00204 	addi	sp,sp,8
 1815dfc:	f800283a 	ret

01815e00 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 1815e00:	defffc04 	addi	sp,sp,-16
 1815e04:	dfc00315 	stw	ra,12(sp)
 1815e08:	df000215 	stw	fp,8(sp)
 1815e0c:	df000204 	addi	fp,sp,8
 1815e10:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815e14:	e0bfff17 	ldw	r2,-4(fp)
 1815e18:	10800a17 	ldw	r2,40(r2)
 1815e1c:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 1815e20:	e0bffe17 	ldw	r2,-8(fp)
 1815e24:	10800303 	ldbu	r2,12(r2)
 1815e28:	10803fcc 	andi	r2,r2,255
 1815e2c:	10800060 	cmpeqi	r2,r2,1
 1815e30:	10000a1e 	bne	r2,zero,1815e5c <dhcp_t1_timeout+0x5c>
 1815e34:	e0bffe17 	ldw	r2,-8(fp)
 1815e38:	10800303 	ldbu	r2,12(r2)
 1815e3c:	10803fcc 	andi	r2,r2,255
 1815e40:	108002a0 	cmpeqi	r2,r2,10
 1815e44:	1000051e 	bne	r2,zero,1815e5c <dhcp_t1_timeout+0x5c>
      (dhcp->state == DHCP_RENEWING)) {
 1815e48:	e0bffe17 	ldw	r2,-8(fp)
 1815e4c:	10800303 	ldbu	r2,12(r2)
static void
dhcp_t1_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 1815e50:	10803fcc 	andi	r2,r2,255
 1815e54:	10800158 	cmpnei	r2,r2,5
 1815e58:	1000021e 	bne	r2,zero,1815e64 <dhcp_t1_timeout+0x64>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_RENEWING, not DHCP_BOUND */
    dhcp_renew(netif);
 1815e5c:	e13fff17 	ldw	r4,-4(fp)
 1815e60:	1816c1c0 	call	1816c1c <dhcp_renew>
  }
}
 1815e64:	0001883a 	nop
 1815e68:	e037883a 	mov	sp,fp
 1815e6c:	dfc00117 	ldw	ra,4(sp)
 1815e70:	df000017 	ldw	fp,0(sp)
 1815e74:	dec00204 	addi	sp,sp,8
 1815e78:	f800283a 	ret

01815e7c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 1815e7c:	defffc04 	addi	sp,sp,-16
 1815e80:	dfc00315 	stw	ra,12(sp)
 1815e84:	df000215 	stw	fp,8(sp)
 1815e88:	df000204 	addi	fp,sp,8
 1815e8c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815e90:	e0bfff17 	ldw	r2,-4(fp)
 1815e94:	10800a17 	ldw	r2,40(r2)
 1815e98:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 1815e9c:	e0bffe17 	ldw	r2,-8(fp)
 1815ea0:	10800303 	ldbu	r2,12(r2)
 1815ea4:	10803fcc 	andi	r2,r2,255
 1815ea8:	10800060 	cmpeqi	r2,r2,1
 1815eac:	10000a1e 	bne	r2,zero,1815ed8 <dhcp_t2_timeout+0x5c>
 1815eb0:	e0bffe17 	ldw	r2,-8(fp)
 1815eb4:	10800303 	ldbu	r2,12(r2)
 1815eb8:	10803fcc 	andi	r2,r2,255
 1815ebc:	108002a0 	cmpeqi	r2,r2,10
 1815ec0:	1000051e 	bne	r2,zero,1815ed8 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_RENEWING)) {
 1815ec4:	e0bffe17 	ldw	r2,-8(fp)
 1815ec8:	10800303 	ldbu	r2,12(r2)
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 1815ecc:	10803fcc 	andi	r2,r2,255
 1815ed0:	10800158 	cmpnei	r2,r2,5
 1815ed4:	1000021e 	bne	r2,zero,1815ee0 <dhcp_t2_timeout+0x64>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_REBINDING, not DHCP_BOUND */
    dhcp_rebind(netif);
 1815ed8:	e13fff17 	ldw	r4,-4(fp)
 1815edc:	1816d800 	call	1816d80 <dhcp_rebind>
  }
}
 1815ee0:	0001883a 	nop
 1815ee4:	e037883a 	mov	sp,fp
 1815ee8:	dfc00117 	ldw	ra,4(sp)
 1815eec:	df000017 	ldw	fp,0(sp)
 1815ef0:	dec00204 	addi	sp,sp,8
 1815ef4:	f800283a 	ret

01815ef8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 1815ef8:	defffd04 	addi	sp,sp,-12
 1815efc:	df000215 	stw	fp,8(sp)
 1815f00:	df000204 	addi	fp,sp,8
 1815f04:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815f08:	e0bfff17 	ldw	r2,-4(fp)
 1815f0c:	10800a17 	ldw	r2,40(r2)
 1815f10:	e0bffe15 	stw	r2,-8(fp)
#if LWIP_DNS
  u8_t n;
#endif /* LWIP_DNS */

  /* clear options we might not get from the ACK */
  ip_addr_set_zero(&dhcp->offered_sn_mask);
 1815f14:	e0bffe17 	ldw	r2,-8(fp)
 1815f18:	10000a15 	stw	zero,40(r2)
  ip_addr_set_zero(&dhcp->offered_gw_addr);
 1815f1c:	e0bffe17 	ldw	r2,-8(fp)
 1815f20:	10000b15 	stw	zero,44(r2)
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 1815f24:	00806134 	movhi	r2,388
 1815f28:	109e6804 	addi	r2,r2,31136
 1815f2c:	108000c3 	ldbu	r2,3(r2)
 1815f30:	10803fcc 	andi	r2,r2,255
 1815f34:	10000526 	beq	r2,zero,1815f4c <dhcp_handle_ack+0x54>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 1815f38:	00806134 	movhi	r2,388
 1815f3c:	109e6b04 	addi	r2,r2,31148
 1815f40:	10c00317 	ldw	r3,12(r2)
 1815f44:	e0bffe17 	ldw	r2,-8(fp)
 1815f48:	10c00c15 	stw	r3,48(r2)
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 1815f4c:	00806134 	movhi	r2,388
 1815f50:	109e6804 	addi	r2,r2,31136
 1815f54:	10800103 	ldbu	r2,4(r2)
 1815f58:	10803fcc 	andi	r2,r2,255
 1815f5c:	10000626 	beq	r2,zero,1815f78 <dhcp_handle_ack+0x80>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 1815f60:	00806134 	movhi	r2,388
 1815f64:	109e6b04 	addi	r2,r2,31148
 1815f68:	10c00417 	ldw	r3,16(r2)
 1815f6c:	e0bffe17 	ldw	r2,-8(fp)
 1815f70:	10c00d15 	stw	r3,52(r2)
 1815f74:	00000506 	br	1815f8c <dhcp_handle_ack+0x94>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 1815f78:	e0bffe17 	ldw	r2,-8(fp)
 1815f7c:	10800c17 	ldw	r2,48(r2)
 1815f80:	1006d07a 	srli	r3,r2,1
 1815f84:	e0bffe17 	ldw	r2,-8(fp)
 1815f88:	10c00d15 	stw	r3,52(r2)
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 1815f8c:	00806134 	movhi	r2,388
 1815f90:	109e6804 	addi	r2,r2,31136
 1815f94:	10800143 	ldbu	r2,5(r2)
 1815f98:	10803fcc 	andi	r2,r2,255
 1815f9c:	10000626 	beq	r2,zero,1815fb8 <dhcp_handle_ack+0xc0>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 1815fa0:	00806134 	movhi	r2,388
 1815fa4:	109e6b04 	addi	r2,r2,31148
 1815fa8:	10c00517 	ldw	r3,20(r2)
 1815fac:	e0bffe17 	ldw	r2,-8(fp)
 1815fb0:	10c00e15 	stw	r3,56(r2)
 1815fb4:	00000406 	br	1815fc8 <dhcp_handle_ack+0xd0>
  } else {
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
 1815fb8:	e0bffe17 	ldw	r2,-8(fp)
 1815fbc:	10c00c17 	ldw	r3,48(r2)
 1815fc0:	e0bffe17 	ldw	r2,-8(fp)
 1815fc4:	10c00e15 	stw	r3,56(r2)
  }

  /* (y)our internet address */
  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 1815fc8:	e0bffe17 	ldw	r2,-8(fp)
 1815fcc:	10800217 	ldw	r2,8(r2)
 1815fd0:	10c00403 	ldbu	r3,16(r2)
 1815fd4:	11000443 	ldbu	r4,17(r2)
 1815fd8:	2008923a 	slli	r4,r4,8
 1815fdc:	20c6b03a 	or	r3,r4,r3
 1815fe0:	11000483 	ldbu	r4,18(r2)
 1815fe4:	2008943a 	slli	r4,r4,16
 1815fe8:	20c6b03a 	or	r3,r4,r3
 1815fec:	108004c3 	ldbu	r2,19(r2)
 1815ff0:	1004963a 	slli	r2,r2,24
 1815ff4:	10c4b03a 	or	r2,r2,r3
 1815ff8:	1007883a 	mov	r3,r2
 1815ffc:	e0bffe17 	ldw	r2,-8(fp)
 1816000:	10c00915 	stw	r3,36(r2)
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 1816004:	00806134 	movhi	r2,388
 1816008:	109e6804 	addi	r2,r2,31136
 181600c:	10800183 	ldbu	r2,6(r2)
 1816010:	10803fcc 	andi	r2,r2,255
 1816014:	10001b26 	beq	r2,zero,1816084 <dhcp_handle_ack+0x18c>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 1816018:	00806134 	movhi	r2,388
 181601c:	109e6b04 	addi	r2,r2,31148
 1816020:	10800617 	ldw	r2,24(r2)
 1816024:	1006d63a 	srli	r3,r2,24
 1816028:	00806134 	movhi	r2,388
 181602c:	109e6b04 	addi	r2,r2,31148
 1816030:	10800617 	ldw	r2,24(r2)
 1816034:	1004d23a 	srli	r2,r2,8
 1816038:	10bfc00c 	andi	r2,r2,65280
 181603c:	1886b03a 	or	r3,r3,r2
 1816040:	00806134 	movhi	r2,388
 1816044:	109e6b04 	addi	r2,r2,31148
 1816048:	10800617 	ldw	r2,24(r2)
 181604c:	10bfc00c 	andi	r2,r2,65280
 1816050:	1004923a 	slli	r2,r2,8
 1816054:	1886b03a 	or	r3,r3,r2
 1816058:	00806134 	movhi	r2,388
 181605c:	109e6b04 	addi	r2,r2,31148
 1816060:	10800617 	ldw	r2,24(r2)
 1816064:	1004963a 	slli	r2,r2,24
 1816068:	1886b03a 	or	r3,r3,r2
 181606c:	e0bffe17 	ldw	r2,-8(fp)
 1816070:	10c00a15 	stw	r3,40(r2)
    dhcp->subnet_mask_given = 1;
 1816074:	e0bffe17 	ldw	r2,-8(fp)
 1816078:	00c00044 	movi	r3,1
 181607c:	10c00385 	stb	r3,14(r2)
 1816080:	00000206 	br	181608c <dhcp_handle_ack+0x194>
  } else {
    dhcp->subnet_mask_given = 0;
 1816084:	e0bffe17 	ldw	r2,-8(fp)
 1816088:	10000385 	stb	zero,14(r2)
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 181608c:	00806134 	movhi	r2,388
 1816090:	109e6804 	addi	r2,r2,31136
 1816094:	108001c3 	ldbu	r2,7(r2)
 1816098:	10803fcc 	andi	r2,r2,255
 181609c:	10001726 	beq	r2,zero,18160fc <dhcp_handle_ack+0x204>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 18160a0:	00806134 	movhi	r2,388
 18160a4:	109e6b04 	addi	r2,r2,31148
 18160a8:	10800717 	ldw	r2,28(r2)
 18160ac:	1006d63a 	srli	r3,r2,24
 18160b0:	00806134 	movhi	r2,388
 18160b4:	109e6b04 	addi	r2,r2,31148
 18160b8:	10800717 	ldw	r2,28(r2)
 18160bc:	1004d23a 	srli	r2,r2,8
 18160c0:	10bfc00c 	andi	r2,r2,65280
 18160c4:	1886b03a 	or	r3,r3,r2
 18160c8:	00806134 	movhi	r2,388
 18160cc:	109e6b04 	addi	r2,r2,31148
 18160d0:	10800717 	ldw	r2,28(r2)
 18160d4:	10bfc00c 	andi	r2,r2,65280
 18160d8:	1004923a 	slli	r2,r2,8
 18160dc:	1886b03a 	or	r3,r3,r2
 18160e0:	00806134 	movhi	r2,388
 18160e4:	109e6b04 	addi	r2,r2,31148
 18160e8:	10800717 	ldw	r2,28(r2)
 18160ec:	1004963a 	slli	r2,r2,24
 18160f0:	1886b03a 	or	r3,r3,r2
 18160f4:	e0bffe17 	ldw	r2,-8(fp)
 18160f8:	10c00b15 	stw	r3,44(r2)
    ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
    n++;
  }
#endif /* LWIP_DNS */
}
 18160fc:	0001883a 	nop
 1816100:	e037883a 	mov	sp,fp
 1816104:	df000017 	ldw	fp,0(sp)
 1816108:	dec00104 	addi	sp,sp,4
 181610c:	f800283a 	ret

01816110 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
 1816110:	defffc04 	addi	sp,sp,-16
 1816114:	dfc00315 	stw	ra,12(sp)
 1816118:	df000215 	stw	fp,8(sp)
 181611c:	df000204 	addi	fp,sp,8
 1816120:	e13ffe15 	stw	r4,-8(fp)
 1816124:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 1816128:	01800f04 	movi	r6,60
 181612c:	000b883a 	mov	r5,zero
 1816130:	e13fff17 	ldw	r4,-4(fp)
 1816134:	18060e00 	call	18060e0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  netif->dhcp = dhcp;
 1816138:	e0bffe17 	ldw	r2,-8(fp)
 181613c:	e0ffff17 	ldw	r3,-4(fp)
 1816140:	10c00a15 	stw	r3,40(r2)
}
 1816144:	0001883a 	nop
 1816148:	e037883a 	mov	sp,fp
 181614c:	dfc00117 	ldw	ra,4(sp)
 1816150:	df000017 	ldw	fp,0(sp)
 1816154:	dec00204 	addi	sp,sp,8
 1816158:	f800283a 	ret

0181615c <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
 181615c:	defffd04 	addi	sp,sp,-12
 1816160:	dfc00215 	stw	ra,8(sp)
 1816164:	df000115 	stw	fp,4(sp)
 1816168:	df000104 	addi	fp,sp,4
 181616c:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);

  if (netif->dhcp != NULL) {
 1816170:	e0bfff17 	ldw	r2,-4(fp)
 1816174:	10800a17 	ldw	r2,40(r2)
 1816178:	10000626 	beq	r2,zero,1816194 <dhcp_cleanup+0x38>
    mem_free(netif->dhcp);
 181617c:	e0bfff17 	ldw	r2,-4(fp)
 1816180:	10800a17 	ldw	r2,40(r2)
 1816184:	1009883a 	mov	r4,r2
 1816188:	183c5140 	call	183c514 <free>
    netif->dhcp = NULL;
 181618c:	e0bfff17 	ldw	r2,-4(fp)
 1816190:	10000a15 	stw	zero,40(r2)
  }
}
 1816194:	0001883a 	nop
 1816198:	e037883a 	mov	sp,fp
 181619c:	dfc00117 	ldw	ra,4(sp)
 18161a0:	df000017 	ldw	fp,0(sp)
 18161a4:	dec00204 	addi	sp,sp,8
 18161a8:	f800283a 	ret

018161ac <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 18161ac:	defffb04 	addi	sp,sp,-20
 18161b0:	dfc00415 	stw	ra,16(sp)
 18161b4:	df000315 	stw	fp,12(sp)
 18161b8:	df000304 	addi	fp,sp,12
 18161bc:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp;
  err_t result = ERR_OK;
 18161c0:	e03ffe05 	stb	zero,-8(fp)

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 18161c4:	e0bfff17 	ldw	r2,-4(fp)
 18161c8:	1000091e 	bne	r2,zero,18161f0 <dhcp_start+0x44>
 18161cc:	01c06134 	movhi	r7,388
 18161d0:	39c32004 	addi	r7,r7,3200
 18161d4:	0180a144 	movi	r6,645
 18161d8:	01406134 	movhi	r5,388
 18161dc:	29432604 	addi	r5,r5,3224
 18161e0:	01006134 	movhi	r4,388
 18161e4:	21032a04 	addi	r4,r4,3240
 18161e8:	1800b240 	call	1800b24 <printf>
 18161ec:	003fff06 	br	18161ec <__ram_exceptions_end+0xff805efc>
  dhcp = netif->dhcp;
 18161f0:	e0bfff17 	ldw	r2,-4(fp)
 18161f4:	10800a17 	ldw	r2,40(r2)
 18161f8:	e0bffd15 	stw	r2,-12(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Remove the flag that says this netif is handled by DHCP,
     it is set when we succeeded starting. */
  netif->flags &= ~NETIF_FLAG_DHCP;
 18161fc:	e0bfff17 	ldw	r2,-4(fp)
 1816200:	10c00e43 	ldbu	r3,57(r2)
 1816204:	00bffdc4 	movi	r2,-9
 1816208:	1884703a 	and	r2,r3,r2
 181620c:	1007883a 	mov	r3,r2
 1816210:	e0bfff17 	ldw	r2,-4(fp)
 1816214:	10c00e45 	stb	r3,57(r2)

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
 1816218:	e0bfff17 	ldw	r2,-4(fp)
 181621c:	10800e43 	ldbu	r2,57(r2)
 1816220:	10803fcc 	andi	r2,r2,255
 1816224:	1080080c 	andi	r2,r2,32
 1816228:	1000021e 	bne	r2,zero,1816234 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
 181622c:	00bffc84 	movi	r2,-14
 1816230:	00005406 	br	1816384 <dhcp_start+0x1d8>
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 1816234:	e0bfff17 	ldw	r2,-4(fp)
 1816238:	10800c0b 	ldhu	r2,48(r2)
 181623c:	10bfffcc 	andi	r2,r2,65535
 1816240:	10809028 	cmpgeui	r2,r2,576
 1816244:	1000021e 	bne	r2,zero,1816250 <dhcp_start+0xa4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 1816248:	00bfffc4 	movi	r2,-1
 181624c:	00004d06 	br	1816384 <dhcp_start+0x1d8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 1816250:	e0bffd17 	ldw	r2,-12(fp)
 1816254:	10000b1e 	bne	r2,zero,1816284 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 1816258:	01000f04 	movi	r4,60
 181625c:	183c5000 	call	183c500 <malloc>
 1816260:	e0bffd15 	stw	r2,-12(fp)
    if (dhcp == NULL) {
 1816264:	e0bffd17 	ldw	r2,-12(fp)
 1816268:	1000021e 	bne	r2,zero,1816274 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 181626c:	00bfffc4 	movi	r2,-1
 1816270:	00004406 	br	1816384 <dhcp_start+0x1d8>
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
 1816274:	e0bfff17 	ldw	r2,-4(fp)
 1816278:	e0fffd17 	ldw	r3,-12(fp)
 181627c:	10c00a15 	stw	r3,40(r2)
 1816280:	00000706 	br	18162a0 <dhcp_start+0xf4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
 1816284:	e0bffd17 	ldw	r2,-12(fp)
 1816288:	10800117 	ldw	r2,4(r2)
 181628c:	10000426 	beq	r2,zero,18162a0 <dhcp_start+0xf4>
      udp_remove(dhcp->pcb);
 1816290:	e0bffd17 	ldw	r2,-12(fp)
 1816294:	10800117 	ldw	r2,4(r2)
 1816298:	1009883a 	mov	r4,r2
 181629c:	18221300 	call	1822130 <udp_remove>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  }
    
  /* clear the previous IP assignment */
  dhcp_clear_assignment(netif);
 18162a0:	e13fff17 	ldw	r4,-4(fp)
 18162a4:	18156700 	call	1815670 <dhcp_clear_assignment>
  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 18162a8:	01800f04 	movi	r6,60
 18162ac:	000b883a 	mov	r5,zero
 18162b0:	e13ffd17 	ldw	r4,-12(fp)
 18162b4:	18060e00 	call	18060e0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
 18162b8:	18221cc0 	call	18221cc <udp_new>
 18162bc:	1007883a 	mov	r3,r2
 18162c0:	e0bffd17 	ldw	r2,-12(fp)
 18162c4:	10c00115 	stw	r3,4(r2)
  if (dhcp->pcb == NULL) {
 18162c8:	e0bffd17 	ldw	r2,-12(fp)
 18162cc:	10800117 	ldw	r2,4(r2)
 18162d0:	1000021e 	bne	r2,zero,18162dc <dhcp_start+0x130>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
 18162d4:	00bfffc4 	movi	r2,-1
 18162d8:	00002a06 	br	1816384 <dhcp_start+0x1d8>
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
 18162dc:	e0bffd17 	ldw	r2,-12(fp)
 18162e0:	10800117 	ldw	r2,4(r2)
 18162e4:	e0fffd17 	ldw	r3,-12(fp)
 18162e8:	18c00117 	ldw	r3,4(r3)
 18162ec:	18c00203 	ldbu	r3,8(r3)
 18162f0:	18c00814 	ori	r3,r3,32
 18162f4:	10c00205 	stb	r3,8(r2)
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 18162f8:	e0bffd17 	ldw	r2,-12(fp)
 18162fc:	10800117 	ldw	r2,4(r2)
 1816300:	01801104 	movi	r6,68
 1816304:	d1600d04 	addi	r5,gp,-32716
 1816308:	1009883a 	mov	r4,r2
 181630c:	1821e380 	call	1821e38 <udp_bind>
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 1816310:	e0bffd17 	ldw	r2,-12(fp)
 1816314:	10800117 	ldw	r2,4(r2)
 1816318:	018010c4 	movi	r6,67
 181631c:	d1600d04 	addi	r5,gp,-32716
 1816320:	1009883a 	mov	r4,r2
 1816324:	1821f940 	call	1821f94 <udp_connect>
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
 1816328:	e0bffd17 	ldw	r2,-12(fp)
 181632c:	10800117 	ldw	r2,4(r2)
 1816330:	e1bfff17 	ldw	r6,-4(fp)
 1816334:	01406074 	movhi	r5,385
 1816338:	295fd704 	addi	r5,r5,32604
 181633c:	1009883a 	mov	r4,r2
 1816340:	18220ec0 	call	18220ec <udp_recv>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 1816344:	e13fff17 	ldw	r4,-4(fp)
 1816348:	18167f00 	call	18167f0 <dhcp_discover>
 181634c:	e0bffe05 	stb	r2,-8(fp)
  if (result != ERR_OK) {
 1816350:	e0bffe07 	ldb	r2,-8(fp)
 1816354:	10000426 	beq	r2,zero,1816368 <dhcp_start+0x1bc>
    /* free resources allocated above */
    dhcp_stop(netif);
 1816358:	e13fff17 	ldw	r4,-4(fp)
 181635c:	18172240 	call	1817224 <dhcp_stop>
    return ERR_MEM;
 1816360:	00bfffc4 	movi	r2,-1
 1816364:	00000706 	br	1816384 <dhcp_start+0x1d8>
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
 1816368:	e0bfff17 	ldw	r2,-4(fp)
 181636c:	10800e43 	ldbu	r2,57(r2)
 1816370:	10800214 	ori	r2,r2,8
 1816374:	1007883a 	mov	r3,r2
 1816378:	e0bfff17 	ldw	r2,-4(fp)
 181637c:	10c00e45 	stb	r3,57(r2)
  return result;
 1816380:	e0bffe03 	ldbu	r2,-8(fp)
}
 1816384:	e037883a 	mov	sp,fp
 1816388:	dfc00117 	ldw	ra,4(sp)
 181638c:	df000017 	ldw	fp,0(sp)
 1816390:	dec00204 	addi	sp,sp,8
 1816394:	f800283a 	ret

01816398 <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
 1816398:	deffeb04 	addi	sp,sp,-84
 181639c:	dfc01415 	stw	ra,80(sp)
 18163a0:	df001315 	stw	fp,76(sp)
 18163a4:	df001304 	addi	fp,sp,76
 18163a8:	e13fff15 	stw	r4,-4(fp)
  struct dhcp dhcp;
  err_t result = ERR_OK;
 18163ac:	e03fef05 	stb	zero,-68(fp)
  struct udp_pcb *pcb;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 18163b0:	e0bfff17 	ldw	r2,-4(fp)
 18163b4:	1000091e 	bne	r2,zero,18163dc <dhcp_inform+0x44>
 18163b8:	01c06134 	movhi	r7,388
 18163bc:	39c32004 	addi	r7,r7,3200
 18163c0:	0180b6c4 	movi	r6,731
 18163c4:	01406134 	movhi	r5,388
 18163c8:	29432604 	addi	r5,r5,3224
 18163cc:	01006134 	movhi	r4,388
 18163d0:	21032a04 	addi	r4,r4,3240
 18163d4:	1800b240 	call	1800b24 <printf>
 18163d8:	003fff06 	br	18163d8 <__ram_exceptions_end+0xff8060e8>

  memset(&dhcp, 0, sizeof(struct dhcp));
 18163dc:	e0bff004 	addi	r2,fp,-64
 18163e0:	01800f04 	movi	r6,60
 18163e4:	000b883a 	mov	r5,zero
 18163e8:	1009883a 	mov	r4,r2
 18163ec:	18060e00 	call	18060e0 <memset>
  dhcp_set_state(&dhcp, DHCP_INFORM);
 18163f0:	e0bff004 	addi	r2,fp,-64
 18163f4:	01400204 	movi	r5,8
 18163f8:	1009883a 	mov	r4,r2
 18163fc:	18172dc0 	call	18172dc <dhcp_set_state>

  if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
 1816400:	e0bfff17 	ldw	r2,-4(fp)
 1816404:	10800a17 	ldw	r2,40(r2)
 1816408:	10000926 	beq	r2,zero,1816430 <dhcp_inform+0x98>
 181640c:	e0bfff17 	ldw	r2,-4(fp)
 1816410:	10800a17 	ldw	r2,40(r2)
 1816414:	10800117 	ldw	r2,4(r2)
 1816418:	10000526 	beq	r2,zero,1816430 <dhcp_inform+0x98>
    /* re-use existing pcb */
    pcb = netif->dhcp->pcb;
 181641c:	e0bfff17 	ldw	r2,-4(fp)
 1816420:	10800a17 	ldw	r2,40(r2)
 1816424:	10800117 	ldw	r2,4(r2)
 1816428:	e0bfee15 	stw	r2,-72(fp)
 181642c:	00001006 	br	1816470 <dhcp_inform+0xd8>
  } else {
    pcb = udp_new();
 1816430:	18221cc0 	call	18221cc <udp_new>
 1816434:	e0bfee15 	stw	r2,-72(fp)
    if (pcb == NULL) {
 1816438:	e0bfee17 	ldw	r2,-72(fp)
 181643c:	10003b26 	beq	r2,zero,181652c <dhcp_inform+0x194>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
      return;
    }
    dhcp.pcb = pcb;
 1816440:	e0bfee17 	ldw	r2,-72(fp)
 1816444:	e0bff115 	stw	r2,-60(fp)
    ip_set_option(dhcp.pcb, SOF_BROADCAST);
 1816448:	e0bff117 	ldw	r2,-60(fp)
 181644c:	e0fff117 	ldw	r3,-60(fp)
 1816450:	18c00203 	ldbu	r3,8(r3)
 1816454:	18c00814 	ori	r3,r3,32
 1816458:	10c00205 	stb	r3,8(r2)
    udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 181645c:	e0bff117 	ldw	r2,-60(fp)
 1816460:	01801104 	movi	r6,68
 1816464:	d1600d04 	addi	r5,gp,-32716
 1816468:	1009883a 	mov	r4,r2
 181646c:	1821e380 	call	1821e38 <udp_bind>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
  }
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
 1816470:	e0bff004 	addi	r2,fp,-64
 1816474:	01800204 	movi	r6,8
 1816478:	100b883a 	mov	r5,r2
 181647c:	e13fff17 	ldw	r4,-4(fp)
 1816480:	18182b40 	call	18182b4 <dhcp_create_msg>
 1816484:	e0bfef05 	stb	r2,-68(fp)
  if (result == ERR_OK) {
 1816488:	e0bfef07 	ldb	r2,-68(fp)
 181648c:	1000211e 	bne	r2,zero,1816514 <dhcp_inform+0x17c>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 1816490:	e0bff004 	addi	r2,fp,-64
 1816494:	01800084 	movi	r6,2
 1816498:	01400e44 	movi	r5,57
 181649c:	1009883a 	mov	r4,r2
 18164a0:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
 18164a4:	e0bfff17 	ldw	r2,-4(fp)
 18164a8:	10800c0b 	ldhu	r2,48(r2)
 18164ac:	10ffffcc 	andi	r3,r2,65535
 18164b0:	e0bff004 	addi	r2,fp,-64
 18164b4:	180b883a 	mov	r5,r3
 18164b8:	1009883a 	mov	r4,r2
 18164bc:	18174340 	call	1817434 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
 18164c0:	e0bff004 	addi	r2,fp,-64
 18164c4:	1009883a 	mov	r4,r2
 18164c8:	18188bc0 	call	18188bc <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
 18164cc:	e0fff417 	ldw	r3,-48(fp)
 18164d0:	e0bff60b 	ldhu	r2,-40(fp)
 18164d4:	10803c04 	addi	r2,r2,240
 18164d8:	10bfffcc 	andi	r2,r2,65535
 18164dc:	100b883a 	mov	r5,r2
 18164e0:	1809883a 	mov	r4,r3
 18164e4:	1819f740 	call	1819f74 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
    udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 18164e8:	e0fff417 	ldw	r3,-48(fp)
 18164ec:	e0bfff17 	ldw	r2,-4(fp)
 18164f0:	d8800015 	stw	r2,0(sp)
 18164f4:	01c010c4 	movi	r7,67
 18164f8:	d1a00e04 	addi	r6,gp,-32712
 18164fc:	180b883a 	mov	r5,r3
 1816500:	e13fee17 	ldw	r4,-72(fp)
 1816504:	18219840 	call	1821984 <udp_sendto_if>
    dhcp_delete_msg(&dhcp);
 1816508:	e0bff004 	addi	r2,fp,-64
 181650c:	1009883a 	mov	r4,r2
 1816510:	18188380 	call	1818838 <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  if (dhcp.pcb != NULL) {
 1816514:	e0bff117 	ldw	r2,-60(fp)
 1816518:	10000526 	beq	r2,zero,1816530 <dhcp_inform+0x198>
    /* otherwise, the existing pcb was used */
    udp_remove(dhcp.pcb);
 181651c:	e0bff117 	ldw	r2,-60(fp)
 1816520:	1009883a 	mov	r4,r2
 1816524:	18221300 	call	1822130 <udp_remove>
 1816528:	00000106 	br	1816530 <dhcp_inform+0x198>
    pcb = netif->dhcp->pcb;
  } else {
    pcb = udp_new();
    if (pcb == NULL) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
      return;
 181652c:	0001883a 	nop

  if (dhcp.pcb != NULL) {
    /* otherwise, the existing pcb was used */
    udp_remove(dhcp.pcb);
  }
}
 1816530:	e037883a 	mov	sp,fp
 1816534:	dfc00117 	ldw	ra,4(sp)
 1816538:	df000017 	ldw	fp,0(sp)
 181653c:	dec00204 	addi	sp,sp,8
 1816540:	f800283a 	ret

01816544 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 1816544:	defffc04 	addi	sp,sp,-16
 1816548:	dfc00315 	stw	ra,12(sp)
 181654c:	df000215 	stw	fp,8(sp)
 1816550:	df000204 	addi	fp,sp,8
 1816554:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816558:	e0bfff17 	ldw	r2,-4(fp)
 181655c:	10800a17 	ldw	r2,40(r2)
 1816560:	e0bffe15 	stw	r2,-8(fp)
  if (!dhcp)
 1816564:	e0bffe17 	ldw	r2,-8(fp)
 1816568:	10001826 	beq	r2,zero,18165cc <dhcp_network_changed+0x88>
    return;
  switch (dhcp->state) {
 181656c:	e0bffe17 	ldw	r2,-8(fp)
 1816570:	10800303 	ldbu	r2,12(r2)
 1816574:	10803fcc 	andi	r2,r2,255
 1816578:	10c00188 	cmpgei	r3,r2,6
 181657c:	1800041e 	bne	r3,zero,1816590 <dhcp_network_changed+0x4c>
 1816580:	10c000c8 	cmpgei	r3,r2,3
 1816584:	1800041e 	bne	r3,zero,1816598 <dhcp_network_changed+0x54>
 1816588:	10001226 	beq	r2,zero,18165d4 <dhcp_network_changed+0x90>
 181658c:	00000906 	br	18165b4 <dhcp_network_changed+0x70>
 1816590:	108002a0 	cmpeqi	r2,r2,10
 1816594:	10000726 	beq	r2,zero,18165b4 <dhcp_network_changed+0x70>
  case DHCP_REBINDING:
  case DHCP_RENEWING:
  case DHCP_BOUND:
  case DHCP_REBOOTING:
    netif_set_down(netif);
 1816598:	e13fff17 	ldw	r4,-4(fp)
 181659c:	181970c0 	call	181970c <netif_set_down>
    dhcp->tries = 0;
 18165a0:	e0bffe17 	ldw	r2,-8(fp)
 18165a4:	10000345 	stb	zero,13(r2)
    dhcp_reboot(netif);
 18165a8:	e13fff17 	ldw	r4,-4(fp)
 18165ac:	1816edc0 	call	1816edc <dhcp_reboot>
    break;
 18165b0:	00000906 	br	18165d8 <dhcp_network_changed+0x94>
  case DHCP_OFF:
    /* stay off */
    break;
  default:
    dhcp->tries = 0;
 18165b4:	e0bffe17 	ldw	r2,-8(fp)
 18165b8:	10000345 	stb	zero,13(r2)
    if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
 18165bc:	e13fff17 	ldw	r4,-4(fp)
 18165c0:	18167f00 	call	18167f0 <dhcp_discover>
    break;
 18165c4:	0001883a 	nop
 18165c8:	00000306 	br	18165d8 <dhcp_network_changed+0x94>
void
dhcp_network_changed(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  if (!dhcp)
    return;
 18165cc:	0001883a 	nop
 18165d0:	00000106 	br	18165d8 <dhcp_network_changed+0x94>
    dhcp->tries = 0;
    dhcp_reboot(netif);
    break;
  case DHCP_OFF:
    /* stay off */
    break;
 18165d4:	0001883a 	nop
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
    break;
  }
}
 18165d8:	e037883a 	mov	sp,fp
 18165dc:	dfc00117 	ldw	ra,4(sp)
 18165e0:	df000017 	ldw	fp,0(sp)
 18165e4:	dec00204 	addi	sp,sp,8
 18165e8:	f800283a 	ret

018165ec <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
 18165ec:	defffc04 	addi	sp,sp,-16
 18165f0:	dfc00315 	stw	ra,12(sp)
 18165f4:	df000215 	stw	fp,8(sp)
 18165f8:	df000204 	addi	fp,sp,8
 18165fc:	e13ffe15 	stw	r4,-8(fp)
 1816600:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 1816604:	e0bffe17 	ldw	r2,-8(fp)
 1816608:	1000091e 	bne	r2,zero,1816630 <dhcp_arp_reply+0x44>
 181660c:	01c06134 	movhi	r7,388
 1816610:	39c32004 	addi	r7,r7,3200
 1816614:	0180cc84 	movi	r6,818
 1816618:	01406134 	movhi	r5,388
 181661c:	29432604 	addi	r5,r5,3224
 1816620:	01006134 	movhi	r4,388
 1816624:	21032a04 	addi	r4,r4,3240
 1816628:	1800b240 	call	1800b24 <printf>
 181662c:	003fff06 	br	181662c <__ram_exceptions_end+0xff80633c>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
 1816630:	e0bffe17 	ldw	r2,-8(fp)
 1816634:	10800a17 	ldw	r2,40(r2)
 1816638:	10000e26 	beq	r2,zero,1816674 <dhcp_arp_reply+0x88>
 181663c:	e0bffe17 	ldw	r2,-8(fp)
 1816640:	10800a17 	ldw	r2,40(r2)
 1816644:	10800303 	ldbu	r2,12(r2)
 1816648:	10803fcc 	andi	r2,r2,255
 181664c:	10800218 	cmpnei	r2,r2,8
 1816650:	1000081e 	bne	r2,zero,1816674 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
 1816654:	e0bfff17 	ldw	r2,-4(fp)
 1816658:	10c00017 	ldw	r3,0(r2)
 181665c:	e0bffe17 	ldw	r2,-8(fp)
 1816660:	10800a17 	ldw	r2,40(r2)
 1816664:	10800917 	ldw	r2,36(r2)
 1816668:	1880021e 	bne	r3,r2,1816674 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 181666c:	e13ffe17 	ldw	r4,-8(fp)
 1816670:	181668c0 	call	181668c <dhcp_decline>
    }
  }
}
 1816674:	0001883a 	nop
 1816678:	e037883a 	mov	sp,fp
 181667c:	dfc00117 	ldw	ra,4(sp)
 1816680:	df000017 	ldw	fp,0(sp)
 1816684:	dec00204 	addi	sp,sp,8
 1816688:	f800283a 	ret

0181668c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 181668c:	defffa04 	addi	sp,sp,-24
 1816690:	dfc00515 	stw	ra,20(sp)
 1816694:	df000415 	stw	fp,16(sp)
 1816698:	df000404 	addi	fp,sp,16
 181669c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 18166a0:	e0bfff17 	ldw	r2,-4(fp)
 18166a4:	10800a17 	ldw	r2,40(r2)
 18166a8:	e0bffd15 	stw	r2,-12(fp)
  err_t result = ERR_OK;
 18166ac:	e03ffe05 	stb	zero,-8(fp)
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
 18166b0:	01400304 	movi	r5,12
 18166b4:	e13ffd17 	ldw	r4,-12(fp)
 18166b8:	18172dc0 	call	18172dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 18166bc:	01800104 	movi	r6,4
 18166c0:	e17ffd17 	ldw	r5,-12(fp)
 18166c4:	e13fff17 	ldw	r4,-4(fp)
 18166c8:	18182b40 	call	18182b4 <dhcp_create_msg>
 18166cc:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 18166d0:	e0bffe07 	ldb	r2,-8(fp)
 18166d4:	1000301e 	bne	r2,zero,1816798 <dhcp_decline+0x10c>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 18166d8:	01800104 	movi	r6,4
 18166dc:	01400c84 	movi	r5,50
 18166e0:	e13ffd17 	ldw	r4,-12(fp)
 18166e4:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 18166e8:	e0bffd17 	ldw	r2,-12(fp)
 18166ec:	10800917 	ldw	r2,36(r2)
 18166f0:	1006d63a 	srli	r3,r2,24
 18166f4:	e0bffd17 	ldw	r2,-12(fp)
 18166f8:	10800917 	ldw	r2,36(r2)
 18166fc:	1004d23a 	srli	r2,r2,8
 1816700:	10bfc00c 	andi	r2,r2,65280
 1816704:	1886b03a 	or	r3,r3,r2
 1816708:	e0bffd17 	ldw	r2,-12(fp)
 181670c:	10800917 	ldw	r2,36(r2)
 1816710:	10bfc00c 	andi	r2,r2,65280
 1816714:	1004923a 	slli	r2,r2,8
 1816718:	1886b03a 	or	r3,r3,r2
 181671c:	e0bffd17 	ldw	r2,-12(fp)
 1816720:	10800917 	ldw	r2,36(r2)
 1816724:	1004963a 	slli	r2,r2,24
 1816728:	1884b03a 	or	r2,r3,r2
 181672c:	100b883a 	mov	r5,r2
 1816730:	e13ffd17 	ldw	r4,-12(fp)
 1816734:	18174cc0 	call	18174cc <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 1816738:	e13ffd17 	ldw	r4,-12(fp)
 181673c:	18188bc0 	call	18188bc <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1816740:	e0bffd17 	ldw	r2,-12(fp)
 1816744:	10c00417 	ldw	r3,16(r2)
 1816748:	e0bffd17 	ldw	r2,-12(fp)
 181674c:	1080060b 	ldhu	r2,24(r2)
 1816750:	10803c04 	addi	r2,r2,240
 1816754:	10bfffcc 	andi	r2,r2,65535
 1816758:	100b883a 	mov	r5,r2
 181675c:	1809883a 	mov	r4,r3
 1816760:	1819f740 	call	1819f74 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 1816764:	e0bffd17 	ldw	r2,-12(fp)
 1816768:	10c00117 	ldw	r3,4(r2)
 181676c:	e0bffd17 	ldw	r2,-12(fp)
 1816770:	11000417 	ldw	r4,16(r2)
 1816774:	e0bfff17 	ldw	r2,-4(fp)
 1816778:	d8800015 	stw	r2,0(sp)
 181677c:	01c010c4 	movi	r7,67
 1816780:	d1a00e04 	addi	r6,gp,-32712
 1816784:	200b883a 	mov	r5,r4
 1816788:	1809883a 	mov	r4,r3
 181678c:	18219840 	call	1821984 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1816790:	e13ffd17 	ldw	r4,-12(fp)
 1816794:	18188380 	call	1818838 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1816798:	e0bffd17 	ldw	r2,-12(fp)
 181679c:	10800343 	ldbu	r2,13(r2)
 18167a0:	10800044 	addi	r2,r2,1
 18167a4:	1007883a 	mov	r3,r2
 18167a8:	e0bffd17 	ldw	r2,-12(fp)
 18167ac:	10c00345 	stb	r3,13(r2)
  msecs = 10*1000;
 18167b0:	0089c404 	movi	r2,10000
 18167b4:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 18167b8:	e0bffe8b 	ldhu	r2,-6(fp)
 18167bc:	10807cc4 	addi	r2,r2,499
 18167c0:	01407d04 	movi	r5,500
 18167c4:	1009883a 	mov	r4,r2
 18167c8:	180ab240 	call	180ab24 <__divsi3>
 18167cc:	1007883a 	mov	r3,r2
 18167d0:	e0bffd17 	ldw	r2,-12(fp)
 18167d4:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 18167d8:	e0bffe03 	ldbu	r2,-8(fp)
}
 18167dc:	e037883a 	mov	sp,fp
 18167e0:	dfc00117 	ldw	ra,4(sp)
 18167e4:	df000017 	ldw	fp,0(sp)
 18167e8:	dec00204 	addi	sp,sp,8
 18167ec:	f800283a 	ret

018167f0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 18167f0:	defffa04 	addi	sp,sp,-24
 18167f4:	dfc00515 	stw	ra,20(sp)
 18167f8:	df000415 	stw	fp,16(sp)
 18167fc:	df000404 	addi	fp,sp,16
 1816800:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816804:	e0bfff17 	ldw	r2,-4(fp)
 1816808:	10800a17 	ldw	r2,40(r2)
 181680c:	e0bffd15 	stw	r2,-12(fp)
  err_t result = ERR_OK;
 1816810:	e03ffe05 	stb	zero,-8(fp)
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
 1816814:	e0bffd17 	ldw	r2,-12(fp)
 1816818:	10000915 	stw	zero,36(r2)
  dhcp_set_state(dhcp, DHCP_SELECTING);
 181681c:	01400184 	movi	r5,6
 1816820:	e13ffd17 	ldw	r4,-12(fp)
 1816824:	18172dc0 	call	18172dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 1816828:	01800044 	movi	r6,1
 181682c:	e17ffd17 	ldw	r5,-12(fp)
 1816830:	e13fff17 	ldw	r4,-4(fp)
 1816834:	18182b40 	call	18182b4 <dhcp_create_msg>
 1816838:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 181683c:	e0bffe07 	ldb	r2,-8(fp)
 1816840:	1000321e 	bne	r2,zero,181690c <dhcp_discover+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 1816844:	01800084 	movi	r6,2
 1816848:	01400e44 	movi	r5,57
 181684c:	e13ffd17 	ldw	r4,-12(fp)
 1816850:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 1816854:	e0bfff17 	ldw	r2,-4(fp)
 1816858:	10800c0b 	ldhu	r2,48(r2)
 181685c:	10bfffcc 	andi	r2,r2,65535
 1816860:	100b883a 	mov	r5,r2
 1816864:	e13ffd17 	ldw	r4,-12(fp)
 1816868:	18174340 	call	1817434 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
 181686c:	01800104 	movi	r6,4
 1816870:	01400dc4 	movi	r5,55
 1816874:	e13ffd17 	ldw	r4,-12(fp)
 1816878:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
 181687c:	01400044 	movi	r5,1
 1816880:	e13ffd17 	ldw	r4,-12(fp)
 1816884:	18173d40 	call	18173d4 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
 1816888:	014000c4 	movi	r5,3
 181688c:	e13ffd17 	ldw	r4,-12(fp)
 1816890:	18173d40 	call	18173d4 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
 1816894:	01400704 	movi	r5,28
 1816898:	e13ffd17 	ldw	r4,-12(fp)
 181689c:	18173d40 	call	18173d4 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
 18168a0:	01400184 	movi	r5,6
 18168a4:	e13ffd17 	ldw	r4,-12(fp)
 18168a8:	18173d40 	call	18173d4 <dhcp_option_byte>

    dhcp_option_trailer(dhcp);
 18168ac:	e13ffd17 	ldw	r4,-12(fp)
 18168b0:	18188bc0 	call	18188bc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 18168b4:	e0bffd17 	ldw	r2,-12(fp)
 18168b8:	10c00417 	ldw	r3,16(r2)
 18168bc:	e0bffd17 	ldw	r2,-12(fp)
 18168c0:	1080060b 	ldhu	r2,24(r2)
 18168c4:	10803c04 	addi	r2,r2,240
 18168c8:	10bfffcc 	andi	r2,r2,65535
 18168cc:	100b883a 	mov	r5,r2
 18168d0:	1809883a 	mov	r4,r3
 18168d4:	1819f740 	call	1819f74 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 18168d8:	e0bffd17 	ldw	r2,-12(fp)
 18168dc:	10c00117 	ldw	r3,4(r2)
 18168e0:	e0bffd17 	ldw	r2,-12(fp)
 18168e4:	11000417 	ldw	r4,16(r2)
 18168e8:	e0bfff17 	ldw	r2,-4(fp)
 18168ec:	d8800015 	stw	r2,0(sp)
 18168f0:	01c010c4 	movi	r7,67
 18168f4:	d1a00e04 	addi	r6,gp,-32712
 18168f8:	200b883a 	mov	r5,r4
 18168fc:	1809883a 	mov	r4,r3
 1816900:	18219840 	call	1821984 <udp_sendto_if>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 1816904:	e13ffd17 	ldw	r4,-12(fp)
 1816908:	18188380 	call	1818838 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 181690c:	e0bffd17 	ldw	r2,-12(fp)
 1816910:	10800343 	ldbu	r2,13(r2)
 1816914:	10800044 	addi	r2,r2,1
 1816918:	1007883a 	mov	r3,r2
 181691c:	e0bffd17 	ldw	r2,-12(fp)
 1816920:	10c00345 	stb	r3,13(r2)
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 1816924:	e0bffd17 	ldw	r2,-12(fp)
 1816928:	10800343 	ldbu	r2,13(r2)
 181692c:	10803fcc 	andi	r2,r2,255
 1816930:	108001a8 	cmpgeui	r2,r2,6
 1816934:	1000061e 	bne	r2,zero,1816950 <dhcp_discover+0x160>
 1816938:	e0bffd17 	ldw	r2,-12(fp)
 181693c:	10800343 	ldbu	r2,13(r2)
 1816940:	10803fcc 	andi	r2,r2,255
 1816944:	00c0fa04 	movi	r3,1000
 1816948:	1884983a 	sll	r2,r3,r2
 181694c:	00000106 	br	1816954 <dhcp_discover+0x164>
 1816950:	00ba9804 	movi	r2,-5536
 1816954:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1816958:	e0bffe8b 	ldhu	r2,-6(fp)
 181695c:	10807cc4 	addi	r2,r2,499
 1816960:	01407d04 	movi	r5,500
 1816964:	1009883a 	mov	r4,r2
 1816968:	180ab240 	call	180ab24 <__divsi3>
 181696c:	1007883a 	mov	r3,r2
 1816970:	e0bffd17 	ldw	r2,-12(fp)
 1816974:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1816978:	e0bffe03 	ldbu	r2,-8(fp)
}
 181697c:	e037883a 	mov	sp,fp
 1816980:	dfc00117 	ldw	ra,4(sp)
 1816984:	df000017 	ldw	fp,0(sp)
 1816988:	dec00204 	addi	sp,sp,8
 181698c:	f800283a 	ret

01816990 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 1816990:	defff804 	addi	sp,sp,-32
 1816994:	dfc00715 	stw	ra,28(sp)
 1816998:	df000615 	stw	fp,24(sp)
 181699c:	df000604 	addi	fp,sp,24
 18169a0:	e13fff15 	stw	r4,-4(fp)
  u32_t timeout;
  struct dhcp *dhcp;
  ip_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 18169a4:	e0bfff17 	ldw	r2,-4(fp)
 18169a8:	1000091e 	bne	r2,zero,18169d0 <dhcp_bind+0x40>
 18169ac:	01c06134 	movhi	r7,388
 18169b0:	39c32004 	addi	r7,r7,3200
 18169b4:	0180ec44 	movi	r6,945
 18169b8:	01406134 	movhi	r5,388
 18169bc:	29433604 	addi	r5,r5,3288
 18169c0:	01006134 	movhi	r4,388
 18169c4:	21032a04 	addi	r4,r4,3240
 18169c8:	1800b240 	call	1800b24 <printf>
 18169cc:	003fff06 	br	18169cc <__ram_exceptions_end+0xff8066dc>
  dhcp = netif->dhcp;
 18169d0:	e0bfff17 	ldw	r2,-4(fp)
 18169d4:	10800a17 	ldw	r2,40(r2)
 18169d8:	e0bffb15 	stw	r2,-20(fp)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 18169dc:	e0bffb17 	ldw	r2,-20(fp)
 18169e0:	1000091e 	bne	r2,zero,1816a08 <dhcp_bind+0x78>
 18169e4:	01c06134 	movhi	r7,388
 18169e8:	39c32004 	addi	r7,r7,3200
 18169ec:	0180ecc4 	movi	r6,947
 18169f0:	01406134 	movhi	r5,388
 18169f4:	29433d04 	addi	r5,r5,3316
 18169f8:	01006134 	movhi	r4,388
 18169fc:	21032a04 	addi	r4,r4,3240
 1816a00:	1800b240 	call	1800b24 <printf>
 1816a04:	003fff06 	br	1816a04 <__ram_exceptions_end+0xff806714>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 1816a08:	e0bffb17 	ldw	r2,-20(fp)
 1816a0c:	10800d17 	ldw	r2,52(r2)
 1816a10:	10bfffe0 	cmpeqi	r2,r2,-1
 1816a14:	1000171e 	bne	r2,zero,1816a74 <dhcp_bind+0xe4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 1816a18:	e0bffb17 	ldw	r2,-20(fp)
 1816a1c:	10800d17 	ldw	r2,52(r2)
 1816a20:	10800784 	addi	r2,r2,30
 1816a24:	01400f04 	movi	r5,60
 1816a28:	1009883a 	mov	r4,r2
 1816a2c:	180ac1c0 	call	180ac1c <__udivsi3>
 1816a30:	e0bffa15 	stw	r2,-24(fp)
    if(timeout > 0xffff) {
 1816a34:	e0bffa17 	ldw	r2,-24(fp)
 1816a38:	00ffffd4 	movui	r3,65535
 1816a3c:	1880022e 	bgeu	r3,r2,1816a48 <dhcp_bind+0xb8>
      timeout = 0xffff;
 1816a40:	00bfffd4 	movui	r2,65535
 1816a44:	e0bffa15 	stw	r2,-24(fp)
    }
    dhcp->t1_timeout = (u16_t)timeout;
 1816a48:	e0bffa17 	ldw	r2,-24(fp)
 1816a4c:	1007883a 	mov	r3,r2
 1816a50:	e0bffb17 	ldw	r2,-20(fp)
 1816a54:	10c0070d 	sth	r3,28(r2)
    if (dhcp->t1_timeout == 0) {
 1816a58:	e0bffb17 	ldw	r2,-20(fp)
 1816a5c:	1080070b 	ldhu	r2,28(r2)
 1816a60:	10bfffcc 	andi	r2,r2,65535
 1816a64:	1000031e 	bne	r2,zero,1816a74 <dhcp_bind+0xe4>
      dhcp->t1_timeout = 1;
 1816a68:	e0bffb17 	ldw	r2,-20(fp)
 1816a6c:	00c00044 	movi	r3,1
 1816a70:	10c0070d 	sth	r3,28(r2)
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 1816a74:	e0bffb17 	ldw	r2,-20(fp)
 1816a78:	10800e17 	ldw	r2,56(r2)
 1816a7c:	10bfffe0 	cmpeqi	r2,r2,-1
 1816a80:	1000171e 	bne	r2,zero,1816ae0 <dhcp_bind+0x150>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 1816a84:	e0bffb17 	ldw	r2,-20(fp)
 1816a88:	10800e17 	ldw	r2,56(r2)
 1816a8c:	10800784 	addi	r2,r2,30
 1816a90:	01400f04 	movi	r5,60
 1816a94:	1009883a 	mov	r4,r2
 1816a98:	180ac1c0 	call	180ac1c <__udivsi3>
 1816a9c:	e0bffa15 	stw	r2,-24(fp)
    if(timeout > 0xffff) {
 1816aa0:	e0bffa17 	ldw	r2,-24(fp)
 1816aa4:	00ffffd4 	movui	r3,65535
 1816aa8:	1880022e 	bgeu	r3,r2,1816ab4 <dhcp_bind+0x124>
      timeout = 0xffff;
 1816aac:	00bfffd4 	movui	r2,65535
 1816ab0:	e0bffa15 	stw	r2,-24(fp)
    }
    dhcp->t2_timeout = (u16_t)timeout;
 1816ab4:	e0bffa17 	ldw	r2,-24(fp)
 1816ab8:	1007883a 	mov	r3,r2
 1816abc:	e0bffb17 	ldw	r2,-20(fp)
 1816ac0:	10c0078d 	sth	r3,30(r2)
    if (dhcp->t2_timeout == 0) {
 1816ac4:	e0bffb17 	ldw	r2,-20(fp)
 1816ac8:	1080078b 	ldhu	r2,30(r2)
 1816acc:	10bfffcc 	andi	r2,r2,65535
 1816ad0:	1000031e 	bne	r2,zero,1816ae0 <dhcp_bind+0x150>
      dhcp->t2_timeout = 1;
 1816ad4:	e0bffb17 	ldw	r2,-20(fp)
 1816ad8:	00c00044 	movi	r3,1
 1816adc:	10c0078d 	sth	r3,30(r2)
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 1816ae0:	e0bffb17 	ldw	r2,-20(fp)
 1816ae4:	10c0070b 	ldhu	r3,28(r2)
 1816ae8:	e0bffb17 	ldw	r2,-20(fp)
 1816aec:	1080078b 	ldhu	r2,30(r2)
 1816af0:	18ffffcc 	andi	r3,r3,65535
 1816af4:	10bfffcc 	andi	r2,r2,65535
 1816af8:	18800636 	bltu	r3,r2,1816b14 <dhcp_bind+0x184>
 1816afc:	e0bffb17 	ldw	r2,-20(fp)
 1816b00:	1080078b 	ldhu	r2,30(r2)
 1816b04:	10bfffcc 	andi	r2,r2,65535
 1816b08:	10000226 	beq	r2,zero,1816b14 <dhcp_bind+0x184>
    dhcp->t1_timeout = 0;
 1816b0c:	e0bffb17 	ldw	r2,-20(fp)
 1816b10:	1000070d 	sth	zero,28(r2)
  }

  if (dhcp->subnet_mask_given) {
 1816b14:	e0bffb17 	ldw	r2,-20(fp)
 1816b18:	10800383 	ldbu	r2,14(r2)
 1816b1c:	10803fcc 	andi	r2,r2,255
 1816b20:	10000426 	beq	r2,zero,1816b34 <dhcp_bind+0x1a4>
    /* copy offered network mask */
    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
 1816b24:	e0bffb17 	ldw	r2,-20(fp)
 1816b28:	10800a17 	ldw	r2,40(r2)
 1816b2c:	e0bffd15 	stw	r2,-12(fp)
 1816b30:	00001506 	br	1816b88 <dhcp_bind+0x1f8>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 1816b34:	e0bffb17 	ldw	r2,-20(fp)
 1816b38:	10800904 	addi	r2,r2,36
 1816b3c:	10800003 	ldbu	r2,0(r2)
 1816b40:	e0bffc05 	stb	r2,-16(fp)
    if (first_octet <= 127) {
 1816b44:	e0bffc03 	ldbu	r2,-16(fp)
 1816b48:	10803fcc 	andi	r2,r2,255
 1816b4c:	1080201c 	xori	r2,r2,128
 1816b50:	10bfe004 	addi	r2,r2,-128
 1816b54:	10000316 	blt	r2,zero,1816b64 <dhcp_bind+0x1d4>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 1816b58:	00803fc4 	movi	r2,255
 1816b5c:	e0bffd15 	stw	r2,-12(fp)
 1816b60:	00000906 	br	1816b88 <dhcp_bind+0x1f8>
    } else if (first_octet >= 192) {
 1816b64:	e0bffc03 	ldbu	r2,-16(fp)
 1816b68:	10803030 	cmpltui	r2,r2,192
 1816b6c:	1000041e 	bne	r2,zero,1816b80 <dhcp_bind+0x1f0>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 1816b70:	00804034 	movhi	r2,256
 1816b74:	10bfffc4 	addi	r2,r2,-1
 1816b78:	e0bffd15 	stw	r2,-12(fp)
 1816b7c:	00000206 	br	1816b88 <dhcp_bind+0x1f8>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 1816b80:	00bfffd4 	movui	r2,65535
 1816b84:	e0bffd15 	stw	r2,-12(fp)
    }
  }

  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
 1816b88:	e0bffb17 	ldw	r2,-20(fp)
 1816b8c:	10800b17 	ldw	r2,44(r2)
 1816b90:	e0bffe15 	stw	r2,-8(fp)
  /* gateway address not given? */
  if (ip_addr_isany(&gw_addr)) {
 1816b94:	e0bffe17 	ldw	r2,-8(fp)
 1816b98:	1000081e 	bne	r2,zero,1816bbc <dhcp_bind+0x22c>
    /* copy network address */
    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 1816b9c:	e0bffb17 	ldw	r2,-20(fp)
 1816ba0:	10c00917 	ldw	r3,36(r2)
 1816ba4:	e0bffd17 	ldw	r2,-12(fp)
 1816ba8:	1884703a 	and	r2,r3,r2
 1816bac:	e0bffe15 	stw	r2,-8(fp)
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 1816bb0:	e0bffe17 	ldw	r2,-8(fp)
 1816bb4:	10804034 	orhi	r2,r2,256
 1816bb8:	e0bffe15 	stw	r2,-8(fp)
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
 1816bbc:	e0bffb17 	ldw	r2,-20(fp)
 1816bc0:	10800904 	addi	r2,r2,36
 1816bc4:	100b883a 	mov	r5,r2
 1816bc8:	e13fff17 	ldw	r4,-4(fp)
 1816bcc:	18194780 	call	1819478 <netif_set_ipaddr>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&sn_mask)));
  netif_set_netmask(netif, &sn_mask);
 1816bd0:	e0bffd04 	addi	r2,fp,-12
 1816bd4:	100b883a 	mov	r5,r2
 1816bd8:	e13fff17 	ldw	r4,-4(fp)
 1816bdc:	18195e80 	call	18195e8 <netif_set_netmask>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&gw_addr)));
  netif_set_gw(netif, &gw_addr);
 1816be0:	e0bffe04 	addi	r2,fp,-8
 1816be4:	100b883a 	mov	r5,r2
 1816be8:	e13fff17 	ldw	r4,-4(fp)
 1816bec:	18195a00 	call	18195a0 <netif_set_gw>
  /* bring the interface up */
  netif_set_up(netif);
 1816bf0:	e13fff17 	ldw	r4,-4(fp)
 1816bf4:	181965c0 	call	181965c <netif_set_up>
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
 1816bf8:	01400284 	movi	r5,10
 1816bfc:	e13ffb17 	ldw	r4,-20(fp)
 1816c00:	18172dc0 	call	18172dc <dhcp_set_state>
}
 1816c04:	0001883a 	nop
 1816c08:	e037883a 	mov	sp,fp
 1816c0c:	dfc00117 	ldw	ra,4(sp)
 1816c10:	df000017 	ldw	fp,0(sp)
 1816c14:	dec00204 	addi	sp,sp,8
 1816c18:	f800283a 	ret

01816c1c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 1816c1c:	defffa04 	addi	sp,sp,-24
 1816c20:	dfc00515 	stw	ra,20(sp)
 1816c24:	df000415 	stw	fp,16(sp)
 1816c28:	df000404 	addi	fp,sp,16
 1816c2c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816c30:	e0bfff17 	ldw	r2,-4(fp)
 1816c34:	10800a17 	ldw	r2,40(r2)
 1816c38:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_RENEWING);
 1816c3c:	01400144 	movi	r5,5
 1816c40:	e13ffd17 	ldw	r4,-12(fp)
 1816c44:	18172dc0 	call	18172dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 1816c48:	018000c4 	movi	r6,3
 1816c4c:	e17ffd17 	ldw	r5,-12(fp)
 1816c50:	e13fff17 	ldw	r4,-4(fp)
 1816c54:	18182b40 	call	18182b4 <dhcp_create_msg>
 1816c58:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 1816c5c:	e0bffe07 	ldb	r2,-8(fp)
 1816c60:	1000271e 	bne	r2,zero,1816d00 <dhcp_renew+0xe4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 1816c64:	01800084 	movi	r6,2
 1816c68:	01400e44 	movi	r5,57
 1816c6c:	e13ffd17 	ldw	r4,-12(fp)
 1816c70:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 1816c74:	e0bfff17 	ldw	r2,-4(fp)
 1816c78:	10800c0b 	ldhu	r2,48(r2)
 1816c7c:	10bfffcc 	andi	r2,r2,65535
 1816c80:	100b883a 	mov	r5,r2
 1816c84:	e13ffd17 	ldw	r4,-12(fp)
 1816c88:	18174340 	call	1817434 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
 1816c8c:	e17fff17 	ldw	r5,-4(fp)
 1816c90:	e13ffd17 	ldw	r4,-12(fp)
 1816c94:	18175d80 	call	18175d8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 1816c98:	e13ffd17 	ldw	r4,-12(fp)
 1816c9c:	18188bc0 	call	18188bc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1816ca0:	e0bffd17 	ldw	r2,-12(fp)
 1816ca4:	10c00417 	ldw	r3,16(r2)
 1816ca8:	e0bffd17 	ldw	r2,-12(fp)
 1816cac:	1080060b 	ldhu	r2,24(r2)
 1816cb0:	10803c04 	addi	r2,r2,240
 1816cb4:	10bfffcc 	andi	r2,r2,65535
 1816cb8:	100b883a 	mov	r5,r2
 1816cbc:	1809883a 	mov	r4,r3
 1816cc0:	1819f740 	call	1819f74 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 1816cc4:	e0bffd17 	ldw	r2,-12(fp)
 1816cc8:	10c00117 	ldw	r3,4(r2)
 1816ccc:	e0bffd17 	ldw	r2,-12(fp)
 1816cd0:	11000417 	ldw	r4,16(r2)
 1816cd4:	e0bffd17 	ldw	r2,-12(fp)
 1816cd8:	11400804 	addi	r5,r2,32
 1816cdc:	e0bfff17 	ldw	r2,-4(fp)
 1816ce0:	d8800015 	stw	r2,0(sp)
 1816ce4:	01c010c4 	movi	r7,67
 1816ce8:	280d883a 	mov	r6,r5
 1816cec:	200b883a 	mov	r5,r4
 1816cf0:	1809883a 	mov	r4,r3
 1816cf4:	18219840 	call	1821984 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1816cf8:	e13ffd17 	ldw	r4,-12(fp)
 1816cfc:	18188380 	call	1818838 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1816d00:	e0bffd17 	ldw	r2,-12(fp)
 1816d04:	10800343 	ldbu	r2,13(r2)
 1816d08:	10800044 	addi	r2,r2,1
 1816d0c:	1007883a 	mov	r3,r2
 1816d10:	e0bffd17 	ldw	r2,-12(fp)
 1816d14:	10c00345 	stb	r3,13(r2)
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 1816d18:	e0bffd17 	ldw	r2,-12(fp)
 1816d1c:	10800343 	ldbu	r2,13(r2)
 1816d20:	10803fcc 	andi	r2,r2,255
 1816d24:	108002a8 	cmpgeui	r2,r2,10
 1816d28:	1000051e 	bne	r2,zero,1816d40 <dhcp_renew+0x124>
 1816d2c:	e0bffd17 	ldw	r2,-12(fp)
 1816d30:	10800343 	ldbu	r2,13(r2)
 1816d34:	10803fcc 	andi	r2,r2,255
 1816d38:	1081f424 	muli	r2,r2,2000
 1816d3c:	00000106 	br	1816d44 <dhcp_renew+0x128>
 1816d40:	00938804 	movi	r2,20000
 1816d44:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1816d48:	e0bffe8b 	ldhu	r2,-6(fp)
 1816d4c:	10807cc4 	addi	r2,r2,499
 1816d50:	01407d04 	movi	r5,500
 1816d54:	1009883a 	mov	r4,r2
 1816d58:	180ab240 	call	180ab24 <__divsi3>
 1816d5c:	1007883a 	mov	r3,r2
 1816d60:	e0bffd17 	ldw	r2,-12(fp)
 1816d64:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1816d68:	e0bffe03 	ldbu	r2,-8(fp)
}
 1816d6c:	e037883a 	mov	sp,fp
 1816d70:	dfc00117 	ldw	ra,4(sp)
 1816d74:	df000017 	ldw	fp,0(sp)
 1816d78:	dec00204 	addi	sp,sp,8
 1816d7c:	f800283a 	ret

01816d80 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 1816d80:	defffa04 	addi	sp,sp,-24
 1816d84:	dfc00515 	stw	ra,20(sp)
 1816d88:	df000415 	stw	fp,16(sp)
 1816d8c:	df000404 	addi	fp,sp,16
 1816d90:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816d94:	e0bfff17 	ldw	r2,-4(fp)
 1816d98:	10800a17 	ldw	r2,40(r2)
 1816d9c:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_REBINDING);
 1816da0:	01400104 	movi	r5,4
 1816da4:	e13ffd17 	ldw	r4,-12(fp)
 1816da8:	18172dc0 	call	18172dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 1816dac:	018000c4 	movi	r6,3
 1816db0:	e17ffd17 	ldw	r5,-12(fp)
 1816db4:	e13fff17 	ldw	r4,-4(fp)
 1816db8:	18182b40 	call	18182b4 <dhcp_create_msg>
 1816dbc:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 1816dc0:	e0bffe07 	ldb	r2,-8(fp)
 1816dc4:	1000251e 	bne	r2,zero,1816e5c <dhcp_rebind+0xdc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 1816dc8:	01800084 	movi	r6,2
 1816dcc:	01400e44 	movi	r5,57
 1816dd0:	e13ffd17 	ldw	r4,-12(fp)
 1816dd4:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 1816dd8:	e0bfff17 	ldw	r2,-4(fp)
 1816ddc:	10800c0b 	ldhu	r2,48(r2)
 1816de0:	10bfffcc 	andi	r2,r2,65535
 1816de4:	100b883a 	mov	r5,r2
 1816de8:	e13ffd17 	ldw	r4,-12(fp)
 1816dec:	18174340 	call	1817434 <dhcp_option_short>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
 1816df0:	e17fff17 	ldw	r5,-4(fp)
 1816df4:	e13ffd17 	ldw	r4,-12(fp)
 1816df8:	18175d80 	call	18175d8 <dhcp_option_hostname>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

    dhcp_option_trailer(dhcp);
 1816dfc:	e13ffd17 	ldw	r4,-12(fp)
 1816e00:	18188bc0 	call	18188bc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1816e04:	e0bffd17 	ldw	r2,-12(fp)
 1816e08:	10c00417 	ldw	r3,16(r2)
 1816e0c:	e0bffd17 	ldw	r2,-12(fp)
 1816e10:	1080060b 	ldhu	r2,24(r2)
 1816e14:	10803c04 	addi	r2,r2,240
 1816e18:	10bfffcc 	andi	r2,r2,65535
 1816e1c:	100b883a 	mov	r5,r2
 1816e20:	1809883a 	mov	r4,r3
 1816e24:	1819f740 	call	1819f74 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 1816e28:	e0bffd17 	ldw	r2,-12(fp)
 1816e2c:	10c00117 	ldw	r3,4(r2)
 1816e30:	e0bffd17 	ldw	r2,-12(fp)
 1816e34:	11000417 	ldw	r4,16(r2)
 1816e38:	e0bfff17 	ldw	r2,-4(fp)
 1816e3c:	d8800015 	stw	r2,0(sp)
 1816e40:	01c010c4 	movi	r7,67
 1816e44:	d1a00e04 	addi	r6,gp,-32712
 1816e48:	200b883a 	mov	r5,r4
 1816e4c:	1809883a 	mov	r4,r3
 1816e50:	18219840 	call	1821984 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1816e54:	e13ffd17 	ldw	r4,-12(fp)
 1816e58:	18188380 	call	1818838 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1816e5c:	e0bffd17 	ldw	r2,-12(fp)
 1816e60:	10800343 	ldbu	r2,13(r2)
 1816e64:	10800044 	addi	r2,r2,1
 1816e68:	1007883a 	mov	r3,r2
 1816e6c:	e0bffd17 	ldw	r2,-12(fp)
 1816e70:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 1816e74:	e0bffd17 	ldw	r2,-12(fp)
 1816e78:	10800343 	ldbu	r2,13(r2)
 1816e7c:	10803fcc 	andi	r2,r2,255
 1816e80:	108002a8 	cmpgeui	r2,r2,10
 1816e84:	1000051e 	bne	r2,zero,1816e9c <dhcp_rebind+0x11c>
 1816e88:	e0bffd17 	ldw	r2,-12(fp)
 1816e8c:	10800343 	ldbu	r2,13(r2)
 1816e90:	10803fcc 	andi	r2,r2,255
 1816e94:	1080fa24 	muli	r2,r2,1000
 1816e98:	00000106 	br	1816ea0 <dhcp_rebind+0x120>
 1816e9c:	0089c404 	movi	r2,10000
 1816ea0:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1816ea4:	e0bffe8b 	ldhu	r2,-6(fp)
 1816ea8:	10807cc4 	addi	r2,r2,499
 1816eac:	01407d04 	movi	r5,500
 1816eb0:	1009883a 	mov	r4,r2
 1816eb4:	180ab240 	call	180ab24 <__divsi3>
 1816eb8:	1007883a 	mov	r3,r2
 1816ebc:	e0bffd17 	ldw	r2,-12(fp)
 1816ec0:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1816ec4:	e0bffe03 	ldbu	r2,-8(fp)
}
 1816ec8:	e037883a 	mov	sp,fp
 1816ecc:	dfc00117 	ldw	ra,4(sp)
 1816ed0:	df000017 	ldw	fp,0(sp)
 1816ed4:	dec00204 	addi	sp,sp,8
 1816ed8:	f800283a 	ret

01816edc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 1816edc:	defffa04 	addi	sp,sp,-24
 1816ee0:	dfc00515 	stw	ra,20(sp)
 1816ee4:	df000415 	stw	fp,16(sp)
 1816ee8:	df000404 	addi	fp,sp,16
 1816eec:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816ef0:	e0bfff17 	ldw	r2,-4(fp)
 1816ef4:	10800a17 	ldw	r2,40(r2)
 1816ef8:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_REBOOTING);
 1816efc:	014000c4 	movi	r5,3
 1816f00:	e13ffd17 	ldw	r4,-12(fp)
 1816f04:	18172dc0 	call	18172dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 1816f08:	018000c4 	movi	r6,3
 1816f0c:	e17ffd17 	ldw	r5,-12(fp)
 1816f10:	e13fff17 	ldw	r4,-4(fp)
 1816f14:	18182b40 	call	18182b4 <dhcp_create_msg>
 1816f18:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 1816f1c:	e0bffe07 	ldb	r2,-8(fp)
 1816f20:	1000371e 	bne	r2,zero,1817000 <dhcp_reboot+0x124>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 1816f24:	01800084 	movi	r6,2
 1816f28:	01400e44 	movi	r5,57
 1816f2c:	e13ffd17 	ldw	r4,-12(fp)
 1816f30:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_short(dhcp, 576);
 1816f34:	01409004 	movi	r5,576
 1816f38:	e13ffd17 	ldw	r4,-12(fp)
 1816f3c:	18174340 	call	1817434 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 1816f40:	01800104 	movi	r6,4
 1816f44:	01400c84 	movi	r5,50
 1816f48:	e13ffd17 	ldw	r4,-12(fp)
 1816f4c:	18173380 	call	1817338 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 1816f50:	e0bffd17 	ldw	r2,-12(fp)
 1816f54:	10800917 	ldw	r2,36(r2)
 1816f58:	1006d63a 	srli	r3,r2,24
 1816f5c:	e0bffd17 	ldw	r2,-12(fp)
 1816f60:	10800917 	ldw	r2,36(r2)
 1816f64:	1004d23a 	srli	r2,r2,8
 1816f68:	10bfc00c 	andi	r2,r2,65280
 1816f6c:	1886b03a 	or	r3,r3,r2
 1816f70:	e0bffd17 	ldw	r2,-12(fp)
 1816f74:	10800917 	ldw	r2,36(r2)
 1816f78:	10bfc00c 	andi	r2,r2,65280
 1816f7c:	1004923a 	slli	r2,r2,8
 1816f80:	1886b03a 	or	r3,r3,r2
 1816f84:	e0bffd17 	ldw	r2,-12(fp)
 1816f88:	10800917 	ldw	r2,36(r2)
 1816f8c:	1004963a 	slli	r2,r2,24
 1816f90:	1884b03a 	or	r2,r3,r2
 1816f94:	100b883a 	mov	r5,r2
 1816f98:	e13ffd17 	ldw	r4,-12(fp)
 1816f9c:	18174cc0 	call	18174cc <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 1816fa0:	e13ffd17 	ldw	r4,-12(fp)
 1816fa4:	18188bc0 	call	18188bc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1816fa8:	e0bffd17 	ldw	r2,-12(fp)
 1816fac:	10c00417 	ldw	r3,16(r2)
 1816fb0:	e0bffd17 	ldw	r2,-12(fp)
 1816fb4:	1080060b 	ldhu	r2,24(r2)
 1816fb8:	10803c04 	addi	r2,r2,240
 1816fbc:	10bfffcc 	andi	r2,r2,65535
 1816fc0:	100b883a 	mov	r5,r2
 1816fc4:	1809883a 	mov	r4,r3
 1816fc8:	1819f740 	call	1819f74 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 1816fcc:	e0bffd17 	ldw	r2,-12(fp)
 1816fd0:	10c00117 	ldw	r3,4(r2)
 1816fd4:	e0bffd17 	ldw	r2,-12(fp)
 1816fd8:	11000417 	ldw	r4,16(r2)
 1816fdc:	e0bfff17 	ldw	r2,-4(fp)
 1816fe0:	d8800015 	stw	r2,0(sp)
 1816fe4:	01c010c4 	movi	r7,67
 1816fe8:	d1a00e04 	addi	r6,gp,-32712
 1816fec:	200b883a 	mov	r5,r4
 1816ff0:	1809883a 	mov	r4,r3
 1816ff4:	18219840 	call	1821984 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1816ff8:	e13ffd17 	ldw	r4,-12(fp)
 1816ffc:	18188380 	call	1818838 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1817000:	e0bffd17 	ldw	r2,-12(fp)
 1817004:	10800343 	ldbu	r2,13(r2)
 1817008:	10800044 	addi	r2,r2,1
 181700c:	1007883a 	mov	r3,r2
 1817010:	e0bffd17 	ldw	r2,-12(fp)
 1817014:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 1817018:	e0bffd17 	ldw	r2,-12(fp)
 181701c:	10800343 	ldbu	r2,13(r2)
 1817020:	10803fcc 	andi	r2,r2,255
 1817024:	108002a8 	cmpgeui	r2,r2,10
 1817028:	1000051e 	bne	r2,zero,1817040 <dhcp_reboot+0x164>
 181702c:	e0bffd17 	ldw	r2,-12(fp)
 1817030:	10800343 	ldbu	r2,13(r2)
 1817034:	10803fcc 	andi	r2,r2,255
 1817038:	1080fa24 	muli	r2,r2,1000
 181703c:	00000106 	br	1817044 <dhcp_reboot+0x168>
 1817040:	0089c404 	movi	r2,10000
 1817044:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1817048:	e0bffe8b 	ldhu	r2,-6(fp)
 181704c:	10807cc4 	addi	r2,r2,499
 1817050:	01407d04 	movi	r5,500
 1817054:	1009883a 	mov	r4,r2
 1817058:	180ab240 	call	180ab24 <__divsi3>
 181705c:	1007883a 	mov	r3,r2
 1817060:	e0bffd17 	ldw	r2,-12(fp)
 1817064:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1817068:	e0bffe03 	ldbu	r2,-8(fp)
}
 181706c:	e037883a 	mov	sp,fp
 1817070:	dfc00117 	ldw	ra,4(sp)
 1817074:	df000017 	ldw	fp,0(sp)
 1817078:	dec00204 	addi	sp,sp,8
 181707c:	f800283a 	ret

01817080 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 1817080:	defffa04 	addi	sp,sp,-24
 1817084:	dfc00515 	stw	ra,20(sp)
 1817088:	df000415 	stw	fp,16(sp)
 181708c:	df000404 	addi	fp,sp,16
 1817090:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1817094:	e0bfff17 	ldw	r2,-4(fp)
 1817098:	10800a17 	ldw	r2,40(r2)
 181709c:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_OFF);
 18170a0:	000b883a 	mov	r5,zero
 18170a4:	e13ffd17 	ldw	r4,-12(fp)
 18170a8:	18172dc0 	call	18172dc <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero(&dhcp->server_ip_addr);
 18170ac:	e0bffd17 	ldw	r2,-12(fp)
 18170b0:	10000815 	stw	zero,32(r2)
  ip_addr_set_zero(&dhcp->offered_ip_addr);
 18170b4:	e0bffd17 	ldw	r2,-12(fp)
 18170b8:	10000915 	stw	zero,36(r2)
  ip_addr_set_zero(&dhcp->offered_sn_mask);
 18170bc:	e0bffd17 	ldw	r2,-12(fp)
 18170c0:	10000a15 	stw	zero,40(r2)
  ip_addr_set_zero(&dhcp->offered_gw_addr);
 18170c4:	e0bffd17 	ldw	r2,-12(fp)
 18170c8:	10000b15 	stw	zero,44(r2)
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 18170cc:	e0bffd17 	ldw	r2,-12(fp)
 18170d0:	10000e15 	stw	zero,56(r2)
 18170d4:	e0bffd17 	ldw	r2,-12(fp)
 18170d8:	10c00e17 	ldw	r3,56(r2)
 18170dc:	e0bffd17 	ldw	r2,-12(fp)
 18170e0:	10c00d15 	stw	r3,52(r2)
 18170e4:	e0bffd17 	ldw	r2,-12(fp)
 18170e8:	10c00d17 	ldw	r3,52(r2)
 18170ec:	e0bffd17 	ldw	r2,-12(fp)
 18170f0:	10c00c15 	stw	r3,48(r2)
  
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 18170f4:	018001c4 	movi	r6,7
 18170f8:	e17ffd17 	ldw	r5,-12(fp)
 18170fc:	e13fff17 	ldw	r4,-4(fp)
 1817100:	18182b40 	call	18182b4 <dhcp_create_msg>
 1817104:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 1817108:	e0bffe07 	ldb	r2,-8(fp)
 181710c:	10001a1e 	bne	r2,zero,1817178 <dhcp_release+0xf8>
    dhcp_option_trailer(dhcp);
 1817110:	e13ffd17 	ldw	r4,-12(fp)
 1817114:	18188bc0 	call	18188bc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1817118:	e0bffd17 	ldw	r2,-12(fp)
 181711c:	10c00417 	ldw	r3,16(r2)
 1817120:	e0bffd17 	ldw	r2,-12(fp)
 1817124:	1080060b 	ldhu	r2,24(r2)
 1817128:	10803c04 	addi	r2,r2,240
 181712c:	10bfffcc 	andi	r2,r2,65535
 1817130:	100b883a 	mov	r5,r2
 1817134:	1809883a 	mov	r4,r3
 1817138:	1819f740 	call	1819f74 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 181713c:	e0bffd17 	ldw	r2,-12(fp)
 1817140:	10c00117 	ldw	r3,4(r2)
 1817144:	e0bffd17 	ldw	r2,-12(fp)
 1817148:	11000417 	ldw	r4,16(r2)
 181714c:	e0bffd17 	ldw	r2,-12(fp)
 1817150:	11400804 	addi	r5,r2,32
 1817154:	e0bfff17 	ldw	r2,-4(fp)
 1817158:	d8800015 	stw	r2,0(sp)
 181715c:	01c010c4 	movi	r7,67
 1817160:	280d883a 	mov	r6,r5
 1817164:	200b883a 	mov	r5,r4
 1817168:	1809883a 	mov	r4,r3
 181716c:	18219840 	call	1821984 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1817170:	e13ffd17 	ldw	r4,-12(fp)
 1817174:	18188380 	call	1818838 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1817178:	e0bffd17 	ldw	r2,-12(fp)
 181717c:	10800343 	ldbu	r2,13(r2)
 1817180:	10800044 	addi	r2,r2,1
 1817184:	1007883a 	mov	r3,r2
 1817188:	e0bffd17 	ldw	r2,-12(fp)
 181718c:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 1817190:	e0bffd17 	ldw	r2,-12(fp)
 1817194:	10800343 	ldbu	r2,13(r2)
 1817198:	10803fcc 	andi	r2,r2,255
 181719c:	108002a8 	cmpgeui	r2,r2,10
 18171a0:	1000051e 	bne	r2,zero,18171b8 <dhcp_release+0x138>
 18171a4:	e0bffd17 	ldw	r2,-12(fp)
 18171a8:	10800343 	ldbu	r2,13(r2)
 18171ac:	10803fcc 	andi	r2,r2,255
 18171b0:	1080fa24 	muli	r2,r2,1000
 18171b4:	00000106 	br	18171bc <dhcp_release+0x13c>
 18171b8:	0089c404 	movi	r2,10000
 18171bc:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 18171c0:	e0bffe8b 	ldhu	r2,-6(fp)
 18171c4:	10807cc4 	addi	r2,r2,499
 18171c8:	01407d04 	movi	r5,500
 18171cc:	1009883a 	mov	r4,r2
 18171d0:	180ab240 	call	180ab24 <__divsi3>
 18171d4:	1007883a 	mov	r3,r2
 18171d8:	e0bffd17 	ldw	r2,-12(fp)
 18171dc:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
  /* bring the interface down */
  netif_set_down(netif);
 18171e0:	e13fff17 	ldw	r4,-4(fp)
 18171e4:	181970c0 	call	181970c <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
 18171e8:	d1600d04 	addi	r5,gp,-32716
 18171ec:	e13fff17 	ldw	r4,-4(fp)
 18171f0:	18194780 	call	1819478 <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
 18171f4:	d1600d04 	addi	r5,gp,-32716
 18171f8:	e13fff17 	ldw	r4,-4(fp)
 18171fc:	18195a00 	call	18195a0 <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY);
 1817200:	d1600d04 	addi	r5,gp,-32716
 1817204:	e13fff17 	ldw	r4,-4(fp)
 1817208:	18195e80 	call	18195e8 <netif_set_netmask>
  
  return result;
 181720c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1817210:	e037883a 	mov	sp,fp
 1817214:	dfc00117 	ldw	ra,4(sp)
 1817218:	df000017 	ldw	fp,0(sp)
 181721c:	dec00204 	addi	sp,sp,8
 1817220:	f800283a 	ret

01817224 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 1817224:	defffc04 	addi	sp,sp,-16
 1817228:	dfc00315 	stw	ra,12(sp)
 181722c:	df000215 	stw	fp,8(sp)
 1817230:	df000204 	addi	fp,sp,8
 1817234:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 1817238:	e0bfff17 	ldw	r2,-4(fp)
 181723c:	1000091e 	bne	r2,zero,1817264 <dhcp_stop+0x40>
 1817240:	01c06134 	movhi	r7,388
 1817244:	39c32004 	addi	r7,r7,3200
 1817248:	01813504 	movi	r6,1236
 181724c:	01406134 	movhi	r5,388
 1817250:	29434304 	addi	r5,r5,3340
 1817254:	01006134 	movhi	r4,388
 1817258:	21032a04 	addi	r4,r4,3240
 181725c:	1800b240 	call	1800b24 <printf>
 1817260:	003fff06 	br	1817260 <__ram_exceptions_end+0xff806f70>
  dhcp = netif->dhcp;
 1817264:	e0bfff17 	ldw	r2,-4(fp)
 1817268:	10800a17 	ldw	r2,40(r2)
 181726c:	e0bffe15 	stw	r2,-8(fp)
  /* Remove the flag that says this netif is handled by DHCP. */
  netif->flags &= ~NETIF_FLAG_DHCP;
 1817270:	e0bfff17 	ldw	r2,-4(fp)
 1817274:	10c00e43 	ldbu	r3,57(r2)
 1817278:	00bffdc4 	movi	r2,-9
 181727c:	1884703a 	and	r2,r3,r2
 1817280:	1007883a 	mov	r3,r2
 1817284:	e0bfff17 	ldw	r2,-4(fp)
 1817288:	10c00e45 	stb	r3,57(r2)

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 181728c:	e0bffe17 	ldw	r2,-8(fp)
 1817290:	10000c26 	beq	r2,zero,18172c4 <dhcp_stop+0xa0>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
 1817294:	e0bffe17 	ldw	r2,-8(fp)
 1817298:	10800117 	ldw	r2,4(r2)
 181729c:	10000626 	beq	r2,zero,18172b8 <dhcp_stop+0x94>
      udp_remove(dhcp->pcb);
 18172a0:	e0bffe17 	ldw	r2,-8(fp)
 18172a4:	10800117 	ldw	r2,4(r2)
 18172a8:	1009883a 	mov	r4,r2
 18172ac:	18221300 	call	1822130 <udp_remove>
      dhcp->pcb = NULL;
 18172b0:	e0bffe17 	ldw	r2,-8(fp)
 18172b4:	10000115 	stw	zero,4(r2)
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_OFF);
 18172b8:	000b883a 	mov	r5,zero
 18172bc:	e13ffe17 	ldw	r4,-8(fp)
 18172c0:	18172dc0 	call	18172dc <dhcp_set_state>
  }
}
 18172c4:	0001883a 	nop
 18172c8:	e037883a 	mov	sp,fp
 18172cc:	dfc00117 	ldw	ra,4(sp)
 18172d0:	df000017 	ldw	fp,0(sp)
 18172d4:	dec00204 	addi	sp,sp,8
 18172d8:	f800283a 	ret

018172dc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 18172dc:	defffd04 	addi	sp,sp,-12
 18172e0:	df000215 	stw	fp,8(sp)
 18172e4:	df000204 	addi	fp,sp,8
 18172e8:	e13ffe15 	stw	r4,-8(fp)
 18172ec:	2805883a 	mov	r2,r5
 18172f0:	e0bfff05 	stb	r2,-4(fp)
  if (new_state != dhcp->state) {
 18172f4:	e0bffe17 	ldw	r2,-8(fp)
 18172f8:	10800303 	ldbu	r2,12(r2)
 18172fc:	10c03fcc 	andi	r3,r2,255
 1817300:	e0bfff03 	ldbu	r2,-4(fp)
 1817304:	18800726 	beq	r3,r2,1817324 <dhcp_set_state+0x48>
    dhcp->state = new_state;
 1817308:	e0bffe17 	ldw	r2,-8(fp)
 181730c:	e0ffff03 	ldbu	r3,-4(fp)
 1817310:	10c00305 	stb	r3,12(r2)
    dhcp->tries = 0;
 1817314:	e0bffe17 	ldw	r2,-8(fp)
 1817318:	10000345 	stb	zero,13(r2)
    dhcp->request_timeout = 0;
 181731c:	e0bffe17 	ldw	r2,-8(fp)
 1817320:	1000068d 	sth	zero,26(r2)
  }
}
 1817324:	0001883a 	nop
 1817328:	e037883a 	mov	sp,fp
 181732c:	df000017 	ldw	fp,0(sp)
 1817330:	dec00104 	addi	sp,sp,4
 1817334:	f800283a 	ret

01817338 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 1817338:	defffc04 	addi	sp,sp,-16
 181733c:	df000315 	stw	fp,12(sp)
 1817340:	df000304 	addi	fp,sp,12
 1817344:	e13ffd15 	stw	r4,-12(fp)
 1817348:	2807883a 	mov	r3,r5
 181734c:	3005883a 	mov	r2,r6
 1817350:	e0fffe05 	stb	r3,-8(fp)
 1817354:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 1817358:	e0bffd17 	ldw	r2,-12(fp)
 181735c:	10c00517 	ldw	r3,20(r2)
 1817360:	e0bffd17 	ldw	r2,-12(fp)
 1817364:	1080060b 	ldhu	r2,24(r2)
 1817368:	11000044 	addi	r4,r2,1
 181736c:	200b883a 	mov	r5,r4
 1817370:	e13ffd17 	ldw	r4,-12(fp)
 1817374:	2140060d 	sth	r5,24(r4)
 1817378:	10bfffcc 	andi	r2,r2,65535
 181737c:	1885883a 	add	r2,r3,r2
 1817380:	10803c04 	addi	r2,r2,240
 1817384:	e0fffe03 	ldbu	r3,-8(fp)
 1817388:	10c00005 	stb	r3,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 181738c:	e0bffd17 	ldw	r2,-12(fp)
 1817390:	10c00517 	ldw	r3,20(r2)
 1817394:	e0bffd17 	ldw	r2,-12(fp)
 1817398:	1080060b 	ldhu	r2,24(r2)
 181739c:	11000044 	addi	r4,r2,1
 18173a0:	200b883a 	mov	r5,r4
 18173a4:	e13ffd17 	ldw	r4,-12(fp)
 18173a8:	2140060d 	sth	r5,24(r4)
 18173ac:	10bfffcc 	andi	r2,r2,65535
 18173b0:	1885883a 	add	r2,r3,r2
 18173b4:	10803c04 	addi	r2,r2,240
 18173b8:	e0ffff03 	ldbu	r3,-4(fp)
 18173bc:	10c00005 	stb	r3,0(r2)
}
 18173c0:	0001883a 	nop
 18173c4:	e037883a 	mov	sp,fp
 18173c8:	df000017 	ldw	fp,0(sp)
 18173cc:	dec00104 	addi	sp,sp,4
 18173d0:	f800283a 	ret

018173d4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 18173d4:	defffd04 	addi	sp,sp,-12
 18173d8:	df000215 	stw	fp,8(sp)
 18173dc:	df000204 	addi	fp,sp,8
 18173e0:	e13ffe15 	stw	r4,-8(fp)
 18173e4:	2805883a 	mov	r2,r5
 18173e8:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 18173ec:	e0bffe17 	ldw	r2,-8(fp)
 18173f0:	10c00517 	ldw	r3,20(r2)
 18173f4:	e0bffe17 	ldw	r2,-8(fp)
 18173f8:	1080060b 	ldhu	r2,24(r2)
 18173fc:	11000044 	addi	r4,r2,1
 1817400:	200b883a 	mov	r5,r4
 1817404:	e13ffe17 	ldw	r4,-8(fp)
 1817408:	2140060d 	sth	r5,24(r4)
 181740c:	10bfffcc 	andi	r2,r2,65535
 1817410:	1885883a 	add	r2,r3,r2
 1817414:	10803c04 	addi	r2,r2,240
 1817418:	e0ffff03 	ldbu	r3,-4(fp)
 181741c:	10c00005 	stb	r3,0(r2)
}
 1817420:	0001883a 	nop
 1817424:	e037883a 	mov	sp,fp
 1817428:	df000017 	ldw	fp,0(sp)
 181742c:	dec00104 	addi	sp,sp,4
 1817430:	f800283a 	ret

01817434 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 1817434:	defffd04 	addi	sp,sp,-12
 1817438:	df000215 	stw	fp,8(sp)
 181743c:	df000204 	addi	fp,sp,8
 1817440:	e13ffe15 	stw	r4,-8(fp)
 1817444:	2805883a 	mov	r2,r5
 1817448:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 181744c:	e0bffe17 	ldw	r2,-8(fp)
 1817450:	10c00517 	ldw	r3,20(r2)
 1817454:	e0bffe17 	ldw	r2,-8(fp)
 1817458:	1080060b 	ldhu	r2,24(r2)
 181745c:	11000044 	addi	r4,r2,1
 1817460:	200b883a 	mov	r5,r4
 1817464:	e13ffe17 	ldw	r4,-8(fp)
 1817468:	2140060d 	sth	r5,24(r4)
 181746c:	10bfffcc 	andi	r2,r2,65535
 1817470:	e13fff0b 	ldhu	r4,-4(fp)
 1817474:	2008d23a 	srli	r4,r4,8
 1817478:	1885883a 	add	r2,r3,r2
 181747c:	10803c04 	addi	r2,r2,240
 1817480:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 1817484:	e0bffe17 	ldw	r2,-8(fp)
 1817488:	10c00517 	ldw	r3,20(r2)
 181748c:	e0bffe17 	ldw	r2,-8(fp)
 1817490:	1080060b 	ldhu	r2,24(r2)
 1817494:	11000044 	addi	r4,r2,1
 1817498:	200b883a 	mov	r5,r4
 181749c:	e13ffe17 	ldw	r4,-8(fp)
 18174a0:	2140060d 	sth	r5,24(r4)
 18174a4:	10bfffcc 	andi	r2,r2,65535
 18174a8:	e13fff0b 	ldhu	r4,-4(fp)
 18174ac:	1885883a 	add	r2,r3,r2
 18174b0:	10803c04 	addi	r2,r2,240
 18174b4:	11000005 	stb	r4,0(r2)
}
 18174b8:	0001883a 	nop
 18174bc:	e037883a 	mov	sp,fp
 18174c0:	df000017 	ldw	fp,0(sp)
 18174c4:	dec00104 	addi	sp,sp,4
 18174c8:	f800283a 	ret

018174cc <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 18174cc:	defffd04 	addi	sp,sp,-12
 18174d0:	df000215 	stw	fp,8(sp)
 18174d4:	df000204 	addi	fp,sp,8
 18174d8:	e13ffe15 	stw	r4,-8(fp)
 18174dc:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 18174e0:	e0bffe17 	ldw	r2,-8(fp)
 18174e4:	10c00517 	ldw	r3,20(r2)
 18174e8:	e0bffe17 	ldw	r2,-8(fp)
 18174ec:	1080060b 	ldhu	r2,24(r2)
 18174f0:	11000044 	addi	r4,r2,1
 18174f4:	200b883a 	mov	r5,r4
 18174f8:	e13ffe17 	ldw	r4,-8(fp)
 18174fc:	2140060d 	sth	r5,24(r4)
 1817500:	10bfffcc 	andi	r2,r2,65535
 1817504:	e13fff17 	ldw	r4,-4(fp)
 1817508:	2008d63a 	srli	r4,r4,24
 181750c:	1885883a 	add	r2,r3,r2
 1817510:	10803c04 	addi	r2,r2,240
 1817514:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 1817518:	e0bffe17 	ldw	r2,-8(fp)
 181751c:	10c00517 	ldw	r3,20(r2)
 1817520:	e0bffe17 	ldw	r2,-8(fp)
 1817524:	1080060b 	ldhu	r2,24(r2)
 1817528:	11000044 	addi	r4,r2,1
 181752c:	200b883a 	mov	r5,r4
 1817530:	e13ffe17 	ldw	r4,-8(fp)
 1817534:	2140060d 	sth	r5,24(r4)
 1817538:	10bfffcc 	andi	r2,r2,65535
 181753c:	e13fff17 	ldw	r4,-4(fp)
 1817540:	21003fec 	andhi	r4,r4,255
 1817544:	2008d43a 	srli	r4,r4,16
 1817548:	1885883a 	add	r2,r3,r2
 181754c:	10803c04 	addi	r2,r2,240
 1817550:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 1817554:	e0bffe17 	ldw	r2,-8(fp)
 1817558:	10c00517 	ldw	r3,20(r2)
 181755c:	e0bffe17 	ldw	r2,-8(fp)
 1817560:	1080060b 	ldhu	r2,24(r2)
 1817564:	11000044 	addi	r4,r2,1
 1817568:	200b883a 	mov	r5,r4
 181756c:	e13ffe17 	ldw	r4,-8(fp)
 1817570:	2140060d 	sth	r5,24(r4)
 1817574:	10bfffcc 	andi	r2,r2,65535
 1817578:	e13fff17 	ldw	r4,-4(fp)
 181757c:	213fc00c 	andi	r4,r4,65280
 1817580:	2008d23a 	srli	r4,r4,8
 1817584:	1885883a 	add	r2,r3,r2
 1817588:	10803c04 	addi	r2,r2,240
 181758c:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 1817590:	e0bffe17 	ldw	r2,-8(fp)
 1817594:	10c00517 	ldw	r3,20(r2)
 1817598:	e0bffe17 	ldw	r2,-8(fp)
 181759c:	1080060b 	ldhu	r2,24(r2)
 18175a0:	11000044 	addi	r4,r2,1
 18175a4:	200b883a 	mov	r5,r4
 18175a8:	e13ffe17 	ldw	r4,-8(fp)
 18175ac:	2140060d 	sth	r5,24(r4)
 18175b0:	10bfffcc 	andi	r2,r2,65535
 18175b4:	e13fff17 	ldw	r4,-4(fp)
 18175b8:	1885883a 	add	r2,r3,r2
 18175bc:	10803c04 	addi	r2,r2,240
 18175c0:	11000005 	stb	r4,0(r2)
}
 18175c4:	0001883a 	nop
 18175c8:	e037883a 	mov	sp,fp
 18175cc:	df000017 	ldw	fp,0(sp)
 18175d0:	dec00104 	addi	sp,sp,4
 18175d4:	f800283a 	ret

018175d8 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
 18175d8:	defff804 	addi	sp,sp,-32
 18175dc:	dfc00715 	stw	ra,28(sp)
 18175e0:	df000615 	stw	fp,24(sp)
 18175e4:	df000604 	addi	fp,sp,24
 18175e8:	e13ffe15 	stw	r4,-8(fp)
 18175ec:	e17fff15 	stw	r5,-4(fp)
  if (netif->hostname != NULL) {
 18175f0:	e0bfff17 	ldw	r2,-4(fp)
 18175f4:	10800b17 	ldw	r2,44(r2)
 18175f8:	10002826 	beq	r2,zero,181769c <dhcp_option_hostname+0xc4>
    size_t namelen = strlen(netif->hostname);
 18175fc:	e0bfff17 	ldw	r2,-4(fp)
 1817600:	10800b17 	ldw	r2,44(r2)
 1817604:	1009883a 	mov	r4,r2
 1817608:	18074e40 	call	18074e4 <strlen>
 181760c:	e0bffc15 	stw	r2,-16(fp)
    if (namelen > 0) {
 1817610:	e0bffc17 	ldw	r2,-16(fp)
 1817614:	10002126 	beq	r2,zero,181769c <dhcp_option_hostname+0xc4>
      u8_t len;
      const char *p = netif->hostname;
 1817618:	e0bfff17 	ldw	r2,-4(fp)
 181761c:	10800b17 	ldw	r2,44(r2)
 1817620:	e0bffb15 	stw	r2,-20(fp)
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
 1817624:	e0bffe17 	ldw	r2,-8(fp)
 1817628:	1080060b 	ldhu	r2,24(r2)
 181762c:	10bfffcc 	andi	r2,r2,65535
 1817630:	00c01044 	movi	r3,65
 1817634:	1885c83a 	sub	r2,r3,r2
 1817638:	e0bffd15 	stw	r2,-12(fp)
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
      len = LWIP_MIN(namelen, available);
 181763c:	e0fffc17 	ldw	r3,-16(fp)
 1817640:	e0bffd17 	ldw	r2,-12(fp)
 1817644:	1880012e 	bgeu	r3,r2,181764c <dhcp_option_hostname+0x74>
 1817648:	1805883a 	mov	r2,r3
 181764c:	e0bffa05 	stb	r2,-24(fp)
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, len);
 1817650:	e0bffa03 	ldbu	r2,-24(fp)
 1817654:	100d883a 	mov	r6,r2
 1817658:	01400304 	movi	r5,12
 181765c:	e13ffe17 	ldw	r4,-8(fp)
 1817660:	18173380 	call	1817338 <dhcp_option>
      while (len--) {
 1817664:	00000806 	br	1817688 <dhcp_option_hostname+0xb0>
        dhcp_option_byte(dhcp, *p++);
 1817668:	e0bffb17 	ldw	r2,-20(fp)
 181766c:	10c00044 	addi	r3,r2,1
 1817670:	e0fffb15 	stw	r3,-20(fp)
 1817674:	10800003 	ldbu	r2,0(r2)
 1817678:	10803fcc 	andi	r2,r2,255
 181767c:	100b883a 	mov	r5,r2
 1817680:	e13ffe17 	ldw	r4,-8(fp)
 1817684:	18173d40 	call	18173d4 <dhcp_option_byte>
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
      len = LWIP_MIN(namelen, available);
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, len);
      while (len--) {
 1817688:	e0bffa03 	ldbu	r2,-24(fp)
 181768c:	10ffffc4 	addi	r3,r2,-1
 1817690:	e0fffa05 	stb	r3,-24(fp)
 1817694:	10803fcc 	andi	r2,r2,255
 1817698:	103ff31e 	bne	r2,zero,1817668 <__ram_exceptions_end+0xff807378>
        dhcp_option_byte(dhcp, *p++);
      }
    }
  }
}
 181769c:	0001883a 	nop
 18176a0:	e037883a 	mov	sp,fp
 18176a4:	dfc00117 	ldw	ra,4(sp)
 18176a8:	df000017 	ldw	fp,0(sp)
 18176ac:	dec00204 	addi	sp,sp,8
 18176b0:	f800283a 	ret

018176b4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 18176b4:	defff004 	addi	sp,sp,-64
 18176b8:	dfc00f15 	stw	ra,60(sp)
 18176bc:	df000e15 	stw	fp,56(sp)
 18176c0:	df000e04 	addi	fp,sp,56
 18176c4:	e13ffe15 	stw	r4,-8(fp)
 18176c8:	e17fff15 	stw	r5,-4(fp)
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 18176cc:	e03ff615 	stw	zero,-40(fp)
  int parse_sname_as_options = 0;
 18176d0:	e03ff715 	stw	zero,-36(fp)

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 18176d4:	01800284 	movi	r6,10
 18176d8:	000b883a 	mov	r5,zero
 18176dc:	01006134 	movhi	r4,388
 18176e0:	211e6804 	addi	r4,r4,31136
 18176e4:	18060e00 	call	18060e0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 18176e8:	e0bfff17 	ldw	r2,-4(fp)
 18176ec:	1080028b 	ldhu	r2,10(r2)
 18176f0:	10bfffcc 	andi	r2,r2,65535
 18176f4:	10800b28 	cmpgeui	r2,r2,44
 18176f8:	1000021e 	bne	r2,zero,1817704 <dhcp_parse_reply+0x50>
    return ERR_BUF;
 18176fc:	00bfff84 	movi	r2,-2
 1817700:	00021106 	br	1817f48 <dhcp_parse_reply+0x894>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 1817704:	e0bfff17 	ldw	r2,-4(fp)
 1817708:	10c00117 	ldw	r3,4(r2)
 181770c:	e0bffe17 	ldw	r2,-8(fp)
 1817710:	10c00215 	stw	r3,8(r2)
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 1817714:	00803c04 	movi	r2,240
 1817718:	e0bff40d 	sth	r2,-48(fp)
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 181771c:	e0bfff17 	ldw	r2,-4(fp)
 1817720:	1080020b 	ldhu	r2,8(r2)
 1817724:	e0bff48d 	sth	r2,-46(fp)
again:
  q = p;
 1817728:	e0bfff17 	ldw	r2,-4(fp)
 181772c:	e0bff515 	stw	r2,-44(fp)
  while((q != NULL) && (options_idx >= q->len)) {
 1817730:	00000d06 	br	1817768 <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
 1817734:	e0bff517 	ldw	r2,-44(fp)
 1817738:	1080028b 	ldhu	r2,10(r2)
 181773c:	e0fff40b 	ldhu	r3,-48(fp)
 1817740:	1885c83a 	sub	r2,r3,r2
 1817744:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max -= q->len;
 1817748:	e0bff517 	ldw	r2,-44(fp)
 181774c:	1080028b 	ldhu	r2,10(r2)
 1817750:	e0fff48b 	ldhu	r3,-46(fp)
 1817754:	1885c83a 	sub	r2,r3,r2
 1817758:	e0bff48d 	sth	r2,-46(fp)
    q = q->next;
 181775c:	e0bff517 	ldw	r2,-44(fp)
 1817760:	10800017 	ldw	r2,0(r2)
 1817764:	e0bff515 	stw	r2,-44(fp)
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while((q != NULL) && (options_idx >= q->len)) {
 1817768:	e0bff517 	ldw	r2,-44(fp)
 181776c:	10000526 	beq	r2,zero,1817784 <dhcp_parse_reply+0xd0>
 1817770:	e0bff517 	ldw	r2,-44(fp)
 1817774:	1080028b 	ldhu	r2,10(r2)
 1817778:	10bfffcc 	andi	r2,r2,65535
 181777c:	e0fff40b 	ldhu	r3,-48(fp)
 1817780:	18bfec2e 	bgeu	r3,r2,1817734 <__ram_exceptions_end+0xff807444>
    options_idx -= q->len;
    options_idx_max -= q->len;
    q = q->next;
  }
  if (q == NULL) {
 1817784:	e0bff517 	ldw	r2,-44(fp)
 1817788:	1000021e 	bne	r2,zero,1817794 <dhcp_parse_reply+0xe0>
    return ERR_BUF;
 181778c:	00bfff84 	movi	r2,-2
 1817790:	0001ed06 	br	1817f48 <dhcp_parse_reply+0x894>
  }
  offset = options_idx;
 1817794:	e0bff40b 	ldhu	r2,-48(fp)
 1817798:	e0bff30d 	sth	r2,-52(fp)
  offset_max = options_idx_max;
 181779c:	e0bff48b 	ldhu	r2,-46(fp)
 18177a0:	e0bff38d 	sth	r2,-50(fp)
  options = (u8_t*)q->payload;
 18177a4:	e0bff517 	ldw	r2,-44(fp)
 18177a8:	10800117 	ldw	r2,4(r2)
 18177ac:	e0bff215 	stw	r2,-56(fp)
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
 18177b0:	0001a906 	br	1817e58 <dhcp_parse_reply+0x7a4>
    u8_t op = options[offset];
 18177b4:	e0bff30b 	ldhu	r2,-52(fp)
 18177b8:	e0fff217 	ldw	r3,-56(fp)
 18177bc:	1885883a 	add	r2,r3,r2
 18177c0:	10800003 	ldbu	r2,0(r2)
 18177c4:	e0bffa85 	stb	r2,-22(fp)
    u8_t len;
    u8_t decode_len = 0;
 18177c8:	e03ff845 	stb	zero,-31(fp)
    int decode_idx = -1;
 18177cc:	00bfffc4 	movi	r2,-1
 18177d0:	e0bff915 	stw	r2,-28(fp)
    u16_t val_offset = offset + 2;
 18177d4:	e0bff30b 	ldhu	r2,-52(fp)
 18177d8:	10800084 	addi	r2,r2,2
 18177dc:	e0bffa0d 	sth	r2,-24(fp)
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
 18177e0:	e0bff30b 	ldhu	r2,-52(fp)
 18177e4:	10c00044 	addi	r3,r2,1
 18177e8:	e0bff517 	ldw	r2,-44(fp)
 18177ec:	1080028b 	ldhu	r2,10(r2)
 18177f0:	10bfffcc 	andi	r2,r2,65535
 18177f4:	1880070e 	bge	r3,r2,1817814 <dhcp_parse_reply+0x160>
      len = options[offset + 1];
 18177f8:	e0bff30b 	ldhu	r2,-52(fp)
 18177fc:	10800044 	addi	r2,r2,1
 1817800:	e0fff217 	ldw	r3,-56(fp)
 1817804:	1885883a 	add	r2,r3,r2
 1817808:	10800003 	ldbu	r2,0(r2)
 181780c:	e0bff805 	stb	r2,-32(fp)
 1817810:	00000a06 	br	181783c <dhcp_parse_reply+0x188>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 1817814:	e0bff517 	ldw	r2,-44(fp)
 1817818:	10800017 	ldw	r2,0(r2)
 181781c:	10000526 	beq	r2,zero,1817834 <dhcp_parse_reply+0x180>
 1817820:	e0bff517 	ldw	r2,-44(fp)
 1817824:	10800017 	ldw	r2,0(r2)
 1817828:	10800117 	ldw	r2,4(r2)
 181782c:	10800003 	ldbu	r2,0(r2)
 1817830:	00000106 	br	1817838 <dhcp_parse_reply+0x184>
 1817834:	0005883a 	mov	r2,zero
 1817838:	e0bff805 	stb	r2,-32(fp)
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 181783c:	e0bff803 	ldbu	r2,-32(fp)
 1817840:	e0bff845 	stb	r2,-31(fp)
    switch(op) {
 1817844:	e0bffa83 	ldbu	r2,-22(fp)
 1817848:	10c00f28 	cmpgeui	r3,r2,60
 181784c:	1800e41e 	bne	r3,zero,1817be0 <dhcp_parse_reply+0x52c>
 1817850:	100690ba 	slli	r3,r2,2
 1817854:	00806074 	movhi	r2,385
 1817858:	109e1a04 	addi	r2,r2,30824
 181785c:	1885883a 	add	r2,r3,r2
 1817860:	10800017 	ldw	r2,0(r2)
 1817864:	1000683a 	jmp	r2
 1817868:	01817958 	cmpnei	r6,zero,1509
 181786c:	01817974 	movhi	r6,1509
 1817870:	01817be0 	cmpeqi	r6,zero,1519
 1817874:	018179b0 	cmpltui	r6,zero,1510
 1817878:	01817be0 	cmpeqi	r6,zero,1519
 181787c:	01817be0 	cmpeqi	r6,zero,1519
 1817880:	018179f4 	movhi	r6,1511
 1817884:	01817be0 	cmpeqi	r6,zero,1519
 1817888:	01817be0 	cmpeqi	r6,zero,1519
 181788c:	01817be0 	cmpeqi	r6,zero,1519
 1817890:	01817be0 	cmpeqi	r6,zero,1519
 1817894:	01817be0 	cmpeqi	r6,zero,1519
 1817898:	01817be0 	cmpeqi	r6,zero,1519
 181789c:	01817be0 	cmpeqi	r6,zero,1519
 18178a0:	01817be0 	cmpeqi	r6,zero,1519
 18178a4:	01817be0 	cmpeqi	r6,zero,1519
 18178a8:	01817be0 	cmpeqi	r6,zero,1519
 18178ac:	01817be0 	cmpeqi	r6,zero,1519
 18178b0:	01817be0 	cmpeqi	r6,zero,1519
 18178b4:	01817be0 	cmpeqi	r6,zero,1519
 18178b8:	01817be0 	cmpeqi	r6,zero,1519
 18178bc:	01817be0 	cmpeqi	r6,zero,1519
 18178c0:	01817be0 	cmpeqi	r6,zero,1519
 18178c4:	01817be0 	cmpeqi	r6,zero,1519
 18178c8:	01817be0 	cmpeqi	r6,zero,1519
 18178cc:	01817be0 	cmpeqi	r6,zero,1519
 18178d0:	01817be0 	cmpeqi	r6,zero,1519
 18178d4:	01817be0 	cmpeqi	r6,zero,1519
 18178d8:	01817be0 	cmpeqi	r6,zero,1519
 18178dc:	01817be0 	cmpeqi	r6,zero,1519
 18178e0:	01817be0 	cmpeqi	r6,zero,1519
 18178e4:	01817be0 	cmpeqi	r6,zero,1519
 18178e8:	01817be0 	cmpeqi	r6,zero,1519
 18178ec:	01817be0 	cmpeqi	r6,zero,1519
 18178f0:	01817be0 	cmpeqi	r6,zero,1519
 18178f4:	01817be0 	cmpeqi	r6,zero,1519
 18178f8:	01817be0 	cmpeqi	r6,zero,1519
 18178fc:	01817be0 	cmpeqi	r6,zero,1519
 1817900:	01817be0 	cmpeqi	r6,zero,1519
 1817904:	01817be0 	cmpeqi	r6,zero,1519
 1817908:	01817be0 	cmpeqi	r6,zero,1519
 181790c:	01817be0 	cmpeqi	r6,zero,1519
 1817910:	01817be0 	cmpeqi	r6,zero,1519
 1817914:	01817be0 	cmpeqi	r6,zero,1519
 1817918:	01817be0 	cmpeqi	r6,zero,1519
 181791c:	01817be0 	cmpeqi	r6,zero,1519
 1817920:	01817be0 	cmpeqi	r6,zero,1519
 1817924:	01817be0 	cmpeqi	r6,zero,1519
 1817928:	01817be0 	cmpeqi	r6,zero,1519
 181792c:	01817be0 	cmpeqi	r6,zero,1519
 1817930:	01817be0 	cmpeqi	r6,zero,1519
 1817934:	01817a7c 	xorhi	r6,zero,1513
 1817938:	01817ab8 	rdprs	r6,zero,1514
 181793c:	01817af0 	cmpltui	r6,zero,1515
 1817940:	01817b2c 	andhi	r6,zero,1516
 1817944:	01817be0 	cmpeqi	r6,zero,1519
 1817948:	01817be0 	cmpeqi	r6,zero,1519
 181794c:	01817be0 	cmpeqi	r6,zero,1519
 1817950:	01817b68 	cmpgeui	r6,zero,1517
 1817954:	01817ba4 	muli	r6,zero,1518
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 1817958:	e03ff805 	stb	zero,-32(fp)
 181795c:	e0bff803 	ldbu	r2,-32(fp)
 1817960:	e0bff845 	stb	r2,-31(fp)
        /* will be increased below */
        offset--;
 1817964:	e0bff30b 	ldhu	r2,-52(fp)
 1817968:	10bfffc4 	addi	r2,r2,-1
 181796c:	e0bff30d 	sth	r2,-52(fp)
        break;
 1817970:	00009d06 	br	1817be8 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 1817974:	e0bff803 	ldbu	r2,-32(fp)
 1817978:	10800120 	cmpeqi	r2,r2,4
 181797c:	1000091e 	bne	r2,zero,18179a4 <dhcp_parse_reply+0x2f0>
 1817980:	01c06134 	movhi	r7,388
 1817984:	39c32004 	addi	r7,r7,3200
 1817988:	01816204 	movi	r6,1416
 181798c:	01406134 	movhi	r5,388
 1817990:	29434a04 	addi	r5,r5,3368
 1817994:	01006134 	movhi	r4,388
 1817998:	21032a04 	addi	r4,r4,3240
 181799c:	1800b240 	call	1800b24 <printf>
 18179a0:	003fff06 	br	18179a0 <__ram_exceptions_end+0xff8076b0>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 18179a4:	00800184 	movi	r2,6
 18179a8:	e0bff915 	stw	r2,-28(fp)
        break;
 18179ac:	00008e06 	br	1817be8 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 18179b0:	00800104 	movi	r2,4
 18179b4:	e0bff845 	stb	r2,-31(fp)
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 18179b8:	e0fff803 	ldbu	r3,-32(fp)
 18179bc:	e0bff843 	ldbu	r2,-31(fp)
 18179c0:	1880092e 	bgeu	r3,r2,18179e8 <dhcp_parse_reply+0x334>
 18179c4:	01c06134 	movhi	r7,388
 18179c8:	39c32004 	addi	r7,r7,3200
 18179cc:	01816344 	movi	r6,1421
 18179d0:	01406134 	movhi	r5,388
 18179d4:	29434d04 	addi	r5,r5,3380
 18179d8:	01006134 	movhi	r4,388
 18179dc:	21032a04 	addi	r4,r4,3240
 18179e0:	1800b240 	call	1800b24 <printf>
 18179e4:	003fff06 	br	18179e4 <__ram_exceptions_end+0xff8076f4>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 18179e8:	008001c4 	movi	r2,7
 18179ec:	e0bff915 	stw	r2,-28(fp)
        break;
 18179f0:	00007d06 	br	1817be8 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
 18179f4:	e0bff803 	ldbu	r2,-32(fp)
 18179f8:	108000cc 	andi	r2,r2,3
 18179fc:	10803fcc 	andi	r2,r2,255
 1817a00:	10000926 	beq	r2,zero,1817a28 <dhcp_parse_reply+0x374>
 1817a04:	01c06134 	movhi	r7,388
 1817a08:	39c32004 	addi	r7,r7,3200
 1817a0c:	01816484 	movi	r6,1426
 1817a10:	01406134 	movhi	r5,388
 1817a14:	29435204 	addi	r5,r5,3400
 1817a18:	01006134 	movhi	r4,388
 1817a1c:	21032a04 	addi	r4,r4,3240
 1817a20:	1800b240 	call	1800b24 <printf>
 1817a24:	003fff06 	br	1817a24 <__ram_exceptions_end+0xff807734>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 1817a28:	e0bff803 	ldbu	r2,-32(fp)
 1817a2c:	10c03fcc 	andi	r3,r2,255
 1817a30:	18c00270 	cmpltui	r3,r3,9
 1817a34:	1800011e 	bne	r3,zero,1817a3c <dhcp_parse_reply+0x388>
 1817a38:	00800204 	movi	r2,8
 1817a3c:	e0bff845 	stb	r2,-31(fp)
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 1817a40:	e0fff803 	ldbu	r3,-32(fp)
 1817a44:	e0bff843 	ldbu	r2,-31(fp)
 1817a48:	1880092e 	bgeu	r3,r2,1817a70 <dhcp_parse_reply+0x3bc>
 1817a4c:	01c06134 	movhi	r7,388
 1817a50:	39c32004 	addi	r7,r7,3200
 1817a54:	01816544 	movi	r6,1429
 1817a58:	01406134 	movhi	r5,388
 1817a5c:	29434d04 	addi	r5,r5,3380
 1817a60:	01006134 	movhi	r4,388
 1817a64:	21032a04 	addi	r4,r4,3240
 1817a68:	1800b240 	call	1800b24 <printf>
 1817a6c:	003fff06 	br	1817a6c <__ram_exceptions_end+0xff80777c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 1817a70:	00800204 	movi	r2,8
 1817a74:	e0bff915 	stw	r2,-28(fp)
        break;
 1817a78:	00005b06 	br	1817be8 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 1817a7c:	e0bff803 	ldbu	r2,-32(fp)
 1817a80:	10800120 	cmpeqi	r2,r2,4
 1817a84:	1000091e 	bne	r2,zero,1817aac <dhcp_parse_reply+0x3f8>
 1817a88:	01c06134 	movhi	r7,388
 1817a8c:	39c32004 	addi	r7,r7,3200
 1817a90:	01816644 	movi	r6,1433
 1817a94:	01406134 	movhi	r5,388
 1817a98:	29434a04 	addi	r5,r5,3368
 1817a9c:	01006134 	movhi	r4,388
 1817aa0:	21032a04 	addi	r4,r4,3240
 1817aa4:	1800b240 	call	1800b24 <printf>
 1817aa8:	003fff06 	br	1817aa8 <__ram_exceptions_end+0xff8077b8>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 1817aac:	008000c4 	movi	r2,3
 1817ab0:	e0bff915 	stw	r2,-28(fp)
        break;
 1817ab4:	00004c06 	br	1817be8 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 1817ab8:	e0bff803 	ldbu	r2,-32(fp)
 1817abc:	10800060 	cmpeqi	r2,r2,1
 1817ac0:	1000091e 	bne	r2,zero,1817ae8 <dhcp_parse_reply+0x434>
 1817ac4:	01c06134 	movhi	r7,388
 1817ac8:	39c32004 	addi	r7,r7,3200
 1817acc:	01816744 	movi	r6,1437
 1817ad0:	01406134 	movhi	r5,388
 1817ad4:	29435604 	addi	r5,r5,3416
 1817ad8:	01006134 	movhi	r4,388
 1817adc:	21032a04 	addi	r4,r4,3240
 1817ae0:	1800b240 	call	1800b24 <printf>
 1817ae4:	003fff06 	br	1817ae4 <__ram_exceptions_end+0xff8077f4>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 1817ae8:	e03ff915 	stw	zero,-28(fp)
        break;
 1817aec:	00003e06 	br	1817be8 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 1817af0:	e0bff803 	ldbu	r2,-32(fp)
 1817af4:	10800060 	cmpeqi	r2,r2,1
 1817af8:	1000091e 	bne	r2,zero,1817b20 <dhcp_parse_reply+0x46c>
 1817afc:	01c06134 	movhi	r7,388
 1817b00:	39c32004 	addi	r7,r7,3200
 1817b04:	01816844 	movi	r6,1441
 1817b08:	01406134 	movhi	r5,388
 1817b0c:	29435604 	addi	r5,r5,3416
 1817b10:	01006134 	movhi	r4,388
 1817b14:	21032a04 	addi	r4,r4,3240
 1817b18:	1800b240 	call	1800b24 <printf>
 1817b1c:	003fff06 	br	1817b1c <__ram_exceptions_end+0xff80782c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 1817b20:	00800044 	movi	r2,1
 1817b24:	e0bff915 	stw	r2,-28(fp)
        break;
 1817b28:	00002f06 	br	1817be8 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 1817b2c:	e0bff803 	ldbu	r2,-32(fp)
 1817b30:	10800120 	cmpeqi	r2,r2,4
 1817b34:	1000091e 	bne	r2,zero,1817b5c <dhcp_parse_reply+0x4a8>
 1817b38:	01c06134 	movhi	r7,388
 1817b3c:	39c32004 	addi	r7,r7,3200
 1817b40:	01816944 	movi	r6,1445
 1817b44:	01406134 	movhi	r5,388
 1817b48:	29434a04 	addi	r5,r5,3368
 1817b4c:	01006134 	movhi	r4,388
 1817b50:	21032a04 	addi	r4,r4,3240
 1817b54:	1800b240 	call	1800b24 <printf>
 1817b58:	003fff06 	br	1817b58 <__ram_exceptions_end+0xff807868>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 1817b5c:	00800084 	movi	r2,2
 1817b60:	e0bff915 	stw	r2,-28(fp)
        break;
 1817b64:	00002006 	br	1817be8 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 1817b68:	e0bff803 	ldbu	r2,-32(fp)
 1817b6c:	10800120 	cmpeqi	r2,r2,4
 1817b70:	1000091e 	bne	r2,zero,1817b98 <dhcp_parse_reply+0x4e4>
 1817b74:	01c06134 	movhi	r7,388
 1817b78:	39c32004 	addi	r7,r7,3200
 1817b7c:	01816a44 	movi	r6,1449
 1817b80:	01406134 	movhi	r5,388
 1817b84:	29434a04 	addi	r5,r5,3368
 1817b88:	01006134 	movhi	r4,388
 1817b8c:	21032a04 	addi	r4,r4,3240
 1817b90:	1800b240 	call	1800b24 <printf>
 1817b94:	003fff06 	br	1817b94 <__ram_exceptions_end+0xff8078a4>
        decode_idx = DHCP_OPTION_IDX_T1;
 1817b98:	00800104 	movi	r2,4
 1817b9c:	e0bff915 	stw	r2,-28(fp)
        break;
 1817ba0:	00001106 	br	1817be8 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 1817ba4:	e0bff803 	ldbu	r2,-32(fp)
 1817ba8:	10800120 	cmpeqi	r2,r2,4
 1817bac:	1000091e 	bne	r2,zero,1817bd4 <dhcp_parse_reply+0x520>
 1817bb0:	01c06134 	movhi	r7,388
 1817bb4:	39c32004 	addi	r7,r7,3200
 1817bb8:	01816b44 	movi	r6,1453
 1817bbc:	01406134 	movhi	r5,388
 1817bc0:	29434a04 	addi	r5,r5,3368
 1817bc4:	01006134 	movhi	r4,388
 1817bc8:	21032a04 	addi	r4,r4,3240
 1817bcc:	1800b240 	call	1800b24 <printf>
 1817bd0:	003fff06 	br	1817bd0 <__ram_exceptions_end+0xff8078e0>
        decode_idx = DHCP_OPTION_IDX_T2;
 1817bd4:	00800144 	movi	r2,5
 1817bd8:	e0bff915 	stw	r2,-28(fp)
        break;
 1817bdc:	00000206 	br	1817be8 <dhcp_parse_reply+0x534>
      default:
        decode_len = 0;
 1817be0:	e03ff845 	stb	zero,-31(fp)
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
 1817be4:	0001883a 	nop
    }
    offset += len + 2;
 1817be8:	e0fff803 	ldbu	r3,-32(fp)
 1817bec:	e0bff30b 	ldhu	r2,-52(fp)
 1817bf0:	1885883a 	add	r2,r3,r2
 1817bf4:	10800084 	addi	r2,r2,2
 1817bf8:	e0bff30d 	sth	r2,-52(fp)
    if (decode_len > 0) {
 1817bfc:	e0bff843 	ldbu	r2,-31(fp)
 1817c00:	10007b26 	beq	r2,zero,1817df0 <dhcp_parse_reply+0x73c>
      u32_t value = 0;
 1817c04:	e03ffd15 	stw	zero,-12(fp)
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
 1817c08:	00806134 	movhi	r2,388
 1817c0c:	109e6804 	addi	r2,r2,31136
 1817c10:	e0fff917 	ldw	r3,-28(fp)
 1817c14:	10c5883a 	add	r2,r2,r3
 1817c18:	10800003 	ldbu	r2,0(r2)
 1817c1c:	10803fcc 	andi	r2,r2,255
 1817c20:	1000731e 	bne	r2,zero,1817df0 <dhcp_parse_reply+0x73c>
        copy_len = LWIP_MIN(decode_len, 4);
 1817c24:	e0bff843 	ldbu	r2,-31(fp)
 1817c28:	10800128 	cmpgeui	r2,r2,4
 1817c2c:	1000021e 	bne	r2,zero,1817c38 <dhcp_parse_reply+0x584>
 1817c30:	e0bff843 	ldbu	r2,-31(fp)
 1817c34:	00000106 	br	1817c3c <dhcp_parse_reply+0x588>
 1817c38:	00800104 	movi	r2,4
 1817c3c:	e0bffb0d 	sth	r2,-20(fp)
        pbuf_copy_partial(q, &value, copy_len, val_offset);
 1817c40:	e0fffb0b 	ldhu	r3,-20(fp)
 1817c44:	e13ffa0b 	ldhu	r4,-24(fp)
 1817c48:	e0bffd04 	addi	r2,fp,-12
 1817c4c:	200f883a 	mov	r7,r4
 1817c50:	180d883a 	mov	r6,r3
 1817c54:	100b883a 	mov	r5,r2
 1817c58:	e13ff517 	ldw	r4,-44(fp)
 1817c5c:	181a8280 	call	181a828 <pbuf_copy_partial>
        if (decode_len > 4) {
 1817c60:	e0bff843 	ldbu	r2,-31(fp)
 1817c64:	10800170 	cmpltui	r2,r2,5
 1817c68:	1000311e 	bne	r2,zero,1817d30 <dhcp_parse_reply+0x67c>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 1817c6c:	e0bff843 	ldbu	r2,-31(fp)
 1817c70:	108000cc 	andi	r2,r2,3
 1817c74:	10803fcc 	andi	r2,r2,255
 1817c78:	10000926 	beq	r2,zero,1817ca0 <dhcp_parse_reply+0x5ec>
 1817c7c:	01c06134 	movhi	r7,388
 1817c80:	39c32004 	addi	r7,r7,3200
 1817c84:	01817004 	movi	r6,1472
 1817c88:	01406134 	movhi	r5,388
 1817c8c:	29435904 	addi	r5,r5,3428
 1817c90:	01006134 	movhi	r4,388
 1817c94:	21032a04 	addi	r4,r4,3240
 1817c98:	1800b240 	call	1800b24 <printf>
 1817c9c:	003fff06 	br	1817c9c <__ram_exceptions_end+0xff8079ac>
          dhcp_got_option(dhcp, decode_idx);
 1817ca0:	00806134 	movhi	r2,388
 1817ca4:	109e6804 	addi	r2,r2,31136
 1817ca8:	e0fff917 	ldw	r3,-28(fp)
 1817cac:	10c5883a 	add	r2,r2,r3
 1817cb0:	00c00044 	movi	r3,1
 1817cb4:	10c00005 	stb	r3,0(r2)
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
 1817cb8:	e0bffd17 	ldw	r2,-12(fp)
 1817cbc:	1006d63a 	srli	r3,r2,24
 1817cc0:	e0bffd17 	ldw	r2,-12(fp)
 1817cc4:	1004d23a 	srli	r2,r2,8
 1817cc8:	10bfc00c 	andi	r2,r2,65280
 1817ccc:	1886b03a 	or	r3,r3,r2
 1817cd0:	e0bffd17 	ldw	r2,-12(fp)
 1817cd4:	10bfc00c 	andi	r2,r2,65280
 1817cd8:	1004923a 	slli	r2,r2,8
 1817cdc:	1886b03a 	or	r3,r3,r2
 1817ce0:	e0bffd17 	ldw	r2,-12(fp)
 1817ce4:	1004963a 	slli	r2,r2,24
 1817ce8:	1888b03a 	or	r4,r3,r2
 1817cec:	00806134 	movhi	r2,388
 1817cf0:	109e6b04 	addi	r2,r2,31148
 1817cf4:	e0fff917 	ldw	r3,-28(fp)
 1817cf8:	18c7883a 	add	r3,r3,r3
 1817cfc:	18c7883a 	add	r3,r3,r3
 1817d00:	10c5883a 	add	r2,r2,r3
 1817d04:	11000015 	stw	r4,0(r2)
          decode_len -= 4;
 1817d08:	e0bff843 	ldbu	r2,-31(fp)
 1817d0c:	10bfff04 	addi	r2,r2,-4
 1817d10:	e0bff845 	stb	r2,-31(fp)
          val_offset += 4;
 1817d14:	e0bffa0b 	ldhu	r2,-24(fp)
 1817d18:	10800104 	addi	r2,r2,4
 1817d1c:	e0bffa0d 	sth	r2,-24(fp)
          decode_idx++;
 1817d20:	e0bff917 	ldw	r2,-28(fp)
 1817d24:	10800044 	addi	r2,r2,1
 1817d28:	e0bff915 	stw	r2,-28(fp)
          goto decode_next;
 1817d2c:	003fb606 	br	1817c08 <__ram_exceptions_end+0xff807918>
        } else if (decode_len == 4) {
 1817d30:	e0bff843 	ldbu	r2,-31(fp)
 1817d34:	10800118 	cmpnei	r2,r2,4
 1817d38:	10000f1e 	bne	r2,zero,1817d78 <dhcp_parse_reply+0x6c4>
          value = ntohl(value);
 1817d3c:	e0bffd17 	ldw	r2,-12(fp)
 1817d40:	1006d63a 	srli	r3,r2,24
 1817d44:	e0bffd17 	ldw	r2,-12(fp)
 1817d48:	1004d23a 	srli	r2,r2,8
 1817d4c:	10bfc00c 	andi	r2,r2,65280
 1817d50:	1886b03a 	or	r3,r3,r2
 1817d54:	e0bffd17 	ldw	r2,-12(fp)
 1817d58:	10bfc00c 	andi	r2,r2,65280
 1817d5c:	1004923a 	slli	r2,r2,8
 1817d60:	1886b03a 	or	r3,r3,r2
 1817d64:	e0bffd17 	ldw	r2,-12(fp)
 1817d68:	1004963a 	slli	r2,r2,24
 1817d6c:	1884b03a 	or	r2,r3,r2
 1817d70:	e0bffd15 	stw	r2,-12(fp)
 1817d74:	00001006 	br	1817db8 <dhcp_parse_reply+0x704>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 1817d78:	e0bff843 	ldbu	r2,-31(fp)
 1817d7c:	10800060 	cmpeqi	r2,r2,1
 1817d80:	1000091e 	bne	r2,zero,1817da8 <dhcp_parse_reply+0x6f4>
 1817d84:	01c06134 	movhi	r7,388
 1817d88:	39c32004 	addi	r7,r7,3200
 1817d8c:	01817284 	movi	r6,1482
 1817d90:	01406134 	movhi	r5,388
 1817d94:	29435e04 	addi	r5,r5,3448
 1817d98:	01006134 	movhi	r4,388
 1817d9c:	21032a04 	addi	r4,r4,3240
 1817da0:	1800b240 	call	1800b24 <printf>
 1817da4:	003fff06 	br	1817da4 <__ram_exceptions_end+0xff807ab4>
          value = ((u8_t*)&value)[0];
 1817da8:	e0bffd04 	addi	r2,fp,-12
 1817dac:	10800003 	ldbu	r2,0(r2)
 1817db0:	10803fcc 	andi	r2,r2,255
 1817db4:	e0bffd15 	stw	r2,-12(fp)
        }
        dhcp_got_option(dhcp, decode_idx);
 1817db8:	00806134 	movhi	r2,388
 1817dbc:	109e6804 	addi	r2,r2,31136
 1817dc0:	e0fff917 	ldw	r3,-28(fp)
 1817dc4:	10c5883a 	add	r2,r2,r3
 1817dc8:	00c00044 	movi	r3,1
 1817dcc:	10c00005 	stb	r3,0(r2)
        dhcp_set_option_value(dhcp, decode_idx, value);
 1817dd0:	e13ffd17 	ldw	r4,-12(fp)
 1817dd4:	00806134 	movhi	r2,388
 1817dd8:	109e6b04 	addi	r2,r2,31148
 1817ddc:	e0fff917 	ldw	r3,-28(fp)
 1817de0:	18c7883a 	add	r3,r3,r3
 1817de4:	18c7883a 	add	r3,r3,r3
 1817de8:	10c5883a 	add	r2,r2,r3
 1817dec:	11000015 	stw	r4,0(r2)
      }
    }
    if (offset >= q->len) {
 1817df0:	e0bff517 	ldw	r2,-44(fp)
 1817df4:	1080028b 	ldhu	r2,10(r2)
 1817df8:	10bfffcc 	andi	r2,r2,65535
 1817dfc:	e0fff30b 	ldhu	r3,-52(fp)
 1817e00:	18801536 	bltu	r3,r2,1817e58 <dhcp_parse_reply+0x7a4>
      offset -= q->len;
 1817e04:	e0bff517 	ldw	r2,-44(fp)
 1817e08:	1080028b 	ldhu	r2,10(r2)
 1817e0c:	e0fff30b 	ldhu	r3,-52(fp)
 1817e10:	1885c83a 	sub	r2,r3,r2
 1817e14:	e0bff30d 	sth	r2,-52(fp)
      offset_max -= q->len;
 1817e18:	e0bff517 	ldw	r2,-44(fp)
 1817e1c:	1080028b 	ldhu	r2,10(r2)
 1817e20:	e0fff38b 	ldhu	r3,-50(fp)
 1817e24:	1885c83a 	sub	r2,r3,r2
 1817e28:	e0bff38d 	sth	r2,-50(fp)
      if ((offset < offset_max) && offset_max) {
 1817e2c:	e0fff30b 	ldhu	r3,-52(fp)
 1817e30:	e0bff38b 	ldhu	r2,-50(fp)
 1817e34:	1880142e 	bgeu	r3,r2,1817e88 <dhcp_parse_reply+0x7d4>
 1817e38:	e0bff38b 	ldhu	r2,-50(fp)
 1817e3c:	10001226 	beq	r2,zero,1817e88 <dhcp_parse_reply+0x7d4>
        q = q->next;
 1817e40:	e0bff517 	ldw	r2,-44(fp)
 1817e44:	10800017 	ldw	r2,0(r2)
 1817e48:	e0bff515 	stw	r2,-44(fp)
        LWIP_ASSERT("next pbuf was null", q);
        options = (u8_t*)q->payload;
 1817e4c:	e0bff517 	ldw	r2,-44(fp)
 1817e50:	10800117 	ldw	r2,4(r2)
 1817e54:	e0bff215 	stw	r2,-56(fp)
  }
  offset = options_idx;
  offset_max = options_idx_max;
  options = (u8_t*)q->payload;
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
 1817e58:	e0bff517 	ldw	r2,-44(fp)
 1817e5c:	10000a26 	beq	r2,zero,1817e88 <dhcp_parse_reply+0x7d4>
 1817e60:	e0bff30b 	ldhu	r2,-52(fp)
 1817e64:	e0fff217 	ldw	r3,-56(fp)
 1817e68:	1885883a 	add	r2,r3,r2
 1817e6c:	10800003 	ldbu	r2,0(r2)
 1817e70:	10803fcc 	andi	r2,r2,255
 1817e74:	10803fe0 	cmpeqi	r2,r2,255
 1817e78:	1000031e 	bne	r2,zero,1817e88 <dhcp_parse_reply+0x7d4>
 1817e7c:	e0fff30b 	ldhu	r3,-52(fp)
 1817e80:	e0bff38b 	ldhu	r2,-50(fp)
 1817e84:	18be4b36 	bltu	r3,r2,18177b4 <__ram_exceptions_end+0xff8074c4>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 1817e88:	00806134 	movhi	r2,388
 1817e8c:	109e6804 	addi	r2,r2,31136
 1817e90:	10800003 	ldbu	r2,0(r2)
 1817e94:	10803fcc 	andi	r2,r2,255
 1817e98:	10001a26 	beq	r2,zero,1817f04 <dhcp_parse_reply+0x850>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 1817e9c:	00806134 	movhi	r2,388
 1817ea0:	109e6b04 	addi	r2,r2,31148
 1817ea4:	10800017 	ldw	r2,0(r2)
 1817ea8:	e0bffc15 	stw	r2,-16(fp)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 1817eac:	00806134 	movhi	r2,388
 1817eb0:	109e6804 	addi	r2,r2,31136
 1817eb4:	10000005 	stb	zero,0(r2)
    if (overload == DHCP_OVERLOAD_FILE) {
 1817eb8:	e0bffc17 	ldw	r2,-16(fp)
 1817ebc:	10800058 	cmpnei	r2,r2,1
 1817ec0:	1000031e 	bne	r2,zero,1817ed0 <dhcp_parse_reply+0x81c>
      parse_file_as_options = 1;
 1817ec4:	00800044 	movi	r2,1
 1817ec8:	e0bff615 	stw	r2,-40(fp)
 1817ecc:	00000d06 	br	1817f04 <dhcp_parse_reply+0x850>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 1817ed0:	e0bffc17 	ldw	r2,-16(fp)
 1817ed4:	10800098 	cmpnei	r2,r2,2
 1817ed8:	1000031e 	bne	r2,zero,1817ee8 <dhcp_parse_reply+0x834>
      parse_sname_as_options = 1;
 1817edc:	00800044 	movi	r2,1
 1817ee0:	e0bff715 	stw	r2,-36(fp)
 1817ee4:	00000706 	br	1817f04 <dhcp_parse_reply+0x850>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 1817ee8:	e0bffc17 	ldw	r2,-16(fp)
 1817eec:	108000d8 	cmpnei	r2,r2,3
 1817ef0:	1000041e 	bne	r2,zero,1817f04 <dhcp_parse_reply+0x850>
      parse_sname_as_options = 1;
 1817ef4:	00800044 	movi	r2,1
 1817ef8:	e0bff715 	stw	r2,-36(fp)
      parse_file_as_options = 1;
 1817efc:	00800044 	movi	r2,1
 1817f00:	e0bff615 	stw	r2,-40(fp)
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 1817f04:	e0bff617 	ldw	r2,-40(fp)
 1817f08:	10000626 	beq	r2,zero,1817f24 <dhcp_parse_reply+0x870>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 1817f0c:	e03ff615 	stw	zero,-40(fp)
    options_idx = DHCP_FILE_OFS;
 1817f10:	00801b04 	movi	r2,108
 1817f14:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 1817f18:	00803b04 	movi	r2,236
 1817f1c:	e0bff48d 	sth	r2,-46(fp)
    goto again;
 1817f20:	003e0106 	br	1817728 <__ram_exceptions_end+0xff807438>
  } else if (parse_sname_as_options) {
 1817f24:	e0bff717 	ldw	r2,-36(fp)
 1817f28:	10000626 	beq	r2,zero,1817f44 <dhcp_parse_reply+0x890>
    parse_sname_as_options = 0;
 1817f2c:	e03ff715 	stw	zero,-36(fp)
    options_idx = DHCP_SNAME_OFS;
 1817f30:	00800b04 	movi	r2,44
 1817f34:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 1817f38:	00801b04 	movi	r2,108
 1817f3c:	e0bff48d 	sth	r2,-46(fp)
    goto again;
 1817f40:	003df906 	br	1817728 <__ram_exceptions_end+0xff807438>
  }
  return ERR_OK;
 1817f44:	0005883a 	mov	r2,zero
}
 1817f48:	e037883a 	mov	sp,fp
 1817f4c:	dfc00117 	ldw	ra,4(sp)
 1817f50:	df000017 	ldw	fp,0(sp)
 1817f54:	dec00204 	addi	sp,sp,8
 1817f58:	f800283a 	ret

01817f5c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
{
 1817f5c:	defff404 	addi	sp,sp,-48
 1817f60:	dfc00b15 	stw	ra,44(sp)
 1817f64:	df000a15 	stw	fp,40(sp)
 1817f68:	df000a04 	addi	fp,sp,40
 1817f6c:	e13ffb15 	stw	r4,-20(fp)
 1817f70:	e17ffc15 	stw	r5,-16(fp)
 1817f74:	e1bffd15 	stw	r6,-12(fp)
 1817f78:	e1fffe15 	stw	r7,-8(fp)
 1817f7c:	e0800217 	ldw	r2,8(fp)
 1817f80:	e0bfff0d 	sth	r2,-4(fp)
  struct netif *netif = (struct netif *)arg;
 1817f84:	e0bffb17 	ldw	r2,-20(fp)
 1817f88:	e0bff715 	stw	r2,-36(fp)
  struct dhcp *dhcp = netif->dhcp;
 1817f8c:	e0bff717 	ldw	r2,-36(fp)
 1817f90:	10800a17 	ldw	r2,40(r2)
 1817f94:	e0bff815 	stw	r2,-32(fp)
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 1817f98:	e0bffd17 	ldw	r2,-12(fp)
 1817f9c:	10800117 	ldw	r2,4(r2)
 1817fa0:	e0bff915 	stw	r2,-28(fp)
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 1817fa4:	e0bffd17 	ldw	r2,-12(fp)
 1817fa8:	1080028b 	ldhu	r2,10(r2)
 1817fac:	10bfffcc 	andi	r2,r2,65535
 1817fb0:	10800b28 	cmpgeui	r2,r2,44
 1817fb4:	1000aa26 	beq	r2,zero,1818260 <dhcp_recv+0x304>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 1817fb8:	e0bff917 	ldw	r2,-28(fp)
 1817fbc:	10800003 	ldbu	r2,0(r2)
 1817fc0:	10803fcc 	andi	r2,r2,255
 1817fc4:	108000a0 	cmpeqi	r2,r2,2
 1817fc8:	1000a726 	beq	r2,zero,1818268 <dhcp_recv+0x30c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
 1817fcc:	e03ff605 	stb	zero,-40(fp)
 1817fd0:	00001006 	br	1818014 <dhcp_recv+0xb8>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 1817fd4:	e0bff603 	ldbu	r2,-40(fp)
 1817fd8:	e0fff717 	ldw	r3,-36(fp)
 1817fdc:	1885883a 	add	r2,r3,r2
 1817fe0:	10800cc4 	addi	r2,r2,51
 1817fe4:	11000003 	ldbu	r4,0(r2)
 1817fe8:	e0bff603 	ldbu	r2,-40(fp)
 1817fec:	e0fff917 	ldw	r3,-28(fp)
 1817ff0:	1885883a 	add	r2,r3,r2
 1817ff4:	10800704 	addi	r2,r2,28
 1817ff8:	10800003 	ldbu	r2,0(r2)
 1817ffc:	20c03fcc 	andi	r3,r4,255
 1818000:	10803fcc 	andi	r2,r2,255
 1818004:	18809a1e 	bne	r3,r2,1818270 <dhcp_recv+0x314>
  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
 1818008:	e0bff603 	ldbu	r2,-40(fp)
 181800c:	10800044 	addi	r2,r2,1
 1818010:	e0bff605 	stb	r2,-40(fp)
 1818014:	e0bff717 	ldw	r2,-36(fp)
 1818018:	10800c83 	ldbu	r2,50(r2)
 181801c:	10803fcc 	andi	r2,r2,255
 1818020:	e0fff603 	ldbu	r3,-40(fp)
 1818024:	18bfeb36 	bltu	r3,r2,1817fd4 <__ram_exceptions_end+0xff807ce4>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
 1818028:	e0bff917 	ldw	r2,-28(fp)
 181802c:	10c00103 	ldbu	r3,4(r2)
 1818030:	11000143 	ldbu	r4,5(r2)
 1818034:	2008923a 	slli	r4,r4,8
 1818038:	20c6b03a 	or	r3,r4,r3
 181803c:	11000183 	ldbu	r4,6(r2)
 1818040:	2008943a 	slli	r4,r4,16
 1818044:	20c6b03a 	or	r3,r4,r3
 1818048:	108001c3 	ldbu	r2,7(r2)
 181804c:	1004963a 	slli	r2,r2,24
 1818050:	10c4b03a 	or	r2,r2,r3
 1818054:	1006d63a 	srli	r3,r2,24
 1818058:	e0bff917 	ldw	r2,-28(fp)
 181805c:	11000103 	ldbu	r4,4(r2)
 1818060:	11400143 	ldbu	r5,5(r2)
 1818064:	280a923a 	slli	r5,r5,8
 1818068:	2908b03a 	or	r4,r5,r4
 181806c:	11400183 	ldbu	r5,6(r2)
 1818070:	280a943a 	slli	r5,r5,16
 1818074:	2908b03a 	or	r4,r5,r4
 1818078:	108001c3 	ldbu	r2,7(r2)
 181807c:	1004963a 	slli	r2,r2,24
 1818080:	1104b03a 	or	r2,r2,r4
 1818084:	1004d23a 	srli	r2,r2,8
 1818088:	10bfc00c 	andi	r2,r2,65280
 181808c:	1886b03a 	or	r3,r3,r2
 1818090:	e0bff917 	ldw	r2,-28(fp)
 1818094:	11000103 	ldbu	r4,4(r2)
 1818098:	11400143 	ldbu	r5,5(r2)
 181809c:	280a923a 	slli	r5,r5,8
 18180a0:	2908b03a 	or	r4,r5,r4
 18180a4:	11400183 	ldbu	r5,6(r2)
 18180a8:	280a943a 	slli	r5,r5,16
 18180ac:	2908b03a 	or	r4,r5,r4
 18180b0:	108001c3 	ldbu	r2,7(r2)
 18180b4:	1004963a 	slli	r2,r2,24
 18180b8:	1104b03a 	or	r2,r2,r4
 18180bc:	10bfc00c 	andi	r2,r2,65280
 18180c0:	1004923a 	slli	r2,r2,8
 18180c4:	1886b03a 	or	r3,r3,r2
 18180c8:	e0bff917 	ldw	r2,-28(fp)
 18180cc:	11000103 	ldbu	r4,4(r2)
 18180d0:	11400143 	ldbu	r5,5(r2)
 18180d4:	280a923a 	slli	r5,r5,8
 18180d8:	2908b03a 	or	r4,r5,r4
 18180dc:	11400183 	ldbu	r5,6(r2)
 18180e0:	280a943a 	slli	r5,r5,16
 18180e4:	2908b03a 	or	r4,r5,r4
 18180e8:	108001c3 	ldbu	r2,7(r2)
 18180ec:	1004963a 	slli	r2,r2,24
 18180f0:	1104b03a 	or	r2,r2,r4
 18180f4:	1004963a 	slli	r2,r2,24
 18180f8:	1886b03a 	or	r3,r3,r2
 18180fc:	e0bff817 	ldw	r2,-32(fp)
 1818100:	10800017 	ldw	r2,0(r2)
 1818104:	18805c1e 	bne	r3,r2,1818278 <dhcp_recv+0x31c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 1818108:	e17ffd17 	ldw	r5,-12(fp)
 181810c:	e13ff817 	ldw	r4,-32(fp)
 1818110:	18176b40 	call	18176b4 <dhcp_parse_reply>
 1818114:	10803fcc 	andi	r2,r2,255
 1818118:	1080201c 	xori	r2,r2,128
 181811c:	10bfe004 	addi	r2,r2,-128
 1818120:	1000571e 	bne	r2,zero,1818280 <dhcp_recv+0x324>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 1818124:	00806134 	movhi	r2,388
 1818128:	109e6804 	addi	r2,r2,31136
 181812c:	10800043 	ldbu	r2,1(r2)
 1818130:	10803fcc 	andi	r2,r2,255
 1818134:	10005426 	beq	r2,zero,1818288 <dhcp_recv+0x32c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 1818138:	00806134 	movhi	r2,388
 181813c:	109e6b04 	addi	r2,r2,31148
 1818140:	10800117 	ldw	r2,4(r2)
 1818144:	e0bffa05 	stb	r2,-24(fp)
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 1818148:	e0bffa03 	ldbu	r2,-24(fp)
 181814c:	10800158 	cmpnei	r2,r2,5
 1818150:	10001c1e 	bne	r2,zero,18181c4 <dhcp_recv+0x268>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
 1818154:	e0bff817 	ldw	r2,-32(fp)
 1818158:	10800303 	ldbu	r2,12(r2)
 181815c:	10803fcc 	andi	r2,r2,255
 1818160:	10800058 	cmpnei	r2,r2,1
 1818164:	1000051e 	bne	r2,zero,181817c <dhcp_recv+0x220>
      dhcp_handle_ack(netif);
 1818168:	e13ff717 	ldw	r4,-36(fp)
 181816c:	1815ef80 	call	1815ef8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
 1818170:	e13ff717 	ldw	r4,-36(fp)
 1818174:	181571c0 	call	181571c <dhcp_check>
 1818178:	00004406 	br	181828c <dhcp_recv+0x330>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
 181817c:	e0bff817 	ldw	r2,-32(fp)
 1818180:	10800303 	ldbu	r2,12(r2)
 1818184:	10803fcc 	andi	r2,r2,255
 1818188:	108000e0 	cmpeqi	r2,r2,3
 181818c:	10000a1e 	bne	r2,zero,18181b8 <dhcp_recv+0x25c>
 1818190:	e0bff817 	ldw	r2,-32(fp)
 1818194:	10800303 	ldbu	r2,12(r2)
 1818198:	10803fcc 	andi	r2,r2,255
 181819c:	10800120 	cmpeqi	r2,r2,4
 18181a0:	1000051e 	bne	r2,zero,18181b8 <dhcp_recv+0x25c>
 18181a4:	e0bff817 	ldw	r2,-32(fp)
 18181a8:	10800303 	ldbu	r2,12(r2)
 18181ac:	10803fcc 	andi	r2,r2,255
 18181b0:	10800158 	cmpnei	r2,r2,5
 18181b4:	1000351e 	bne	r2,zero,181828c <dhcp_recv+0x330>
      dhcp_bind(netif);
 18181b8:	e13ff717 	ldw	r4,-36(fp)
 18181bc:	18169900 	call	1816990 <dhcp_bind>
 18181c0:	00003206 	br	181828c <dhcp_recv+0x330>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 18181c4:	e0bffa03 	ldbu	r2,-24(fp)
 18181c8:	10800198 	cmpnei	r2,r2,6
 18181cc:	1000171e 	bne	r2,zero,181822c <dhcp_recv+0x2d0>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
 18181d0:	e0bff817 	ldw	r2,-32(fp)
 18181d4:	10800303 	ldbu	r2,12(r2)
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 18181d8:	10803fcc 	andi	r2,r2,255
 18181dc:	108000e0 	cmpeqi	r2,r2,3
 18181e0:	10000f1e 	bne	r2,zero,1818220 <dhcp_recv+0x2c4>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
 18181e4:	e0bff817 	ldw	r2,-32(fp)
 18181e8:	10800303 	ldbu	r2,12(r2)
 18181ec:	10803fcc 	andi	r2,r2,255
 18181f0:	10800060 	cmpeqi	r2,r2,1
 18181f4:	10000a1e 	bne	r2,zero,1818220 <dhcp_recv+0x2c4>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
 18181f8:	e0bff817 	ldw	r2,-32(fp)
 18181fc:	10800303 	ldbu	r2,12(r2)
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
 1818200:	10803fcc 	andi	r2,r2,255
 1818204:	10800120 	cmpeqi	r2,r2,4
 1818208:	1000051e 	bne	r2,zero,1818220 <dhcp_recv+0x2c4>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
 181820c:	e0bff817 	ldw	r2,-32(fp)
 1818210:	10800303 	ldbu	r2,12(r2)
 1818214:	10803fcc 	andi	r2,r2,255
 1818218:	10800158 	cmpnei	r2,r2,5
 181821c:	1000031e 	bne	r2,zero,181822c <dhcp_recv+0x2d0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 1818220:	e13ff717 	ldw	r4,-36(fp)
 1818224:	18156c80 	call	18156c8 <dhcp_handle_nak>
 1818228:	00001806 	br	181828c <dhcp_recv+0x330>
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
 181822c:	e0bffa03 	ldbu	r2,-24(fp)
 1818230:	10800098 	cmpnei	r2,r2,2
 1818234:	1000151e 	bne	r2,zero,181828c <dhcp_recv+0x330>
 1818238:	e0bff817 	ldw	r2,-32(fp)
 181823c:	10800303 	ldbu	r2,12(r2)
 1818240:	10803fcc 	andi	r2,r2,255
 1818244:	10800198 	cmpnei	r2,r2,6
 1818248:	1000101e 	bne	r2,zero,181828c <dhcp_recv+0x330>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
 181824c:	e0bff817 	ldw	r2,-32(fp)
 1818250:	1000068d 	sth	zero,26(r2)
    /* remember offered lease */
    dhcp_handle_offer(netif);
 1818254:	e13ff717 	ldw	r4,-36(fp)
 1818258:	18157bc0 	call	18157bc <dhcp_handle_offer>
 181825c:	00000b06 	br	181828c <dhcp_recv+0x330>

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
 1818260:	0001883a 	nop
 1818264:	00000906 	br	181828c <dhcp_recv+0x330>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
 1818268:	0001883a 	nop
 181826c:	00000706 	br	181828c <dhcp_recv+0x330>
  for (i = 0; i < netif->hwaddr_len; i++) {
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
        ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
 1818270:	0001883a 	nop
 1818274:	00000506 	br	181828c <dhcp_recv+0x330>
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
 1818278:	0001883a 	nop
 181827c:	00000306 	br	181828c <dhcp_recv+0x330>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
 1818280:	0001883a 	nop
 1818284:	00000106 	br	181828c <dhcp_recv+0x330>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
 1818288:	0001883a 	nop
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
 181828c:	e0bff817 	ldw	r2,-32(fp)
 1818290:	10000215 	stw	zero,8(r2)
  pbuf_free(p);
 1818294:	e13ffd17 	ldw	r4,-12(fp)
 1818298:	181a22c0 	call	181a22c <pbuf_free>
}
 181829c:	0001883a 	nop
 18182a0:	e037883a 	mov	sp,fp
 18182a4:	dfc00117 	ldw	ra,4(sp)
 18182a8:	df000017 	ldw	fp,0(sp)
 18182ac:	dec00204 	addi	sp,sp,8
 18182b0:	f800283a 	ret

018182b4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 18182b4:	defffa04 	addi	sp,sp,-24
 18182b8:	dfc00515 	stw	ra,20(sp)
 18182bc:	df000415 	stw	fp,16(sp)
 18182c0:	df000404 	addi	fp,sp,16
 18182c4:	e13ffd15 	stw	r4,-12(fp)
 18182c8:	e17ffe15 	stw	r5,-8(fp)
 18182cc:	3005883a 	mov	r2,r6
 18182d0:	e0bfff05 	stb	r2,-4(fp)
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 18182d4:	e0bffd17 	ldw	r2,-12(fp)
 18182d8:	1000091e 	bne	r2,zero,1818300 <dhcp_create_msg+0x4c>
 18182dc:	01c06134 	movhi	r7,388
 18182e0:	39c32004 	addi	r7,r7,3200
 18182e4:	0181a244 	movi	r6,1673
 18182e8:	01406134 	movhi	r5,388
 18182ec:	29436304 	addi	r5,r5,3468
 18182f0:	01006134 	movhi	r4,388
 18182f4:	21032a04 	addi	r4,r4,3240
 18182f8:	1800b240 	call	1800b24 <printf>
 18182fc:	003fff06 	br	18182fc <__ram_exceptions_end+0xff80800c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 1818300:	e0bffe17 	ldw	r2,-8(fp)
 1818304:	1000091e 	bne	r2,zero,181832c <dhcp_create_msg+0x78>
 1818308:	01c06134 	movhi	r7,388
 181830c:	39c32004 	addi	r7,r7,3200
 1818310:	0181a284 	movi	r6,1674
 1818314:	01406134 	movhi	r5,388
 1818318:	29436b04 	addi	r5,r5,3500
 181831c:	01006134 	movhi	r4,388
 1818320:	21032a04 	addi	r4,r4,3240
 1818324:	1800b240 	call	1800b24 <printf>
 1818328:	003fff06 	br	1818328 <__ram_exceptions_end+0xff808038>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 181832c:	000d883a 	mov	r6,zero
 1818330:	01404d04 	movi	r5,308
 1818334:	0009883a 	mov	r4,zero
 1818338:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181833c:	1007883a 	mov	r3,r2
 1818340:	e0bffe17 	ldw	r2,-8(fp)
 1818344:	10c00415 	stw	r3,16(r2)
  if (dhcp->p_out == NULL) {
 1818348:	e0bffe17 	ldw	r2,-8(fp)
 181834c:	10800417 	ldw	r2,16(r2)
 1818350:	1000021e 	bne	r2,zero,181835c <dhcp_create_msg+0xa8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 1818354:	00bfffc4 	movi	r2,-1
 1818358:	00013206 	br	1818824 <dhcp_create_msg+0x570>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* reuse transaction identifier in retransmissions */
  if (dhcp->tries == 0) {
 181835c:	e0bffe17 	ldw	r2,-8(fp)
 1818360:	10800343 	ldbu	r2,13(r2)
 1818364:	10803fcc 	andi	r2,r2,255
 1818368:	1000031e 	bne	r2,zero,1818378 <dhcp_create_msg+0xc4>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
 181836c:	d0a00c17 	ldw	r2,-32720(gp)
 1818370:	10800044 	addi	r2,r2,1
 1818374:	d0a00c15 	stw	r2,-32720(gp)
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
  }
  dhcp->xid = xid;
 1818378:	d0e00c17 	ldw	r3,-32720(gp)
 181837c:	e0bffe17 	ldw	r2,-8(fp)
 1818380:	10c00015 	stw	r3,0(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 1818384:	e0bffe17 	ldw	r2,-8(fp)
 1818388:	10800417 	ldw	r2,16(r2)
 181838c:	10c00117 	ldw	r3,4(r2)
 1818390:	e0bffe17 	ldw	r2,-8(fp)
 1818394:	10c00515 	stw	r3,20(r2)

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 1818398:	e0bffe17 	ldw	r2,-8(fp)
 181839c:	10800517 	ldw	r2,20(r2)
 18183a0:	00c00044 	movi	r3,1
 18183a4:	10c00005 	stb	r3,0(r2)
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 18183a8:	e0bffe17 	ldw	r2,-8(fp)
 18183ac:	10800517 	ldw	r2,20(r2)
 18183b0:	00c00044 	movi	r3,1
 18183b4:	10c00045 	stb	r3,1(r2)
  dhcp->msg_out->hlen = netif->hwaddr_len;
 18183b8:	e0bffe17 	ldw	r2,-8(fp)
 18183bc:	10800517 	ldw	r2,20(r2)
 18183c0:	e0fffd17 	ldw	r3,-12(fp)
 18183c4:	18c00c83 	ldbu	r3,50(r3)
 18183c8:	10c00085 	stb	r3,2(r2)
  dhcp->msg_out->hops = 0;
 18183cc:	e0bffe17 	ldw	r2,-8(fp)
 18183d0:	10800517 	ldw	r2,20(r2)
 18183d4:	100000c5 	stb	zero,3(r2)
  dhcp->msg_out->xid = htonl(dhcp->xid);
 18183d8:	e0bffe17 	ldw	r2,-8(fp)
 18183dc:	10800517 	ldw	r2,20(r2)
 18183e0:	e0fffe17 	ldw	r3,-8(fp)
 18183e4:	18c00017 	ldw	r3,0(r3)
 18183e8:	1808d63a 	srli	r4,r3,24
 18183ec:	e0fffe17 	ldw	r3,-8(fp)
 18183f0:	18c00017 	ldw	r3,0(r3)
 18183f4:	1806d23a 	srli	r3,r3,8
 18183f8:	18ffc00c 	andi	r3,r3,65280
 18183fc:	20c8b03a 	or	r4,r4,r3
 1818400:	e0fffe17 	ldw	r3,-8(fp)
 1818404:	18c00017 	ldw	r3,0(r3)
 1818408:	18ffc00c 	andi	r3,r3,65280
 181840c:	1806923a 	slli	r3,r3,8
 1818410:	20c8b03a 	or	r4,r4,r3
 1818414:	e0fffe17 	ldw	r3,-8(fp)
 1818418:	18c00017 	ldw	r3,0(r3)
 181841c:	1806963a 	slli	r3,r3,24
 1818420:	20c6b03a 	or	r3,r4,r3
 1818424:	19803fcc 	andi	r6,r3,255
 1818428:	11000103 	ldbu	r4,4(r2)
 181842c:	2008703a 	and	r4,r4,zero
 1818430:	200b883a 	mov	r5,r4
 1818434:	3009883a 	mov	r4,r6
 1818438:	2908b03a 	or	r4,r5,r4
 181843c:	11000105 	stb	r4,4(r2)
 1818440:	1808d23a 	srli	r4,r3,8
 1818444:	21803fcc 	andi	r6,r4,255
 1818448:	11000143 	ldbu	r4,5(r2)
 181844c:	2008703a 	and	r4,r4,zero
 1818450:	200b883a 	mov	r5,r4
 1818454:	3009883a 	mov	r4,r6
 1818458:	2908b03a 	or	r4,r5,r4
 181845c:	11000145 	stb	r4,5(r2)
 1818460:	1808d43a 	srli	r4,r3,16
 1818464:	21803fcc 	andi	r6,r4,255
 1818468:	11000183 	ldbu	r4,6(r2)
 181846c:	2008703a 	and	r4,r4,zero
 1818470:	200b883a 	mov	r5,r4
 1818474:	3009883a 	mov	r4,r6
 1818478:	2908b03a 	or	r4,r5,r4
 181847c:	11000185 	stb	r4,6(r2)
 1818480:	180ad63a 	srli	r5,r3,24
 1818484:	10c001c3 	ldbu	r3,7(r2)
 1818488:	1806703a 	and	r3,r3,zero
 181848c:	1809883a 	mov	r4,r3
 1818490:	2807883a 	mov	r3,r5
 1818494:	20c6b03a 	or	r3,r4,r3
 1818498:	10c001c5 	stb	r3,7(r2)
  dhcp->msg_out->secs = 0;
 181849c:	e0bffe17 	ldw	r2,-8(fp)
 18184a0:	10800517 	ldw	r2,20(r2)
 18184a4:	10c00203 	ldbu	r3,8(r2)
 18184a8:	1806703a 	and	r3,r3,zero
 18184ac:	10c00205 	stb	r3,8(r2)
 18184b0:	10c00243 	ldbu	r3,9(r2)
 18184b4:	1806703a 	and	r3,r3,zero
 18184b8:	10c00245 	stb	r3,9(r2)
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 18184bc:	e0bffe17 	ldw	r2,-8(fp)
 18184c0:	10800517 	ldw	r2,20(r2)
 18184c4:	10c00283 	ldbu	r3,10(r2)
 18184c8:	1806703a 	and	r3,r3,zero
 18184cc:	10c00285 	stb	r3,10(r2)
 18184d0:	10c002c3 	ldbu	r3,11(r2)
 18184d4:	1806703a 	and	r3,r3,zero
 18184d8:	10c002c5 	stb	r3,11(r2)
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
 18184dc:	e0bffe17 	ldw	r2,-8(fp)
 18184e0:	10800517 	ldw	r2,20(r2)
 18184e4:	10c00303 	ldbu	r3,12(r2)
 18184e8:	1806703a 	and	r3,r3,zero
 18184ec:	10c00305 	stb	r3,12(r2)
 18184f0:	10c00343 	ldbu	r3,13(r2)
 18184f4:	1806703a 	and	r3,r3,zero
 18184f8:	10c00345 	stb	r3,13(r2)
 18184fc:	10c00383 	ldbu	r3,14(r2)
 1818500:	1806703a 	and	r3,r3,zero
 1818504:	10c00385 	stb	r3,14(r2)
 1818508:	10c003c3 	ldbu	r3,15(r2)
 181850c:	1806703a 	and	r3,r3,zero
 1818510:	10c003c5 	stb	r3,15(r2)
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
 1818514:	e0bfff03 	ldbu	r2,-4(fp)
 1818518:	10800220 	cmpeqi	r2,r2,8
 181851c:	1000101e 	bne	r2,zero,1818560 <dhcp_create_msg+0x2ac>
 1818520:	e0bfff03 	ldbu	r2,-4(fp)
 1818524:	10800120 	cmpeqi	r2,r2,4
 1818528:	10000d1e 	bne	r2,zero,1818560 <dhcp_create_msg+0x2ac>
 181852c:	e0bfff03 	ldbu	r2,-4(fp)
 1818530:	108000d8 	cmpnei	r2,r2,3
 1818534:	10002c1e 	bne	r2,zero,18185e8 <dhcp_create_msg+0x334>
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
 1818538:	e0bffe17 	ldw	r2,-8(fp)
 181853c:	10800303 	ldbu	r2,12(r2)
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
 1818540:	10803fcc 	andi	r2,r2,255
 1818544:	10800160 	cmpeqi	r2,r2,5
 1818548:	1000051e 	bne	r2,zero,1818560 <dhcp_create_msg+0x2ac>
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
 181854c:	e0bffe17 	ldw	r2,-8(fp)
 1818550:	10800303 	ldbu	r2,12(r2)
 1818554:	10803fcc 	andi	r2,r2,255
 1818558:	10800118 	cmpnei	r2,r2,4
 181855c:	1000221e 	bne	r2,zero,18185e8 <dhcp_create_msg+0x334>
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
 1818560:	e0bffe17 	ldw	r2,-8(fp)
 1818564:	10800517 	ldw	r2,20(r2)
 1818568:	e0fffd17 	ldw	r3,-12(fp)
 181856c:	18c00117 	ldw	r3,4(r3)
 1818570:	19803fcc 	andi	r6,r3,255
 1818574:	11000303 	ldbu	r4,12(r2)
 1818578:	2008703a 	and	r4,r4,zero
 181857c:	200b883a 	mov	r5,r4
 1818580:	3009883a 	mov	r4,r6
 1818584:	2908b03a 	or	r4,r5,r4
 1818588:	11000305 	stb	r4,12(r2)
 181858c:	1808d23a 	srli	r4,r3,8
 1818590:	21803fcc 	andi	r6,r4,255
 1818594:	11000343 	ldbu	r4,13(r2)
 1818598:	2008703a 	and	r4,r4,zero
 181859c:	200b883a 	mov	r5,r4
 18185a0:	3009883a 	mov	r4,r6
 18185a4:	2908b03a 	or	r4,r5,r4
 18185a8:	11000345 	stb	r4,13(r2)
 18185ac:	1808d43a 	srli	r4,r3,16
 18185b0:	21803fcc 	andi	r6,r4,255
 18185b4:	11000383 	ldbu	r4,14(r2)
 18185b8:	2008703a 	and	r4,r4,zero
 18185bc:	200b883a 	mov	r5,r4
 18185c0:	3009883a 	mov	r4,r6
 18185c4:	2908b03a 	or	r4,r5,r4
 18185c8:	11000385 	stb	r4,14(r2)
 18185cc:	180ad63a 	srli	r5,r3,24
 18185d0:	10c003c3 	ldbu	r3,15(r2)
 18185d4:	1806703a 	and	r3,r3,zero
 18185d8:	1809883a 	mov	r4,r3
 18185dc:	2807883a 	mov	r3,r5
 18185e0:	20c6b03a 	or	r3,r4,r3
 18185e4:	10c003c5 	stb	r3,15(r2)
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
 18185e8:	e0bffe17 	ldw	r2,-8(fp)
 18185ec:	10800517 	ldw	r2,20(r2)
 18185f0:	10c00403 	ldbu	r3,16(r2)
 18185f4:	1806703a 	and	r3,r3,zero
 18185f8:	10c00405 	stb	r3,16(r2)
 18185fc:	10c00443 	ldbu	r3,17(r2)
 1818600:	1806703a 	and	r3,r3,zero
 1818604:	10c00445 	stb	r3,17(r2)
 1818608:	10c00483 	ldbu	r3,18(r2)
 181860c:	1806703a 	and	r3,r3,zero
 1818610:	10c00485 	stb	r3,18(r2)
 1818614:	10c004c3 	ldbu	r3,19(r2)
 1818618:	1806703a 	and	r3,r3,zero
 181861c:	10c004c5 	stb	r3,19(r2)
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
 1818620:	e0bffe17 	ldw	r2,-8(fp)
 1818624:	10800517 	ldw	r2,20(r2)
 1818628:	10c00503 	ldbu	r3,20(r2)
 181862c:	1806703a 	and	r3,r3,zero
 1818630:	10c00505 	stb	r3,20(r2)
 1818634:	10c00543 	ldbu	r3,21(r2)
 1818638:	1806703a 	and	r3,r3,zero
 181863c:	10c00545 	stb	r3,21(r2)
 1818640:	10c00583 	ldbu	r3,22(r2)
 1818644:	1806703a 	and	r3,r3,zero
 1818648:	10c00585 	stb	r3,22(r2)
 181864c:	10c005c3 	ldbu	r3,23(r2)
 1818650:	1806703a 	and	r3,r3,zero
 1818654:	10c005c5 	stb	r3,23(r2)
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
 1818658:	e0bffe17 	ldw	r2,-8(fp)
 181865c:	10800517 	ldw	r2,20(r2)
 1818660:	10c00603 	ldbu	r3,24(r2)
 1818664:	1806703a 	and	r3,r3,zero
 1818668:	10c00605 	stb	r3,24(r2)
 181866c:	10c00643 	ldbu	r3,25(r2)
 1818670:	1806703a 	and	r3,r3,zero
 1818674:	10c00645 	stb	r3,25(r2)
 1818678:	10c00683 	ldbu	r3,26(r2)
 181867c:	1806703a 	and	r3,r3,zero
 1818680:	10c00685 	stb	r3,26(r2)
 1818684:	10c006c3 	ldbu	r3,27(r2)
 1818688:	1806703a 	and	r3,r3,zero
 181868c:	10c006c5 	stb	r3,27(r2)
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 1818690:	e03ffc0d 	sth	zero,-16(fp)
 1818694:	00001606 	br	18186f0 <dhcp_create_msg+0x43c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
 1818698:	e0bffe17 	ldw	r2,-8(fp)
 181869c:	11000517 	ldw	r4,20(r2)
 18186a0:	e0fffc0b 	ldhu	r3,-16(fp)
 18186a4:	e0bffd17 	ldw	r2,-12(fp)
 18186a8:	10800c83 	ldbu	r2,50(r2)
 18186ac:	10803fcc 	andi	r2,r2,255
 18186b0:	10bfffcc 	andi	r2,r2,65535
 18186b4:	e17ffc0b 	ldhu	r5,-16(fp)
 18186b8:	2880062e 	bgeu	r5,r2,18186d4 <dhcp_create_msg+0x420>
 18186bc:	e0bffc0b 	ldhu	r2,-16(fp)
 18186c0:	e17ffd17 	ldw	r5,-12(fp)
 18186c4:	2885883a 	add	r2,r5,r2
 18186c8:	10800cc4 	addi	r2,r2,51
 18186cc:	10800003 	ldbu	r2,0(r2)
 18186d0:	00000106 	br	18186d8 <dhcp_create_msg+0x424>
 18186d4:	0005883a 	mov	r2,zero
 18186d8:	20c7883a 	add	r3,r4,r3
 18186dc:	18c00704 	addi	r3,r3,28
 18186e0:	18800005 	stb	r2,0(r3)
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 18186e4:	e0bffc0b 	ldhu	r2,-16(fp)
 18186e8:	10800044 	addi	r2,r2,1
 18186ec:	e0bffc0d 	sth	r2,-16(fp)
 18186f0:	e0bffc0b 	ldhu	r2,-16(fp)
 18186f4:	10800430 	cmpltui	r2,r2,16
 18186f8:	103fe71e 	bne	r2,zero,1818698 <__ram_exceptions_end+0xff8083a8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 18186fc:	e03ffc0d 	sth	zero,-16(fp)
 1818700:	00000906 	br	1818728 <dhcp_create_msg+0x474>
    dhcp->msg_out->sname[i] = 0;
 1818704:	e0bffe17 	ldw	r2,-8(fp)
 1818708:	10c00517 	ldw	r3,20(r2)
 181870c:	e0bffc0b 	ldhu	r2,-16(fp)
 1818710:	1885883a 	add	r2,r3,r2
 1818714:	10800b04 	addi	r2,r2,44
 1818718:	10000005 	stb	zero,0(r2)
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 181871c:	e0bffc0b 	ldhu	r2,-16(fp)
 1818720:	10800044 	addi	r2,r2,1
 1818724:	e0bffc0d 	sth	r2,-16(fp)
 1818728:	e0bffc0b 	ldhu	r2,-16(fp)
 181872c:	10801030 	cmpltui	r2,r2,64
 1818730:	103ff41e 	bne	r2,zero,1818704 <__ram_exceptions_end+0xff808414>
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 1818734:	e03ffc0d 	sth	zero,-16(fp)
 1818738:	00000906 	br	1818760 <dhcp_create_msg+0x4ac>
    dhcp->msg_out->file[i] = 0;
 181873c:	e0bffe17 	ldw	r2,-8(fp)
 1818740:	10c00517 	ldw	r3,20(r2)
 1818744:	e0bffc0b 	ldhu	r2,-16(fp)
 1818748:	1885883a 	add	r2,r3,r2
 181874c:	10801b04 	addi	r2,r2,108
 1818750:	10000005 	stb	zero,0(r2)
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 1818754:	e0bffc0b 	ldhu	r2,-16(fp)
 1818758:	10800044 	addi	r2,r2,1
 181875c:	e0bffc0d 	sth	r2,-16(fp)
 1818760:	e0bffc0b 	ldhu	r2,-16(fp)
 1818764:	10802030 	cmpltui	r2,r2,128
 1818768:	103ff41e 	bne	r2,zero,181873c <__ram_exceptions_end+0xff80844c>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 181876c:	e0bffe17 	ldw	r2,-8(fp)
 1818770:	10800517 	ldw	r2,20(r2)
 1818774:	10c03b03 	ldbu	r3,236(r2)
 1818778:	1806703a 	and	r3,r3,zero
 181877c:	18c018d4 	ori	r3,r3,99
 1818780:	10c03b05 	stb	r3,236(r2)
 1818784:	10c03b43 	ldbu	r3,237(r2)
 1818788:	1806703a 	and	r3,r3,zero
 181878c:	1809883a 	mov	r4,r3
 1818790:	00ffe084 	movi	r3,-126
 1818794:	20c6b03a 	or	r3,r4,r3
 1818798:	10c03b45 	stb	r3,237(r2)
 181879c:	10c03b83 	ldbu	r3,238(r2)
 18187a0:	1806703a 	and	r3,r3,zero
 18187a4:	18c014d4 	ori	r3,r3,83
 18187a8:	10c03b85 	stb	r3,238(r2)
 18187ac:	10c03bc3 	ldbu	r3,239(r2)
 18187b0:	1806703a 	and	r3,r3,zero
 18187b4:	18c018d4 	ori	r3,r3,99
 18187b8:	10c03bc5 	stb	r3,239(r2)
  dhcp->options_out_len = 0;
 18187bc:	e0bffe17 	ldw	r2,-8(fp)
 18187c0:	1000060d 	sth	zero,24(r2)
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 18187c4:	e03ffc0d 	sth	zero,-16(fp)
 18187c8:	00000a06 	br	18187f4 <dhcp_create_msg+0x540>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 18187cc:	e0bffe17 	ldw	r2,-8(fp)
 18187d0:	10c00517 	ldw	r3,20(r2)
 18187d4:	e0bffc0b 	ldhu	r2,-16(fp)
 18187d8:	e13ffc0b 	ldhu	r4,-16(fp)
 18187dc:	1885883a 	add	r2,r3,r2
 18187e0:	10803c04 	addi	r2,r2,240
 18187e4:	11000005 	stb	r4,0(r2)
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 18187e8:	e0bffc0b 	ldhu	r2,-16(fp)
 18187ec:	10800044 	addi	r2,r2,1
 18187f0:	e0bffc0d 	sth	r2,-16(fp)
 18187f4:	e0bffc0b 	ldhu	r2,-16(fp)
 18187f8:	10801130 	cmpltui	r2,r2,68
 18187fc:	103ff31e 	bne	r2,zero,18187cc <__ram_exceptions_end+0xff8084dc>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 1818800:	01800044 	movi	r6,1
 1818804:	01400d44 	movi	r5,53
 1818808:	e13ffe17 	ldw	r4,-8(fp)
 181880c:	18173380 	call	1817338 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 1818810:	e0bfff03 	ldbu	r2,-4(fp)
 1818814:	100b883a 	mov	r5,r2
 1818818:	e13ffe17 	ldw	r4,-8(fp)
 181881c:	18173d40 	call	18173d4 <dhcp_option_byte>
  return ERR_OK;
 1818820:	0005883a 	mov	r2,zero
}
 1818824:	e037883a 	mov	sp,fp
 1818828:	dfc00117 	ldw	ra,4(sp)
 181882c:	df000017 	ldw	fp,0(sp)
 1818830:	dec00204 	addi	sp,sp,8
 1818834:	f800283a 	ret

01818838 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 1818838:	defffd04 	addi	sp,sp,-12
 181883c:	dfc00215 	stw	ra,8(sp)
 1818840:	df000115 	stw	fp,4(sp)
 1818844:	df000104 	addi	fp,sp,4
 1818848:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 181884c:	e0bfff17 	ldw	r2,-4(fp)
 1818850:	1000091e 	bne	r2,zero,1818878 <dhcp_delete_msg+0x40>
 1818854:	01c06134 	movhi	r7,388
 1818858:	39c32004 	addi	r7,r7,3200
 181885c:	0181b584 	movi	r6,1750
 1818860:	01406134 	movhi	r5,388
 1818864:	29437304 	addi	r5,r5,3532
 1818868:	01006134 	movhi	r4,388
 181886c:	21032a04 	addi	r4,r4,3240
 1818870:	1800b240 	call	1800b24 <printf>
 1818874:	003fff06 	br	1818874 <__ram_exceptions_end+0xff808584>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
 1818878:	e0bfff17 	ldw	r2,-4(fp)
 181887c:	10800417 	ldw	r2,16(r2)
 1818880:	10000426 	beq	r2,zero,1818894 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 1818884:	e0bfff17 	ldw	r2,-4(fp)
 1818888:	10800417 	ldw	r2,16(r2)
 181888c:	1009883a 	mov	r4,r2
 1818890:	181a22c0 	call	181a22c <pbuf_free>
  }
  dhcp->p_out = NULL;
 1818894:	e0bfff17 	ldw	r2,-4(fp)
 1818898:	10000415 	stw	zero,16(r2)
  dhcp->msg_out = NULL;
 181889c:	e0bfff17 	ldw	r2,-4(fp)
 18188a0:	10000515 	stw	zero,20(r2)
}
 18188a4:	0001883a 	nop
 18188a8:	e037883a 	mov	sp,fp
 18188ac:	dfc00117 	ldw	ra,4(sp)
 18188b0:	df000017 	ldw	fp,0(sp)
 18188b4:	dec00204 	addi	sp,sp,8
 18188b8:	f800283a 	ret

018188bc <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 18188bc:	defffd04 	addi	sp,sp,-12
 18188c0:	dfc00215 	stw	ra,8(sp)
 18188c4:	df000115 	stw	fp,4(sp)
 18188c8:	df000104 	addi	fp,sp,4
 18188cc:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 18188d0:	e0bfff17 	ldw	r2,-4(fp)
 18188d4:	1000091e 	bne	r2,zero,18188fc <dhcp_option_trailer+0x40>
 18188d8:	01c06134 	movhi	r7,388
 18188dc:	39c32004 	addi	r7,r7,3200
 18188e0:	0181bac4 	movi	r6,1771
 18188e4:	01406134 	movhi	r5,388
 18188e8:	29437b04 	addi	r5,r5,3564
 18188ec:	01006134 	movhi	r4,388
 18188f0:	21032a04 	addi	r4,r4,3240
 18188f4:	1800b240 	call	1800b24 <printf>
 18188f8:	003fff06 	br	18188f8 <__ram_exceptions_end+0xff808608>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 18188fc:	e0bfff17 	ldw	r2,-4(fp)
 1818900:	10c00517 	ldw	r3,20(r2)
 1818904:	e0bfff17 	ldw	r2,-4(fp)
 1818908:	1080060b 	ldhu	r2,24(r2)
 181890c:	11000044 	addi	r4,r2,1
 1818910:	200b883a 	mov	r5,r4
 1818914:	e13fff17 	ldw	r4,-4(fp)
 1818918:	2140060d 	sth	r5,24(r4)
 181891c:	10bfffcc 	andi	r2,r2,65535
 1818920:	1885883a 	add	r2,r3,r2
 1818924:	10803c04 	addi	r2,r2,240
 1818928:	00ffffc4 	movi	r3,-1
 181892c:	10c00005 	stb	r3,0(r2)
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 1818930:	00000c06 	br	1818964 <dhcp_option_trailer+0xa8>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 1818934:	e0bfff17 	ldw	r2,-4(fp)
 1818938:	10c00517 	ldw	r3,20(r2)
 181893c:	e0bfff17 	ldw	r2,-4(fp)
 1818940:	1080060b 	ldhu	r2,24(r2)
 1818944:	11000044 	addi	r4,r2,1
 1818948:	200b883a 	mov	r5,r4
 181894c:	e13fff17 	ldw	r4,-4(fp)
 1818950:	2140060d 	sth	r5,24(r4)
 1818954:	10bfffcc 	andi	r2,r2,65535
 1818958:	1885883a 	add	r2,r3,r2
 181895c:	10803c04 	addi	r2,r2,240
 1818960:	10000005 	stb	zero,0(r2)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 1818964:	e0bfff17 	ldw	r2,-4(fp)
 1818968:	1080060b 	ldhu	r2,24(r2)
 181896c:	10bfffcc 	andi	r2,r2,65535
 1818970:	10801130 	cmpltui	r2,r2,68
 1818974:	1000051e 	bne	r2,zero,181898c <dhcp_option_trailer+0xd0>
 1818978:	e0bfff17 	ldw	r2,-4(fp)
 181897c:	1080060b 	ldhu	r2,24(r2)
 1818980:	10bfffcc 	andi	r2,r2,65535
 1818984:	108000cc 	andi	r2,r2,3
 1818988:	10000526 	beq	r2,zero,18189a0 <dhcp_option_trailer+0xe4>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 181898c:	e0bfff17 	ldw	r2,-4(fp)
 1818990:	1080060b 	ldhu	r2,24(r2)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 1818994:	10bfffcc 	andi	r2,r2,65535
 1818998:	10801130 	cmpltui	r2,r2,68
 181899c:	103fe51e 	bne	r2,zero,1818934 <__ram_exceptions_end+0xff808644>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 18189a0:	0001883a 	nop
 18189a4:	e037883a 	mov	sp,fp
 18189a8:	dfc00117 	ldw	ra,4(sp)
 18189ac:	df000017 	ldw	fp,0(sp)
 18189b0:	dec00204 	addi	sp,sp,8
 18189b4:	f800283a 	ret

018189b8 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
 18189b8:	defffc04 	addi	sp,sp,-16
 18189bc:	df000315 	stw	fp,12(sp)
 18189c0:	df000304 	addi	fp,sp,12
 18189c4:	e13ffe15 	stw	r4,-8(fp)
 18189c8:	e17fff15 	stw	r5,-4(fp)
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 18189cc:	e0bffe17 	ldw	r2,-8(fp)
 18189d0:	e0bffd15 	stw	r2,-12(fp)

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 18189d4:	e0bffe17 	ldw	r2,-8(fp)
 18189d8:	10bfffe0 	cmpeqi	r2,r2,-1
 18189dc:	1000021e 	bne	r2,zero,18189e8 <ip4_addr_isbroadcast+0x30>
 18189e0:	e0bffe17 	ldw	r2,-8(fp)
 18189e4:	1000021e 	bne	r2,zero,18189f0 <ip4_addr_isbroadcast+0x38>
      (addr == IPADDR_ANY)) {
    return 1;
 18189e8:	00800044 	movi	r2,1
 18189ec:	00002106 	br	1818a74 <ip4_addr_isbroadcast+0xbc>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 18189f0:	e0bfff17 	ldw	r2,-4(fp)
 18189f4:	10800e43 	ldbu	r2,57(r2)
 18189f8:	10803fcc 	andi	r2,r2,255
 18189fc:	1080008c 	andi	r2,r2,2
 1818a00:	1000021e 	bne	r2,zero,1818a0c <ip4_addr_isbroadcast+0x54>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 1818a04:	0005883a 	mov	r2,zero
 1818a08:	00001a06 	br	1818a74 <ip4_addr_isbroadcast+0xbc>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 1818a0c:	e0bfff17 	ldw	r2,-4(fp)
 1818a10:	10c00117 	ldw	r3,4(r2)
 1818a14:	e0bffe17 	ldw	r2,-8(fp)
 1818a18:	1880021e 	bne	r3,r2,1818a24 <ip4_addr_isbroadcast+0x6c>
    return 0;
 1818a1c:	0005883a 	mov	r2,zero
 1818a20:	00001406 	br	1818a74 <ip4_addr_isbroadcast+0xbc>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 1818a24:	e0fffd17 	ldw	r3,-12(fp)
 1818a28:	e0bfff17 	ldw	r2,-4(fp)
 1818a2c:	10800117 	ldw	r2,4(r2)
 1818a30:	1886f03a 	xor	r3,r3,r2
 1818a34:	e0bfff17 	ldw	r2,-4(fp)
 1818a38:	10800217 	ldw	r2,8(r2)
 1818a3c:	1884703a 	and	r2,r3,r2
 1818a40:	10000b1e 	bne	r2,zero,1818a70 <ip4_addr_isbroadcast+0xb8>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 1818a44:	e0bfff17 	ldw	r2,-4(fp)
 1818a48:	10800217 	ldw	r2,8(r2)
 1818a4c:	0086303a 	nor	r3,zero,r2
 1818a50:	e0bffe17 	ldw	r2,-8(fp)
 1818a54:	1886703a 	and	r3,r3,r2
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
 1818a58:	e0bfff17 	ldw	r2,-4(fp)
 1818a5c:	10800217 	ldw	r2,8(r2)
 1818a60:	0084303a 	nor	r2,zero,r2
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 1818a64:	1880021e 	bne	r3,r2,1818a70 <ip4_addr_isbroadcast+0xb8>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
 1818a68:	00800044 	movi	r2,1
 1818a6c:	00000106 	br	1818a74 <ip4_addr_isbroadcast+0xbc>
  } else {
    return 0;
 1818a70:	0005883a 	mov	r2,zero
  }
}
 1818a74:	e037883a 	mov	sp,fp
 1818a78:	df000017 	ldw	fp,0(sp)
 1818a7c:	dec00104 	addi	sp,sp,4
 1818a80:	f800283a 	ret

01818a84 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
 1818a84:	defffc04 	addi	sp,sp,-16
 1818a88:	df000315 	stw	fp,12(sp)
 1818a8c:	df000304 	addi	fp,sp,12
 1818a90:	e13fff15 	stw	r4,-4(fp)
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
 1818a94:	e0bfff17 	ldw	r2,-4(fp)
 1818a98:	1006d63a 	srli	r3,r2,24
 1818a9c:	e0bfff17 	ldw	r2,-4(fp)
 1818aa0:	1004d23a 	srli	r2,r2,8
 1818aa4:	10bfc00c 	andi	r2,r2,65280
 1818aa8:	1886b03a 	or	r3,r3,r2
 1818aac:	e0bfff17 	ldw	r2,-4(fp)
 1818ab0:	10bfc00c 	andi	r2,r2,65280
 1818ab4:	1004923a 	slli	r2,r2,8
 1818ab8:	1886b03a 	or	r3,r3,r2
 1818abc:	e0bfff17 	ldw	r2,-4(fp)
 1818ac0:	1004963a 	slli	r2,r2,24
 1818ac4:	1884b03a 	or	r2,r3,r2
 1818ac8:	e0bffe15 	stw	r2,-8(fp)

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
 1818acc:	00a00034 	movhi	r2,32768
 1818ad0:	e0bffd15 	stw	r2,-12(fp)
 1818ad4:	00000706 	br	1818af4 <ip4_addr_netmask_valid+0x70>
    if ((nm_hostorder & mask) == 0) {
 1818ad8:	e0fffe17 	ldw	r3,-8(fp)
 1818adc:	e0bffd17 	ldw	r2,-12(fp)
 1818ae0:	1884703a 	and	r2,r3,r2
 1818ae4:	10000626 	beq	r2,zero,1818b00 <ip4_addr_netmask_valid+0x7c>
{
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
 1818ae8:	e0bffd17 	ldw	r2,-12(fp)
 1818aec:	1004d07a 	srli	r2,r2,1
 1818af0:	e0bffd15 	stw	r2,-12(fp)
 1818af4:	e0bffd17 	ldw	r2,-12(fp)
 1818af8:	103ff71e 	bne	r2,zero,1818ad8 <__ram_exceptions_end+0xff8087e8>
 1818afc:	00000b06 	br	1818b2c <ip4_addr_netmask_valid+0xa8>
    if ((nm_hostorder & mask) == 0) {
      break;
 1818b00:	0001883a 	nop
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
 1818b04:	00000906 	br	1818b2c <ip4_addr_netmask_valid+0xa8>
    if ((nm_hostorder & mask) != 0) {
 1818b08:	e0fffe17 	ldw	r3,-8(fp)
 1818b0c:	e0bffd17 	ldw	r2,-12(fp)
 1818b10:	1884703a 	and	r2,r3,r2
 1818b14:	10000226 	beq	r2,zero,1818b20 <ip4_addr_netmask_valid+0x9c>
      /* there is a one after the first zero -> invalid */
      return 0;
 1818b18:	0005883a 	mov	r2,zero
 1818b1c:	00000606 	br	1818b38 <ip4_addr_netmask_valid+0xb4>
    if ((nm_hostorder & mask) == 0) {
      break;
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
 1818b20:	e0bffd17 	ldw	r2,-12(fp)
 1818b24:	1004d07a 	srli	r2,r2,1
 1818b28:	e0bffd15 	stw	r2,-12(fp)
 1818b2c:	e0bffd17 	ldw	r2,-12(fp)
 1818b30:	103ff51e 	bne	r2,zero,1818b08 <__ram_exceptions_end+0xff808818>
      /* there is a one after the first zero -> invalid */
      return 0;
    }
  }
  /* no one after the first zero -> valid */
  return 1;
 1818b34:	00800044 	movi	r2,1
}
 1818b38:	e037883a 	mov	sp,fp
 1818b3c:	df000017 	ldw	fp,0(sp)
 1818b40:	dec00104 	addi	sp,sp,4
 1818b44:	f800283a 	ret

01818b48 <ipaddr_addr>:
 * @param cp IP address in ascii represenation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 1818b48:	defffc04 	addi	sp,sp,-16
 1818b4c:	dfc00315 	stw	ra,12(sp)
 1818b50:	df000215 	stw	fp,8(sp)
 1818b54:	df000204 	addi	fp,sp,8
 1818b58:	e13fff15 	stw	r4,-4(fp)
  ip_addr_t val;

  if (ipaddr_aton(cp, &val)) {
 1818b5c:	e17ffe04 	addi	r5,fp,-8
 1818b60:	e13fff17 	ldw	r4,-4(fp)
 1818b64:	1818b8c0 	call	1818b8c <ipaddr_aton>
 1818b68:	10000226 	beq	r2,zero,1818b74 <ipaddr_addr+0x2c>
    return ip4_addr_get_u32(&val);
 1818b6c:	e0bffe17 	ldw	r2,-8(fp)
 1818b70:	00000106 	br	1818b78 <ipaddr_addr+0x30>
  }
  return (IPADDR_NONE);
 1818b74:	00bfffc4 	movi	r2,-1
}
 1818b78:	e037883a 	mov	sp,fp
 1818b7c:	dfc00117 	ldw	ra,4(sp)
 1818b80:	df000017 	ldw	fp,0(sp)
 1818b84:	dec00204 	addi	sp,sp,8
 1818b88:	f800283a 	ret

01818b8c <ipaddr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ipaddr_aton(const char *cp, ip_addr_t *addr)
{
 1818b8c:	defff604 	addi	sp,sp,-40
 1818b90:	df000915 	stw	fp,36(sp)
 1818b94:	df000904 	addi	fp,sp,36
 1818b98:	e13ffe15 	stw	r4,-8(fp)
 1818b9c:	e17fff15 	stw	r5,-4(fp)
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 1818ba0:	e0bffa04 	addi	r2,fp,-24
 1818ba4:	e0bff915 	stw	r2,-28(fp)

  c = *cp;
 1818ba8:	e0bffe17 	ldw	r2,-8(fp)
 1818bac:	10800003 	ldbu	r2,0(r2)
 1818bb0:	e0bff845 	stb	r2,-31(fp)
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c))
 1818bb4:	e0bff843 	ldbu	r2,-31(fp)
 1818bb8:	10803fcc 	andi	r2,r2,255
 1818bbc:	10800c30 	cmpltui	r2,r2,48
 1818bc0:	1000041e 	bne	r2,zero,1818bd4 <ipaddr_aton+0x48>
 1818bc4:	e0bff843 	ldbu	r2,-31(fp)
 1818bc8:	10803fcc 	andi	r2,r2,255
 1818bcc:	10800eb0 	cmpltui	r2,r2,58
 1818bd0:	1000021e 	bne	r2,zero,1818bdc <ipaddr_aton+0x50>
      return (0);
 1818bd4:	0005883a 	mov	r2,zero
 1818bd8:	0000e606 	br	1818f74 <ipaddr_aton+0x3e8>
    val = 0;
 1818bdc:	e03ff715 	stw	zero,-36(fp)
    base = 10;
 1818be0:	00800284 	movi	r2,10
 1818be4:	e0bff805 	stb	r2,-32(fp)
    if (c == '0') {
 1818be8:	e0bff847 	ldb	r2,-31(fp)
 1818bec:	10800c18 	cmpnei	r2,r2,48
 1818bf0:	1000171e 	bne	r2,zero,1818c50 <ipaddr_aton+0xc4>
      c = *++cp;
 1818bf4:	e0bffe17 	ldw	r2,-8(fp)
 1818bf8:	10800044 	addi	r2,r2,1
 1818bfc:	e0bffe15 	stw	r2,-8(fp)
 1818c00:	e0bffe17 	ldw	r2,-8(fp)
 1818c04:	10800003 	ldbu	r2,0(r2)
 1818c08:	e0bff845 	stb	r2,-31(fp)
      if (c == 'x' || c == 'X') {
 1818c0c:	e0bff847 	ldb	r2,-31(fp)
 1818c10:	10801e20 	cmpeqi	r2,r2,120
 1818c14:	1000031e 	bne	r2,zero,1818c24 <ipaddr_aton+0x98>
 1818c18:	e0bff847 	ldb	r2,-31(fp)
 1818c1c:	10801618 	cmpnei	r2,r2,88
 1818c20:	1000091e 	bne	r2,zero,1818c48 <ipaddr_aton+0xbc>
        base = 16;
 1818c24:	00800404 	movi	r2,16
 1818c28:	e0bff805 	stb	r2,-32(fp)
        c = *++cp;
 1818c2c:	e0bffe17 	ldw	r2,-8(fp)
 1818c30:	10800044 	addi	r2,r2,1
 1818c34:	e0bffe15 	stw	r2,-8(fp)
 1818c38:	e0bffe17 	ldw	r2,-8(fp)
 1818c3c:	10800003 	ldbu	r2,0(r2)
 1818c40:	e0bff845 	stb	r2,-31(fp)
 1818c44:	00000206 	br	1818c50 <ipaddr_aton+0xc4>
      } else
        base = 8;
 1818c48:	00800204 	movi	r2,8
 1818c4c:	e0bff805 	stb	r2,-32(fp)
    }
    for (;;) {
      if (isdigit(c)) {
 1818c50:	e0bff843 	ldbu	r2,-31(fp)
 1818c54:	10803fcc 	andi	r2,r2,255
 1818c58:	10800c30 	cmpltui	r2,r2,48
 1818c5c:	1000121e 	bne	r2,zero,1818ca8 <ipaddr_aton+0x11c>
 1818c60:	e0bff843 	ldbu	r2,-31(fp)
 1818c64:	10803fcc 	andi	r2,r2,255
 1818c68:	10800ea8 	cmpgeui	r2,r2,58
 1818c6c:	10000e1e 	bne	r2,zero,1818ca8 <ipaddr_aton+0x11c>
        val = (val * base) + (int)(c - '0');
 1818c70:	e0fff803 	ldbu	r3,-32(fp)
 1818c74:	e0bff717 	ldw	r2,-36(fp)
 1818c78:	1887383a 	mul	r3,r3,r2
 1818c7c:	e0bff847 	ldb	r2,-31(fp)
 1818c80:	1885883a 	add	r2,r3,r2
 1818c84:	10bff404 	addi	r2,r2,-48
 1818c88:	e0bff715 	stw	r2,-36(fp)
        c = *++cp;
 1818c8c:	e0bffe17 	ldw	r2,-8(fp)
 1818c90:	10800044 	addi	r2,r2,1
 1818c94:	e0bffe15 	stw	r2,-8(fp)
 1818c98:	e0bffe17 	ldw	r2,-8(fp)
 1818c9c:	10800003 	ldbu	r2,0(r2)
 1818ca0:	e0bff845 	stb	r2,-31(fp)
 1818ca4:	00003306 	br	1818d74 <ipaddr_aton+0x1e8>
      } else if (base == 16 && isxdigit(c)) {
 1818ca8:	e0bff803 	ldbu	r2,-32(fp)
 1818cac:	10800418 	cmpnei	r2,r2,16
 1818cb0:	1000311e 	bne	r2,zero,1818d78 <ipaddr_aton+0x1ec>
 1818cb4:	e0bff843 	ldbu	r2,-31(fp)
 1818cb8:	10803fcc 	andi	r2,r2,255
 1818cbc:	10800c30 	cmpltui	r2,r2,48
 1818cc0:	1000041e 	bne	r2,zero,1818cd4 <ipaddr_aton+0x148>
 1818cc4:	e0bff843 	ldbu	r2,-31(fp)
 1818cc8:	10803fcc 	andi	r2,r2,255
 1818ccc:	10800eb0 	cmpltui	r2,r2,58
 1818cd0:	1000101e 	bne	r2,zero,1818d14 <ipaddr_aton+0x188>
 1818cd4:	e0bff843 	ldbu	r2,-31(fp)
 1818cd8:	10803fcc 	andi	r2,r2,255
 1818cdc:	10801870 	cmpltui	r2,r2,97
 1818ce0:	1000041e 	bne	r2,zero,1818cf4 <ipaddr_aton+0x168>
 1818ce4:	e0bff843 	ldbu	r2,-31(fp)
 1818ce8:	10803fcc 	andi	r2,r2,255
 1818cec:	108019f0 	cmpltui	r2,r2,103
 1818cf0:	1000081e 	bne	r2,zero,1818d14 <ipaddr_aton+0x188>
 1818cf4:	e0bff843 	ldbu	r2,-31(fp)
 1818cf8:	10803fcc 	andi	r2,r2,255
 1818cfc:	10801070 	cmpltui	r2,r2,65
 1818d00:	10001d1e 	bne	r2,zero,1818d78 <ipaddr_aton+0x1ec>
 1818d04:	e0bff843 	ldbu	r2,-31(fp)
 1818d08:	10803fcc 	andi	r2,r2,255
 1818d0c:	108011e8 	cmpgeui	r2,r2,71
 1818d10:	1000191e 	bne	r2,zero,1818d78 <ipaddr_aton+0x1ec>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
 1818d14:	e0bff717 	ldw	r2,-36(fp)
 1818d18:	1006913a 	slli	r3,r2,4
 1818d1c:	e0bff847 	ldb	r2,-31(fp)
 1818d20:	11000284 	addi	r4,r2,10
 1818d24:	e0bff843 	ldbu	r2,-31(fp)
 1818d28:	10803fcc 	andi	r2,r2,255
 1818d2c:	10801870 	cmpltui	r2,r2,97
 1818d30:	1000061e 	bne	r2,zero,1818d4c <ipaddr_aton+0x1c0>
 1818d34:	e0bff843 	ldbu	r2,-31(fp)
 1818d38:	10803fcc 	andi	r2,r2,255
 1818d3c:	10801ee8 	cmpgeui	r2,r2,123
 1818d40:	1000021e 	bne	r2,zero,1818d4c <ipaddr_aton+0x1c0>
 1818d44:	00801844 	movi	r2,97
 1818d48:	00000106 	br	1818d50 <ipaddr_aton+0x1c4>
 1818d4c:	00801044 	movi	r2,65
 1818d50:	2085c83a 	sub	r2,r4,r2
 1818d54:	1884b03a 	or	r2,r3,r2
 1818d58:	e0bff715 	stw	r2,-36(fp)
        c = *++cp;
 1818d5c:	e0bffe17 	ldw	r2,-8(fp)
 1818d60:	10800044 	addi	r2,r2,1
 1818d64:	e0bffe15 	stw	r2,-8(fp)
 1818d68:	e0bffe17 	ldw	r2,-8(fp)
 1818d6c:	10800003 	ldbu	r2,0(r2)
 1818d70:	e0bff845 	stb	r2,-31(fp)
      } else
        break;
    }
 1818d74:	003fb606 	br	1818c50 <__ram_exceptions_end+0xff808960>
    if (c == '.') {
 1818d78:	e0bff847 	ldb	r2,-31(fp)
 1818d7c:	10800b98 	cmpnei	r2,r2,46
 1818d80:	1000121e 	bne	r2,zero,1818dcc <ipaddr_aton+0x240>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 1818d84:	e0bffa04 	addi	r2,fp,-24
 1818d88:	10800304 	addi	r2,r2,12
 1818d8c:	e0fff917 	ldw	r3,-28(fp)
 1818d90:	18800236 	bltu	r3,r2,1818d9c <ipaddr_aton+0x210>
        return (0);
 1818d94:	0005883a 	mov	r2,zero
 1818d98:	00007606 	br	1818f74 <ipaddr_aton+0x3e8>
      }
      *pp++ = val;
 1818d9c:	e0bff917 	ldw	r2,-28(fp)
 1818da0:	10c00104 	addi	r3,r2,4
 1818da4:	e0fff915 	stw	r3,-28(fp)
 1818da8:	e0fff717 	ldw	r3,-36(fp)
 1818dac:	10c00015 	stw	r3,0(r2)
      c = *++cp;
 1818db0:	e0bffe17 	ldw	r2,-8(fp)
 1818db4:	10800044 	addi	r2,r2,1
 1818db8:	e0bffe15 	stw	r2,-8(fp)
 1818dbc:	e0bffe17 	ldw	r2,-8(fp)
 1818dc0:	10800003 	ldbu	r2,0(r2)
 1818dc4:	e0bff845 	stb	r2,-31(fp)
    } else
      break;
  }
 1818dc8:	003f7a06 	br	1818bb4 <__ram_exceptions_end+0xff8088c4>
        return (0);
      }
      *pp++ = val;
      c = *++cp;
    } else
      break;
 1818dcc:	0001883a 	nop
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 1818dd0:	e0bff847 	ldb	r2,-31(fp)
 1818dd4:	10001426 	beq	r2,zero,1818e28 <ipaddr_aton+0x29c>
 1818dd8:	e0bff847 	ldb	r2,-31(fp)
 1818ddc:	10800820 	cmpeqi	r2,r2,32
 1818de0:	1000111e 	bne	r2,zero,1818e28 <ipaddr_aton+0x29c>
 1818de4:	e0bff847 	ldb	r2,-31(fp)
 1818de8:	10800320 	cmpeqi	r2,r2,12
 1818dec:	10000e1e 	bne	r2,zero,1818e28 <ipaddr_aton+0x29c>
 1818df0:	e0bff847 	ldb	r2,-31(fp)
 1818df4:	108002a0 	cmpeqi	r2,r2,10
 1818df8:	10000b1e 	bne	r2,zero,1818e28 <ipaddr_aton+0x29c>
 1818dfc:	e0bff847 	ldb	r2,-31(fp)
 1818e00:	10800360 	cmpeqi	r2,r2,13
 1818e04:	1000081e 	bne	r2,zero,1818e28 <ipaddr_aton+0x29c>
 1818e08:	e0bff847 	ldb	r2,-31(fp)
 1818e0c:	10800260 	cmpeqi	r2,r2,9
 1818e10:	1000051e 	bne	r2,zero,1818e28 <ipaddr_aton+0x29c>
 1818e14:	e0bff847 	ldb	r2,-31(fp)
 1818e18:	108002e0 	cmpeqi	r2,r2,11
 1818e1c:	1000021e 	bne	r2,zero,1818e28 <ipaddr_aton+0x29c>
    return (0);
 1818e20:	0005883a 	mov	r2,zero
 1818e24:	00005306 	br	1818f74 <ipaddr_aton+0x3e8>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 1818e28:	e0fff917 	ldw	r3,-28(fp)
 1818e2c:	e0bffa04 	addi	r2,fp,-24
 1818e30:	1885c83a 	sub	r2,r3,r2
 1818e34:	1005d0ba 	srai	r2,r2,2
 1818e38:	10800044 	addi	r2,r2,1
 1818e3c:	10c00168 	cmpgeui	r3,r2,5
 1818e40:	1800371e 	bne	r3,zero,1818f20 <ipaddr_aton+0x394>
 1818e44:	100690ba 	slli	r3,r2,2
 1818e48:	008060b4 	movhi	r2,386
 1818e4c:	10a39704 	addi	r2,r2,-29092
 1818e50:	1885883a 	add	r2,r3,r2
 1818e54:	10800017 	ldw	r2,0(r2)
 1818e58:	1000683a 	jmp	r2
 1818e5c:	01818e70 	cmpltui	r6,zero,1593
 1818e60:	01818f28 	cmpgeui	r6,zero,1596
 1818e64:	01818e78 	rdprs	r6,zero,1593
 1818e68:	01818ea4 	muli	r6,zero,1594
 1818e6c:	01818edc 	xori	r6,zero,1595

  case 0:
    return (0);       /* initial nondigit */
 1818e70:	0005883a 	mov	r2,zero
 1818e74:	00003f06 	br	1818f74 <ipaddr_aton+0x3e8>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 1818e78:	e0fff717 	ldw	r3,-36(fp)
 1818e7c:	00804034 	movhi	r2,256
 1818e80:	18800236 	bltu	r3,r2,1818e8c <ipaddr_aton+0x300>
      return (0);
 1818e84:	0005883a 	mov	r2,zero
 1818e88:	00003a06 	br	1818f74 <ipaddr_aton+0x3e8>
    }
    val |= parts[0] << 24;
 1818e8c:	e0bffa17 	ldw	r2,-24(fp)
 1818e90:	1004963a 	slli	r2,r2,24
 1818e94:	e0fff717 	ldw	r3,-36(fp)
 1818e98:	1884b03a 	or	r2,r3,r2
 1818e9c:	e0bff715 	stw	r2,-36(fp)
    break;
 1818ea0:	00002206 	br	1818f2c <ipaddr_aton+0x3a0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 1818ea4:	e0bff717 	ldw	r2,-36(fp)
 1818ea8:	00ffffd4 	movui	r3,65535
 1818eac:	1880022e 	bgeu	r3,r2,1818eb8 <ipaddr_aton+0x32c>
      return (0);
 1818eb0:	0005883a 	mov	r2,zero
 1818eb4:	00002f06 	br	1818f74 <ipaddr_aton+0x3e8>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 1818eb8:	e0bffa17 	ldw	r2,-24(fp)
 1818ebc:	1006963a 	slli	r3,r2,24
 1818ec0:	e0bffb17 	ldw	r2,-20(fp)
 1818ec4:	1004943a 	slli	r2,r2,16
 1818ec8:	1884b03a 	or	r2,r3,r2
 1818ecc:	e0fff717 	ldw	r3,-36(fp)
 1818ed0:	1884b03a 	or	r2,r3,r2
 1818ed4:	e0bff715 	stw	r2,-36(fp)
    break;
 1818ed8:	00001406 	br	1818f2c <ipaddr_aton+0x3a0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 1818edc:	e0bff717 	ldw	r2,-36(fp)
 1818ee0:	10804030 	cmpltui	r2,r2,256
 1818ee4:	1000021e 	bne	r2,zero,1818ef0 <ipaddr_aton+0x364>
      return (0);
 1818ee8:	0005883a 	mov	r2,zero
 1818eec:	00002106 	br	1818f74 <ipaddr_aton+0x3e8>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 1818ef0:	e0bffa17 	ldw	r2,-24(fp)
 1818ef4:	1006963a 	slli	r3,r2,24
 1818ef8:	e0bffb17 	ldw	r2,-20(fp)
 1818efc:	1004943a 	slli	r2,r2,16
 1818f00:	1886b03a 	or	r3,r3,r2
 1818f04:	e0bffc17 	ldw	r2,-16(fp)
 1818f08:	1004923a 	slli	r2,r2,8
 1818f0c:	1884b03a 	or	r2,r3,r2
 1818f10:	e0fff717 	ldw	r3,-36(fp)
 1818f14:	1884b03a 	or	r2,r3,r2
 1818f18:	e0bff715 	stw	r2,-36(fp)
    break;
 1818f1c:	00000306 	br	1818f2c <ipaddr_aton+0x3a0>
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
 1818f20:	0001883a 	nop
 1818f24:	00000106 	br	1818f2c <ipaddr_aton+0x3a0>

  case 0:
    return (0);       /* initial nondigit */

  case 1:             /* a -- 32 bits */
    break;
 1818f28:	0001883a 	nop
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
 1818f2c:	e0bfff17 	ldw	r2,-4(fp)
 1818f30:	10000f26 	beq	r2,zero,1818f70 <ipaddr_aton+0x3e4>
    ip4_addr_set_u32(addr, htonl(val));
 1818f34:	e0bff717 	ldw	r2,-36(fp)
 1818f38:	1006d63a 	srli	r3,r2,24
 1818f3c:	e0bff717 	ldw	r2,-36(fp)
 1818f40:	1004d23a 	srli	r2,r2,8
 1818f44:	10bfc00c 	andi	r2,r2,65280
 1818f48:	1886b03a 	or	r3,r3,r2
 1818f4c:	e0bff717 	ldw	r2,-36(fp)
 1818f50:	10bfc00c 	andi	r2,r2,65280
 1818f54:	1004923a 	slli	r2,r2,8
 1818f58:	1886b03a 	or	r3,r3,r2
 1818f5c:	e0bff717 	ldw	r2,-36(fp)
 1818f60:	1004963a 	slli	r2,r2,24
 1818f64:	1886b03a 	or	r3,r3,r2
 1818f68:	e0bfff17 	ldw	r2,-4(fp)
 1818f6c:	10c00015 	stw	r3,0(r2)
  }
  return (1);
 1818f70:	00800044 	movi	r2,1
}
 1818f74:	e037883a 	mov	sp,fp
 1818f78:	df000017 	ldw	fp,0(sp)
 1818f7c:	dec00104 	addi	sp,sp,4
 1818f80:	f800283a 	ret

01818f84 <ipaddr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         represenation of addr
 */
char *
ipaddr_ntoa(const ip_addr_t *addr)
{
 1818f84:	defffd04 	addi	sp,sp,-12
 1818f88:	dfc00215 	stw	ra,8(sp)
 1818f8c:	df000115 	stw	fp,4(sp)
 1818f90:	df000104 	addi	fp,sp,4
 1818f94:	e13fff15 	stw	r4,-4(fp)
  static char str[16];
  return ipaddr_ntoa_r(addr, str, 16);
 1818f98:	01800404 	movi	r6,16
 1818f9c:	01406134 	movhi	r5,388
 1818fa0:	295ccc04 	addi	r5,r5,29488
 1818fa4:	e13fff17 	ldw	r4,-4(fp)
 1818fa8:	1818fc00 	call	1818fc0 <ipaddr_ntoa_r>
}
 1818fac:	e037883a 	mov	sp,fp
 1818fb0:	dfc00117 	ldw	ra,4(sp)
 1818fb4:	df000017 	ldw	fp,0(sp)
 1818fb8:	dec00204 	addi	sp,sp,8
 1818fbc:	f800283a 	ret

01818fc0 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
 1818fc0:	defff404 	addi	sp,sp,-48
 1818fc4:	dfc00b15 	stw	ra,44(sp)
 1818fc8:	df000a15 	stw	fp,40(sp)
 1818fcc:	df000a04 	addi	fp,sp,40
 1818fd0:	e13ffd15 	stw	r4,-12(fp)
 1818fd4:	e17ffe15 	stw	r5,-8(fp)
 1818fd8:	e1bfff15 	stw	r6,-4(fp)
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 1818fdc:	e03ff915 	stw	zero,-28(fp)

  s_addr = ip4_addr_get_u32(addr);
 1818fe0:	e0bffd17 	ldw	r2,-12(fp)
 1818fe4:	10800017 	ldw	r2,0(r2)
 1818fe8:	e0bffb15 	stw	r2,-20(fp)

  rp = buf;
 1818fec:	e0bffe17 	ldw	r2,-8(fp)
 1818ff0:	e0bff615 	stw	r2,-40(fp)
  ap = (u8_t *)&s_addr;
 1818ff4:	e0bffb04 	addi	r2,fp,-20
 1818ff8:	e0bff715 	stw	r2,-36(fp)
  for(n = 0; n < 4; n++) {
 1818ffc:	e03ff805 	stb	zero,-32(fp)
 1819000:	00004606 	br	181911c <ipaddr_ntoa_r+0x15c>
    i = 0;
 1819004:	e03ff845 	stb	zero,-31(fp)
    do {
      rem = *ap % (u8_t)10;
 1819008:	e0bff717 	ldw	r2,-36(fp)
 181900c:	10800003 	ldbu	r2,0(r2)
 1819010:	10803fcc 	andi	r2,r2,255
 1819014:	01400284 	movi	r5,10
 1819018:	1009883a 	mov	r4,r2
 181901c:	180ac800 	call	180ac80 <__umodsi3>
 1819020:	e0bffa05 	stb	r2,-24(fp)
      *ap /= (u8_t)10;
 1819024:	e0bff717 	ldw	r2,-36(fp)
 1819028:	10800003 	ldbu	r2,0(r2)
 181902c:	10803fcc 	andi	r2,r2,255
 1819030:	01400284 	movi	r5,10
 1819034:	1009883a 	mov	r4,r2
 1819038:	180ac1c0 	call	180ac1c <__udivsi3>
 181903c:	1007883a 	mov	r3,r2
 1819040:	e0bff717 	ldw	r2,-36(fp)
 1819044:	10c00005 	stb	r3,0(r2)
      inv[i++] = '0' + rem;
 1819048:	e0bff843 	ldbu	r2,-31(fp)
 181904c:	10c00044 	addi	r3,r2,1
 1819050:	e0fff845 	stb	r3,-31(fp)
 1819054:	10803fcc 	andi	r2,r2,255
 1819058:	e0fffa03 	ldbu	r3,-24(fp)
 181905c:	18c00c04 	addi	r3,r3,48
 1819060:	1809883a 	mov	r4,r3
 1819064:	e0fffc04 	addi	r3,fp,-16
 1819068:	1885883a 	add	r2,r3,r2
 181906c:	11000005 	stb	r4,0(r2)
    } while(*ap);
 1819070:	e0bff717 	ldw	r2,-36(fp)
 1819074:	10800003 	ldbu	r2,0(r2)
 1819078:	10803fcc 	andi	r2,r2,255
 181907c:	103fe21e 	bne	r2,zero,1819008 <__ram_exceptions_end+0xff808d18>
    while(i--) {
 1819080:	00000f06 	br	18190c0 <ipaddr_ntoa_r+0x100>
      if (len++ >= buflen) {
 1819084:	e0bff917 	ldw	r2,-28(fp)
 1819088:	10c00044 	addi	r3,r2,1
 181908c:	e0fff915 	stw	r3,-28(fp)
 1819090:	e0ffff17 	ldw	r3,-4(fp)
 1819094:	10c00216 	blt	r2,r3,18190a0 <ipaddr_ntoa_r+0xe0>
        return NULL;
 1819098:	0005883a 	mov	r2,zero
 181909c:	00002806 	br	1819140 <ipaddr_ntoa_r+0x180>
      }
      *rp++ = inv[i];
 18190a0:	e0bff617 	ldw	r2,-40(fp)
 18190a4:	10c00044 	addi	r3,r2,1
 18190a8:	e0fff615 	stw	r3,-40(fp)
 18190ac:	e0fff843 	ldbu	r3,-31(fp)
 18190b0:	e13ffc04 	addi	r4,fp,-16
 18190b4:	20c7883a 	add	r3,r4,r3
 18190b8:	18c00003 	ldbu	r3,0(r3)
 18190bc:	10c00005 	stb	r3,0(r2)
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
 18190c0:	e0bff843 	ldbu	r2,-31(fp)
 18190c4:	10ffffc4 	addi	r3,r2,-1
 18190c8:	e0fff845 	stb	r3,-31(fp)
 18190cc:	10803fcc 	andi	r2,r2,255
 18190d0:	103fec1e 	bne	r2,zero,1819084 <__ram_exceptions_end+0xff808d94>
      if (len++ >= buflen) {
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
 18190d4:	e0bff917 	ldw	r2,-28(fp)
 18190d8:	10c00044 	addi	r3,r2,1
 18190dc:	e0fff915 	stw	r3,-28(fp)
 18190e0:	e0ffff17 	ldw	r3,-4(fp)
 18190e4:	10c00216 	blt	r2,r3,18190f0 <ipaddr_ntoa_r+0x130>
      return NULL;
 18190e8:	0005883a 	mov	r2,zero
 18190ec:	00001406 	br	1819140 <ipaddr_ntoa_r+0x180>
    }
    *rp++ = '.';
 18190f0:	e0bff617 	ldw	r2,-40(fp)
 18190f4:	10c00044 	addi	r3,r2,1
 18190f8:	e0fff615 	stw	r3,-40(fp)
 18190fc:	00c00b84 	movi	r3,46
 1819100:	10c00005 	stb	r3,0(r2)
    ap++;
 1819104:	e0bff717 	ldw	r2,-36(fp)
 1819108:	10800044 	addi	r2,r2,1
 181910c:	e0bff715 	stw	r2,-36(fp)

  s_addr = ip4_addr_get_u32(addr);

  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
 1819110:	e0bff803 	ldbu	r2,-32(fp)
 1819114:	10800044 	addi	r2,r2,1
 1819118:	e0bff805 	stb	r2,-32(fp)
 181911c:	e0bff803 	ldbu	r2,-32(fp)
 1819120:	10800130 	cmpltui	r2,r2,4
 1819124:	103fb71e 	bne	r2,zero,1819004 <__ram_exceptions_end+0xff808d14>
      return NULL;
    }
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
 1819128:	e0bff617 	ldw	r2,-40(fp)
 181912c:	10bfffc4 	addi	r2,r2,-1
 1819130:	e0bff615 	stw	r2,-40(fp)
 1819134:	e0bff617 	ldw	r2,-40(fp)
 1819138:	10000005 	stb	zero,0(r2)
  return buf;
 181913c:	e0bffe17 	ldw	r2,-8(fp)
}
 1819140:	e037883a 	mov	sp,fp
 1819144:	dfc00117 	ldw	ra,4(sp)
 1819148:	df000017 	ldw	fp,0(sp)
 181914c:	dec00204 	addi	sp,sp,8
 1819150:	f800283a 	ret

01819154 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 1819154:	deffff04 	addi	sp,sp,-4
 1819158:	df000015 	stw	fp,0(sp)
 181915c:	d839883a 	mov	fp,sp
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 1819160:	0001883a 	nop
 1819164:	e037883a 	mov	sp,fp
 1819168:	df000017 	ldw	fp,0(sp)
 181916c:	dec00104 	addi	sp,sp,4
 1819170:	f800283a 	ret

01819174 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 1819174:	defffa04 	addi	sp,sp,-24
 1819178:	dfc00515 	stw	ra,20(sp)
 181917c:	df000415 	stw	fp,16(sp)
 1819180:	df000404 	addi	fp,sp,16
 1819184:	e13ffc15 	stw	r4,-16(fp)
 1819188:	e17ffd15 	stw	r5,-12(fp)
 181918c:	e1bffe15 	stw	r6,-8(fp)
 1819190:	e1ffff15 	stw	r7,-4(fp)

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 1819194:	e0bffc17 	ldw	r2,-16(fp)
 1819198:	10000115 	stw	zero,4(r2)
  ip_addr_set_zero(&netif->netmask);
 181919c:	e0bffc17 	ldw	r2,-16(fp)
 18191a0:	10000215 	stw	zero,8(r2)
  ip_addr_set_zero(&netif->gw);
 18191a4:	e0bffc17 	ldw	r2,-16(fp)
 18191a8:	10000315 	stw	zero,12(r2)
  netif->flags = 0;
 18191ac:	e0bffc17 	ldw	r2,-16(fp)
 18191b0:	10000e45 	stb	zero,57(r2)
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
 18191b4:	e0bffc17 	ldw	r2,-16(fp)
 18191b8:	10000a15 	stw	zero,40(r2)
#if LWIP_AUTOIP
  /* netif not under AutoIP control by default */
  netif->autoip = NULL;
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 18191bc:	e0bffc17 	ldw	r2,-16(fp)
 18191c0:	10000715 	stw	zero,28(r2)
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 18191c4:	e0bffc17 	ldw	r2,-16(fp)
 18191c8:	10000815 	stw	zero,32(r2)
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 18191cc:	e0bffc17 	ldw	r2,-16(fp)
 18191d0:	e0c00217 	ldw	r3,8(fp)
 18191d4:	10c00915 	stw	r3,36(r2)
  netif->num = netif_num++;
 18191d8:	d0a7ee03 	ldbu	r2,-24648(gp)
 18191dc:	10c00044 	addi	r3,r2,1
 18191e0:	d0e7ee05 	stb	r3,-24648(gp)
 18191e4:	e0fffc17 	ldw	r3,-16(fp)
 18191e8:	18800f05 	stb	r2,60(r3)
  netif->input = input;
 18191ec:	e0bffc17 	ldw	r2,-16(fp)
 18191f0:	e0c00417 	ldw	r3,16(fp)
 18191f4:	10c00415 	stw	r3,16(r2)
  NETIF_SET_HWADDRHINT(netif, NULL);
 18191f8:	e0bffc17 	ldw	r2,-16(fp)
 18191fc:	10001015 	stw	zero,64(r2)
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
 1819200:	e1ffff17 	ldw	r7,-4(fp)
 1819204:	e1bffe17 	ldw	r6,-8(fp)
 1819208:	e17ffd17 	ldw	r5,-12(fp)
 181920c:	e13ffc17 	ldw	r4,-16(fp)
 1819210:	18192640 	call	1819264 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 1819214:	e0800317 	ldw	r2,12(fp)
 1819218:	e13ffc17 	ldw	r4,-16(fp)
 181921c:	103ee83a 	callr	r2
 1819220:	10803fcc 	andi	r2,r2,255
 1819224:	1080201c 	xori	r2,r2,128
 1819228:	10bfe004 	addi	r2,r2,-128
 181922c:	10000226 	beq	r2,zero,1819238 <netif_add+0xc4>
    return NULL;
 1819230:	0005883a 	mov	r2,zero
 1819234:	00000606 	br	1819250 <netif_add+0xdc>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 1819238:	d0e7ef17 	ldw	r3,-24644(gp)
 181923c:	e0bffc17 	ldw	r2,-16(fp)
 1819240:	10c00015 	stw	r3,0(r2)
  netif_list = netif;
 1819244:	e0bffc17 	ldw	r2,-16(fp)
 1819248:	d0a7ef15 	stw	r2,-24644(gp)
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 181924c:	e0bffc17 	ldw	r2,-16(fp)
}
 1819250:	e037883a 	mov	sp,fp
 1819254:	dfc00117 	ldw	ra,4(sp)
 1819258:	df000017 	ldw	fp,0(sp)
 181925c:	dec00204 	addi	sp,sp,8
 1819260:	f800283a 	ret

01819264 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
 1819264:	defffa04 	addi	sp,sp,-24
 1819268:	dfc00515 	stw	ra,20(sp)
 181926c:	df000415 	stw	fp,16(sp)
 1819270:	df000404 	addi	fp,sp,16
 1819274:	e13ffc15 	stw	r4,-16(fp)
 1819278:	e17ffd15 	stw	r5,-12(fp)
 181927c:	e1bffe15 	stw	r6,-8(fp)
 1819280:	e1ffff15 	stw	r7,-4(fp)
  netif_set_ipaddr(netif, ipaddr);
 1819284:	e17ffd17 	ldw	r5,-12(fp)
 1819288:	e13ffc17 	ldw	r4,-16(fp)
 181928c:	18194780 	call	1819478 <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
 1819290:	e17ffe17 	ldw	r5,-8(fp)
 1819294:	e13ffc17 	ldw	r4,-16(fp)
 1819298:	18195e80 	call	18195e8 <netif_set_netmask>
  netif_set_gw(netif, gw);
 181929c:	e17fff17 	ldw	r5,-4(fp)
 18192a0:	e13ffc17 	ldw	r4,-16(fp)
 18192a4:	18195a00 	call	18195a0 <netif_set_gw>
}
 18192a8:	0001883a 	nop
 18192ac:	e037883a 	mov	sp,fp
 18192b0:	dfc00117 	ldw	ra,4(sp)
 18192b4:	df000017 	ldw	fp,0(sp)
 18192b8:	dec00204 	addi	sp,sp,8
 18192bc:	f800283a 	ret

018192c0 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
 18192c0:	defffc04 	addi	sp,sp,-16
 18192c4:	dfc00315 	stw	ra,12(sp)
 18192c8:	df000215 	stw	fp,8(sp)
 18192cc:	df000204 	addi	fp,sp,8
 18192d0:	e13fff15 	stw	r4,-4(fp)
  if (netif == NULL) {
 18192d4:	e0bfff17 	ldw	r2,-4(fp)
 18192d8:	10002726 	beq	r2,zero,1819378 <netif_remove+0xb8>
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_stop(netif);
  }
#endif /* LWIP_IGMP */
  if (netif_is_up(netif)) {
 18192dc:	e0bfff17 	ldw	r2,-4(fp)
 18192e0:	10800e43 	ldbu	r2,57(r2)
 18192e4:	10803fcc 	andi	r2,r2,255
 18192e8:	1080004c 	andi	r2,r2,1
 18192ec:	10000226 	beq	r2,zero,18192f8 <netif_remove+0x38>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
 18192f0:	e13fff17 	ldw	r4,-4(fp)
 18192f4:	181970c0 	call	181970c <netif_set_down>
  }

  snmp_delete_ipaddridx_tree(netif);

  /*  is it the first netif? */
  if (netif_list == netif) {
 18192f8:	d0e7ef17 	ldw	r3,-24644(gp)
 18192fc:	e0bfff17 	ldw	r2,-4(fp)
 1819300:	1880041e 	bne	r3,r2,1819314 <netif_remove+0x54>
    netif_list = netif->next;
 1819304:	e0bfff17 	ldw	r2,-4(fp)
 1819308:	10800017 	ldw	r2,0(r2)
 181930c:	d0a7ef15 	stw	r2,-24644(gp)
 1819310:	00001306 	br	1819360 <netif_remove+0xa0>
  } else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
 1819314:	d0a7ef17 	ldw	r2,-24644(gp)
 1819318:	e0bffe15 	stw	r2,-8(fp)
 181931c:	00000c06 	br	1819350 <netif_remove+0x90>
      if (tmpNetif->next == netif) {
 1819320:	e0bffe17 	ldw	r2,-8(fp)
 1819324:	10c00017 	ldw	r3,0(r2)
 1819328:	e0bfff17 	ldw	r2,-4(fp)
 181932c:	1880051e 	bne	r3,r2,1819344 <netif_remove+0x84>
        tmpNetif->next = netif->next;
 1819330:	e0bfff17 	ldw	r2,-4(fp)
 1819334:	10c00017 	ldw	r3,0(r2)
 1819338:	e0bffe17 	ldw	r2,-8(fp)
 181933c:	10c00015 	stw	r3,0(r2)
        break;
 1819340:	00000506 	br	1819358 <netif_remove+0x98>
  if (netif_list == netif) {
    netif_list = netif->next;
  } else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
 1819344:	e0bffe17 	ldw	r2,-8(fp)
 1819348:	10800017 	ldw	r2,0(r2)
 181934c:	e0bffe15 	stw	r2,-8(fp)
 1819350:	e0bffe17 	ldw	r2,-8(fp)
 1819354:	103ff21e 	bne	r2,zero,1819320 <__ram_exceptions_end+0xff809030>
      if (tmpNetif->next == netif) {
        tmpNetif->next = netif->next;
        break;
      }
    }
    if (tmpNetif == NULL)
 1819358:	e0bffe17 	ldw	r2,-8(fp)
 181935c:	10000826 	beq	r2,zero,1819380 <netif_remove+0xc0>
      return; /*  we didn't find any netif today */
  }
  snmp_dec_iflist();
  /* this netif is default? */
  if (netif_default == netif) {
 1819360:	d0e7f017 	ldw	r3,-24640(gp)
 1819364:	e0bfff17 	ldw	r2,-4(fp)
 1819368:	1880061e 	bne	r3,r2,1819384 <netif_remove+0xc4>
    /* reset default netif */
    netif_set_default(NULL);
 181936c:	0009883a 	mov	r4,zero
 1819370:	18196300 	call	1819630 <netif_set_default>
 1819374:	00000306 	br	1819384 <netif_remove+0xc4>
 */
void
netif_remove(struct netif *netif)
{
  if (netif == NULL) {
    return;
 1819378:	0001883a 	nop
 181937c:	00000106 	br	1819384 <netif_remove+0xc4>
        tmpNetif->next = netif->next;
        break;
      }
    }
    if (tmpNetif == NULL)
      return; /*  we didn't find any netif today */
 1819380:	0001883a 	nop
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
 1819384:	e037883a 	mov	sp,fp
 1819388:	dfc00117 	ldw	ra,4(sp)
 181938c:	df000017 	ldw	fp,0(sp)
 1819390:	dec00204 	addi	sp,sp,8
 1819394:	f800283a 	ret

01819398 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(char *name)
{
 1819398:	defffc04 	addi	sp,sp,-16
 181939c:	df000315 	stw	fp,12(sp)
 18193a0:	df000304 	addi	fp,sp,12
 18193a4:	e13fff15 	stw	r4,-4(fp)
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
 18193a8:	e0bfff17 	ldw	r2,-4(fp)
 18193ac:	1000021e 	bne	r2,zero,18193b8 <netif_find+0x20>
    return NULL;
 18193b0:	0005883a 	mov	r2,zero
 18193b4:	00002c06 	br	1819468 <netif_find+0xd0>
  }

  num = name[2] - '0';
 18193b8:	e0bfff17 	ldw	r2,-4(fp)
 18193bc:	10800084 	addi	r2,r2,2
 18193c0:	10800003 	ldbu	r2,0(r2)
 18193c4:	10bff404 	addi	r2,r2,-48
 18193c8:	e0bffe05 	stb	r2,-8(fp)

  for(netif = netif_list; netif != NULL; netif = netif->next) {
 18193cc:	d0a7ef17 	ldw	r2,-24644(gp)
 18193d0:	e0bffd15 	stw	r2,-12(fp)
 18193d4:	00002106 	br	181945c <netif_find+0xc4>
    if (num == netif->num &&
 18193d8:	e0bffd17 	ldw	r2,-12(fp)
 18193dc:	10800f03 	ldbu	r2,60(r2)
 18193e0:	10c03fcc 	andi	r3,r2,255
 18193e4:	e0bffe03 	ldbu	r2,-8(fp)
 18193e8:	1880191e 	bne	r3,r2,1819450 <netif_find+0xb8>
       name[0] == netif->name[0] &&
 18193ec:	e0bfff17 	ldw	r2,-4(fp)
 18193f0:	10c00003 	ldbu	r3,0(r2)
 18193f4:	e0bffd17 	ldw	r2,-12(fp)
 18193f8:	10800e83 	ldbu	r2,58(r2)
  }

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    if (num == netif->num &&
 18193fc:	18c03fcc 	andi	r3,r3,255
 1819400:	18c0201c 	xori	r3,r3,128
 1819404:	18ffe004 	addi	r3,r3,-128
 1819408:	10803fcc 	andi	r2,r2,255
 181940c:	1080201c 	xori	r2,r2,128
 1819410:	10bfe004 	addi	r2,r2,-128
 1819414:	18800e1e 	bne	r3,r2,1819450 <netif_find+0xb8>
       name[0] == netif->name[0] &&
       name[1] == netif->name[1]) {
 1819418:	e0bfff17 	ldw	r2,-4(fp)
 181941c:	10800044 	addi	r2,r2,1
 1819420:	10c00003 	ldbu	r3,0(r2)
 1819424:	e0bffd17 	ldw	r2,-12(fp)
 1819428:	10800ec3 	ldbu	r2,59(r2)

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    if (num == netif->num &&
       name[0] == netif->name[0] &&
 181942c:	18c03fcc 	andi	r3,r3,255
 1819430:	18c0201c 	xori	r3,r3,128
 1819434:	18ffe004 	addi	r3,r3,-128
 1819438:	10803fcc 	andi	r2,r2,255
 181943c:	1080201c 	xori	r2,r2,128
 1819440:	10bfe004 	addi	r2,r2,-128
 1819444:	1880021e 	bne	r3,r2,1819450 <netif_find+0xb8>
       name[1] == netif->name[1]) {
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 1819448:	e0bffd17 	ldw	r2,-12(fp)
 181944c:	00000606 	br	1819468 <netif_find+0xd0>
    return NULL;
  }

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
 1819450:	e0bffd17 	ldw	r2,-12(fp)
 1819454:	10800017 	ldw	r2,0(r2)
 1819458:	e0bffd15 	stw	r2,-12(fp)
 181945c:	e0bffd17 	ldw	r2,-12(fp)
 1819460:	103fdd1e 	bne	r2,zero,18193d8 <__ram_exceptions_end+0xff8090e8>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 1819464:	0005883a 	mov	r2,zero
}
 1819468:	e037883a 	mov	sp,fp
 181946c:	df000017 	ldw	fp,0(sp)
 1819470:	dec00104 	addi	sp,sp,4
 1819474:	f800283a 	ret

01819478 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 1819478:	defff904 	addi	sp,sp,-28
 181947c:	dfc00615 	stw	ra,24(sp)
 1819480:	df000515 	stw	fp,20(sp)
 1819484:	df000504 	addi	fp,sp,20
 1819488:	e13ffe15 	stw	r4,-8(fp)
 181948c:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
 1819490:	e0bfff17 	ldw	r2,-4(fp)
 1819494:	10003426 	beq	r2,zero,1819568 <netif_set_ipaddr+0xf0>
 1819498:	e0bfff17 	ldw	r2,-4(fp)
 181949c:	10c00017 	ldw	r3,0(r2)
 18194a0:	e0bffe17 	ldw	r2,-8(fp)
 18194a4:	10800117 	ldw	r2,4(r2)
 18194a8:	18802f26 	beq	r3,r2,1819568 <netif_set_ipaddr+0xf0>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
 18194ac:	d0a7f317 	ldw	r2,-24628(gp)
 18194b0:	e0bffb15 	stw	r2,-20(fp)
    while (pcb != NULL) {
 18194b4:	00001006 	br	18194f8 <netif_set_ipaddr+0x80>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
 18194b8:	e0bffb17 	ldw	r2,-20(fp)
 18194bc:	10c00017 	ldw	r3,0(r2)
 18194c0:	e0bffe17 	ldw	r2,-8(fp)
 18194c4:	10800117 	ldw	r2,4(r2)
 18194c8:	1880081e 	bne	r3,r2,18194ec <netif_set_ipaddr+0x74>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
 18194cc:	e0bffb17 	ldw	r2,-20(fp)
 18194d0:	10800317 	ldw	r2,12(r2)
 18194d4:	e0bffd15 	stw	r2,-12(fp)
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
 18194d8:	e13ffb17 	ldw	r4,-20(fp)
 18194dc:	181b6580 	call	181b658 <tcp_abort>
        pcb = next;
 18194e0:	e0bffd17 	ldw	r2,-12(fp)
 18194e4:	e0bffb15 	stw	r2,-20(fp)
 18194e8:	00000306 	br	18194f8 <netif_set_ipaddr+0x80>
      } else {
        pcb = pcb->next;
 18194ec:	e0bffb17 	ldw	r2,-20(fp)
 18194f0:	10800317 	ldw	r2,12(r2)
 18194f4:	e0bffb15 	stw	r2,-20(fp)
  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
 18194f8:	e0bffb17 	ldw	r2,-20(fp)
 18194fc:	103fee1e 	bne	r2,zero,18194b8 <__ram_exceptions_end+0xff8091c8>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 1819500:	d0a7f517 	ldw	r2,-24620(gp)
 1819504:	e0bffc15 	stw	r2,-16(fp)
 1819508:	00001506 	br	1819560 <netif_set_ipaddr+0xe8>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 181950c:	e0bffc17 	ldw	r2,-16(fp)
 1819510:	10001026 	beq	r2,zero,1819554 <netif_set_ipaddr+0xdc>
 1819514:	e0bffc17 	ldw	r2,-16(fp)
 1819518:	10800017 	ldw	r2,0(r2)
 181951c:	10000d26 	beq	r2,zero,1819554 <netif_set_ipaddr+0xdc>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
 1819520:	e0bffc17 	ldw	r2,-16(fp)
 1819524:	10c00017 	ldw	r3,0(r2)
 1819528:	e0bffe17 	ldw	r2,-8(fp)
 181952c:	10800117 	ldw	r2,4(r2)
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 1819530:	1880081e 	bne	r3,r2,1819554 <netif_set_ipaddr+0xdc>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
 1819534:	e0bfff17 	ldw	r2,-4(fp)
 1819538:	10000326 	beq	r2,zero,1819548 <netif_set_ipaddr+0xd0>
 181953c:	e0bfff17 	ldw	r2,-4(fp)
 1819540:	10800017 	ldw	r2,0(r2)
 1819544:	00000106 	br	181954c <netif_set_ipaddr+0xd4>
 1819548:	0005883a 	mov	r2,zero
 181954c:	e0fffc17 	ldw	r3,-16(fp)
 1819550:	18800015 	stw	r2,0(r3)
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 1819554:	e0bffc17 	ldw	r2,-16(fp)
 1819558:	10800317 	ldw	r2,12(r2)
 181955c:	e0bffc15 	stw	r2,-16(fp)
 1819560:	e0bffc17 	ldw	r2,-16(fp)
 1819564:	103fe91e 	bne	r2,zero,181950c <__ram_exceptions_end+0xff80921c>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 1819568:	e0bfff17 	ldw	r2,-4(fp)
 181956c:	10000326 	beq	r2,zero,181957c <netif_set_ipaddr+0x104>
 1819570:	e0bfff17 	ldw	r2,-4(fp)
 1819574:	10800017 	ldw	r2,0(r2)
 1819578:	00000106 	br	1819580 <netif_set_ipaddr+0x108>
 181957c:	0005883a 	mov	r2,zero
 1819580:	e0fffe17 	ldw	r3,-8(fp)
 1819584:	18800115 	stw	r2,4(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 1819588:	0001883a 	nop
 181958c:	e037883a 	mov	sp,fp
 1819590:	dfc00117 	ldw	ra,4(sp)
 1819594:	df000017 	ldw	fp,0(sp)
 1819598:	dec00204 	addi	sp,sp,8
 181959c:	f800283a 	ret

018195a0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
 18195a0:	defffd04 	addi	sp,sp,-12
 18195a4:	df000215 	stw	fp,8(sp)
 18195a8:	df000204 	addi	fp,sp,8
 18195ac:	e13ffe15 	stw	r4,-8(fp)
 18195b0:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&(netif->gw), gw);
 18195b4:	e0bfff17 	ldw	r2,-4(fp)
 18195b8:	10000326 	beq	r2,zero,18195c8 <netif_set_gw+0x28>
 18195bc:	e0bfff17 	ldw	r2,-4(fp)
 18195c0:	10800017 	ldw	r2,0(r2)
 18195c4:	00000106 	br	18195cc <netif_set_gw+0x2c>
 18195c8:	0005883a 	mov	r2,zero
 18195cc:	e0fffe17 	ldw	r3,-8(fp)
 18195d0:	18800315 	stw	r2,12(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
 18195d4:	0001883a 	nop
 18195d8:	e037883a 	mov	sp,fp
 18195dc:	df000017 	ldw	fp,0(sp)
 18195e0:	dec00104 	addi	sp,sp,4
 18195e4:	f800283a 	ret

018195e8 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
 18195e8:	defffd04 	addi	sp,sp,-12
 18195ec:	df000215 	stw	fp,8(sp)
 18195f0:	df000204 	addi	fp,sp,8
 18195f4:	e13ffe15 	stw	r4,-8(fp)
 18195f8:	e17fff15 	stw	r5,-4(fp)
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 18195fc:	e0bfff17 	ldw	r2,-4(fp)
 1819600:	10000326 	beq	r2,zero,1819610 <netif_set_netmask+0x28>
 1819604:	e0bfff17 	ldw	r2,-4(fp)
 1819608:	10800017 	ldw	r2,0(r2)
 181960c:	00000106 	br	1819614 <netif_set_netmask+0x2c>
 1819610:	0005883a 	mov	r2,zero
 1819614:	e0fffe17 	ldw	r3,-8(fp)
 1819618:	18800215 	stw	r2,8(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
 181961c:	0001883a 	nop
 1819620:	e037883a 	mov	sp,fp
 1819624:	df000017 	ldw	fp,0(sp)
 1819628:	dec00104 	addi	sp,sp,4
 181962c:	f800283a 	ret

01819630 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 1819630:	defffe04 	addi	sp,sp,-8
 1819634:	df000115 	stw	fp,4(sp)
 1819638:	df000104 	addi	fp,sp,4
 181963c:	e13fff15 	stw	r4,-4(fp)
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 1819640:	e0bfff17 	ldw	r2,-4(fp)
 1819644:	d0a7f015 	stw	r2,-24640(gp)
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 1819648:	0001883a 	nop
 181964c:	e037883a 	mov	sp,fp
 1819650:	df000017 	ldw	fp,0(sp)
 1819654:	dec00104 	addi	sp,sp,4
 1819658:	f800283a 	ret

0181965c <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
 181965c:	defffd04 	addi	sp,sp,-12
 1819660:	dfc00215 	stw	ra,8(sp)
 1819664:	df000115 	stw	fp,4(sp)
 1819668:	df000104 	addi	fp,sp,4
 181966c:	e13fff15 	stw	r4,-4(fp)
  if (!(netif->flags & NETIF_FLAG_UP)) {
 1819670:	e0bfff17 	ldw	r2,-4(fp)
 1819674:	10800e43 	ldbu	r2,57(r2)
 1819678:	10803fcc 	andi	r2,r2,255
 181967c:	1080004c 	andi	r2,r2,1
 1819680:	10001c1e 	bne	r2,zero,18196f4 <netif_set_up+0x98>
    netif->flags |= NETIF_FLAG_UP;
 1819684:	e0bfff17 	ldw	r2,-4(fp)
 1819688:	10800e43 	ldbu	r2,57(r2)
 181968c:	10800054 	ori	r2,r2,1
 1819690:	1007883a 	mov	r3,r2
 1819694:	e0bfff17 	ldw	r2,-4(fp)
 1819698:	10c00e45 	stb	r3,57(r2)
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
 181969c:	e0bfff17 	ldw	r2,-4(fp)
 18196a0:	10800717 	ldw	r2,28(r2)
 18196a4:	10000426 	beq	r2,zero,18196b8 <netif_set_up+0x5c>
 18196a8:	e0bfff17 	ldw	r2,-4(fp)
 18196ac:	10800717 	ldw	r2,28(r2)
 18196b0:	e13fff17 	ldw	r4,-4(fp)
 18196b4:	103ee83a 	callr	r2

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 18196b8:	e0bfff17 	ldw	r2,-4(fp)
 18196bc:	10800e43 	ldbu	r2,57(r2)
 18196c0:	10803fcc 	andi	r2,r2,255
 18196c4:	1080040c 	andi	r2,r2,16
 18196c8:	10000a26 	beq	r2,zero,18196f4 <netif_set_up+0x98>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
 18196cc:	e0bfff17 	ldw	r2,-4(fp)
 18196d0:	10800e43 	ldbu	r2,57(r2)
 18196d4:	10803fcc 	andi	r2,r2,255
 18196d8:	1080080c 	andi	r2,r2,32
 18196dc:	10000526 	beq	r2,zero,18196f4 <netif_set_up+0x98>
        etharp_gratuitous(netif);
 18196e0:	e0bfff17 	ldw	r2,-4(fp)
 18196e4:	10800104 	addi	r2,r2,4
 18196e8:	100b883a 	mov	r5,r2
 18196ec:	e13fff17 	ldw	r4,-4(fp)
 18196f0:	1823a100 	call	1823a10 <etharp_request>
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
 18196f4:	0001883a 	nop
 18196f8:	e037883a 	mov	sp,fp
 18196fc:	dfc00117 	ldw	ra,4(sp)
 1819700:	df000017 	ldw	fp,0(sp)
 1819704:	dec00204 	addi	sp,sp,8
 1819708:	f800283a 	ret

0181970c <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
 181970c:	defffd04 	addi	sp,sp,-12
 1819710:	dfc00215 	stw	ra,8(sp)
 1819714:	df000115 	stw	fp,4(sp)
 1819718:	df000104 	addi	fp,sp,4
 181971c:	e13fff15 	stw	r4,-4(fp)
  if (netif->flags & NETIF_FLAG_UP) {
 1819720:	e0bfff17 	ldw	r2,-4(fp)
 1819724:	10800e43 	ldbu	r2,57(r2)
 1819728:	10803fcc 	andi	r2,r2,255
 181972c:	1080004c 	andi	r2,r2,1
 1819730:	10001526 	beq	r2,zero,1819788 <netif_set_down+0x7c>
    netif->flags &= ~NETIF_FLAG_UP;
 1819734:	e0bfff17 	ldw	r2,-4(fp)
 1819738:	10c00e43 	ldbu	r3,57(r2)
 181973c:	00bfff84 	movi	r2,-2
 1819740:	1884703a 	and	r2,r3,r2
 1819744:	1007883a 	mov	r3,r2
 1819748:	e0bfff17 	ldw	r2,-4(fp)
 181974c:	10c00e45 	stb	r3,57(r2)
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 1819750:	e0bfff17 	ldw	r2,-4(fp)
 1819754:	10800e43 	ldbu	r2,57(r2)
 1819758:	10803fcc 	andi	r2,r2,255
 181975c:	1080080c 	andi	r2,r2,32
 1819760:	10000226 	beq	r2,zero,181976c <netif_set_down+0x60>
      etharp_cleanup_netif(netif);
 1819764:	e13fff17 	ldw	r4,-4(fp)
 1819768:	1822a300 	call	1822a30 <etharp_cleanup_netif>
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
 181976c:	e0bfff17 	ldw	r2,-4(fp)
 1819770:	10800717 	ldw	r2,28(r2)
 1819774:	10000426 	beq	r2,zero,1819788 <netif_set_down+0x7c>
 1819778:	e0bfff17 	ldw	r2,-4(fp)
 181977c:	10800717 	ldw	r2,28(r2)
 1819780:	e13fff17 	ldw	r4,-4(fp)
 1819784:	103ee83a 	callr	r2
  }
}
 1819788:	0001883a 	nop
 181978c:	e037883a 	mov	sp,fp
 1819790:	dfc00117 	ldw	ra,4(sp)
 1819794:	df000017 	ldw	fp,0(sp)
 1819798:	dec00204 	addi	sp,sp,8
 181979c:	f800283a 	ret

018197a0 <netif_set_status_callback>:
#if LWIP_NETIF_STATUS_CALLBACK
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
 18197a0:	defffd04 	addi	sp,sp,-12
 18197a4:	df000215 	stw	fp,8(sp)
 18197a8:	df000204 	addi	fp,sp,8
 18197ac:	e13ffe15 	stw	r4,-8(fp)
 18197b0:	e17fff15 	stw	r5,-4(fp)
  if (netif) {
 18197b4:	e0bffe17 	ldw	r2,-8(fp)
 18197b8:	10000326 	beq	r2,zero,18197c8 <netif_set_status_callback+0x28>
    netif->status_callback = status_callback;
 18197bc:	e0bffe17 	ldw	r2,-8(fp)
 18197c0:	e0ffff17 	ldw	r3,-4(fp)
 18197c4:	10c00715 	stw	r3,28(r2)
  }
}
 18197c8:	0001883a 	nop
 18197cc:	e037883a 	mov	sp,fp
 18197d0:	df000017 	ldw	fp,0(sp)
 18197d4:	dec00104 	addi	sp,sp,4
 18197d8:	f800283a 	ret

018197dc <netif_set_link_up>:

/**
 * Called by a driver when its link goes up
 */
void netif_set_link_up(struct netif *netif )
{
 18197dc:	defffd04 	addi	sp,sp,-12
 18197e0:	dfc00215 	stw	ra,8(sp)
 18197e4:	df000115 	stw	fp,4(sp)
 18197e8:	df000104 	addi	fp,sp,4
 18197ec:	e13fff15 	stw	r4,-4(fp)
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 18197f0:	e0bfff17 	ldw	r2,-4(fp)
 18197f4:	10800e43 	ldbu	r2,57(r2)
 18197f8:	10803fcc 	andi	r2,r2,255
 18197fc:	1080040c 	andi	r2,r2,16
 1819800:	1000211e 	bne	r2,zero,1819888 <netif_set_link_up+0xac>
    netif->flags |= NETIF_FLAG_LINK_UP;
 1819804:	e0bfff17 	ldw	r2,-4(fp)
 1819808:	10800e43 	ldbu	r2,57(r2)
 181980c:	10800414 	ori	r2,r2,16
 1819810:	1007883a 	mov	r3,r2
 1819814:	e0bfff17 	ldw	r2,-4(fp)
 1819818:	10c00e45 	stb	r3,57(r2)

#if LWIP_DHCP
    if (netif->dhcp) {
 181981c:	e0bfff17 	ldw	r2,-4(fp)
 1819820:	10800a17 	ldw	r2,40(r2)
 1819824:	10000226 	beq	r2,zero,1819830 <netif_set_link_up+0x54>
      dhcp_network_changed(netif);
 1819828:	e13fff17 	ldw	r4,-4(fp)
 181982c:	18165440 	call	1816544 <dhcp_network_changed>
    if (netif->autoip) {
      autoip_network_changed(netif);
    }
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 1819830:	e0bfff17 	ldw	r2,-4(fp)
 1819834:	10800e43 	ldbu	r2,57(r2)
 1819838:	10803fcc 	andi	r2,r2,255
 181983c:	1080004c 	andi	r2,r2,1
 1819840:	10000a26 	beq	r2,zero,181986c <netif_set_link_up+0x90>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & NETIF_FLAG_ETHARP) {
 1819844:	e0bfff17 	ldw	r2,-4(fp)
 1819848:	10800e43 	ldbu	r2,57(r2)
 181984c:	10803fcc 	andi	r2,r2,255
 1819850:	1080080c 	andi	r2,r2,32
 1819854:	10000526 	beq	r2,zero,181986c <netif_set_link_up+0x90>
        etharp_gratuitous(netif);
 1819858:	e0bfff17 	ldw	r2,-4(fp)
 181985c:	10800104 	addi	r2,r2,4
 1819860:	100b883a 	mov	r5,r2
 1819864:	e13fff17 	ldw	r4,-4(fp)
 1819868:	1823a100 	call	1823a10 <etharp_request>
      if (netif->flags & NETIF_FLAG_IGMP) {
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
    NETIF_LINK_CALLBACK(netif);
 181986c:	e0bfff17 	ldw	r2,-4(fp)
 1819870:	10800817 	ldw	r2,32(r2)
 1819874:	10000426 	beq	r2,zero,1819888 <netif_set_link_up+0xac>
 1819878:	e0bfff17 	ldw	r2,-4(fp)
 181987c:	10800817 	ldw	r2,32(r2)
 1819880:	e13fff17 	ldw	r4,-4(fp)
 1819884:	103ee83a 	callr	r2
  }
}
 1819888:	0001883a 	nop
 181988c:	e037883a 	mov	sp,fp
 1819890:	dfc00117 	ldw	ra,4(sp)
 1819894:	df000017 	ldw	fp,0(sp)
 1819898:	dec00204 	addi	sp,sp,8
 181989c:	f800283a 	ret

018198a0 <netif_set_link_down>:

/**
 * Called by a driver when its link goes down
 */
void netif_set_link_down(struct netif *netif )
{
 18198a0:	defffd04 	addi	sp,sp,-12
 18198a4:	dfc00215 	stw	ra,8(sp)
 18198a8:	df000115 	stw	fp,4(sp)
 18198ac:	df000104 	addi	fp,sp,4
 18198b0:	e13fff15 	stw	r4,-4(fp)
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 18198b4:	e0bfff17 	ldw	r2,-4(fp)
 18198b8:	10800e43 	ldbu	r2,57(r2)
 18198bc:	10803fcc 	andi	r2,r2,255
 18198c0:	1080040c 	andi	r2,r2,16
 18198c4:	10000e26 	beq	r2,zero,1819900 <netif_set_link_down+0x60>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 18198c8:	e0bfff17 	ldw	r2,-4(fp)
 18198cc:	10c00e43 	ldbu	r3,57(r2)
 18198d0:	00bffbc4 	movi	r2,-17
 18198d4:	1884703a 	and	r2,r3,r2
 18198d8:	1007883a 	mov	r3,r2
 18198dc:	e0bfff17 	ldw	r2,-4(fp)
 18198e0:	10c00e45 	stb	r3,57(r2)
    NETIF_LINK_CALLBACK(netif);
 18198e4:	e0bfff17 	ldw	r2,-4(fp)
 18198e8:	10800817 	ldw	r2,32(r2)
 18198ec:	10000426 	beq	r2,zero,1819900 <netif_set_link_down+0x60>
 18198f0:	e0bfff17 	ldw	r2,-4(fp)
 18198f4:	10800817 	ldw	r2,32(r2)
 18198f8:	e13fff17 	ldw	r4,-4(fp)
 18198fc:	103ee83a 	callr	r2
  }
}
 1819900:	0001883a 	nop
 1819904:	e037883a 	mov	sp,fp
 1819908:	dfc00117 	ldw	ra,4(sp)
 181990c:	df000017 	ldw	fp,0(sp)
 1819910:	dec00204 	addi	sp,sp,8
 1819914:	f800283a 	ret

01819918 <netif_set_link_callback>:
#if LWIP_NETIF_LINK_CALLBACK
/**
 * Set callback to be called when link is brought up/down
 */
void netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 1819918:	defffd04 	addi	sp,sp,-12
 181991c:	df000215 	stw	fp,8(sp)
 1819920:	df000204 	addi	fp,sp,8
 1819924:	e13ffe15 	stw	r4,-8(fp)
 1819928:	e17fff15 	stw	r5,-4(fp)
  if (netif) {
 181992c:	e0bffe17 	ldw	r2,-8(fp)
 1819930:	10000326 	beq	r2,zero,1819940 <netif_set_link_callback+0x28>
    netif->link_callback = link_callback;
 1819934:	e0bffe17 	ldw	r2,-8(fp)
 1819938:	e0ffff17 	ldw	r3,-4(fp)
 181993c:	10c00815 	stw	r3,32(r2)
  }
}
 1819940:	0001883a 	nop
 1819944:	e037883a 	mov	sp,fp
 1819948:	df000017 	ldw	fp,0(sp)
 181994c:	dec00104 	addi	sp,sp,4
 1819950:	f800283a 	ret

01819954 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 1819954:	defffd04 	addi	sp,sp,-12
 1819958:	dfc00215 	stw	ra,8(sp)
 181995c:	df000115 	stw	fp,4(sp)
 1819960:	df000104 	addi	fp,sp,4
  struct tcp_pcb* pcb;
  SYS_ARCH_DECL_PROTECT(old_level);

  SYS_ARCH_PROTECT(old_level);
 1819964:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1819968:	10000126 	beq	r2,zero,1819970 <pbuf_free_ooseq+0x1c>
 181996c:	1810f480 	call	1810f48 <vTaskEnterCritical>
  pbuf_free_ooseq_pending = 0;
 1819970:	d027f105 	stb	zero,-24636(gp)
  SYS_ARCH_UNPROTECT(old_level);
 1819974:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1819978:	10000126 	beq	r2,zero,1819980 <pbuf_free_ooseq+0x2c>
 181997c:	1810f900 	call	1810f90 <vTaskExitCritical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 1819980:	d0a7f317 	ldw	r2,-24628(gp)
 1819984:	e0bfff15 	stw	r2,-4(fp)
 1819988:	00000d06 	br	18199c0 <pbuf_free_ooseq+0x6c>
    if (NULL != pcb->ooseq) {
 181998c:	e0bfff17 	ldw	r2,-4(fp)
 1819990:	10801e17 	ldw	r2,120(r2)
 1819994:	10000726 	beq	r2,zero,18199b4 <pbuf_free_ooseq+0x60>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 1819998:	e0bfff17 	ldw	r2,-4(fp)
 181999c:	10801e17 	ldw	r2,120(r2)
 18199a0:	1009883a 	mov	r4,r2
 18199a4:	181ca840 	call	181ca84 <tcp_segs_free>
      pcb->ooseq = NULL;
 18199a8:	e0bfff17 	ldw	r2,-4(fp)
 18199ac:	10001e15 	stw	zero,120(r2)
      return;
 18199b0:	00000506 	br	18199c8 <pbuf_free_ooseq+0x74>

  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 0;
  SYS_ARCH_UNPROTECT(old_level);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 18199b4:	e0bfff17 	ldw	r2,-4(fp)
 18199b8:	10800317 	ldw	r2,12(r2)
 18199bc:	e0bfff15 	stw	r2,-4(fp)
 18199c0:	e0bfff17 	ldw	r2,-4(fp)
 18199c4:	103ff11e 	bne	r2,zero,181998c <__ram_exceptions_end+0xff80969c>
      tcp_segs_free(pcb->ooseq);
      pcb->ooseq = NULL;
      return;
    }
  }
}
 18199c8:	e037883a 	mov	sp,fp
 18199cc:	dfc00117 	ldw	ra,4(sp)
 18199d0:	df000017 	ldw	fp,0(sp)
 18199d4:	dec00204 	addi	sp,sp,8
 18199d8:	f800283a 	ret

018199dc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_timeout() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 18199dc:	defffd04 	addi	sp,sp,-12
 18199e0:	dfc00215 	stw	ra,8(sp)
 18199e4:	df000115 	stw	fp,4(sp)
 18199e8:	df000104 	addi	fp,sp,4
 18199ec:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 18199f0:	18199540 	call	1819954 <pbuf_free_ooseq>
}
 18199f4:	0001883a 	nop
 18199f8:	e037883a 	mov	sp,fp
 18199fc:	dfc00117 	ldw	ra,4(sp)
 1819a00:	df000017 	ldw	fp,0(sp)
 1819a04:	dec00204 	addi	sp,sp,8
 1819a08:	f800283a 	ret

01819a0c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 1819a0c:	defffd04 	addi	sp,sp,-12
 1819a10:	dfc00215 	stw	ra,8(sp)
 1819a14:	df000115 	stw	fp,4(sp)
 1819a18:	df000104 	addi	fp,sp,4
  pbuf_free_ooseq_pending = 1;
  SYS_ARCH_UNPROTECT(old_level);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 1819a1c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1819a20:	10000126 	beq	r2,zero,1819a28 <pbuf_pool_is_empty+0x1c>
 1819a24:	1810f480 	call	1810f48 <vTaskEnterCritical>
  queued = pbuf_free_ooseq_pending;
 1819a28:	d0a7f103 	ldbu	r2,-24636(gp)
 1819a2c:	e0bfff05 	stb	r2,-4(fp)
  pbuf_free_ooseq_pending = 1;
 1819a30:	00800044 	movi	r2,1
 1819a34:	d0a7f105 	stb	r2,-24636(gp)
  SYS_ARCH_UNPROTECT(old_level);
 1819a38:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1819a3c:	10000126 	beq	r2,zero,1819a44 <pbuf_pool_is_empty+0x38>
 1819a40:	1810f900 	call	1810f90 <vTaskExitCritical>

  if(!queued) {
 1819a44:	e0bfff03 	ldbu	r2,-4(fp)
 1819a48:	1000101e 	bne	r2,zero,1819a8c <pbuf_pool_is_empty+0x80>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 1819a4c:	000d883a 	mov	r6,zero
 1819a50:	000b883a 	mov	r5,zero
 1819a54:	010060b4 	movhi	r4,386
 1819a58:	21267704 	addi	r4,r4,-26148
 1819a5c:	18303fc0 	call	18303fc <tcpip_callback_with_block>
 1819a60:	10803fcc 	andi	r2,r2,255
 1819a64:	1080201c 	xori	r2,r2,128
 1819a68:	10bfe004 	addi	r2,r2,-128
 1819a6c:	10000726 	beq	r2,zero,1819a8c <pbuf_pool_is_empty+0x80>
 1819a70:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1819a74:	10000126 	beq	r2,zero,1819a7c <pbuf_pool_is_empty+0x70>
 1819a78:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1819a7c:	d027f105 	stb	zero,-24636(gp)
 1819a80:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1819a84:	10000126 	beq	r2,zero,1819a8c <pbuf_pool_is_empty+0x80>
 1819a88:	1810f900 	call	1810f90 <vTaskExitCritical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 1819a8c:	0001883a 	nop
 1819a90:	e037883a 	mov	sp,fp
 1819a94:	dfc00117 	ldw	ra,4(sp)
 1819a98:	df000017 	ldw	fp,0(sp)
 1819a9c:	dec00204 	addi	sp,sp,8
 1819aa0:	f800283a 	ret

01819aa4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 1819aa4:	defff604 	addi	sp,sp,-40
 1819aa8:	dfc00915 	stw	ra,36(sp)
 1819aac:	df000815 	stw	fp,32(sp)
 1819ab0:	df000804 	addi	fp,sp,32
 1819ab4:	e13ffd15 	stw	r4,-12(fp)
 1819ab8:	2805883a 	mov	r2,r5
 1819abc:	e1bfff15 	stw	r6,-4(fp)
 1819ac0:	e0bffe0d 	sth	r2,-8(fp)
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 1819ac4:	e0bffd17 	ldw	r2,-12(fp)
 1819ac8:	10c00060 	cmpeqi	r3,r2,1
 1819acc:	1800091e 	bne	r3,zero,1819af4 <pbuf_alloc+0x50>
 1819ad0:	0080052e 	bgeu	zero,r2,1819ae8 <pbuf_alloc+0x44>
 1819ad4:	10c000a0 	cmpeqi	r3,r2,2
 1819ad8:	1800091e 	bne	r3,zero,1819b00 <pbuf_alloc+0x5c>
 1819adc:	108000e0 	cmpeqi	r2,r2,3
 1819ae0:	10000a1e 	bne	r2,zero,1819b0c <pbuf_alloc+0x68>
 1819ae4:	00000b06 	br	1819b14 <pbuf_alloc+0x70>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 1819ae8:	00800e04 	movi	r2,56
 1819aec:	e0bffa0d 	sth	r2,-24(fp)
    break;
 1819af0:	00000a06 	br	1819b1c <pbuf_alloc+0x78>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 1819af4:	00800904 	movi	r2,36
 1819af8:	e0bffa0d 	sth	r2,-24(fp)
    break;
 1819afc:	00000706 	br	1819b1c <pbuf_alloc+0x78>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 1819b00:	00800404 	movi	r2,16
 1819b04:	e0bffa0d 	sth	r2,-24(fp)
    break;
 1819b08:	00000406 	br	1819b1c <pbuf_alloc+0x78>
  case PBUF_RAW:
    offset = 0;
 1819b0c:	e03ffa0d 	sth	zero,-24(fp)
    break;
 1819b10:	00000206 	br	1819b1c <pbuf_alloc+0x78>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 1819b14:	0005883a 	mov	r2,zero
 1819b18:	0000c106 	br	1819e20 <pbuf_alloc+0x37c>
  }

  switch (type) {
 1819b1c:	e0bfff17 	ldw	r2,-4(fp)
 1819b20:	10c000e8 	cmpgeui	r3,r2,3
 1819b24:	1800021e 	bne	r3,zero,1819b30 <pbuf_alloc+0x8c>
 1819b28:	00809a36 	bltu	zero,r2,1819d94 <pbuf_alloc+0x2f0>
 1819b2c:	00007006 	br	1819cf0 <pbuf_alloc+0x24c>
 1819b30:	108000e0 	cmpeqi	r2,r2,3
 1819b34:	1000b226 	beq	r2,zero,1819e00 <pbuf_alloc+0x35c>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 1819b38:	00806134 	movhi	r2,388
 1819b3c:	108bcc84 	addi	r2,r2,12082
 1819b40:	1080070b 	ldhu	r2,28(r2)
 1819b44:	10bfffcc 	andi	r2,r2,65535
 1819b48:	1009883a 	mov	r4,r2
 1819b4c:	183c5000 	call	183c500 <malloc>
 1819b50:	e0bff815 	stw	r2,-32(fp)
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 1819b54:	e0bff817 	ldw	r2,-32(fp)
 1819b58:	1000031e 	bne	r2,zero,1819b68 <pbuf_alloc+0xc4>
      PBUF_POOL_IS_EMPTY();
 1819b5c:	1819a0c0 	call	1819a0c <pbuf_pool_is_empty>
      return NULL;
 1819b60:	0005883a 	mov	r2,zero
 1819b64:	0000ae06 	br	1819e20 <pbuf_alloc+0x37c>
    }
    p->type = type;
 1819b68:	e0bfff17 	ldw	r2,-4(fp)
 1819b6c:	1007883a 	mov	r3,r2
 1819b70:	e0bff817 	ldw	r2,-32(fp)
 1819b74:	10c00305 	stb	r3,12(r2)
    p->next = NULL;
 1819b78:	e0bff817 	ldw	r2,-32(fp)
 1819b7c:	10000015 	stw	zero,0(r2)

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 1819b80:	e0bffa0b 	ldhu	r2,-24(fp)
 1819b84:	10800404 	addi	r2,r2,16
 1819b88:	e0fff817 	ldw	r3,-32(fp)
 1819b8c:	1885883a 	add	r2,r3,r2
 1819b90:	10c000c4 	addi	r3,r2,3
 1819b94:	00bfff04 	movi	r2,-4
 1819b98:	1884703a 	and	r2,r3,r2
 1819b9c:	1007883a 	mov	r3,r2
 1819ba0:	e0bff817 	ldw	r2,-32(fp)
 1819ba4:	10c00115 	stw	r3,4(r2)
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 1819ba8:	e0bff817 	ldw	r2,-32(fp)
 1819bac:	e0fffe0b 	ldhu	r3,-8(fp)
 1819bb0:	10c0020d 	sth	r3,8(r2)
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 1819bb4:	e0bffa0b 	ldhu	r2,-24(fp)
 1819bb8:	10c000c4 	addi	r3,r2,3
 1819bbc:	00bfff04 	movi	r2,-4
 1819bc0:	1884703a 	and	r2,r3,r2
 1819bc4:	00c17b04 	movi	r3,1516
 1819bc8:	1885c83a 	sub	r2,r3,r2
 1819bcc:	e0fffe0b 	ldhu	r3,-8(fp)
 1819bd0:	1880010e 	bge	r3,r2,1819bd8 <pbuf_alloc+0x134>
 1819bd4:	1805883a 	mov	r2,r3
 1819bd8:	1007883a 	mov	r3,r2
 1819bdc:	e0bff817 	ldw	r2,-32(fp)
 1819be0:	10c0028d 	sth	r3,10(r2)
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 1819be4:	e0bff817 	ldw	r2,-32(fp)
 1819be8:	00c00044 	movi	r3,1
 1819bec:	10c0038d 	sth	r3,14(r2)

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 1819bf0:	e0bff817 	ldw	r2,-32(fp)
 1819bf4:	e0bff915 	stw	r2,-28(fp)
    /* remaining length to be allocated */
    rem_len = length - p->len;
 1819bf8:	e0fffe0b 	ldhu	r3,-8(fp)
 1819bfc:	e0bff817 	ldw	r2,-32(fp)
 1819c00:	1080028b 	ldhu	r2,10(r2)
 1819c04:	10bfffcc 	andi	r2,r2,65535
 1819c08:	1885c83a 	sub	r2,r3,r2
 1819c0c:	e0bffb15 	stw	r2,-20(fp)
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 1819c10:	00003406 	br	1819ce4 <pbuf_alloc+0x240>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 1819c14:	00806134 	movhi	r2,388
 1819c18:	108bcc84 	addi	r2,r2,12082
 1819c1c:	1080070b 	ldhu	r2,28(r2)
 1819c20:	10bfffcc 	andi	r2,r2,65535
 1819c24:	1009883a 	mov	r4,r2
 1819c28:	183c5000 	call	183c500 <malloc>
 1819c2c:	e0bffc15 	stw	r2,-16(fp)
      if (q == NULL) {
 1819c30:	e0bffc17 	ldw	r2,-16(fp)
 1819c34:	1000051e 	bne	r2,zero,1819c4c <pbuf_alloc+0x1a8>
        PBUF_POOL_IS_EMPTY();
 1819c38:	1819a0c0 	call	1819a0c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 1819c3c:	e13ff817 	ldw	r4,-32(fp)
 1819c40:	181a22c0 	call	181a22c <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 1819c44:	0005883a 	mov	r2,zero
 1819c48:	00007506 	br	1819e20 <pbuf_alloc+0x37c>
      }
      q->type = type;
 1819c4c:	e0bfff17 	ldw	r2,-4(fp)
 1819c50:	1007883a 	mov	r3,r2
 1819c54:	e0bffc17 	ldw	r2,-16(fp)
 1819c58:	10c00305 	stb	r3,12(r2)
      q->flags = 0;
 1819c5c:	e0bffc17 	ldw	r2,-16(fp)
 1819c60:	10000345 	stb	zero,13(r2)
      q->next = NULL;
 1819c64:	e0bffc17 	ldw	r2,-16(fp)
 1819c68:	10000015 	stw	zero,0(r2)
      /* make previous pbuf point to this pbuf */
      r->next = q;
 1819c6c:	e0bff917 	ldw	r2,-28(fp)
 1819c70:	e0fffc17 	ldw	r3,-16(fp)
 1819c74:	10c00015 	stw	r3,0(r2)
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 1819c78:	e0bffb17 	ldw	r2,-20(fp)
 1819c7c:	1007883a 	mov	r3,r2
 1819c80:	e0bffc17 	ldw	r2,-16(fp)
 1819c84:	10c0020d 	sth	r3,8(r2)
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 1819c88:	e0bffb17 	ldw	r2,-20(fp)
 1819c8c:	10bfffcc 	andi	r2,r2,65535
 1819c90:	10c17b50 	cmplti	r3,r2,1517
 1819c94:	1800011e 	bne	r3,zero,1819c9c <pbuf_alloc+0x1f8>
 1819c98:	00817b04 	movi	r2,1516
 1819c9c:	1007883a 	mov	r3,r2
 1819ca0:	e0bffc17 	ldw	r2,-16(fp)
 1819ca4:	10c0028d 	sth	r3,10(r2)
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 1819ca8:	e0bffc17 	ldw	r2,-16(fp)
 1819cac:	10c00404 	addi	r3,r2,16
 1819cb0:	e0bffc17 	ldw	r2,-16(fp)
 1819cb4:	10c00115 	stw	r3,4(r2)
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 1819cb8:	e0bffc17 	ldw	r2,-16(fp)
 1819cbc:	00c00044 	movi	r3,1
 1819cc0:	10c0038d 	sth	r3,14(r2)
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 1819cc4:	e0bffc17 	ldw	r2,-16(fp)
 1819cc8:	1080028b 	ldhu	r2,10(r2)
 1819ccc:	10bfffcc 	andi	r2,r2,65535
 1819cd0:	e0fffb17 	ldw	r3,-20(fp)
 1819cd4:	1885c83a 	sub	r2,r3,r2
 1819cd8:	e0bffb15 	stw	r2,-20(fp)
      /* remember this pbuf for linkage in next iteration */
      r = q;
 1819cdc:	e0bffc17 	ldw	r2,-16(fp)
 1819ce0:	e0bff915 	stw	r2,-28(fp)
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 1819ce4:	e0bffb17 	ldw	r2,-20(fp)
 1819ce8:	00bfca16 	blt	zero,r2,1819c14 <__ram_exceptions_end+0xff809924>
      r = q;
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 1819cec:	00004606 	br	1819e08 <pbuf_alloc+0x364>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 1819cf0:	e0bffa0b 	ldhu	r2,-24(fp)
 1819cf4:	10c004c4 	addi	r3,r2,19
 1819cf8:	00bfff04 	movi	r2,-4
 1819cfc:	1886703a 	and	r3,r3,r2
 1819d00:	e0bffe0b 	ldhu	r2,-8(fp)
 1819d04:	108000c4 	addi	r2,r2,3
 1819d08:	1009883a 	mov	r4,r2
 1819d0c:	00bfff04 	movi	r2,-4
 1819d10:	2084703a 	and	r2,r4,r2
 1819d14:	1885883a 	add	r2,r3,r2
 1819d18:	1009883a 	mov	r4,r2
 1819d1c:	183c5000 	call	183c500 <malloc>
 1819d20:	e0bff815 	stw	r2,-32(fp)
    if (p == NULL) {
 1819d24:	e0bff817 	ldw	r2,-32(fp)
 1819d28:	1000021e 	bne	r2,zero,1819d34 <pbuf_alloc+0x290>
      return NULL;
 1819d2c:	0005883a 	mov	r2,zero
 1819d30:	00003b06 	br	1819e20 <pbuf_alloc+0x37c>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 1819d34:	e0bffa0b 	ldhu	r2,-24(fp)
 1819d38:	10800404 	addi	r2,r2,16
 1819d3c:	e0fff817 	ldw	r3,-32(fp)
 1819d40:	1885883a 	add	r2,r3,r2
 1819d44:	10c000c4 	addi	r3,r2,3
 1819d48:	00bfff04 	movi	r2,-4
 1819d4c:	1884703a 	and	r2,r3,r2
 1819d50:	1007883a 	mov	r3,r2
 1819d54:	e0bff817 	ldw	r2,-32(fp)
 1819d58:	10c00115 	stw	r3,4(r2)
    p->len = p->tot_len = length;
 1819d5c:	e0bff817 	ldw	r2,-32(fp)
 1819d60:	e0fffe0b 	ldhu	r3,-8(fp)
 1819d64:	10c0020d 	sth	r3,8(r2)
 1819d68:	e0bff817 	ldw	r2,-32(fp)
 1819d6c:	10c0020b 	ldhu	r3,8(r2)
 1819d70:	e0bff817 	ldw	r2,-32(fp)
 1819d74:	10c0028d 	sth	r3,10(r2)
    p->next = NULL;
 1819d78:	e0bff817 	ldw	r2,-32(fp)
 1819d7c:	10000015 	stw	zero,0(r2)
    p->type = type;
 1819d80:	e0bfff17 	ldw	r2,-4(fp)
 1819d84:	1007883a 	mov	r3,r2
 1819d88:	e0bff817 	ldw	r2,-32(fp)
 1819d8c:	10c00305 	stb	r3,12(r2)

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 1819d90:	00001d06 	br	1819e08 <pbuf_alloc+0x364>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 1819d94:	00806134 	movhi	r2,388
 1819d98:	108bcc84 	addi	r2,r2,12082
 1819d9c:	1080068b 	ldhu	r2,26(r2)
 1819da0:	10bfffcc 	andi	r2,r2,65535
 1819da4:	1009883a 	mov	r4,r2
 1819da8:	183c5000 	call	183c500 <malloc>
 1819dac:	e0bff815 	stw	r2,-32(fp)
    if (p == NULL) {
 1819db0:	e0bff817 	ldw	r2,-32(fp)
 1819db4:	1000021e 	bne	r2,zero,1819dc0 <pbuf_alloc+0x31c>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 1819db8:	0005883a 	mov	r2,zero
 1819dbc:	00001806 	br	1819e20 <pbuf_alloc+0x37c>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 1819dc0:	e0bff817 	ldw	r2,-32(fp)
 1819dc4:	10000115 	stw	zero,4(r2)
    p->len = p->tot_len = length;
 1819dc8:	e0bff817 	ldw	r2,-32(fp)
 1819dcc:	e0fffe0b 	ldhu	r3,-8(fp)
 1819dd0:	10c0020d 	sth	r3,8(r2)
 1819dd4:	e0bff817 	ldw	r2,-32(fp)
 1819dd8:	10c0020b 	ldhu	r3,8(r2)
 1819ddc:	e0bff817 	ldw	r2,-32(fp)
 1819de0:	10c0028d 	sth	r3,10(r2)
    p->next = NULL;
 1819de4:	e0bff817 	ldw	r2,-32(fp)
 1819de8:	10000015 	stw	zero,0(r2)
    p->type = type;
 1819dec:	e0bfff17 	ldw	r2,-4(fp)
 1819df0:	1007883a 	mov	r3,r2
 1819df4:	e0bff817 	ldw	r2,-32(fp)
 1819df8:	10c00305 	stb	r3,12(r2)
    break;
 1819dfc:	00000206 	br	1819e08 <pbuf_alloc+0x364>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 1819e00:	0005883a 	mov	r2,zero
 1819e04:	00000606 	br	1819e20 <pbuf_alloc+0x37c>
  }
  /* set reference count */
  p->ref = 1;
 1819e08:	e0bff817 	ldw	r2,-32(fp)
 1819e0c:	00c00044 	movi	r3,1
 1819e10:	10c0038d 	sth	r3,14(r2)
  /* set flags */
  p->flags = 0;
 1819e14:	e0bff817 	ldw	r2,-32(fp)
 1819e18:	10000345 	stb	zero,13(r2)
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 1819e1c:	e0bff817 	ldw	r2,-32(fp)
}
 1819e20:	e037883a 	mov	sp,fp
 1819e24:	dfc00117 	ldw	ra,4(sp)
 1819e28:	df000017 	ldw	fp,0(sp)
 1819e2c:	dec00204 	addi	sp,sp,8
 1819e30:	f800283a 	ret

01819e34 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 1819e34:	defff904 	addi	sp,sp,-28
 1819e38:	df000615 	stw	fp,24(sp)
 1819e3c:	df000604 	addi	fp,sp,24
 1819e40:	e13ffb15 	stw	r4,-20(fp)
 1819e44:	2807883a 	mov	r3,r5
 1819e48:	e1bffd15 	stw	r6,-12(fp)
 1819e4c:	e1fffe15 	stw	r7,-8(fp)
 1819e50:	e0800217 	ldw	r2,8(fp)
 1819e54:	e0fffc0d 	sth	r3,-16(fp)
 1819e58:	e0bfff0d 	sth	r2,-4(fp)
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 1819e5c:	e0bffb17 	ldw	r2,-20(fp)
 1819e60:	10c00060 	cmpeqi	r3,r2,1
 1819e64:	1800091e 	bne	r3,zero,1819e8c <pbuf_alloced_custom+0x58>
 1819e68:	0080052e 	bgeu	zero,r2,1819e80 <pbuf_alloced_custom+0x4c>
 1819e6c:	10c000a0 	cmpeqi	r3,r2,2
 1819e70:	1800091e 	bne	r3,zero,1819e98 <pbuf_alloced_custom+0x64>
 1819e74:	108000e0 	cmpeqi	r2,r2,3
 1819e78:	10000a1e 	bne	r2,zero,1819ea4 <pbuf_alloced_custom+0x70>
 1819e7c:	00000b06 	br	1819eac <pbuf_alloced_custom+0x78>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 1819e80:	00800e04 	movi	r2,56
 1819e84:	e0bffa0d 	sth	r2,-24(fp)
    break;
 1819e88:	00000a06 	br	1819eb4 <pbuf_alloced_custom+0x80>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 1819e8c:	00800904 	movi	r2,36
 1819e90:	e0bffa0d 	sth	r2,-24(fp)
    break;
 1819e94:	00000706 	br	1819eb4 <pbuf_alloced_custom+0x80>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 1819e98:	00800404 	movi	r2,16
 1819e9c:	e0bffa0d 	sth	r2,-24(fp)
    break;
 1819ea0:	00000406 	br	1819eb4 <pbuf_alloced_custom+0x80>
  case PBUF_RAW:
    offset = 0;
 1819ea4:	e03ffa0d 	sth	zero,-24(fp)
    break;
 1819ea8:	00000206 	br	1819eb4 <pbuf_alloced_custom+0x80>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
 1819eac:	0005883a 	mov	r2,zero
 1819eb0:	00002c06 	br	1819f64 <pbuf_alloced_custom+0x130>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 1819eb4:	e0bffa0b 	ldhu	r2,-24(fp)
 1819eb8:	10c000c4 	addi	r3,r2,3
 1819ebc:	00bfff04 	movi	r2,-4
 1819ec0:	1886703a 	and	r3,r3,r2
 1819ec4:	e0bffc0b 	ldhu	r2,-16(fp)
 1819ec8:	1885883a 	add	r2,r3,r2
 1819ecc:	e0ffff0b 	ldhu	r3,-4(fp)
 1819ed0:	1880020e 	bge	r3,r2,1819edc <pbuf_alloced_custom+0xa8>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 1819ed4:	0005883a 	mov	r2,zero
 1819ed8:	00002206 	br	1819f64 <pbuf_alloced_custom+0x130>
  }

  p->pbuf.next = NULL;
 1819edc:	e0bffe17 	ldw	r2,-8(fp)
 1819ee0:	10000015 	stw	zero,0(r2)
  if (payload_mem != NULL) {
 1819ee4:	e0800117 	ldw	r2,4(fp)
 1819ee8:	10000a26 	beq	r2,zero,1819f14 <pbuf_alloced_custom+0xe0>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 1819eec:	e0bffa0b 	ldhu	r2,-24(fp)
 1819ef0:	108000c4 	addi	r2,r2,3
 1819ef4:	1007883a 	mov	r3,r2
 1819ef8:	00bfff04 	movi	r2,-4
 1819efc:	1884703a 	and	r2,r3,r2
 1819f00:	e0c00117 	ldw	r3,4(fp)
 1819f04:	1887883a 	add	r3,r3,r2
 1819f08:	e0bffe17 	ldw	r2,-8(fp)
 1819f0c:	10c00115 	stw	r3,4(r2)
 1819f10:	00000206 	br	1819f1c <pbuf_alloced_custom+0xe8>
  } else {
    p->pbuf.payload = NULL;
 1819f14:	e0bffe17 	ldw	r2,-8(fp)
 1819f18:	10000115 	stw	zero,4(r2)
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 1819f1c:	e0bffe17 	ldw	r2,-8(fp)
 1819f20:	00c00084 	movi	r3,2
 1819f24:	10c00345 	stb	r3,13(r2)
  p->pbuf.len = p->pbuf.tot_len = length;
 1819f28:	e0bffe17 	ldw	r2,-8(fp)
 1819f2c:	e0fffc0b 	ldhu	r3,-16(fp)
 1819f30:	10c0020d 	sth	r3,8(r2)
 1819f34:	e0bffe17 	ldw	r2,-8(fp)
 1819f38:	10c0020b 	ldhu	r3,8(r2)
 1819f3c:	e0bffe17 	ldw	r2,-8(fp)
 1819f40:	10c0028d 	sth	r3,10(r2)
  p->pbuf.type = type;
 1819f44:	e0bffd17 	ldw	r2,-12(fp)
 1819f48:	1007883a 	mov	r3,r2
 1819f4c:	e0bffe17 	ldw	r2,-8(fp)
 1819f50:	10c00305 	stb	r3,12(r2)
  p->pbuf.ref = 1;
 1819f54:	e0bffe17 	ldw	r2,-8(fp)
 1819f58:	00c00044 	movi	r3,1
 1819f5c:	10c0038d 	sth	r3,14(r2)
  return &p->pbuf;
 1819f60:	e0bffe17 	ldw	r2,-8(fp)
}
 1819f64:	e037883a 	mov	sp,fp
 1819f68:	df000017 	ldw	fp,0(sp)
 1819f6c:	dec00104 	addi	sp,sp,4
 1819f70:	f800283a 	ret

01819f74 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 1819f74:	defff704 	addi	sp,sp,-36
 1819f78:	dfc00815 	stw	ra,32(sp)
 1819f7c:	df000715 	stw	fp,28(sp)
 1819f80:	df000704 	addi	fp,sp,28
 1819f84:	e13ffc15 	stw	r4,-16(fp)
 1819f88:	2805883a 	mov	r2,r5
 1819f8c:	e0bffd0d 	sth	r2,-12(fp)
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 1819f90:	e0bffc17 	ldw	r2,-16(fp)
 1819f94:	1080020b 	ldhu	r2,8(r2)
 1819f98:	10bfffcc 	andi	r2,r2,65535
 1819f9c:	e0fffd0b 	ldhu	r3,-12(fp)
 1819fa0:	1880302e 	bgeu	r3,r2,181a064 <pbuf_realloc+0xf0>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 1819fa4:	e0fffd0b 	ldhu	r3,-12(fp)
 1819fa8:	e0bffc17 	ldw	r2,-16(fp)
 1819fac:	1080020b 	ldhu	r2,8(r2)
 1819fb0:	10bfffcc 	andi	r2,r2,65535
 1819fb4:	1885c83a 	sub	r2,r3,r2
 1819fb8:	e0bffb15 	stw	r2,-20(fp)

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 1819fbc:	e0bffd0b 	ldhu	r2,-12(fp)
 1819fc0:	e0bffa0d 	sth	r2,-24(fp)
  q = p;
 1819fc4:	e0bffc17 	ldw	r2,-16(fp)
 1819fc8:	e0bff915 	stw	r2,-28(fp)
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 1819fcc:	00000f06 	br	181a00c <pbuf_realloc+0x98>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 1819fd0:	e0bff917 	ldw	r2,-28(fp)
 1819fd4:	1080028b 	ldhu	r2,10(r2)
 1819fd8:	e0fffa0b 	ldhu	r3,-24(fp)
 1819fdc:	1885c83a 	sub	r2,r3,r2
 1819fe0:	e0bffa0d 	sth	r2,-24(fp)
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 1819fe4:	e0bff917 	ldw	r2,-28(fp)
 1819fe8:	1080020b 	ldhu	r2,8(r2)
 1819fec:	e0fffb17 	ldw	r3,-20(fp)
 1819ff0:	10c5883a 	add	r2,r2,r3
 1819ff4:	1007883a 	mov	r3,r2
 1819ff8:	e0bff917 	ldw	r2,-28(fp)
 1819ffc:	10c0020d 	sth	r3,8(r2)
    /* proceed to next pbuf in chain */
    q = q->next;
 181a000:	e0bff917 	ldw	r2,-28(fp)
 181a004:	10800017 	ldw	r2,0(r2)
 181a008:	e0bff915 	stw	r2,-28(fp)

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 181a00c:	e0bff917 	ldw	r2,-28(fp)
 181a010:	1080028b 	ldhu	r2,10(r2)
 181a014:	10ffffcc 	andi	r3,r2,65535
 181a018:	e0bffa0b 	ldhu	r2,-24(fp)
 181a01c:	18bfec36 	bltu	r3,r2,1819fd0 <__ram_exceptions_end+0xff809ce0>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 181a020:	e0bff917 	ldw	r2,-28(fp)
 181a024:	e0fffa0b 	ldhu	r3,-24(fp)
 181a028:	10c0028d 	sth	r3,10(r2)
  q->tot_len = q->len;
 181a02c:	e0bff917 	ldw	r2,-28(fp)
 181a030:	10c0028b 	ldhu	r3,10(r2)
 181a034:	e0bff917 	ldw	r2,-28(fp)
 181a038:	10c0020d 	sth	r3,8(r2)

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 181a03c:	e0bff917 	ldw	r2,-28(fp)
 181a040:	10800017 	ldw	r2,0(r2)
 181a044:	10000426 	beq	r2,zero,181a058 <pbuf_realloc+0xe4>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 181a048:	e0bff917 	ldw	r2,-28(fp)
 181a04c:	10800017 	ldw	r2,0(r2)
 181a050:	1009883a 	mov	r4,r2
 181a054:	181a22c0 	call	181a22c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 181a058:	e0bff917 	ldw	r2,-28(fp)
 181a05c:	10000015 	stw	zero,0(r2)
 181a060:	00000106 	br	181a068 <pbuf_realloc+0xf4>
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
    /* enlarging not yet supported */
    return;
 181a064:	0001883a 	nop
    pbuf_free(q->next);
  }
  /* q is last packet in chain */
  q->next = NULL;

}
 181a068:	e037883a 	mov	sp,fp
 181a06c:	dfc00117 	ldw	ra,4(sp)
 181a070:	df000017 	ldw	fp,0(sp)
 181a074:	dec00204 	addi	sp,sp,8
 181a078:	f800283a 	ret

0181a07c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 181a07c:	defffa04 	addi	sp,sp,-24
 181a080:	dfc00515 	stw	ra,20(sp)
 181a084:	df000415 	stw	fp,16(sp)
 181a088:	df000404 	addi	fp,sp,16
 181a08c:	e13ffe15 	stw	r4,-8(fp)
 181a090:	2805883a 	mov	r2,r5
 181a094:	e0bfff0d 	sth	r2,-4(fp)
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 181a098:	e0bfff0f 	ldh	r2,-4(fp)
 181a09c:	10000226 	beq	r2,zero,181a0a8 <pbuf_header+0x2c>
 181a0a0:	e0bffe17 	ldw	r2,-8(fp)
 181a0a4:	1000021e 	bne	r2,zero,181a0b0 <pbuf_header+0x34>
    return 0;
 181a0a8:	0005883a 	mov	r2,zero
 181a0ac:	00005a06 	br	181a218 <pbuf_header+0x19c>
  }
 
  if (header_size_increment < 0){
 181a0b0:	e0bfff0f 	ldh	r2,-4(fp)
 181a0b4:	1000110e 	bge	r2,zero,181a0fc <pbuf_header+0x80>
    increment_magnitude = -header_size_increment;
 181a0b8:	e0bfff0b 	ldhu	r2,-4(fp)
 181a0bc:	0085c83a 	sub	r2,zero,r2
 181a0c0:	e0bffc0d 	sth	r2,-16(fp)
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 181a0c4:	e0bffe17 	ldw	r2,-8(fp)
 181a0c8:	1080028b 	ldhu	r2,10(r2)
 181a0cc:	10ffffcc 	andi	r3,r2,65535
 181a0d0:	e0bffc0b 	ldhu	r2,-16(fp)
 181a0d4:	18800b2e 	bgeu	r3,r2,181a104 <pbuf_header+0x88>
 181a0d8:	01c06134 	movhi	r7,388
 181a0dc:	39c38404 	addi	r7,r7,3600
 181a0e0:	01808344 	movi	r6,525
 181a0e4:	01406134 	movhi	r5,388
 181a0e8:	29438a04 	addi	r5,r5,3624
 181a0ec:	01006134 	movhi	r4,388
 181a0f0:	21039204 	addi	r4,r4,3656
 181a0f4:	1800b240 	call	1800b24 <printf>
 181a0f8:	003fff06 	br	181a0f8 <__ram_exceptions_end+0xff809e08>
  } else {
    increment_magnitude = header_size_increment;
 181a0fc:	e0bfff0b 	ldhu	r2,-4(fp)
 181a100:	e0bffc0d 	sth	r2,-16(fp)
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 181a104:	e0bffe17 	ldw	r2,-8(fp)
 181a108:	10800303 	ldbu	r2,12(r2)
 181a10c:	10803fcc 	andi	r2,r2,255
 181a110:	e0bffc8d 	sth	r2,-14(fp)
  /* remember current payload pointer */
  payload = p->payload;
 181a114:	e0bffe17 	ldw	r2,-8(fp)
 181a118:	10800117 	ldw	r2,4(r2)
 181a11c:	e0bffd15 	stw	r2,-12(fp)

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 181a120:	e0bffc8b 	ldhu	r2,-14(fp)
 181a124:	10000326 	beq	r2,zero,181a134 <pbuf_header+0xb8>
 181a128:	e0bffc8b 	ldhu	r2,-14(fp)
 181a12c:	108000d8 	cmpnei	r2,r2,3
 181a130:	1000111e 	bne	r2,zero,181a178 <pbuf_header+0xfc>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 181a134:	e0bffe17 	ldw	r2,-8(fp)
 181a138:	10c00117 	ldw	r3,4(r2)
 181a13c:	e0bfff0f 	ldh	r2,-4(fp)
 181a140:	0085c83a 	sub	r2,zero,r2
 181a144:	1887883a 	add	r3,r3,r2
 181a148:	e0bffe17 	ldw	r2,-8(fp)
 181a14c:	10c00115 	stw	r3,4(r2)
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 181a150:	e0bffe17 	ldw	r2,-8(fp)
 181a154:	10c00117 	ldw	r3,4(r2)
 181a158:	e0bffe17 	ldw	r2,-8(fp)
 181a15c:	10800404 	addi	r2,r2,16
 181a160:	18801e2e 	bgeu	r3,r2,181a1dc <pbuf_header+0x160>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
 181a164:	e0bffe17 	ldw	r2,-8(fp)
 181a168:	e0fffd17 	ldw	r3,-12(fp)
 181a16c:	10c00115 	stw	r3,4(r2)
      /* bail out unsuccesfully */
      return 1;
 181a170:	00800044 	movi	r2,1
 181a174:	00002806 	br	181a218 <pbuf_header+0x19c>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 181a178:	e0bffc8b 	ldhu	r2,-14(fp)
 181a17c:	108000a0 	cmpeqi	r2,r2,2
 181a180:	1000031e 	bne	r2,zero,181a190 <pbuf_header+0x114>
 181a184:	e0bffc8b 	ldhu	r2,-14(fp)
 181a188:	10800058 	cmpnei	r2,r2,1
 181a18c:	1000111e 	bne	r2,zero,181a1d4 <pbuf_header+0x158>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 181a190:	e0bfff0f 	ldh	r2,-4(fp)
 181a194:	10000d0e 	bge	r2,zero,181a1cc <pbuf_header+0x150>
 181a198:	e0bffe17 	ldw	r2,-8(fp)
 181a19c:	1080028b 	ldhu	r2,10(r2)
 181a1a0:	10ffffcc 	andi	r3,r2,65535
 181a1a4:	e0bffc0b 	ldhu	r2,-16(fp)
 181a1a8:	18800836 	bltu	r3,r2,181a1cc <pbuf_header+0x150>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 181a1ac:	e0bffe17 	ldw	r2,-8(fp)
 181a1b0:	10c00117 	ldw	r3,4(r2)
 181a1b4:	e0bfff0f 	ldh	r2,-4(fp)
 181a1b8:	0085c83a 	sub	r2,zero,r2
 181a1bc:	1887883a 	add	r3,r3,r2
 181a1c0:	e0bffe17 	ldw	r2,-8(fp)
 181a1c4:	10c00115 	stw	r3,4(r2)
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 181a1c8:	00000406 	br	181a1dc <pbuf_header+0x160>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
 181a1cc:	00800044 	movi	r2,1
 181a1d0:	00001106 	br	181a218 <pbuf_header+0x19c>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 181a1d4:	00800044 	movi	r2,1
 181a1d8:	00000f06 	br	181a218 <pbuf_header+0x19c>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 181a1dc:	e0bffe17 	ldw	r2,-8(fp)
 181a1e0:	10c0028b 	ldhu	r3,10(r2)
 181a1e4:	e0bfff0b 	ldhu	r2,-4(fp)
 181a1e8:	1885883a 	add	r2,r3,r2
 181a1ec:	1007883a 	mov	r3,r2
 181a1f0:	e0bffe17 	ldw	r2,-8(fp)
 181a1f4:	10c0028d 	sth	r3,10(r2)
  p->tot_len += header_size_increment;
 181a1f8:	e0bffe17 	ldw	r2,-8(fp)
 181a1fc:	10c0020b 	ldhu	r3,8(r2)
 181a200:	e0bfff0b 	ldhu	r2,-4(fp)
 181a204:	1885883a 	add	r2,r3,r2
 181a208:	1007883a 	mov	r3,r2
 181a20c:	e0bffe17 	ldw	r2,-8(fp)
 181a210:	10c0020d 	sth	r3,8(r2)

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 181a214:	0005883a 	mov	r2,zero
}
 181a218:	e037883a 	mov	sp,fp
 181a21c:	dfc00117 	ldw	ra,4(sp)
 181a220:	df000017 	ldw	fp,0(sp)
 181a224:	dec00204 	addi	sp,sp,8
 181a228:	f800283a 	ret

0181a22c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 181a22c:	defff904 	addi	sp,sp,-28
 181a230:	dfc00615 	stw	ra,24(sp)
 181a234:	df000515 	stw	fp,20(sp)
 181a238:	df000504 	addi	fp,sp,20
 181a23c:	e13fff15 	stw	r4,-4(fp)
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 181a240:	e0bfff17 	ldw	r2,-4(fp)
 181a244:	1000021e 	bne	r2,zero,181a250 <pbuf_free+0x24>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 181a248:	0005883a 	mov	r2,zero
 181a24c:	00004106 	br	181a354 <pbuf_free+0x128>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 181a250:	e03ffb05 	stb	zero,-20(fp)
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 181a254:	00003c06 	br	181a348 <pbuf_free+0x11c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 181a258:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 181a25c:	10000126 	beq	r2,zero,181a264 <pbuf_free+0x38>
 181a260:	1810f480 	call	1810f48 <vTaskEnterCritical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 181a264:	e0bfff17 	ldw	r2,-4(fp)
 181a268:	1080038b 	ldhu	r2,14(r2)
 181a26c:	10bfffc4 	addi	r2,r2,-1
 181a270:	1007883a 	mov	r3,r2
 181a274:	e0bfff17 	ldw	r2,-4(fp)
 181a278:	10c0038d 	sth	r3,14(r2)
 181a27c:	e0bfff17 	ldw	r2,-4(fp)
 181a280:	1080038b 	ldhu	r2,14(r2)
 181a284:	e0bffb8d 	sth	r2,-18(fp)
    SYS_ARCH_UNPROTECT(old_level);
 181a288:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 181a28c:	10000126 	beq	r2,zero,181a294 <pbuf_free+0x68>
 181a290:	1810f900 	call	1810f90 <vTaskExitCritical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 181a294:	e0bffb8b 	ldhu	r2,-18(fp)
 181a298:	10002a1e 	bne	r2,zero,181a344 <pbuf_free+0x118>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 181a29c:	e0bfff17 	ldw	r2,-4(fp)
 181a2a0:	10800017 	ldw	r2,0(r2)
 181a2a4:	e0bffc15 	stw	r2,-16(fp)
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 181a2a8:	e0bfff17 	ldw	r2,-4(fp)
 181a2ac:	10800303 	ldbu	r2,12(r2)
 181a2b0:	10803fcc 	andi	r2,r2,255
 181a2b4:	e0bffd0d 	sth	r2,-12(fp)
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 181a2b8:	e0bfff17 	ldw	r2,-4(fp)
 181a2bc:	10800343 	ldbu	r2,13(r2)
 181a2c0:	10803fcc 	andi	r2,r2,255
 181a2c4:	1080008c 	andi	r2,r2,2
 181a2c8:	10000726 	beq	r2,zero,181a2e8 <pbuf_free+0xbc>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 181a2cc:	e0bfff17 	ldw	r2,-4(fp)
 181a2d0:	e0bffe15 	stw	r2,-8(fp)
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 181a2d4:	e0bffe17 	ldw	r2,-8(fp)
 181a2d8:	10800417 	ldw	r2,16(r2)
 181a2dc:	e13fff17 	ldw	r4,-4(fp)
 181a2e0:	103ee83a 	callr	r2
 181a2e4:	00001106 	br	181a32c <pbuf_free+0x100>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 181a2e8:	e0bffd0b 	ldhu	r2,-12(fp)
 181a2ec:	108000d8 	cmpnei	r2,r2,3
 181a2f0:	1000031e 	bne	r2,zero,181a300 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 181a2f4:	e13fff17 	ldw	r4,-4(fp)
 181a2f8:	183c5140 	call	183c514 <free>
 181a2fc:	00000b06 	br	181a32c <pbuf_free+0x100>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 181a300:	e0bffd0b 	ldhu	r2,-12(fp)
 181a304:	10800060 	cmpeqi	r2,r2,1
 181a308:	1000031e 	bne	r2,zero,181a318 <pbuf_free+0xec>
 181a30c:	e0bffd0b 	ldhu	r2,-12(fp)
 181a310:	10800098 	cmpnei	r2,r2,2
 181a314:	1000031e 	bne	r2,zero,181a324 <pbuf_free+0xf8>
          memp_free(MEMP_PBUF, p);
 181a318:	e13fff17 	ldw	r4,-4(fp)
 181a31c:	183c5140 	call	183c514 <free>
 181a320:	00000206 	br	181a32c <pbuf_free+0x100>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 181a324:	e13fff17 	ldw	r4,-4(fp)
 181a328:	183c5140 	call	183c514 <free>
        }
      }
      count++;
 181a32c:	e0bffb03 	ldbu	r2,-20(fp)
 181a330:	10800044 	addi	r2,r2,1
 181a334:	e0bffb05 	stb	r2,-20(fp)
      /* proceed to next pbuf */
      p = q;
 181a338:	e0bffc17 	ldw	r2,-16(fp)
 181a33c:	e0bfff15 	stw	r2,-4(fp)
 181a340:	00000106 	br	181a348 <pbuf_free+0x11c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 181a344:	e03fff15 	stw	zero,-4(fp)
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 181a348:	e0bfff17 	ldw	r2,-4(fp)
 181a34c:	103fc21e 	bne	r2,zero,181a258 <__ram_exceptions_end+0xff809f68>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 181a350:	e0bffb03 	ldbu	r2,-20(fp)
}
 181a354:	e037883a 	mov	sp,fp
 181a358:	dfc00117 	ldw	ra,4(sp)
 181a35c:	df000017 	ldw	fp,0(sp)
 181a360:	dec00204 	addi	sp,sp,8
 181a364:	f800283a 	ret

0181a368 <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
 181a368:	defffd04 	addi	sp,sp,-12
 181a36c:	df000215 	stw	fp,8(sp)
 181a370:	df000204 	addi	fp,sp,8
 181a374:	e13fff15 	stw	r4,-4(fp)
  u8_t len;

  len = 0;
 181a378:	e03ffe05 	stb	zero,-8(fp)
  while (p != NULL) {
 181a37c:	00000606 	br	181a398 <pbuf_clen+0x30>
    ++len;
 181a380:	e0bffe03 	ldbu	r2,-8(fp)
 181a384:	10800044 	addi	r2,r2,1
 181a388:	e0bffe05 	stb	r2,-8(fp)
    p = p->next;
 181a38c:	e0bfff17 	ldw	r2,-4(fp)
 181a390:	10800017 	ldw	r2,0(r2)
 181a394:	e0bfff15 	stw	r2,-4(fp)
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
 181a398:	e0bfff17 	ldw	r2,-4(fp)
 181a39c:	103ff81e 	bne	r2,zero,181a380 <__ram_exceptions_end+0xff80a090>
    ++len;
    p = p->next;
  }
  return len;
 181a3a0:	e0bffe03 	ldbu	r2,-8(fp)
}
 181a3a4:	e037883a 	mov	sp,fp
 181a3a8:	df000017 	ldw	fp,0(sp)
 181a3ac:	dec00104 	addi	sp,sp,4
 181a3b0:	f800283a 	ret

0181a3b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 181a3b4:	defffd04 	addi	sp,sp,-12
 181a3b8:	dfc00215 	stw	ra,8(sp)
 181a3bc:	df000115 	stw	fp,4(sp)
 181a3c0:	df000104 	addi	fp,sp,4
 181a3c4:	e13fff15 	stw	r4,-4(fp)
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 181a3c8:	e0bfff17 	ldw	r2,-4(fp)
 181a3cc:	10000c26 	beq	r2,zero,181a400 <pbuf_ref+0x4c>
    SYS_ARCH_PROTECT(old_level);
 181a3d0:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 181a3d4:	10000126 	beq	r2,zero,181a3dc <pbuf_ref+0x28>
 181a3d8:	1810f480 	call	1810f48 <vTaskEnterCritical>
    ++(p->ref);
 181a3dc:	e0bfff17 	ldw	r2,-4(fp)
 181a3e0:	1080038b 	ldhu	r2,14(r2)
 181a3e4:	10800044 	addi	r2,r2,1
 181a3e8:	1007883a 	mov	r3,r2
 181a3ec:	e0bfff17 	ldw	r2,-4(fp)
 181a3f0:	10c0038d 	sth	r3,14(r2)
    SYS_ARCH_UNPROTECT(old_level);
 181a3f4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 181a3f8:	10000126 	beq	r2,zero,181a400 <pbuf_ref+0x4c>
 181a3fc:	1810f900 	call	1810f90 <vTaskExitCritical>
  }
}
 181a400:	0001883a 	nop
 181a404:	e037883a 	mov	sp,fp
 181a408:	dfc00117 	ldw	ra,4(sp)
 181a40c:	df000017 	ldw	fp,0(sp)
 181a410:	dec00204 	addi	sp,sp,8
 181a414:	f800283a 	ret

0181a418 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 181a418:	defffb04 	addi	sp,sp,-20
 181a41c:	dfc00415 	stw	ra,16(sp)
 181a420:	df000315 	stw	fp,12(sp)
 181a424:	df000304 	addi	fp,sp,12
 181a428:	e13ffe15 	stw	r4,-8(fp)
 181a42c:	e17fff15 	stw	r5,-4(fp)
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 181a430:	e0bffe17 	ldw	r2,-8(fp)
 181a434:	10000226 	beq	r2,zero,181a440 <pbuf_cat+0x28>
 181a438:	e0bfff17 	ldw	r2,-4(fp)
 181a43c:	1000091e 	bne	r2,zero,181a464 <pbuf_cat+0x4c>
 181a440:	01c06134 	movhi	r7,388
 181a444:	39c38404 	addi	r7,r7,3600
 181a448:	0180bb84 	movi	r6,750
 181a44c:	01406134 	movhi	r5,388
 181a450:	29439e04 	addi	r5,r5,3704
 181a454:	01006134 	movhi	r4,388
 181a458:	21039204 	addi	r4,r4,3656
 181a45c:	1800b240 	call	1800b24 <printf>
 181a460:	003fff06 	br	181a460 <__ram_exceptions_end+0xff80a170>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 181a464:	e0bffe17 	ldw	r2,-8(fp)
 181a468:	e0bffd15 	stw	r2,-12(fp)
 181a46c:	00000b06 	br	181a49c <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 181a470:	e0bffd17 	ldw	r2,-12(fp)
 181a474:	10c0020b 	ldhu	r3,8(r2)
 181a478:	e0bfff17 	ldw	r2,-4(fp)
 181a47c:	1080020b 	ldhu	r2,8(r2)
 181a480:	1885883a 	add	r2,r3,r2
 181a484:	1007883a 	mov	r3,r2
 181a488:	e0bffd17 	ldw	r2,-12(fp)
 181a48c:	10c0020d 	sth	r3,8(r2)

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 181a490:	e0bffd17 	ldw	r2,-12(fp)
 181a494:	10800017 	ldw	r2,0(r2)
 181a498:	e0bffd15 	stw	r2,-12(fp)
 181a49c:	e0bffd17 	ldw	r2,-12(fp)
 181a4a0:	10800017 	ldw	r2,0(r2)
 181a4a4:	103ff21e 	bne	r2,zero,181a470 <__ram_exceptions_end+0xff80a180>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 181a4a8:	e0bffd17 	ldw	r2,-12(fp)
 181a4ac:	10c0020b 	ldhu	r3,8(r2)
 181a4b0:	e0bfff17 	ldw	r2,-4(fp)
 181a4b4:	1080020b 	ldhu	r2,8(r2)
 181a4b8:	1885883a 	add	r2,r3,r2
 181a4bc:	1007883a 	mov	r3,r2
 181a4c0:	e0bffd17 	ldw	r2,-12(fp)
 181a4c4:	10c0020d 	sth	r3,8(r2)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 181a4c8:	e0bffd17 	ldw	r2,-12(fp)
 181a4cc:	e0ffff17 	ldw	r3,-4(fp)
 181a4d0:	10c00015 	stw	r3,0(r2)
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 181a4d4:	0001883a 	nop
 181a4d8:	e037883a 	mov	sp,fp
 181a4dc:	dfc00117 	ldw	ra,4(sp)
 181a4e0:	df000017 	ldw	fp,0(sp)
 181a4e4:	dec00204 	addi	sp,sp,8
 181a4e8:	f800283a 	ret

0181a4ec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 181a4ec:	defffc04 	addi	sp,sp,-16
 181a4f0:	dfc00315 	stw	ra,12(sp)
 181a4f4:	df000215 	stw	fp,8(sp)
 181a4f8:	df000204 	addi	fp,sp,8
 181a4fc:	e13ffe15 	stw	r4,-8(fp)
 181a500:	e17fff15 	stw	r5,-4(fp)
  pbuf_cat(h, t);
 181a504:	e17fff17 	ldw	r5,-4(fp)
 181a508:	e13ffe17 	ldw	r4,-8(fp)
 181a50c:	181a4180 	call	181a418 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 181a510:	e13fff17 	ldw	r4,-4(fp)
 181a514:	181a3b40 	call	181a3b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 181a518:	0001883a 	nop
 181a51c:	e037883a 	mov	sp,fp
 181a520:	dfc00117 	ldw	ra,4(sp)
 181a524:	df000017 	ldw	fp,0(sp)
 181a528:	dec00204 	addi	sp,sp,8
 181a52c:	f800283a 	ret

0181a530 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
 181a530:	defffb04 	addi	sp,sp,-20
 181a534:	dfc00415 	stw	ra,16(sp)
 181a538:	df000315 	stw	fp,12(sp)
 181a53c:	df000304 	addi	fp,sp,12
 181a540:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *q;
  u8_t tail_gone = 1;
 181a544:	00800044 	movi	r2,1
 181a548:	e0bffd05 	stb	r2,-12(fp)
  /* tail */
  q = p->next;
 181a54c:	e0bfff17 	ldw	r2,-4(fp)
 181a550:	10800017 	ldw	r2,0(r2)
 181a554:	e0bffe15 	stw	r2,-8(fp)
  /* pbuf has successor in chain? */
  if (q != NULL) {
 181a558:	e0bffe17 	ldw	r2,-8(fp)
 181a55c:	10001126 	beq	r2,zero,181a5a4 <pbuf_dechain+0x74>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
 181a560:	e0bfff17 	ldw	r2,-4(fp)
 181a564:	10c0020b 	ldhu	r3,8(r2)
 181a568:	e0bfff17 	ldw	r2,-4(fp)
 181a56c:	1080028b 	ldhu	r2,10(r2)
 181a570:	1885c83a 	sub	r2,r3,r2
 181a574:	1007883a 	mov	r3,r2
 181a578:	e0bffe17 	ldw	r2,-8(fp)
 181a57c:	10c0020d 	sth	r3,8(r2)
    /* decouple pbuf from remainder */
    p->next = NULL;
 181a580:	e0bfff17 	ldw	r2,-4(fp)
 181a584:	10000015 	stw	zero,0(r2)
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
 181a588:	e0bfff17 	ldw	r2,-4(fp)
 181a58c:	10c0028b 	ldhu	r3,10(r2)
 181a590:	e0bfff17 	ldw	r2,-4(fp)
 181a594:	10c0020d 	sth	r3,8(r2)
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
 181a598:	e13ffe17 	ldw	r4,-8(fp)
 181a59c:	181a22c0 	call	181a22c <pbuf_free>
 181a5a0:	e0bffd05 	stb	r2,-12(fp)
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  return ((tail_gone > 0) ? NULL : q);
 181a5a4:	e0bffd03 	ldbu	r2,-12(fp)
 181a5a8:	1000021e 	bne	r2,zero,181a5b4 <pbuf_dechain+0x84>
 181a5ac:	e0bffe17 	ldw	r2,-8(fp)
 181a5b0:	00000106 	br	181a5b8 <pbuf_dechain+0x88>
 181a5b4:	0005883a 	mov	r2,zero
}
 181a5b8:	e037883a 	mov	sp,fp
 181a5bc:	dfc00117 	ldw	ra,4(sp)
 181a5c0:	df000017 	ldw	fp,0(sp)
 181a5c4:	dec00204 	addi	sp,sp,8
 181a5c8:	f800283a 	ret

0181a5cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 181a5cc:	defffa04 	addi	sp,sp,-24
 181a5d0:	dfc00515 	stw	ra,20(sp)
 181a5d4:	df000415 	stw	fp,16(sp)
 181a5d8:	df000404 	addi	fp,sp,16
 181a5dc:	e13ffe15 	stw	r4,-8(fp)
 181a5e0:	e17fff15 	stw	r5,-4(fp)
  u16_t offset_to=0, offset_from=0, len;
 181a5e4:	e03ffc0d 	sth	zero,-16(fp)
 181a5e8:	e03ffc8d 	sth	zero,-14(fp)

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 181a5ec:	e0bffe17 	ldw	r2,-8(fp)
 181a5f0:	10000926 	beq	r2,zero,181a618 <pbuf_copy+0x4c>
 181a5f4:	e0bfff17 	ldw	r2,-4(fp)
 181a5f8:	10000726 	beq	r2,zero,181a618 <pbuf_copy+0x4c>
 181a5fc:	e0bffe17 	ldw	r2,-8(fp)
 181a600:	10c0020b 	ldhu	r3,8(r2)
 181a604:	e0bfff17 	ldw	r2,-4(fp)
 181a608:	1080020b 	ldhu	r2,8(r2)
 181a60c:	18ffffcc 	andi	r3,r3,65535
 181a610:	10bfffcc 	andi	r2,r2,65535
 181a614:	1880092e 	bgeu	r3,r2,181a63c <pbuf_copy+0x70>
 181a618:	01c06134 	movhi	r7,388
 181a61c:	39c38404 	addi	r7,r7,3600
 181a620:	0180d744 	movi	r6,861
 181a624:	01406134 	movhi	r5,388
 181a628:	2943ac04 	addi	r5,r5,3760
 181a62c:	01006134 	movhi	r4,388
 181a630:	21039204 	addi	r4,r4,3656
 181a634:	1800b240 	call	1800b24 <printf>
 181a638:	003fff06 	br	181a638 <__ram_exceptions_end+0xff80a348>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 181a63c:	e0bffe17 	ldw	r2,-8(fp)
 181a640:	1080028b 	ldhu	r2,10(r2)
 181a644:	10ffffcc 	andi	r3,r2,65535
 181a648:	e0bffc0b 	ldhu	r2,-16(fp)
 181a64c:	1887c83a 	sub	r3,r3,r2
 181a650:	e0bfff17 	ldw	r2,-4(fp)
 181a654:	1080028b 	ldhu	r2,10(r2)
 181a658:	113fffcc 	andi	r4,r2,65535
 181a65c:	e0bffc8b 	ldhu	r2,-14(fp)
 181a660:	2085c83a 	sub	r2,r4,r2
 181a664:	18800616 	blt	r3,r2,181a680 <pbuf_copy+0xb4>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 181a668:	e0bfff17 	ldw	r2,-4(fp)
 181a66c:	10c0028b 	ldhu	r3,10(r2)
 181a670:	e0bffc8b 	ldhu	r2,-14(fp)
 181a674:	1885c83a 	sub	r2,r3,r2
 181a678:	e0bffd0d 	sth	r2,-12(fp)
 181a67c:	00000506 	br	181a694 <pbuf_copy+0xc8>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 181a680:	e0bffe17 	ldw	r2,-8(fp)
 181a684:	10c0028b 	ldhu	r3,10(r2)
 181a688:	e0bffc0b 	ldhu	r2,-16(fp)
 181a68c:	1885c83a 	sub	r2,r3,r2
 181a690:	e0bffd0d 	sth	r2,-12(fp)
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 181a694:	e0bffe17 	ldw	r2,-8(fp)
 181a698:	10c00117 	ldw	r3,4(r2)
 181a69c:	e0bffc0b 	ldhu	r2,-16(fp)
 181a6a0:	1889883a 	add	r4,r3,r2
 181a6a4:	e0bfff17 	ldw	r2,-4(fp)
 181a6a8:	10c00117 	ldw	r3,4(r2)
 181a6ac:	e0bffc8b 	ldhu	r2,-14(fp)
 181a6b0:	1885883a 	add	r2,r3,r2
 181a6b4:	e0fffd0b 	ldhu	r3,-12(fp)
 181a6b8:	180d883a 	mov	r6,r3
 181a6bc:	100b883a 	mov	r5,r2
 181a6c0:	1805f980 	call	1805f98 <memcpy>
    offset_to += len;
 181a6c4:	e0fffc0b 	ldhu	r3,-16(fp)
 181a6c8:	e0bffd0b 	ldhu	r2,-12(fp)
 181a6cc:	1885883a 	add	r2,r3,r2
 181a6d0:	e0bffc0d 	sth	r2,-16(fp)
    offset_from += len;
 181a6d4:	e0fffc8b 	ldhu	r3,-14(fp)
 181a6d8:	e0bffd0b 	ldhu	r2,-12(fp)
 181a6dc:	1885883a 	add	r2,r3,r2
 181a6e0:	e0bffc8d 	sth	r2,-14(fp)
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 181a6e4:	e0bfff17 	ldw	r2,-4(fp)
 181a6e8:	1080028b 	ldhu	r2,10(r2)
 181a6ec:	10bfffcc 	andi	r2,r2,65535
 181a6f0:	e0fffc8b 	ldhu	r3,-14(fp)
 181a6f4:	18800436 	bltu	r3,r2,181a708 <pbuf_copy+0x13c>
      /* on to next p_from (if any) */
      offset_from = 0;
 181a6f8:	e03ffc8d 	sth	zero,-14(fp)
      p_from = p_from->next;
 181a6fc:	e0bfff17 	ldw	r2,-4(fp)
 181a700:	10800017 	ldw	r2,0(r2)
 181a704:	e0bfff15 	stw	r2,-4(fp)
    }
    if (offset_to == p_to->len) {
 181a708:	e0bffe17 	ldw	r2,-8(fp)
 181a70c:	1080028b 	ldhu	r2,10(r2)
 181a710:	10ffffcc 	andi	r3,r2,65535
 181a714:	e0bffc0b 	ldhu	r2,-16(fp)
 181a718:	1880111e 	bne	r3,r2,181a760 <pbuf_copy+0x194>
      /* on to next p_to (if any) */
      offset_to = 0;
 181a71c:	e03ffc0d 	sth	zero,-16(fp)
      p_to = p_to->next;
 181a720:	e0bffe17 	ldw	r2,-8(fp)
 181a724:	10800017 	ldw	r2,0(r2)
 181a728:	e0bffe15 	stw	r2,-8(fp)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 181a72c:	e0bffe17 	ldw	r2,-8(fp)
 181a730:	10000b1e 	bne	r2,zero,181a760 <pbuf_copy+0x194>
 181a734:	e0bfff17 	ldw	r2,-4(fp)
 181a738:	10000926 	beq	r2,zero,181a760 <pbuf_copy+0x194>
 181a73c:	01c06134 	movhi	r7,388
 181a740:	39c38404 	addi	r7,r7,3600
 181a744:	0180de04 	movi	r6,888
 181a748:	01406134 	movhi	r5,388
 181a74c:	2943b804 	addi	r5,r5,3808
 181a750:	01006134 	movhi	r4,388
 181a754:	21039204 	addi	r4,r4,3656
 181a758:	1800b240 	call	1800b24 <printf>
 181a75c:	003fff06 	br	181a75c <__ram_exceptions_end+0xff80a46c>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 181a760:	e0bfff17 	ldw	r2,-4(fp)
 181a764:	10001326 	beq	r2,zero,181a7b4 <pbuf_copy+0x1e8>
 181a768:	e0bfff17 	ldw	r2,-4(fp)
 181a76c:	10c0028b 	ldhu	r3,10(r2)
 181a770:	e0bfff17 	ldw	r2,-4(fp)
 181a774:	1080020b 	ldhu	r2,8(r2)
 181a778:	18ffffcc 	andi	r3,r3,65535
 181a77c:	10bfffcc 	andi	r2,r2,65535
 181a780:	18800c1e 	bne	r3,r2,181a7b4 <pbuf_copy+0x1e8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 181a784:	e0bfff17 	ldw	r2,-4(fp)
 181a788:	10800017 	ldw	r2,0(r2)
 181a78c:	10000926 	beq	r2,zero,181a7b4 <pbuf_copy+0x1e8>
 181a790:	01c06134 	movhi	r7,388
 181a794:	39c38404 	addi	r7,r7,3600
 181a798:	0180df84 	movi	r6,894
 181a79c:	01406134 	movhi	r5,388
 181a7a0:	2943bc04 	addi	r5,r5,3824
 181a7a4:	01006134 	movhi	r4,388
 181a7a8:	21039204 	addi	r4,r4,3656
 181a7ac:	1800b240 	call	1800b24 <printf>
 181a7b0:	003fff06 	br	181a7b0 <__ram_exceptions_end+0xff80a4c0>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 181a7b4:	e0bffe17 	ldw	r2,-8(fp)
 181a7b8:	10001326 	beq	r2,zero,181a808 <pbuf_copy+0x23c>
 181a7bc:	e0bffe17 	ldw	r2,-8(fp)
 181a7c0:	10c0028b 	ldhu	r3,10(r2)
 181a7c4:	e0bffe17 	ldw	r2,-8(fp)
 181a7c8:	1080020b 	ldhu	r2,8(r2)
 181a7cc:	18ffffcc 	andi	r3,r3,65535
 181a7d0:	10bfffcc 	andi	r2,r2,65535
 181a7d4:	18800c1e 	bne	r3,r2,181a808 <pbuf_copy+0x23c>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 181a7d8:	e0bffe17 	ldw	r2,-8(fp)
 181a7dc:	10800017 	ldw	r2,0(r2)
 181a7e0:	10000926 	beq	r2,zero,181a808 <pbuf_copy+0x23c>
 181a7e4:	01c06134 	movhi	r7,388
 181a7e8:	39c38404 	addi	r7,r7,3600
 181a7ec:	0180e0c4 	movi	r6,899
 181a7f0:	01406134 	movhi	r5,388
 181a7f4:	2943bc04 	addi	r5,r5,3824
 181a7f8:	01006134 	movhi	r4,388
 181a7fc:	21039204 	addi	r4,r4,3656
 181a800:	1800b240 	call	1800b24 <printf>
 181a804:	003fff06 	br	181a804 <__ram_exceptions_end+0xff80a514>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 181a808:	e0bfff17 	ldw	r2,-4(fp)
 181a80c:	103f8b1e 	bne	r2,zero,181a63c <__ram_exceptions_end+0xff80a34c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 181a810:	0005883a 	mov	r2,zero
}
 181a814:	e037883a 	mov	sp,fp
 181a818:	dfc00117 	ldw	ra,4(sp)
 181a81c:	df000017 	ldw	fp,0(sp)
 181a820:	dec00204 	addi	sp,sp,8
 181a824:	f800283a 	ret

0181a828 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 181a828:	defff704 	addi	sp,sp,-36
 181a82c:	dfc00815 	stw	ra,32(sp)
 181a830:	df000715 	stw	fp,28(sp)
 181a834:	df000704 	addi	fp,sp,28
 181a838:	e13ffc15 	stw	r4,-16(fp)
 181a83c:	e17ffd15 	stw	r5,-12(fp)
 181a840:	3007883a 	mov	r3,r6
 181a844:	3805883a 	mov	r2,r7
 181a848:	e0fffe0d 	sth	r3,-8(fp)
 181a84c:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 181a850:	e03ffb0d 	sth	zero,-20(fp)

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 181a854:	e0bffc17 	ldw	r2,-16(fp)
 181a858:	1000091e 	bne	r2,zero,181a880 <pbuf_copy_partial+0x58>
 181a85c:	01c06134 	movhi	r7,388
 181a860:	39c38404 	addi	r7,r7,3600
 181a864:	0180e744 	movi	r6,925
 181a868:	01406134 	movhi	r5,388
 181a86c:	2943c704 	addi	r5,r5,3868
 181a870:	01006134 	movhi	r4,388
 181a874:	21039204 	addi	r4,r4,3656
 181a878:	1800b240 	call	1800b24 <printf>
 181a87c:	003fff06 	br	181a87c <__ram_exceptions_end+0xff80a58c>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 181a880:	e0bffd17 	ldw	r2,-12(fp)
 181a884:	1000091e 	bne	r2,zero,181a8ac <pbuf_copy_partial+0x84>
 181a888:	01c06134 	movhi	r7,388
 181a88c:	39c38404 	addi	r7,r7,3600
 181a890:	0180e784 	movi	r6,926
 181a894:	01406134 	movhi	r5,388
 181a898:	2943cf04 	addi	r5,r5,3900
 181a89c:	01006134 	movhi	r4,388
 181a8a0:	21039204 	addi	r4,r4,3656
 181a8a4:	1800b240 	call	1800b24 <printf>
 181a8a8:	003fff06 	br	181a8a8 <__ram_exceptions_end+0xff80a5b8>

  left = 0;
 181a8ac:	e03ffa0d 	sth	zero,-24(fp)

  if((buf == NULL) || (dataptr == NULL)) {
 181a8b0:	e0bffc17 	ldw	r2,-16(fp)
 181a8b4:	10000226 	beq	r2,zero,181a8c0 <pbuf_copy_partial+0x98>
 181a8b8:	e0bffd17 	ldw	r2,-12(fp)
 181a8bc:	1000021e 	bne	r2,zero,181a8c8 <pbuf_copy_partial+0xa0>
    return 0;
 181a8c0:	0005883a 	mov	r2,zero
 181a8c4:	00003a06 	br	181a9b0 <pbuf_copy_partial+0x188>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 181a8c8:	e0bffc17 	ldw	r2,-16(fp)
 181a8cc:	e0bff915 	stw	r2,-28(fp)
 181a8d0:	00003206 	br	181a99c <pbuf_copy_partial+0x174>
    if ((offset != 0) && (offset >= p->len)) {
 181a8d4:	e0bfff0b 	ldhu	r2,-4(fp)
 181a8d8:	10000b26 	beq	r2,zero,181a908 <pbuf_copy_partial+0xe0>
 181a8dc:	e0bff917 	ldw	r2,-28(fp)
 181a8e0:	1080028b 	ldhu	r2,10(r2)
 181a8e4:	10bfffcc 	andi	r2,r2,65535
 181a8e8:	e0ffff0b 	ldhu	r3,-4(fp)
 181a8ec:	18800636 	bltu	r3,r2,181a908 <pbuf_copy_partial+0xe0>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 181a8f0:	e0bff917 	ldw	r2,-28(fp)
 181a8f4:	1080028b 	ldhu	r2,10(r2)
 181a8f8:	e0ffff0b 	ldhu	r3,-4(fp)
 181a8fc:	1885c83a 	sub	r2,r3,r2
 181a900:	e0bfff0d 	sth	r2,-4(fp)
 181a904:	00002206 	br	181a990 <pbuf_copy_partial+0x168>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 181a908:	e0bff917 	ldw	r2,-28(fp)
 181a90c:	10c0028b 	ldhu	r3,10(r2)
 181a910:	e0bfff0b 	ldhu	r2,-4(fp)
 181a914:	1885c83a 	sub	r2,r3,r2
 181a918:	e0bffa8d 	sth	r2,-22(fp)
      if (buf_copy_len > len)
 181a91c:	e0bffa8b 	ldhu	r2,-22(fp)
 181a920:	e0fffe0b 	ldhu	r3,-8(fp)
 181a924:	1880022e 	bgeu	r3,r2,181a930 <pbuf_copy_partial+0x108>
          buf_copy_len = len;
 181a928:	e0bffe0b 	ldhu	r2,-8(fp)
 181a92c:	e0bffa8d 	sth	r2,-22(fp)
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 181a930:	e0bffa0b 	ldhu	r2,-24(fp)
 181a934:	e0fffd17 	ldw	r3,-12(fp)
 181a938:	1889883a 	add	r4,r3,r2
 181a93c:	e0bff917 	ldw	r2,-28(fp)
 181a940:	10c00117 	ldw	r3,4(r2)
 181a944:	e0bfff0b 	ldhu	r2,-4(fp)
 181a948:	1885883a 	add	r2,r3,r2
 181a94c:	e0fffa8b 	ldhu	r3,-22(fp)
 181a950:	180d883a 	mov	r6,r3
 181a954:	100b883a 	mov	r5,r2
 181a958:	1805f980 	call	1805f98 <memcpy>
      copied_total += buf_copy_len;
 181a95c:	e0fffb0b 	ldhu	r3,-20(fp)
 181a960:	e0bffa8b 	ldhu	r2,-22(fp)
 181a964:	1885883a 	add	r2,r3,r2
 181a968:	e0bffb0d 	sth	r2,-20(fp)
      left += buf_copy_len;
 181a96c:	e0fffa0b 	ldhu	r3,-24(fp)
 181a970:	e0bffa8b 	ldhu	r2,-22(fp)
 181a974:	1885883a 	add	r2,r3,r2
 181a978:	e0bffa0d 	sth	r2,-24(fp)
      len -= buf_copy_len;
 181a97c:	e0fffe0b 	ldhu	r3,-8(fp)
 181a980:	e0bffa8b 	ldhu	r2,-22(fp)
 181a984:	1885c83a 	sub	r2,r3,r2
 181a988:	e0bffe0d 	sth	r2,-8(fp)
      offset = 0;
 181a98c:	e03fff0d 	sth	zero,-4(fp)
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 181a990:	e0bff917 	ldw	r2,-28(fp)
 181a994:	10800017 	ldw	r2,0(r2)
 181a998:	e0bff915 	stw	r2,-28(fp)
 181a99c:	e0bffe0b 	ldhu	r2,-8(fp)
 181a9a0:	10000226 	beq	r2,zero,181a9ac <pbuf_copy_partial+0x184>
 181a9a4:	e0bff917 	ldw	r2,-28(fp)
 181a9a8:	103fca1e 	bne	r2,zero,181a8d4 <__ram_exceptions_end+0xff80a5e4>
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
 181a9ac:	e0bffb0b 	ldhu	r2,-20(fp)
}
 181a9b0:	e037883a 	mov	sp,fp
 181a9b4:	dfc00117 	ldw	ra,4(sp)
 181a9b8:	df000017 	ldw	fp,0(sp)
 181a9bc:	dec00204 	addi	sp,sp,8
 181a9c0:	f800283a 	ret

0181a9c4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 181a9c4:	defff804 	addi	sp,sp,-32
 181a9c8:	dfc00715 	stw	ra,28(sp)
 181a9cc:	df000615 	stw	fp,24(sp)
 181a9d0:	df000604 	addi	fp,sp,24
 181a9d4:	e13ffd15 	stw	r4,-12(fp)
 181a9d8:	e17ffe15 	stw	r5,-8(fp)
 181a9dc:	3005883a 	mov	r2,r6
 181a9e0:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 181a9e4:	e0bfff0b 	ldhu	r2,-4(fp)
 181a9e8:	e0bffb8d 	sth	r2,-18(fp)
  u16_t copied_total = 0;
 181a9ec:	e03ffc0d 	sth	zero,-16(fp)

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return 0;);
 181a9f0:	e0bffd17 	ldw	r2,-12(fp)
 181a9f4:	1000091e 	bne	r2,zero,181aa1c <pbuf_take+0x58>
 181a9f8:	01c06134 	movhi	r7,388
 181a9fc:	39c38404 	addi	r7,r7,3600
 181aa00:	0180f344 	movi	r6,973
 181aa04:	01406134 	movhi	r5,388
 181aa08:	2943d804 	addi	r5,r5,3936
 181aa0c:	01006134 	movhi	r4,388
 181aa10:	21039204 	addi	r4,r4,3656
 181aa14:	1800b240 	call	1800b24 <printf>
 181aa18:	003fff06 	br	181aa18 <__ram_exceptions_end+0xff80a728>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return 0;);
 181aa1c:	e0bffe17 	ldw	r2,-8(fp)
 181aa20:	1000091e 	bne	r2,zero,181aa48 <pbuf_take+0x84>
 181aa24:	01c06134 	movhi	r7,388
 181aa28:	39c38404 	addi	r7,r7,3600
 181aa2c:	0180f384 	movi	r6,974
 181aa30:	01406134 	movhi	r5,388
 181aa34:	2943de04 	addi	r5,r5,3960
 181aa38:	01006134 	movhi	r4,388
 181aa3c:	21039204 	addi	r4,r4,3656
 181aa40:	1800b240 	call	1800b24 <printf>
 181aa44:	003fff06 	br	181aa44 <__ram_exceptions_end+0xff80a754>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 181aa48:	e0bffd17 	ldw	r2,-12(fp)
 181aa4c:	10000726 	beq	r2,zero,181aa6c <pbuf_take+0xa8>
 181aa50:	e0bffe17 	ldw	r2,-8(fp)
 181aa54:	10000526 	beq	r2,zero,181aa6c <pbuf_take+0xa8>
 181aa58:	e0bffd17 	ldw	r2,-12(fp)
 181aa5c:	1080020b 	ldhu	r2,8(r2)
 181aa60:	10ffffcc 	andi	r3,r2,65535
 181aa64:	e0bfff0b 	ldhu	r2,-4(fp)
 181aa68:	1880022e 	bgeu	r3,r2,181aa74 <pbuf_take+0xb0>
    return ERR_ARG;
 181aa6c:	00bffc84 	movi	r2,-14
 181aa70:	00002406 	br	181ab04 <pbuf_take+0x140>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; total_copy_len != 0; p = p->next) {
 181aa74:	e0bffd17 	ldw	r2,-12(fp)
 181aa78:	e0bffa15 	stw	r2,-24(fp)
 181aa7c:	00001e06 	br	181aaf8 <pbuf_take+0x134>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
    buf_copy_len = total_copy_len;
 181aa80:	e0bffb8b 	ldhu	r2,-18(fp)
 181aa84:	e0bffb0d 	sth	r2,-20(fp)
    if (buf_copy_len > p->len) {
 181aa88:	e0bffa17 	ldw	r2,-24(fp)
 181aa8c:	1080028b 	ldhu	r2,10(r2)
 181aa90:	10ffffcc 	andi	r3,r2,65535
 181aa94:	e0bffb0b 	ldhu	r2,-20(fp)
 181aa98:	1880032e 	bgeu	r3,r2,181aaa8 <pbuf_take+0xe4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 181aa9c:	e0bffa17 	ldw	r2,-24(fp)
 181aaa0:	1080028b 	ldhu	r2,10(r2)
 181aaa4:	e0bffb0d 	sth	r2,-20(fp)
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((char*)dataptr)[copied_total], buf_copy_len);
 181aaa8:	e0bffa17 	ldw	r2,-24(fp)
 181aaac:	11000117 	ldw	r4,4(r2)
 181aab0:	e0bffc0b 	ldhu	r2,-16(fp)
 181aab4:	e0fffe17 	ldw	r3,-8(fp)
 181aab8:	1885883a 	add	r2,r3,r2
 181aabc:	e0fffb0b 	ldhu	r3,-20(fp)
 181aac0:	180d883a 	mov	r6,r3
 181aac4:	100b883a 	mov	r5,r2
 181aac8:	1805f980 	call	1805f98 <memcpy>
    total_copy_len -= buf_copy_len;
 181aacc:	e0fffb8b 	ldhu	r3,-18(fp)
 181aad0:	e0bffb0b 	ldhu	r2,-20(fp)
 181aad4:	1885c83a 	sub	r2,r3,r2
 181aad8:	e0bffb8d 	sth	r2,-18(fp)
    copied_total += buf_copy_len;
 181aadc:	e0fffc0b 	ldhu	r3,-16(fp)
 181aae0:	e0bffb0b 	ldhu	r2,-20(fp)
 181aae4:	1885883a 	add	r2,r3,r2
 181aae8:	e0bffc0d 	sth	r2,-16(fp)
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; total_copy_len != 0; p = p->next) {
 181aaec:	e0bffa17 	ldw	r2,-24(fp)
 181aaf0:	10800017 	ldw	r2,0(r2)
 181aaf4:	e0bffa15 	stw	r2,-24(fp)
 181aaf8:	e0bffb8b 	ldhu	r2,-18(fp)
 181aafc:	103fe01e 	bne	r2,zero,181aa80 <__ram_exceptions_end+0xff80a790>
    MEMCPY(p->payload, &((char*)dataptr)[copied_total], buf_copy_len);
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
 181ab00:	0005883a 	mov	r2,zero
}
 181ab04:	e037883a 	mov	sp,fp
 181ab08:	dfc00117 	ldw	ra,4(sp)
 181ab0c:	df000017 	ldw	fp,0(sp)
 181ab10:	dec00204 	addi	sp,sp,8
 181ab14:	f800283a 	ret

0181ab18 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 181ab18:	defffa04 	addi	sp,sp,-24
 181ab1c:	dfc00515 	stw	ra,20(sp)
 181ab20:	df000415 	stw	fp,16(sp)
 181ab24:	df000404 	addi	fp,sp,16
 181ab28:	e13ffe15 	stw	r4,-8(fp)
 181ab2c:	e17fff15 	stw	r5,-4(fp)
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
 181ab30:	e0bffe17 	ldw	r2,-8(fp)
 181ab34:	10800017 	ldw	r2,0(r2)
 181ab38:	1000021e 	bne	r2,zero,181ab44 <pbuf_coalesce+0x2c>
    return p;
 181ab3c:	e0bffe17 	ldw	r2,-8(fp)
 181ab40:	00001306 	br	181ab90 <pbuf_coalesce+0x78>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
 181ab44:	e0bffe17 	ldw	r2,-8(fp)
 181ab48:	1080020b 	ldhu	r2,8(r2)
 181ab4c:	10bfffcc 	andi	r2,r2,65535
 181ab50:	000d883a 	mov	r6,zero
 181ab54:	100b883a 	mov	r5,r2
 181ab58:	e13fff17 	ldw	r4,-4(fp)
 181ab5c:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181ab60:	e0bffc15 	stw	r2,-16(fp)
  if (q == NULL) {
 181ab64:	e0bffc17 	ldw	r2,-16(fp)
 181ab68:	1000021e 	bne	r2,zero,181ab74 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
 181ab6c:	e0bffe17 	ldw	r2,-8(fp)
 181ab70:	00000706 	br	181ab90 <pbuf_coalesce+0x78>
  }
  err = pbuf_copy(q, p);
 181ab74:	e17ffe17 	ldw	r5,-8(fp)
 181ab78:	e13ffc17 	ldw	r4,-16(fp)
 181ab7c:	181a5cc0 	call	181a5cc <pbuf_copy>
 181ab80:	e0bffd05 	stb	r2,-12(fp)
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  pbuf_free(p);
 181ab84:	e13ffe17 	ldw	r4,-8(fp)
 181ab88:	181a22c0 	call	181a22c <pbuf_free>
  return q;
 181ab8c:	e0bffc17 	ldw	r2,-16(fp)
}
 181ab90:	e037883a 	mov	sp,fp
 181ab94:	dfc00117 	ldw	ra,4(sp)
 181ab98:	df000017 	ldw	fp,0(sp)
 181ab9c:	dec00204 	addi	sp,sp,8
 181aba0:	f800283a 	ret

0181aba4 <pbuf_fill_chksum>:
 *         within the (first) pbuf (no pbuf queues!)
 */
err_t
pbuf_fill_chksum(struct pbuf *p, u16_t start_offset, const void *dataptr,
                 u16_t len, u16_t *chksum)
{
 181aba4:	defff704 	addi	sp,sp,-36
 181aba8:	dfc00815 	stw	ra,32(sp)
 181abac:	df000715 	stw	fp,28(sp)
 181abb0:	df000704 	addi	fp,sp,28
 181abb4:	e13ffc15 	stw	r4,-16(fp)
 181abb8:	2807883a 	mov	r3,r5
 181abbc:	e1bffe15 	stw	r6,-8(fp)
 181abc0:	3805883a 	mov	r2,r7
 181abc4:	e0fffd0d 	sth	r3,-12(fp)
 181abc8:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("p != NULL", p != NULL);
  LWIP_ASSERT("dataptr != NULL", dataptr != NULL);
  LWIP_ASSERT("chksum != NULL", chksum != NULL);
  LWIP_ASSERT("len != 0", len != 0);

  if ((start_offset >= p->len) || (start_offset + len > p->len)) {
 181abcc:	e0bffc17 	ldw	r2,-16(fp)
 181abd0:	1080028b 	ldhu	r2,10(r2)
 181abd4:	10bfffcc 	andi	r2,r2,65535
 181abd8:	e0fffd0b 	ldhu	r3,-12(fp)
 181abdc:	1880072e 	bgeu	r3,r2,181abfc <pbuf_fill_chksum+0x58>
 181abe0:	e0fffd0b 	ldhu	r3,-12(fp)
 181abe4:	e0bfff0b 	ldhu	r2,-4(fp)
 181abe8:	1885883a 	add	r2,r3,r2
 181abec:	e0fffc17 	ldw	r3,-16(fp)
 181abf0:	18c0028b 	ldhu	r3,10(r3)
 181abf4:	18ffffcc 	andi	r3,r3,65535
 181abf8:	1880020e 	bge	r3,r2,181ac04 <pbuf_fill_chksum+0x60>
    return ERR_ARG;
 181abfc:	00bffc84 	movi	r2,-14
 181ac00:	00002606 	br	181ac9c <pbuf_fill_chksum+0xf8>
  }

  dst_ptr = ((char*)p->payload) + start_offset;
 181ac04:	e0bffc17 	ldw	r2,-16(fp)
 181ac08:	10c00117 	ldw	r3,4(r2)
 181ac0c:	e0bffd0b 	ldhu	r2,-12(fp)
 181ac10:	1885883a 	add	r2,r3,r2
 181ac14:	e0bffa15 	stw	r2,-24(fp)
  copy_chksum = LWIP_CHKSUM_COPY(dst_ptr, dataptr, len);
 181ac18:	e0bfff0b 	ldhu	r2,-4(fp)
 181ac1c:	100d883a 	mov	r6,r2
 181ac20:	e17ffe17 	ldw	r5,-8(fp)
 181ac24:	e13ffa17 	ldw	r4,-24(fp)
 181ac28:	183191c0 	call	183191c <lwip_chksum_copy>
 181ac2c:	e0bff90d 	sth	r2,-28(fp)
  if ((start_offset & 1) != 0) {
 181ac30:	e0bffd0b 	ldhu	r2,-12(fp)
 181ac34:	1080004c 	andi	r2,r2,1
 181ac38:	10000726 	beq	r2,zero,181ac58 <pbuf_fill_chksum+0xb4>
    copy_chksum = SWAP_BYTES_IN_WORD(copy_chksum);
 181ac3c:	e0bff90b 	ldhu	r2,-28(fp)
 181ac40:	1004d23a 	srli	r2,r2,8
 181ac44:	1007883a 	mov	r3,r2
 181ac48:	e0bff90b 	ldhu	r2,-28(fp)
 181ac4c:	1004923a 	slli	r2,r2,8
 181ac50:	1884b03a 	or	r2,r3,r2
 181ac54:	e0bff90d 	sth	r2,-28(fp)
  }
  acc = *chksum;
 181ac58:	e0800217 	ldw	r2,8(fp)
 181ac5c:	1080000b 	ldhu	r2,0(r2)
 181ac60:	10bfffcc 	andi	r2,r2,65535
 181ac64:	e0bffb15 	stw	r2,-20(fp)
  acc += copy_chksum;
 181ac68:	e0bff90b 	ldhu	r2,-28(fp)
 181ac6c:	e0fffb17 	ldw	r3,-20(fp)
 181ac70:	1885883a 	add	r2,r3,r2
 181ac74:	e0bffb15 	stw	r2,-20(fp)
  *chksum = FOLD_U32T(acc);
 181ac78:	e0bffb17 	ldw	r2,-20(fp)
 181ac7c:	1004d43a 	srli	r2,r2,16
 181ac80:	1007883a 	mov	r3,r2
 181ac84:	e0bffb17 	ldw	r2,-20(fp)
 181ac88:	1885883a 	add	r2,r3,r2
 181ac8c:	1007883a 	mov	r3,r2
 181ac90:	e0800217 	ldw	r2,8(fp)
 181ac94:	10c0000d 	sth	r3,0(r2)
  return ERR_OK;
 181ac98:	0005883a 	mov	r2,zero
}
 181ac9c:	e037883a 	mov	sp,fp
 181aca0:	dfc00117 	ldw	ra,4(sp)
 181aca4:	df000017 	ldw	fp,0(sp)
 181aca8:	dec00204 	addi	sp,sp,8
 181acac:	f800283a 	ret

0181acb0 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(struct pbuf* p, u16_t offset)
{
 181acb0:	defffb04 	addi	sp,sp,-20
 181acb4:	df000415 	stw	fp,16(sp)
 181acb8:	df000404 	addi	fp,sp,16
 181acbc:	e13ffe15 	stw	r4,-8(fp)
 181acc0:	2805883a 	mov	r2,r5
 181acc4:	e0bfff0d 	sth	r2,-4(fp)
  u16_t copy_from = offset;
 181acc8:	e0bfff0b 	ldhu	r2,-4(fp)
 181accc:	e0bffc0d 	sth	r2,-16(fp)
  struct pbuf* q = p;
 181acd0:	e0bffe17 	ldw	r2,-8(fp)
 181acd4:	e0bffd15 	stw	r2,-12(fp)

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
 181acd8:	00000806 	br	181acfc <pbuf_get_at+0x4c>
    copy_from -= q->len;
 181acdc:	e0bffd17 	ldw	r2,-12(fp)
 181ace0:	1080028b 	ldhu	r2,10(r2)
 181ace4:	e0fffc0b 	ldhu	r3,-16(fp)
 181ace8:	1885c83a 	sub	r2,r3,r2
 181acec:	e0bffc0d 	sth	r2,-16(fp)
    q = q->next;
 181acf0:	e0bffd17 	ldw	r2,-12(fp)
 181acf4:	10800017 	ldw	r2,0(r2)
 181acf8:	e0bffd15 	stw	r2,-12(fp)
{
  u16_t copy_from = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
 181acfc:	e0bffd17 	ldw	r2,-12(fp)
 181ad00:	10000526 	beq	r2,zero,181ad18 <pbuf_get_at+0x68>
 181ad04:	e0bffd17 	ldw	r2,-12(fp)
 181ad08:	1080028b 	ldhu	r2,10(r2)
 181ad0c:	10bfffcc 	andi	r2,r2,65535
 181ad10:	e0fffc0b 	ldhu	r3,-16(fp)
 181ad14:	18bff12e 	bgeu	r3,r2,181acdc <__ram_exceptions_end+0xff80a9ec>
    copy_from -= q->len;
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > copy_from)) {
 181ad18:	e0bffd17 	ldw	r2,-12(fp)
 181ad1c:	10000b26 	beq	r2,zero,181ad4c <pbuf_get_at+0x9c>
 181ad20:	e0bffd17 	ldw	r2,-12(fp)
 181ad24:	1080028b 	ldhu	r2,10(r2)
 181ad28:	10bfffcc 	andi	r2,r2,65535
 181ad2c:	e0fffc0b 	ldhu	r3,-16(fp)
 181ad30:	1880062e 	bgeu	r3,r2,181ad4c <pbuf_get_at+0x9c>
    return ((u8_t*)q->payload)[copy_from];
 181ad34:	e0bffd17 	ldw	r2,-12(fp)
 181ad38:	10c00117 	ldw	r3,4(r2)
 181ad3c:	e0bffc0b 	ldhu	r2,-16(fp)
 181ad40:	1885883a 	add	r2,r3,r2
 181ad44:	10800003 	ldbu	r2,0(r2)
 181ad48:	00000106 	br	181ad50 <pbuf_get_at+0xa0>
  }
  return 0;
 181ad4c:	0005883a 	mov	r2,zero
}
 181ad50:	e037883a 	mov	sp,fp
 181ad54:	df000017 	ldw	fp,0(sp)
 181ad58:	dec00104 	addi	sp,sp,4
 181ad5c:	f800283a 	ret

0181ad60 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
 181ad60:	defff704 	addi	sp,sp,-36
 181ad64:	dfc00815 	stw	ra,32(sp)
 181ad68:	df000715 	stw	fp,28(sp)
 181ad6c:	df000704 	addi	fp,sp,28
 181ad70:	e13ffc15 	stw	r4,-16(fp)
 181ad74:	2807883a 	mov	r3,r5
 181ad78:	e1bffe15 	stw	r6,-8(fp)
 181ad7c:	3805883a 	mov	r2,r7
 181ad80:	e0fffd0d 	sth	r3,-12(fp)
 181ad84:	e0bfff0d 	sth	r2,-4(fp)
  u16_t start = offset;
 181ad88:	e0bffd0b 	ldhu	r2,-12(fp)
 181ad8c:	e0bff90d 	sth	r2,-28(fp)
  struct pbuf* q = p;
 181ad90:	e0bffc17 	ldw	r2,-16(fp)
 181ad94:	e0bffa15 	stw	r2,-24(fp)

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
 181ad98:	00000806 	br	181adbc <pbuf_memcmp+0x5c>
    start -= q->len;
 181ad9c:	e0bffa17 	ldw	r2,-24(fp)
 181ada0:	1080028b 	ldhu	r2,10(r2)
 181ada4:	e0fff90b 	ldhu	r3,-28(fp)
 181ada8:	1885c83a 	sub	r2,r3,r2
 181adac:	e0bff90d 	sth	r2,-28(fp)
    q = q->next;
 181adb0:	e0bffa17 	ldw	r2,-24(fp)
 181adb4:	10800017 	ldw	r2,0(r2)
 181adb8:	e0bffa15 	stw	r2,-24(fp)
{
  u16_t start = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
 181adbc:	e0bffa17 	ldw	r2,-24(fp)
 181adc0:	10000526 	beq	r2,zero,181add8 <pbuf_memcmp+0x78>
 181adc4:	e0bffa17 	ldw	r2,-24(fp)
 181adc8:	1080028b 	ldhu	r2,10(r2)
 181adcc:	10bfffcc 	andi	r2,r2,65535
 181add0:	e0fff90b 	ldhu	r3,-28(fp)
 181add4:	18bff12e 	bgeu	r3,r2,181ad9c <__ram_exceptions_end+0xff80aaac>
    start -= q->len;
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
 181add8:	e0bffa17 	ldw	r2,-24(fp)
 181addc:	10002226 	beq	r2,zero,181ae68 <pbuf_memcmp+0x108>
 181ade0:	e0bffa17 	ldw	r2,-24(fp)
 181ade4:	1080028b 	ldhu	r2,10(r2)
 181ade8:	10bfffcc 	andi	r2,r2,65535
 181adec:	e0fff90b 	ldhu	r3,-28(fp)
 181adf0:	18801d2e 	bgeu	r3,r2,181ae68 <pbuf_memcmp+0x108>
    u16_t i;
    for(i = 0; i < n; i++) {
 181adf4:	e03ffb0d 	sth	zero,-20(fp)
 181adf8:	00001606 	br	181ae54 <pbuf_memcmp+0xf4>
      u8_t a = pbuf_get_at(q, start + i);
 181adfc:	e0fff90b 	ldhu	r3,-28(fp)
 181ae00:	e0bffb0b 	ldhu	r2,-20(fp)
 181ae04:	1885883a 	add	r2,r3,r2
 181ae08:	10bfffcc 	andi	r2,r2,65535
 181ae0c:	100b883a 	mov	r5,r2
 181ae10:	e13ffa17 	ldw	r4,-24(fp)
 181ae14:	181acb00 	call	181acb0 <pbuf_get_at>
 181ae18:	e0bffb85 	stb	r2,-18(fp)
      u8_t b = ((u8_t*)s2)[i];
 181ae1c:	e0bffb0b 	ldhu	r2,-20(fp)
 181ae20:	e0fffe17 	ldw	r3,-8(fp)
 181ae24:	1885883a 	add	r2,r3,r2
 181ae28:	10800003 	ldbu	r2,0(r2)
 181ae2c:	e0bffbc5 	stb	r2,-17(fp)
      if (a != b) {
 181ae30:	e0fffb83 	ldbu	r3,-18(fp)
 181ae34:	e0bffbc3 	ldbu	r2,-17(fp)
 181ae38:	18800326 	beq	r3,r2,181ae48 <pbuf_memcmp+0xe8>
        return i+1;
 181ae3c:	e0bffb0b 	ldhu	r2,-20(fp)
 181ae40:	10800044 	addi	r2,r2,1
 181ae44:	00000906 	br	181ae6c <pbuf_memcmp+0x10c>
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
    u16_t i;
    for(i = 0; i < n; i++) {
 181ae48:	e0bffb0b 	ldhu	r2,-20(fp)
 181ae4c:	10800044 	addi	r2,r2,1
 181ae50:	e0bffb0d 	sth	r2,-20(fp)
 181ae54:	e0fffb0b 	ldhu	r3,-20(fp)
 181ae58:	e0bfff0b 	ldhu	r2,-4(fp)
 181ae5c:	18bfe736 	bltu	r3,r2,181adfc <__ram_exceptions_end+0xff80ab0c>
      u8_t b = ((u8_t*)s2)[i];
      if (a != b) {
        return i+1;
      }
    }
    return 0;
 181ae60:	0005883a 	mov	r2,zero
 181ae64:	00000106 	br	181ae6c <pbuf_memcmp+0x10c>
  }
  return 0xffff;
 181ae68:	00bfffc4 	movi	r2,-1
}
 181ae6c:	e037883a 	mov	sp,fp
 181ae70:	dfc00117 	ldw	ra,4(sp)
 181ae74:	df000017 	ldw	fp,0(sp)
 181ae78:	dec00204 	addi	sp,sp,8
 181ae7c:	f800283a 	ret

0181ae80 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
 181ae80:	defff804 	addi	sp,sp,-32
 181ae84:	dfc00715 	stw	ra,28(sp)
 181ae88:	df000615 	stw	fp,24(sp)
 181ae8c:	df000604 	addi	fp,sp,24
 181ae90:	e13ffc15 	stw	r4,-16(fp)
 181ae94:	e17ffd15 	stw	r5,-12(fp)
 181ae98:	3007883a 	mov	r3,r6
 181ae9c:	3805883a 	mov	r2,r7
 181aea0:	e0fffe0d 	sth	r3,-8(fp)
 181aea4:	e0bfff0d 	sth	r2,-4(fp)
  u16_t i;
  u16_t max = p->tot_len - mem_len;
 181aea8:	e0bffc17 	ldw	r2,-16(fp)
 181aeac:	10c0020b 	ldhu	r3,8(r2)
 181aeb0:	e0bffe0b 	ldhu	r2,-8(fp)
 181aeb4:	1885c83a 	sub	r2,r3,r2
 181aeb8:	e0bffa8d 	sth	r2,-22(fp)
  if (p->tot_len >= mem_len + start_offset) {
 181aebc:	e0bffc17 	ldw	r2,-16(fp)
 181aec0:	1080020b 	ldhu	r2,8(r2)
 181aec4:	10ffffcc 	andi	r3,r2,65535
 181aec8:	e13ffe0b 	ldhu	r4,-8(fp)
 181aecc:	e0bfff0b 	ldhu	r2,-4(fp)
 181aed0:	2085883a 	add	r2,r4,r2
 181aed4:	18801616 	blt	r3,r2,181af30 <pbuf_memfind+0xb0>
    for(i = start_offset; i <= max; ) {
 181aed8:	e0bfff0b 	ldhu	r2,-4(fp)
 181aedc:	e0bffa0d 	sth	r2,-24(fp)
 181aee0:	00001006 	br	181af24 <pbuf_memfind+0xa4>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 181aee4:	e0bffa0b 	ldhu	r2,-24(fp)
 181aee8:	e0fffe0b 	ldhu	r3,-8(fp)
 181aeec:	180f883a 	mov	r7,r3
 181aef0:	e1bffd17 	ldw	r6,-12(fp)
 181aef4:	100b883a 	mov	r5,r2
 181aef8:	e13ffc17 	ldw	r4,-16(fp)
 181aefc:	181ad600 	call	181ad60 <pbuf_memcmp>
 181af00:	e0bffb0d 	sth	r2,-20(fp)
      if (plus == 0) {
 181af04:	e0bffb0b 	ldhu	r2,-20(fp)
 181af08:	1000021e 	bne	r2,zero,181af14 <pbuf_memfind+0x94>
        return i;
 181af0c:	e0bffa0b 	ldhu	r2,-24(fp)
 181af10:	00000806 	br	181af34 <pbuf_memfind+0xb4>
      } else {
        i += plus;
 181af14:	e0fffa0b 	ldhu	r3,-24(fp)
 181af18:	e0bffb0b 	ldhu	r2,-20(fp)
 181af1c:	1885883a 	add	r2,r3,r2
 181af20:	e0bffa0d 	sth	r2,-24(fp)
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  if (p->tot_len >= mem_len + start_offset) {
    for(i = start_offset; i <= max; ) {
 181af24:	e0bffa0b 	ldhu	r2,-24(fp)
 181af28:	e0fffa8b 	ldhu	r3,-22(fp)
 181af2c:	18bfed2e 	bgeu	r3,r2,181aee4 <__ram_exceptions_end+0xff80abf4>
      } else {
        i += plus;
      }
    }
  }
  return 0xFFFF;
 181af30:	00bfffc4 	movi	r2,-1
}
 181af34:	e037883a 	mov	sp,fp
 181af38:	dfc00117 	ldw	ra,4(sp)
 181af3c:	df000017 	ldw	fp,0(sp)
 181af40:	dec00204 	addi	sp,sp,8
 181af44:	f800283a 	ret

0181af48 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(struct pbuf* p, const char* substr)
{
 181af48:	defffb04 	addi	sp,sp,-20
 181af4c:	dfc00415 	stw	ra,16(sp)
 181af50:	df000315 	stw	fp,12(sp)
 181af54:	df000304 	addi	fp,sp,12
 181af58:	e13ffe15 	stw	r4,-8(fp)
 181af5c:	e17fff15 	stw	r5,-4(fp)
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
 181af60:	e0bfff17 	ldw	r2,-4(fp)
 181af64:	10000b26 	beq	r2,zero,181af94 <pbuf_strstr+0x4c>
 181af68:	e0bfff17 	ldw	r2,-4(fp)
 181af6c:	10800003 	ldbu	r2,0(r2)
 181af70:	10803fcc 	andi	r2,r2,255
 181af74:	1080201c 	xori	r2,r2,128
 181af78:	10bfe004 	addi	r2,r2,-128
 181af7c:	10000526 	beq	r2,zero,181af94 <pbuf_strstr+0x4c>
 181af80:	e0bffe17 	ldw	r2,-8(fp)
 181af84:	1080020b 	ldhu	r2,8(r2)
 181af88:	10ffffcc 	andi	r3,r2,65535
 181af8c:	00bfffd4 	movui	r2,65535
 181af90:	1880021e 	bne	r3,r2,181af9c <pbuf_strstr+0x54>
    return 0xFFFF;
 181af94:	00bfffc4 	movi	r2,-1
 181af98:	00000f06 	br	181afd8 <pbuf_strstr+0x90>
  }
  substr_len = strlen(substr);
 181af9c:	e13fff17 	ldw	r4,-4(fp)
 181afa0:	18074e40 	call	18074e4 <strlen>
 181afa4:	e0bffd15 	stw	r2,-12(fp)
  if (substr_len >= 0xFFFF) {
 181afa8:	e0bffd17 	ldw	r2,-12(fp)
 181afac:	10bffff0 	cmpltui	r2,r2,65535
 181afb0:	1000021e 	bne	r2,zero,181afbc <pbuf_strstr+0x74>
    return 0xFFFF;
 181afb4:	00bfffc4 	movi	r2,-1
 181afb8:	00000706 	br	181afd8 <pbuf_strstr+0x90>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
 181afbc:	e0bffd17 	ldw	r2,-12(fp)
 181afc0:	10bfffcc 	andi	r2,r2,65535
 181afc4:	000f883a 	mov	r7,zero
 181afc8:	100d883a 	mov	r6,r2
 181afcc:	e17fff17 	ldw	r5,-4(fp)
 181afd0:	e13ffe17 	ldw	r4,-8(fp)
 181afd4:	181ae800 	call	181ae80 <pbuf_memfind>
}
 181afd8:	e037883a 	mov	sp,fp
 181afdc:	dfc00117 	ldw	ra,4(sp)
 181afe0:	df000017 	ldw	fp,0(sp)
 181afe4:	dec00204 	addi	sp,sp,8
 181afe8:	f800283a 	ret

0181afec <stats_init>:
#include <string.h>

struct stats_ lwip_stats;

void stats_init(void)
{
 181afec:	deffff04 	addi	sp,sp,-4
 181aff0:	df000015 	stw	fp,0(sp)
 181aff4:	d839883a 	mov	fp,sp
#endif /* MEMP_STATS */
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 181aff8:	0001883a 	nop
 181affc:	e037883a 	mov	sp,fp
 181b000:	df000017 	ldw	fp,0(sp)
 181b004:	dec00104 	addi	sp,sp,4
 181b008:	f800283a 	ret

0181b00c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 181b00c:	deffff04 	addi	sp,sp,-4
 181b010:	df000015 	stw	fp,0(sp)
 181b014:	d839883a 	mov	fp,sp
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 181b018:	0001883a 	nop
 181b01c:	e037883a 	mov	sp,fp
 181b020:	df000017 	ldw	fp,0(sp)
 181b024:	dec00104 	addi	sp,sp,4
 181b028:	f800283a 	ret

0181b02c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 181b02c:	defffe04 	addi	sp,sp,-8
 181b030:	dfc00115 	stw	ra,4(sp)
 181b034:	df000015 	stw	fp,0(sp)
 181b038:	d839883a 	mov	fp,sp
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 181b03c:	181c83c0 	call	181c83c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 181b040:	d0a7f203 	ldbu	r2,-24632(gp)
 181b044:	10800044 	addi	r2,r2,1
 181b048:	d0a7f205 	stb	r2,-24632(gp)
 181b04c:	d0a7f203 	ldbu	r2,-24632(gp)
 181b050:	10803fcc 	andi	r2,r2,255
 181b054:	1080004c 	andi	r2,r2,1
 181b058:	10000126 	beq	r2,zero,181b060 <tcp_tmr+0x34>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 181b05c:	181c10c0 	call	181c10c <tcp_slowtmr>
  }
}
 181b060:	0001883a 	nop
 181b064:	e037883a 	mov	sp,fp
 181b068:	dfc00117 	ldw	ra,4(sp)
 181b06c:	df000017 	ldw	fp,0(sp)
 181b070:	dec00204 	addi	sp,sp,8
 181b074:	f800283a 	ret

0181b078 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 181b078:	defff904 	addi	sp,sp,-28
 181b07c:	dfc00615 	stw	ra,24(sp)
 181b080:	df000515 	stw	fp,20(sp)
 181b084:	df000504 	addi	fp,sp,20
 181b088:	e13ffe15 	stw	r4,-8(fp)
 181b08c:	2805883a 	mov	r2,r5
 181b090:	e0bfff05 	stb	r2,-4(fp)
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 181b094:	e0bfff03 	ldbu	r2,-4(fp)
 181b098:	10005026 	beq	r2,zero,181b1dc <tcp_close_shutdown+0x164>
 181b09c:	e0bffe17 	ldw	r2,-8(fp)
 181b0a0:	10800617 	ldw	r2,24(r2)
 181b0a4:	10800120 	cmpeqi	r2,r2,4
 181b0a8:	1000041e 	bne	r2,zero,181b0bc <tcp_close_shutdown+0x44>
 181b0ac:	e0bffe17 	ldw	r2,-8(fp)
 181b0b0:	10800617 	ldw	r2,24(r2)
 181b0b4:	108001d8 	cmpnei	r2,r2,7
 181b0b8:	1000481e 	bne	r2,zero,181b1dc <tcp_close_shutdown+0x164>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
 181b0bc:	e0bffe17 	ldw	r2,-8(fp)
 181b0c0:	10801f17 	ldw	r2,124(r2)
 181b0c4:	1000051e 	bne	r2,zero,181b0dc <tcp_close_shutdown+0x64>
 181b0c8:	e0bffe17 	ldw	r2,-8(fp)
 181b0cc:	10800c0b 	ldhu	r2,48(r2)
 181b0d0:	10bfffcc 	andi	r2,r2,65535
 181b0d4:	10880020 	cmpeqi	r2,r2,8192
 181b0d8:	1000401e 	bne	r2,zero,181b1dc <tcp_close_shutdown+0x164>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181b0dc:	e0bffe17 	ldw	r2,-8(fp)
 181b0e0:	11001517 	ldw	r4,84(r2)
 181b0e4:	e0bffe17 	ldw	r2,-8(fp)
 181b0e8:	11400b17 	ldw	r5,44(r2)
 181b0ec:	e1bffe17 	ldw	r6,-8(fp)
 181b0f0:	e0bffe17 	ldw	r2,-8(fp)
 181b0f4:	11c00104 	addi	r7,r2,4
        pcb->local_port, pcb->remote_port);
 181b0f8:	e0bffe17 	ldw	r2,-8(fp)
 181b0fc:	1080078b 	ldhu	r2,30(r2)
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181b100:	10bfffcc 	andi	r2,r2,65535
        pcb->local_port, pcb->remote_port);
 181b104:	e0fffe17 	ldw	r3,-8(fp)
 181b108:	18c0080b 	ldhu	r3,32(r3)
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181b10c:	18ffffcc 	andi	r3,r3,65535
 181b110:	d8c00115 	stw	r3,4(sp)
 181b114:	d8800015 	stw	r2,0(sp)
 181b118:	181fed80 	call	181fed8 <tcp_rst>
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 181b11c:	e13ffe17 	ldw	r4,-8(fp)
 181b120:	181d1280 	call	181d128 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 181b124:	d0e7f317 	ldw	r3,-24628(gp)
 181b128:	e0bffe17 	ldw	r2,-8(fp)
 181b12c:	1880041e 	bne	r3,r2,181b140 <tcp_close_shutdown+0xc8>
 181b130:	d0a7f317 	ldw	r2,-24628(gp)
 181b134:	10800317 	ldw	r2,12(r2)
 181b138:	d0a7f315 	stw	r2,-24628(gp)
 181b13c:	00001106 	br	181b184 <tcp_close_shutdown+0x10c>
 181b140:	d0a7f317 	ldw	r2,-24628(gp)
 181b144:	d0a7f615 	stw	r2,-24616(gp)
 181b148:	00000c06 	br	181b17c <tcp_close_shutdown+0x104>
 181b14c:	d0a7f617 	ldw	r2,-24616(gp)
 181b150:	10c00317 	ldw	r3,12(r2)
 181b154:	e0bffe17 	ldw	r2,-8(fp)
 181b158:	1880051e 	bne	r3,r2,181b170 <tcp_close_shutdown+0xf8>
 181b15c:	d0a7f617 	ldw	r2,-24616(gp)
 181b160:	e0fffe17 	ldw	r3,-8(fp)
 181b164:	18c00317 	ldw	r3,12(r3)
 181b168:	10c00315 	stw	r3,12(r2)
 181b16c:	00000506 	br	181b184 <tcp_close_shutdown+0x10c>
 181b170:	d0a7f617 	ldw	r2,-24616(gp)
 181b174:	10800317 	ldw	r2,12(r2)
 181b178:	d0a7f615 	stw	r2,-24616(gp)
 181b17c:	d0a7f617 	ldw	r2,-24616(gp)
 181b180:	103ff21e 	bne	r2,zero,181b14c <__ram_exceptions_end+0xff80ae5c>
 181b184:	e0bffe17 	ldw	r2,-8(fp)
 181b188:	10000315 	stw	zero,12(r2)
 181b18c:	00800044 	movi	r2,1
 181b190:	d0a7f285 	stb	r2,-24630(gp)
      if (pcb->state == ESTABLISHED) {
 181b194:	e0bffe17 	ldw	r2,-8(fp)
 181b198:	10800617 	ldw	r2,24(r2)
 181b19c:	10800118 	cmpnei	r2,r2,4
 181b1a0:	10000a1e 	bne	r2,zero,181b1cc <tcp_close_shutdown+0x154>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 181b1a4:	e0bffe17 	ldw	r2,-8(fp)
 181b1a8:	00c00284 	movi	r3,10
 181b1ac:	10c00615 	stw	r3,24(r2)
        TCP_REG(&tcp_tw_pcbs, pcb);
 181b1b0:	d0e7f817 	ldw	r3,-24608(gp)
 181b1b4:	e0bffe17 	ldw	r2,-8(fp)
 181b1b8:	10c00315 	stw	r3,12(r2)
 181b1bc:	e0bffe17 	ldw	r2,-8(fp)
 181b1c0:	d0a7f815 	stw	r2,-24608(gp)
 181b1c4:	1820c000 	call	1820c00 <tcp_timer_needed>
 181b1c8:	00000206 	br	181b1d4 <tcp_close_shutdown+0x15c>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
 181b1cc:	e13ffe17 	ldw	r4,-8(fp)
 181b1d0:	183c5140 	call	183c514 <free>
      }
      return ERR_OK;
 181b1d4:	0005883a 	mov	r2,zero
 181b1d8:	00007106 	br	181b3a0 <tcp_close_shutdown+0x328>
    }
  }

  switch (pcb->state) {
 181b1dc:	e0bffe17 	ldw	r2,-8(fp)
 181b1e0:	10800617 	ldw	r2,24(r2)
 181b1e4:	10c00228 	cmpgeui	r3,r2,8
 181b1e8:	18005e1e 	bne	r3,zero,181b364 <tcp_close_shutdown+0x2ec>
 181b1ec:	100690ba 	slli	r3,r2,2
 181b1f0:	008060b4 	movhi	r2,386
 181b1f4:	10ac8104 	addi	r2,r2,-19964
 181b1f8:	1885883a 	add	r2,r3,r2
 181b1fc:	10800017 	ldw	r2,0(r2)
 181b200:	1000683a 	jmp	r2
 181b204:	0181b224 	muli	r6,zero,1736
 181b208:	0181b2b0 	cmpltui	r6,zero,1738
 181b20c:	0181b2d0 	cmplti	r6,zero,1739
 181b210:	0181b2f8 	rdprs	r6,zero,1739
 181b214:	0181b31c 	xori	r6,zero,1740
 181b218:	0181b364 	muli	r6,zero,1741
 181b21c:	0181b364 	muli	r6,zero,1741
 181b220:	0181b340 	call	181b34 <__alt_mem_tse_descriptor_memory_0+0x181b34>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
 181b224:	e03ffd05 	stb	zero,-12(fp)
    if (pcb->local_port != 0) {
 181b228:	e0bffe17 	ldw	r2,-8(fp)
 181b22c:	1080078b 	ldhu	r2,30(r2)
 181b230:	10bfffcc 	andi	r2,r2,65535
 181b234:	10001a26 	beq	r2,zero,181b2a0 <tcp_close_shutdown+0x228>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 181b238:	d0e7f717 	ldw	r3,-24612(gp)
 181b23c:	e0bffe17 	ldw	r2,-8(fp)
 181b240:	1880041e 	bne	r3,r2,181b254 <tcp_close_shutdown+0x1dc>
 181b244:	d0a7f717 	ldw	r2,-24612(gp)
 181b248:	10800317 	ldw	r2,12(r2)
 181b24c:	d0a7f715 	stw	r2,-24612(gp)
 181b250:	00001106 	br	181b298 <tcp_close_shutdown+0x220>
 181b254:	d0a7f717 	ldw	r2,-24612(gp)
 181b258:	d0a7f615 	stw	r2,-24616(gp)
 181b25c:	00000c06 	br	181b290 <tcp_close_shutdown+0x218>
 181b260:	d0a7f617 	ldw	r2,-24616(gp)
 181b264:	10c00317 	ldw	r3,12(r2)
 181b268:	e0bffe17 	ldw	r2,-8(fp)
 181b26c:	1880051e 	bne	r3,r2,181b284 <tcp_close_shutdown+0x20c>
 181b270:	d0a7f617 	ldw	r2,-24616(gp)
 181b274:	e0fffe17 	ldw	r3,-8(fp)
 181b278:	18c00317 	ldw	r3,12(r3)
 181b27c:	10c00315 	stw	r3,12(r2)
 181b280:	00000506 	br	181b298 <tcp_close_shutdown+0x220>
 181b284:	d0a7f617 	ldw	r2,-24616(gp)
 181b288:	10800317 	ldw	r2,12(r2)
 181b28c:	d0a7f615 	stw	r2,-24616(gp)
 181b290:	d0a7f617 	ldw	r2,-24616(gp)
 181b294:	103ff21e 	bne	r2,zero,181b260 <__ram_exceptions_end+0xff80af70>
 181b298:	e0bffe17 	ldw	r2,-8(fp)
 181b29c:	10000315 	stw	zero,12(r2)
    }
    memp_free(MEMP_TCP_PCB, pcb);
 181b2a0:	e13ffe17 	ldw	r4,-8(fp)
 181b2a4:	183c5140 	call	183c514 <free>
    pcb = NULL;
 181b2a8:	e03ffe15 	stw	zero,-8(fp)
    break;
 181b2ac:	00003506 	br	181b384 <tcp_close_shutdown+0x30c>
  case LISTEN:
    err = ERR_OK;
 181b2b0:	e03ffd05 	stb	zero,-12(fp)
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 181b2b4:	e17ffe17 	ldw	r5,-8(fp)
 181b2b8:	d127f504 	addi	r4,gp,-24620
 181b2bc:	181d2980 	call	181d298 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 181b2c0:	e13ffe17 	ldw	r4,-8(fp)
 181b2c4:	183c5140 	call	183c514 <free>
    pcb = NULL;
 181b2c8:	e03ffe15 	stw	zero,-8(fp)
    break;
 181b2cc:	00002d06 	br	181b384 <tcp_close_shutdown+0x30c>
  case SYN_SENT:
    err = ERR_OK;
 181b2d0:	e03ffd05 	stb	zero,-12(fp)
    TCP_PCB_REMOVE_ACTIVE(pcb);
 181b2d4:	e17ffe17 	ldw	r5,-8(fp)
 181b2d8:	d127f304 	addi	r4,gp,-24628
 181b2dc:	181d2980 	call	181d298 <tcp_pcb_remove>
 181b2e0:	00800044 	movi	r2,1
 181b2e4:	d0a7f285 	stb	r2,-24630(gp)
    memp_free(MEMP_TCP_PCB, pcb);
 181b2e8:	e13ffe17 	ldw	r4,-8(fp)
 181b2ec:	183c5140 	call	183c514 <free>
    pcb = NULL;
 181b2f0:	e03ffe15 	stw	zero,-8(fp)
    snmp_inc_tcpattemptfails();
    break;
 181b2f4:	00002306 	br	181b384 <tcp_close_shutdown+0x30c>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 181b2f8:	e13ffe17 	ldw	r4,-8(fp)
 181b2fc:	181d8840 	call	181d884 <tcp_send_fin>
 181b300:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 181b304:	e0bffd07 	ldb	r2,-12(fp)
 181b308:	1000191e 	bne	r2,zero,181b370 <tcp_close_shutdown+0x2f8>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
 181b30c:	e0bffe17 	ldw	r2,-8(fp)
 181b310:	00c00144 	movi	r3,5
 181b314:	10c00615 	stw	r3,24(r2)
    }
    break;
 181b318:	00001506 	br	181b370 <tcp_close_shutdown+0x2f8>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 181b31c:	e13ffe17 	ldw	r4,-8(fp)
 181b320:	181d8840 	call	181d884 <tcp_send_fin>
 181b324:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 181b328:	e0bffd07 	ldb	r2,-12(fp)
 181b32c:	1000121e 	bne	r2,zero,181b378 <tcp_close_shutdown+0x300>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
 181b330:	e0bffe17 	ldw	r2,-8(fp)
 181b334:	00c00144 	movi	r3,5
 181b338:	10c00615 	stw	r3,24(r2)
    }
    break;
 181b33c:	00000e06 	br	181b378 <tcp_close_shutdown+0x300>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 181b340:	e13ffe17 	ldw	r4,-8(fp)
 181b344:	181d8840 	call	181d884 <tcp_send_fin>
 181b348:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 181b34c:	e0bffd07 	ldb	r2,-12(fp)
 181b350:	10000b1e 	bne	r2,zero,181b380 <tcp_close_shutdown+0x308>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
 181b354:	e0bffe17 	ldw	r2,-8(fp)
 181b358:	00c00244 	movi	r3,9
 181b35c:	10c00615 	stw	r3,24(r2)
    }
    break;
 181b360:	00000706 	br	181b380 <tcp_close_shutdown+0x308>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
 181b364:	e03ffd05 	stb	zero,-12(fp)
    pcb = NULL;
 181b368:	e03ffe15 	stw	zero,-8(fp)
    break;
 181b36c:	00000506 	br	181b384 <tcp_close_shutdown+0x30c>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
    }
    break;
 181b370:	0001883a 	nop
 181b374:	00000306 	br	181b384 <tcp_close_shutdown+0x30c>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
    }
    break;
 181b378:	0001883a 	nop
 181b37c:	00000106 	br	181b384 <tcp_close_shutdown+0x30c>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
    }
    break;
 181b380:	0001883a 	nop
    err = ERR_OK;
    pcb = NULL;
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
 181b384:	e0bffe17 	ldw	r2,-8(fp)
 181b388:	10000426 	beq	r2,zero,181b39c <tcp_close_shutdown+0x324>
 181b38c:	e0bffd07 	ldb	r2,-12(fp)
 181b390:	1000021e 	bne	r2,zero,181b39c <tcp_close_shutdown+0x324>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
 181b394:	e13ffe17 	ldw	r4,-8(fp)
 181b398:	181ee2c0 	call	181ee2c <tcp_output>
  }
  return err;
 181b39c:	e0bffd03 	ldbu	r2,-12(fp)
}
 181b3a0:	e037883a 	mov	sp,fp
 181b3a4:	dfc00117 	ldw	ra,4(sp)
 181b3a8:	df000017 	ldw	fp,0(sp)
 181b3ac:	dec00204 	addi	sp,sp,8
 181b3b0:	f800283a 	ret

0181b3b4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 181b3b4:	defffd04 	addi	sp,sp,-12
 181b3b8:	dfc00215 	stw	ra,8(sp)
 181b3bc:	df000115 	stw	fp,4(sp)
 181b3c0:	df000104 	addi	fp,sp,4
 181b3c4:	e13fff15 	stw	r4,-4(fp)
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
 181b3c8:	e0bfff17 	ldw	r2,-4(fp)
 181b3cc:	10800617 	ldw	r2,24(r2)
 181b3d0:	10800060 	cmpeqi	r2,r2,1
 181b3d4:	1000061e 	bne	r2,zero,181b3f0 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 181b3d8:	e0bfff17 	ldw	r2,-4(fp)
 181b3dc:	10800883 	ldbu	r2,34(r2)
 181b3e0:	10800414 	ori	r2,r2,16
 181b3e4:	1007883a 	mov	r3,r2
 181b3e8:	e0bfff17 	ldw	r2,-4(fp)
 181b3ec:	10c00885 	stb	r3,34(r2)
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 181b3f0:	01400044 	movi	r5,1
 181b3f4:	e13fff17 	ldw	r4,-4(fp)
 181b3f8:	181b0780 	call	181b078 <tcp_close_shutdown>
}
 181b3fc:	e037883a 	mov	sp,fp
 181b400:	dfc00117 	ldw	ra,4(sp)
 181b404:	df000017 	ldw	fp,0(sp)
 181b408:	dec00204 	addi	sp,sp,8
 181b40c:	f800283a 	ret

0181b410 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 181b410:	defffb04 	addi	sp,sp,-20
 181b414:	dfc00415 	stw	ra,16(sp)
 181b418:	df000315 	stw	fp,12(sp)
 181b41c:	df000304 	addi	fp,sp,12
 181b420:	e13ffd15 	stw	r4,-12(fp)
 181b424:	e17ffe15 	stw	r5,-8(fp)
 181b428:	e1bfff15 	stw	r6,-4(fp)
  if (pcb->state == LISTEN) {
 181b42c:	e0bffd17 	ldw	r2,-12(fp)
 181b430:	10800617 	ldw	r2,24(r2)
 181b434:	10800058 	cmpnei	r2,r2,1
 181b438:	1000021e 	bne	r2,zero,181b444 <tcp_shutdown+0x34>
    return ERR_CONN;
 181b43c:	00bffcc4 	movi	r2,-13
 181b440:	00002a06 	br	181b4ec <tcp_shutdown+0xdc>
  }
  if (shut_rx) {
 181b444:	e0bffe17 	ldw	r2,-8(fp)
 181b448:	10001526 	beq	r2,zero,181b4a0 <tcp_shutdown+0x90>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 181b44c:	e0bffd17 	ldw	r2,-12(fp)
 181b450:	10800883 	ldbu	r2,34(r2)
 181b454:	10800414 	ori	r2,r2,16
 181b458:	1007883a 	mov	r3,r2
 181b45c:	e0bffd17 	ldw	r2,-12(fp)
 181b460:	10c00885 	stb	r3,34(r2)
    if (shut_tx) {
 181b464:	e0bfff17 	ldw	r2,-4(fp)
 181b468:	10000426 	beq	r2,zero,181b47c <tcp_shutdown+0x6c>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 181b46c:	01400044 	movi	r5,1
 181b470:	e13ffd17 	ldw	r4,-12(fp)
 181b474:	181b0780 	call	181b078 <tcp_close_shutdown>
 181b478:	00001c06 	br	181b4ec <tcp_shutdown+0xdc>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 181b47c:	e0bffd17 	ldw	r2,-12(fp)
 181b480:	10801f17 	ldw	r2,124(r2)
 181b484:	10000626 	beq	r2,zero,181b4a0 <tcp_shutdown+0x90>
      pbuf_free(pcb->refused_data);
 181b488:	e0bffd17 	ldw	r2,-12(fp)
 181b48c:	10801f17 	ldw	r2,124(r2)
 181b490:	1009883a 	mov	r4,r2
 181b494:	181a22c0 	call	181a22c <pbuf_free>
      pcb->refused_data = NULL;
 181b498:	e0bffd17 	ldw	r2,-12(fp)
 181b49c:	10001f15 	stw	zero,124(r2)
    }
  }
  if (shut_tx) {
 181b4a0:	e0bfff17 	ldw	r2,-4(fp)
 181b4a4:	10001026 	beq	r2,zero,181b4e8 <tcp_shutdown+0xd8>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 181b4a8:	e0bffd17 	ldw	r2,-12(fp)
 181b4ac:	10800617 	ldw	r2,24(r2)
 181b4b0:	10c000f0 	cmpltui	r3,r2,3
 181b4b4:	18000a1e 	bne	r3,zero,181b4e0 <tcp_shutdown+0xd0>
 181b4b8:	10c00170 	cmpltui	r3,r2,5
 181b4bc:	1800021e 	bne	r3,zero,181b4c8 <tcp_shutdown+0xb8>
 181b4c0:	108001e0 	cmpeqi	r2,r2,7
 181b4c4:	10000626 	beq	r2,zero,181b4e0 <tcp_shutdown+0xd0>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, shut_rx);
 181b4c8:	e0bffe17 	ldw	r2,-8(fp)
 181b4cc:	10803fcc 	andi	r2,r2,255
 181b4d0:	100b883a 	mov	r5,r2
 181b4d4:	e13ffd17 	ldw	r4,-12(fp)
 181b4d8:	181b0780 	call	181b078 <tcp_close_shutdown>
 181b4dc:	00000306 	br	181b4ec <tcp_shutdown+0xdc>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 181b4e0:	00bffcc4 	movi	r2,-13
 181b4e4:	00000106 	br	181b4ec <tcp_shutdown+0xdc>
    }
  }
  return ERR_OK;
 181b4e8:	0005883a 	mov	r2,zero
}
 181b4ec:	e037883a 	mov	sp,fp
 181b4f0:	dfc00117 	ldw	ra,4(sp)
 181b4f4:	df000017 	ldw	fp,0(sp)
 181b4f8:	dec00204 	addi	sp,sp,8
 181b4fc:	f800283a 	ret

0181b500 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 181b500:	defff604 	addi	sp,sp,-40
 181b504:	dfc00915 	stw	ra,36(sp)
 181b508:	df000815 	stw	fp,32(sp)
 181b50c:	df000804 	addi	fp,sp,32
 181b510:	e13ffe15 	stw	r4,-8(fp)
 181b514:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 181b518:	e0bffe17 	ldw	r2,-8(fp)
 181b51c:	10800617 	ldw	r2,24(r2)
 181b520:	10800298 	cmpnei	r2,r2,10
 181b524:	1000061e 	bne	r2,zero,181b540 <tcp_abandon+0x40>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 181b528:	e17ffe17 	ldw	r5,-8(fp)
 181b52c:	d127f804 	addi	r4,gp,-24608
 181b530:	181d2980 	call	181d298 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 181b534:	e13ffe17 	ldw	r4,-8(fp)
 181b538:	183c5140 	call	183c514 <free>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
 181b53c:	00004006 	br	181b640 <tcp_abandon+0x140>
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
  } else {
    seqno = pcb->snd_nxt;
 181b540:	e0bffe17 	ldw	r2,-8(fp)
 181b544:	10801517 	ldw	r2,84(r2)
 181b548:	e0bffa15 	stw	r2,-24(fp)
    ackno = pcb->rcv_nxt;
 181b54c:	e0bffe17 	ldw	r2,-8(fp)
 181b550:	10800b17 	ldw	r2,44(r2)
 181b554:	e0bffb15 	stw	r2,-20(fp)
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 181b558:	e0bffe17 	ldw	r2,-8(fp)
 181b55c:	10802417 	ldw	r2,144(r2)
 181b560:	e0bffc15 	stw	r2,-16(fp)
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 181b564:	e0bffe17 	ldw	r2,-8(fp)
 181b568:	10800417 	ldw	r2,16(r2)
 181b56c:	e0bffd15 	stw	r2,-12(fp)
    TCP_PCB_REMOVE_ACTIVE(pcb);
 181b570:	e17ffe17 	ldw	r5,-8(fp)
 181b574:	d127f304 	addi	r4,gp,-24628
 181b578:	181d2980 	call	181d298 <tcp_pcb_remove>
 181b57c:	00800044 	movi	r2,1
 181b580:	d0a7f285 	stb	r2,-24630(gp)
    if (pcb->unacked != NULL) {
 181b584:	e0bffe17 	ldw	r2,-8(fp)
 181b588:	10801d17 	ldw	r2,116(r2)
 181b58c:	10000426 	beq	r2,zero,181b5a0 <tcp_abandon+0xa0>
      tcp_segs_free(pcb->unacked);
 181b590:	e0bffe17 	ldw	r2,-8(fp)
 181b594:	10801d17 	ldw	r2,116(r2)
 181b598:	1009883a 	mov	r4,r2
 181b59c:	181ca840 	call	181ca84 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 181b5a0:	e0bffe17 	ldw	r2,-8(fp)
 181b5a4:	10801c17 	ldw	r2,112(r2)
 181b5a8:	10000426 	beq	r2,zero,181b5bc <tcp_abandon+0xbc>
      tcp_segs_free(pcb->unsent);
 181b5ac:	e0bffe17 	ldw	r2,-8(fp)
 181b5b0:	10801c17 	ldw	r2,112(r2)
 181b5b4:	1009883a 	mov	r4,r2
 181b5b8:	181ca840 	call	181ca84 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
 181b5bc:	e0bffe17 	ldw	r2,-8(fp)
 181b5c0:	10801e17 	ldw	r2,120(r2)
 181b5c4:	10000426 	beq	r2,zero,181b5d8 <tcp_abandon+0xd8>
      tcp_segs_free(pcb->ooseq);
 181b5c8:	e0bffe17 	ldw	r2,-8(fp)
 181b5cc:	10801e17 	ldw	r2,120(r2)
 181b5d0:	1009883a 	mov	r4,r2
 181b5d4:	181ca840 	call	181ca84 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (reset) {
 181b5d8:	e0bfff17 	ldw	r2,-4(fp)
 181b5dc:	10001026 	beq	r2,zero,181b620 <tcp_abandon+0x120>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
 181b5e0:	e13ffe17 	ldw	r4,-8(fp)
 181b5e4:	e0bffe17 	ldw	r2,-8(fp)
 181b5e8:	11400104 	addi	r5,r2,4
 181b5ec:	e0bffe17 	ldw	r2,-8(fp)
 181b5f0:	1080078b 	ldhu	r2,30(r2)
 181b5f4:	10bfffcc 	andi	r2,r2,65535
 181b5f8:	e0fffe17 	ldw	r3,-8(fp)
 181b5fc:	18c0080b 	ldhu	r3,32(r3)
 181b600:	18ffffcc 	andi	r3,r3,65535
 181b604:	d8c00115 	stw	r3,4(sp)
 181b608:	d8800015 	stw	r2,0(sp)
 181b60c:	280f883a 	mov	r7,r5
 181b610:	200d883a 	mov	r6,r4
 181b614:	e17ffb17 	ldw	r5,-20(fp)
 181b618:	e13ffa17 	ldw	r4,-24(fp)
 181b61c:	181fed80 	call	181fed8 <tcp_rst>
    }
    memp_free(MEMP_TCP_PCB, pcb);
 181b620:	e13ffe17 	ldw	r4,-8(fp)
 181b624:	183c5140 	call	183c514 <free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 181b628:	e0bffc17 	ldw	r2,-16(fp)
 181b62c:	10000426 	beq	r2,zero,181b640 <tcp_abandon+0x140>
 181b630:	e0bffc17 	ldw	r2,-16(fp)
 181b634:	017ffd84 	movi	r5,-10
 181b638:	e13ffd17 	ldw	r4,-12(fp)
 181b63c:	103ee83a 	callr	r2
  }
}
 181b640:	0001883a 	nop
 181b644:	e037883a 	mov	sp,fp
 181b648:	dfc00117 	ldw	ra,4(sp)
 181b64c:	df000017 	ldw	fp,0(sp)
 181b650:	dec00204 	addi	sp,sp,8
 181b654:	f800283a 	ret

0181b658 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 181b658:	defffd04 	addi	sp,sp,-12
 181b65c:	dfc00215 	stw	ra,8(sp)
 181b660:	df000115 	stw	fp,4(sp)
 181b664:	df000104 	addi	fp,sp,4
 181b668:	e13fff15 	stw	r4,-4(fp)
  tcp_abandon(pcb, 1);
 181b66c:	01400044 	movi	r5,1
 181b670:	e13fff17 	ldw	r4,-4(fp)
 181b674:	181b5000 	call	181b500 <tcp_abandon>
}
 181b678:	0001883a 	nop
 181b67c:	e037883a 	mov	sp,fp
 181b680:	dfc00117 	ldw	ra,4(sp)
 181b684:	df000017 	ldw	fp,0(sp)
 181b688:	dec00204 	addi	sp,sp,8
 181b68c:	f800283a 	ret

0181b690 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 181b690:	defff804 	addi	sp,sp,-32
 181b694:	dfc00715 	stw	ra,28(sp)
 181b698:	df000615 	stw	fp,24(sp)
 181b69c:	df000604 	addi	fp,sp,24
 181b6a0:	e13ffd15 	stw	r4,-12(fp)
 181b6a4:	e17ffe15 	stw	r5,-8(fp)
 181b6a8:	3005883a 	mov	r2,r6
 181b6ac:	e0bfff0d 	sth	r2,-4(fp)
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 181b6b0:	00800104 	movi	r2,4
 181b6b4:	e0bffb15 	stw	r2,-20(fp)
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 181b6b8:	e0bffd17 	ldw	r2,-12(fp)
 181b6bc:	10800617 	ldw	r2,24(r2)
 181b6c0:	10000926 	beq	r2,zero,181b6e8 <tcp_bind+0x58>
 181b6c4:	01c06134 	movhi	r7,388
 181b6c8:	39c41604 	addi	r7,r7,4184
 181b6cc:	01806dc4 	movi	r6,439
 181b6d0:	01406134 	movhi	r5,388
 181b6d4:	29441b04 	addi	r5,r5,4204
 181b6d8:	01006134 	movhi	r4,388
 181b6dc:	21042504 	addi	r4,r4,4244
 181b6e0:	1800b240 	call	1800b24 <printf>
 181b6e4:	003fff06 	br	181b6e4 <__ram_exceptions_end+0xff80b3f4>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 181b6e8:	e0bffd17 	ldw	r2,-12(fp)
 181b6ec:	10800203 	ldbu	r2,8(r2)
 181b6f0:	10803fcc 	andi	r2,r2,255
 181b6f4:	1080010c 	andi	r2,r2,4
 181b6f8:	10000226 	beq	r2,zero,181b704 <tcp_bind+0x74>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 181b6fc:	008000c4 	movi	r2,3
 181b700:	e0bffb15 	stw	r2,-20(fp)
  }
#endif /* SO_REUSE */

  if (port == 0) {
 181b704:	e0bfff0b 	ldhu	r2,-4(fp)
 181b708:	1000061e 	bne	r2,zero,181b724 <tcp_bind+0x94>
    port = tcp_new_port();
 181b70c:	181bc9c0 	call	181bc9c <tcp_new_port>
 181b710:	e0bfff0d 	sth	r2,-4(fp)
    if (port == 0) {
 181b714:	e0bfff0b 	ldhu	r2,-4(fp)
 181b718:	1000021e 	bne	r2,zero,181b724 <tcp_bind+0x94>
      return ERR_BUF;
 181b71c:	00bfff84 	movi	r2,-2
 181b720:	00004a06 	br	181b84c <tcp_bind+0x1bc>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
 181b724:	e03ffa15 	stw	zero,-24(fp)
 181b728:	00003206 	br	181b7f4 <tcp_bind+0x164>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 181b72c:	00806134 	movhi	r2,388
 181b730:	10841204 	addi	r2,r2,4168
 181b734:	e0fffa17 	ldw	r3,-24(fp)
 181b738:	18c7883a 	add	r3,r3,r3
 181b73c:	18c7883a 	add	r3,r3,r3
 181b740:	10c5883a 	add	r2,r2,r3
 181b744:	10800017 	ldw	r2,0(r2)
 181b748:	10800017 	ldw	r2,0(r2)
 181b74c:	e0bffc15 	stw	r2,-16(fp)
 181b750:	00002306 	br	181b7e0 <tcp_bind+0x150>
      if (cpcb->local_port == port) {
 181b754:	e0bffc17 	ldw	r2,-16(fp)
 181b758:	1080078b 	ldhu	r2,30(r2)
 181b75c:	10ffffcc 	andi	r3,r2,65535
 181b760:	e0bfff0b 	ldhu	r2,-4(fp)
 181b764:	18801b1e 	bne	r3,r2,181b7d4 <tcp_bind+0x144>
#if SO_REUSE
        /* Omit checking for the same port if both pcbs have REUSEADDR set.
           For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 181b768:	e0bffd17 	ldw	r2,-12(fp)
 181b76c:	10800203 	ldbu	r2,8(r2)
 181b770:	10803fcc 	andi	r2,r2,255
 181b774:	1080010c 	andi	r2,r2,4
 181b778:	10000526 	beq	r2,zero,181b790 <tcp_bind+0x100>
            !ip_get_option(cpcb, SOF_REUSEADDR))
 181b77c:	e0bffc17 	ldw	r2,-16(fp)
 181b780:	10800203 	ldbu	r2,8(r2)
 181b784:	10803fcc 	andi	r2,r2,255
 181b788:	1080010c 	andi	r2,r2,4
      if (cpcb->local_port == port) {
#if SO_REUSE
        /* Omit checking for the same port if both pcbs have REUSEADDR set.
           For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 181b78c:	1000111e 	bne	r2,zero,181b7d4 <tcp_bind+0x144>
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
 181b790:	e0bffc17 	ldw	r2,-16(fp)
 181b794:	10000d26 	beq	r2,zero,181b7cc <tcp_bind+0x13c>
 181b798:	e0bffc17 	ldw	r2,-16(fp)
 181b79c:	10800017 	ldw	r2,0(r2)
 181b7a0:	10000a26 	beq	r2,zero,181b7cc <tcp_bind+0x13c>
 181b7a4:	e0bffe17 	ldw	r2,-8(fp)
 181b7a8:	10000826 	beq	r2,zero,181b7cc <tcp_bind+0x13c>
              ip_addr_isany(ipaddr) ||
 181b7ac:	e0bffe17 	ldw	r2,-8(fp)
 181b7b0:	10800017 	ldw	r2,0(r2)
 181b7b4:	10000526 	beq	r2,zero,181b7cc <tcp_bind+0x13c>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
 181b7b8:	e0bffc17 	ldw	r2,-16(fp)
 181b7bc:	10c00017 	ldw	r3,0(r2)
 181b7c0:	e0bffe17 	ldw	r2,-8(fp)
 181b7c4:	10800017 	ldw	r2,0(r2)
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
              ip_addr_isany(ipaddr) ||
 181b7c8:	1880021e 	bne	r3,r2,181b7d4 <tcp_bind+0x144>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
            return ERR_USE;
 181b7cc:	00bffe04 	movi	r2,-8
 181b7d0:	00001e06 	br	181b84c <tcp_bind+0x1bc>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 181b7d4:	e0bffc17 	ldw	r2,-16(fp)
 181b7d8:	10800317 	ldw	r2,12(r2)
 181b7dc:	e0bffc15 	stw	r2,-16(fp)
 181b7e0:	e0bffc17 	ldw	r2,-16(fp)
 181b7e4:	103fdb1e 	bne	r2,zero,181b754 <__ram_exceptions_end+0xff80b464>
      return ERR_BUF;
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
 181b7e8:	e0bffa17 	ldw	r2,-24(fp)
 181b7ec:	10800044 	addi	r2,r2,1
 181b7f0:	e0bffa15 	stw	r2,-24(fp)
 181b7f4:	e0fffa17 	ldw	r3,-24(fp)
 181b7f8:	e0bffb17 	ldw	r2,-20(fp)
 181b7fc:	18bfcb16 	blt	r3,r2,181b72c <__ram_exceptions_end+0xff80b43c>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 181b800:	e0bffe17 	ldw	r2,-8(fp)
 181b804:	10000726 	beq	r2,zero,181b824 <tcp_bind+0x194>
 181b808:	e0bffe17 	ldw	r2,-8(fp)
 181b80c:	10800017 	ldw	r2,0(r2)
 181b810:	10000426 	beq	r2,zero,181b824 <tcp_bind+0x194>
    pcb->local_ip = *ipaddr;
 181b814:	e0bffd17 	ldw	r2,-12(fp)
 181b818:	e0fffe17 	ldw	r3,-8(fp)
 181b81c:	18c00017 	ldw	r3,0(r3)
 181b820:	10c00015 	stw	r3,0(r2)
  }
  pcb->local_port = port;
 181b824:	e0bffd17 	ldw	r2,-12(fp)
 181b828:	e0ffff0b 	ldhu	r3,-4(fp)
 181b82c:	10c0078d 	sth	r3,30(r2)
  TCP_REG(&tcp_bound_pcbs, pcb);
 181b830:	d0e7f717 	ldw	r3,-24612(gp)
 181b834:	e0bffd17 	ldw	r2,-12(fp)
 181b838:	10c00315 	stw	r3,12(r2)
 181b83c:	e0bffd17 	ldw	r2,-12(fp)
 181b840:	d0a7f715 	stw	r2,-24612(gp)
 181b844:	1820c000 	call	1820c00 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 181b848:	0005883a 	mov	r2,zero
}
 181b84c:	e037883a 	mov	sp,fp
 181b850:	dfc00117 	ldw	ra,4(sp)
 181b854:	df000017 	ldw	fp,0(sp)
 181b858:	dec00204 	addi	sp,sp,8
 181b85c:	f800283a 	ret

0181b860 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 181b860:	defffc04 	addi	sp,sp,-16
 181b864:	df000315 	stw	fp,12(sp)
 181b868:	df000304 	addi	fp,sp,12
 181b86c:	e13ffd15 	stw	r4,-12(fp)
 181b870:	e17ffe15 	stw	r5,-8(fp)
 181b874:	3005883a 	mov	r2,r6
 181b878:	e0bfff05 	stb	r2,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
 181b87c:	00bffd84 	movi	r2,-10
}
 181b880:	e037883a 	mov	sp,fp
 181b884:	df000017 	ldw	fp,0(sp)
 181b888:	dec00104 	addi	sp,sp,4
 181b88c:	f800283a 	ret

0181b890 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 181b890:	defffb04 	addi	sp,sp,-20
 181b894:	dfc00415 	stw	ra,16(sp)
 181b898:	df000315 	stw	fp,12(sp)
 181b89c:	df000304 	addi	fp,sp,12
 181b8a0:	e13ffe15 	stw	r4,-8(fp)
 181b8a4:	2805883a 	mov	r2,r5
 181b8a8:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 181b8ac:	e0bffe17 	ldw	r2,-8(fp)
 181b8b0:	10800617 	ldw	r2,24(r2)
 181b8b4:	10000926 	beq	r2,zero,181b8dc <tcp_listen_with_backlog+0x4c>
 181b8b8:	01c06134 	movhi	r7,388
 181b8bc:	39c41604 	addi	r7,r7,4184
 181b8c0:	01808304 	movi	r6,524
 181b8c4:	01406134 	movhi	r5,388
 181b8c8:	29443104 	addi	r5,r5,4292
 181b8cc:	01006134 	movhi	r4,388
 181b8d0:	21042504 	addi	r4,r4,4244
 181b8d4:	1800b240 	call	1800b24 <printf>
 181b8d8:	003fff06 	br	181b8d8 <__ram_exceptions_end+0xff80b5e8>

  /* already listening? */
  if (pcb->state == LISTEN) {
 181b8dc:	e0bffe17 	ldw	r2,-8(fp)
 181b8e0:	10800617 	ldw	r2,24(r2)
 181b8e4:	10800058 	cmpnei	r2,r2,1
 181b8e8:	1000021e 	bne	r2,zero,181b8f4 <tcp_listen_with_backlog+0x64>
    return pcb;
 181b8ec:	e0bffe17 	ldw	r2,-8(fp)
 181b8f0:	00007f06 	br	181baf0 <tcp_listen_with_backlog+0x260>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 181b8f4:	e0bffe17 	ldw	r2,-8(fp)
 181b8f8:	10800203 	ldbu	r2,8(r2)
 181b8fc:	10803fcc 	andi	r2,r2,255
 181b900:	1080010c 	andi	r2,r2,4
 181b904:	10001626 	beq	r2,zero,181b960 <tcp_listen_with_backlog+0xd0>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 181b908:	d0a7f517 	ldw	r2,-24620(gp)
 181b90c:	e0bffd15 	stw	r2,-12(fp)
 181b910:	00001106 	br	181b958 <tcp_listen_with_backlog+0xc8>
      if (lpcb->local_port == pcb->local_port) {
 181b914:	e0bffd17 	ldw	r2,-12(fp)
 181b918:	10c0078b 	ldhu	r3,30(r2)
 181b91c:	e0bffe17 	ldw	r2,-8(fp)
 181b920:	1080078b 	ldhu	r2,30(r2)
 181b924:	18ffffcc 	andi	r3,r3,65535
 181b928:	10bfffcc 	andi	r2,r2,65535
 181b92c:	1880071e 	bne	r3,r2,181b94c <tcp_listen_with_backlog+0xbc>
        if (ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 181b930:	e0bffd17 	ldw	r2,-12(fp)
 181b934:	10c00017 	ldw	r3,0(r2)
 181b938:	e0bffe17 	ldw	r2,-8(fp)
 181b93c:	10800017 	ldw	r2,0(r2)
 181b940:	1880021e 	bne	r3,r2,181b94c <tcp_listen_with_backlog+0xbc>
          /* this address/port is already used */
          return NULL;
 181b944:	0005883a 	mov	r2,zero
 181b948:	00006906 	br	181baf0 <tcp_listen_with_backlog+0x260>
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 181b94c:	e0bffd17 	ldw	r2,-12(fp)
 181b950:	10800317 	ldw	r2,12(r2)
 181b954:	e0bffd15 	stw	r2,-12(fp)
 181b958:	e0bffd17 	ldw	r2,-12(fp)
 181b95c:	103fed1e 	bne	r2,zero,181b914 <__ram_exceptions_end+0xff80b624>
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 181b960:	00806134 	movhi	r2,388
 181b964:	108bcc84 	addi	r2,r2,12082
 181b968:	1080018b 	ldhu	r2,6(r2)
 181b96c:	10bfffcc 	andi	r2,r2,65535
 181b970:	1009883a 	mov	r4,r2
 181b974:	183c5000 	call	183c500 <malloc>
 181b978:	e0bffd15 	stw	r2,-12(fp)
  if (lpcb == NULL) {
 181b97c:	e0bffd17 	ldw	r2,-12(fp)
 181b980:	1000021e 	bne	r2,zero,181b98c <tcp_listen_with_backlog+0xfc>
    return NULL;
 181b984:	0005883a 	mov	r2,zero
 181b988:	00005906 	br	181baf0 <tcp_listen_with_backlog+0x260>
  }
  lpcb->callback_arg = pcb->callback_arg;
 181b98c:	e0bffe17 	ldw	r2,-8(fp)
 181b990:	10c00417 	ldw	r3,16(r2)
 181b994:	e0bffd17 	ldw	r2,-12(fp)
 181b998:	10c00415 	stw	r3,16(r2)
  lpcb->local_port = pcb->local_port;
 181b99c:	e0bffe17 	ldw	r2,-8(fp)
 181b9a0:	10c0078b 	ldhu	r3,30(r2)
 181b9a4:	e0bffd17 	ldw	r2,-12(fp)
 181b9a8:	10c0078d 	sth	r3,30(r2)
  lpcb->state = LISTEN;
 181b9ac:	e0bffd17 	ldw	r2,-12(fp)
 181b9b0:	00c00044 	movi	r3,1
 181b9b4:	10c00615 	stw	r3,24(r2)
  lpcb->prio = pcb->prio;
 181b9b8:	e0bffe17 	ldw	r2,-8(fp)
 181b9bc:	10c00703 	ldbu	r3,28(r2)
 181b9c0:	e0bffd17 	ldw	r2,-12(fp)
 181b9c4:	10c00705 	stb	r3,28(r2)
  lpcb->so_options = pcb->so_options;
 181b9c8:	e0bffe17 	ldw	r2,-8(fp)
 181b9cc:	10c00203 	ldbu	r3,8(r2)
 181b9d0:	e0bffd17 	ldw	r2,-12(fp)
 181b9d4:	10c00205 	stb	r3,8(r2)
  ip_set_option(lpcb, SOF_ACCEPTCONN);
 181b9d8:	e0bffd17 	ldw	r2,-12(fp)
 181b9dc:	10800203 	ldbu	r2,8(r2)
 181b9e0:	10800094 	ori	r2,r2,2
 181b9e4:	1007883a 	mov	r3,r2
 181b9e8:	e0bffd17 	ldw	r2,-12(fp)
 181b9ec:	10c00205 	stb	r3,8(r2)
  lpcb->ttl = pcb->ttl;
 181b9f0:	e0bffe17 	ldw	r2,-8(fp)
 181b9f4:	10c00283 	ldbu	r3,10(r2)
 181b9f8:	e0bffd17 	ldw	r2,-12(fp)
 181b9fc:	10c00285 	stb	r3,10(r2)
  lpcb->tos = pcb->tos;
 181ba00:	e0bffe17 	ldw	r2,-8(fp)
 181ba04:	10c00243 	ldbu	r3,9(r2)
 181ba08:	e0bffd17 	ldw	r2,-12(fp)
 181ba0c:	10c00245 	stb	r3,9(r2)
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 181ba10:	e0bffe17 	ldw	r2,-8(fp)
 181ba14:	10c00017 	ldw	r3,0(r2)
 181ba18:	e0bffd17 	ldw	r2,-12(fp)
 181ba1c:	10c00015 	stw	r3,0(r2)
  if (pcb->local_port != 0) {
 181ba20:	e0bffe17 	ldw	r2,-8(fp)
 181ba24:	1080078b 	ldhu	r2,30(r2)
 181ba28:	10bfffcc 	andi	r2,r2,65535
 181ba2c:	10001a26 	beq	r2,zero,181ba98 <tcp_listen_with_backlog+0x208>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 181ba30:	d0e7f717 	ldw	r3,-24612(gp)
 181ba34:	e0bffe17 	ldw	r2,-8(fp)
 181ba38:	1880041e 	bne	r3,r2,181ba4c <tcp_listen_with_backlog+0x1bc>
 181ba3c:	d0a7f717 	ldw	r2,-24612(gp)
 181ba40:	10800317 	ldw	r2,12(r2)
 181ba44:	d0a7f715 	stw	r2,-24612(gp)
 181ba48:	00001106 	br	181ba90 <tcp_listen_with_backlog+0x200>
 181ba4c:	d0a7f717 	ldw	r2,-24612(gp)
 181ba50:	d0a7f615 	stw	r2,-24616(gp)
 181ba54:	00000c06 	br	181ba88 <tcp_listen_with_backlog+0x1f8>
 181ba58:	d0a7f617 	ldw	r2,-24616(gp)
 181ba5c:	10c00317 	ldw	r3,12(r2)
 181ba60:	e0bffe17 	ldw	r2,-8(fp)
 181ba64:	1880051e 	bne	r3,r2,181ba7c <tcp_listen_with_backlog+0x1ec>
 181ba68:	d0a7f617 	ldw	r2,-24616(gp)
 181ba6c:	e0fffe17 	ldw	r3,-8(fp)
 181ba70:	18c00317 	ldw	r3,12(r3)
 181ba74:	10c00315 	stw	r3,12(r2)
 181ba78:	00000506 	br	181ba90 <tcp_listen_with_backlog+0x200>
 181ba7c:	d0a7f617 	ldw	r2,-24616(gp)
 181ba80:	10800317 	ldw	r2,12(r2)
 181ba84:	d0a7f615 	stw	r2,-24616(gp)
 181ba88:	d0a7f617 	ldw	r2,-24616(gp)
 181ba8c:	103ff21e 	bne	r2,zero,181ba58 <__ram_exceptions_end+0xff80b768>
 181ba90:	e0bffe17 	ldw	r2,-8(fp)
 181ba94:	10000315 	stw	zero,12(r2)
  }
  memp_free(MEMP_TCP_PCB, pcb);
 181ba98:	e13ffe17 	ldw	r4,-8(fp)
 181ba9c:	183c5140 	call	183c514 <free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 181baa0:	e0fffd17 	ldw	r3,-12(fp)
 181baa4:	008060b4 	movhi	r2,386
 181baa8:	10ae1804 	addi	r2,r2,-18336
 181baac:	18800515 	stw	r2,20(r3)
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
 181bab0:	e0bffd17 	ldw	r2,-12(fp)
 181bab4:	10000845 	stb	zero,33(r2)
  lpcb->backlog = (backlog ? backlog : 1);
 181bab8:	e0bfff03 	ldbu	r2,-4(fp)
 181babc:	10000226 	beq	r2,zero,181bac8 <tcp_listen_with_backlog+0x238>
 181bac0:	e0bfff03 	ldbu	r2,-4(fp)
 181bac4:	00000106 	br	181bacc <tcp_listen_with_backlog+0x23c>
 181bac8:	00800044 	movi	r2,1
 181bacc:	e0fffd17 	ldw	r3,-12(fp)
 181bad0:	18800805 	stb	r2,32(r3)
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 181bad4:	d0e7f517 	ldw	r3,-24620(gp)
 181bad8:	e0bffd17 	ldw	r2,-12(fp)
 181badc:	10c00315 	stw	r3,12(r2)
 181bae0:	e0bffd17 	ldw	r2,-12(fp)
 181bae4:	d0a7f515 	stw	r2,-24620(gp)
 181bae8:	1820c000 	call	1820c00 <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
 181baec:	e0bffd17 	ldw	r2,-12(fp)
}
 181baf0:	e037883a 	mov	sp,fp
 181baf4:	dfc00117 	ldw	ra,4(sp)
 181baf8:	df000017 	ldw	fp,0(sp)
 181bafc:	dec00204 	addi	sp,sp,8
 181bb00:	f800283a 	ret

0181bb04 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 181bb04:	defffc04 	addi	sp,sp,-16
 181bb08:	df000315 	stw	fp,12(sp)
 181bb0c:	df000304 	addi	fp,sp,12
 181bb10:	e13fff15 	stw	r4,-4(fp)
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 181bb14:	e0bfff17 	ldw	r2,-4(fp)
 181bb18:	10c00b17 	ldw	r3,44(r2)
 181bb1c:	e0bfff17 	ldw	r2,-4(fp)
 181bb20:	10800c0b 	ldhu	r2,48(r2)
 181bb24:	10bfffcc 	andi	r2,r2,65535
 181bb28:	1885883a 	add	r2,r3,r2
 181bb2c:	e0bffd15 	stw	r2,-12(fp)

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 181bb30:	e0bfff17 	ldw	r2,-4(fp)
 181bb34:	10c00d17 	ldw	r3,52(r2)
 181bb38:	e0bfff17 	ldw	r2,-4(fp)
 181bb3c:	10800e8b 	ldhu	r2,58(r2)
 181bb40:	10bfffcc 	andi	r2,r2,65535
 181bb44:	10840068 	cmpgeui	r2,r2,4097
 181bb48:	1000041e 	bne	r2,zero,181bb5c <tcp_update_rcv_ann_wnd+0x58>
 181bb4c:	e0bfff17 	ldw	r2,-4(fp)
 181bb50:	10800e8b 	ldhu	r2,58(r2)
 181bb54:	10bfffcc 	andi	r2,r2,65535
 181bb58:	00000106 	br	181bb60 <tcp_update_rcv_ann_wnd+0x5c>
 181bb5c:	00840004 	movi	r2,4096
 181bb60:	1885883a 	add	r2,r3,r2
 181bb64:	e0fffd17 	ldw	r3,-12(fp)
 181bb68:	1885c83a 	sub	r2,r3,r2
 181bb6c:	10000916 	blt	r2,zero,181bb94 <tcp_update_rcv_ann_wnd+0x90>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 181bb70:	e0bfff17 	ldw	r2,-4(fp)
 181bb74:	10c00c0b 	ldhu	r3,48(r2)
 181bb78:	e0bfff17 	ldw	r2,-4(fp)
 181bb7c:	10c00c8d 	sth	r3,50(r2)
    return new_right_edge - pcb->rcv_ann_right_edge;
 181bb80:	e0bfff17 	ldw	r2,-4(fp)
 181bb84:	10800d17 	ldw	r2,52(r2)
 181bb88:	e0fffd17 	ldw	r3,-12(fp)
 181bb8c:	1885c83a 	sub	r2,r3,r2
 181bb90:	00001406 	br	181bbe4 <tcp_update_rcv_ann_wnd+0xe0>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 181bb94:	e0bfff17 	ldw	r2,-4(fp)
 181bb98:	10c00b17 	ldw	r3,44(r2)
 181bb9c:	e0bfff17 	ldw	r2,-4(fp)
 181bba0:	10800d17 	ldw	r2,52(r2)
 181bba4:	1885c83a 	sub	r2,r3,r2
 181bba8:	0080030e 	bge	zero,r2,181bbb8 <tcp_update_rcv_ann_wnd+0xb4>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 181bbac:	e0bfff17 	ldw	r2,-4(fp)
 181bbb0:	10000c8d 	sth	zero,50(r2)
 181bbb4:	00000a06 	br	181bbe0 <tcp_update_rcv_ann_wnd+0xdc>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 181bbb8:	e0bfff17 	ldw	r2,-4(fp)
 181bbbc:	10c00d17 	ldw	r3,52(r2)
 181bbc0:	e0bfff17 	ldw	r2,-4(fp)
 181bbc4:	10800b17 	ldw	r2,44(r2)
 181bbc8:	1885c83a 	sub	r2,r3,r2
 181bbcc:	e0bffe15 	stw	r2,-8(fp)
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
 181bbd0:	e0bffe17 	ldw	r2,-8(fp)
 181bbd4:	1007883a 	mov	r3,r2
 181bbd8:	e0bfff17 	ldw	r2,-4(fp)
 181bbdc:	10c00c8d 	sth	r3,50(r2)
    }
    return 0;
 181bbe0:	0005883a 	mov	r2,zero
  }
}
 181bbe4:	e037883a 	mov	sp,fp
 181bbe8:	df000017 	ldw	fp,0(sp)
 181bbec:	dec00104 	addi	sp,sp,4
 181bbf0:	f800283a 	ret

0181bbf4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 181bbf4:	defffb04 	addi	sp,sp,-20
 181bbf8:	dfc00415 	stw	ra,16(sp)
 181bbfc:	df000315 	stw	fp,12(sp)
 181bc00:	df000304 	addi	fp,sp,12
 181bc04:	e13ffe15 	stw	r4,-8(fp)
 181bc08:	2805883a 	mov	r2,r5
 181bc0c:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
 181bc10:	e0bffe17 	ldw	r2,-8(fp)
 181bc14:	10c00c0b 	ldhu	r3,48(r2)
 181bc18:	e0bfff0b 	ldhu	r2,-4(fp)
 181bc1c:	1885883a 	add	r2,r3,r2
 181bc20:	1007883a 	mov	r3,r2
 181bc24:	e0bffe17 	ldw	r2,-8(fp)
 181bc28:	10c00c0d 	sth	r3,48(r2)
  if (pcb->rcv_wnd > TCP_WND) {
 181bc2c:	e0bffe17 	ldw	r2,-8(fp)
 181bc30:	10800c0b 	ldhu	r2,48(r2)
 181bc34:	10bfffcc 	andi	r2,r2,65535
 181bc38:	10880070 	cmpltui	r2,r2,8193
 181bc3c:	1000031e 	bne	r2,zero,181bc4c <tcp_recved+0x58>
    pcb->rcv_wnd = TCP_WND;
 181bc40:	e0bffe17 	ldw	r2,-8(fp)
 181bc44:	00c80004 	movi	r3,8192
 181bc48:	10c00c0d 	sth	r3,48(r2)
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 181bc4c:	e13ffe17 	ldw	r4,-8(fp)
 181bc50:	181bb040 	call	181bb04 <tcp_update_rcv_ann_wnd>
 181bc54:	e0bffd15 	stw	r2,-12(fp)

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 181bc58:	e0bffd17 	ldw	r2,-12(fp)
 181bc5c:	10820010 	cmplti	r2,r2,2048
 181bc60:	1000081e 	bne	r2,zero,181bc84 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 181bc64:	e0bffe17 	ldw	r2,-8(fp)
 181bc68:	10800883 	ldbu	r2,34(r2)
 181bc6c:	10800094 	ori	r2,r2,2
 181bc70:	1007883a 	mov	r3,r2
 181bc74:	e0bffe17 	ldw	r2,-8(fp)
 181bc78:	10c00885 	stb	r3,34(r2)
    tcp_output(pcb);
 181bc7c:	e13ffe17 	ldw	r4,-8(fp)
 181bc80:	181ee2c0 	call	181ee2c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
 181bc84:	0001883a 	nop
 181bc88:	e037883a 	mov	sp,fp
 181bc8c:	dfc00117 	ldw	ra,4(sp)
 181bc90:	df000017 	ldw	fp,0(sp)
 181bc94:	dec00204 	addi	sp,sp,8
 181bc98:	f800283a 	ret

0181bc9c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 181bc9c:	defffd04 	addi	sp,sp,-12
 181bca0:	df000215 	stw	fp,8(sp)
 181bca4:	df000204 	addi	fp,sp,8
  u8_t i;
  u16_t n = 0;
 181bca8:	e03ffe8d 	sth	zero,-6(fp)
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 181bcac:	d0a00f0b 	ldhu	r2,-32708(gp)
 181bcb0:	10c00044 	addi	r3,r2,1
 181bcb4:	d0e00f0d 	sth	r3,-32708(gp)
 181bcb8:	10ffffcc 	andi	r3,r2,65535
 181bcbc:	00bfffd4 	movui	r2,65535
 181bcc0:	1880021e 	bne	r3,r2,181bccc <tcp_new_port+0x30>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 181bcc4:	00b00004 	movi	r2,-16384
 181bcc8:	d0a00f0d 	sth	r2,-32708(gp)
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 181bccc:	e03ffe05 	stb	zero,-8(fp)
 181bcd0:	00002006 	br	181bd54 <tcp_new_port+0xb8>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 181bcd4:	e0fffe03 	ldbu	r3,-8(fp)
 181bcd8:	00806134 	movhi	r2,388
 181bcdc:	10841204 	addi	r2,r2,4168
 181bce0:	18c7883a 	add	r3,r3,r3
 181bce4:	18c7883a 	add	r3,r3,r3
 181bce8:	10c5883a 	add	r2,r2,r3
 181bcec:	10800017 	ldw	r2,0(r2)
 181bcf0:	10800017 	ldw	r2,0(r2)
 181bcf4:	e0bfff15 	stw	r2,-4(fp)
 181bcf8:	00001106 	br	181bd40 <tcp_new_port+0xa4>
      if (pcb->local_port == tcp_port) {
 181bcfc:	e0bfff17 	ldw	r2,-4(fp)
 181bd00:	10c0078b 	ldhu	r3,30(r2)
 181bd04:	d0a00f0b 	ldhu	r2,-32708(gp)
 181bd08:	18ffffcc 	andi	r3,r3,65535
 181bd0c:	10bfffcc 	andi	r2,r2,65535
 181bd10:	1880081e 	bne	r3,r2,181bd34 <tcp_new_port+0x98>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 181bd14:	e0bffe8b 	ldhu	r2,-6(fp)
 181bd18:	10800044 	addi	r2,r2,1
 181bd1c:	e0bffe8d 	sth	r2,-6(fp)
 181bd20:	e0bffe8b 	ldhu	r2,-6(fp)
 181bd24:	10900030 	cmpltui	r2,r2,16384
 181bd28:	103fe01e 	bne	r2,zero,181bcac <__ram_exceptions_end+0xff80b9bc>
          return 0;
 181bd2c:	0005883a 	mov	r2,zero
 181bd30:	00000c06 	br	181bd64 <tcp_new_port+0xc8>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 181bd34:	e0bfff17 	ldw	r2,-4(fp)
 181bd38:	10800317 	ldw	r2,12(r2)
 181bd3c:	e0bfff15 	stw	r2,-4(fp)
 181bd40:	e0bfff17 	ldw	r2,-4(fp)
 181bd44:	103fed1e 	bne	r2,zero,181bcfc <__ram_exceptions_end+0xff80ba0c>
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 181bd48:	e0bffe03 	ldbu	r2,-8(fp)
 181bd4c:	10800044 	addi	r2,r2,1
 181bd50:	e0bffe05 	stb	r2,-8(fp)
 181bd54:	e0bffe03 	ldbu	r2,-8(fp)
 181bd58:	10800130 	cmpltui	r2,r2,4
 181bd5c:	103fdd1e 	bne	r2,zero,181bcd4 <__ram_exceptions_end+0xff80b9e4>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 181bd60:	d0a00f0b 	ldhu	r2,-32708(gp)
}
 181bd64:	e037883a 	mov	sp,fp
 181bd68:	df000017 	ldw	fp,0(sp)
 181bd6c:	dec00104 	addi	sp,sp,4
 181bd70:	f800283a 	ret

0181bd74 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 181bd74:	defff404 	addi	sp,sp,-48
 181bd78:	dfc00b15 	stw	ra,44(sp)
 181bd7c:	df000a15 	stw	fp,40(sp)
 181bd80:	df000a04 	addi	fp,sp,40
 181bd84:	e13ffc15 	stw	r4,-16(fp)
 181bd88:	e17ffd15 	stw	r5,-12(fp)
 181bd8c:	3005883a 	mov	r2,r6
 181bd90:	e1ffff15 	stw	r7,-4(fp)
 181bd94:	e0bffe0d 	sth	r2,-8(fp)
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 181bd98:	e0bffc17 	ldw	r2,-16(fp)
 181bd9c:	10800617 	ldw	r2,24(r2)
 181bda0:	10000926 	beq	r2,zero,181bdc8 <tcp_connect+0x54>
 181bda4:	01c06134 	movhi	r7,388
 181bda8:	39c41604 	addi	r7,r7,4184
 181bdac:	0180acc4 	movi	r6,691
 181bdb0:	01406134 	movhi	r5,388
 181bdb4:	29443a04 	addi	r5,r5,4328
 181bdb8:	01006134 	movhi	r4,388
 181bdbc:	21042504 	addi	r4,r4,4244
 181bdc0:	1800b240 	call	1800b24 <printf>
 181bdc4:	003fff06 	br	181bdc4 <__ram_exceptions_end+0xff80bad4>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
 181bdc8:	e0bffd17 	ldw	r2,-12(fp)
 181bdcc:	10000a26 	beq	r2,zero,181bdf8 <tcp_connect+0x84>
    pcb->remote_ip = *ipaddr;
 181bdd0:	e0bffc17 	ldw	r2,-16(fp)
 181bdd4:	e0fffd17 	ldw	r3,-12(fp)
 181bdd8:	18c00017 	ldw	r3,0(r3)
 181bddc:	10c00115 	stw	r3,4(r2)
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
 181bde0:	e0bffc17 	ldw	r2,-16(fp)
 181bde4:	e0fffe0b 	ldhu	r3,-8(fp)
 181bde8:	10c0080d 	sth	r3,32(r2)

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
 181bdec:	e0bffc17 	ldw	r2,-16(fp)
 181bdf0:	10000626 	beq	r2,zero,181be0c <tcp_connect+0x98>
 181bdf4:	00000206 	br	181be00 <tcp_connect+0x8c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    pcb->remote_ip = *ipaddr;
  } else {
    return ERR_VAL;
 181bdf8:	00bffe84 	movi	r2,-6
 181bdfc:	0000be06 	br	181c0f8 <tcp_connect+0x384>
  }
  pcb->remote_port = port;

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
 181be00:	e0bffc17 	ldw	r2,-16(fp)
 181be04:	10800017 	ldw	r2,0(r2)
 181be08:	10000f1e 	bne	r2,zero,181be48 <tcp_connect+0xd4>
    /* no local IP address set, yet. */
    struct netif *netif = ip_route(&(pcb->local_ip), &(pcb->remote_ip));
 181be0c:	e0fffc17 	ldw	r3,-16(fp)
 181be10:	e0bffc17 	ldw	r2,-16(fp)
 181be14:	10800104 	addi	r2,r2,4
 181be18:	100b883a 	mov	r5,r2
 181be1c:	1809883a 	mov	r4,r3
 181be20:	18319740 	call	1831974 <ip_route>
 181be24:	e0bff815 	stw	r2,-32(fp)
    if (netif == NULL) {
 181be28:	e0bff817 	ldw	r2,-32(fp)
 181be2c:	1000021e 	bne	r2,zero,181be38 <tcp_connect+0xc4>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 181be30:	00bfff04 	movi	r2,-4
 181be34:	0000b006 	br	181c0f8 <tcp_connect+0x384>
    }
    /* Use the netif's IP address as local address. */
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 181be38:	e0bff817 	ldw	r2,-32(fp)
 181be3c:	10c00117 	ldw	r3,4(r2)
 181be40:	e0bffc17 	ldw	r2,-16(fp)
 181be44:	10c00015 	stw	r3,0(r2)
  }

  old_local_port = pcb->local_port;
 181be48:	e0bffc17 	ldw	r2,-16(fp)
 181be4c:	1080078b 	ldhu	r2,30(r2)
 181be50:	e0bff90d 	sth	r2,-28(fp)
  if (pcb->local_port == 0) {
 181be54:	e0bffc17 	ldw	r2,-16(fp)
 181be58:	1080078b 	ldhu	r2,30(r2)
 181be5c:	10bfffcc 	andi	r2,r2,65535
 181be60:	10000a1e 	bne	r2,zero,181be8c <tcp_connect+0x118>
    pcb->local_port = tcp_new_port();
 181be64:	181bc9c0 	call	181bc9c <tcp_new_port>
 181be68:	1007883a 	mov	r3,r2
 181be6c:	e0bffc17 	ldw	r2,-16(fp)
 181be70:	10c0078d 	sth	r3,30(r2)
    if (pcb->local_port == 0) {
 181be74:	e0bffc17 	ldw	r2,-16(fp)
 181be78:	1080078b 	ldhu	r2,30(r2)
 181be7c:	10bfffcc 	andi	r2,r2,65535
 181be80:	1000021e 	bne	r2,zero,181be8c <tcp_connect+0x118>
      return ERR_BUF;
 181be84:	00bfff84 	movi	r2,-2
 181be88:	00009b06 	br	181c0f8 <tcp_connect+0x384>
    }
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 181be8c:	e0bffc17 	ldw	r2,-16(fp)
 181be90:	10800203 	ldbu	r2,8(r2)
 181be94:	10803fcc 	andi	r2,r2,255
 181be98:	1080010c 	andi	r2,r2,4
 181be9c:	10003026 	beq	r2,zero,181bf60 <tcp_connect+0x1ec>
    /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
       now that the 5-tuple is unique. */
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
 181bea0:	00800084 	movi	r2,2
 181bea4:	e0bff715 	stw	r2,-36(fp)
 181bea8:	00002a06 	br	181bf54 <tcp_connect+0x1e0>
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 181beac:	00806134 	movhi	r2,388
 181beb0:	10841204 	addi	r2,r2,4168
 181beb4:	e0fff717 	ldw	r3,-36(fp)
 181beb8:	18c7883a 	add	r3,r3,r3
 181bebc:	18c7883a 	add	r3,r3,r3
 181bec0:	10c5883a 	add	r2,r2,r3
 181bec4:	10800017 	ldw	r2,0(r2)
 181bec8:	10800017 	ldw	r2,0(r2)
 181becc:	e0bff615 	stw	r2,-40(fp)
 181bed0:	00001b06 	br	181bf40 <tcp_connect+0x1cc>
        if ((cpcb->local_port == pcb->local_port) &&
 181bed4:	e0bff617 	ldw	r2,-40(fp)
 181bed8:	10c0078b 	ldhu	r3,30(r2)
 181bedc:	e0bffc17 	ldw	r2,-16(fp)
 181bee0:	1080078b 	ldhu	r2,30(r2)
 181bee4:	18ffffcc 	andi	r3,r3,65535
 181bee8:	10bfffcc 	andi	r2,r2,65535
 181beec:	1880111e 	bne	r3,r2,181bf34 <tcp_connect+0x1c0>
            (cpcb->remote_port == port) &&
 181bef0:	e0bff617 	ldw	r2,-40(fp)
 181bef4:	1080080b 	ldhu	r2,32(r2)
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
        if ((cpcb->local_port == pcb->local_port) &&
 181bef8:	10ffffcc 	andi	r3,r2,65535
 181befc:	e0bffe0b 	ldhu	r2,-8(fp)
 181bf00:	18800c1e 	bne	r3,r2,181bf34 <tcp_connect+0x1c0>
            (cpcb->remote_port == port) &&
            ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 181bf04:	e0bff617 	ldw	r2,-40(fp)
 181bf08:	10c00017 	ldw	r3,0(r2)
 181bf0c:	e0bffc17 	ldw	r2,-16(fp)
 181bf10:	10800017 	ldw	r2,0(r2)
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
        if ((cpcb->local_port == pcb->local_port) &&
            (cpcb->remote_port == port) &&
 181bf14:	1880071e 	bne	r3,r2,181bf34 <tcp_connect+0x1c0>
            ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
            ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
 181bf18:	e0bff617 	ldw	r2,-40(fp)
 181bf1c:	10c00117 	ldw	r3,4(r2)
 181bf20:	e0bffd17 	ldw	r2,-12(fp)
 181bf24:	10800017 	ldw	r2,0(r2)
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
        if ((cpcb->local_port == pcb->local_port) &&
            (cpcb->remote_port == port) &&
            ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 181bf28:	1880021e 	bne	r3,r2,181bf34 <tcp_connect+0x1c0>
            ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
          /* linux returns EISCONN here, but ERR_USE should be OK for us */
          return ERR_USE;
 181bf2c:	00bffe04 	movi	r2,-8
 181bf30:	00007106 	br	181c0f8 <tcp_connect+0x384>
       now that the 5-tuple is unique. */
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 181bf34:	e0bff617 	ldw	r2,-40(fp)
 181bf38:	10800317 	ldw	r2,12(r2)
 181bf3c:	e0bff615 	stw	r2,-40(fp)
 181bf40:	e0bff617 	ldw	r2,-40(fp)
 181bf44:	103fe31e 	bne	r2,zero,181bed4 <__ram_exceptions_end+0xff80bbe4>
    /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
       now that the 5-tuple is unique. */
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
 181bf48:	e0bff717 	ldw	r2,-36(fp)
 181bf4c:	10800044 	addi	r2,r2,1
 181bf50:	e0bff715 	stw	r2,-36(fp)
 181bf54:	e0bff717 	ldw	r2,-36(fp)
 181bf58:	10800110 	cmplti	r2,r2,4
 181bf5c:	103fd31e 	bne	r2,zero,181beac <__ram_exceptions_end+0xff80bbbc>
        }
      }
    }
  }
#endif /* SO_REUSE */
  iss = tcp_next_iss();
 181bf60:	181d3a40 	call	181d3a4 <tcp_next_iss>
 181bf64:	e0bffa15 	stw	r2,-24(fp)
  pcb->rcv_nxt = 0;
 181bf68:	e0bffc17 	ldw	r2,-16(fp)
 181bf6c:	10000b15 	stw	zero,44(r2)
  pcb->snd_nxt = iss;
 181bf70:	e0bffc17 	ldw	r2,-16(fp)
 181bf74:	e0fffa17 	ldw	r3,-24(fp)
 181bf78:	10c01515 	stw	r3,84(r2)
  pcb->lastack = iss - 1;
 181bf7c:	e0bffa17 	ldw	r2,-24(fp)
 181bf80:	10ffffc4 	addi	r3,r2,-1
 181bf84:	e0bffc17 	ldw	r2,-16(fp)
 181bf88:	10c01315 	stw	r3,76(r2)
  pcb->snd_lbb = iss - 1;
 181bf8c:	e0bffa17 	ldw	r2,-24(fp)
 181bf90:	10ffffc4 	addi	r3,r2,-1
 181bf94:	e0bffc17 	ldw	r2,-16(fp)
 181bf98:	10c01815 	stw	r3,96(r2)
  pcb->rcv_wnd = TCP_WND;
 181bf9c:	e0bffc17 	ldw	r2,-16(fp)
 181bfa0:	00c80004 	movi	r3,8192
 181bfa4:	10c00c0d 	sth	r3,48(r2)
  pcb->rcv_ann_wnd = TCP_WND;
 181bfa8:	e0bffc17 	ldw	r2,-16(fp)
 181bfac:	00c80004 	movi	r3,8192
 181bfb0:	10c00c8d 	sth	r3,50(r2)
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 181bfb4:	e0bffc17 	ldw	r2,-16(fp)
 181bfb8:	10c00b17 	ldw	r3,44(r2)
 181bfbc:	e0bffc17 	ldw	r2,-16(fp)
 181bfc0:	10c00d15 	stw	r3,52(r2)
  pcb->snd_wnd = TCP_WND;
 181bfc4:	e0bffc17 	ldw	r2,-16(fp)
 181bfc8:	00c80004 	movi	r3,8192
 181bfcc:	10c0190d 	sth	r3,100(r2)
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 181bfd0:	e0bffc17 	ldw	r2,-16(fp)
 181bfd4:	00c08604 	movi	r3,536
 181bfd8:	10c00e8d 	sth	r3,58(r2)
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->local_ip), ipaddr);
 181bfdc:	e0bffc17 	ldw	r2,-16(fp)
 181bfe0:	10800e8b 	ldhu	r2,58(r2)
 181bfe4:	10bfffcc 	andi	r2,r2,65535
 181bfe8:	e0fffc17 	ldw	r3,-16(fp)
 181bfec:	e1bffd17 	ldw	r6,-12(fp)
 181bff0:	180b883a 	mov	r5,r3
 181bff4:	1009883a 	mov	r4,r2
 181bff8:	181d3d40 	call	181d3d4 <tcp_eff_send_mss>
 181bffc:	1007883a 	mov	r3,r2
 181c000:	e0bffc17 	ldw	r2,-16(fp)
 181c004:	10c00e8d 	sth	r3,58(r2)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 181c008:	e0bffc17 	ldw	r2,-16(fp)
 181c00c:	00c00044 	movi	r3,1
 181c010:	10c0140d 	sth	r3,80(r2)
  pcb->ssthresh = pcb->mss * 10;
 181c014:	e0bffc17 	ldw	r2,-16(fp)
 181c018:	10800e8b 	ldhu	r2,58(r2)
 181c01c:	108002a4 	muli	r2,r2,10
 181c020:	1007883a 	mov	r3,r2
 181c024:	e0bffc17 	ldw	r2,-16(fp)
 181c028:	10c0148d 	sth	r3,82(r2)
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 181c02c:	e0bffc17 	ldw	r2,-16(fp)
 181c030:	e0ffff17 	ldw	r3,-4(fp)
 181c034:	10c02215 	stw	r3,136(r2)
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 181c038:	01400084 	movi	r5,2
 181c03c:	e13ffc17 	ldw	r4,-16(fp)
 181c040:	181e9a80 	call	181e9a8 <tcp_enqueue_flags>
 181c044:	e0bffb05 	stb	r2,-20(fp)
  if (ret == ERR_OK) {
 181c048:	e0bffb07 	ldb	r2,-20(fp)
 181c04c:	1000291e 	bne	r2,zero,181c0f4 <tcp_connect+0x380>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 181c050:	e0bffc17 	ldw	r2,-16(fp)
 181c054:	00c00084 	movi	r3,2
 181c058:	10c00615 	stw	r3,24(r2)
    if (old_local_port != 0) {
 181c05c:	e0bff90b 	ldhu	r2,-28(fp)
 181c060:	10001a26 	beq	r2,zero,181c0cc <tcp_connect+0x358>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 181c064:	d0e7f717 	ldw	r3,-24612(gp)
 181c068:	e0bffc17 	ldw	r2,-16(fp)
 181c06c:	1880041e 	bne	r3,r2,181c080 <tcp_connect+0x30c>
 181c070:	d0a7f717 	ldw	r2,-24612(gp)
 181c074:	10800317 	ldw	r2,12(r2)
 181c078:	d0a7f715 	stw	r2,-24612(gp)
 181c07c:	00001106 	br	181c0c4 <tcp_connect+0x350>
 181c080:	d0a7f717 	ldw	r2,-24612(gp)
 181c084:	d0a7f615 	stw	r2,-24616(gp)
 181c088:	00000c06 	br	181c0bc <tcp_connect+0x348>
 181c08c:	d0a7f617 	ldw	r2,-24616(gp)
 181c090:	10c00317 	ldw	r3,12(r2)
 181c094:	e0bffc17 	ldw	r2,-16(fp)
 181c098:	1880051e 	bne	r3,r2,181c0b0 <tcp_connect+0x33c>
 181c09c:	d0a7f617 	ldw	r2,-24616(gp)
 181c0a0:	e0fffc17 	ldw	r3,-16(fp)
 181c0a4:	18c00317 	ldw	r3,12(r3)
 181c0a8:	10c00315 	stw	r3,12(r2)
 181c0ac:	00000506 	br	181c0c4 <tcp_connect+0x350>
 181c0b0:	d0a7f617 	ldw	r2,-24616(gp)
 181c0b4:	10800317 	ldw	r2,12(r2)
 181c0b8:	d0a7f615 	stw	r2,-24616(gp)
 181c0bc:	d0a7f617 	ldw	r2,-24616(gp)
 181c0c0:	103ff21e 	bne	r2,zero,181c08c <__ram_exceptions_end+0xff80bd9c>
 181c0c4:	e0bffc17 	ldw	r2,-16(fp)
 181c0c8:	10000315 	stw	zero,12(r2)
    }
    TCP_REG_ACTIVE(pcb);
 181c0cc:	d0e7f317 	ldw	r3,-24628(gp)
 181c0d0:	e0bffc17 	ldw	r2,-16(fp)
 181c0d4:	10c00315 	stw	r3,12(r2)
 181c0d8:	e0bffc17 	ldw	r2,-16(fp)
 181c0dc:	d0a7f315 	stw	r2,-24628(gp)
 181c0e0:	1820c000 	call	1820c00 <tcp_timer_needed>
 181c0e4:	00800044 	movi	r2,1
 181c0e8:	d0a7f285 	stb	r2,-24630(gp)
    snmp_inc_tcpactiveopens();

    tcp_output(pcb);
 181c0ec:	e13ffc17 	ldw	r4,-16(fp)
 181c0f0:	181ee2c0 	call	181ee2c <tcp_output>
  }
  return ret;
 181c0f4:	e0bffb03 	ldbu	r2,-20(fp)
}
 181c0f8:	e037883a 	mov	sp,fp
 181c0fc:	dfc00117 	ldw	ra,4(sp)
 181c100:	df000017 	ldw	fp,0(sp)
 181c104:	dec00204 	addi	sp,sp,8
 181c108:	f800283a 	ret

0181c10c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 181c10c:	defff304 	addi	sp,sp,-52
 181c110:	dfc00c15 	stw	ra,48(sp)
 181c114:	df000b15 	stw	fp,44(sp)
 181c118:	dc000a15 	stw	r16,40(sp)
 181c11c:	df000b04 	addi	fp,sp,44
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 181c120:	e03ff985 	stb	zero,-26(fp)

  ++tcp_ticks;
 181c124:	d0a7f417 	ldw	r2,-24624(gp)
 181c128:	10800044 	addi	r2,r2,1
 181c12c:	d0a7f415 	stw	r2,-24624(gp)
  ++tcp_timer_ctr;
 181c130:	d0a7f243 	ldbu	r2,-24631(gp)
 181c134:	10800044 	addi	r2,r2,1
 181c138:	d0a7f245 	stb	r2,-24631(gp)

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 181c13c:	e03ff815 	stw	zero,-32(fp)
  pcb = tcp_active_pcbs;
 181c140:	d0a7f317 	ldw	r2,-24628(gp)
 181c144:	e0bff715 	stw	r2,-36(fp)
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 181c148:	00018806 	br	181c76c <tcp_slowtmr+0x660>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 181c14c:	e0bff717 	ldw	r2,-36(fp)
 181c150:	10c00943 	ldbu	r3,37(r2)
 181c154:	d0a7f243 	ldbu	r2,-24631(gp)
 181c158:	18c03fcc 	andi	r3,r3,255
 181c15c:	10803fcc 	andi	r2,r2,255
 181c160:	1880041e 	bne	r3,r2,181c174 <tcp_slowtmr+0x68>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 181c164:	e0bff717 	ldw	r2,-36(fp)
 181c168:	10800317 	ldw	r2,12(r2)
 181c16c:	e0bff715 	stw	r2,-36(fp)
      continue;
 181c170:	00017e06 	br	181c76c <tcp_slowtmr+0x660>
    }
    pcb->last_timer = tcp_timer_ctr;
 181c174:	d0e7f243 	ldbu	r3,-24631(gp)
 181c178:	e0bff717 	ldw	r2,-36(fp)
 181c17c:	10c00945 	stb	r3,37(r2)

    pcb_remove = 0;
 181c180:	e03ff905 	stb	zero,-28(fp)
    pcb_reset = 0;
 181c184:	e03ff945 	stb	zero,-27(fp)

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 181c188:	e0bff717 	ldw	r2,-36(fp)
 181c18c:	10800617 	ldw	r2,24(r2)
 181c190:	10800098 	cmpnei	r2,r2,2
 181c194:	1000091e 	bne	r2,zero,181c1bc <tcp_slowtmr+0xb0>
 181c198:	e0bff717 	ldw	r2,-36(fp)
 181c19c:	10801283 	ldbu	r2,74(r2)
 181c1a0:	10803fcc 	andi	r2,r2,255
 181c1a4:	10800198 	cmpnei	r2,r2,6
 181c1a8:	1000041e 	bne	r2,zero,181c1bc <tcp_slowtmr+0xb0>
      ++pcb_remove;
 181c1ac:	e0bff903 	ldbu	r2,-28(fp)
 181c1b0:	10800044 	addi	r2,r2,1
 181c1b4:	e0bff905 	stb	r2,-28(fp)
 181c1b8:	00008d06 	br	181c3f0 <tcp_slowtmr+0x2e4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
 181c1bc:	e0bff717 	ldw	r2,-36(fp)
 181c1c0:	10801283 	ldbu	r2,74(r2)
 181c1c4:	10803fcc 	andi	r2,r2,255
 181c1c8:	10800318 	cmpnei	r2,r2,12
 181c1cc:	1000041e 	bne	r2,zero,181c1e0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 181c1d0:	e0bff903 	ldbu	r2,-28(fp)
 181c1d4:	10800044 	addi	r2,r2,1
 181c1d8:	e0bff905 	stb	r2,-28(fp)
 181c1dc:	00008406 	br	181c3f0 <tcp_slowtmr+0x2e4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 181c1e0:	e0bff717 	ldw	r2,-36(fp)
 181c1e4:	10802843 	ldbu	r2,161(r2)
 181c1e8:	10803fcc 	andi	r2,r2,255
 181c1ec:	10002226 	beq	r2,zero,181c278 <tcp_slowtmr+0x16c>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
 181c1f0:	e0bff717 	ldw	r2,-36(fp)
 181c1f4:	10802803 	ldbu	r2,160(r2)
 181c1f8:	10800044 	addi	r2,r2,1
 181c1fc:	1007883a 	mov	r3,r2
 181c200:	e0bff717 	ldw	r2,-36(fp)
 181c204:	10c02805 	stb	r3,160(r2)
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 181c208:	e0bff717 	ldw	r2,-36(fp)
 181c20c:	11002803 	ldbu	r4,160(r2)
 181c210:	e0bff717 	ldw	r2,-36(fp)
 181c214:	10802843 	ldbu	r2,161(r2)
 181c218:	10803fcc 	andi	r2,r2,255
 181c21c:	10ffffc4 	addi	r3,r2,-1
 181c220:	d0a00f84 	addi	r2,gp,-32706
 181c224:	1885883a 	add	r2,r3,r2
 181c228:	10800003 	ldbu	r2,0(r2)
 181c22c:	20c03fcc 	andi	r3,r4,255
 181c230:	10803fcc 	andi	r2,r2,255
 181c234:	18806e36 	bltu	r3,r2,181c3f0 <tcp_slowtmr+0x2e4>
          pcb->persist_cnt = 0;
 181c238:	e0bff717 	ldw	r2,-36(fp)
 181c23c:	10002805 	stb	zero,160(r2)
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 181c240:	e0bff717 	ldw	r2,-36(fp)
 181c244:	10802843 	ldbu	r2,161(r2)
 181c248:	10803fcc 	andi	r2,r2,255
 181c24c:	108001e8 	cmpgeui	r2,r2,7
 181c250:	1000061e 	bne	r2,zero,181c26c <tcp_slowtmr+0x160>
            pcb->persist_backoff++;
 181c254:	e0bff717 	ldw	r2,-36(fp)
 181c258:	10802843 	ldbu	r2,161(r2)
 181c25c:	10800044 	addi	r2,r2,1
 181c260:	1007883a 	mov	r3,r2
 181c264:	e0bff717 	ldw	r2,-36(fp)
 181c268:	10c02845 	stb	r3,161(r2)
          }
          tcp_zero_window_probe(pcb);
 181c26c:	e13ff717 	ldw	r4,-36(fp)
 181c270:	18208bc0 	call	18208bc <tcp_zero_window_probe>
 181c274:	00005e06 	br	181c3f0 <tcp_slowtmr+0x2e4>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
 181c278:	e0bff717 	ldw	r2,-36(fp)
 181c27c:	10800e0b 	ldhu	r2,56(r2)
 181c280:	10bfffcc 	andi	r2,r2,65535
 181c284:	10a0001c 	xori	r2,r2,32768
 181c288:	10a00004 	addi	r2,r2,-32768
 181c28c:	10000616 	blt	r2,zero,181c2a8 <tcp_slowtmr+0x19c>
          ++pcb->rtime;
 181c290:	e0bff717 	ldw	r2,-36(fp)
 181c294:	10800e0b 	ldhu	r2,56(r2)
 181c298:	10800044 	addi	r2,r2,1
 181c29c:	1007883a 	mov	r3,r2
 181c2a0:	e0bff717 	ldw	r2,-36(fp)
 181c2a4:	10c00e0d 	sth	r3,56(r2)
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 181c2a8:	e0bff717 	ldw	r2,-36(fp)
 181c2ac:	10801d17 	ldw	r2,116(r2)
 181c2b0:	10004f26 	beq	r2,zero,181c3f0 <tcp_slowtmr+0x2e4>
 181c2b4:	e0bff717 	ldw	r2,-36(fp)
 181c2b8:	10c00e0b 	ldhu	r3,56(r2)
 181c2bc:	e0bff717 	ldw	r2,-36(fp)
 181c2c0:	1080120b 	ldhu	r2,72(r2)
 181c2c4:	18ffffcc 	andi	r3,r3,65535
 181c2c8:	18e0001c 	xori	r3,r3,32768
 181c2cc:	18e00004 	addi	r3,r3,-32768
 181c2d0:	10bfffcc 	andi	r2,r2,65535
 181c2d4:	10a0001c 	xori	r2,r2,32768
 181c2d8:	10a00004 	addi	r2,r2,-32768
 181c2dc:	18804416 	blt	r3,r2,181c3f0 <tcp_slowtmr+0x2e4>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 181c2e0:	e0bff717 	ldw	r2,-36(fp)
 181c2e4:	10800617 	ldw	r2,24(r2)
 181c2e8:	108000a0 	cmpeqi	r2,r2,2
 181c2ec:	10001b1e 	bne	r2,zero,181c35c <tcp_slowtmr+0x250>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 181c2f0:	e0bff717 	ldw	r2,-36(fp)
 181c2f4:	1080110b 	ldhu	r2,68(r2)
 181c2f8:	10bfffcc 	andi	r2,r2,65535
 181c2fc:	10a0001c 	xori	r2,r2,32768
 181c300:	10a00004 	addi	r2,r2,-32768
 181c304:	1005d0fa 	srai	r2,r2,3
 181c308:	10ffffcc 	andi	r3,r2,65535
 181c30c:	18e0001c 	xori	r3,r3,32768
 181c310:	18e00004 	addi	r3,r3,-32768
 181c314:	e0bff717 	ldw	r2,-36(fp)
 181c318:	1080118b 	ldhu	r2,70(r2)
 181c31c:	10bfffcc 	andi	r2,r2,65535
 181c320:	10a0001c 	xori	r2,r2,32768
 181c324:	10a00004 	addi	r2,r2,-32768
 181c328:	1887883a 	add	r3,r3,r2
 181c32c:	e0bff717 	ldw	r2,-36(fp)
 181c330:	10801283 	ldbu	r2,74(r2)
 181c334:	11003fcc 	andi	r4,r2,255
 181c338:	00806134 	movhi	r2,388
 181c33c:	10840e04 	addi	r2,r2,4152
 181c340:	1105883a 	add	r2,r2,r4
 181c344:	10800003 	ldbu	r2,0(r2)
 181c348:	10803fcc 	andi	r2,r2,255
 181c34c:	1884983a 	sll	r2,r3,r2
 181c350:	1007883a 	mov	r3,r2
 181c354:	e0bff717 	ldw	r2,-36(fp)
 181c358:	10c0120d 	sth	r3,72(r2)
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 181c35c:	e0bff717 	ldw	r2,-36(fp)
 181c360:	10000e0d 	sth	zero,56(r2)

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 181c364:	e0bff717 	ldw	r2,-36(fp)
 181c368:	10c0190b 	ldhu	r3,100(r2)
 181c36c:	e0bff717 	ldw	r2,-36(fp)
 181c370:	1140140b 	ldhu	r5,80(r2)
 181c374:	1805883a 	mov	r2,r3
 181c378:	10ffffcc 	andi	r3,r2,65535
 181c37c:	293fffcc 	andi	r4,r5,65535
 181c380:	20c0012e 	bgeu	r4,r3,181c388 <tcp_slowtmr+0x27c>
 181c384:	2805883a 	mov	r2,r5
 181c388:	e0bffa0d 	sth	r2,-24(fp)
          pcb->ssthresh = eff_wnd >> 1;
 181c38c:	e0bffa0b 	ldhu	r2,-24(fp)
 181c390:	1004d07a 	srli	r2,r2,1
 181c394:	1007883a 	mov	r3,r2
 181c398:	e0bff717 	ldw	r2,-36(fp)
 181c39c:	10c0148d 	sth	r3,82(r2)
          if (pcb->ssthresh < (pcb->mss << 1)) {
 181c3a0:	e0bff717 	ldw	r2,-36(fp)
 181c3a4:	1080148b 	ldhu	r2,82(r2)
 181c3a8:	10ffffcc 	andi	r3,r2,65535
 181c3ac:	e0bff717 	ldw	r2,-36(fp)
 181c3b0:	10800e8b 	ldhu	r2,58(r2)
 181c3b4:	10bfffcc 	andi	r2,r2,65535
 181c3b8:	1085883a 	add	r2,r2,r2
 181c3bc:	1880060e 	bge	r3,r2,181c3d8 <tcp_slowtmr+0x2cc>
            pcb->ssthresh = (pcb->mss << 1);
 181c3c0:	e0bff717 	ldw	r2,-36(fp)
 181c3c4:	10800e8b 	ldhu	r2,58(r2)
 181c3c8:	1085883a 	add	r2,r2,r2
 181c3cc:	1007883a 	mov	r3,r2
 181c3d0:	e0bff717 	ldw	r2,-36(fp)
 181c3d4:	10c0148d 	sth	r3,82(r2)
          }
          pcb->cwnd = pcb->mss;
 181c3d8:	e0bff717 	ldw	r2,-36(fp)
 181c3dc:	10c00e8b 	ldhu	r3,58(r2)
 181c3e0:	e0bff717 	ldw	r2,-36(fp)
 181c3e4:	10c0140d 	sth	r3,80(r2)
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 181c3e8:	e13ff717 	ldw	r4,-36(fp)
 181c3ec:	18202a40 	call	18202a4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 181c3f0:	e0bff717 	ldw	r2,-36(fp)
 181c3f4:	10800617 	ldw	r2,24(r2)
 181c3f8:	10800198 	cmpnei	r2,r2,6
 181c3fc:	10000e1e 	bne	r2,zero,181c438 <tcp_slowtmr+0x32c>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 181c400:	e0bff717 	ldw	r2,-36(fp)
 181c404:	10800883 	ldbu	r2,34(r2)
 181c408:	10803fcc 	andi	r2,r2,255
 181c40c:	1080040c 	andi	r2,r2,16
 181c410:	10000926 	beq	r2,zero,181c438 <tcp_slowtmr+0x32c>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 181c414:	d0e7f417 	ldw	r3,-24624(gp)
 181c418:	e0bff717 	ldw	r2,-36(fp)
 181c41c:	10800a17 	ldw	r2,40(r2)
 181c420:	1885c83a 	sub	r2,r3,r2
 181c424:	10800a70 	cmpltui	r2,r2,41
 181c428:	1000031e 	bne	r2,zero,181c438 <tcp_slowtmr+0x32c>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 181c42c:	e0bff903 	ldbu	r2,-28(fp)
 181c430:	10800044 	addi	r2,r2,1
 181c434:	e0bff905 	stb	r2,-28(fp)
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 181c438:	e0bff717 	ldw	r2,-36(fp)
 181c43c:	10800203 	ldbu	r2,8(r2)
 181c440:	10803fcc 	andi	r2,r2,255
 181c444:	1080020c 	andi	r2,r2,8
 181c448:	10003826 	beq	r2,zero,181c52c <tcp_slowtmr+0x420>
       ((pcb->state == ESTABLISHED) ||
 181c44c:	e0bff717 	ldw	r2,-36(fp)
 181c450:	10800617 	ldw	r2,24(r2)
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 181c454:	10800120 	cmpeqi	r2,r2,4
 181c458:	1000041e 	bne	r2,zero,181c46c <tcp_slowtmr+0x360>
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
 181c45c:	e0bff717 	ldw	r2,-36(fp)
 181c460:	10800617 	ldw	r2,24(r2)
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
 181c464:	108001d8 	cmpnei	r2,r2,7
 181c468:	1000301e 	bne	r2,zero,181c52c <tcp_slowtmr+0x420>
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
 181c46c:	d0e7f417 	ldw	r3,-24624(gp)
 181c470:	e0bff717 	ldw	r2,-36(fp)
 181c474:	10800a17 	ldw	r2,40(r2)
 181c478:	18a1c83a 	sub	r16,r3,r2
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 181c47c:	e0bff717 	ldw	r2,-36(fp)
 181c480:	10c02517 	ldw	r3,148(r2)
 181c484:	e0bff717 	ldw	r2,-36(fp)
 181c488:	11002717 	ldw	r4,156(r2)
 181c48c:	e0bff717 	ldw	r2,-36(fp)
 181c490:	10802617 	ldw	r2,152(r2)
 181c494:	2085383a 	mul	r2,r4,r2
 181c498:	1885883a 	add	r2,r3,r2
 181c49c:	01407d04 	movi	r5,500
 181c4a0:	1009883a 	mov	r4,r2
 181c4a4:	180ac1c0 	call	180ac1c <__udivsi3>

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
 181c4a8:	1400072e 	bgeu	r2,r16,181c4c8 <tcp_slowtmr+0x3bc>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
 181c4ac:	e0bff903 	ldbu	r2,-28(fp)
 181c4b0:	10800044 	addi	r2,r2,1
 181c4b4:	e0bff905 	stb	r2,-28(fp)
        ++pcb_reset;
 181c4b8:	e0bff943 	ldbu	r2,-27(fp)
 181c4bc:	10800044 	addi	r2,r2,1
 181c4c0:	e0bff945 	stb	r2,-27(fp)
 181c4c4:	00001906 	br	181c52c <tcp_slowtmr+0x420>
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 181c4c8:	d0e7f417 	ldw	r3,-24624(gp)
 181c4cc:	e0bff717 	ldw	r2,-36(fp)
 181c4d0:	10800a17 	ldw	r2,40(r2)
 181c4d4:	18a1c83a 	sub	r16,r3,r2
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 181c4d8:	e0bff717 	ldw	r2,-36(fp)
 181c4dc:	10c02517 	ldw	r3,148(r2)
 181c4e0:	e0bff717 	ldw	r2,-36(fp)
 181c4e4:	10802883 	ldbu	r2,162(r2)
 181c4e8:	11003fcc 	andi	r4,r2,255
 181c4ec:	e0bff717 	ldw	r2,-36(fp)
 181c4f0:	10802617 	ldw	r2,152(r2)
 181c4f4:	2085383a 	mul	r2,r4,r2
 181c4f8:	1885883a 	add	r2,r3,r2
              / TCP_SLOW_INTERVAL)
 181c4fc:	01407d04 	movi	r5,500
 181c500:	1009883a 	mov	r4,r2
 181c504:	180ac1c0 	call	180ac1c <__udivsi3>
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
        ++pcb_reset;
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 181c508:	1400082e 	bgeu	r2,r16,181c52c <tcp_slowtmr+0x420>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
              / TCP_SLOW_INTERVAL)
      {
        tcp_keepalive(pcb);
 181c50c:	e13ff717 	ldw	r4,-36(fp)
 181c510:	18207280 	call	1820728 <tcp_keepalive>
        pcb->keep_cnt_sent++;
 181c514:	e0bff717 	ldw	r2,-36(fp)
 181c518:	10802883 	ldbu	r2,162(r2)
 181c51c:	10800044 	addi	r2,r2,1
 181c520:	1007883a 	mov	r3,r2
 181c524:	e0bff717 	ldw	r2,-36(fp)
 181c528:	10c02885 	stb	r3,162(r2)

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 181c52c:	e0bff717 	ldw	r2,-36(fp)
 181c530:	10801e17 	ldw	r2,120(r2)
 181c534:	10001126 	beq	r2,zero,181c57c <tcp_slowtmr+0x470>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 181c538:	d0e7f417 	ldw	r3,-24624(gp)
 181c53c:	e0bff717 	ldw	r2,-36(fp)
 181c540:	10800a17 	ldw	r2,40(r2)
 181c544:	1887c83a 	sub	r3,r3,r2
 181c548:	e0bff717 	ldw	r2,-36(fp)
 181c54c:	1080120b 	ldhu	r2,72(r2)
 181c550:	10bfffcc 	andi	r2,r2,65535
 181c554:	10a0001c 	xori	r2,r2,32768
 181c558:	10a00004 	addi	r2,r2,-32768
 181c55c:	108001a4 	muli	r2,r2,6

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 181c560:	18800636 	bltu	r3,r2,181c57c <tcp_slowtmr+0x470>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
 181c564:	e0bff717 	ldw	r2,-36(fp)
 181c568:	10801e17 	ldw	r2,120(r2)
 181c56c:	1009883a 	mov	r4,r2
 181c570:	181ca840 	call	181ca84 <tcp_segs_free>
      pcb->ooseq = NULL;
 181c574:	e0bff717 	ldw	r2,-36(fp)
 181c578:	10001e15 	stw	zero,120(r2)
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 181c57c:	e0bff717 	ldw	r2,-36(fp)
 181c580:	10800617 	ldw	r2,24(r2)
 181c584:	108000d8 	cmpnei	r2,r2,3
 181c588:	1000091e 	bne	r2,zero,181c5b0 <tcp_slowtmr+0x4a4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 181c58c:	d0e7f417 	ldw	r3,-24624(gp)
 181c590:	e0bff717 	ldw	r2,-36(fp)
 181c594:	10800a17 	ldw	r2,40(r2)
 181c598:	1885c83a 	sub	r2,r3,r2
 181c59c:	10800a70 	cmpltui	r2,r2,41
 181c5a0:	1000031e 	bne	r2,zero,181c5b0 <tcp_slowtmr+0x4a4>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 181c5a4:	e0bff903 	ldbu	r2,-28(fp)
 181c5a8:	10800044 	addi	r2,r2,1
 181c5ac:	e0bff905 	stb	r2,-28(fp)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 181c5b0:	e0bff717 	ldw	r2,-36(fp)
 181c5b4:	10800617 	ldw	r2,24(r2)
 181c5b8:	10800258 	cmpnei	r2,r2,9
 181c5bc:	1000091e 	bne	r2,zero,181c5e4 <tcp_slowtmr+0x4d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 181c5c0:	d0e7f417 	ldw	r3,-24624(gp)
 181c5c4:	e0bff717 	ldw	r2,-36(fp)
 181c5c8:	10800a17 	ldw	r2,40(r2)
 181c5cc:	1885c83a 	sub	r2,r3,r2
 181c5d0:	10803c70 	cmpltui	r2,r2,241
 181c5d4:	1000031e 	bne	r2,zero,181c5e4 <tcp_slowtmr+0x4d8>
        ++pcb_remove;
 181c5d8:	e0bff903 	ldbu	r2,-28(fp)
 181c5dc:	10800044 	addi	r2,r2,1
 181c5e0:	e0bff905 	stb	r2,-28(fp)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 181c5e4:	e0bff903 	ldbu	r2,-28(fp)
 181c5e8:	10003626 	beq	r2,zero,181c6c4 <tcp_slowtmr+0x5b8>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
 181c5ec:	e13ff717 	ldw	r4,-36(fp)
 181c5f0:	181d1280 	call	181d128 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 181c5f4:	e0bff817 	ldw	r2,-32(fp)
 181c5f8:	10000526 	beq	r2,zero,181c610 <tcp_slowtmr+0x504>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 181c5fc:	e0bff717 	ldw	r2,-36(fp)
 181c600:	10c00317 	ldw	r3,12(r2)
 181c604:	e0bff817 	ldw	r2,-32(fp)
 181c608:	10c00315 	stw	r3,12(r2)
 181c60c:	00000306 	br	181c61c <tcp_slowtmr+0x510>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 181c610:	e0bff717 	ldw	r2,-36(fp)
 181c614:	10800317 	ldw	r2,12(r2)
 181c618:	d0a7f315 	stw	r2,-24628(gp)
      }

      if (pcb_reset) {
 181c61c:	e0bff943 	ldbu	r2,-27(fp)
 181c620:	10001026 	beq	r2,zero,181c664 <tcp_slowtmr+0x558>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181c624:	e0bff717 	ldw	r2,-36(fp)
 181c628:	11001517 	ldw	r4,84(r2)
 181c62c:	e0bff717 	ldw	r2,-36(fp)
 181c630:	11400b17 	ldw	r5,44(r2)
 181c634:	e1bff717 	ldw	r6,-36(fp)
 181c638:	e0bff717 	ldw	r2,-36(fp)
 181c63c:	11c00104 	addi	r7,r2,4
          pcb->local_port, pcb->remote_port);
 181c640:	e0bff717 	ldw	r2,-36(fp)
 181c644:	1080078b 	ldhu	r2,30(r2)
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
      }

      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181c648:	10bfffcc 	andi	r2,r2,65535
          pcb->local_port, pcb->remote_port);
 181c64c:	e0fff717 	ldw	r3,-36(fp)
 181c650:	18c0080b 	ldhu	r3,32(r3)
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
      }

      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181c654:	18ffffcc 	andi	r3,r3,65535
 181c658:	d8c00115 	stw	r3,4(sp)
 181c65c:	d8800015 	stw	r2,0(sp)
 181c660:	181fed80 	call	181fed8 <tcp_rst>
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 181c664:	e0bff717 	ldw	r2,-36(fp)
 181c668:	10802417 	ldw	r2,144(r2)
 181c66c:	e0bffb15 	stw	r2,-20(fp)
      err_arg = pcb->callback_arg;
 181c670:	e0bff717 	ldw	r2,-36(fp)
 181c674:	10800417 	ldw	r2,16(r2)
 181c678:	e0bffc15 	stw	r2,-16(fp)
      pcb2 = pcb;
 181c67c:	e0bff717 	ldw	r2,-36(fp)
 181c680:	e0bffd15 	stw	r2,-12(fp)
      pcb = pcb->next;
 181c684:	e0bff717 	ldw	r2,-36(fp)
 181c688:	10800317 	ldw	r2,12(r2)
 181c68c:	e0bff715 	stw	r2,-36(fp)
      memp_free(MEMP_TCP_PCB, pcb2);
 181c690:	e13ffd17 	ldw	r4,-12(fp)
 181c694:	183c5140 	call	183c514 <free>

      tcp_active_pcbs_changed = 0;
 181c698:	d027f285 	stb	zero,-24630(gp)
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 181c69c:	e0bffb17 	ldw	r2,-20(fp)
 181c6a0:	10000426 	beq	r2,zero,181c6b4 <tcp_slowtmr+0x5a8>
 181c6a4:	e0bffb17 	ldw	r2,-20(fp)
 181c6a8:	017ffd84 	movi	r5,-10
 181c6ac:	e13ffc17 	ldw	r4,-16(fp)
 181c6b0:	103ee83a 	callr	r2
      if (tcp_active_pcbs_changed) {
 181c6b4:	d0a7f283 	ldbu	r2,-24630(gp)
 181c6b8:	10803fcc 	andi	r2,r2,255
 181c6bc:	10002b26 	beq	r2,zero,181c76c <tcp_slowtmr+0x660>
        goto tcp_slowtmr_start;
 181c6c0:	003e9e06 	br	181c13c <__ram_exceptions_end+0xff80be4c>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 181c6c4:	e0bff717 	ldw	r2,-36(fp)
 181c6c8:	e0bff815 	stw	r2,-32(fp)
      pcb = pcb->next;
 181c6cc:	e0bff717 	ldw	r2,-36(fp)
 181c6d0:	10800317 	ldw	r2,12(r2)
 181c6d4:	e0bff715 	stw	r2,-36(fp)

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 181c6d8:	e0bff817 	ldw	r2,-32(fp)
 181c6dc:	108008c3 	ldbu	r2,35(r2)
 181c6e0:	10800044 	addi	r2,r2,1
 181c6e4:	1007883a 	mov	r3,r2
 181c6e8:	e0bff817 	ldw	r2,-32(fp)
 181c6ec:	10c008c5 	stb	r3,35(r2)
      if (prev->polltmr >= prev->pollinterval) {
 181c6f0:	e0bff817 	ldw	r2,-32(fp)
 181c6f4:	10c008c3 	ldbu	r3,35(r2)
 181c6f8:	e0bff817 	ldw	r2,-32(fp)
 181c6fc:	10800903 	ldbu	r2,36(r2)
 181c700:	18c03fcc 	andi	r3,r3,255
 181c704:	10803fcc 	andi	r2,r2,255
 181c708:	18801836 	bltu	r3,r2,181c76c <tcp_slowtmr+0x660>
        prev->polltmr = 0;
 181c70c:	e0bff817 	ldw	r2,-32(fp)
 181c710:	100008c5 	stb	zero,35(r2)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 181c714:	d027f285 	stb	zero,-24630(gp)
        TCP_EVENT_POLL(prev, err);
 181c718:	e0bff817 	ldw	r2,-32(fp)
 181c71c:	10802317 	ldw	r2,140(r2)
 181c720:	10000926 	beq	r2,zero,181c748 <tcp_slowtmr+0x63c>
 181c724:	e0bff817 	ldw	r2,-32(fp)
 181c728:	10802317 	ldw	r2,140(r2)
 181c72c:	e0fff817 	ldw	r3,-32(fp)
 181c730:	18c00417 	ldw	r3,16(r3)
 181c734:	e17ff817 	ldw	r5,-32(fp)
 181c738:	1809883a 	mov	r4,r3
 181c73c:	103ee83a 	callr	r2
 181c740:	e0bff985 	stb	r2,-26(fp)
 181c744:	00000106 	br	181c74c <tcp_slowtmr+0x640>
 181c748:	e03ff985 	stb	zero,-26(fp)
        if (tcp_active_pcbs_changed) {
 181c74c:	d0a7f283 	ldbu	r2,-24630(gp)
 181c750:	10803fcc 	andi	r2,r2,255
 181c754:	10000126 	beq	r2,zero,181c75c <tcp_slowtmr+0x650>
          goto tcp_slowtmr_start;
 181c758:	003e7806 	br	181c13c <__ram_exceptions_end+0xff80be4c>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 181c75c:	e0bff987 	ldb	r2,-26(fp)
 181c760:	1000021e 	bne	r2,zero,181c76c <tcp_slowtmr+0x660>
          tcp_output(prev);
 181c764:	e13ff817 	ldw	r4,-32(fp)
 181c768:	181ee2c0 	call	181ee2c <tcp_output>
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 181c76c:	e0bff717 	ldw	r2,-36(fp)
 181c770:	103e761e 	bne	r2,zero,181c14c <__ram_exceptions_end+0xff80be5c>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 181c774:	e03ff815 	stw	zero,-32(fp)
  pcb = tcp_tw_pcbs;
 181c778:	d0a7f817 	ldw	r2,-24608(gp)
 181c77c:	e0bff715 	stw	r2,-36(fp)
  while (pcb != NULL) {
 181c780:	00002506 	br	181c818 <tcp_slowtmr+0x70c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 181c784:	e03ff905 	stb	zero,-28(fp)

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 181c788:	d0e7f417 	ldw	r3,-24624(gp)
 181c78c:	e0bff717 	ldw	r2,-36(fp)
 181c790:	10800a17 	ldw	r2,40(r2)
 181c794:	1885c83a 	sub	r2,r3,r2
 181c798:	10803c70 	cmpltui	r2,r2,241
 181c79c:	1000031e 	bne	r2,zero,181c7ac <tcp_slowtmr+0x6a0>
      ++pcb_remove;
 181c7a0:	e0bff903 	ldbu	r2,-28(fp)
 181c7a4:	10800044 	addi	r2,r2,1
 181c7a8:	e0bff905 	stb	r2,-28(fp)
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 181c7ac:	e0bff903 	ldbu	r2,-28(fp)
 181c7b0:	10001426 	beq	r2,zero,181c804 <tcp_slowtmr+0x6f8>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 181c7b4:	e13ff717 	ldw	r4,-36(fp)
 181c7b8:	181d1280 	call	181d128 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 181c7bc:	e0bff817 	ldw	r2,-32(fp)
 181c7c0:	10000526 	beq	r2,zero,181c7d8 <tcp_slowtmr+0x6cc>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 181c7c4:	e0bff717 	ldw	r2,-36(fp)
 181c7c8:	10c00317 	ldw	r3,12(r2)
 181c7cc:	e0bff817 	ldw	r2,-32(fp)
 181c7d0:	10c00315 	stw	r3,12(r2)
 181c7d4:	00000306 	br	181c7e4 <tcp_slowtmr+0x6d8>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 181c7d8:	e0bff717 	ldw	r2,-36(fp)
 181c7dc:	10800317 	ldw	r2,12(r2)
 181c7e0:	d0a7f815 	stw	r2,-24608(gp)
      }
      pcb2 = pcb;
 181c7e4:	e0bff717 	ldw	r2,-36(fp)
 181c7e8:	e0bffe15 	stw	r2,-8(fp)
      pcb = pcb->next;
 181c7ec:	e0bff717 	ldw	r2,-36(fp)
 181c7f0:	10800317 	ldw	r2,12(r2)
 181c7f4:	e0bff715 	stw	r2,-36(fp)
      memp_free(MEMP_TCP_PCB, pcb2);
 181c7f8:	e13ffe17 	ldw	r4,-8(fp)
 181c7fc:	183c5140 	call	183c514 <free>
 181c800:	00000506 	br	181c818 <tcp_slowtmr+0x70c>
    } else {
      prev = pcb;
 181c804:	e0bff717 	ldw	r2,-36(fp)
 181c808:	e0bff815 	stw	r2,-32(fp)
      pcb = pcb->next;
 181c80c:	e0bff717 	ldw	r2,-36(fp)
 181c810:	10800317 	ldw	r2,12(r2)
 181c814:	e0bff715 	stw	r2,-36(fp)

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
 181c818:	e0bff717 	ldw	r2,-36(fp)
 181c81c:	103fd91e 	bne	r2,zero,181c784 <__ram_exceptions_end+0xff80c494>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
 181c820:	0001883a 	nop
 181c824:	e6ffff04 	addi	sp,fp,-4
 181c828:	dfc00217 	ldw	ra,8(sp)
 181c82c:	df000117 	ldw	fp,4(sp)
 181c830:	dc000017 	ldw	r16,0(sp)
 181c834:	dec00304 	addi	sp,sp,12
 181c838:	f800283a 	ret

0181c83c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 181c83c:	defffc04 	addi	sp,sp,-16
 181c840:	dfc00315 	stw	ra,12(sp)
 181c844:	df000215 	stw	fp,8(sp)
 181c848:	df000204 	addi	fp,sp,8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 181c84c:	d0a7f243 	ldbu	r2,-24631(gp)
 181c850:	10800044 	addi	r2,r2,1
 181c854:	d0a7f245 	stb	r2,-24631(gp)

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 181c858:	d0a7f317 	ldw	r2,-24628(gp)
 181c85c:	e0bffe15 	stw	r2,-8(fp)

  while(pcb != NULL) {
 181c860:	00002c06 	br	181c914 <tcp_fasttmr+0xd8>
    if (pcb->last_timer != tcp_timer_ctr) {
 181c864:	e0bffe17 	ldw	r2,-8(fp)
 181c868:	10c00943 	ldbu	r3,37(r2)
 181c86c:	d0a7f243 	ldbu	r2,-24631(gp)
 181c870:	18c03fcc 	andi	r3,r3,255
 181c874:	10803fcc 	andi	r2,r2,255
 181c878:	18802626 	beq	r3,r2,181c914 <tcp_fasttmr+0xd8>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 181c87c:	d0e7f243 	ldbu	r3,-24631(gp)
 181c880:	e0bffe17 	ldw	r2,-8(fp)
 181c884:	10c00945 	stb	r3,37(r2)
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 181c888:	e0bffe17 	ldw	r2,-8(fp)
 181c88c:	10800883 	ldbu	r2,34(r2)
 181c890:	10803fcc 	andi	r2,r2,255
 181c894:	1080004c 	andi	r2,r2,1
 181c898:	10000f26 	beq	r2,zero,181c8d8 <tcp_fasttmr+0x9c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 181c89c:	e0bffe17 	ldw	r2,-8(fp)
 181c8a0:	10800883 	ldbu	r2,34(r2)
 181c8a4:	10800094 	ori	r2,r2,2
 181c8a8:	1007883a 	mov	r3,r2
 181c8ac:	e0bffe17 	ldw	r2,-8(fp)
 181c8b0:	10c00885 	stb	r3,34(r2)
        tcp_output(pcb);
 181c8b4:	e13ffe17 	ldw	r4,-8(fp)
 181c8b8:	181ee2c0 	call	181ee2c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 181c8bc:	e0bffe17 	ldw	r2,-8(fp)
 181c8c0:	10c00883 	ldbu	r3,34(r2)
 181c8c4:	00bfff04 	movi	r2,-4
 181c8c8:	1884703a 	and	r2,r3,r2
 181c8cc:	1007883a 	mov	r3,r2
 181c8d0:	e0bffe17 	ldw	r2,-8(fp)
 181c8d4:	10c00885 	stb	r3,34(r2)
      }

      next = pcb->next;
 181c8d8:	e0bffe17 	ldw	r2,-8(fp)
 181c8dc:	10800317 	ldw	r2,12(r2)
 181c8e0:	e0bfff15 	stw	r2,-4(fp)

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 181c8e4:	e0bffe17 	ldw	r2,-8(fp)
 181c8e8:	10801f17 	ldw	r2,124(r2)
 181c8ec:	10000726 	beq	r2,zero,181c90c <tcp_fasttmr+0xd0>
        tcp_active_pcbs_changed = 0;
 181c8f0:	d027f285 	stb	zero,-24630(gp)
        tcp_process_refused_data(pcb);
 181c8f4:	e13ffe17 	ldw	r4,-8(fp)
 181c8f8:	181c9340 	call	181c934 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 181c8fc:	d0a7f283 	ldbu	r2,-24630(gp)
 181c900:	10803fcc 	andi	r2,r2,255
 181c904:	10000126 	beq	r2,zero,181c90c <tcp_fasttmr+0xd0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 181c908:	003fd306 	br	181c858 <__ram_exceptions_end+0xff80c568>
        }
      }
      pcb = next;
 181c90c:	e0bfff17 	ldw	r2,-4(fp)
 181c910:	e0bffe15 	stw	r2,-8(fp)
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while(pcb != NULL) {
 181c914:	e0bffe17 	ldw	r2,-8(fp)
 181c918:	103fd21e 	bne	r2,zero,181c864 <__ram_exceptions_end+0xff80c574>
        }
      }
      pcb = next;
    }
  }
}
 181c91c:	0001883a 	nop
 181c920:	e037883a 	mov	sp,fp
 181c924:	dfc00117 	ldw	ra,4(sp)
 181c928:	df000017 	ldw	fp,0(sp)
 181c92c:	dec00204 	addi	sp,sp,8
 181c930:	f800283a 	ret

0181c934 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 181c934:	defffb04 	addi	sp,sp,-20
 181c938:	dfc00415 	stw	ra,16(sp)
 181c93c:	df000315 	stw	fp,12(sp)
 181c940:	df000304 	addi	fp,sp,12
 181c944:	e13fff15 	stw	r4,-4(fp)
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
 181c948:	e0bfff17 	ldw	r2,-4(fp)
 181c94c:	10801f17 	ldw	r2,124(r2)
 181c950:	10800343 	ldbu	r2,13(r2)
 181c954:	e0bffd45 	stb	r2,-11(fp)
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
 181c958:	e0bfff17 	ldw	r2,-4(fp)
 181c95c:	10801f17 	ldw	r2,124(r2)
 181c960:	e0bffe15 	stw	r2,-8(fp)
  pcb->refused_data = NULL;
 181c964:	e0bfff17 	ldw	r2,-4(fp)
 181c968:	10001f15 	stw	zero,124(r2)
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 181c96c:	e0bfff17 	ldw	r2,-4(fp)
 181c970:	10802117 	ldw	r2,132(r2)
 181c974:	10000b26 	beq	r2,zero,181c9a4 <tcp_process_refused_data+0x70>
 181c978:	e0bfff17 	ldw	r2,-4(fp)
 181c97c:	10802117 	ldw	r2,132(r2)
 181c980:	e0ffff17 	ldw	r3,-4(fp)
 181c984:	18c00417 	ldw	r3,16(r3)
 181c988:	000f883a 	mov	r7,zero
 181c98c:	e1bffe17 	ldw	r6,-8(fp)
 181c990:	e17fff17 	ldw	r5,-4(fp)
 181c994:	1809883a 	mov	r4,r3
 181c998:	103ee83a 	callr	r2
 181c99c:	e0bffd05 	stb	r2,-12(fp)
 181c9a0:	00000606 	br	181c9bc <tcp_process_refused_data+0x88>
 181c9a4:	000f883a 	mov	r7,zero
 181c9a8:	e1bffe17 	ldw	r6,-8(fp)
 181c9ac:	e17fff17 	ldw	r5,-4(fp)
 181c9b0:	0009883a 	mov	r4,zero
 181c9b4:	181cbe00 	call	181cbe0 <tcp_recv_null>
 181c9b8:	e0bffd05 	stb	r2,-12(fp)
  if (err == ERR_OK) {
 181c9bc:	e0bffd07 	ldb	r2,-12(fp)
 181c9c0:	1000221e 	bne	r2,zero,181ca4c <tcp_process_refused_data+0x118>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
 181c9c4:	e0bffd43 	ldbu	r2,-11(fp)
 181c9c8:	1080080c 	andi	r2,r2,32
 181c9cc:	10002726 	beq	r2,zero,181ca6c <tcp_process_refused_data+0x138>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
 181c9d0:	e0bfff17 	ldw	r2,-4(fp)
 181c9d4:	10800c0b 	ldhu	r2,48(r2)
 181c9d8:	10bfffcc 	andi	r2,r2,65535
 181c9dc:	10880020 	cmpeqi	r2,r2,8192
 181c9e0:	1000061e 	bne	r2,zero,181c9fc <tcp_process_refused_data+0xc8>
        pcb->rcv_wnd++;
 181c9e4:	e0bfff17 	ldw	r2,-4(fp)
 181c9e8:	10800c0b 	ldhu	r2,48(r2)
 181c9ec:	10800044 	addi	r2,r2,1
 181c9f0:	1007883a 	mov	r3,r2
 181c9f4:	e0bfff17 	ldw	r2,-4(fp)
 181c9f8:	10c00c0d 	sth	r3,48(r2)
      }
      TCP_EVENT_CLOSED(pcb, err);
 181c9fc:	e0bfff17 	ldw	r2,-4(fp)
 181ca00:	10802117 	ldw	r2,132(r2)
 181ca04:	10000b26 	beq	r2,zero,181ca34 <tcp_process_refused_data+0x100>
 181ca08:	e0bfff17 	ldw	r2,-4(fp)
 181ca0c:	10802117 	ldw	r2,132(r2)
 181ca10:	e0ffff17 	ldw	r3,-4(fp)
 181ca14:	18c00417 	ldw	r3,16(r3)
 181ca18:	000f883a 	mov	r7,zero
 181ca1c:	000d883a 	mov	r6,zero
 181ca20:	e17fff17 	ldw	r5,-4(fp)
 181ca24:	1809883a 	mov	r4,r3
 181ca28:	103ee83a 	callr	r2
 181ca2c:	e0bffd05 	stb	r2,-12(fp)
 181ca30:	00000106 	br	181ca38 <tcp_process_refused_data+0x104>
 181ca34:	e03ffd05 	stb	zero,-12(fp)
      if (err == ERR_ABRT) {
 181ca38:	e0bffd07 	ldb	r2,-12(fp)
 181ca3c:	10bffd98 	cmpnei	r2,r2,-10
 181ca40:	10000a1e 	bne	r2,zero,181ca6c <tcp_process_refused_data+0x138>
        return ERR_ABRT;
 181ca44:	00bffd84 	movi	r2,-10
 181ca48:	00000906 	br	181ca70 <tcp_process_refused_data+0x13c>
      }
    }
  } else if (err == ERR_ABRT) {
 181ca4c:	e0bffd07 	ldb	r2,-12(fp)
 181ca50:	10bffd98 	cmpnei	r2,r2,-10
 181ca54:	1000021e 	bne	r2,zero,181ca60 <tcp_process_refused_data+0x12c>
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
 181ca58:	00bffd84 	movi	r2,-10
 181ca5c:	00000406 	br	181ca70 <tcp_process_refused_data+0x13c>
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
 181ca60:	e0bfff17 	ldw	r2,-4(fp)
 181ca64:	e0fffe17 	ldw	r3,-8(fp)
 181ca68:	10c01f15 	stw	r3,124(r2)
  }
  return ERR_OK;
 181ca6c:	0005883a 	mov	r2,zero
}
 181ca70:	e037883a 	mov	sp,fp
 181ca74:	dfc00117 	ldw	ra,4(sp)
 181ca78:	df000017 	ldw	fp,0(sp)
 181ca7c:	dec00204 	addi	sp,sp,8
 181ca80:	f800283a 	ret

0181ca84 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 181ca84:	defffc04 	addi	sp,sp,-16
 181ca88:	dfc00315 	stw	ra,12(sp)
 181ca8c:	df000215 	stw	fp,8(sp)
 181ca90:	df000204 	addi	fp,sp,8
 181ca94:	e13fff15 	stw	r4,-4(fp)
  while (seg != NULL) {
 181ca98:	00000706 	br	181cab8 <tcp_segs_free+0x34>
    struct tcp_seg *next = seg->next;
 181ca9c:	e0bfff17 	ldw	r2,-4(fp)
 181caa0:	10800017 	ldw	r2,0(r2)
 181caa4:	e0bffe15 	stw	r2,-8(fp)
    tcp_seg_free(seg);
 181caa8:	e13fff17 	ldw	r4,-4(fp)
 181caac:	181cad80 	call	181cad8 <tcp_seg_free>
    seg = next;
 181cab0:	e0bffe17 	ldw	r2,-8(fp)
 181cab4:	e0bfff15 	stw	r2,-4(fp)
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 181cab8:	e0bfff17 	ldw	r2,-4(fp)
 181cabc:	103ff71e 	bne	r2,zero,181ca9c <__ram_exceptions_end+0xff80c7ac>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
    seg = next;
  }
}
 181cac0:	0001883a 	nop
 181cac4:	e037883a 	mov	sp,fp
 181cac8:	dfc00117 	ldw	ra,4(sp)
 181cacc:	df000017 	ldw	fp,0(sp)
 181cad0:	dec00204 	addi	sp,sp,8
 181cad4:	f800283a 	ret

0181cad8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 181cad8:	defffd04 	addi	sp,sp,-12
 181cadc:	dfc00215 	stw	ra,8(sp)
 181cae0:	df000115 	stw	fp,4(sp)
 181cae4:	df000104 	addi	fp,sp,4
 181cae8:	e13fff15 	stw	r4,-4(fp)
  if (seg != NULL) {
 181caec:	e0bfff17 	ldw	r2,-4(fp)
 181caf0:	10000926 	beq	r2,zero,181cb18 <tcp_seg_free+0x40>
    if (seg->p != NULL) {
 181caf4:	e0bfff17 	ldw	r2,-4(fp)
 181caf8:	10800117 	ldw	r2,4(r2)
 181cafc:	10000426 	beq	r2,zero,181cb10 <tcp_seg_free+0x38>
      pbuf_free(seg->p);
 181cb00:	e0bfff17 	ldw	r2,-4(fp)
 181cb04:	10800117 	ldw	r2,4(r2)
 181cb08:	1009883a 	mov	r4,r2
 181cb0c:	181a22c0 	call	181a22c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 181cb10:	e13fff17 	ldw	r4,-4(fp)
 181cb14:	183c5140 	call	183c514 <free>
  }
}
 181cb18:	0001883a 	nop
 181cb1c:	e037883a 	mov	sp,fp
 181cb20:	dfc00117 	ldw	ra,4(sp)
 181cb24:	df000017 	ldw	fp,0(sp)
 181cb28:	dec00204 	addi	sp,sp,8
 181cb2c:	f800283a 	ret

0181cb30 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 181cb30:	defffd04 	addi	sp,sp,-12
 181cb34:	df000215 	stw	fp,8(sp)
 181cb38:	df000204 	addi	fp,sp,8
 181cb3c:	e13ffe15 	stw	r4,-8(fp)
 181cb40:	2805883a 	mov	r2,r5
 181cb44:	e0bfff05 	stb	r2,-4(fp)
  pcb->prio = prio;
 181cb48:	e0bffe17 	ldw	r2,-8(fp)
 181cb4c:	e0ffff03 	ldbu	r3,-4(fp)
 181cb50:	10c00705 	stb	r3,28(r2)
}
 181cb54:	0001883a 	nop
 181cb58:	e037883a 	mov	sp,fp
 181cb5c:	df000017 	ldw	fp,0(sp)
 181cb60:	dec00104 	addi	sp,sp,4
 181cb64:	f800283a 	ret

0181cb68 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 181cb68:	defffc04 	addi	sp,sp,-16
 181cb6c:	dfc00315 	stw	ra,12(sp)
 181cb70:	df000215 	stw	fp,8(sp)
 181cb74:	df000204 	addi	fp,sp,8
 181cb78:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 181cb7c:	00806134 	movhi	r2,388
 181cb80:	108bcc84 	addi	r2,r2,12082
 181cb84:	1080020b 	ldhu	r2,8(r2)
 181cb88:	10bfffcc 	andi	r2,r2,65535
 181cb8c:	1009883a 	mov	r4,r2
 181cb90:	183c5000 	call	183c500 <malloc>
 181cb94:	e0bffe15 	stw	r2,-8(fp)
  if (cseg == NULL) {
 181cb98:	e0bffe17 	ldw	r2,-8(fp)
 181cb9c:	1000021e 	bne	r2,zero,181cba8 <tcp_seg_copy+0x40>
    return NULL;
 181cba0:	0005883a 	mov	r2,zero
 181cba4:	00000906 	br	181cbcc <tcp_seg_copy+0x64>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
 181cba8:	01800504 	movi	r6,20
 181cbac:	e17fff17 	ldw	r5,-4(fp)
 181cbb0:	e13ffe17 	ldw	r4,-8(fp)
 181cbb4:	1805f980 	call	1805f98 <memcpy>
  pbuf_ref(cseg->p);
 181cbb8:	e0bffe17 	ldw	r2,-8(fp)
 181cbbc:	10800117 	ldw	r2,4(r2)
 181cbc0:	1009883a 	mov	r4,r2
 181cbc4:	181a3b40 	call	181a3b4 <pbuf_ref>
  return cseg;
 181cbc8:	e0bffe17 	ldw	r2,-8(fp)
}
 181cbcc:	e037883a 	mov	sp,fp
 181cbd0:	dfc00117 	ldw	ra,4(sp)
 181cbd4:	df000017 	ldw	fp,0(sp)
 181cbd8:	dec00204 	addi	sp,sp,8
 181cbdc:	f800283a 	ret

0181cbe0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 181cbe0:	defffa04 	addi	sp,sp,-24
 181cbe4:	dfc00515 	stw	ra,20(sp)
 181cbe8:	df000415 	stw	fp,16(sp)
 181cbec:	df000404 	addi	fp,sp,16
 181cbf0:	e13ffc15 	stw	r4,-16(fp)
 181cbf4:	e17ffd15 	stw	r5,-12(fp)
 181cbf8:	e1bffe15 	stw	r6,-8(fp)
 181cbfc:	3805883a 	mov	r2,r7
 181cc00:	e0bfff05 	stb	r2,-4(fp)
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 181cc04:	e0bffe17 	ldw	r2,-8(fp)
 181cc08:	10000926 	beq	r2,zero,181cc30 <tcp_recv_null+0x50>
    tcp_recved(pcb, p->tot_len);
 181cc0c:	e0bffe17 	ldw	r2,-8(fp)
 181cc10:	1080020b 	ldhu	r2,8(r2)
 181cc14:	10bfffcc 	andi	r2,r2,65535
 181cc18:	100b883a 	mov	r5,r2
 181cc1c:	e13ffd17 	ldw	r4,-12(fp)
 181cc20:	181bbf40 	call	181bbf4 <tcp_recved>
    pbuf_free(p);
 181cc24:	e13ffe17 	ldw	r4,-8(fp)
 181cc28:	181a22c0 	call	181a22c <pbuf_free>
 181cc2c:	00000506 	br	181cc44 <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
 181cc30:	e0bfff07 	ldb	r2,-4(fp)
 181cc34:	1000031e 	bne	r2,zero,181cc44 <tcp_recv_null+0x64>
    return tcp_close(pcb);
 181cc38:	e13ffd17 	ldw	r4,-12(fp)
 181cc3c:	181b3b40 	call	181b3b4 <tcp_close>
 181cc40:	00000106 	br	181cc48 <tcp_recv_null+0x68>
  }
  return ERR_OK;
 181cc44:	0005883a 	mov	r2,zero
}
 181cc48:	e037883a 	mov	sp,fp
 181cc4c:	dfc00117 	ldw	ra,4(sp)
 181cc50:	df000017 	ldw	fp,0(sp)
 181cc54:	dec00204 	addi	sp,sp,8
 181cc58:	f800283a 	ret

0181cc5c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 181cc5c:	defff904 	addi	sp,sp,-28
 181cc60:	dfc00615 	stw	ra,24(sp)
 181cc64:	df000515 	stw	fp,20(sp)
 181cc68:	df000504 	addi	fp,sp,20
 181cc6c:	2005883a 	mov	r2,r4
 181cc70:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
 181cc74:	00801fc4 	movi	r2,127
 181cc78:	e0bffe05 	stb	r2,-8(fp)
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 181cc7c:	e03ffd15 	stw	zero,-12(fp)
  inactive = NULL;
 181cc80:	e03ffc15 	stw	zero,-16(fp)
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 181cc84:	d0a7f317 	ldw	r2,-24628(gp)
 181cc88:	e0bffb15 	stw	r2,-20(fp)
 181cc8c:	00001d06 	br	181cd04 <tcp_kill_prio+0xa8>
    if (pcb->prio <= prio &&
 181cc90:	e0bffb17 	ldw	r2,-20(fp)
 181cc94:	10800703 	ldbu	r2,28(r2)
 181cc98:	10803fcc 	andi	r2,r2,255
 181cc9c:	e0ffff03 	ldbu	r3,-4(fp)
 181cca0:	18801536 	bltu	r3,r2,181ccf8 <tcp_kill_prio+0x9c>
       pcb->prio <= mprio &&
 181cca4:	e0bffb17 	ldw	r2,-20(fp)
 181cca8:	10800703 	ldbu	r2,28(r2)
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
 181ccac:	10803fcc 	andi	r2,r2,255
 181ccb0:	e0fffe03 	ldbu	r3,-8(fp)
 181ccb4:	18801036 	bltu	r3,r2,181ccf8 <tcp_kill_prio+0x9c>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 181ccb8:	d0e7f417 	ldw	r3,-24624(gp)
 181ccbc:	e0bffb17 	ldw	r2,-20(fp)
 181ccc0:	10800a17 	ldw	r2,40(r2)
 181ccc4:	1887c83a 	sub	r3,r3,r2
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
 181ccc8:	e0bffd17 	ldw	r2,-12(fp)
 181cccc:	18800a36 	bltu	r3,r2,181ccf8 <tcp_kill_prio+0x9c>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
 181ccd0:	d0e7f417 	ldw	r3,-24624(gp)
 181ccd4:	e0bffb17 	ldw	r2,-20(fp)
 181ccd8:	10800a17 	ldw	r2,40(r2)
 181ccdc:	1885c83a 	sub	r2,r3,r2
 181cce0:	e0bffd15 	stw	r2,-12(fp)
      inactive = pcb;
 181cce4:	e0bffb17 	ldw	r2,-20(fp)
 181cce8:	e0bffc15 	stw	r2,-16(fp)
      mprio = pcb->prio;
 181ccec:	e0bffb17 	ldw	r2,-20(fp)
 181ccf0:	10800703 	ldbu	r2,28(r2)
 181ccf4:	e0bffe05 	stb	r2,-8(fp)
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 181ccf8:	e0bffb17 	ldw	r2,-20(fp)
 181ccfc:	10800317 	ldw	r2,12(r2)
 181cd00:	e0bffb15 	stw	r2,-20(fp)
 181cd04:	e0bffb17 	ldw	r2,-20(fp)
 181cd08:	103fe11e 	bne	r2,zero,181cc90 <__ram_exceptions_end+0xff80c9a0>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
 181cd0c:	e0bffc17 	ldw	r2,-16(fp)
 181cd10:	10000226 	beq	r2,zero,181cd1c <tcp_kill_prio+0xc0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 181cd14:	e13ffc17 	ldw	r4,-16(fp)
 181cd18:	181b6580 	call	181b658 <tcp_abort>
  }
}
 181cd1c:	0001883a 	nop
 181cd20:	e037883a 	mov	sp,fp
 181cd24:	dfc00117 	ldw	ra,4(sp)
 181cd28:	df000017 	ldw	fp,0(sp)
 181cd2c:	dec00204 	addi	sp,sp,8
 181cd30:	f800283a 	ret

0181cd34 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 181cd34:	defffb04 	addi	sp,sp,-20
 181cd38:	dfc00415 	stw	ra,16(sp)
 181cd3c:	df000315 	stw	fp,12(sp)
 181cd40:	df000304 	addi	fp,sp,12
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 181cd44:	e03fff15 	stw	zero,-4(fp)
  inactive = NULL;
 181cd48:	e03ffe15 	stw	zero,-8(fp)
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 181cd4c:	d0a7f817 	ldw	r2,-24608(gp)
 181cd50:	e0bffd15 	stw	r2,-12(fp)
 181cd54:	00001006 	br	181cd98 <tcp_kill_timewait+0x64>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 181cd58:	d0e7f417 	ldw	r3,-24624(gp)
 181cd5c:	e0bffd17 	ldw	r2,-12(fp)
 181cd60:	10800a17 	ldw	r2,40(r2)
 181cd64:	1887c83a 	sub	r3,r3,r2
 181cd68:	e0bfff17 	ldw	r2,-4(fp)
 181cd6c:	18800736 	bltu	r3,r2,181cd8c <tcp_kill_timewait+0x58>
      inactivity = tcp_ticks - pcb->tmr;
 181cd70:	d0e7f417 	ldw	r3,-24624(gp)
 181cd74:	e0bffd17 	ldw	r2,-12(fp)
 181cd78:	10800a17 	ldw	r2,40(r2)
 181cd7c:	1885c83a 	sub	r2,r3,r2
 181cd80:	e0bfff15 	stw	r2,-4(fp)
      inactive = pcb;
 181cd84:	e0bffd17 	ldw	r2,-12(fp)
 181cd88:	e0bffe15 	stw	r2,-8(fp)
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 181cd8c:	e0bffd17 	ldw	r2,-12(fp)
 181cd90:	10800317 	ldw	r2,12(r2)
 181cd94:	e0bffd15 	stw	r2,-12(fp)
 181cd98:	e0bffd17 	ldw	r2,-12(fp)
 181cd9c:	103fee1e 	bne	r2,zero,181cd58 <__ram_exceptions_end+0xff80ca68>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
 181cda0:	e0bffe17 	ldw	r2,-8(fp)
 181cda4:	10000226 	beq	r2,zero,181cdb0 <tcp_kill_timewait+0x7c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 181cda8:	e13ffe17 	ldw	r4,-8(fp)
 181cdac:	181b6580 	call	181b658 <tcp_abort>
  }
}
 181cdb0:	0001883a 	nop
 181cdb4:	e037883a 	mov	sp,fp
 181cdb8:	dfc00117 	ldw	ra,4(sp)
 181cdbc:	df000017 	ldw	fp,0(sp)
 181cdc0:	dec00204 	addi	sp,sp,8
 181cdc4:	f800283a 	ret

0181cdc8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 181cdc8:	defffb04 	addi	sp,sp,-20
 181cdcc:	dfc00415 	stw	ra,16(sp)
 181cdd0:	df000315 	stw	fp,12(sp)
 181cdd4:	df000304 	addi	fp,sp,12
 181cdd8:	2005883a 	mov	r2,r4
 181cddc:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 181cde0:	00806134 	movhi	r2,388
 181cde4:	108bcc84 	addi	r2,r2,12082
 181cde8:	1080010b 	ldhu	r2,4(r2)
 181cdec:	10bfffcc 	andi	r2,r2,65535
 181cdf0:	1009883a 	mov	r4,r2
 181cdf4:	183c5000 	call	183c500 <malloc>
 181cdf8:	e0bffd15 	stw	r2,-12(fp)
  if (pcb == NULL) {
 181cdfc:	e0bffd17 	ldw	r2,-12(fp)
 181ce00:	1000141e 	bne	r2,zero,181ce54 <tcp_alloc+0x8c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 181ce04:	181cd340 	call	181cd34 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 181ce08:	00806134 	movhi	r2,388
 181ce0c:	108bcc84 	addi	r2,r2,12082
 181ce10:	1080010b 	ldhu	r2,4(r2)
 181ce14:	10bfffcc 	andi	r2,r2,65535
 181ce18:	1009883a 	mov	r4,r2
 181ce1c:	183c5000 	call	183c500 <malloc>
 181ce20:	e0bffd15 	stw	r2,-12(fp)
    if (pcb == NULL) {
 181ce24:	e0bffd17 	ldw	r2,-12(fp)
 181ce28:	10000a1e 	bne	r2,zero,181ce54 <tcp_alloc+0x8c>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
 181ce2c:	e0bfff03 	ldbu	r2,-4(fp)
 181ce30:	1009883a 	mov	r4,r2
 181ce34:	181cc5c0 	call	181cc5c <tcp_kill_prio>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 181ce38:	00806134 	movhi	r2,388
 181ce3c:	108bcc84 	addi	r2,r2,12082
 181ce40:	1080010b 	ldhu	r2,4(r2)
 181ce44:	10bfffcc 	andi	r2,r2,65535
 181ce48:	1009883a 	mov	r4,r2
 181ce4c:	183c5000 	call	183c500 <malloc>
 181ce50:	e0bffd15 	stw	r2,-12(fp)
    if (pcb != NULL) {
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 181ce54:	e0bffd17 	ldw	r2,-12(fp)
 181ce58:	10004f26 	beq	r2,zero,181cf98 <tcp_alloc+0x1d0>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 181ce5c:	01802904 	movi	r6,164
 181ce60:	000b883a 	mov	r5,zero
 181ce64:	e13ffd17 	ldw	r4,-12(fp)
 181ce68:	18060e00 	call	18060e0 <memset>
    pcb->prio = prio;
 181ce6c:	e0bffd17 	ldw	r2,-12(fp)
 181ce70:	e0ffff03 	ldbu	r3,-4(fp)
 181ce74:	10c00705 	stb	r3,28(r2)
    pcb->snd_buf = TCP_SND_BUF;
 181ce78:	e0bffd17 	ldw	r2,-12(fp)
 181ce7c:	00c2da04 	movi	r3,2920
 181ce80:	10c01a8d 	sth	r3,106(r2)
    pcb->snd_queuelen = 0;
 181ce84:	e0bffd17 	ldw	r2,-12(fp)
 181ce88:	10001b0d 	sth	zero,108(r2)
    pcb->rcv_wnd = TCP_WND;
 181ce8c:	e0bffd17 	ldw	r2,-12(fp)
 181ce90:	00c80004 	movi	r3,8192
 181ce94:	10c00c0d 	sth	r3,48(r2)
    pcb->rcv_ann_wnd = TCP_WND;
 181ce98:	e0bffd17 	ldw	r2,-12(fp)
 181ce9c:	00c80004 	movi	r3,8192
 181cea0:	10c00c8d 	sth	r3,50(r2)
    pcb->tos = 0;
 181cea4:	e0bffd17 	ldw	r2,-12(fp)
 181cea8:	10000245 	stb	zero,9(r2)
    pcb->ttl = TCP_TTL;
 181ceac:	e0bffd17 	ldw	r2,-12(fp)
 181ceb0:	00c01004 	movi	r3,64
 181ceb4:	10c00285 	stb	r3,10(r2)
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 181ceb8:	e0bffd17 	ldw	r2,-12(fp)
 181cebc:	00c08604 	movi	r3,536
 181cec0:	10c00e8d 	sth	r3,58(r2)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 181cec4:	e0bffd17 	ldw	r2,-12(fp)
 181cec8:	00c00184 	movi	r3,6
 181cecc:	10c0120d 	sth	r3,72(r2)
    pcb->sa = 0;
 181ced0:	e0bffd17 	ldw	r2,-12(fp)
 181ced4:	1000110d 	sth	zero,68(r2)
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 181ced8:	e0bffd17 	ldw	r2,-12(fp)
 181cedc:	00c00184 	movi	r3,6
 181cee0:	10c0118d 	sth	r3,70(r2)
    pcb->rtime = -1;
 181cee4:	e0bffd17 	ldw	r2,-12(fp)
 181cee8:	00ffffc4 	movi	r3,-1
 181ceec:	10c00e0d 	sth	r3,56(r2)
    pcb->cwnd = 1;
 181cef0:	e0bffd17 	ldw	r2,-12(fp)
 181cef4:	00c00044 	movi	r3,1
 181cef8:	10c0140d 	sth	r3,80(r2)
    iss = tcp_next_iss();
 181cefc:	181d3a40 	call	181d3a4 <tcp_next_iss>
 181cf00:	e0bffe15 	stw	r2,-8(fp)
    pcb->snd_wl2 = iss;
 181cf04:	e0bffd17 	ldw	r2,-12(fp)
 181cf08:	e0fffe17 	ldw	r3,-8(fp)
 181cf0c:	10c01715 	stw	r3,92(r2)
    pcb->snd_nxt = iss;
 181cf10:	e0bffd17 	ldw	r2,-12(fp)
 181cf14:	e0fffe17 	ldw	r3,-8(fp)
 181cf18:	10c01515 	stw	r3,84(r2)
    pcb->lastack = iss;
 181cf1c:	e0bffd17 	ldw	r2,-12(fp)
 181cf20:	e0fffe17 	ldw	r3,-8(fp)
 181cf24:	10c01315 	stw	r3,76(r2)
    pcb->snd_lbb = iss;   
 181cf28:	e0bffd17 	ldw	r2,-12(fp)
 181cf2c:	e0fffe17 	ldw	r3,-8(fp)
 181cf30:	10c01815 	stw	r3,96(r2)
    pcb->tmr = tcp_ticks;
 181cf34:	d0e7f417 	ldw	r3,-24624(gp)
 181cf38:	e0bffd17 	ldw	r2,-12(fp)
 181cf3c:	10c00a15 	stw	r3,40(r2)
    pcb->last_timer = tcp_timer_ctr;
 181cf40:	d0e7f243 	ldbu	r3,-24631(gp)
 181cf44:	e0bffd17 	ldw	r2,-12(fp)
 181cf48:	10c00945 	stb	r3,37(r2)

    pcb->polltmr = 0;
 181cf4c:	e0bffd17 	ldw	r2,-12(fp)
 181cf50:	100008c5 	stb	zero,35(r2)

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 181cf54:	e0fffd17 	ldw	r3,-12(fp)
 181cf58:	008060b4 	movhi	r2,386
 181cf5c:	10b2f804 	addi	r2,r2,-13344
 181cf60:	18802115 	stw	r2,132(r3)
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 181cf64:	e0fffd17 	ldw	r3,-12(fp)
 181cf68:	00801bb4 	movhi	r2,110
 181cf6c:	10b74004 	addi	r2,r2,-8960
 181cf70:	18802515 	stw	r2,148(r3)
    
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 181cf74:	e0fffd17 	ldw	r3,-12(fp)
 181cf78:	00800074 	movhi	r2,1
 181cf7c:	10893e04 	addi	r2,r2,9464
 181cf80:	18802615 	stw	r2,152(r3)
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 181cf84:	e0bffd17 	ldw	r2,-12(fp)
 181cf88:	00c00244 	movi	r3,9
 181cf8c:	10c02715 	stw	r3,156(r2)
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
 181cf90:	e0bffd17 	ldw	r2,-12(fp)
 181cf94:	10002885 	stb	zero,162(r2)
  }
  return pcb;
 181cf98:	e0bffd17 	ldw	r2,-12(fp)
}
 181cf9c:	e037883a 	mov	sp,fp
 181cfa0:	dfc00117 	ldw	ra,4(sp)
 181cfa4:	df000017 	ldw	fp,0(sp)
 181cfa8:	dec00204 	addi	sp,sp,8
 181cfac:	f800283a 	ret

0181cfb0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 181cfb0:	defffe04 	addi	sp,sp,-8
 181cfb4:	dfc00115 	stw	ra,4(sp)
 181cfb8:	df000015 	stw	fp,0(sp)
 181cfbc:	d839883a 	mov	fp,sp
  return tcp_alloc(TCP_PRIO_NORMAL);
 181cfc0:	01001004 	movi	r4,64
 181cfc4:	181cdc80 	call	181cdc8 <tcp_alloc>
}
 181cfc8:	e037883a 	mov	sp,fp
 181cfcc:	dfc00117 	ldw	ra,4(sp)
 181cfd0:	df000017 	ldw	fp,0(sp)
 181cfd4:	dec00204 	addi	sp,sp,8
 181cfd8:	f800283a 	ret

0181cfdc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 181cfdc:	defffd04 	addi	sp,sp,-12
 181cfe0:	df000215 	stw	fp,8(sp)
 181cfe4:	df000204 	addi	fp,sp,8
 181cfe8:	e13ffe15 	stw	r4,-8(fp)
 181cfec:	e17fff15 	stw	r5,-4(fp)
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
 181cff0:	e0bffe17 	ldw	r2,-8(fp)
 181cff4:	e0ffff17 	ldw	r3,-4(fp)
 181cff8:	10c00415 	stw	r3,16(r2)
}
 181cffc:	0001883a 	nop
 181d000:	e037883a 	mov	sp,fp
 181d004:	df000017 	ldw	fp,0(sp)
 181d008:	dec00104 	addi	sp,sp,4
 181d00c:	f800283a 	ret

0181d010 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 181d010:	defffd04 	addi	sp,sp,-12
 181d014:	df000215 	stw	fp,8(sp)
 181d018:	df000204 	addi	fp,sp,8
 181d01c:	e13ffe15 	stw	r4,-8(fp)
 181d020:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
 181d024:	e0bffe17 	ldw	r2,-8(fp)
 181d028:	e0ffff17 	ldw	r3,-4(fp)
 181d02c:	10c02115 	stw	r3,132(r2)
}
 181d030:	0001883a 	nop
 181d034:	e037883a 	mov	sp,fp
 181d038:	df000017 	ldw	fp,0(sp)
 181d03c:	dec00104 	addi	sp,sp,4
 181d040:	f800283a 	ret

0181d044 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 181d044:	defffd04 	addi	sp,sp,-12
 181d048:	df000215 	stw	fp,8(sp)
 181d04c:	df000204 	addi	fp,sp,8
 181d050:	e13ffe15 	stw	r4,-8(fp)
 181d054:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
 181d058:	e0bffe17 	ldw	r2,-8(fp)
 181d05c:	e0ffff17 	ldw	r3,-4(fp)
 181d060:	10c02015 	stw	r3,128(r2)
}
 181d064:	0001883a 	nop
 181d068:	e037883a 	mov	sp,fp
 181d06c:	df000017 	ldw	fp,0(sp)
 181d070:	dec00104 	addi	sp,sp,4
 181d074:	f800283a 	ret

0181d078 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 181d078:	defffd04 	addi	sp,sp,-12
 181d07c:	df000215 	stw	fp,8(sp)
 181d080:	df000204 	addi	fp,sp,8
 181d084:	e13ffe15 	stw	r4,-8(fp)
 181d088:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
 181d08c:	e0bffe17 	ldw	r2,-8(fp)
 181d090:	e0ffff17 	ldw	r3,-4(fp)
 181d094:	10c02415 	stw	r3,144(r2)
}
 181d098:	0001883a 	nop
 181d09c:	e037883a 	mov	sp,fp
 181d0a0:	df000017 	ldw	fp,0(sp)
 181d0a4:	dec00104 	addi	sp,sp,4
 181d0a8:	f800283a 	ret

0181d0ac <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 181d0ac:	defffd04 	addi	sp,sp,-12
 181d0b0:	df000215 	stw	fp,8(sp)
 181d0b4:	df000204 	addi	fp,sp,8
 181d0b8:	e13ffe15 	stw	r4,-8(fp)
 181d0bc:	e17fff15 	stw	r5,-4(fp)
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
 181d0c0:	e0bffe17 	ldw	r2,-8(fp)
 181d0c4:	e0ffff17 	ldw	r3,-4(fp)
 181d0c8:	10c00515 	stw	r3,20(r2)
}
 181d0cc:	0001883a 	nop
 181d0d0:	e037883a 	mov	sp,fp
 181d0d4:	df000017 	ldw	fp,0(sp)
 181d0d8:	dec00104 	addi	sp,sp,4
 181d0dc:	f800283a 	ret

0181d0e0 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 181d0e0:	defffc04 	addi	sp,sp,-16
 181d0e4:	df000315 	stw	fp,12(sp)
 181d0e8:	df000304 	addi	fp,sp,12
 181d0ec:	e13ffd15 	stw	r4,-12(fp)
 181d0f0:	e17ffe15 	stw	r5,-8(fp)
 181d0f4:	3005883a 	mov	r2,r6
 181d0f8:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 181d0fc:	e0bffd17 	ldw	r2,-12(fp)
 181d100:	e0fffe17 	ldw	r3,-8(fp)
 181d104:	10c02315 	stw	r3,140(r2)
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
 181d108:	e0bffd17 	ldw	r2,-12(fp)
 181d10c:	e0ffff03 	ldbu	r3,-4(fp)
 181d110:	10c00905 	stb	r3,36(r2)
}
 181d114:	0001883a 	nop
 181d118:	e037883a 	mov	sp,fp
 181d11c:	df000017 	ldw	fp,0(sp)
 181d120:	dec00104 	addi	sp,sp,4
 181d124:	f800283a 	ret

0181d128 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 181d128:	defffc04 	addi	sp,sp,-16
 181d12c:	dfc00315 	stw	ra,12(sp)
 181d130:	df000215 	stw	fp,8(sp)
 181d134:	df000204 	addi	fp,sp,8
 181d138:	e13fff15 	stw	r4,-4(fp)
  if (pcb->state != CLOSED &&
 181d13c:	e0bfff17 	ldw	r2,-4(fp)
 181d140:	10800617 	ldw	r2,24(r2)
 181d144:	10004e26 	beq	r2,zero,181d280 <tcp_pcb_purge+0x158>
     pcb->state != TIME_WAIT &&
 181d148:	e0bfff17 	ldw	r2,-4(fp)
 181d14c:	10800617 	ldw	r2,24(r2)
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
 181d150:	108002a0 	cmpeqi	r2,r2,10
 181d154:	10004a1e 	bne	r2,zero,181d280 <tcp_pcb_purge+0x158>
     pcb->state != TIME_WAIT &&
     pcb->state != LISTEN) {
 181d158:	e0bfff17 	ldw	r2,-4(fp)
 181d15c:	10800617 	ldw	r2,24(r2)
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
     pcb->state != TIME_WAIT &&
 181d160:	10800060 	cmpeqi	r2,r2,1
 181d164:	1000461e 	bne	r2,zero,181d280 <tcp_pcb_purge+0x158>
     pcb->state != LISTEN) {

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

#if TCP_LISTEN_BACKLOG
    if (pcb->state == SYN_RCVD) {
 181d168:	e0bfff17 	ldw	r2,-4(fp)
 181d16c:	10800617 	ldw	r2,24(r2)
 181d170:	108000d8 	cmpnei	r2,r2,3
 181d174:	1000201e 	bne	r2,zero,181d1f8 <tcp_pcb_purge+0xd0>
      /* Need to find the corresponding listen_pcb and decrease its accepts_pending */
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 181d178:	d0a7f517 	ldw	r2,-24620(gp)
 181d17c:	e0bffe15 	stw	r2,-8(fp)
 181d180:	00001b06 	br	181d1f0 <tcp_pcb_purge+0xc8>
        if ((lpcb->local_port == pcb->local_port) &&
 181d184:	e0bffe17 	ldw	r2,-8(fp)
 181d188:	10c0078b 	ldhu	r3,30(r2)
 181d18c:	e0bfff17 	ldw	r2,-4(fp)
 181d190:	1080078b 	ldhu	r2,30(r2)
 181d194:	18ffffcc 	andi	r3,r3,65535
 181d198:	10bfffcc 	andi	r2,r2,65535
 181d19c:	1880111e 	bne	r3,r2,181d1e4 <tcp_pcb_purge+0xbc>
            (ip_addr_isany(&lpcb->local_ip) ||
 181d1a0:	e0bffe17 	ldw	r2,-8(fp)
      /* Need to find the corresponding listen_pcb and decrease its accepts_pending */
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
        if ((lpcb->local_port == pcb->local_port) &&
 181d1a4:	10000826 	beq	r2,zero,181d1c8 <tcp_pcb_purge+0xa0>
            (ip_addr_isany(&lpcb->local_ip) ||
 181d1a8:	e0bffe17 	ldw	r2,-8(fp)
 181d1ac:	10800017 	ldw	r2,0(r2)
 181d1b0:	10000526 	beq	r2,zero,181d1c8 <tcp_pcb_purge+0xa0>
             ip_addr_cmp(&pcb->local_ip, &lpcb->local_ip))) {
 181d1b4:	e0bfff17 	ldw	r2,-4(fp)
 181d1b8:	10c00017 	ldw	r3,0(r2)
 181d1bc:	e0bffe17 	ldw	r2,-8(fp)
 181d1c0:	10800017 	ldw	r2,0(r2)
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
        if ((lpcb->local_port == pcb->local_port) &&
            (ip_addr_isany(&lpcb->local_ip) ||
 181d1c4:	1880071e 	bne	r3,r2,181d1e4 <tcp_pcb_purge+0xbc>
             ip_addr_cmp(&pcb->local_ip, &lpcb->local_ip))) {
            /* port and address of the listen pcb match the timed-out pcb */
            LWIP_ASSERT("tcp_pcb_purge: listen pcb does not have accepts pending",
              lpcb->accepts_pending > 0);
            lpcb->accepts_pending--;
 181d1c8:	e0bffe17 	ldw	r2,-8(fp)
 181d1cc:	10800843 	ldbu	r2,33(r2)
 181d1d0:	10bfffc4 	addi	r2,r2,-1
 181d1d4:	1007883a 	mov	r3,r2
 181d1d8:	e0bffe17 	ldw	r2,-8(fp)
 181d1dc:	10c00845 	stb	r3,33(r2)
            break;
 181d1e0:	00000506 	br	181d1f8 <tcp_pcb_purge+0xd0>
    if (pcb->state == SYN_RCVD) {
      /* Need to find the corresponding listen_pcb and decrease its accepts_pending */
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 181d1e4:	e0bffe17 	ldw	r2,-8(fp)
 181d1e8:	10800317 	ldw	r2,12(r2)
 181d1ec:	e0bffe15 	stw	r2,-8(fp)
 181d1f0:	e0bffe17 	ldw	r2,-8(fp)
 181d1f4:	103fe31e 	bne	r2,zero,181d184 <__ram_exceptions_end+0xff80ce94>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 181d1f8:	e0bfff17 	ldw	r2,-4(fp)
 181d1fc:	10801f17 	ldw	r2,124(r2)
 181d200:	10000626 	beq	r2,zero,181d21c <tcp_pcb_purge+0xf4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 181d204:	e0bfff17 	ldw	r2,-4(fp)
 181d208:	10801f17 	ldw	r2,124(r2)
 181d20c:	1009883a 	mov	r4,r2
 181d210:	181a22c0 	call	181a22c <pbuf_free>
      pcb->refused_data = NULL;
 181d214:	e0bfff17 	ldw	r2,-4(fp)
 181d218:	10001f15 	stw	zero,124(r2)
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 181d21c:	e0bfff17 	ldw	r2,-4(fp)
 181d220:	10801e17 	ldw	r2,120(r2)
 181d224:	1009883a 	mov	r4,r2
 181d228:	181ca840 	call	181ca84 <tcp_segs_free>
    pcb->ooseq = NULL;
 181d22c:	e0bfff17 	ldw	r2,-4(fp)
 181d230:	10001e15 	stw	zero,120(r2)
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 181d234:	e0bfff17 	ldw	r2,-4(fp)
 181d238:	00ffffc4 	movi	r3,-1
 181d23c:	10c00e0d 	sth	r3,56(r2)

    tcp_segs_free(pcb->unsent);
 181d240:	e0bfff17 	ldw	r2,-4(fp)
 181d244:	10801c17 	ldw	r2,112(r2)
 181d248:	1009883a 	mov	r4,r2
 181d24c:	181ca840 	call	181ca84 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 181d250:	e0bfff17 	ldw	r2,-4(fp)
 181d254:	10801d17 	ldw	r2,116(r2)
 181d258:	1009883a 	mov	r4,r2
 181d25c:	181ca840 	call	181ca84 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 181d260:	e0bfff17 	ldw	r2,-4(fp)
 181d264:	10001c15 	stw	zero,112(r2)
 181d268:	e0bfff17 	ldw	r2,-4(fp)
 181d26c:	10c01c17 	ldw	r3,112(r2)
 181d270:	e0bfff17 	ldw	r2,-4(fp)
 181d274:	10c01d15 	stw	r3,116(r2)
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 181d278:	e0bfff17 	ldw	r2,-4(fp)
 181d27c:	10001b8d 	sth	zero,110(r2)
#endif /* TCP_OVERSIZE */
  }
}
 181d280:	0001883a 	nop
 181d284:	e037883a 	mov	sp,fp
 181d288:	dfc00117 	ldw	ra,4(sp)
 181d28c:	df000017 	ldw	fp,0(sp)
 181d290:	dec00204 	addi	sp,sp,8
 181d294:	f800283a 	ret

0181d298 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 181d298:	defffc04 	addi	sp,sp,-16
 181d29c:	dfc00315 	stw	ra,12(sp)
 181d2a0:	df000215 	stw	fp,8(sp)
 181d2a4:	df000204 	addi	fp,sp,8
 181d2a8:	e13ffe15 	stw	r4,-8(fp)
 181d2ac:	e17fff15 	stw	r5,-4(fp)
  TCP_RMV(pcblist, pcb);
 181d2b0:	e0bffe17 	ldw	r2,-8(fp)
 181d2b4:	10c00017 	ldw	r3,0(r2)
 181d2b8:	e0bfff17 	ldw	r2,-4(fp)
 181d2bc:	1880061e 	bne	r3,r2,181d2d8 <tcp_pcb_remove+0x40>
 181d2c0:	e0bffe17 	ldw	r2,-8(fp)
 181d2c4:	10800017 	ldw	r2,0(r2)
 181d2c8:	10c00317 	ldw	r3,12(r2)
 181d2cc:	e0bffe17 	ldw	r2,-8(fp)
 181d2d0:	10c00015 	stw	r3,0(r2)
 181d2d4:	00001206 	br	181d320 <tcp_pcb_remove+0x88>
 181d2d8:	e0bffe17 	ldw	r2,-8(fp)
 181d2dc:	10800017 	ldw	r2,0(r2)
 181d2e0:	d0a7f615 	stw	r2,-24616(gp)
 181d2e4:	00000c06 	br	181d318 <tcp_pcb_remove+0x80>
 181d2e8:	d0a7f617 	ldw	r2,-24616(gp)
 181d2ec:	10c00317 	ldw	r3,12(r2)
 181d2f0:	e0bfff17 	ldw	r2,-4(fp)
 181d2f4:	1880051e 	bne	r3,r2,181d30c <tcp_pcb_remove+0x74>
 181d2f8:	d0a7f617 	ldw	r2,-24616(gp)
 181d2fc:	e0ffff17 	ldw	r3,-4(fp)
 181d300:	18c00317 	ldw	r3,12(r3)
 181d304:	10c00315 	stw	r3,12(r2)
 181d308:	00000506 	br	181d320 <tcp_pcb_remove+0x88>
 181d30c:	d0a7f617 	ldw	r2,-24616(gp)
 181d310:	10800317 	ldw	r2,12(r2)
 181d314:	d0a7f615 	stw	r2,-24616(gp)
 181d318:	d0a7f617 	ldw	r2,-24616(gp)
 181d31c:	103ff21e 	bne	r2,zero,181d2e8 <__ram_exceptions_end+0xff80cff8>
 181d320:	e0bfff17 	ldw	r2,-4(fp)
 181d324:	10000315 	stw	zero,12(r2)

  tcp_pcb_purge(pcb);
 181d328:	e13fff17 	ldw	r4,-4(fp)
 181d32c:	181d1280 	call	181d128 <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 181d330:	e0bfff17 	ldw	r2,-4(fp)
 181d334:	10800617 	ldw	r2,24(r2)
 181d338:	108002a0 	cmpeqi	r2,r2,10
 181d33c:	1000111e 	bne	r2,zero,181d384 <tcp_pcb_remove+0xec>
     pcb->state != LISTEN &&
 181d340:	e0bfff17 	ldw	r2,-4(fp)
 181d344:	10800617 	ldw	r2,24(r2)
  TCP_RMV(pcblist, pcb);

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 181d348:	10800060 	cmpeqi	r2,r2,1
 181d34c:	10000d1e 	bne	r2,zero,181d384 <tcp_pcb_remove+0xec>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 181d350:	e0bfff17 	ldw	r2,-4(fp)
 181d354:	10800883 	ldbu	r2,34(r2)
 181d358:	10803fcc 	andi	r2,r2,255
 181d35c:	1080004c 	andi	r2,r2,1

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
 181d360:	10000826 	beq	r2,zero,181d384 <tcp_pcb_remove+0xec>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
 181d364:	e0bfff17 	ldw	r2,-4(fp)
 181d368:	10800883 	ldbu	r2,34(r2)
 181d36c:	10800094 	ori	r2,r2,2
 181d370:	1007883a 	mov	r3,r2
 181d374:	e0bfff17 	ldw	r2,-4(fp)
 181d378:	10c00885 	stb	r3,34(r2)
    tcp_output(pcb);
 181d37c:	e13fff17 	ldw	r4,-4(fp)
 181d380:	181ee2c0 	call	181ee2c <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 181d384:	e0bfff17 	ldw	r2,-4(fp)
 181d388:	10000615 	stw	zero,24(r2)

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 181d38c:	0001883a 	nop
 181d390:	e037883a 	mov	sp,fp
 181d394:	dfc00117 	ldw	ra,4(sp)
 181d398:	df000017 	ldw	fp,0(sp)
 181d39c:	dec00204 	addi	sp,sp,8
 181d3a0:	f800283a 	ret

0181d3a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
 181d3a4:	deffff04 	addi	sp,sp,-4
 181d3a8:	df000015 	stw	fp,0(sp)
 181d3ac:	d839883a 	mov	fp,sp
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
 181d3b0:	d0e01217 	ldw	r3,-32696(gp)
 181d3b4:	d0a7f417 	ldw	r2,-24624(gp)
 181d3b8:	1885883a 	add	r2,r3,r2
 181d3bc:	d0a01215 	stw	r2,-32696(gp)
  return iss;
 181d3c0:	d0a01217 	ldw	r2,-32696(gp)
}
 181d3c4:	e037883a 	mov	sp,fp
 181d3c8:	df000017 	ldw	fp,0(sp)
 181d3cc:	dec00104 	addi	sp,sp,4
 181d3d0:	f800283a 	ret

0181d3d4 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *src, ip_addr_t *addr)
{
 181d3d4:	defff904 	addi	sp,sp,-28
 181d3d8:	dfc00615 	stw	ra,24(sp)
 181d3dc:	df000515 	stw	fp,20(sp)
 181d3e0:	df000504 	addi	fp,sp,20
 181d3e4:	2005883a 	mov	r2,r4
 181d3e8:	e17ffe15 	stw	r5,-8(fp)
 181d3ec:	e1bfff15 	stw	r6,-4(fp)
 181d3f0:	e0bffd0d 	sth	r2,-12(fp)
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(src, addr);
 181d3f4:	e17fff17 	ldw	r5,-4(fp)
 181d3f8:	e13ffe17 	ldw	r4,-8(fp)
 181d3fc:	18319740 	call	1831974 <ip_route>
 181d400:	e0bffb15 	stw	r2,-20(fp)
  if ((outif != NULL) && (outif->mtu != 0)) {
 181d404:	e0bffb17 	ldw	r2,-20(fp)
 181d408:	10000f26 	beq	r2,zero,181d448 <tcp_eff_send_mss+0x74>
 181d40c:	e0bffb17 	ldw	r2,-20(fp)
 181d410:	10800c0b 	ldhu	r2,48(r2)
 181d414:	10bfffcc 	andi	r2,r2,65535
 181d418:	10000b26 	beq	r2,zero,181d448 <tcp_eff_send_mss+0x74>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
 181d41c:	e0bffb17 	ldw	r2,-20(fp)
 181d420:	10800c0b 	ldhu	r2,48(r2)
 181d424:	10bff604 	addi	r2,r2,-40
 181d428:	e0bffc0d 	sth	r2,-16(fp)
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 181d42c:	e17ffd0b 	ldhu	r5,-12(fp)
 181d430:	e0bffc0b 	ldhu	r2,-16(fp)
 181d434:	10ffffcc 	andi	r3,r2,65535
 181d438:	293fffcc 	andi	r4,r5,65535
 181d43c:	20c0012e 	bgeu	r4,r3,181d444 <tcp_eff_send_mss+0x70>
 181d440:	2805883a 	mov	r2,r5
 181d444:	e0bffd0d 	sth	r2,-12(fp)
  }
  return sendmss;
 181d448:	e0bffd0b 	ldhu	r2,-12(fp)
}
 181d44c:	e037883a 	mov	sp,fp
 181d450:	dfc00117 	ldw	ra,4(sp)
 181d454:	df000017 	ldw	fp,0(sp)
 181d458:	dec00204 	addi	sp,sp,8
 181d45c:	f800283a 	ret

0181d460 <tcp_debug_state_str>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

const char*
tcp_debug_state_str(enum tcp_state s)
{
 181d460:	defffe04 	addi	sp,sp,-8
 181d464:	df000115 	stw	fp,4(sp)
 181d468:	df000104 	addi	fp,sp,4
 181d46c:	e13fff15 	stw	r4,-4(fp)
  return tcp_state_str[s];
 181d470:	00806134 	movhi	r2,388
 181d474:	10840304 	addi	r2,r2,4108
 181d478:	e0ffff17 	ldw	r3,-4(fp)
 181d47c:	18c7883a 	add	r3,r3,r3
 181d480:	18c7883a 	add	r3,r3,r3
 181d484:	10c5883a 	add	r2,r2,r3
 181d488:	10800017 	ldw	r2,0(r2)
}
 181d48c:	e037883a 	mov	sp,fp
 181d490:	df000017 	ldw	fp,0(sp)
 181d494:	dec00104 	addi	sp,sp,4
 181d498:	f800283a 	ret

0181d49c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 181d49c:	defff804 	addi	sp,sp,-32
 181d4a0:	dfc00715 	stw	ra,28(sp)
 181d4a4:	df000615 	stw	fp,24(sp)
 181d4a8:	df000604 	addi	fp,sp,24
 181d4ac:	e13ffc15 	stw	r4,-16(fp)
 181d4b0:	2807883a 	mov	r3,r5
 181d4b4:	3005883a 	mov	r2,r6
 181d4b8:	e1ffff15 	stw	r7,-4(fp)
 181d4bc:	e0fffd0d 	sth	r3,-12(fp)
 181d4c0:	e0bffe0d 	sth	r2,-8(fp)
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 181d4c4:	e0fffd0b 	ldhu	r3,-12(fp)
 181d4c8:	e0bffe0b 	ldhu	r2,-8(fp)
 181d4cc:	1885883a 	add	r2,r3,r2
 181d4d0:	10800504 	addi	r2,r2,20
 181d4d4:	10bfffcc 	andi	r2,r2,65535
 181d4d8:	000d883a 	mov	r6,zero
 181d4dc:	100b883a 	mov	r5,r2
 181d4e0:	01000044 	movi	r4,1
 181d4e4:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181d4e8:	e0bffa15 	stw	r2,-24(fp)
  if (p != NULL) {
 181d4ec:	e0bffa17 	ldw	r2,-24(fp)
 181d4f0:	1000de26 	beq	r2,zero,181d86c <tcp_output_alloc_header+0x3d0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 181d4f4:	e0bffa17 	ldw	r2,-24(fp)
 181d4f8:	10800117 	ldw	r2,4(r2)
 181d4fc:	e0bffb15 	stw	r2,-20(fp)
    tcphdr->src = htons(pcb->local_port);
 181d500:	e0bffc17 	ldw	r2,-16(fp)
 181d504:	1080078b 	ldhu	r2,30(r2)
 181d508:	10bfffcc 	andi	r2,r2,65535
 181d50c:	1004d23a 	srli	r2,r2,8
 181d510:	1007883a 	mov	r3,r2
 181d514:	e0bffc17 	ldw	r2,-16(fp)
 181d518:	1080078b 	ldhu	r2,30(r2)
 181d51c:	10bfffcc 	andi	r2,r2,65535
 181d520:	1004923a 	slli	r2,r2,8
 181d524:	1884b03a 	or	r2,r3,r2
 181d528:	100d883a 	mov	r6,r2
 181d52c:	e0bffb17 	ldw	r2,-20(fp)
 181d530:	30ffffcc 	andi	r3,r6,65535
 181d534:	19403fcc 	andi	r5,r3,255
 181d538:	10c00003 	ldbu	r3,0(r2)
 181d53c:	1806703a 	and	r3,r3,zero
 181d540:	1809883a 	mov	r4,r3
 181d544:	2807883a 	mov	r3,r5
 181d548:	20c6b03a 	or	r3,r4,r3
 181d54c:	10c00005 	stb	r3,0(r2)
 181d550:	30ffffcc 	andi	r3,r6,65535
 181d554:	1806d23a 	srli	r3,r3,8
 181d558:	197fffcc 	andi	r5,r3,65535
 181d55c:	10c00043 	ldbu	r3,1(r2)
 181d560:	1806703a 	and	r3,r3,zero
 181d564:	1809883a 	mov	r4,r3
 181d568:	2807883a 	mov	r3,r5
 181d56c:	20c6b03a 	or	r3,r4,r3
 181d570:	10c00045 	stb	r3,1(r2)
    tcphdr->dest = htons(pcb->remote_port);
 181d574:	e0bffc17 	ldw	r2,-16(fp)
 181d578:	1080080b 	ldhu	r2,32(r2)
 181d57c:	10bfffcc 	andi	r2,r2,65535
 181d580:	1004d23a 	srli	r2,r2,8
 181d584:	1007883a 	mov	r3,r2
 181d588:	e0bffc17 	ldw	r2,-16(fp)
 181d58c:	1080080b 	ldhu	r2,32(r2)
 181d590:	10bfffcc 	andi	r2,r2,65535
 181d594:	1004923a 	slli	r2,r2,8
 181d598:	1884b03a 	or	r2,r3,r2
 181d59c:	100d883a 	mov	r6,r2
 181d5a0:	e0bffb17 	ldw	r2,-20(fp)
 181d5a4:	30ffffcc 	andi	r3,r6,65535
 181d5a8:	19403fcc 	andi	r5,r3,255
 181d5ac:	10c00083 	ldbu	r3,2(r2)
 181d5b0:	1806703a 	and	r3,r3,zero
 181d5b4:	1809883a 	mov	r4,r3
 181d5b8:	2807883a 	mov	r3,r5
 181d5bc:	20c6b03a 	or	r3,r4,r3
 181d5c0:	10c00085 	stb	r3,2(r2)
 181d5c4:	30ffffcc 	andi	r3,r6,65535
 181d5c8:	1806d23a 	srli	r3,r3,8
 181d5cc:	197fffcc 	andi	r5,r3,65535
 181d5d0:	10c000c3 	ldbu	r3,3(r2)
 181d5d4:	1806703a 	and	r3,r3,zero
 181d5d8:	1809883a 	mov	r4,r3
 181d5dc:	2807883a 	mov	r3,r5
 181d5e0:	20c6b03a 	or	r3,r4,r3
 181d5e4:	10c000c5 	stb	r3,3(r2)
    tcphdr->seqno = seqno_be;
 181d5e8:	e0bffb17 	ldw	r2,-20(fp)
 181d5ec:	e0ffff17 	ldw	r3,-4(fp)
 181d5f0:	19403fcc 	andi	r5,r3,255
 181d5f4:	10c00103 	ldbu	r3,4(r2)
 181d5f8:	1806703a 	and	r3,r3,zero
 181d5fc:	1809883a 	mov	r4,r3
 181d600:	2807883a 	mov	r3,r5
 181d604:	20c6b03a 	or	r3,r4,r3
 181d608:	10c00105 	stb	r3,4(r2)
 181d60c:	e0ffff17 	ldw	r3,-4(fp)
 181d610:	1806d23a 	srli	r3,r3,8
 181d614:	19403fcc 	andi	r5,r3,255
 181d618:	10c00143 	ldbu	r3,5(r2)
 181d61c:	1806703a 	and	r3,r3,zero
 181d620:	1809883a 	mov	r4,r3
 181d624:	2807883a 	mov	r3,r5
 181d628:	20c6b03a 	or	r3,r4,r3
 181d62c:	10c00145 	stb	r3,5(r2)
 181d630:	e0ffff17 	ldw	r3,-4(fp)
 181d634:	1806d43a 	srli	r3,r3,16
 181d638:	19403fcc 	andi	r5,r3,255
 181d63c:	10c00183 	ldbu	r3,6(r2)
 181d640:	1806703a 	and	r3,r3,zero
 181d644:	1809883a 	mov	r4,r3
 181d648:	2807883a 	mov	r3,r5
 181d64c:	20c6b03a 	or	r3,r4,r3
 181d650:	10c00185 	stb	r3,6(r2)
 181d654:	e0ffff17 	ldw	r3,-4(fp)
 181d658:	180ad63a 	srli	r5,r3,24
 181d65c:	10c001c3 	ldbu	r3,7(r2)
 181d660:	1806703a 	and	r3,r3,zero
 181d664:	1809883a 	mov	r4,r3
 181d668:	2807883a 	mov	r3,r5
 181d66c:	20c6b03a 	or	r3,r4,r3
 181d670:	10c001c5 	stb	r3,7(r2)
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 181d674:	e0bffc17 	ldw	r2,-16(fp)
 181d678:	10800b17 	ldw	r2,44(r2)
 181d67c:	1006d63a 	srli	r3,r2,24
 181d680:	e0bffc17 	ldw	r2,-16(fp)
 181d684:	10800b17 	ldw	r2,44(r2)
 181d688:	1004d23a 	srli	r2,r2,8
 181d68c:	10bfc00c 	andi	r2,r2,65280
 181d690:	1886b03a 	or	r3,r3,r2
 181d694:	e0bffc17 	ldw	r2,-16(fp)
 181d698:	10800b17 	ldw	r2,44(r2)
 181d69c:	10bfc00c 	andi	r2,r2,65280
 181d6a0:	1004923a 	slli	r2,r2,8
 181d6a4:	1886b03a 	or	r3,r3,r2
 181d6a8:	e0bffc17 	ldw	r2,-16(fp)
 181d6ac:	10800b17 	ldw	r2,44(r2)
 181d6b0:	1004963a 	slli	r2,r2,24
 181d6b4:	1886b03a 	or	r3,r3,r2
 181d6b8:	e0bffb17 	ldw	r2,-20(fp)
 181d6bc:	19803fcc 	andi	r6,r3,255
 181d6c0:	11000203 	ldbu	r4,8(r2)
 181d6c4:	2008703a 	and	r4,r4,zero
 181d6c8:	200b883a 	mov	r5,r4
 181d6cc:	3009883a 	mov	r4,r6
 181d6d0:	2908b03a 	or	r4,r5,r4
 181d6d4:	11000205 	stb	r4,8(r2)
 181d6d8:	1808d23a 	srli	r4,r3,8
 181d6dc:	21803fcc 	andi	r6,r4,255
 181d6e0:	11000243 	ldbu	r4,9(r2)
 181d6e4:	2008703a 	and	r4,r4,zero
 181d6e8:	200b883a 	mov	r5,r4
 181d6ec:	3009883a 	mov	r4,r6
 181d6f0:	2908b03a 	or	r4,r5,r4
 181d6f4:	11000245 	stb	r4,9(r2)
 181d6f8:	1808d43a 	srli	r4,r3,16
 181d6fc:	21803fcc 	andi	r6,r4,255
 181d700:	11000283 	ldbu	r4,10(r2)
 181d704:	2008703a 	and	r4,r4,zero
 181d708:	200b883a 	mov	r5,r4
 181d70c:	3009883a 	mov	r4,r6
 181d710:	2908b03a 	or	r4,r5,r4
 181d714:	11000285 	stb	r4,10(r2)
 181d718:	180ad63a 	srli	r5,r3,24
 181d71c:	10c002c3 	ldbu	r3,11(r2)
 181d720:	1806703a 	and	r3,r3,zero
 181d724:	1809883a 	mov	r4,r3
 181d728:	2807883a 	mov	r3,r5
 181d72c:	20c6b03a 	or	r3,r4,r3
 181d730:	10c002c5 	stb	r3,11(r2)
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 181d734:	e0bffd0b 	ldhu	r2,-12(fp)
 181d738:	1004d0ba 	srli	r2,r2,2
 181d73c:	10bfffcc 	andi	r2,r2,65535
 181d740:	10800144 	addi	r2,r2,5
 181d744:	1004933a 	slli	r2,r2,12
 181d748:	10bfffcc 	andi	r2,r2,65535
 181d74c:	1004d23a 	srli	r2,r2,8
 181d750:	10840014 	ori	r2,r2,4096
 181d754:	100d883a 	mov	r6,r2
 181d758:	e0bffb17 	ldw	r2,-20(fp)
 181d75c:	30ffffcc 	andi	r3,r6,65535
 181d760:	19403fcc 	andi	r5,r3,255
 181d764:	10c00303 	ldbu	r3,12(r2)
 181d768:	1806703a 	and	r3,r3,zero
 181d76c:	1809883a 	mov	r4,r3
 181d770:	2807883a 	mov	r3,r5
 181d774:	20c6b03a 	or	r3,r4,r3
 181d778:	10c00305 	stb	r3,12(r2)
 181d77c:	30ffffcc 	andi	r3,r6,65535
 181d780:	1806d23a 	srli	r3,r3,8
 181d784:	197fffcc 	andi	r5,r3,65535
 181d788:	10c00343 	ldbu	r3,13(r2)
 181d78c:	1806703a 	and	r3,r3,zero
 181d790:	1809883a 	mov	r4,r3
 181d794:	2807883a 	mov	r3,r5
 181d798:	20c6b03a 	or	r3,r4,r3
 181d79c:	10c00345 	stb	r3,13(r2)
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 181d7a0:	e0bffc17 	ldw	r2,-16(fp)
 181d7a4:	10800c8b 	ldhu	r2,50(r2)
 181d7a8:	10bfffcc 	andi	r2,r2,65535
 181d7ac:	1004d23a 	srli	r2,r2,8
 181d7b0:	1007883a 	mov	r3,r2
 181d7b4:	e0bffc17 	ldw	r2,-16(fp)
 181d7b8:	10800c8b 	ldhu	r2,50(r2)
 181d7bc:	10bfffcc 	andi	r2,r2,65535
 181d7c0:	1004923a 	slli	r2,r2,8
 181d7c4:	1884b03a 	or	r2,r3,r2
 181d7c8:	100d883a 	mov	r6,r2
 181d7cc:	e0bffb17 	ldw	r2,-20(fp)
 181d7d0:	30ffffcc 	andi	r3,r6,65535
 181d7d4:	19403fcc 	andi	r5,r3,255
 181d7d8:	10c00383 	ldbu	r3,14(r2)
 181d7dc:	1806703a 	and	r3,r3,zero
 181d7e0:	1809883a 	mov	r4,r3
 181d7e4:	2807883a 	mov	r3,r5
 181d7e8:	20c6b03a 	or	r3,r4,r3
 181d7ec:	10c00385 	stb	r3,14(r2)
 181d7f0:	30ffffcc 	andi	r3,r6,65535
 181d7f4:	1806d23a 	srli	r3,r3,8
 181d7f8:	197fffcc 	andi	r5,r3,65535
 181d7fc:	10c003c3 	ldbu	r3,15(r2)
 181d800:	1806703a 	and	r3,r3,zero
 181d804:	1809883a 	mov	r4,r3
 181d808:	2807883a 	mov	r3,r5
 181d80c:	20c6b03a 	or	r3,r4,r3
 181d810:	10c003c5 	stb	r3,15(r2)
    tcphdr->chksum = 0;
 181d814:	e0bffb17 	ldw	r2,-20(fp)
 181d818:	10c00403 	ldbu	r3,16(r2)
 181d81c:	1806703a 	and	r3,r3,zero
 181d820:	10c00405 	stb	r3,16(r2)
 181d824:	10c00443 	ldbu	r3,17(r2)
 181d828:	1806703a 	and	r3,r3,zero
 181d82c:	10c00445 	stb	r3,17(r2)
    tcphdr->urgp = 0;
 181d830:	e0bffb17 	ldw	r2,-20(fp)
 181d834:	10c00483 	ldbu	r3,18(r2)
 181d838:	1806703a 	and	r3,r3,zero
 181d83c:	10c00485 	stb	r3,18(r2)
 181d840:	10c004c3 	ldbu	r3,19(r2)
 181d844:	1806703a 	and	r3,r3,zero
 181d848:	10c004c5 	stb	r3,19(r2)

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 181d84c:	e0bffc17 	ldw	r2,-16(fp)
 181d850:	10c00b17 	ldw	r3,44(r2)
 181d854:	e0bffc17 	ldw	r2,-16(fp)
 181d858:	10800c8b 	ldhu	r2,50(r2)
 181d85c:	10bfffcc 	andi	r2,r2,65535
 181d860:	1887883a 	add	r3,r3,r2
 181d864:	e0bffc17 	ldw	r2,-16(fp)
 181d868:	10c00d15 	stw	r3,52(r2)
  }
  return p;
 181d86c:	e0bffa17 	ldw	r2,-24(fp)
}
 181d870:	e037883a 	mov	sp,fp
 181d874:	dfc00117 	ldw	ra,4(sp)
 181d878:	df000017 	ldw	fp,0(sp)
 181d87c:	dec00204 	addi	sp,sp,8
 181d880:	f800283a 	ret

0181d884 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 181d884:	defffc04 	addi	sp,sp,-16
 181d888:	dfc00315 	stw	ra,12(sp)
 181d88c:	df000215 	stw	fp,8(sp)
 181d890:	df000204 	addi	fp,sp,8
 181d894:	e13fff15 	stw	r4,-4(fp)
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 181d898:	e0bfff17 	ldw	r2,-4(fp)
 181d89c:	10801c17 	ldw	r2,112(r2)
 181d8a0:	10004226 	beq	r2,zero,181d9ac <tcp_send_fin+0x128>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 181d8a4:	e0bfff17 	ldw	r2,-4(fp)
 181d8a8:	10801c17 	ldw	r2,112(r2)
 181d8ac:	e0bffe15 	stw	r2,-8(fp)
 181d8b0:	00000306 	br	181d8c0 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 181d8b4:	e0bffe17 	ldw	r2,-8(fp)
 181d8b8:	10800017 	ldw	r2,0(r2)
 181d8bc:	e0bffe15 	stw	r2,-8(fp)
tcp_send_fin(struct tcp_pcb *pcb)
{
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 181d8c0:	e0bffe17 	ldw	r2,-8(fp)
 181d8c4:	10800017 	ldw	r2,0(r2)
 181d8c8:	103ffa1e 	bne	r2,zero,181d8b4 <__ram_exceptions_end+0xff80d5c4>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 181d8cc:	e0bffe17 	ldw	r2,-8(fp)
 181d8d0:	10800417 	ldw	r2,16(r2)
 181d8d4:	10c00303 	ldbu	r3,12(r2)
 181d8d8:	10800343 	ldbu	r2,13(r2)
 181d8dc:	1004923a 	slli	r2,r2,8
 181d8e0:	10c4b03a 	or	r2,r2,r3
 181d8e4:	10bfffcc 	andi	r2,r2,65535
 181d8e8:	1004d23a 	srli	r2,r2,8
 181d8ec:	10ffffcc 	andi	r3,r2,65535
 181d8f0:	e0bffe17 	ldw	r2,-8(fp)
 181d8f4:	10800417 	ldw	r2,16(r2)
 181d8f8:	11000303 	ldbu	r4,12(r2)
 181d8fc:	10800343 	ldbu	r2,13(r2)
 181d900:	1004923a 	slli	r2,r2,8
 181d904:	1104b03a 	or	r2,r2,r4
 181d908:	10bfffcc 	andi	r2,r2,65535
 181d90c:	1004923a 	slli	r2,r2,8
 181d910:	10bfffcc 	andi	r2,r2,65535
 181d914:	1884b03a 	or	r2,r3,r2
 181d918:	108001cc 	andi	r2,r2,7
 181d91c:	1000231e 	bne	r2,zero,181d9ac <tcp_send_fin+0x128>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 181d920:	e0bffe17 	ldw	r2,-8(fp)
 181d924:	10800417 	ldw	r2,16(r2)
 181d928:	e0fffe17 	ldw	r3,-8(fp)
 181d92c:	18c00417 	ldw	r3,16(r3)
 181d930:	19000303 	ldbu	r4,12(r3)
 181d934:	18c00343 	ldbu	r3,13(r3)
 181d938:	1806923a 	slli	r3,r3,8
 181d93c:	1906b03a 	or	r3,r3,r4
 181d940:	18c04014 	ori	r3,r3,256
 181d944:	180d883a 	mov	r6,r3
 181d948:	30ffffcc 	andi	r3,r6,65535
 181d94c:	19403fcc 	andi	r5,r3,255
 181d950:	10c00303 	ldbu	r3,12(r2)
 181d954:	1806703a 	and	r3,r3,zero
 181d958:	1809883a 	mov	r4,r3
 181d95c:	2807883a 	mov	r3,r5
 181d960:	20c6b03a 	or	r3,r4,r3
 181d964:	10c00305 	stb	r3,12(r2)
 181d968:	30ffffcc 	andi	r3,r6,65535
 181d96c:	1806d23a 	srli	r3,r3,8
 181d970:	197fffcc 	andi	r5,r3,65535
 181d974:	10c00343 	ldbu	r3,13(r2)
 181d978:	1806703a 	and	r3,r3,zero
 181d97c:	1809883a 	mov	r4,r3
 181d980:	2807883a 	mov	r3,r5
 181d984:	20c6b03a 	or	r3,r4,r3
 181d988:	10c00345 	stb	r3,13(r2)
      pcb->flags |= TF_FIN;
 181d98c:	e0bfff17 	ldw	r2,-4(fp)
 181d990:	10800883 	ldbu	r2,34(r2)
 181d994:	10800814 	ori	r2,r2,32
 181d998:	1007883a 	mov	r3,r2
 181d99c:	e0bfff17 	ldw	r2,-4(fp)
 181d9a0:	10c00885 	stb	r3,34(r2)
      return ERR_OK;
 181d9a4:	0005883a 	mov	r2,zero
 181d9a8:	00000306 	br	181d9b8 <tcp_send_fin+0x134>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 181d9ac:	01400044 	movi	r5,1
 181d9b0:	e13fff17 	ldw	r4,-4(fp)
 181d9b4:	181e9a80 	call	181e9a8 <tcp_enqueue_flags>
}
 181d9b8:	e037883a 	mov	sp,fp
 181d9bc:	dfc00117 	ldw	ra,4(sp)
 181d9c0:	df000017 	ldw	fp,0(sp)
 181d9c4:	dec00204 	addi	sp,sp,8
 181d9c8:	f800283a 	ret

0181d9cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 181d9cc:	defff704 	addi	sp,sp,-36
 181d9d0:	dfc00815 	stw	ra,32(sp)
 181d9d4:	df000715 	stw	fp,28(sp)
 181d9d8:	df000704 	addi	fp,sp,28
 181d9dc:	e13ffb15 	stw	r4,-20(fp)
 181d9e0:	e17ffc15 	stw	r5,-16(fp)
 181d9e4:	3007883a 	mov	r3,r6
 181d9e8:	e1fffe15 	stw	r7,-8(fp)
 181d9ec:	e0800217 	ldw	r2,8(fp)
 181d9f0:	e0fffd05 	stb	r3,-12(fp)
 181d9f4:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 181d9f8:	e0bfff03 	ldbu	r2,-4(fp)
 181d9fc:	1080004c 	andi	r2,r2,1
 181da00:	10000226 	beq	r2,zero,181da0c <tcp_create_segment+0x40>
 181da04:	00c00104 	movi	r3,4
 181da08:	00000106 	br	181da10 <tcp_create_segment+0x44>
 181da0c:	0007883a 	mov	r3,zero
 181da10:	e0bfff03 	ldbu	r2,-4(fp)
 181da14:	1080008c 	andi	r2,r2,2
 181da18:	10000226 	beq	r2,zero,181da24 <tcp_create_segment+0x58>
 181da1c:	00800304 	movi	r2,12
 181da20:	00000106 	br	181da28 <tcp_create_segment+0x5c>
 181da24:	0005883a 	mov	r2,zero
 181da28:	1885883a 	add	r2,r3,r2
 181da2c:	e0bff905 	stb	r2,-28(fp)

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 181da30:	00806134 	movhi	r2,388
 181da34:	108bcc84 	addi	r2,r2,12082
 181da38:	1080020b 	ldhu	r2,8(r2)
 181da3c:	10bfffcc 	andi	r2,r2,65535
 181da40:	1009883a 	mov	r4,r2
 181da44:	183c5000 	call	183c500 <malloc>
 181da48:	e0bffa15 	stw	r2,-24(fp)
 181da4c:	e0bffa17 	ldw	r2,-24(fp)
 181da50:	1000041e 	bne	r2,zero,181da64 <tcp_create_segment+0x98>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 181da54:	e13ffc17 	ldw	r4,-16(fp)
 181da58:	181a22c0 	call	181a22c <pbuf_free>
    return NULL;
 181da5c:	0005883a 	mov	r2,zero
 181da60:	0000c106 	br	181dd68 <tcp_create_segment+0x39c>
  }
  seg->flags = optflags;
 181da64:	e0bffa17 	ldw	r2,-24(fp)
 181da68:	e0ffff03 	ldbu	r3,-4(fp)
 181da6c:	10c00345 	stb	r3,13(r2)
  seg->next = NULL;
 181da70:	e0bffa17 	ldw	r2,-24(fp)
 181da74:	10000015 	stw	zero,0(r2)
  seg->p = p;
 181da78:	e0bffa17 	ldw	r2,-24(fp)
 181da7c:	e0fffc17 	ldw	r3,-16(fp)
 181da80:	10c00115 	stw	r3,4(r2)
  seg->len = p->tot_len - optlen;
 181da84:	e0bffc17 	ldw	r2,-16(fp)
 181da88:	10c0020b 	ldhu	r3,8(r2)
 181da8c:	e0bff903 	ldbu	r2,-28(fp)
 181da90:	1885c83a 	sub	r2,r3,r2
 181da94:	1007883a 	mov	r3,r2
 181da98:	e0bffa17 	ldw	r2,-24(fp)
 181da9c:	10c0020d 	sth	r3,8(r2)
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
#if TCP_CHECKSUM_ON_COPY
  seg->chksum = 0;
 181daa0:	e0bffa17 	ldw	r2,-24(fp)
 181daa4:	1000028d 	sth	zero,10(r2)
  seg->chksum_swapped = 0;
 181daa8:	e0bffa17 	ldw	r2,-24(fp)
 181daac:	10000305 	stb	zero,12(r2)
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 181dab0:	01400504 	movi	r5,20
 181dab4:	e13ffc17 	ldw	r4,-16(fp)
 181dab8:	181a07c0 	call	181a07c <pbuf_header>
 181dabc:	10803fcc 	andi	r2,r2,255
 181dac0:	10000b26 	beq	r2,zero,181daf0 <tcp_create_segment+0x124>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 181dac4:	00806134 	movhi	r2,388
 181dac8:	109e7504 	addi	r2,r2,31188
 181dacc:	10805217 	ldw	r2,328(r2)
 181dad0:	10c00044 	addi	r3,r2,1
 181dad4:	00806134 	movhi	r2,388
 181dad8:	109e7504 	addi	r2,r2,31188
 181dadc:	10c05215 	stw	r3,328(r2)
    tcp_seg_free(seg);
 181dae0:	e13ffa17 	ldw	r4,-24(fp)
 181dae4:	181cad80 	call	181cad8 <tcp_seg_free>
    return NULL;
 181dae8:	0005883a 	mov	r2,zero
 181daec:	00009e06 	br	181dd68 <tcp_create_segment+0x39c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 181daf0:	e0bffa17 	ldw	r2,-24(fp)
 181daf4:	10800117 	ldw	r2,4(r2)
 181daf8:	10c00117 	ldw	r3,4(r2)
 181dafc:	e0bffa17 	ldw	r2,-24(fp)
 181db00:	10c00415 	stw	r3,16(r2)
  seg->tcphdr->src = htons(pcb->local_port);
 181db04:	e0bffa17 	ldw	r2,-24(fp)
 181db08:	10800417 	ldw	r2,16(r2)
 181db0c:	e0fffb17 	ldw	r3,-20(fp)
 181db10:	18c0078b 	ldhu	r3,30(r3)
 181db14:	18ffffcc 	andi	r3,r3,65535
 181db18:	1806d23a 	srli	r3,r3,8
 181db1c:	1809883a 	mov	r4,r3
 181db20:	e0fffb17 	ldw	r3,-20(fp)
 181db24:	18c0078b 	ldhu	r3,30(r3)
 181db28:	18ffffcc 	andi	r3,r3,65535
 181db2c:	1806923a 	slli	r3,r3,8
 181db30:	20c6b03a 	or	r3,r4,r3
 181db34:	180d883a 	mov	r6,r3
 181db38:	30ffffcc 	andi	r3,r6,65535
 181db3c:	19403fcc 	andi	r5,r3,255
 181db40:	10c00003 	ldbu	r3,0(r2)
 181db44:	1806703a 	and	r3,r3,zero
 181db48:	1809883a 	mov	r4,r3
 181db4c:	2807883a 	mov	r3,r5
 181db50:	20c6b03a 	or	r3,r4,r3
 181db54:	10c00005 	stb	r3,0(r2)
 181db58:	30ffffcc 	andi	r3,r6,65535
 181db5c:	1806d23a 	srli	r3,r3,8
 181db60:	197fffcc 	andi	r5,r3,65535
 181db64:	10c00043 	ldbu	r3,1(r2)
 181db68:	1806703a 	and	r3,r3,zero
 181db6c:	1809883a 	mov	r4,r3
 181db70:	2807883a 	mov	r3,r5
 181db74:	20c6b03a 	or	r3,r4,r3
 181db78:	10c00045 	stb	r3,1(r2)
  seg->tcphdr->dest = htons(pcb->remote_port);
 181db7c:	e0bffa17 	ldw	r2,-24(fp)
 181db80:	10800417 	ldw	r2,16(r2)
 181db84:	e0fffb17 	ldw	r3,-20(fp)
 181db88:	18c0080b 	ldhu	r3,32(r3)
 181db8c:	18ffffcc 	andi	r3,r3,65535
 181db90:	1806d23a 	srli	r3,r3,8
 181db94:	1809883a 	mov	r4,r3
 181db98:	e0fffb17 	ldw	r3,-20(fp)
 181db9c:	18c0080b 	ldhu	r3,32(r3)
 181dba0:	18ffffcc 	andi	r3,r3,65535
 181dba4:	1806923a 	slli	r3,r3,8
 181dba8:	20c6b03a 	or	r3,r4,r3
 181dbac:	180d883a 	mov	r6,r3
 181dbb0:	30ffffcc 	andi	r3,r6,65535
 181dbb4:	19403fcc 	andi	r5,r3,255
 181dbb8:	10c00083 	ldbu	r3,2(r2)
 181dbbc:	1806703a 	and	r3,r3,zero
 181dbc0:	1809883a 	mov	r4,r3
 181dbc4:	2807883a 	mov	r3,r5
 181dbc8:	20c6b03a 	or	r3,r4,r3
 181dbcc:	10c00085 	stb	r3,2(r2)
 181dbd0:	30ffffcc 	andi	r3,r6,65535
 181dbd4:	1806d23a 	srli	r3,r3,8
 181dbd8:	197fffcc 	andi	r5,r3,65535
 181dbdc:	10c000c3 	ldbu	r3,3(r2)
 181dbe0:	1806703a 	and	r3,r3,zero
 181dbe4:	1809883a 	mov	r4,r3
 181dbe8:	2807883a 	mov	r3,r5
 181dbec:	20c6b03a 	or	r3,r4,r3
 181dbf0:	10c000c5 	stb	r3,3(r2)
  seg->tcphdr->seqno = htonl(seqno);
 181dbf4:	e0bffa17 	ldw	r2,-24(fp)
 181dbf8:	10800417 	ldw	r2,16(r2)
 181dbfc:	e0fffe17 	ldw	r3,-8(fp)
 181dc00:	1808d63a 	srli	r4,r3,24
 181dc04:	e0fffe17 	ldw	r3,-8(fp)
 181dc08:	1806d23a 	srli	r3,r3,8
 181dc0c:	18ffc00c 	andi	r3,r3,65280
 181dc10:	20c8b03a 	or	r4,r4,r3
 181dc14:	e0fffe17 	ldw	r3,-8(fp)
 181dc18:	18ffc00c 	andi	r3,r3,65280
 181dc1c:	1806923a 	slli	r3,r3,8
 181dc20:	20c8b03a 	or	r4,r4,r3
 181dc24:	e0fffe17 	ldw	r3,-8(fp)
 181dc28:	1806963a 	slli	r3,r3,24
 181dc2c:	20c6b03a 	or	r3,r4,r3
 181dc30:	19803fcc 	andi	r6,r3,255
 181dc34:	11000103 	ldbu	r4,4(r2)
 181dc38:	2008703a 	and	r4,r4,zero
 181dc3c:	200b883a 	mov	r5,r4
 181dc40:	3009883a 	mov	r4,r6
 181dc44:	2908b03a 	or	r4,r5,r4
 181dc48:	11000105 	stb	r4,4(r2)
 181dc4c:	1808d23a 	srli	r4,r3,8
 181dc50:	21803fcc 	andi	r6,r4,255
 181dc54:	11000143 	ldbu	r4,5(r2)
 181dc58:	2008703a 	and	r4,r4,zero
 181dc5c:	200b883a 	mov	r5,r4
 181dc60:	3009883a 	mov	r4,r6
 181dc64:	2908b03a 	or	r4,r5,r4
 181dc68:	11000145 	stb	r4,5(r2)
 181dc6c:	1808d43a 	srli	r4,r3,16
 181dc70:	21803fcc 	andi	r6,r4,255
 181dc74:	11000183 	ldbu	r4,6(r2)
 181dc78:	2008703a 	and	r4,r4,zero
 181dc7c:	200b883a 	mov	r5,r4
 181dc80:	3009883a 	mov	r4,r6
 181dc84:	2908b03a 	or	r4,r5,r4
 181dc88:	11000185 	stb	r4,6(r2)
 181dc8c:	180ad63a 	srli	r5,r3,24
 181dc90:	10c001c3 	ldbu	r3,7(r2)
 181dc94:	1806703a 	and	r3,r3,zero
 181dc98:	1809883a 	mov	r4,r3
 181dc9c:	2807883a 	mov	r3,r5
 181dca0:	20c6b03a 	or	r3,r4,r3
 181dca4:	10c001c5 	stb	r3,7(r2)
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 181dca8:	e0bffa17 	ldw	r2,-24(fp)
 181dcac:	10800417 	ldw	r2,16(r2)
 181dcb0:	e0fff903 	ldbu	r3,-28(fp)
 181dcb4:	1806d0ba 	srli	r3,r3,2
 181dcb8:	18c03fcc 	andi	r3,r3,255
 181dcbc:	18c00144 	addi	r3,r3,5
 181dcc0:	1808933a 	slli	r4,r3,12
 181dcc4:	e0fffd03 	ldbu	r3,-12(fp)
 181dcc8:	20c6b03a 	or	r3,r4,r3
 181dccc:	18ffc00c 	andi	r3,r3,65280
 181dcd0:	1807d23a 	srai	r3,r3,8
 181dcd4:	180b883a 	mov	r5,r3
 181dcd8:	e0fff903 	ldbu	r3,-28(fp)
 181dcdc:	1806d0ba 	srli	r3,r3,2
 181dce0:	18c03fcc 	andi	r3,r3,255
 181dce4:	18c00144 	addi	r3,r3,5
 181dce8:	1808933a 	slli	r4,r3,12
 181dcec:	e0fffd03 	ldbu	r3,-12(fp)
 181dcf0:	20c6b03a 	or	r3,r4,r3
 181dcf4:	1806923a 	slli	r3,r3,8
 181dcf8:	28c6b03a 	or	r3,r5,r3
 181dcfc:	180d883a 	mov	r6,r3
 181dd00:	30ffffcc 	andi	r3,r6,65535
 181dd04:	19403fcc 	andi	r5,r3,255
 181dd08:	10c00303 	ldbu	r3,12(r2)
 181dd0c:	1806703a 	and	r3,r3,zero
 181dd10:	1809883a 	mov	r4,r3
 181dd14:	2807883a 	mov	r3,r5
 181dd18:	20c6b03a 	or	r3,r4,r3
 181dd1c:	10c00305 	stb	r3,12(r2)
 181dd20:	30ffffcc 	andi	r3,r6,65535
 181dd24:	1806d23a 	srli	r3,r3,8
 181dd28:	197fffcc 	andi	r5,r3,65535
 181dd2c:	10c00343 	ldbu	r3,13(r2)
 181dd30:	1806703a 	and	r3,r3,zero
 181dd34:	1809883a 	mov	r4,r3
 181dd38:	2807883a 	mov	r3,r5
 181dd3c:	20c6b03a 	or	r3,r4,r3
 181dd40:	10c00345 	stb	r3,13(r2)
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 181dd44:	e0bffa17 	ldw	r2,-24(fp)
 181dd48:	10800417 	ldw	r2,16(r2)
 181dd4c:	10c00483 	ldbu	r3,18(r2)
 181dd50:	1806703a 	and	r3,r3,zero
 181dd54:	10c00485 	stb	r3,18(r2)
 181dd58:	10c004c3 	ldbu	r3,19(r2)
 181dd5c:	1806703a 	and	r3,r3,zero
 181dd60:	10c004c5 	stb	r3,19(r2)
  return seg;
 181dd64:	e0bffa17 	ldw	r2,-24(fp)
} 
 181dd68:	e037883a 	mov	sp,fp
 181dd6c:	dfc00117 	ldw	ra,4(sp)
 181dd70:	df000017 	ldw	fp,0(sp)
 181dd74:	dec00204 	addi	sp,sp,8
 181dd78:	f800283a 	ret

0181dd7c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 181dd7c:	defff604 	addi	sp,sp,-40
 181dd80:	dfc00915 	stw	ra,36(sp)
 181dd84:	df000815 	stw	fp,32(sp)
 181dd88:	df000804 	addi	fp,sp,32
 181dd8c:	e13ffa15 	stw	r4,-24(fp)
 181dd90:	3009883a 	mov	r4,r6
 181dd94:	e1fffd15 	stw	r7,-12(fp)
 181dd98:	e0c00317 	ldw	r3,12(fp)
 181dd9c:	e0800417 	ldw	r2,16(fp)
 181dda0:	e17ffb0d 	sth	r5,-20(fp)
 181dda4:	e13ffc0d 	sth	r4,-16(fp)
 181dda8:	e0fffe05 	stb	r3,-8(fp)
 181ddac:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *p;
  u16_t alloc = length;
 181ddb0:	e0bffb0b 	ldhu	r2,-20(fp)
 181ddb4:	e0bff80d 	sth	r2,-32(fp)
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 181ddb8:	e0fffb0b 	ldhu	r3,-20(fp)
 181ddbc:	e0bffc0b 	ldhu	r2,-16(fp)
 181ddc0:	1880182e 	bgeu	r3,r2,181de24 <tcp_pbuf_prealloc+0xa8>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 181ddc4:	e0bffe03 	ldbu	r2,-8(fp)
 181ddc8:	1080008c 	andi	r2,r2,2
 181ddcc:	10000d1e 	bne	r2,zero,181de04 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 181ddd0:	e0800217 	ldw	r2,8(fp)
 181ddd4:	10800883 	ldbu	r2,34(r2)
 181ddd8:	10803fcc 	andi	r2,r2,255
 181dddc:	1080100c 	andi	r2,r2,64
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 181dde0:	1000101e 	bne	r2,zero,181de24 <tcp_pbuf_prealloc+0xa8>
        (!(pcb->flags & TF_NODELAY) &&
 181dde4:	e0bfff03 	ldbu	r2,-4(fp)
 181dde8:	10000626 	beq	r2,zero,181de04 <tcp_pbuf_prealloc+0x88>
         (!first_seg ||
          pcb->unsent != NULL ||
 181ddec:	e0800217 	ldw	r2,8(fp)
 181ddf0:	10801c17 	ldw	r2,112(r2)
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
 181ddf4:	1000031e 	bne	r2,zero,181de04 <tcp_pbuf_prealloc+0x88>
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
 181ddf8:	e0800217 	ldw	r2,8(fp)
 181ddfc:	10801d17 	ldw	r2,116(r2)
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
 181de00:	10000826 	beq	r2,zero,181de24 <tcp_pbuf_prealloc+0xa8>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
 181de04:	e0bffb0b 	ldhu	r2,-20(fp)
 181de08:	10c16dc4 	addi	r3,r2,1463
 181de0c:	00bfff04 	movi	r2,-4
 181de10:	1884703a 	and	r2,r3,r2
 181de14:	e0fffc0b 	ldhu	r3,-16(fp)
 181de18:	1880010e 	bge	r3,r2,181de20 <tcp_pbuf_prealloc+0xa4>
 181de1c:	1805883a 	mov	r2,r3
 181de20:	e0bff80d 	sth	r2,-32(fp)
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 181de24:	e0bff80b 	ldhu	r2,-32(fp)
 181de28:	000d883a 	mov	r6,zero
 181de2c:	100b883a 	mov	r5,r2
 181de30:	e13ffa17 	ldw	r4,-24(fp)
 181de34:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181de38:	e0bff915 	stw	r2,-28(fp)
  if (p == NULL) {
 181de3c:	e0bff917 	ldw	r2,-28(fp)
 181de40:	1000021e 	bne	r2,zero,181de4c <tcp_pbuf_prealloc+0xd0>
    return NULL;
 181de44:	0005883a 	mov	r2,zero
 181de48:	00000f06 	br	181de88 <tcp_pbuf_prealloc+0x10c>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 181de4c:	e0bff917 	ldw	r2,-28(fp)
 181de50:	10c0028b 	ldhu	r3,10(r2)
 181de54:	e0bffb0b 	ldhu	r2,-20(fp)
 181de58:	1885c83a 	sub	r2,r3,r2
 181de5c:	1007883a 	mov	r3,r2
 181de60:	e0bffd17 	ldw	r2,-12(fp)
 181de64:	10c0000d 	sth	r3,0(r2)
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 181de68:	e0bff917 	ldw	r2,-28(fp)
 181de6c:	e0fffb0b 	ldhu	r3,-20(fp)
 181de70:	10c0020d 	sth	r3,8(r2)
 181de74:	e0bff917 	ldw	r2,-28(fp)
 181de78:	10c0020b 	ldhu	r3,8(r2)
 181de7c:	e0bff917 	ldw	r2,-28(fp)
 181de80:	10c0028d 	sth	r3,10(r2)
  return p;
 181de84:	e0bff917 	ldw	r2,-28(fp)
}
 181de88:	e037883a 	mov	sp,fp
 181de8c:	dfc00117 	ldw	ra,4(sp)
 181de90:	df000017 	ldw	fp,0(sp)
 181de94:	dec00204 	addi	sp,sp,8
 181de98:	f800283a 	ret

0181de9c <tcp_seg_add_chksum>:
#if TCP_CHECKSUM_ON_COPY
/** Add a checksum of newly added data to the segment */
static void
tcp_seg_add_chksum(u16_t chksum, u16_t len, u16_t *seg_chksum,
                   u8_t *seg_chksum_swapped)
{
 181de9c:	defffa04 	addi	sp,sp,-24
 181dea0:	df000515 	stw	fp,20(sp)
 181dea4:	df000504 	addi	fp,sp,20
 181dea8:	2007883a 	mov	r3,r4
 181deac:	2805883a 	mov	r2,r5
 181deb0:	e1bffe15 	stw	r6,-8(fp)
 181deb4:	e1ffff15 	stw	r7,-4(fp)
 181deb8:	e0fffc0d 	sth	r3,-16(fp)
 181debc:	e0bffd0d 	sth	r2,-12(fp)
  u32_t helper;
  /* add chksum to old chksum and fold to u16_t */
  helper = chksum + *seg_chksum;
 181dec0:	e0fffc0b 	ldhu	r3,-16(fp)
 181dec4:	e0bffe17 	ldw	r2,-8(fp)
 181dec8:	1080000b 	ldhu	r2,0(r2)
 181decc:	10bfffcc 	andi	r2,r2,65535
 181ded0:	1885883a 	add	r2,r3,r2
 181ded4:	e0bffb15 	stw	r2,-20(fp)
  chksum = FOLD_U32T(helper);
 181ded8:	e0bffb17 	ldw	r2,-20(fp)
 181dedc:	1004d43a 	srli	r2,r2,16
 181dee0:	1007883a 	mov	r3,r2
 181dee4:	e0bffb17 	ldw	r2,-20(fp)
 181dee8:	1885883a 	add	r2,r3,r2
 181deec:	e0bffc0d 	sth	r2,-16(fp)
  if ((len & 1) != 0) {
 181def0:	e0bffd0b 	ldhu	r2,-12(fp)
 181def4:	1080004c 	andi	r2,r2,1
 181def8:	10000e26 	beq	r2,zero,181df34 <tcp_seg_add_chksum+0x98>
    *seg_chksum_swapped = 1 - *seg_chksum_swapped;
 181defc:	e0bfff17 	ldw	r2,-4(fp)
 181df00:	10800003 	ldbu	r2,0(r2)
 181df04:	00c00044 	movi	r3,1
 181df08:	1885c83a 	sub	r2,r3,r2
 181df0c:	1007883a 	mov	r3,r2
 181df10:	e0bfff17 	ldw	r2,-4(fp)
 181df14:	10c00005 	stb	r3,0(r2)
    chksum = SWAP_BYTES_IN_WORD(chksum);
 181df18:	e0bffc0b 	ldhu	r2,-16(fp)
 181df1c:	1004d23a 	srli	r2,r2,8
 181df20:	1007883a 	mov	r3,r2
 181df24:	e0bffc0b 	ldhu	r2,-16(fp)
 181df28:	1004923a 	slli	r2,r2,8
 181df2c:	1884b03a 	or	r2,r3,r2
 181df30:	e0bffc0d 	sth	r2,-16(fp)
  }
  *seg_chksum = chksum;
 181df34:	e0bffe17 	ldw	r2,-8(fp)
 181df38:	e0fffc0b 	ldhu	r3,-16(fp)
 181df3c:	10c0000d 	sth	r3,0(r2)
}
 181df40:	0001883a 	nop
 181df44:	e037883a 	mov	sp,fp
 181df48:	df000017 	ldw	fp,0(sp)
 181df4c:	dec00104 	addi	sp,sp,4
 181df50:	f800283a 	ret

0181df54 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 181df54:	defffd04 	addi	sp,sp,-12
 181df58:	df000215 	stw	fp,8(sp)
 181df5c:	df000204 	addi	fp,sp,8
 181df60:	e13ffe15 	stw	r4,-8(fp)
 181df64:	2805883a 	mov	r2,r5
 181df68:	e0bfff0d 	sth	r2,-4(fp)
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 181df6c:	e0bffe17 	ldw	r2,-8(fp)
 181df70:	10800617 	ldw	r2,24(r2)
 181df74:	10800120 	cmpeqi	r2,r2,4
 181df78:	10000e1e 	bne	r2,zero,181dfb4 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
 181df7c:	e0bffe17 	ldw	r2,-8(fp)
 181df80:	10800617 	ldw	r2,24(r2)
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 181df84:	108001e0 	cmpeqi	r2,r2,7
 181df88:	10000a1e 	bne	r2,zero,181dfb4 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
 181df8c:	e0bffe17 	ldw	r2,-8(fp)
 181df90:	10800617 	ldw	r2,24(r2)
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
 181df94:	108000a0 	cmpeqi	r2,r2,2
 181df98:	1000061e 	bne	r2,zero,181dfb4 <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
 181df9c:	e0bffe17 	ldw	r2,-8(fp)
 181dfa0:	10800617 	ldw	r2,24(r2)
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
 181dfa4:	108000e0 	cmpeqi	r2,r2,3
 181dfa8:	1000021e 	bne	r2,zero,181dfb4 <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 181dfac:	00bffcc4 	movi	r2,-13
 181dfb0:	00002d06 	br	181e068 <tcp_write_checks+0x114>
  } else if (len == 0) {
 181dfb4:	e0bfff0b 	ldhu	r2,-4(fp)
 181dfb8:	1000021e 	bne	r2,zero,181dfc4 <tcp_write_checks+0x70>
    return ERR_OK;
 181dfbc:	0005883a 	mov	r2,zero
 181dfc0:	00002906 	br	181e068 <tcp_write_checks+0x114>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 181dfc4:	e0bffe17 	ldw	r2,-8(fp)
 181dfc8:	10801a8b 	ldhu	r2,106(r2)
 181dfcc:	10ffffcc 	andi	r3,r2,65535
 181dfd0:	e0bfff0b 	ldhu	r2,-4(fp)
 181dfd4:	1880092e 	bgeu	r3,r2,181dffc <tcp_write_checks+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 181dfd8:	e0bffe17 	ldw	r2,-8(fp)
 181dfdc:	10c00883 	ldbu	r3,34(r2)
 181dfe0:	00bfe004 	movi	r2,-128
 181dfe4:	1884b03a 	or	r2,r3,r2
 181dfe8:	1007883a 	mov	r3,r2
 181dfec:	e0bffe17 	ldw	r2,-8(fp)
 181dff0:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
 181dff4:	00bfffc4 	movi	r2,-1
 181dff8:	00001b06 	br	181e068 <tcp_write_checks+0x114>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 181dffc:	e0bffe17 	ldw	r2,-8(fp)
 181e000:	10801b0b 	ldhu	r2,108(r2)
 181e004:	10bfffcc 	andi	r2,r2,65535
 181e008:	10800228 	cmpgeui	r2,r2,8
 181e00c:	1000051e 	bne	r2,zero,181e024 <tcp_write_checks+0xd0>
 181e010:	e0bffe17 	ldw	r2,-8(fp)
 181e014:	10801b0b 	ldhu	r2,108(r2)
 181e018:	10bfffcc 	andi	r2,r2,65535
 181e01c:	10bfff70 	cmpltui	r2,r2,65533
 181e020:	1000101e 	bne	r2,zero,181e064 <tcp_write_checks+0x110>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 181e024:	00806134 	movhi	r2,388
 181e028:	109e7504 	addi	r2,r2,31188
 181e02c:	10804e17 	ldw	r2,312(r2)
 181e030:	10c00044 	addi	r3,r2,1
 181e034:	00806134 	movhi	r2,388
 181e038:	109e7504 	addi	r2,r2,31188
 181e03c:	10c04e15 	stw	r3,312(r2)
    pcb->flags |= TF_NAGLEMEMERR;
 181e040:	e0bffe17 	ldw	r2,-8(fp)
 181e044:	10c00883 	ldbu	r3,34(r2)
 181e048:	00bfe004 	movi	r2,-128
 181e04c:	1884b03a 	or	r2,r3,r2
 181e050:	1007883a 	mov	r3,r2
 181e054:	e0bffe17 	ldw	r2,-8(fp)
 181e058:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
 181e05c:	00bfffc4 	movi	r2,-1
 181e060:	00000106 	br	181e068 <tcp_write_checks+0x114>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 181e064:	0005883a 	mov	r2,zero
}
 181e068:	e037883a 	mov	sp,fp
 181e06c:	df000017 	ldw	fp,0(sp)
 181e070:	dec00104 	addi	sp,sp,4
 181e074:	f800283a 	ret

0181e078 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 181e078:	deffe504 	addi	sp,sp,-108
 181e07c:	dfc01a15 	stw	ra,104(sp)
 181e080:	df001915 	stw	fp,100(sp)
 181e084:	df001904 	addi	fp,sp,100
 181e088:	e13ffc15 	stw	r4,-16(fp)
 181e08c:	e17ffd15 	stw	r5,-12(fp)
 181e090:	3007883a 	mov	r3,r6
 181e094:	3805883a 	mov	r2,r7
 181e098:	e0fffe0d 	sth	r3,-8(fp)
 181e09c:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *concat_p = NULL;
 181e0a0:	e03fea15 	stw	zero,-88(fp)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 181e0a4:	e03feb15 	stw	zero,-84(fp)
 181e0a8:	e03fec15 	stw	zero,-80(fp)
 181e0ac:	e03fed15 	stw	zero,-76(fp)
 181e0b0:	e03fee15 	stw	zero,-72(fp)
  u16_t pos = 0; /* position in 'arg' data */
 181e0b4:	e03fef0d 	sth	zero,-68(fp)
  u16_t queuelen;
  u8_t optlen = 0;
 181e0b8:	e03ff405 	stb	zero,-48(fp)
  u8_t optflags = 0;
 181e0bc:	e03ff445 	stb	zero,-47(fp)
#if TCP_OVERSIZE
  u16_t oversize = 0;
 181e0c0:	e03ff90d 	sth	zero,-28(fp)
  u16_t oversize_used = 0;
 181e0c4:	e03ff00d 	sth	zero,-64(fp)
#endif /* TCP_OVERSIZE */
#if TCP_CHECKSUM_ON_COPY
  u16_t concat_chksum = 0;
 181e0c8:	e03ff98d 	sth	zero,-26(fp)
  u8_t concat_chksum_swapped = 0;
 181e0cc:	e03ffa05 	stb	zero,-24(fp)
  u16_t concat_chksummed = 0;
 181e0d0:	e03ff08d 	sth	zero,-62(fp)
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
 181e0d4:	e0bffc17 	ldw	r2,-16(fp)
 181e0d8:	1080198b 	ldhu	r2,102(r2)
 181e0dc:	10bfffcc 	andi	r2,r2,65535
 181e0e0:	1004d07a 	srli	r2,r2,1
 181e0e4:	1007883a 	mov	r3,r2
 181e0e8:	e0bffc17 	ldw	r2,-16(fp)
 181e0ec:	11400e8b 	ldhu	r5,58(r2)
 181e0f0:	1805883a 	mov	r2,r3
 181e0f4:	10ffffcc 	andi	r3,r2,65535
 181e0f8:	293fffcc 	andi	r4,r5,65535
 181e0fc:	20c0012e 	bgeu	r4,r3,181e104 <tcp_write+0x8c>
 181e100:	2805883a 	mov	r2,r5
 181e104:	e0bff48d 	sth	r2,-46(fp)
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
 181e108:	e0bffd17 	ldw	r2,-12(fp)
 181e10c:	1000091e 	bne	r2,zero,181e134 <tcp_write+0xbc>
 181e110:	01c06134 	movhi	r7,388
 181e114:	39c44604 	addi	r7,r7,4376
 181e118:	01805fc4 	movi	r6,383
 181e11c:	01406134 	movhi	r5,388
 181e120:	29444c04 	addi	r5,r5,4400
 181e124:	01006134 	movhi	r4,388
 181e128:	21045904 	addi	r4,r4,4452
 181e12c:	1800b240 	call	1800b24 <printf>
 181e130:	003fff06 	br	181e130 <__ram_exceptions_end+0xff80de40>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 181e134:	e0bffe0b 	ldhu	r2,-8(fp)
 181e138:	100b883a 	mov	r5,r2
 181e13c:	e13ffc17 	ldw	r4,-16(fp)
 181e140:	181df540 	call	181df54 <tcp_write_checks>
 181e144:	e0bff505 	stb	r2,-44(fp)
  if (err != ERR_OK) {
 181e148:	e0bff507 	ldb	r2,-44(fp)
 181e14c:	10000226 	beq	r2,zero,181e158 <tcp_write+0xe0>
    return err;
 181e150:	e0bff503 	ldbu	r2,-44(fp)
 181e154:	00020f06 	br	181e994 <tcp_write+0x91c>
  }
  queuelen = pcb->snd_queuelen;
 181e158:	e0bffc17 	ldw	r2,-16(fp)
 181e15c:	10801b0b 	ldhu	r2,108(r2)
 181e160:	e0bfef8d 	sth	r2,-66(fp)
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 181e164:	e0bffc17 	ldw	r2,-16(fp)
 181e168:	10801c17 	ldw	r2,112(r2)
 181e16c:	10014326 	beq	r2,zero,181e67c <tcp_write+0x604>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 181e170:	e0bffc17 	ldw	r2,-16(fp)
 181e174:	10801c17 	ldw	r2,112(r2)
 181e178:	e0bfeb15 	stw	r2,-84(fp)
 181e17c:	00000306 	br	181e18c <tcp_write+0x114>
         last_unsent = last_unsent->next);
 181e180:	e0bfeb17 	ldw	r2,-84(fp)
 181e184:	10800017 	ldw	r2,0(r2)
 181e188:	e0bfeb15 	stw	r2,-84(fp)
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 181e18c:	e0bfeb17 	ldw	r2,-84(fp)
 181e190:	10800017 	ldw	r2,0(r2)
 181e194:	103ffa1e 	bne	r2,zero,181e180 <__ram_exceptions_end+0xff80de90>
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 181e198:	e0bfeb17 	ldw	r2,-84(fp)
 181e19c:	10800343 	ldbu	r2,13(r2)
 181e1a0:	10803fcc 	andi	r2,r2,255
 181e1a4:	1080004c 	andi	r2,r2,1
 181e1a8:	10000226 	beq	r2,zero,181e1b4 <tcp_write+0x13c>
 181e1ac:	00c00104 	movi	r3,4
 181e1b0:	00000106 	br	181e1b8 <tcp_write+0x140>
 181e1b4:	0007883a 	mov	r3,zero
 181e1b8:	e0bfeb17 	ldw	r2,-84(fp)
 181e1bc:	10800343 	ldbu	r2,13(r2)
 181e1c0:	10803fcc 	andi	r2,r2,255
 181e1c4:	1080008c 	andi	r2,r2,2
 181e1c8:	10000226 	beq	r2,zero,181e1d4 <tcp_write+0x15c>
 181e1cc:	00800304 	movi	r2,12
 181e1d0:	00000106 	br	181e1d8 <tcp_write+0x160>
 181e1d4:	0005883a 	mov	r2,zero
 181e1d8:	1885883a 	add	r2,r3,r2
 181e1dc:	e0bff58d 	sth	r2,-42(fp)
    space = mss_local - (last_unsent->len + unsent_optlen);
 181e1e0:	e0bfeb17 	ldw	r2,-84(fp)
 181e1e4:	10c0020b 	ldhu	r3,8(r2)
 181e1e8:	e0bff58b 	ldhu	r2,-42(fp)
 181e1ec:	1885883a 	add	r2,r3,r2
 181e1f0:	1007883a 	mov	r3,r2
 181e1f4:	e0bff48b 	ldhu	r2,-46(fp)
 181e1f8:	10c5c83a 	sub	r2,r2,r3
 181e1fc:	e0bff10d 	sth	r2,-60(fp)
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 181e200:	e0bffc17 	ldw	r2,-16(fp)
 181e204:	10801b8b 	ldhu	r2,110(r2)
 181e208:	e0bff90d 	sth	r2,-28(fp)
    if (oversize > 0) {
 181e20c:	e0bff90b 	ldhu	r2,-28(fp)
 181e210:	10bfffcc 	andi	r2,r2,65535
 181e214:	10001526 	beq	r2,zero,181e26c <tcp_write+0x1f4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
 181e218:	e0bfeb17 	ldw	r2,-84(fp)
 181e21c:	e0bfec15 	stw	r2,-80(fp)
      oversize_used = oversize < len ? oversize : len;
 181e220:	e17ff90b 	ldhu	r5,-28(fp)
 181e224:	e0bffe0b 	ldhu	r2,-8(fp)
 181e228:	10ffffcc 	andi	r3,r2,65535
 181e22c:	293fffcc 	andi	r4,r5,65535
 181e230:	20c0012e 	bgeu	r4,r3,181e238 <tcp_write+0x1c0>
 181e234:	2805883a 	mov	r2,r5
 181e238:	e0bff00d 	sth	r2,-64(fp)
      pos += oversize_used;
 181e23c:	e0ffef0b 	ldhu	r3,-68(fp)
 181e240:	e0bff00b 	ldhu	r2,-64(fp)
 181e244:	1885883a 	add	r2,r3,r2
 181e248:	e0bfef0d 	sth	r2,-68(fp)
      oversize -= oversize_used;
 181e24c:	e0fff90b 	ldhu	r3,-28(fp)
 181e250:	e0bff00b 	ldhu	r2,-64(fp)
 181e254:	1885c83a 	sub	r2,r3,r2
 181e258:	e0bff90d 	sth	r2,-28(fp)
      space -= oversize_used;
 181e25c:	e0fff10b 	ldhu	r3,-60(fp)
 181e260:	e0bff00b 	ldhu	r2,-64(fp)
 181e264:	1885c83a 	sub	r2,r3,r2
 181e268:	e0bff10d 	sth	r2,-60(fp)
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 181e26c:	e0ffef0b 	ldhu	r3,-68(fp)
 181e270:	e0bffe0b 	ldhu	r2,-8(fp)
 181e274:	1881012e 	bgeu	r3,r2,181e67c <tcp_write+0x604>
 181e278:	e0bff10b 	ldhu	r2,-60(fp)
 181e27c:	1000ff26 	beq	r2,zero,181e67c <tcp_write+0x604>
 181e280:	e0bfeb17 	ldw	r2,-84(fp)
 181e284:	1080020b 	ldhu	r2,8(r2)
 181e288:	10bfffcc 	andi	r2,r2,65535
 181e28c:	1000fb26 	beq	r2,zero,181e67c <tcp_write+0x604>
      u16_t seglen = space < len - pos ? space : len - pos;
 181e290:	e0fffe0b 	ldhu	r3,-8(fp)
 181e294:	e0bfef0b 	ldhu	r2,-68(fp)
 181e298:	1885c83a 	sub	r2,r3,r2
 181e29c:	e0fff10b 	ldhu	r3,-60(fp)
 181e2a0:	1880010e 	bge	r3,r2,181e2a8 <tcp_write+0x230>
 181e2a4:	1805883a 	mov	r2,r3
 181e2a8:	e0bff60d 	sth	r2,-40(fp)
      seg = last_unsent;
 181e2ac:	e0bfeb17 	ldw	r2,-84(fp)
 181e2b0:	e0bfec15 	stw	r2,-80(fp)

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 181e2b4:	e0bfff03 	ldbu	r2,-4(fp)
 181e2b8:	1080004c 	andi	r2,r2,1
 181e2bc:	10002826 	beq	r2,zero,181e360 <tcp_write+0x2e8>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 181e2c0:	e13ff60b 	ldhu	r4,-40(fp)
 181e2c4:	e17ff10b 	ldhu	r5,-60(fp)
 181e2c8:	e0bfff03 	ldbu	r2,-4(fp)
 181e2cc:	e1bff904 	addi	r6,fp,-28
 181e2d0:	00c00044 	movi	r3,1
 181e2d4:	d8c00215 	stw	r3,8(sp)
 181e2d8:	d8800115 	stw	r2,4(sp)
 181e2dc:	e0bffc17 	ldw	r2,-16(fp)
 181e2e0:	d8800015 	stw	r2,0(sp)
 181e2e4:	300f883a 	mov	r7,r6
 181e2e8:	280d883a 	mov	r6,r5
 181e2ec:	200b883a 	mov	r5,r4
 181e2f0:	010000c4 	movi	r4,3
 181e2f4:	181dd7c0 	call	181dd7c <tcp_pbuf_prealloc>
 181e2f8:	e0bfea15 	stw	r2,-88(fp)
 181e2fc:	e0bfea17 	ldw	r2,-88(fp)
 181e300:	10018426 	beq	r2,zero,181e914 <tcp_write+0x89c>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 181e304:	e0bfea17 	ldw	r2,-88(fp)
 181e308:	11000117 	ldw	r4,4(r2)
 181e30c:	e0bfef0b 	ldhu	r2,-68(fp)
 181e310:	e0fffd17 	ldw	r3,-12(fp)
 181e314:	1885883a 	add	r2,r3,r2
 181e318:	e0fff60b 	ldhu	r3,-40(fp)
 181e31c:	180d883a 	mov	r6,r3
 181e320:	100b883a 	mov	r5,r2
 181e324:	183191c0 	call	183191c <lwip_chksum_copy>
 181e328:	10bfffcc 	andi	r2,r2,65535
 181e32c:	e0fff60b 	ldhu	r3,-40(fp)
 181e330:	e17ffa04 	addi	r5,fp,-24
 181e334:	e13ff984 	addi	r4,fp,-26
 181e338:	280f883a 	mov	r7,r5
 181e33c:	200d883a 	mov	r6,r4
 181e340:	180b883a 	mov	r5,r3
 181e344:	1009883a 	mov	r4,r2
 181e348:	181de9c0 	call	181de9c <tcp_seg_add_chksum>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
 181e34c:	e0fff08b 	ldhu	r3,-62(fp)
 181e350:	e0bff60b 	ldhu	r2,-40(fp)
 181e354:	1885883a 	add	r2,r3,r2
 181e358:	e0bff08d 	sth	r2,-62(fp)
 181e35c:	00002206 	br	181e3e8 <tcp_write+0x370>
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 181e360:	e0bff60b 	ldhu	r2,-40(fp)
 181e364:	01800044 	movi	r6,1
 181e368:	100b883a 	mov	r5,r2
 181e36c:	010000c4 	movi	r4,3
 181e370:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181e374:	e0bfea15 	stw	r2,-88(fp)
 181e378:	e0bfea17 	ldw	r2,-88(fp)
 181e37c:	10016726 	beq	r2,zero,181e91c <tcp_write+0x8a4>
                      ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
          goto memerr;
        }
#if TCP_CHECKSUM_ON_COPY
        /* calculate the checksum of nocopy-data */
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
 181e380:	e0bfef0b 	ldhu	r2,-68(fp)
 181e384:	e0fffd17 	ldw	r3,-12(fp)
 181e388:	1885883a 	add	r2,r3,r2
 181e38c:	e0fff60b 	ldhu	r3,-40(fp)
 181e390:	180b883a 	mov	r5,r3
 181e394:	1009883a 	mov	r4,r2
 181e398:	18317cc0 	call	18317cc <inet_chksum>
 181e39c:	0084303a 	nor	r2,zero,r2
 181e3a0:	10bfffcc 	andi	r2,r2,65535
 181e3a4:	e0fff60b 	ldhu	r3,-40(fp)
 181e3a8:	e17ffa04 	addi	r5,fp,-24
 181e3ac:	e13ff984 	addi	r4,fp,-26
 181e3b0:	280f883a 	mov	r7,r5
 181e3b4:	200d883a 	mov	r6,r4
 181e3b8:	180b883a 	mov	r5,r3
 181e3bc:	1009883a 	mov	r4,r2
 181e3c0:	181de9c0 	call	181de9c <tcp_seg_add_chksum>
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
 181e3c4:	e0fff08b 	ldhu	r3,-62(fp)
 181e3c8:	e0bff60b 	ldhu	r2,-40(fp)
 181e3cc:	1885883a 	add	r2,r3,r2
 181e3d0:	e0bff08d 	sth	r2,-62(fp)
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
 181e3d4:	e0bfef0b 	ldhu	r2,-68(fp)
 181e3d8:	e0fffd17 	ldw	r3,-12(fp)
 181e3dc:	1887883a 	add	r3,r3,r2
 181e3e0:	e0bfea17 	ldw	r2,-88(fp)
 181e3e4:	10c00115 	stw	r3,4(r2)
      }

      pos += seglen;
 181e3e8:	e0ffef0b 	ldhu	r3,-68(fp)
 181e3ec:	e0bff60b 	ldhu	r2,-40(fp)
 181e3f0:	1885883a 	add	r2,r3,r2
 181e3f4:	e0bfef0d 	sth	r2,-68(fp)
      queuelen += pbuf_clen(concat_p);
 181e3f8:	e13fea17 	ldw	r4,-88(fp)
 181e3fc:	181a3680 	call	181a368 <pbuf_clen>
 181e400:	10c03fcc 	andi	r3,r2,255
 181e404:	e0bfef8b 	ldhu	r2,-66(fp)
 181e408:	1885883a 	add	r2,r3,r2
 181e40c:	e0bfef8d 	sth	r2,-66(fp)
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 181e410:	00009a06 	br	181e67c <tcp_write+0x604>
    struct pbuf *p;
    u16_t left = len - pos;
 181e414:	e0fffe0b 	ldhu	r3,-8(fp)
 181e418:	e0bfef0b 	ldhu	r2,-68(fp)
 181e41c:	1885c83a 	sub	r2,r3,r2
 181e420:	e0bff68d 	sth	r2,-38(fp)
    u16_t max_len = mss_local - optlen;
 181e424:	e0bff403 	ldbu	r2,-48(fp)
 181e428:	e0fff48b 	ldhu	r3,-46(fp)
 181e42c:	1885c83a 	sub	r2,r3,r2
 181e430:	e0bff70d 	sth	r2,-36(fp)
    u16_t seglen = left > max_len ? max_len : left;
 181e434:	e17ff70b 	ldhu	r5,-36(fp)
 181e438:	e0bff68b 	ldhu	r2,-38(fp)
 181e43c:	10ffffcc 	andi	r3,r2,65535
 181e440:	293fffcc 	andi	r4,r5,65535
 181e444:	20c0012e 	bgeu	r4,r3,181e44c <tcp_write+0x3d4>
 181e448:	2805883a 	mov	r2,r5
 181e44c:	e0bff78d 	sth	r2,-34(fp)
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
 181e450:	e03ffa8d 	sth	zero,-22(fp)
    u8_t chksum_swapped = 0;
 181e454:	e03ffb05 	stb	zero,-20(fp)
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 181e458:	e0bfff03 	ldbu	r2,-4(fp)
 181e45c:	1080004c 	andi	r2,r2,1
 181e460:	10002b26 	beq	r2,zero,181e510 <tcp_write+0x498>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 181e464:	e0fff403 	ldbu	r3,-48(fp)
 181e468:	e0bff78b 	ldhu	r2,-34(fp)
 181e46c:	1885883a 	add	r2,r3,r2
 181e470:	113fffcc 	andi	r4,r2,65535
 181e474:	e17ff48b 	ldhu	r5,-46(fp)
 181e478:	e0bfff03 	ldbu	r2,-4(fp)
 181e47c:	e0ffee17 	ldw	r3,-72(fp)
 181e480:	1807003a 	cmpeq	r3,r3,zero
 181e484:	18c03fcc 	andi	r3,r3,255
 181e488:	e1bff904 	addi	r6,fp,-28
 181e48c:	d8c00215 	stw	r3,8(sp)
 181e490:	d8800115 	stw	r2,4(sp)
 181e494:	e0bffc17 	ldw	r2,-16(fp)
 181e498:	d8800015 	stw	r2,0(sp)
 181e49c:	300f883a 	mov	r7,r6
 181e4a0:	280d883a 	mov	r6,r5
 181e4a4:	200b883a 	mov	r5,r4
 181e4a8:	0009883a 	mov	r4,zero
 181e4ac:	181dd7c0 	call	181dd7c <tcp_pbuf_prealloc>
 181e4b0:	e0bff215 	stw	r2,-56(fp)
 181e4b4:	e0bff217 	ldw	r2,-56(fp)
 181e4b8:	10011a26 	beq	r2,zero,181e924 <tcp_write+0x8ac>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 181e4bc:	e0bff217 	ldw	r2,-56(fp)
 181e4c0:	10c00117 	ldw	r3,4(r2)
 181e4c4:	e0bff403 	ldbu	r2,-48(fp)
 181e4c8:	1889883a 	add	r4,r3,r2
 181e4cc:	e0bfef0b 	ldhu	r2,-68(fp)
 181e4d0:	e0fffd17 	ldw	r3,-12(fp)
 181e4d4:	1885883a 	add	r2,r3,r2
 181e4d8:	e0fff78b 	ldhu	r3,-34(fp)
 181e4dc:	180d883a 	mov	r6,r3
 181e4e0:	100b883a 	mov	r5,r2
 181e4e4:	183191c0 	call	183191c <lwip_chksum_copy>
 181e4e8:	10bfffcc 	andi	r2,r2,65535
 181e4ec:	e0fff78b 	ldhu	r3,-34(fp)
 181e4f0:	e17ffb04 	addi	r5,fp,-20
 181e4f4:	e13ffa84 	addi	r4,fp,-22
 181e4f8:	280f883a 	mov	r7,r5
 181e4fc:	200d883a 	mov	r6,r4
 181e500:	180b883a 	mov	r5,r3
 181e504:	1009883a 	mov	r4,r2
 181e508:	181de9c0 	call	181de9c <tcp_seg_add_chksum>
 181e50c:	00002406 	br	181e5a0 <tcp_write+0x528>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 181e510:	e0bff78b 	ldhu	r2,-34(fp)
 181e514:	01800044 	movi	r6,1
 181e518:	100b883a 	mov	r5,r2
 181e51c:	0009883a 	mov	r4,zero
 181e520:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181e524:	e0bff815 	stw	r2,-32(fp)
 181e528:	e0bff817 	ldw	r2,-32(fp)
 181e52c:	1000ff26 	beq	r2,zero,181e92c <tcp_write+0x8b4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
      }
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
 181e530:	e0bfef0b 	ldhu	r2,-68(fp)
 181e534:	e0fffd17 	ldw	r3,-12(fp)
 181e538:	1885883a 	add	r2,r3,r2
 181e53c:	e0fff78b 	ldhu	r3,-34(fp)
 181e540:	180b883a 	mov	r5,r3
 181e544:	1009883a 	mov	r4,r2
 181e548:	18317cc0 	call	18317cc <inet_chksum>
 181e54c:	0084303a 	nor	r2,zero,r2
 181e550:	e0bffa8d 	sth	r2,-22(fp)
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
 181e554:	e0bfef0b 	ldhu	r2,-68(fp)
 181e558:	e0fffd17 	ldw	r3,-12(fp)
 181e55c:	1887883a 	add	r3,r3,r2
 181e560:	e0bff817 	ldw	r2,-32(fp)
 181e564:	10c00115 	stw	r3,4(r2)

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 181e568:	e0bff403 	ldbu	r2,-48(fp)
 181e56c:	000d883a 	mov	r6,zero
 181e570:	100b883a 	mov	r5,r2
 181e574:	0009883a 	mov	r4,zero
 181e578:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181e57c:	e0bff215 	stw	r2,-56(fp)
 181e580:	e0bff217 	ldw	r2,-56(fp)
 181e584:	1000031e 	bne	r2,zero,181e594 <tcp_write+0x51c>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 181e588:	e13ff817 	ldw	r4,-32(fp)
 181e58c:	181a22c0 	call	181a22c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 181e590:	0000e906 	br	181e938 <tcp_write+0x8c0>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 181e594:	e17ff817 	ldw	r5,-32(fp)
 181e598:	e13ff217 	ldw	r4,-56(fp)
 181e59c:	181a4180 	call	181a418 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 181e5a0:	e13ff217 	ldw	r4,-56(fp)
 181e5a4:	181a3680 	call	181a368 <pbuf_clen>
 181e5a8:	10c03fcc 	andi	r3,r2,255
 181e5ac:	e0bfef8b 	ldhu	r2,-66(fp)
 181e5b0:	1885883a 	add	r2,r3,r2
 181e5b4:	e0bfef8d 	sth	r2,-66(fp)

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 181e5b8:	e0bfef8b 	ldhu	r2,-66(fp)
 181e5bc:	10800268 	cmpgeui	r2,r2,9
 181e5c0:	1000031e 	bne	r2,zero,181e5d0 <tcp_write+0x558>
 181e5c4:	e0bfef8b 	ldhu	r2,-66(fp)
 181e5c8:	10bfff70 	cmpltui	r2,r2,65533
 181e5cc:	1000031e 	bne	r2,zero,181e5dc <tcp_write+0x564>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
 181e5d0:	e13ff217 	ldw	r4,-56(fp)
 181e5d4:	181a22c0 	call	181a22c <pbuf_free>
      goto memerr;
 181e5d8:	0000d706 	br	181e938 <tcp_write+0x8c0>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 181e5dc:	e0bffc17 	ldw	r2,-16(fp)
 181e5e0:	10c01817 	ldw	r3,96(r2)
 181e5e4:	e0bfef0b 	ldhu	r2,-68(fp)
 181e5e8:	1887883a 	add	r3,r3,r2
 181e5ec:	e0bff443 	ldbu	r2,-47(fp)
 181e5f0:	d8800015 	stw	r2,0(sp)
 181e5f4:	180f883a 	mov	r7,r3
 181e5f8:	000d883a 	mov	r6,zero
 181e5fc:	e17ff217 	ldw	r5,-56(fp)
 181e600:	e13ffc17 	ldw	r4,-16(fp)
 181e604:	181d9cc0 	call	181d9cc <tcp_create_segment>
 181e608:	e0bfec15 	stw	r2,-80(fp)
 181e60c:	e0bfec17 	ldw	r2,-80(fp)
 181e610:	1000c826 	beq	r2,zero,181e934 <tcp_write+0x8bc>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
#if TCP_CHECKSUM_ON_COPY
    seg->chksum = chksum;
 181e614:	e0fffa8b 	ldhu	r3,-22(fp)
 181e618:	e0bfec17 	ldw	r2,-80(fp)
 181e61c:	10c0028d 	sth	r3,10(r2)
    seg->chksum_swapped = chksum_swapped;
 181e620:	e0fffb03 	ldbu	r3,-20(fp)
 181e624:	e0bfec17 	ldw	r2,-80(fp)
 181e628:	10c00305 	stb	r3,12(r2)
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
 181e62c:	e0bfec17 	ldw	r2,-80(fp)
 181e630:	10800343 	ldbu	r2,13(r2)
 181e634:	10800114 	ori	r2,r2,4
 181e638:	1007883a 	mov	r3,r2
 181e63c:	e0bfec17 	ldw	r2,-80(fp)
 181e640:	10c00345 	stb	r3,13(r2)
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 181e644:	e0bfee17 	ldw	r2,-72(fp)
 181e648:	1000031e 	bne	r2,zero,181e658 <tcp_write+0x5e0>
      queue = seg;
 181e64c:	e0bfec17 	ldw	r2,-80(fp)
 181e650:	e0bfee15 	stw	r2,-72(fp)
 181e654:	00000306 	br	181e664 <tcp_write+0x5ec>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 181e658:	e0bfed17 	ldw	r2,-76(fp)
 181e65c:	e0ffec17 	ldw	r3,-80(fp)
 181e660:	10c00015 	stw	r3,0(r2)
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 181e664:	e0bfec17 	ldw	r2,-80(fp)
 181e668:	e0bfed15 	stw	r2,-76(fp)

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 181e66c:	e0ffef0b 	ldhu	r3,-68(fp)
 181e670:	e0bff78b 	ldhu	r2,-34(fp)
 181e674:	1885883a 	add	r2,r3,r2
 181e678:	e0bfef0d 	sth	r2,-68(fp)
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 181e67c:	e0ffef0b 	ldhu	r3,-68(fp)
 181e680:	e0bffe0b 	ldhu	r2,-8(fp)
 181e684:	18bf6336 	bltu	r3,r2,181e414 <__ram_exceptions_end+0xff80e124>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 181e688:	e0bff00b 	ldhu	r2,-64(fp)
 181e68c:	10003d26 	beq	r2,zero,181e784 <tcp_write+0x70c>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 181e690:	e0bfeb17 	ldw	r2,-84(fp)
 181e694:	10800117 	ldw	r2,4(r2)
 181e698:	e0bff315 	stw	r2,-52(fp)
 181e69c:	00003006 	br	181e760 <tcp_write+0x6e8>
      p->tot_len += oversize_used;
 181e6a0:	e0bff317 	ldw	r2,-52(fp)
 181e6a4:	10c0020b 	ldhu	r3,8(r2)
 181e6a8:	e0bff00b 	ldhu	r2,-64(fp)
 181e6ac:	1885883a 	add	r2,r3,r2
 181e6b0:	1007883a 	mov	r3,r2
 181e6b4:	e0bff317 	ldw	r2,-52(fp)
 181e6b8:	10c0020d 	sth	r3,8(r2)
      if (p->next == NULL) {
 181e6bc:	e0bff317 	ldw	r2,-52(fp)
 181e6c0:	10800017 	ldw	r2,0(r2)
 181e6c4:	1000231e 	bne	r2,zero,181e754 <tcp_write+0x6dc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 181e6c8:	e0bff317 	ldw	r2,-52(fp)
 181e6cc:	10c00117 	ldw	r3,4(r2)
 181e6d0:	e0bff317 	ldw	r2,-52(fp)
 181e6d4:	1080028b 	ldhu	r2,10(r2)
 181e6d8:	10bfffcc 	andi	r2,r2,65535
 181e6dc:	1885883a 	add	r2,r3,r2
 181e6e0:	e0fff00b 	ldhu	r3,-64(fp)
 181e6e4:	180d883a 	mov	r6,r3
 181e6e8:	e17ffd17 	ldw	r5,-12(fp)
 181e6ec:	1009883a 	mov	r4,r2
 181e6f0:	183191c0 	call	183191c <lwip_chksum_copy>
 181e6f4:	10ffffcc 	andi	r3,r2,65535
 181e6f8:	e13ff00b 	ldhu	r4,-64(fp)
 181e6fc:	e0bfeb17 	ldw	r2,-84(fp)
 181e700:	11400284 	addi	r5,r2,10
 181e704:	e0bfeb17 	ldw	r2,-84(fp)
 181e708:	10800304 	addi	r2,r2,12
 181e70c:	100f883a 	mov	r7,r2
 181e710:	280d883a 	mov	r6,r5
 181e714:	200b883a 	mov	r5,r4
 181e718:	1809883a 	mov	r4,r3
 181e71c:	181de9c0 	call	181de9c <tcp_seg_add_chksum>
 181e720:	e0bfeb17 	ldw	r2,-84(fp)
 181e724:	10800343 	ldbu	r2,13(r2)
 181e728:	10800114 	ori	r2,r2,4
 181e72c:	1007883a 	mov	r3,r2
 181e730:	e0bfeb17 	ldw	r2,-84(fp)
 181e734:	10c00345 	stb	r3,13(r2)
        p->len += oversize_used;
 181e738:	e0bff317 	ldw	r2,-52(fp)
 181e73c:	10c0028b 	ldhu	r3,10(r2)
 181e740:	e0bff00b 	ldhu	r2,-64(fp)
 181e744:	1885883a 	add	r2,r3,r2
 181e748:	1007883a 	mov	r3,r2
 181e74c:	e0bff317 	ldw	r2,-52(fp)
 181e750:	10c0028d 	sth	r3,10(r2)
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 181e754:	e0bff317 	ldw	r2,-52(fp)
 181e758:	10800017 	ldw	r2,0(r2)
 181e75c:	e0bff315 	stw	r2,-52(fp)
 181e760:	e0bff317 	ldw	r2,-52(fp)
 181e764:	103fce1e 	bne	r2,zero,181e6a0 <__ram_exceptions_end+0xff80e3b0>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
 181e768:	e0bfeb17 	ldw	r2,-84(fp)
 181e76c:	10c0020b 	ldhu	r3,8(r2)
 181e770:	e0bff00b 	ldhu	r2,-64(fp)
 181e774:	1885883a 	add	r2,r3,r2
 181e778:	1007883a 	mov	r3,r2
 181e77c:	e0bfeb17 	ldw	r2,-84(fp)
 181e780:	10c0020d 	sth	r3,8(r2)
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 181e784:	e0fff90b 	ldhu	r3,-28(fp)
 181e788:	e0bffc17 	ldw	r2,-16(fp)
 181e78c:	10c01b8d 	sth	r3,110(r2)
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
 181e790:	e0bfea17 	ldw	r2,-88(fp)
 181e794:	10002126 	beq	r2,zero,181e81c <tcp_write+0x7a4>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 181e798:	e0bfeb17 	ldw	r2,-84(fp)
 181e79c:	10800117 	ldw	r2,4(r2)
 181e7a0:	e17fea17 	ldw	r5,-88(fp)
 181e7a4:	1009883a 	mov	r4,r2
 181e7a8:	181a4180 	call	181a418 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 181e7ac:	e0bfeb17 	ldw	r2,-84(fp)
 181e7b0:	10c0020b 	ldhu	r3,8(r2)
 181e7b4:	e0bfea17 	ldw	r2,-88(fp)
 181e7b8:	1080020b 	ldhu	r2,8(r2)
 181e7bc:	1885883a 	add	r2,r3,r2
 181e7c0:	1007883a 	mov	r3,r2
 181e7c4:	e0bfeb17 	ldw	r2,-84(fp)
 181e7c8:	10c0020d 	sth	r3,8(r2)
#if TCP_CHECKSUM_ON_COPY
    if (concat_chksummed) {
 181e7cc:	e0bff08b 	ldhu	r2,-62(fp)
 181e7d0:	10001226 	beq	r2,zero,181e81c <tcp_write+0x7a4>
      tcp_seg_add_chksum(concat_chksum, concat_chksummed, &last_unsent->chksum,
 181e7d4:	e0bff98b 	ldhu	r2,-26(fp)
 181e7d8:	10ffffcc 	andi	r3,r2,65535
 181e7dc:	e13ff08b 	ldhu	r4,-62(fp)
 181e7e0:	e0bfeb17 	ldw	r2,-84(fp)
 181e7e4:	11400284 	addi	r5,r2,10
 181e7e8:	e0bfeb17 	ldw	r2,-84(fp)
 181e7ec:	10800304 	addi	r2,r2,12
 181e7f0:	100f883a 	mov	r7,r2
 181e7f4:	280d883a 	mov	r6,r5
 181e7f8:	200b883a 	mov	r5,r4
 181e7fc:	1809883a 	mov	r4,r3
 181e800:	181de9c0 	call	181de9c <tcp_seg_add_chksum>
        &last_unsent->chksum_swapped);
      last_unsent->flags |= TF_SEG_DATA_CHECKSUMMED;
 181e804:	e0bfeb17 	ldw	r2,-84(fp)
 181e808:	10800343 	ldbu	r2,13(r2)
 181e80c:	10800114 	ori	r2,r2,4
 181e810:	1007883a 	mov	r3,r2
 181e814:	e0bfeb17 	ldw	r2,-84(fp)
 181e818:	10c00345 	stb	r3,13(r2)

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 181e81c:	e0bfeb17 	ldw	r2,-84(fp)
 181e820:	1000041e 	bne	r2,zero,181e834 <tcp_write+0x7bc>
    pcb->unsent = queue;
 181e824:	e0bffc17 	ldw	r2,-16(fp)
 181e828:	e0ffee17 	ldw	r3,-72(fp)
 181e82c:	10c01c15 	stw	r3,112(r2)
 181e830:	00000306 	br	181e840 <tcp_write+0x7c8>
  } else {
    last_unsent->next = queue;
 181e834:	e0bfeb17 	ldw	r2,-84(fp)
 181e838:	e0ffee17 	ldw	r3,-72(fp)
 181e83c:	10c00015 	stw	r3,0(r2)
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 181e840:	e0bffc17 	ldw	r2,-16(fp)
 181e844:	10c01817 	ldw	r3,96(r2)
 181e848:	e0bffe0b 	ldhu	r2,-8(fp)
 181e84c:	1887883a 	add	r3,r3,r2
 181e850:	e0bffc17 	ldw	r2,-16(fp)
 181e854:	10c01815 	stw	r3,96(r2)
  pcb->snd_buf -= len;
 181e858:	e0bffc17 	ldw	r2,-16(fp)
 181e85c:	10c01a8b 	ldhu	r3,106(r2)
 181e860:	e0bffe0b 	ldhu	r2,-8(fp)
 181e864:	1885c83a 	sub	r2,r3,r2
 181e868:	1007883a 	mov	r3,r2
 181e86c:	e0bffc17 	ldw	r2,-16(fp)
 181e870:	10c01a8d 	sth	r3,106(r2)
  pcb->snd_queuelen = queuelen;
 181e874:	e0bffc17 	ldw	r2,-16(fp)
 181e878:	e0ffef8b 	ldhu	r3,-66(fp)
 181e87c:	10c01b0d 	sth	r3,108(r2)
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 181e880:	e0bfec17 	ldw	r2,-80(fp)
 181e884:	10002126 	beq	r2,zero,181e90c <tcp_write+0x894>
 181e888:	e0bfec17 	ldw	r2,-80(fp)
 181e88c:	10800417 	ldw	r2,16(r2)
 181e890:	10001e26 	beq	r2,zero,181e90c <tcp_write+0x894>
 181e894:	e0bfff03 	ldbu	r2,-4(fp)
 181e898:	1080008c 	andi	r2,r2,2
 181e89c:	10001b1e 	bne	r2,zero,181e90c <tcp_write+0x894>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 181e8a0:	e0bfec17 	ldw	r2,-80(fp)
 181e8a4:	10800417 	ldw	r2,16(r2)
 181e8a8:	e0ffec17 	ldw	r3,-80(fp)
 181e8ac:	18c00417 	ldw	r3,16(r3)
 181e8b0:	19000303 	ldbu	r4,12(r3)
 181e8b4:	18c00343 	ldbu	r3,13(r3)
 181e8b8:	1806923a 	slli	r3,r3,8
 181e8bc:	1906b03a 	or	r3,r3,r4
 181e8c0:	18c20014 	ori	r3,r3,2048
 181e8c4:	180d883a 	mov	r6,r3
 181e8c8:	30ffffcc 	andi	r3,r6,65535
 181e8cc:	19403fcc 	andi	r5,r3,255
 181e8d0:	10c00303 	ldbu	r3,12(r2)
 181e8d4:	1806703a 	and	r3,r3,zero
 181e8d8:	1809883a 	mov	r4,r3
 181e8dc:	2807883a 	mov	r3,r5
 181e8e0:	20c6b03a 	or	r3,r4,r3
 181e8e4:	10c00305 	stb	r3,12(r2)
 181e8e8:	30ffffcc 	andi	r3,r6,65535
 181e8ec:	1806d23a 	srli	r3,r3,8
 181e8f0:	197fffcc 	andi	r5,r3,65535
 181e8f4:	10c00343 	ldbu	r3,13(r2)
 181e8f8:	1806703a 	and	r3,r3,zero
 181e8fc:	1809883a 	mov	r4,r3
 181e900:	2807883a 	mov	r3,r5
 181e904:	20c6b03a 	or	r3,r4,r3
 181e908:	10c00345 	stb	r3,13(r2)
  }

  return ERR_OK;
 181e90c:	0005883a 	mov	r2,zero
 181e910:	00002006 	br	181e994 <tcp_write+0x91c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
 181e914:	0001883a 	nop
 181e918:	00000706 	br	181e938 <tcp_write+0x8c0>
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
          goto memerr;
 181e91c:	0001883a 	nop
 181e920:	00000506 	br	181e938 <tcp_write+0x8c0>
    if (apiflags & TCP_WRITE_FLAG_COPY) {
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
 181e924:	0001883a 	nop
 181e928:	00000306 	br	181e938 <tcp_write+0x8c0>
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
 181e92c:	0001883a 	nop
 181e930:	00000106 	br	181e938 <tcp_write+0x8c0>
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
      goto memerr;
 181e934:	0001883a 	nop
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 181e938:	e0bffc17 	ldw	r2,-16(fp)
 181e93c:	10c00883 	ldbu	r3,34(r2)
 181e940:	00bfe004 	movi	r2,-128
 181e944:	1884b03a 	or	r2,r3,r2
 181e948:	1007883a 	mov	r3,r2
 181e94c:	e0bffc17 	ldw	r2,-16(fp)
 181e950:	10c00885 	stb	r3,34(r2)
  TCP_STATS_INC(tcp.memerr);
 181e954:	00806134 	movhi	r2,388
 181e958:	109e7504 	addi	r2,r2,31188
 181e95c:	10804e17 	ldw	r2,312(r2)
 181e960:	10c00044 	addi	r3,r2,1
 181e964:	00806134 	movhi	r2,388
 181e968:	109e7504 	addi	r2,r2,31188
 181e96c:	10c04e15 	stw	r3,312(r2)

  if (concat_p != NULL) {
 181e970:	e0bfea17 	ldw	r2,-88(fp)
 181e974:	10000226 	beq	r2,zero,181e980 <tcp_write+0x908>
    pbuf_free(concat_p);
 181e978:	e13fea17 	ldw	r4,-88(fp)
 181e97c:	181a22c0 	call	181a22c <pbuf_free>
  }
  if (queue != NULL) {
 181e980:	e0bfee17 	ldw	r2,-72(fp)
 181e984:	10000226 	beq	r2,zero,181e990 <tcp_write+0x918>
    tcp_segs_free(queue);
 181e988:	e13fee17 	ldw	r4,-72(fp)
 181e98c:	181ca840 	call	181ca84 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 181e990:	00bfffc4 	movi	r2,-1
}
 181e994:	e037883a 	mov	sp,fp
 181e998:	dfc00117 	ldw	ra,4(sp)
 181e99c:	df000017 	ldw	fp,0(sp)
 181e9a0:	dec00204 	addi	sp,sp,8
 181e9a4:	f800283a 	ret

0181e9a8 <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 181e9a8:	defff604 	addi	sp,sp,-40
 181e9ac:	dfc00915 	stw	ra,36(sp)
 181e9b0:	df000815 	stw	fp,32(sp)
 181e9b4:	df000804 	addi	fp,sp,32
 181e9b8:	e13ffe15 	stw	r4,-8(fp)
 181e9bc:	2805883a 	mov	r2,r5
 181e9c0:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 181e9c4:	e03ff905 	stb	zero,-28(fp)
  u8_t optlen = 0;
 181e9c8:	e03ffb05 	stb	zero,-20(fp)

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 181e9cc:	e0bffe17 	ldw	r2,-8(fp)
 181e9d0:	10801b0b 	ldhu	r2,108(r2)
 181e9d4:	10bfffcc 	andi	r2,r2,65535
 181e9d8:	10800228 	cmpgeui	r2,r2,8
 181e9dc:	1000051e 	bne	r2,zero,181e9f4 <tcp_enqueue_flags+0x4c>
 181e9e0:	e0bffe17 	ldw	r2,-8(fp)
 181e9e4:	10801b0b 	ldhu	r2,108(r2)
 181e9e8:	10bfffcc 	andi	r2,r2,65535
 181e9ec:	10bfff70 	cmpltui	r2,r2,65533
 181e9f0:	1000101e 	bne	r2,zero,181ea34 <tcp_enqueue_flags+0x8c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 181e9f4:	00806134 	movhi	r2,388
 181e9f8:	109e7504 	addi	r2,r2,31188
 181e9fc:	10804e17 	ldw	r2,312(r2)
 181ea00:	10c00044 	addi	r3,r2,1
 181ea04:	00806134 	movhi	r2,388
 181ea08:	109e7504 	addi	r2,r2,31188
 181ea0c:	10c04e15 	stw	r3,312(r2)
    pcb->flags |= TF_NAGLEMEMERR;
 181ea10:	e0bffe17 	ldw	r2,-8(fp)
 181ea14:	10c00883 	ldbu	r3,34(r2)
 181ea18:	00bfe004 	movi	r2,-128
 181ea1c:	1884b03a 	or	r2,r3,r2
 181ea20:	1007883a 	mov	r3,r2
 181ea24:	e0bffe17 	ldw	r2,-8(fp)
 181ea28:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
 181ea2c:	00bfffc4 	movi	r2,-1
 181ea30:	00009206 	br	181ec7c <tcp_enqueue_flags+0x2d4>
  }

  if (flags & TCP_SYN) {
 181ea34:	e0bfff03 	ldbu	r2,-4(fp)
 181ea38:	1080008c 	andi	r2,r2,2
 181ea3c:	10000226 	beq	r2,zero,181ea48 <tcp_enqueue_flags+0xa0>
    optflags = TF_SEG_OPTS_MSS;
 181ea40:	00800044 	movi	r2,1
 181ea44:	e0bff905 	stb	r2,-28(fp)
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 181ea48:	e0bff903 	ldbu	r2,-28(fp)
 181ea4c:	1080004c 	andi	r2,r2,1
 181ea50:	10000226 	beq	r2,zero,181ea5c <tcp_enqueue_flags+0xb4>
 181ea54:	00c00104 	movi	r3,4
 181ea58:	00000106 	br	181ea60 <tcp_enqueue_flags+0xb8>
 181ea5c:	0007883a 	mov	r3,zero
 181ea60:	e0bff903 	ldbu	r2,-28(fp)
 181ea64:	1080008c 	andi	r2,r2,2
 181ea68:	10000226 	beq	r2,zero,181ea74 <tcp_enqueue_flags+0xcc>
 181ea6c:	00800304 	movi	r2,12
 181ea70:	00000106 	br	181ea78 <tcp_enqueue_flags+0xd0>
 181ea74:	0005883a 	mov	r2,zero
 181ea78:	1885883a 	add	r2,r3,r2
 181ea7c:	e0bffb05 	stb	r2,-20(fp)

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 181ea80:	e0bffe17 	ldw	r2,-8(fp)
 181ea84:	10801a8b 	ldhu	r2,106(r2)
 181ea88:	10bfffcc 	andi	r2,r2,65535
 181ea8c:	1000091e 	bne	r2,zero,181eab4 <tcp_enqueue_flags+0x10c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
 181ea90:	00806134 	movhi	r2,388
 181ea94:	109e7504 	addi	r2,r2,31188
 181ea98:	10804e17 	ldw	r2,312(r2)
 181ea9c:	10c00044 	addi	r3,r2,1
 181eaa0:	00806134 	movhi	r2,388
 181eaa4:	109e7504 	addi	r2,r2,31188
 181eaa8:	10c04e15 	stw	r3,312(r2)
    return ERR_MEM;
 181eaac:	00bfffc4 	movi	r2,-1
 181eab0:	00007206 	br	181ec7c <tcp_enqueue_flags+0x2d4>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 181eab4:	e0bffb03 	ldbu	r2,-20(fp)
 181eab8:	000d883a 	mov	r6,zero
 181eabc:	100b883a 	mov	r5,r2
 181eac0:	0009883a 	mov	r4,zero
 181eac4:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181eac8:	e0bffc15 	stw	r2,-16(fp)
 181eacc:	e0bffc17 	ldw	r2,-16(fp)
 181ead0:	1000101e 	bne	r2,zero,181eb14 <tcp_enqueue_flags+0x16c>
    pcb->flags |= TF_NAGLEMEMERR;
 181ead4:	e0bffe17 	ldw	r2,-8(fp)
 181ead8:	10c00883 	ldbu	r3,34(r2)
 181eadc:	00bfe004 	movi	r2,-128
 181eae0:	1884b03a 	or	r2,r3,r2
 181eae4:	1007883a 	mov	r3,r2
 181eae8:	e0bffe17 	ldw	r2,-8(fp)
 181eaec:	10c00885 	stb	r3,34(r2)
    TCP_STATS_INC(tcp.memerr);
 181eaf0:	00806134 	movhi	r2,388
 181eaf4:	109e7504 	addi	r2,r2,31188
 181eaf8:	10804e17 	ldw	r2,312(r2)
 181eafc:	10c00044 	addi	r3,r2,1
 181eb00:	00806134 	movhi	r2,388
 181eb04:	109e7504 	addi	r2,r2,31188
 181eb08:	10c04e15 	stw	r3,312(r2)
    return ERR_MEM;
 181eb0c:	00bfffc4 	movi	r2,-1
 181eb10:	00005a06 	br	181ec7c <tcp_enqueue_flags+0x2d4>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 181eb14:	e0ffff03 	ldbu	r3,-4(fp)
 181eb18:	e0bffe17 	ldw	r2,-8(fp)
 181eb1c:	11001817 	ldw	r4,96(r2)
 181eb20:	e0bff903 	ldbu	r2,-28(fp)
 181eb24:	d8800015 	stw	r2,0(sp)
 181eb28:	200f883a 	mov	r7,r4
 181eb2c:	180d883a 	mov	r6,r3
 181eb30:	e17ffc17 	ldw	r5,-16(fp)
 181eb34:	e13ffe17 	ldw	r4,-8(fp)
 181eb38:	181d9cc0 	call	181d9cc <tcp_create_segment>
 181eb3c:	e0bffd15 	stw	r2,-12(fp)
 181eb40:	e0bffd17 	ldw	r2,-12(fp)
 181eb44:	1000101e 	bne	r2,zero,181eb88 <tcp_enqueue_flags+0x1e0>
    pcb->flags |= TF_NAGLEMEMERR;
 181eb48:	e0bffe17 	ldw	r2,-8(fp)
 181eb4c:	10c00883 	ldbu	r3,34(r2)
 181eb50:	00bfe004 	movi	r2,-128
 181eb54:	1884b03a 	or	r2,r3,r2
 181eb58:	1007883a 	mov	r3,r2
 181eb5c:	e0bffe17 	ldw	r2,-8(fp)
 181eb60:	10c00885 	stb	r3,34(r2)
    TCP_STATS_INC(tcp.memerr);
 181eb64:	00806134 	movhi	r2,388
 181eb68:	109e7504 	addi	r2,r2,31188
 181eb6c:	10804e17 	ldw	r2,312(r2)
 181eb70:	10c00044 	addi	r3,r2,1
 181eb74:	00806134 	movhi	r2,388
 181eb78:	109e7504 	addi	r2,r2,31188
 181eb7c:	10c04e15 	stw	r3,312(r2)
    return ERR_MEM;
 181eb80:	00bfffc4 	movi	r2,-1
 181eb84:	00003d06 	br	181ec7c <tcp_enqueue_flags+0x2d4>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 181eb88:	e0bffe17 	ldw	r2,-8(fp)
 181eb8c:	10801c17 	ldw	r2,112(r2)
 181eb90:	1000041e 	bne	r2,zero,181eba4 <tcp_enqueue_flags+0x1fc>
    pcb->unsent = seg;
 181eb94:	e0bffe17 	ldw	r2,-8(fp)
 181eb98:	e0fffd17 	ldw	r3,-12(fp)
 181eb9c:	10c01c15 	stw	r3,112(r2)
 181eba0:	00000d06 	br	181ebd8 <tcp_enqueue_flags+0x230>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 181eba4:	e0bffe17 	ldw	r2,-8(fp)
 181eba8:	10801c17 	ldw	r2,112(r2)
 181ebac:	e0bffa15 	stw	r2,-24(fp)
 181ebb0:	00000306 	br	181ebc0 <tcp_enqueue_flags+0x218>
 181ebb4:	e0bffa17 	ldw	r2,-24(fp)
 181ebb8:	10800017 	ldw	r2,0(r2)
 181ebbc:	e0bffa15 	stw	r2,-24(fp)
 181ebc0:	e0bffa17 	ldw	r2,-24(fp)
 181ebc4:	10800017 	ldw	r2,0(r2)
 181ebc8:	103ffa1e 	bne	r2,zero,181ebb4 <__ram_exceptions_end+0xff80e8c4>
    useg->next = seg;
 181ebcc:	e0bffa17 	ldw	r2,-24(fp)
 181ebd0:	e0fffd17 	ldw	r3,-12(fp)
 181ebd4:	10c00015 	stw	r3,0(r2)
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 181ebd8:	e0bffe17 	ldw	r2,-8(fp)
 181ebdc:	10001b8d 	sth	zero,110(r2)
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 181ebe0:	e0bfff03 	ldbu	r2,-4(fp)
 181ebe4:	1080008c 	andi	r2,r2,2
 181ebe8:	1000031e 	bne	r2,zero,181ebf8 <tcp_enqueue_flags+0x250>
 181ebec:	e0bfff03 	ldbu	r2,-4(fp)
 181ebf0:	1080004c 	andi	r2,r2,1
 181ebf4:	10000b26 	beq	r2,zero,181ec24 <tcp_enqueue_flags+0x27c>
    pcb->snd_lbb++;
 181ebf8:	e0bffe17 	ldw	r2,-8(fp)
 181ebfc:	10801817 	ldw	r2,96(r2)
 181ec00:	10c00044 	addi	r3,r2,1
 181ec04:	e0bffe17 	ldw	r2,-8(fp)
 181ec08:	10c01815 	stw	r3,96(r2)
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
 181ec0c:	e0bffe17 	ldw	r2,-8(fp)
 181ec10:	10801a8b 	ldhu	r2,106(r2)
 181ec14:	10bfffc4 	addi	r2,r2,-1
 181ec18:	1007883a 	mov	r3,r2
 181ec1c:	e0bffe17 	ldw	r2,-8(fp)
 181ec20:	10c01a8d 	sth	r3,106(r2)
  }
  if (flags & TCP_FIN) {
 181ec24:	e0bfff03 	ldbu	r2,-4(fp)
 181ec28:	1080004c 	andi	r2,r2,1
 181ec2c:	10000626 	beq	r2,zero,181ec48 <tcp_enqueue_flags+0x2a0>
    pcb->flags |= TF_FIN;
 181ec30:	e0bffe17 	ldw	r2,-8(fp)
 181ec34:	10800883 	ldbu	r2,34(r2)
 181ec38:	10800814 	ori	r2,r2,32
 181ec3c:	1007883a 	mov	r3,r2
 181ec40:	e0bffe17 	ldw	r2,-8(fp)
 181ec44:	10c00885 	stb	r3,34(r2)
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 181ec48:	e0bffd17 	ldw	r2,-12(fp)
 181ec4c:	10800117 	ldw	r2,4(r2)
 181ec50:	1009883a 	mov	r4,r2
 181ec54:	181a3680 	call	181a368 <pbuf_clen>
 181ec58:	1009883a 	mov	r4,r2
 181ec5c:	e0bffe17 	ldw	r2,-8(fp)
 181ec60:	10c01b0b 	ldhu	r3,108(r2)
 181ec64:	20803fcc 	andi	r2,r4,255
 181ec68:	1885883a 	add	r2,r3,r2
 181ec6c:	1007883a 	mov	r3,r2
 181ec70:	e0bffe17 	ldw	r2,-8(fp)
 181ec74:	10c01b0d 	sth	r3,108(r2)
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 181ec78:	0005883a 	mov	r2,zero
}
 181ec7c:	e037883a 	mov	sp,fp
 181ec80:	dfc00117 	ldw	ra,4(sp)
 181ec84:	df000017 	ldw	fp,0(sp)
 181ec88:	dec00204 	addi	sp,sp,8
 181ec8c:	f800283a 	ret

0181ec90 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 181ec90:	defff704 	addi	sp,sp,-36
 181ec94:	dfc00815 	stw	ra,32(sp)
 181ec98:	df000715 	stw	fp,28(sp)
 181ec9c:	df000704 	addi	fp,sp,28
 181eca0:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
 181eca4:	e03ffc05 	stb	zero,-16(fp)
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 181eca8:	e13ffc03 	ldbu	r4,-16(fp)
 181ecac:	e0bfff17 	ldw	r2,-4(fp)
 181ecb0:	10801517 	ldw	r2,84(r2)
 181ecb4:	1006d63a 	srli	r3,r2,24
 181ecb8:	e0bfff17 	ldw	r2,-4(fp)
 181ecbc:	10801517 	ldw	r2,84(r2)
 181ecc0:	1004d23a 	srli	r2,r2,8
 181ecc4:	10bfc00c 	andi	r2,r2,65280
 181ecc8:	1886b03a 	or	r3,r3,r2
 181eccc:	e0bfff17 	ldw	r2,-4(fp)
 181ecd0:	10801517 	ldw	r2,84(r2)
 181ecd4:	10bfc00c 	andi	r2,r2,65280
 181ecd8:	1004923a 	slli	r2,r2,8
 181ecdc:	1886b03a 	or	r3,r3,r2
 181ece0:	e0bfff17 	ldw	r2,-4(fp)
 181ece4:	10801517 	ldw	r2,84(r2)
 181ece8:	1004963a 	slli	r2,r2,24
 181ecec:	1884b03a 	or	r2,r3,r2
 181ecf0:	100f883a 	mov	r7,r2
 181ecf4:	000d883a 	mov	r6,zero
 181ecf8:	200b883a 	mov	r5,r4
 181ecfc:	e13fff17 	ldw	r4,-4(fp)
 181ed00:	181d49c0 	call	181d49c <tcp_output_alloc_header>
 181ed04:	e0bffd15 	stw	r2,-12(fp)
  if (p == NULL) {
 181ed08:	e0bffd17 	ldw	r2,-12(fp)
 181ed0c:	1000021e 	bne	r2,zero,181ed18 <tcp_send_empty_ack+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 181ed10:	00bfff84 	movi	r2,-2
 181ed14:	00004006 	br	181ee18 <tcp_send_empty_ack+0x188>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 181ed18:	e0bffd17 	ldw	r2,-12(fp)
 181ed1c:	10800117 	ldw	r2,4(r2)
 181ed20:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 181ed24:	e0bfff17 	ldw	r2,-4(fp)
 181ed28:	10c00883 	ldbu	r3,34(r2)
 181ed2c:	00bfff04 	movi	r2,-4
 181ed30:	1884703a 	and	r2,r3,r2
 181ed34:	1007883a 	mov	r3,r2
 181ed38:	e0bfff17 	ldw	r2,-4(fp)
 181ed3c:	10c00885 	stb	r3,34(r2)
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 181ed40:	e0ffff17 	ldw	r3,-4(fp)
 181ed44:	e0bfff17 	ldw	r2,-4(fp)
 181ed48:	11000104 	addi	r4,r2,4
        IP_PROTO_TCP, p->tot_len);
 181ed4c:	e0bffd17 	ldw	r2,-12(fp)
 181ed50:	1080020b 	ldhu	r2,8(r2)
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 181ed54:	10bfffcc 	andi	r2,r2,65535
 181ed58:	d8800015 	stw	r2,0(sp)
 181ed5c:	01c00184 	movi	r7,6
 181ed60:	200d883a 	mov	r6,r4
 181ed64:	180b883a 	mov	r5,r3
 181ed68:	e13ffd17 	ldw	r4,-12(fp)
 181ed6c:	18313940 	call	1831394 <inet_chksum_pseudo>
 181ed70:	100d883a 	mov	r6,r2
 181ed74:	e0bffe17 	ldw	r2,-8(fp)
 181ed78:	30ffffcc 	andi	r3,r6,65535
 181ed7c:	19403fcc 	andi	r5,r3,255
 181ed80:	10c00403 	ldbu	r3,16(r2)
 181ed84:	1806703a 	and	r3,r3,zero
 181ed88:	1809883a 	mov	r4,r3
 181ed8c:	2807883a 	mov	r3,r5
 181ed90:	20c6b03a 	or	r3,r4,r3
 181ed94:	10c00405 	stb	r3,16(r2)
 181ed98:	30ffffcc 	andi	r3,r6,65535
 181ed9c:	1806d23a 	srli	r3,r3,8
 181eda0:	197fffcc 	andi	r5,r3,65535
 181eda4:	10c00443 	ldbu	r3,17(r2)
 181eda8:	1806703a 	and	r3,r3,zero
 181edac:	1809883a 	mov	r4,r3
 181edb0:	2807883a 	mov	r3,r5
 181edb4:	20c6b03a 	or	r3,r4,r3
 181edb8:	10c00445 	stb	r3,17(r2)
        IP_PROTO_TCP, p->tot_len);
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 181edbc:	e13fff17 	ldw	r4,-4(fp)
 181edc0:	e0bfff17 	ldw	r2,-4(fp)
 181edc4:	11400104 	addi	r5,r2,4
 181edc8:	e0bfff17 	ldw	r2,-4(fp)
 181edcc:	10800283 	ldbu	r2,10(r2)
 181edd0:	11803fcc 	andi	r6,r2,255
 181edd4:	e0bfff17 	ldw	r2,-4(fp)
 181edd8:	10800243 	ldbu	r2,9(r2)
 181eddc:	10803fcc 	andi	r2,r2,255
 181ede0:	e0ffff17 	ldw	r3,-4(fp)
 181ede4:	18c002c4 	addi	r3,r3,11
 181ede8:	d8c00215 	stw	r3,8(sp)
 181edec:	00c00184 	movi	r3,6
 181edf0:	d8c00115 	stw	r3,4(sp)
 181edf4:	d8800015 	stw	r2,0(sp)
 181edf8:	300f883a 	mov	r7,r6
 181edfc:	280d883a 	mov	r6,r5
 181ee00:	200b883a 	mov	r5,r4
 181ee04:	e13ffd17 	ldw	r4,-12(fp)
 181ee08:	18326a00 	call	18326a0 <ip_output_hinted>
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
 181ee0c:	e13ffd17 	ldw	r4,-12(fp)
 181ee10:	181a22c0 	call	181a22c <pbuf_free>

  return ERR_OK;
 181ee14:	0005883a 	mov	r2,zero
}
 181ee18:	e037883a 	mov	sp,fp
 181ee1c:	dfc00117 	ldw	ra,4(sp)
 181ee20:	df000017 	ldw	fp,0(sp)
 181ee24:	dec00204 	addi	sp,sp,8
 181ee28:	f800283a 	ret

0181ee2c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 181ee2c:	defff804 	addi	sp,sp,-32
 181ee30:	dfc00715 	stw	ra,28(sp)
 181ee34:	df000615 	stw	fp,24(sp)
 181ee38:	df000604 	addi	fp,sp,24
 181ee3c:	e13fff15 	stw	r4,-4(fp)

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 181ee40:	d0e81d17 	ldw	r3,-24460(gp)
 181ee44:	e0bfff17 	ldw	r2,-4(fp)
 181ee48:	1880021e 	bne	r3,r2,181ee54 <tcp_output+0x28>
    return ERR_OK;
 181ee4c:	0005883a 	mov	r2,zero
 181ee50:	00029c06 	br	181f8c4 <tcp_output+0xa98>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 181ee54:	e0bfff17 	ldw	r2,-4(fp)
 181ee58:	10c0140b 	ldhu	r3,80(r2)
 181ee5c:	e0bfff17 	ldw	r2,-4(fp)
 181ee60:	1140190b 	ldhu	r5,100(r2)
 181ee64:	1809883a 	mov	r4,r3
 181ee68:	20bfffcc 	andi	r2,r4,65535
 181ee6c:	28ffffcc 	andi	r3,r5,65535
 181ee70:	1880012e 	bgeu	r3,r2,181ee78 <tcp_output+0x4c>
 181ee74:	2809883a 	mov	r4,r5
 181ee78:	20bfffcc 	andi	r2,r4,65535
 181ee7c:	e0bffd15 	stw	r2,-12(fp)

  seg = pcb->unsent;
 181ee80:	e0bfff17 	ldw	r2,-4(fp)
 181ee84:	10801c17 	ldw	r2,112(r2)
 181ee88:	e0bffa15 	stw	r2,-24(fp)
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 181ee8c:	e0bfff17 	ldw	r2,-4(fp)
 181ee90:	10800883 	ldbu	r2,34(r2)
 181ee94:	10803fcc 	andi	r2,r2,255
 181ee98:	1080008c 	andi	r2,r2,2
 181ee9c:	10004726 	beq	r2,zero,181efbc <tcp_output+0x190>
 181eea0:	e0bffa17 	ldw	r2,-24(fp)
 181eea4:	10004226 	beq	r2,zero,181efb0 <tcp_output+0x184>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 181eea8:	e0bffa17 	ldw	r2,-24(fp)
 181eeac:	10800417 	ldw	r2,16(r2)
 181eeb0:	10c00103 	ldbu	r3,4(r2)
 181eeb4:	11000143 	ldbu	r4,5(r2)
 181eeb8:	2008923a 	slli	r4,r4,8
 181eebc:	20c6b03a 	or	r3,r4,r3
 181eec0:	11000183 	ldbu	r4,6(r2)
 181eec4:	2008943a 	slli	r4,r4,16
 181eec8:	20c6b03a 	or	r3,r4,r3
 181eecc:	108001c3 	ldbu	r2,7(r2)
 181eed0:	1004963a 	slli	r2,r2,24
 181eed4:	10c4b03a 	or	r2,r2,r3
 181eed8:	1006d63a 	srli	r3,r2,24
 181eedc:	e0bffa17 	ldw	r2,-24(fp)
 181eee0:	10800417 	ldw	r2,16(r2)
 181eee4:	11000103 	ldbu	r4,4(r2)
 181eee8:	11400143 	ldbu	r5,5(r2)
 181eeec:	280a923a 	slli	r5,r5,8
 181eef0:	2908b03a 	or	r4,r5,r4
 181eef4:	11400183 	ldbu	r5,6(r2)
 181eef8:	280a943a 	slli	r5,r5,16
 181eefc:	2908b03a 	or	r4,r5,r4
 181ef00:	108001c3 	ldbu	r2,7(r2)
 181ef04:	1004963a 	slli	r2,r2,24
 181ef08:	1104b03a 	or	r2,r2,r4
 181ef0c:	1004d23a 	srli	r2,r2,8
 181ef10:	10bfc00c 	andi	r2,r2,65280
 181ef14:	1886b03a 	or	r3,r3,r2
 181ef18:	e0bffa17 	ldw	r2,-24(fp)
 181ef1c:	10800417 	ldw	r2,16(r2)
 181ef20:	11000103 	ldbu	r4,4(r2)
 181ef24:	11400143 	ldbu	r5,5(r2)
 181ef28:	280a923a 	slli	r5,r5,8
 181ef2c:	2908b03a 	or	r4,r5,r4
 181ef30:	11400183 	ldbu	r5,6(r2)
 181ef34:	280a943a 	slli	r5,r5,16
 181ef38:	2908b03a 	or	r4,r5,r4
 181ef3c:	108001c3 	ldbu	r2,7(r2)
 181ef40:	1004963a 	slli	r2,r2,24
 181ef44:	1104b03a 	or	r2,r2,r4
 181ef48:	10bfc00c 	andi	r2,r2,65280
 181ef4c:	1004923a 	slli	r2,r2,8
 181ef50:	1886b03a 	or	r3,r3,r2
 181ef54:	e0bffa17 	ldw	r2,-24(fp)
 181ef58:	10800417 	ldw	r2,16(r2)
 181ef5c:	11000103 	ldbu	r4,4(r2)
 181ef60:	11400143 	ldbu	r5,5(r2)
 181ef64:	280a923a 	slli	r5,r5,8
 181ef68:	2908b03a 	or	r4,r5,r4
 181ef6c:	11400183 	ldbu	r5,6(r2)
 181ef70:	280a943a 	slli	r5,r5,16
 181ef74:	2908b03a 	or	r4,r5,r4
 181ef78:	108001c3 	ldbu	r2,7(r2)
 181ef7c:	1004963a 	slli	r2,r2,24
 181ef80:	1104b03a 	or	r2,r2,r4
 181ef84:	1004963a 	slli	r2,r2,24
 181ef88:	1886b03a 	or	r3,r3,r2
 181ef8c:	e0bfff17 	ldw	r2,-4(fp)
 181ef90:	10801317 	ldw	r2,76(r2)
 181ef94:	1887c83a 	sub	r3,r3,r2
 181ef98:	e0bffa17 	ldw	r2,-24(fp)
 181ef9c:	1080020b 	ldhu	r2,8(r2)
 181efa0:	10bfffcc 	andi	r2,r2,65535
 181efa4:	1885883a 	add	r2,r3,r2
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
 181efa8:	e0fffd17 	ldw	r3,-12(fp)
 181efac:	1880032e 	bgeu	r3,r2,181efbc <tcp_output+0x190>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 181efb0:	e13fff17 	ldw	r4,-4(fp)
 181efb4:	181ec900 	call	181ec90 <tcp_send_empty_ack>
 181efb8:	00024206 	br	181f8c4 <tcp_output+0xa98>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 181efbc:	e0bfff17 	ldw	r2,-4(fp)
 181efc0:	10801d17 	ldw	r2,116(r2)
 181efc4:	e0bffb15 	stw	r2,-20(fp)
  if (useg != NULL) {
 181efc8:	e0bffb17 	ldw	r2,-20(fp)
 181efcc:	1001eb26 	beq	r2,zero,181f77c <tcp_output+0x950>
    for (; useg->next != NULL; useg = useg->next);
 181efd0:	00000306 	br	181efe0 <tcp_output+0x1b4>
 181efd4:	e0bffb17 	ldw	r2,-20(fp)
 181efd8:	10800017 	ldw	r2,0(r2)
 181efdc:	e0bffb15 	stw	r2,-20(fp)
 181efe0:	e0bffb17 	ldw	r2,-20(fp)
 181efe4:	10800017 	ldw	r2,0(r2)
 181efe8:	103ffa1e 	bne	r2,zero,181efd4 <__ram_exceptions_end+0xff80ece4>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 181efec:	0001e306 	br	181f77c <tcp_output+0x950>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 181eff0:	e0bfff17 	ldw	r2,-4(fp)
 181eff4:	10801d17 	ldw	r2,116(r2)
 181eff8:	10001d26 	beq	r2,zero,181f070 <tcp_output+0x244>
 181effc:	e0bfff17 	ldw	r2,-4(fp)
 181f000:	10800883 	ldbu	r2,34(r2)
 181f004:	10803fcc 	andi	r2,r2,255
 181f008:	1080110c 	andi	r2,r2,68
 181f00c:	1000181e 	bne	r2,zero,181f070 <tcp_output+0x244>
 181f010:	e0bfff17 	ldw	r2,-4(fp)
 181f014:	10801c17 	ldw	r2,112(r2)
 181f018:	10000c26 	beq	r2,zero,181f04c <tcp_output+0x220>
 181f01c:	e0bfff17 	ldw	r2,-4(fp)
 181f020:	10801c17 	ldw	r2,112(r2)
 181f024:	10800017 	ldw	r2,0(r2)
 181f028:	1000111e 	bne	r2,zero,181f070 <tcp_output+0x244>
 181f02c:	e0bfff17 	ldw	r2,-4(fp)
 181f030:	10801c17 	ldw	r2,112(r2)
 181f034:	10c0020b 	ldhu	r3,8(r2)
 181f038:	e0bfff17 	ldw	r2,-4(fp)
 181f03c:	10800e8b 	ldhu	r2,58(r2)
 181f040:	18ffffcc 	andi	r3,r3,65535
 181f044:	10bfffcc 	andi	r2,r2,65535
 181f048:	1880092e 	bgeu	r3,r2,181f070 <tcp_output+0x244>
 181f04c:	e0bfff17 	ldw	r2,-4(fp)
 181f050:	10801a8b 	ldhu	r2,106(r2)
 181f054:	10bfffcc 	andi	r2,r2,65535
 181f058:	10000526 	beq	r2,zero,181f070 <tcp_output+0x244>
 181f05c:	e0bfff17 	ldw	r2,-4(fp)
 181f060:	10801b0b 	ldhu	r2,108(r2)
 181f064:	10bfffcc 	andi	r2,r2,65535
 181f068:	10800230 	cmpltui	r2,r2,8
 181f06c:	1000021e 	bne	r2,zero,181f078 <tcp_output+0x24c>
 181f070:	00800044 	movi	r2,1
 181f074:	00000106 	br	181f07c <tcp_output+0x250>
 181f078:	0005883a 	mov	r2,zero
 181f07c:	1000051e 	bne	r2,zero,181f094 <tcp_output+0x268>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
 181f080:	e0bfff17 	ldw	r2,-4(fp)
 181f084:	10800883 	ldbu	r2,34(r2)
 181f088:	10803fcc 	andi	r2,r2,255
 181f08c:	1080280c 	andi	r2,r2,160
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 181f090:	1001ff26 	beq	r2,zero,181f890 <tcp_output+0xa64>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
 181f094:	e0bffa17 	ldw	r2,-24(fp)
 181f098:	10c00017 	ldw	r3,0(r2)
 181f09c:	e0bfff17 	ldw	r2,-4(fp)
 181f0a0:	10c01c15 	stw	r3,112(r2)

    if (pcb->state != SYN_SENT) {
 181f0a4:	e0bfff17 	ldw	r2,-4(fp)
 181f0a8:	10800617 	ldw	r2,24(r2)
 181f0ac:	108000a0 	cmpeqi	r2,r2,2
 181f0b0:	1000221e 	bne	r2,zero,181f13c <tcp_output+0x310>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 181f0b4:	e0bffa17 	ldw	r2,-24(fp)
 181f0b8:	10800417 	ldw	r2,16(r2)
 181f0bc:	e0fffa17 	ldw	r3,-24(fp)
 181f0c0:	18c00417 	ldw	r3,16(r3)
 181f0c4:	19000303 	ldbu	r4,12(r3)
 181f0c8:	18c00343 	ldbu	r3,13(r3)
 181f0cc:	1806923a 	slli	r3,r3,8
 181f0d0:	1906b03a 	or	r3,r3,r4
 181f0d4:	18c40014 	ori	r3,r3,4096
 181f0d8:	180d883a 	mov	r6,r3
 181f0dc:	30ffffcc 	andi	r3,r6,65535
 181f0e0:	19403fcc 	andi	r5,r3,255
 181f0e4:	10c00303 	ldbu	r3,12(r2)
 181f0e8:	1806703a 	and	r3,r3,zero
 181f0ec:	1809883a 	mov	r4,r3
 181f0f0:	2807883a 	mov	r3,r5
 181f0f4:	20c6b03a 	or	r3,r4,r3
 181f0f8:	10c00305 	stb	r3,12(r2)
 181f0fc:	30ffffcc 	andi	r3,r6,65535
 181f100:	1806d23a 	srli	r3,r3,8
 181f104:	197fffcc 	andi	r5,r3,65535
 181f108:	10c00343 	ldbu	r3,13(r2)
 181f10c:	1806703a 	and	r3,r3,zero
 181f110:	1809883a 	mov	r4,r3
 181f114:	2807883a 	mov	r3,r5
 181f118:	20c6b03a 	or	r3,r4,r3
 181f11c:	10c00345 	stb	r3,13(r2)
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 181f120:	e0bfff17 	ldw	r2,-4(fp)
 181f124:	10c00883 	ldbu	r3,34(r2)
 181f128:	00bfff04 	movi	r2,-4
 181f12c:	1884703a 	and	r2,r3,r2
 181f130:	1007883a 	mov	r3,r2
 181f134:	e0bfff17 	ldw	r2,-4(fp)
 181f138:	10c00885 	stb	r3,34(r2)
    }

    tcp_output_segment(seg, pcb);
 181f13c:	e17fff17 	ldw	r5,-4(fp)
 181f140:	e13ffa17 	ldw	r4,-24(fp)
 181f144:	181f8d80 	call	181f8d8 <tcp_output_segment>
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 181f148:	e0bffa17 	ldw	r2,-24(fp)
 181f14c:	10800417 	ldw	r2,16(r2)
 181f150:	10c00103 	ldbu	r3,4(r2)
 181f154:	11000143 	ldbu	r4,5(r2)
 181f158:	2008923a 	slli	r4,r4,8
 181f15c:	20c6b03a 	or	r3,r4,r3
 181f160:	11000183 	ldbu	r4,6(r2)
 181f164:	2008943a 	slli	r4,r4,16
 181f168:	20c6b03a 	or	r3,r4,r3
 181f16c:	108001c3 	ldbu	r2,7(r2)
 181f170:	1004963a 	slli	r2,r2,24
 181f174:	10c4b03a 	or	r2,r2,r3
 181f178:	1006d63a 	srli	r3,r2,24
 181f17c:	e0bffa17 	ldw	r2,-24(fp)
 181f180:	10800417 	ldw	r2,16(r2)
 181f184:	11000103 	ldbu	r4,4(r2)
 181f188:	11400143 	ldbu	r5,5(r2)
 181f18c:	280a923a 	slli	r5,r5,8
 181f190:	2908b03a 	or	r4,r5,r4
 181f194:	11400183 	ldbu	r5,6(r2)
 181f198:	280a943a 	slli	r5,r5,16
 181f19c:	2908b03a 	or	r4,r5,r4
 181f1a0:	108001c3 	ldbu	r2,7(r2)
 181f1a4:	1004963a 	slli	r2,r2,24
 181f1a8:	1104b03a 	or	r2,r2,r4
 181f1ac:	1004d23a 	srli	r2,r2,8
 181f1b0:	10bfc00c 	andi	r2,r2,65280
 181f1b4:	1886b03a 	or	r3,r3,r2
 181f1b8:	e0bffa17 	ldw	r2,-24(fp)
 181f1bc:	10800417 	ldw	r2,16(r2)
 181f1c0:	11000103 	ldbu	r4,4(r2)
 181f1c4:	11400143 	ldbu	r5,5(r2)
 181f1c8:	280a923a 	slli	r5,r5,8
 181f1cc:	2908b03a 	or	r4,r5,r4
 181f1d0:	11400183 	ldbu	r5,6(r2)
 181f1d4:	280a943a 	slli	r5,r5,16
 181f1d8:	2908b03a 	or	r4,r5,r4
 181f1dc:	108001c3 	ldbu	r2,7(r2)
 181f1e0:	1004963a 	slli	r2,r2,24
 181f1e4:	1104b03a 	or	r2,r2,r4
 181f1e8:	10bfc00c 	andi	r2,r2,65280
 181f1ec:	1004923a 	slli	r2,r2,8
 181f1f0:	1886b03a 	or	r3,r3,r2
 181f1f4:	e0bffa17 	ldw	r2,-24(fp)
 181f1f8:	10800417 	ldw	r2,16(r2)
 181f1fc:	11000103 	ldbu	r4,4(r2)
 181f200:	11400143 	ldbu	r5,5(r2)
 181f204:	280a923a 	slli	r5,r5,8
 181f208:	2908b03a 	or	r4,r5,r4
 181f20c:	11400183 	ldbu	r5,6(r2)
 181f210:	280a943a 	slli	r5,r5,16
 181f214:	2908b03a 	or	r4,r5,r4
 181f218:	108001c3 	ldbu	r2,7(r2)
 181f21c:	1004963a 	slli	r2,r2,24
 181f220:	1104b03a 	or	r2,r2,r4
 181f224:	1004963a 	slli	r2,r2,24
 181f228:	1886b03a 	or	r3,r3,r2
 181f22c:	e0bffa17 	ldw	r2,-24(fp)
 181f230:	1080020b 	ldhu	r2,8(r2)
 181f234:	113fffcc 	andi	r4,r2,65535
 181f238:	e0bffa17 	ldw	r2,-24(fp)
 181f23c:	10800417 	ldw	r2,16(r2)
 181f240:	11400303 	ldbu	r5,12(r2)
 181f244:	10800343 	ldbu	r2,13(r2)
 181f248:	1004923a 	slli	r2,r2,8
 181f24c:	1144b03a 	or	r2,r2,r5
 181f250:	10bfffcc 	andi	r2,r2,65535
 181f254:	1004d23a 	srli	r2,r2,8
 181f258:	117fffcc 	andi	r5,r2,65535
 181f25c:	e0bffa17 	ldw	r2,-24(fp)
 181f260:	10800417 	ldw	r2,16(r2)
 181f264:	11800303 	ldbu	r6,12(r2)
 181f268:	10800343 	ldbu	r2,13(r2)
 181f26c:	1004923a 	slli	r2,r2,8
 181f270:	1184b03a 	or	r2,r2,r6
 181f274:	10bfffcc 	andi	r2,r2,65535
 181f278:	1004923a 	slli	r2,r2,8
 181f27c:	10bfffcc 	andi	r2,r2,65535
 181f280:	2884b03a 	or	r2,r5,r2
 181f284:	108000cc 	andi	r2,r2,3
 181f288:	1004c03a 	cmpne	r2,r2,zero
 181f28c:	10803fcc 	andi	r2,r2,255
 181f290:	2085883a 	add	r2,r4,r2
 181f294:	1885883a 	add	r2,r3,r2
 181f298:	e0bffe15 	stw	r2,-8(fp)
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 181f29c:	e0bfff17 	ldw	r2,-4(fp)
 181f2a0:	10c01517 	ldw	r3,84(r2)
 181f2a4:	e0bffe17 	ldw	r2,-8(fp)
 181f2a8:	1885c83a 	sub	r2,r3,r2
 181f2ac:	1000030e 	bge	r2,zero,181f2bc <tcp_output+0x490>
      pcb->snd_nxt = snd_nxt;
 181f2b0:	e0bfff17 	ldw	r2,-4(fp)
 181f2b4:	e0fffe17 	ldw	r3,-8(fp)
 181f2b8:	10c01515 	stw	r3,84(r2)
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 181f2bc:	e0bffa17 	ldw	r2,-24(fp)
 181f2c0:	1080020b 	ldhu	r2,8(r2)
 181f2c4:	10ffffcc 	andi	r3,r2,65535
 181f2c8:	e0bffa17 	ldw	r2,-24(fp)
 181f2cc:	10800417 	ldw	r2,16(r2)
 181f2d0:	11000303 	ldbu	r4,12(r2)
 181f2d4:	10800343 	ldbu	r2,13(r2)
 181f2d8:	1004923a 	slli	r2,r2,8
 181f2dc:	1104b03a 	or	r2,r2,r4
 181f2e0:	10bfffcc 	andi	r2,r2,65535
 181f2e4:	1004d23a 	srli	r2,r2,8
 181f2e8:	113fffcc 	andi	r4,r2,65535
 181f2ec:	e0bffa17 	ldw	r2,-24(fp)
 181f2f0:	10800417 	ldw	r2,16(r2)
 181f2f4:	11400303 	ldbu	r5,12(r2)
 181f2f8:	10800343 	ldbu	r2,13(r2)
 181f2fc:	1004923a 	slli	r2,r2,8
 181f300:	1144b03a 	or	r2,r2,r5
 181f304:	10bfffcc 	andi	r2,r2,65535
 181f308:	1004923a 	slli	r2,r2,8
 181f30c:	10bfffcc 	andi	r2,r2,65535
 181f310:	2084b03a 	or	r2,r4,r2
 181f314:	108000cc 	andi	r2,r2,3
 181f318:	1004c03a 	cmpne	r2,r2,zero
 181f31c:	10803fcc 	andi	r2,r2,255
 181f320:	1885883a 	add	r2,r3,r2
 181f324:	0081100e 	bge	zero,r2,181f768 <tcp_output+0x93c>
      seg->next = NULL;
 181f328:	e0bffa17 	ldw	r2,-24(fp)
 181f32c:	10000015 	stw	zero,0(r2)
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 181f330:	e0bfff17 	ldw	r2,-4(fp)
 181f334:	10801d17 	ldw	r2,116(r2)
 181f338:	1000061e 	bne	r2,zero,181f354 <tcp_output+0x528>
        pcb->unacked = seg;
 181f33c:	e0bfff17 	ldw	r2,-4(fp)
 181f340:	e0fffa17 	ldw	r3,-24(fp)
 181f344:	10c01d15 	stw	r3,116(r2)
        useg = seg;
 181f348:	e0bffa17 	ldw	r2,-24(fp)
 181f34c:	e0bffb15 	stw	r2,-20(fp)
 181f350:	00010706 	br	181f770 <tcp_output+0x944>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 181f354:	e0bffa17 	ldw	r2,-24(fp)
 181f358:	10800417 	ldw	r2,16(r2)
 181f35c:	10c00103 	ldbu	r3,4(r2)
 181f360:	11000143 	ldbu	r4,5(r2)
 181f364:	2008923a 	slli	r4,r4,8
 181f368:	20c6b03a 	or	r3,r4,r3
 181f36c:	11000183 	ldbu	r4,6(r2)
 181f370:	2008943a 	slli	r4,r4,16
 181f374:	20c6b03a 	or	r3,r4,r3
 181f378:	108001c3 	ldbu	r2,7(r2)
 181f37c:	1004963a 	slli	r2,r2,24
 181f380:	10c4b03a 	or	r2,r2,r3
 181f384:	1006d63a 	srli	r3,r2,24
 181f388:	e0bffa17 	ldw	r2,-24(fp)
 181f38c:	10800417 	ldw	r2,16(r2)
 181f390:	11000103 	ldbu	r4,4(r2)
 181f394:	11400143 	ldbu	r5,5(r2)
 181f398:	280a923a 	slli	r5,r5,8
 181f39c:	2908b03a 	or	r4,r5,r4
 181f3a0:	11400183 	ldbu	r5,6(r2)
 181f3a4:	280a943a 	slli	r5,r5,16
 181f3a8:	2908b03a 	or	r4,r5,r4
 181f3ac:	108001c3 	ldbu	r2,7(r2)
 181f3b0:	1004963a 	slli	r2,r2,24
 181f3b4:	1104b03a 	or	r2,r2,r4
 181f3b8:	1004d23a 	srli	r2,r2,8
 181f3bc:	10bfc00c 	andi	r2,r2,65280
 181f3c0:	1886b03a 	or	r3,r3,r2
 181f3c4:	e0bffa17 	ldw	r2,-24(fp)
 181f3c8:	10800417 	ldw	r2,16(r2)
 181f3cc:	11000103 	ldbu	r4,4(r2)
 181f3d0:	11400143 	ldbu	r5,5(r2)
 181f3d4:	280a923a 	slli	r5,r5,8
 181f3d8:	2908b03a 	or	r4,r5,r4
 181f3dc:	11400183 	ldbu	r5,6(r2)
 181f3e0:	280a943a 	slli	r5,r5,16
 181f3e4:	2908b03a 	or	r4,r5,r4
 181f3e8:	108001c3 	ldbu	r2,7(r2)
 181f3ec:	1004963a 	slli	r2,r2,24
 181f3f0:	1104b03a 	or	r2,r2,r4
 181f3f4:	10bfc00c 	andi	r2,r2,65280
 181f3f8:	1004923a 	slli	r2,r2,8
 181f3fc:	1886b03a 	or	r3,r3,r2
 181f400:	e0bffa17 	ldw	r2,-24(fp)
 181f404:	10800417 	ldw	r2,16(r2)
 181f408:	11000103 	ldbu	r4,4(r2)
 181f40c:	11400143 	ldbu	r5,5(r2)
 181f410:	280a923a 	slli	r5,r5,8
 181f414:	2908b03a 	or	r4,r5,r4
 181f418:	11400183 	ldbu	r5,6(r2)
 181f41c:	280a943a 	slli	r5,r5,16
 181f420:	2908b03a 	or	r4,r5,r4
 181f424:	108001c3 	ldbu	r2,7(r2)
 181f428:	1004963a 	slli	r2,r2,24
 181f42c:	1104b03a 	or	r2,r2,r4
 181f430:	1004963a 	slli	r2,r2,24
 181f434:	1886b03a 	or	r3,r3,r2
 181f438:	e0bffb17 	ldw	r2,-20(fp)
 181f43c:	10800417 	ldw	r2,16(r2)
 181f440:	11000103 	ldbu	r4,4(r2)
 181f444:	11400143 	ldbu	r5,5(r2)
 181f448:	280a923a 	slli	r5,r5,8
 181f44c:	2908b03a 	or	r4,r5,r4
 181f450:	11400183 	ldbu	r5,6(r2)
 181f454:	280a943a 	slli	r5,r5,16
 181f458:	2908b03a 	or	r4,r5,r4
 181f45c:	108001c3 	ldbu	r2,7(r2)
 181f460:	1004963a 	slli	r2,r2,24
 181f464:	1104b03a 	or	r2,r2,r4
 181f468:	1008d63a 	srli	r4,r2,24
 181f46c:	e0bffb17 	ldw	r2,-20(fp)
 181f470:	10800417 	ldw	r2,16(r2)
 181f474:	11400103 	ldbu	r5,4(r2)
 181f478:	11800143 	ldbu	r6,5(r2)
 181f47c:	300c923a 	slli	r6,r6,8
 181f480:	314ab03a 	or	r5,r6,r5
 181f484:	11800183 	ldbu	r6,6(r2)
 181f488:	300c943a 	slli	r6,r6,16
 181f48c:	314ab03a 	or	r5,r6,r5
 181f490:	108001c3 	ldbu	r2,7(r2)
 181f494:	1004963a 	slli	r2,r2,24
 181f498:	1144b03a 	or	r2,r2,r5
 181f49c:	1004d23a 	srli	r2,r2,8
 181f4a0:	10bfc00c 	andi	r2,r2,65280
 181f4a4:	2088b03a 	or	r4,r4,r2
 181f4a8:	e0bffb17 	ldw	r2,-20(fp)
 181f4ac:	10800417 	ldw	r2,16(r2)
 181f4b0:	11400103 	ldbu	r5,4(r2)
 181f4b4:	11800143 	ldbu	r6,5(r2)
 181f4b8:	300c923a 	slli	r6,r6,8
 181f4bc:	314ab03a 	or	r5,r6,r5
 181f4c0:	11800183 	ldbu	r6,6(r2)
 181f4c4:	300c943a 	slli	r6,r6,16
 181f4c8:	314ab03a 	or	r5,r6,r5
 181f4cc:	108001c3 	ldbu	r2,7(r2)
 181f4d0:	1004963a 	slli	r2,r2,24
 181f4d4:	1144b03a 	or	r2,r2,r5
 181f4d8:	10bfc00c 	andi	r2,r2,65280
 181f4dc:	1004923a 	slli	r2,r2,8
 181f4e0:	2088b03a 	or	r4,r4,r2
 181f4e4:	e0bffb17 	ldw	r2,-20(fp)
 181f4e8:	10800417 	ldw	r2,16(r2)
 181f4ec:	11400103 	ldbu	r5,4(r2)
 181f4f0:	11800143 	ldbu	r6,5(r2)
 181f4f4:	300c923a 	slli	r6,r6,8
 181f4f8:	314ab03a 	or	r5,r6,r5
 181f4fc:	11800183 	ldbu	r6,6(r2)
 181f500:	300c943a 	slli	r6,r6,16
 181f504:	314ab03a 	or	r5,r6,r5
 181f508:	108001c3 	ldbu	r2,7(r2)
 181f50c:	1004963a 	slli	r2,r2,24
 181f510:	1144b03a 	or	r2,r2,r5
 181f514:	1004963a 	slli	r2,r2,24
 181f518:	2084b03a 	or	r2,r4,r2
 181f51c:	1885c83a 	sub	r2,r3,r2
 181f520:	10008a0e 	bge	r2,zero,181f74c <tcp_output+0x920>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 181f524:	e0bfff17 	ldw	r2,-4(fp)
 181f528:	10801d04 	addi	r2,r2,116
 181f52c:	e0bffc15 	stw	r2,-16(fp)
          while (*cur_seg &&
 181f530:	00000306 	br	181f540 <tcp_output+0x714>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 181f534:	e0bffc17 	ldw	r2,-16(fp)
 181f538:	10800017 	ldw	r2,0(r2)
 181f53c:	e0bffc15 	stw	r2,-16(fp)
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 181f540:	e0bffc17 	ldw	r2,-16(fp)
 181f544:	10800017 	ldw	r2,0(r2)
 181f548:	10007826 	beq	r2,zero,181f72c <tcp_output+0x900>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 181f54c:	e0bffc17 	ldw	r2,-16(fp)
 181f550:	10800017 	ldw	r2,0(r2)
 181f554:	10800417 	ldw	r2,16(r2)
 181f558:	10c00103 	ldbu	r3,4(r2)
 181f55c:	11000143 	ldbu	r4,5(r2)
 181f560:	2008923a 	slli	r4,r4,8
 181f564:	20c6b03a 	or	r3,r4,r3
 181f568:	11000183 	ldbu	r4,6(r2)
 181f56c:	2008943a 	slli	r4,r4,16
 181f570:	20c6b03a 	or	r3,r4,r3
 181f574:	108001c3 	ldbu	r2,7(r2)
 181f578:	1004963a 	slli	r2,r2,24
 181f57c:	10c4b03a 	or	r2,r2,r3
 181f580:	1006d63a 	srli	r3,r2,24
 181f584:	e0bffc17 	ldw	r2,-16(fp)
 181f588:	10800017 	ldw	r2,0(r2)
 181f58c:	10800417 	ldw	r2,16(r2)
 181f590:	11000103 	ldbu	r4,4(r2)
 181f594:	11400143 	ldbu	r5,5(r2)
 181f598:	280a923a 	slli	r5,r5,8
 181f59c:	2908b03a 	or	r4,r5,r4
 181f5a0:	11400183 	ldbu	r5,6(r2)
 181f5a4:	280a943a 	slli	r5,r5,16
 181f5a8:	2908b03a 	or	r4,r5,r4
 181f5ac:	108001c3 	ldbu	r2,7(r2)
 181f5b0:	1004963a 	slli	r2,r2,24
 181f5b4:	1104b03a 	or	r2,r2,r4
 181f5b8:	1004d23a 	srli	r2,r2,8
 181f5bc:	10bfc00c 	andi	r2,r2,65280
 181f5c0:	1886b03a 	or	r3,r3,r2
 181f5c4:	e0bffc17 	ldw	r2,-16(fp)
 181f5c8:	10800017 	ldw	r2,0(r2)
 181f5cc:	10800417 	ldw	r2,16(r2)
 181f5d0:	11000103 	ldbu	r4,4(r2)
 181f5d4:	11400143 	ldbu	r5,5(r2)
 181f5d8:	280a923a 	slli	r5,r5,8
 181f5dc:	2908b03a 	or	r4,r5,r4
 181f5e0:	11400183 	ldbu	r5,6(r2)
 181f5e4:	280a943a 	slli	r5,r5,16
 181f5e8:	2908b03a 	or	r4,r5,r4
 181f5ec:	108001c3 	ldbu	r2,7(r2)
 181f5f0:	1004963a 	slli	r2,r2,24
 181f5f4:	1104b03a 	or	r2,r2,r4
 181f5f8:	10bfc00c 	andi	r2,r2,65280
 181f5fc:	1004923a 	slli	r2,r2,8
 181f600:	1886b03a 	or	r3,r3,r2
 181f604:	e0bffc17 	ldw	r2,-16(fp)
 181f608:	10800017 	ldw	r2,0(r2)
 181f60c:	10800417 	ldw	r2,16(r2)
 181f610:	11000103 	ldbu	r4,4(r2)
 181f614:	11400143 	ldbu	r5,5(r2)
 181f618:	280a923a 	slli	r5,r5,8
 181f61c:	2908b03a 	or	r4,r5,r4
 181f620:	11400183 	ldbu	r5,6(r2)
 181f624:	280a943a 	slli	r5,r5,16
 181f628:	2908b03a 	or	r4,r5,r4
 181f62c:	108001c3 	ldbu	r2,7(r2)
 181f630:	1004963a 	slli	r2,r2,24
 181f634:	1104b03a 	or	r2,r2,r4
 181f638:	1004963a 	slli	r2,r2,24
 181f63c:	1886b03a 	or	r3,r3,r2
 181f640:	e0bffa17 	ldw	r2,-24(fp)
 181f644:	10800417 	ldw	r2,16(r2)
 181f648:	11000103 	ldbu	r4,4(r2)
 181f64c:	11400143 	ldbu	r5,5(r2)
 181f650:	280a923a 	slli	r5,r5,8
 181f654:	2908b03a 	or	r4,r5,r4
 181f658:	11400183 	ldbu	r5,6(r2)
 181f65c:	280a943a 	slli	r5,r5,16
 181f660:	2908b03a 	or	r4,r5,r4
 181f664:	108001c3 	ldbu	r2,7(r2)
 181f668:	1004963a 	slli	r2,r2,24
 181f66c:	1104b03a 	or	r2,r2,r4
 181f670:	1008d63a 	srli	r4,r2,24
 181f674:	e0bffa17 	ldw	r2,-24(fp)
 181f678:	10800417 	ldw	r2,16(r2)
 181f67c:	11400103 	ldbu	r5,4(r2)
 181f680:	11800143 	ldbu	r6,5(r2)
 181f684:	300c923a 	slli	r6,r6,8
 181f688:	314ab03a 	or	r5,r6,r5
 181f68c:	11800183 	ldbu	r6,6(r2)
 181f690:	300c943a 	slli	r6,r6,16
 181f694:	314ab03a 	or	r5,r6,r5
 181f698:	108001c3 	ldbu	r2,7(r2)
 181f69c:	1004963a 	slli	r2,r2,24
 181f6a0:	1144b03a 	or	r2,r2,r5
 181f6a4:	1004d23a 	srli	r2,r2,8
 181f6a8:	10bfc00c 	andi	r2,r2,65280
 181f6ac:	2088b03a 	or	r4,r4,r2
 181f6b0:	e0bffa17 	ldw	r2,-24(fp)
 181f6b4:	10800417 	ldw	r2,16(r2)
 181f6b8:	11400103 	ldbu	r5,4(r2)
 181f6bc:	11800143 	ldbu	r6,5(r2)
 181f6c0:	300c923a 	slli	r6,r6,8
 181f6c4:	314ab03a 	or	r5,r6,r5
 181f6c8:	11800183 	ldbu	r6,6(r2)
 181f6cc:	300c943a 	slli	r6,r6,16
 181f6d0:	314ab03a 	or	r5,r6,r5
 181f6d4:	108001c3 	ldbu	r2,7(r2)
 181f6d8:	1004963a 	slli	r2,r2,24
 181f6dc:	1144b03a 	or	r2,r2,r5
 181f6e0:	10bfc00c 	andi	r2,r2,65280
 181f6e4:	1004923a 	slli	r2,r2,8
 181f6e8:	2088b03a 	or	r4,r4,r2
 181f6ec:	e0bffa17 	ldw	r2,-24(fp)
 181f6f0:	10800417 	ldw	r2,16(r2)
 181f6f4:	11400103 	ldbu	r5,4(r2)
 181f6f8:	11800143 	ldbu	r6,5(r2)
 181f6fc:	300c923a 	slli	r6,r6,8
 181f700:	314ab03a 	or	r5,r6,r5
 181f704:	11800183 	ldbu	r6,6(r2)
 181f708:	300c943a 	slli	r6,r6,16
 181f70c:	314ab03a 	or	r5,r6,r5
 181f710:	108001c3 	ldbu	r2,7(r2)
 181f714:	1004963a 	slli	r2,r2,24
 181f718:	1144b03a 	or	r2,r2,r5
 181f71c:	1004963a 	slli	r2,r2,24
 181f720:	2084b03a 	or	r2,r4,r2
 181f724:	1885c83a 	sub	r2,r3,r2
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 181f728:	103f8216 	blt	r2,zero,181f534 <__ram_exceptions_end+0xff80f244>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
 181f72c:	e0bffc17 	ldw	r2,-16(fp)
 181f730:	10c00017 	ldw	r3,0(r2)
 181f734:	e0bffa17 	ldw	r2,-24(fp)
 181f738:	10c00015 	stw	r3,0(r2)
          (*cur_seg) = seg;
 181f73c:	e0bffc17 	ldw	r2,-16(fp)
 181f740:	e0fffa17 	ldw	r3,-24(fp)
 181f744:	10c00015 	stw	r3,0(r2)
 181f748:	00000906 	br	181f770 <tcp_output+0x944>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 181f74c:	e0bffb17 	ldw	r2,-20(fp)
 181f750:	e0fffa17 	ldw	r3,-24(fp)
 181f754:	10c00015 	stw	r3,0(r2)
          useg = useg->next;
 181f758:	e0bffb17 	ldw	r2,-20(fp)
 181f75c:	10800017 	ldw	r2,0(r2)
 181f760:	e0bffb15 	stw	r2,-20(fp)
 181f764:	00000206 	br	181f770 <tcp_output+0x944>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 181f768:	e13ffa17 	ldw	r4,-24(fp)
 181f76c:	181cad80 	call	181cad8 <tcp_seg_free>
    }
    seg = pcb->unsent;
 181f770:	e0bfff17 	ldw	r2,-4(fp)
 181f774:	10801c17 	ldw	r2,112(r2)
 181f778:	e0bffa15 	stw	r2,-24(fp)
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 181f77c:	e0bffa17 	ldw	r2,-24(fp)
 181f780:	10004426 	beq	r2,zero,181f894 <tcp_output+0xa68>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 181f784:	e0bffa17 	ldw	r2,-24(fp)
 181f788:	10800417 	ldw	r2,16(r2)
 181f78c:	10c00103 	ldbu	r3,4(r2)
 181f790:	11000143 	ldbu	r4,5(r2)
 181f794:	2008923a 	slli	r4,r4,8
 181f798:	20c6b03a 	or	r3,r4,r3
 181f79c:	11000183 	ldbu	r4,6(r2)
 181f7a0:	2008943a 	slli	r4,r4,16
 181f7a4:	20c6b03a 	or	r3,r4,r3
 181f7a8:	108001c3 	ldbu	r2,7(r2)
 181f7ac:	1004963a 	slli	r2,r2,24
 181f7b0:	10c4b03a 	or	r2,r2,r3
 181f7b4:	1006d63a 	srli	r3,r2,24
 181f7b8:	e0bffa17 	ldw	r2,-24(fp)
 181f7bc:	10800417 	ldw	r2,16(r2)
 181f7c0:	11000103 	ldbu	r4,4(r2)
 181f7c4:	11400143 	ldbu	r5,5(r2)
 181f7c8:	280a923a 	slli	r5,r5,8
 181f7cc:	2908b03a 	or	r4,r5,r4
 181f7d0:	11400183 	ldbu	r5,6(r2)
 181f7d4:	280a943a 	slli	r5,r5,16
 181f7d8:	2908b03a 	or	r4,r5,r4
 181f7dc:	108001c3 	ldbu	r2,7(r2)
 181f7e0:	1004963a 	slli	r2,r2,24
 181f7e4:	1104b03a 	or	r2,r2,r4
 181f7e8:	1004d23a 	srli	r2,r2,8
 181f7ec:	10bfc00c 	andi	r2,r2,65280
 181f7f0:	1886b03a 	or	r3,r3,r2
 181f7f4:	e0bffa17 	ldw	r2,-24(fp)
 181f7f8:	10800417 	ldw	r2,16(r2)
 181f7fc:	11000103 	ldbu	r4,4(r2)
 181f800:	11400143 	ldbu	r5,5(r2)
 181f804:	280a923a 	slli	r5,r5,8
 181f808:	2908b03a 	or	r4,r5,r4
 181f80c:	11400183 	ldbu	r5,6(r2)
 181f810:	280a943a 	slli	r5,r5,16
 181f814:	2908b03a 	or	r4,r5,r4
 181f818:	108001c3 	ldbu	r2,7(r2)
 181f81c:	1004963a 	slli	r2,r2,24
 181f820:	1104b03a 	or	r2,r2,r4
 181f824:	10bfc00c 	andi	r2,r2,65280
 181f828:	1004923a 	slli	r2,r2,8
 181f82c:	1886b03a 	or	r3,r3,r2
 181f830:	e0bffa17 	ldw	r2,-24(fp)
 181f834:	10800417 	ldw	r2,16(r2)
 181f838:	11000103 	ldbu	r4,4(r2)
 181f83c:	11400143 	ldbu	r5,5(r2)
 181f840:	280a923a 	slli	r5,r5,8
 181f844:	2908b03a 	or	r4,r5,r4
 181f848:	11400183 	ldbu	r5,6(r2)
 181f84c:	280a943a 	slli	r5,r5,16
 181f850:	2908b03a 	or	r4,r5,r4
 181f854:	108001c3 	ldbu	r2,7(r2)
 181f858:	1004963a 	slli	r2,r2,24
 181f85c:	1104b03a 	or	r2,r2,r4
 181f860:	1004963a 	slli	r2,r2,24
 181f864:	1886b03a 	or	r3,r3,r2
 181f868:	e0bfff17 	ldw	r2,-4(fp)
 181f86c:	10801317 	ldw	r2,76(r2)
 181f870:	1887c83a 	sub	r3,r3,r2
 181f874:	e0bffa17 	ldw	r2,-24(fp)
 181f878:	1080020b 	ldhu	r2,8(r2)
 181f87c:	10bfffcc 	andi	r2,r2,65535
 181f880:	1885883a 	add	r2,r3,r2
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 181f884:	e0fffd17 	ldw	r3,-12(fp)
 181f888:	18bdd92e 	bgeu	r3,r2,181eff0 <__ram_exceptions_end+0xff80ed00>
 181f88c:	00000106 	br	181f894 <tcp_output+0xa68>
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
      break;
 181f890:	0001883a 	nop
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 181f894:	e0bfff17 	ldw	r2,-4(fp)
 181f898:	10801c17 	ldw	r2,112(r2)
 181f89c:	1000021e 	bne	r2,zero,181f8a8 <tcp_output+0xa7c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 181f8a0:	e0bfff17 	ldw	r2,-4(fp)
 181f8a4:	10001b8d 	sth	zero,110(r2)
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 181f8a8:	e0bfff17 	ldw	r2,-4(fp)
 181f8ac:	10800883 	ldbu	r2,34(r2)
 181f8b0:	10801fcc 	andi	r2,r2,127
 181f8b4:	1007883a 	mov	r3,r2
 181f8b8:	e0bfff17 	ldw	r2,-4(fp)
 181f8bc:	10c00885 	stb	r3,34(r2)
  return ERR_OK;
 181f8c0:	0005883a 	mov	r2,zero
}
 181f8c4:	e037883a 	mov	sp,fp
 181f8c8:	dfc00117 	ldw	ra,4(sp)
 181f8cc:	df000017 	ldw	fp,0(sp)
 181f8d0:	dec00204 	addi	sp,sp,8
 181f8d4:	f800283a 	ret

0181f8d8 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
 181f8d8:	defff404 	addi	sp,sp,-48
 181f8dc:	dfc00b15 	stw	ra,44(sp)
 181f8e0:	df000a15 	stw	fp,40(sp)
 181f8e4:	df000a04 	addi	fp,sp,40
 181f8e8:	e13ffe15 	stw	r4,-8(fp)
 181f8ec:	e17fff15 	stw	r5,-4(fp)
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 181f8f0:	e0bffe17 	ldw	r2,-8(fp)
 181f8f4:	10800417 	ldw	r2,16(r2)
 181f8f8:	e0ffff17 	ldw	r3,-4(fp)
 181f8fc:	18c00b17 	ldw	r3,44(r3)
 181f900:	1808d63a 	srli	r4,r3,24
 181f904:	e0ffff17 	ldw	r3,-4(fp)
 181f908:	18c00b17 	ldw	r3,44(r3)
 181f90c:	1806d23a 	srli	r3,r3,8
 181f910:	18ffc00c 	andi	r3,r3,65280
 181f914:	20c8b03a 	or	r4,r4,r3
 181f918:	e0ffff17 	ldw	r3,-4(fp)
 181f91c:	18c00b17 	ldw	r3,44(r3)
 181f920:	18ffc00c 	andi	r3,r3,65280
 181f924:	1806923a 	slli	r3,r3,8
 181f928:	20c8b03a 	or	r4,r4,r3
 181f92c:	e0ffff17 	ldw	r3,-4(fp)
 181f930:	18c00b17 	ldw	r3,44(r3)
 181f934:	1806963a 	slli	r3,r3,24
 181f938:	20c6b03a 	or	r3,r4,r3
 181f93c:	19803fcc 	andi	r6,r3,255
 181f940:	11000203 	ldbu	r4,8(r2)
 181f944:	2008703a 	and	r4,r4,zero
 181f948:	200b883a 	mov	r5,r4
 181f94c:	3009883a 	mov	r4,r6
 181f950:	2908b03a 	or	r4,r5,r4
 181f954:	11000205 	stb	r4,8(r2)
 181f958:	1808d23a 	srli	r4,r3,8
 181f95c:	21803fcc 	andi	r6,r4,255
 181f960:	11000243 	ldbu	r4,9(r2)
 181f964:	2008703a 	and	r4,r4,zero
 181f968:	200b883a 	mov	r5,r4
 181f96c:	3009883a 	mov	r4,r6
 181f970:	2908b03a 	or	r4,r5,r4
 181f974:	11000245 	stb	r4,9(r2)
 181f978:	1808d43a 	srli	r4,r3,16
 181f97c:	21803fcc 	andi	r6,r4,255
 181f980:	11000283 	ldbu	r4,10(r2)
 181f984:	2008703a 	and	r4,r4,zero
 181f988:	200b883a 	mov	r5,r4
 181f98c:	3009883a 	mov	r4,r6
 181f990:	2908b03a 	or	r4,r5,r4
 181f994:	11000285 	stb	r4,10(r2)
 181f998:	180ad63a 	srli	r5,r3,24
 181f99c:	10c002c3 	ldbu	r3,11(r2)
 181f9a0:	1806703a 	and	r3,r3,zero
 181f9a4:	1809883a 	mov	r4,r3
 181f9a8:	2807883a 	mov	r3,r5
 181f9ac:	20c6b03a 	or	r3,r4,r3
 181f9b0:	10c002c5 	stb	r3,11(r2)

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 181f9b4:	e0bffe17 	ldw	r2,-8(fp)
 181f9b8:	10800417 	ldw	r2,16(r2)
 181f9bc:	e0ffff17 	ldw	r3,-4(fp)
 181f9c0:	18c00c8b 	ldhu	r3,50(r3)
 181f9c4:	18ffffcc 	andi	r3,r3,65535
 181f9c8:	1806d23a 	srli	r3,r3,8
 181f9cc:	1809883a 	mov	r4,r3
 181f9d0:	e0ffff17 	ldw	r3,-4(fp)
 181f9d4:	18c00c8b 	ldhu	r3,50(r3)
 181f9d8:	18ffffcc 	andi	r3,r3,65535
 181f9dc:	1806923a 	slli	r3,r3,8
 181f9e0:	20c6b03a 	or	r3,r4,r3
 181f9e4:	180d883a 	mov	r6,r3
 181f9e8:	30ffffcc 	andi	r3,r6,65535
 181f9ec:	19403fcc 	andi	r5,r3,255
 181f9f0:	10c00383 	ldbu	r3,14(r2)
 181f9f4:	1806703a 	and	r3,r3,zero
 181f9f8:	1809883a 	mov	r4,r3
 181f9fc:	2807883a 	mov	r3,r5
 181fa00:	20c6b03a 	or	r3,r4,r3
 181fa04:	10c00385 	stb	r3,14(r2)
 181fa08:	30ffffcc 	andi	r3,r6,65535
 181fa0c:	1806d23a 	srli	r3,r3,8
 181fa10:	197fffcc 	andi	r5,r3,65535
 181fa14:	10c003c3 	ldbu	r3,15(r2)
 181fa18:	1806703a 	and	r3,r3,zero
 181fa1c:	1809883a 	mov	r4,r3
 181fa20:	2807883a 	mov	r3,r5
 181fa24:	20c6b03a 	or	r3,r4,r3
 181fa28:	10c003c5 	stb	r3,15(r2)

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 181fa2c:	e0bfff17 	ldw	r2,-4(fp)
 181fa30:	10c00b17 	ldw	r3,44(r2)
 181fa34:	e0bfff17 	ldw	r2,-4(fp)
 181fa38:	10800c8b 	ldhu	r2,50(r2)
 181fa3c:	10bfffcc 	andi	r2,r2,65535
 181fa40:	1887883a 	add	r3,r3,r2
 181fa44:	e0bfff17 	ldw	r2,-4(fp)
 181fa48:	10c00d15 	stw	r3,52(r2)

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 181fa4c:	e0bffe17 	ldw	r2,-8(fp)
 181fa50:	10800417 	ldw	r2,16(r2)
 181fa54:	10800504 	addi	r2,r2,20
 181fa58:	e0bff915 	stw	r2,-28(fp)
  if (seg->flags & TF_SEG_OPTS_MSS) {
 181fa5c:	e0bffe17 	ldw	r2,-8(fp)
 181fa60:	10800343 	ldbu	r2,13(r2)
 181fa64:	10803fcc 	andi	r2,r2,255
 181fa68:	1080004c 	andi	r2,r2,1
 181fa6c:	10001e26 	beq	r2,zero,181fae8 <tcp_output_segment+0x210>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &(pcb->local_ip), &(pcb->remote_ip));
 181fa70:	e0ffff17 	ldw	r3,-4(fp)
 181fa74:	e0bfff17 	ldw	r2,-4(fp)
 181fa78:	10800104 	addi	r2,r2,4
 181fa7c:	100d883a 	mov	r6,r2
 181fa80:	180b883a 	mov	r5,r3
 181fa84:	01016d04 	movi	r4,1460
 181fa88:	181d3d40 	call	181d3d4 <tcp_eff_send_mss>
 181fa8c:	e0bffa0d 	sth	r2,-24(fp)
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 181fa90:	e0bffa0b 	ldhu	r2,-24(fp)
 181fa94:	10808134 	orhi	r2,r2,516
 181fa98:	1004d63a 	srli	r2,r2,24
 181fa9c:	1007883a 	mov	r3,r2
 181faa0:	e0bffa0b 	ldhu	r2,-24(fp)
 181faa4:	10808134 	orhi	r2,r2,516
 181faa8:	1005d23a 	srai	r2,r2,8
 181faac:	10bfc00c 	andi	r2,r2,65280
 181fab0:	1886b03a 	or	r3,r3,r2
 181fab4:	e0bffa0b 	ldhu	r2,-24(fp)
 181fab8:	10bfc00c 	andi	r2,r2,65280
 181fabc:	1004923a 	slli	r2,r2,8
 181fac0:	1886b03a 	or	r3,r3,r2
 181fac4:	e0bffa0b 	ldhu	r2,-24(fp)
 181fac8:	1004963a 	slli	r2,r2,24
 181facc:	1884b03a 	or	r2,r3,r2
 181fad0:	1007883a 	mov	r3,r2
 181fad4:	e0bff917 	ldw	r2,-28(fp)
 181fad8:	10c00015 	stw	r3,0(r2)
    opts += 1;
 181fadc:	e0bff917 	ldw	r2,-28(fp)
 181fae0:	10800104 	addi	r2,r2,4
 181fae4:	e0bff915 	stw	r2,-28(fp)
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 181fae8:	e0bfff17 	ldw	r2,-4(fp)
 181faec:	10800e0b 	ldhu	r2,56(r2)
 181faf0:	10bfffcc 	andi	r2,r2,65535
 181faf4:	10a0001c 	xori	r2,r2,32768
 181faf8:	10a00004 	addi	r2,r2,-32768
 181fafc:	10bfffd8 	cmpnei	r2,r2,-1
 181fb00:	1000021e 	bne	r2,zero,181fb0c <tcp_output_segment+0x234>
    pcb->rtime = 0;
 181fb04:	e0bfff17 	ldw	r2,-4(fp)
 181fb08:	10000e0d 	sth	zero,56(r2)
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
 181fb0c:	e0bfff17 	ldw	r2,-4(fp)
 181fb10:	10000326 	beq	r2,zero,181fb20 <tcp_output_segment+0x248>
 181fb14:	e0bfff17 	ldw	r2,-4(fp)
 181fb18:	10800017 	ldw	r2,0(r2)
 181fb1c:	10000d1e 	bne	r2,zero,181fb54 <tcp_output_segment+0x27c>
    netif = ip_route(&(pcb->local_ip), &(pcb->remote_ip));
 181fb20:	e0ffff17 	ldw	r3,-4(fp)
 181fb24:	e0bfff17 	ldw	r2,-4(fp)
 181fb28:	10800104 	addi	r2,r2,4
 181fb2c:	100b883a 	mov	r5,r2
 181fb30:	1809883a 	mov	r4,r3
 181fb34:	18319740 	call	1831974 <ip_route>
 181fb38:	e0bffb15 	stw	r2,-20(fp)
    if (netif == NULL) {
 181fb3c:	e0bffb17 	ldw	r2,-20(fp)
 181fb40:	1000df26 	beq	r2,zero,181fec0 <tcp_output_segment+0x5e8>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 181fb44:	e0bffb17 	ldw	r2,-20(fp)
 181fb48:	10c00117 	ldw	r3,4(r2)
 181fb4c:	e0bfff17 	ldw	r2,-4(fp)
 181fb50:	10c00015 	stw	r3,0(r2)
  }

  if (pcb->rttest == 0) {
 181fb54:	e0bfff17 	ldw	r2,-4(fp)
 181fb58:	10800f17 	ldw	r2,60(r2)
 181fb5c:	10003e1e 	bne	r2,zero,181fc58 <tcp_output_segment+0x380>
    pcb->rttest = tcp_ticks;
 181fb60:	d0e7f417 	ldw	r3,-24624(gp)
 181fb64:	e0bfff17 	ldw	r2,-4(fp)
 181fb68:	10c00f15 	stw	r3,60(r2)
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 181fb6c:	e0bffe17 	ldw	r2,-8(fp)
 181fb70:	10800417 	ldw	r2,16(r2)
 181fb74:	10c00103 	ldbu	r3,4(r2)
 181fb78:	11000143 	ldbu	r4,5(r2)
 181fb7c:	2008923a 	slli	r4,r4,8
 181fb80:	20c6b03a 	or	r3,r4,r3
 181fb84:	11000183 	ldbu	r4,6(r2)
 181fb88:	2008943a 	slli	r4,r4,16
 181fb8c:	20c6b03a 	or	r3,r4,r3
 181fb90:	108001c3 	ldbu	r2,7(r2)
 181fb94:	1004963a 	slli	r2,r2,24
 181fb98:	10c4b03a 	or	r2,r2,r3
 181fb9c:	1006d63a 	srli	r3,r2,24
 181fba0:	e0bffe17 	ldw	r2,-8(fp)
 181fba4:	10800417 	ldw	r2,16(r2)
 181fba8:	11000103 	ldbu	r4,4(r2)
 181fbac:	11400143 	ldbu	r5,5(r2)
 181fbb0:	280a923a 	slli	r5,r5,8
 181fbb4:	2908b03a 	or	r4,r5,r4
 181fbb8:	11400183 	ldbu	r5,6(r2)
 181fbbc:	280a943a 	slli	r5,r5,16
 181fbc0:	2908b03a 	or	r4,r5,r4
 181fbc4:	108001c3 	ldbu	r2,7(r2)
 181fbc8:	1004963a 	slli	r2,r2,24
 181fbcc:	1104b03a 	or	r2,r2,r4
 181fbd0:	1004d23a 	srli	r2,r2,8
 181fbd4:	10bfc00c 	andi	r2,r2,65280
 181fbd8:	1886b03a 	or	r3,r3,r2
 181fbdc:	e0bffe17 	ldw	r2,-8(fp)
 181fbe0:	10800417 	ldw	r2,16(r2)
 181fbe4:	11000103 	ldbu	r4,4(r2)
 181fbe8:	11400143 	ldbu	r5,5(r2)
 181fbec:	280a923a 	slli	r5,r5,8
 181fbf0:	2908b03a 	or	r4,r5,r4
 181fbf4:	11400183 	ldbu	r5,6(r2)
 181fbf8:	280a943a 	slli	r5,r5,16
 181fbfc:	2908b03a 	or	r4,r5,r4
 181fc00:	108001c3 	ldbu	r2,7(r2)
 181fc04:	1004963a 	slli	r2,r2,24
 181fc08:	1104b03a 	or	r2,r2,r4
 181fc0c:	10bfc00c 	andi	r2,r2,65280
 181fc10:	1004923a 	slli	r2,r2,8
 181fc14:	1886b03a 	or	r3,r3,r2
 181fc18:	e0bffe17 	ldw	r2,-8(fp)
 181fc1c:	10800417 	ldw	r2,16(r2)
 181fc20:	11000103 	ldbu	r4,4(r2)
 181fc24:	11400143 	ldbu	r5,5(r2)
 181fc28:	280a923a 	slli	r5,r5,8
 181fc2c:	2908b03a 	or	r4,r5,r4
 181fc30:	11400183 	ldbu	r5,6(r2)
 181fc34:	280a943a 	slli	r5,r5,16
 181fc38:	2908b03a 	or	r4,r5,r4
 181fc3c:	108001c3 	ldbu	r2,7(r2)
 181fc40:	1004963a 	slli	r2,r2,24
 181fc44:	1104b03a 	or	r2,r2,r4
 181fc48:	1004963a 	slli	r2,r2,24
 181fc4c:	1886b03a 	or	r3,r3,r2
 181fc50:	e0bfff17 	ldw	r2,-4(fp)
 181fc54:	10c01015 	stw	r3,64(r2)
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 181fc58:	e0bffe17 	ldw	r2,-8(fp)
 181fc5c:	10800417 	ldw	r2,16(r2)
 181fc60:	1007883a 	mov	r3,r2
 181fc64:	e0bffe17 	ldw	r2,-8(fp)
 181fc68:	10800117 	ldw	r2,4(r2)
 181fc6c:	10800117 	ldw	r2,4(r2)
 181fc70:	1885c83a 	sub	r2,r3,r2
 181fc74:	e0bffc0d 	sth	r2,-16(fp)

  seg->p->len -= len;
 181fc78:	e0bffe17 	ldw	r2,-8(fp)
 181fc7c:	10800117 	ldw	r2,4(r2)
 181fc80:	e0fffe17 	ldw	r3,-8(fp)
 181fc84:	18c00117 	ldw	r3,4(r3)
 181fc88:	1900028b 	ldhu	r4,10(r3)
 181fc8c:	e0fffc0b 	ldhu	r3,-16(fp)
 181fc90:	20c7c83a 	sub	r3,r4,r3
 181fc94:	10c0028d 	sth	r3,10(r2)
  seg->p->tot_len -= len;
 181fc98:	e0bffe17 	ldw	r2,-8(fp)
 181fc9c:	10800117 	ldw	r2,4(r2)
 181fca0:	e0fffe17 	ldw	r3,-8(fp)
 181fca4:	18c00117 	ldw	r3,4(r3)
 181fca8:	1900020b 	ldhu	r4,8(r3)
 181fcac:	e0fffc0b 	ldhu	r3,-16(fp)
 181fcb0:	20c7c83a 	sub	r3,r4,r3
 181fcb4:	10c0020d 	sth	r3,8(r2)

  seg->p->payload = seg->tcphdr;
 181fcb8:	e0bffe17 	ldw	r2,-8(fp)
 181fcbc:	10800117 	ldw	r2,4(r2)
 181fcc0:	e0fffe17 	ldw	r3,-8(fp)
 181fcc4:	18c00417 	ldw	r3,16(r3)
 181fcc8:	10c00115 	stw	r3,4(r2)

  seg->tcphdr->chksum = 0;
 181fccc:	e0bffe17 	ldw	r2,-8(fp)
 181fcd0:	10800417 	ldw	r2,16(r2)
 181fcd4:	10c00403 	ldbu	r3,16(r2)
 181fcd8:	1806703a 	and	r3,r3,zero
 181fcdc:	10c00405 	stb	r3,16(r2)
 181fce0:	10c00443 	ldbu	r3,17(r2)
 181fce4:	1806703a 	and	r3,r3,zero
 181fce8:	10c00445 	stb	r3,17(r2)
      LWIP_ASSERT("data included but not checksummed",
        seg->p->tot_len == (TCPH_HDRLEN(seg->tcphdr) * 4));
    }

    /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
    acc = inet_chksum_pseudo_partial(seg->p, &(pcb->local_ip),
 181fcec:	e0bffe17 	ldw	r2,-8(fp)
 181fcf0:	12000117 	ldw	r8,4(r2)
 181fcf4:	e27fff17 	ldw	r9,-4(fp)
 181fcf8:	e0bfff17 	ldw	r2,-4(fp)
 181fcfc:	11800104 	addi	r6,r2,4
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len, TCPH_HDRLEN(seg->tcphdr) * 4);
 181fd00:	e0bffe17 	ldw	r2,-8(fp)
 181fd04:	10800117 	ldw	r2,4(r2)
 181fd08:	1080020b 	ldhu	r2,8(r2)
      LWIP_ASSERT("data included but not checksummed",
        seg->p->tot_len == (TCPH_HDRLEN(seg->tcphdr) * 4));
    }

    /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
    acc = inet_chksum_pseudo_partial(seg->p, &(pcb->local_ip),
 181fd0c:	10ffffcc 	andi	r3,r2,65535
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len, TCPH_HDRLEN(seg->tcphdr) * 4);
 181fd10:	e0bffe17 	ldw	r2,-8(fp)
 181fd14:	10800417 	ldw	r2,16(r2)
 181fd18:	11000303 	ldbu	r4,12(r2)
 181fd1c:	10800343 	ldbu	r2,13(r2)
 181fd20:	1004923a 	slli	r2,r2,8
 181fd24:	1104b03a 	or	r2,r2,r4
 181fd28:	10bfffcc 	andi	r2,r2,65535
 181fd2c:	1004d23a 	srli	r2,r2,8
 181fd30:	113fffcc 	andi	r4,r2,65535
 181fd34:	e0bffe17 	ldw	r2,-8(fp)
 181fd38:	10800417 	ldw	r2,16(r2)
 181fd3c:	11400303 	ldbu	r5,12(r2)
 181fd40:	10800343 	ldbu	r2,13(r2)
 181fd44:	1004923a 	slli	r2,r2,8
 181fd48:	1144b03a 	or	r2,r2,r5
 181fd4c:	10bfffcc 	andi	r2,r2,65535
 181fd50:	1004923a 	slli	r2,r2,8
 181fd54:	10bfffcc 	andi	r2,r2,65535
 181fd58:	2084b03a 	or	r2,r4,r2
 181fd5c:	1005d33a 	srai	r2,r2,12
      LWIP_ASSERT("data included but not checksummed",
        seg->p->tot_len == (TCPH_HDRLEN(seg->tcphdr) * 4));
    }

    /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
    acc = inet_chksum_pseudo_partial(seg->p, &(pcb->local_ip),
 181fd60:	1085883a 	add	r2,r2,r2
 181fd64:	1085883a 	add	r2,r2,r2
 181fd68:	10bfffcc 	andi	r2,r2,65535
 181fd6c:	d8800115 	stw	r2,4(sp)
 181fd70:	d8c00015 	stw	r3,0(sp)
 181fd74:	01c00184 	movi	r7,6
 181fd78:	480b883a 	mov	r5,r9
 181fd7c:	4009883a 	mov	r4,r8
 181fd80:	18315940 	call	1831594 <inet_chksum_pseudo_partial>
 181fd84:	10bfffcc 	andi	r2,r2,65535
 181fd88:	e0bffd15 	stw	r2,-12(fp)
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len, TCPH_HDRLEN(seg->tcphdr) * 4);
    /* add payload checksum */
    if (seg->chksum_swapped) {
 181fd8c:	e0bffe17 	ldw	r2,-8(fp)
 181fd90:	10800303 	ldbu	r2,12(r2)
 181fd94:	10803fcc 	andi	r2,r2,255
 181fd98:	10000f26 	beq	r2,zero,181fdd8 <tcp_output_segment+0x500>
      seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
 181fd9c:	e0bffe17 	ldw	r2,-8(fp)
 181fda0:	1080028b 	ldhu	r2,10(r2)
 181fda4:	10bfffcc 	andi	r2,r2,65535
 181fda8:	1004d23a 	srli	r2,r2,8
 181fdac:	1007883a 	mov	r3,r2
 181fdb0:	e0bffe17 	ldw	r2,-8(fp)
 181fdb4:	1080028b 	ldhu	r2,10(r2)
 181fdb8:	10bfffcc 	andi	r2,r2,65535
 181fdbc:	1004923a 	slli	r2,r2,8
 181fdc0:	1884b03a 	or	r2,r3,r2
 181fdc4:	1007883a 	mov	r3,r2
 181fdc8:	e0bffe17 	ldw	r2,-8(fp)
 181fdcc:	10c0028d 	sth	r3,10(r2)
      seg->chksum_swapped = 0;
 181fdd0:	e0bffe17 	ldw	r2,-8(fp)
 181fdd4:	10000305 	stb	zero,12(r2)
    }
    acc += (u16_t)~(seg->chksum);
 181fdd8:	e0bffe17 	ldw	r2,-8(fp)
 181fddc:	1080028b 	ldhu	r2,10(r2)
 181fde0:	0084303a 	nor	r2,zero,r2
 181fde4:	10bfffcc 	andi	r2,r2,65535
 181fde8:	e0fffd17 	ldw	r3,-12(fp)
 181fdec:	1885883a 	add	r2,r3,r2
 181fdf0:	e0bffd15 	stw	r2,-12(fp)
    seg->tcphdr->chksum = FOLD_U32T(acc);
 181fdf4:	e0bffe17 	ldw	r2,-8(fp)
 181fdf8:	10800417 	ldw	r2,16(r2)
 181fdfc:	e0fffd17 	ldw	r3,-12(fp)
 181fe00:	1806d43a 	srli	r3,r3,16
 181fe04:	1809883a 	mov	r4,r3
 181fe08:	e0fffd17 	ldw	r3,-12(fp)
 181fe0c:	20c7883a 	add	r3,r4,r3
 181fe10:	180d883a 	mov	r6,r3
 181fe14:	30ffffcc 	andi	r3,r6,65535
 181fe18:	19403fcc 	andi	r5,r3,255
 181fe1c:	10c00403 	ldbu	r3,16(r2)
 181fe20:	1806703a 	and	r3,r3,zero
 181fe24:	1809883a 	mov	r4,r3
 181fe28:	2807883a 	mov	r3,r5
 181fe2c:	20c6b03a 	or	r3,r4,r3
 181fe30:	10c00405 	stb	r3,16(r2)
 181fe34:	30ffffcc 	andi	r3,r6,65535
 181fe38:	1806d23a 	srli	r3,r3,8
 181fe3c:	197fffcc 	andi	r5,r3,65535
 181fe40:	10c00443 	ldbu	r3,17(r2)
 181fe44:	1806703a 	and	r3,r3,zero
 181fe48:	1809883a 	mov	r4,r3
 181fe4c:	2807883a 	mov	r3,r5
 181fe50:	20c6b03a 	or	r3,r4,r3
 181fe54:	10c00445 	stb	r3,17(r2)
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
#endif /* TCP_CHECKSUM_ON_COPY */
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 181fe58:	00806134 	movhi	r2,388
 181fe5c:	109e7504 	addi	r2,r2,31188
 181fe60:	10804817 	ldw	r2,288(r2)
 181fe64:	10c00044 	addi	r3,r2,1
 181fe68:	00806134 	movhi	r2,388
 181fe6c:	109e7504 	addi	r2,r2,31188
 181fe70:	10c04815 	stw	r3,288(r2)

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 181fe74:	e0bffe17 	ldw	r2,-8(fp)
 181fe78:	11000117 	ldw	r4,4(r2)
 181fe7c:	e17fff17 	ldw	r5,-4(fp)
 181fe80:	e0bfff17 	ldw	r2,-4(fp)
 181fe84:	11800104 	addi	r6,r2,4
 181fe88:	e0bfff17 	ldw	r2,-4(fp)
 181fe8c:	10800283 	ldbu	r2,10(r2)
 181fe90:	11c03fcc 	andi	r7,r2,255
 181fe94:	e0bfff17 	ldw	r2,-4(fp)
 181fe98:	10800243 	ldbu	r2,9(r2)
 181fe9c:	10803fcc 	andi	r2,r2,255
 181fea0:	e0ffff17 	ldw	r3,-4(fp)
 181fea4:	18c002c4 	addi	r3,r3,11
 181fea8:	d8c00215 	stw	r3,8(sp)
 181feac:	00c00184 	movi	r3,6
 181feb0:	d8c00115 	stw	r3,4(sp)
 181feb4:	d8800015 	stw	r2,0(sp)
 181feb8:	18326a00 	call	18326a0 <ip_output_hinted>
 181febc:	00000106 	br	181fec4 <tcp_output_segment+0x5ec>
  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
    netif = ip_route(&(pcb->local_ip), &(pcb->remote_ip));
    if (netif == NULL) {
      return;
 181fec0:	0001883a 	nop
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
 181fec4:	e037883a 	mov	sp,fp
 181fec8:	dfc00117 	ldw	ra,4(sp)
 181fecc:	df000017 	ldw	fp,0(sp)
 181fed0:	dec00204 	addi	sp,sp,8
 181fed4:	f800283a 	ret

0181fed8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 181fed8:	defff404 	addi	sp,sp,-48
 181fedc:	dfc00b15 	stw	ra,44(sp)
 181fee0:	df000a15 	stw	fp,40(sp)
 181fee4:	df000a04 	addi	fp,sp,40
 181fee8:	e13ffa15 	stw	r4,-24(fp)
 181feec:	e17ffb15 	stw	r5,-20(fp)
 181fef0:	e1bffc15 	stw	r6,-16(fp)
 181fef4:	e1fffd15 	stw	r7,-12(fp)
 181fef8:	e0c00217 	ldw	r3,8(fp)
 181fefc:	e0800317 	ldw	r2,12(fp)
 181ff00:	e0fffe0d 	sth	r3,-8(fp)
 181ff04:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 181ff08:	000d883a 	mov	r6,zero
 181ff0c:	01400504 	movi	r5,20
 181ff10:	01000044 	movi	r4,1
 181ff14:	1819aa40 	call	1819aa4 <pbuf_alloc>
 181ff18:	e0bff815 	stw	r2,-32(fp)
  if (p == NULL) {
 181ff1c:	e0bff817 	ldw	r2,-32(fp)
 181ff20:	1000da26 	beq	r2,zero,182028c <tcp_rst+0x3b4>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 181ff24:	e0bff817 	ldw	r2,-32(fp)
 181ff28:	10800117 	ldw	r2,4(r2)
 181ff2c:	e0bff915 	stw	r2,-28(fp)
  tcphdr->src = htons(local_port);
 181ff30:	e0bffe0b 	ldhu	r2,-8(fp)
 181ff34:	1004d23a 	srli	r2,r2,8
 181ff38:	1007883a 	mov	r3,r2
 181ff3c:	e0bffe0b 	ldhu	r2,-8(fp)
 181ff40:	1004923a 	slli	r2,r2,8
 181ff44:	1884b03a 	or	r2,r3,r2
 181ff48:	100d883a 	mov	r6,r2
 181ff4c:	e0bff917 	ldw	r2,-28(fp)
 181ff50:	30ffffcc 	andi	r3,r6,65535
 181ff54:	19403fcc 	andi	r5,r3,255
 181ff58:	10c00003 	ldbu	r3,0(r2)
 181ff5c:	1806703a 	and	r3,r3,zero
 181ff60:	1809883a 	mov	r4,r3
 181ff64:	2807883a 	mov	r3,r5
 181ff68:	20c6b03a 	or	r3,r4,r3
 181ff6c:	10c00005 	stb	r3,0(r2)
 181ff70:	30ffffcc 	andi	r3,r6,65535
 181ff74:	1806d23a 	srli	r3,r3,8
 181ff78:	197fffcc 	andi	r5,r3,65535
 181ff7c:	10c00043 	ldbu	r3,1(r2)
 181ff80:	1806703a 	and	r3,r3,zero
 181ff84:	1809883a 	mov	r4,r3
 181ff88:	2807883a 	mov	r3,r5
 181ff8c:	20c6b03a 	or	r3,r4,r3
 181ff90:	10c00045 	stb	r3,1(r2)
  tcphdr->dest = htons(remote_port);
 181ff94:	e0bfff0b 	ldhu	r2,-4(fp)
 181ff98:	1004d23a 	srli	r2,r2,8
 181ff9c:	1007883a 	mov	r3,r2
 181ffa0:	e0bfff0b 	ldhu	r2,-4(fp)
 181ffa4:	1004923a 	slli	r2,r2,8
 181ffa8:	1884b03a 	or	r2,r3,r2
 181ffac:	100d883a 	mov	r6,r2
 181ffb0:	e0bff917 	ldw	r2,-28(fp)
 181ffb4:	30ffffcc 	andi	r3,r6,65535
 181ffb8:	19403fcc 	andi	r5,r3,255
 181ffbc:	10c00083 	ldbu	r3,2(r2)
 181ffc0:	1806703a 	and	r3,r3,zero
 181ffc4:	1809883a 	mov	r4,r3
 181ffc8:	2807883a 	mov	r3,r5
 181ffcc:	20c6b03a 	or	r3,r4,r3
 181ffd0:	10c00085 	stb	r3,2(r2)
 181ffd4:	30ffffcc 	andi	r3,r6,65535
 181ffd8:	1806d23a 	srli	r3,r3,8
 181ffdc:	197fffcc 	andi	r5,r3,65535
 181ffe0:	10c000c3 	ldbu	r3,3(r2)
 181ffe4:	1806703a 	and	r3,r3,zero
 181ffe8:	1809883a 	mov	r4,r3
 181ffec:	2807883a 	mov	r3,r5
 181fff0:	20c6b03a 	or	r3,r4,r3
 181fff4:	10c000c5 	stb	r3,3(r2)
  tcphdr->seqno = htonl(seqno);
 181fff8:	e0bffa17 	ldw	r2,-24(fp)
 181fffc:	1006d63a 	srli	r3,r2,24
 1820000:	e0bffa17 	ldw	r2,-24(fp)
 1820004:	1004d23a 	srli	r2,r2,8
 1820008:	10bfc00c 	andi	r2,r2,65280
 182000c:	1886b03a 	or	r3,r3,r2
 1820010:	e0bffa17 	ldw	r2,-24(fp)
 1820014:	10bfc00c 	andi	r2,r2,65280
 1820018:	1004923a 	slli	r2,r2,8
 182001c:	1886b03a 	or	r3,r3,r2
 1820020:	e0bffa17 	ldw	r2,-24(fp)
 1820024:	1004963a 	slli	r2,r2,24
 1820028:	1886b03a 	or	r3,r3,r2
 182002c:	e0bff917 	ldw	r2,-28(fp)
 1820030:	19803fcc 	andi	r6,r3,255
 1820034:	11000103 	ldbu	r4,4(r2)
 1820038:	2008703a 	and	r4,r4,zero
 182003c:	200b883a 	mov	r5,r4
 1820040:	3009883a 	mov	r4,r6
 1820044:	2908b03a 	or	r4,r5,r4
 1820048:	11000105 	stb	r4,4(r2)
 182004c:	1808d23a 	srli	r4,r3,8
 1820050:	21803fcc 	andi	r6,r4,255
 1820054:	11000143 	ldbu	r4,5(r2)
 1820058:	2008703a 	and	r4,r4,zero
 182005c:	200b883a 	mov	r5,r4
 1820060:	3009883a 	mov	r4,r6
 1820064:	2908b03a 	or	r4,r5,r4
 1820068:	11000145 	stb	r4,5(r2)
 182006c:	1808d43a 	srli	r4,r3,16
 1820070:	21803fcc 	andi	r6,r4,255
 1820074:	11000183 	ldbu	r4,6(r2)
 1820078:	2008703a 	and	r4,r4,zero
 182007c:	200b883a 	mov	r5,r4
 1820080:	3009883a 	mov	r4,r6
 1820084:	2908b03a 	or	r4,r5,r4
 1820088:	11000185 	stb	r4,6(r2)
 182008c:	180ad63a 	srli	r5,r3,24
 1820090:	10c001c3 	ldbu	r3,7(r2)
 1820094:	1806703a 	and	r3,r3,zero
 1820098:	1809883a 	mov	r4,r3
 182009c:	2807883a 	mov	r3,r5
 18200a0:	20c6b03a 	or	r3,r4,r3
 18200a4:	10c001c5 	stb	r3,7(r2)
  tcphdr->ackno = htonl(ackno);
 18200a8:	e0bffb17 	ldw	r2,-20(fp)
 18200ac:	1006d63a 	srli	r3,r2,24
 18200b0:	e0bffb17 	ldw	r2,-20(fp)
 18200b4:	1004d23a 	srli	r2,r2,8
 18200b8:	10bfc00c 	andi	r2,r2,65280
 18200bc:	1886b03a 	or	r3,r3,r2
 18200c0:	e0bffb17 	ldw	r2,-20(fp)
 18200c4:	10bfc00c 	andi	r2,r2,65280
 18200c8:	1004923a 	slli	r2,r2,8
 18200cc:	1886b03a 	or	r3,r3,r2
 18200d0:	e0bffb17 	ldw	r2,-20(fp)
 18200d4:	1004963a 	slli	r2,r2,24
 18200d8:	1886b03a 	or	r3,r3,r2
 18200dc:	e0bff917 	ldw	r2,-28(fp)
 18200e0:	19803fcc 	andi	r6,r3,255
 18200e4:	11000203 	ldbu	r4,8(r2)
 18200e8:	2008703a 	and	r4,r4,zero
 18200ec:	200b883a 	mov	r5,r4
 18200f0:	3009883a 	mov	r4,r6
 18200f4:	2908b03a 	or	r4,r5,r4
 18200f8:	11000205 	stb	r4,8(r2)
 18200fc:	1808d23a 	srli	r4,r3,8
 1820100:	21803fcc 	andi	r6,r4,255
 1820104:	11000243 	ldbu	r4,9(r2)
 1820108:	2008703a 	and	r4,r4,zero
 182010c:	200b883a 	mov	r5,r4
 1820110:	3009883a 	mov	r4,r6
 1820114:	2908b03a 	or	r4,r5,r4
 1820118:	11000245 	stb	r4,9(r2)
 182011c:	1808d43a 	srli	r4,r3,16
 1820120:	21803fcc 	andi	r6,r4,255
 1820124:	11000283 	ldbu	r4,10(r2)
 1820128:	2008703a 	and	r4,r4,zero
 182012c:	200b883a 	mov	r5,r4
 1820130:	3009883a 	mov	r4,r6
 1820134:	2908b03a 	or	r4,r5,r4
 1820138:	11000285 	stb	r4,10(r2)
 182013c:	180ad63a 	srli	r5,r3,24
 1820140:	10c002c3 	ldbu	r3,11(r2)
 1820144:	1806703a 	and	r3,r3,zero
 1820148:	1809883a 	mov	r4,r3
 182014c:	2807883a 	mov	r3,r5
 1820150:	20c6b03a 	or	r3,r4,r3
 1820154:	10c002c5 	stb	r3,11(r2)
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 1820158:	e0bff917 	ldw	r2,-28(fp)
 182015c:	10c00303 	ldbu	r3,12(r2)
 1820160:	1806703a 	and	r3,r3,zero
 1820164:	18c01414 	ori	r3,r3,80
 1820168:	10c00305 	stb	r3,12(r2)
 182016c:	10c00343 	ldbu	r3,13(r2)
 1820170:	1806703a 	and	r3,r3,zero
 1820174:	18c00514 	ori	r3,r3,20
 1820178:	10c00345 	stb	r3,13(r2)
  tcphdr->wnd = PP_HTONS(TCP_WND);
 182017c:	e0bff917 	ldw	r2,-28(fp)
 1820180:	10c00383 	ldbu	r3,14(r2)
 1820184:	1806703a 	and	r3,r3,zero
 1820188:	18c00814 	ori	r3,r3,32
 182018c:	10c00385 	stb	r3,14(r2)
 1820190:	10c003c3 	ldbu	r3,15(r2)
 1820194:	1806703a 	and	r3,r3,zero
 1820198:	10c003c5 	stb	r3,15(r2)
  tcphdr->chksum = 0;
 182019c:	e0bff917 	ldw	r2,-28(fp)
 18201a0:	10c00403 	ldbu	r3,16(r2)
 18201a4:	1806703a 	and	r3,r3,zero
 18201a8:	10c00405 	stb	r3,16(r2)
 18201ac:	10c00443 	ldbu	r3,17(r2)
 18201b0:	1806703a 	and	r3,r3,zero
 18201b4:	10c00445 	stb	r3,17(r2)
  tcphdr->urgp = 0;
 18201b8:	e0bff917 	ldw	r2,-28(fp)
 18201bc:	10c00483 	ldbu	r3,18(r2)
 18201c0:	1806703a 	and	r3,r3,zero
 18201c4:	10c00485 	stb	r3,18(r2)
 18201c8:	10c004c3 	ldbu	r3,19(r2)
 18201cc:	1806703a 	and	r3,r3,zero
 18201d0:	10c004c5 	stb	r3,19(r2)

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
              IP_PROTO_TCP, p->tot_len);
 18201d4:	e0bff817 	ldw	r2,-32(fp)
 18201d8:	1080020b 	ldhu	r2,8(r2)
  tcphdr->wnd = PP_HTONS(TCP_WND);
  tcphdr->chksum = 0;
  tcphdr->urgp = 0;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
 18201dc:	10bfffcc 	andi	r2,r2,65535
 18201e0:	d8800015 	stw	r2,0(sp)
 18201e4:	01c00184 	movi	r7,6
 18201e8:	e1bffd17 	ldw	r6,-12(fp)
 18201ec:	e17ffc17 	ldw	r5,-16(fp)
 18201f0:	e13ff817 	ldw	r4,-32(fp)
 18201f4:	18313940 	call	1831394 <inet_chksum_pseudo>
 18201f8:	100d883a 	mov	r6,r2
 18201fc:	e0bff917 	ldw	r2,-28(fp)
 1820200:	30ffffcc 	andi	r3,r6,65535
 1820204:	19403fcc 	andi	r5,r3,255
 1820208:	10c00403 	ldbu	r3,16(r2)
 182020c:	1806703a 	and	r3,r3,zero
 1820210:	1809883a 	mov	r4,r3
 1820214:	2807883a 	mov	r3,r5
 1820218:	20c6b03a 	or	r3,r4,r3
 182021c:	10c00405 	stb	r3,16(r2)
 1820220:	30ffffcc 	andi	r3,r6,65535
 1820224:	1806d23a 	srli	r3,r3,8
 1820228:	197fffcc 	andi	r5,r3,65535
 182022c:	10c00443 	ldbu	r3,17(r2)
 1820230:	1806703a 	and	r3,r3,zero
 1820234:	1809883a 	mov	r4,r3
 1820238:	2807883a 	mov	r3,r5
 182023c:	20c6b03a 	or	r3,r4,r3
 1820240:	10c00445 	stb	r3,17(r2)
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 1820244:	00806134 	movhi	r2,388
 1820248:	109e7504 	addi	r2,r2,31188
 182024c:	10804817 	ldw	r2,288(r2)
 1820250:	10c00044 	addi	r3,r2,1
 1820254:	00806134 	movhi	r2,388
 1820258:	109e7504 	addi	r2,r2,31188
 182025c:	10c04815 	stw	r3,288(r2)
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
 1820260:	00800184 	movi	r2,6
 1820264:	d8800115 	stw	r2,4(sp)
 1820268:	d8000015 	stw	zero,0(sp)
 182026c:	01c01004 	movi	r7,64
 1820270:	e1bffd17 	ldw	r6,-12(fp)
 1820274:	e17ffc17 	ldw	r5,-16(fp)
 1820278:	e13ff817 	ldw	r4,-32(fp)
 182027c:	18325ec0 	call	18325ec <ip_output>
  pbuf_free(p);
 1820280:	e13ff817 	ldw	r4,-32(fp)
 1820284:	181a22c0 	call	181a22c <pbuf_free>
 1820288:	00000106 	br	1820290 <tcp_rst+0x3b8>
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  if (p == NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
      return;
 182028c:	0001883a 	nop
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  pbuf_free(p);
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 1820290:	e037883a 	mov	sp,fp
 1820294:	dfc00117 	ldw	ra,4(sp)
 1820298:	df000017 	ldw	fp,0(sp)
 182029c:	dec00204 	addi	sp,sp,8
 18202a0:	f800283a 	ret

018202a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 18202a4:	defffc04 	addi	sp,sp,-16
 18202a8:	dfc00315 	stw	ra,12(sp)
 18202ac:	df000215 	stw	fp,8(sp)
 18202b0:	df000204 	addi	fp,sp,8
 18202b4:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 18202b8:	e0bfff17 	ldw	r2,-4(fp)
 18202bc:	10801d17 	ldw	r2,116(r2)
 18202c0:	10001f26 	beq	r2,zero,1820340 <tcp_rexmit_rto+0x9c>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 18202c4:	e0bfff17 	ldw	r2,-4(fp)
 18202c8:	10801d17 	ldw	r2,116(r2)
 18202cc:	e0bffe15 	stw	r2,-8(fp)
 18202d0:	00000306 	br	18202e0 <tcp_rexmit_rto+0x3c>
 18202d4:	e0bffe17 	ldw	r2,-8(fp)
 18202d8:	10800017 	ldw	r2,0(r2)
 18202dc:	e0bffe15 	stw	r2,-8(fp)
 18202e0:	e0bffe17 	ldw	r2,-8(fp)
 18202e4:	10800017 	ldw	r2,0(r2)
 18202e8:	103ffa1e 	bne	r2,zero,18202d4 <__ram_exceptions_end+0xff80ffe4>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 18202ec:	e0bfff17 	ldw	r2,-4(fp)
 18202f0:	10c01c17 	ldw	r3,112(r2)
 18202f4:	e0bffe17 	ldw	r2,-8(fp)
 18202f8:	10c00015 	stw	r3,0(r2)
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 18202fc:	e0bfff17 	ldw	r2,-4(fp)
 1820300:	10c01d17 	ldw	r3,116(r2)
 1820304:	e0bfff17 	ldw	r2,-4(fp)
 1820308:	10c01c15 	stw	r3,112(r2)
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 182030c:	e0bfff17 	ldw	r2,-4(fp)
 1820310:	10001d15 	stw	zero,116(r2)
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
 1820314:	e0bfff17 	ldw	r2,-4(fp)
 1820318:	10801283 	ldbu	r2,74(r2)
 182031c:	10800044 	addi	r2,r2,1
 1820320:	1007883a 	mov	r3,r2
 1820324:	e0bfff17 	ldw	r2,-4(fp)
 1820328:	10c01285 	stb	r3,74(r2)

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 182032c:	e0bfff17 	ldw	r2,-4(fp)
 1820330:	10000f15 	stw	zero,60(r2)

  /* Do the actual retransmission */
  tcp_output(pcb);
 1820334:	e13fff17 	ldw	r4,-4(fp)
 1820338:	181ee2c0 	call	181ee2c <tcp_output>
 182033c:	00000106 	br	1820344 <tcp_rexmit_rto+0xa0>
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
    return;
 1820340:	0001883a 	nop
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 1820344:	e037883a 	mov	sp,fp
 1820348:	dfc00117 	ldw	ra,4(sp)
 182034c:	df000017 	ldw	fp,0(sp)
 1820350:	dec00204 	addi	sp,sp,8
 1820354:	f800283a 	ret

01820358 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 1820358:	defffc04 	addi	sp,sp,-16
 182035c:	df000315 	stw	fp,12(sp)
 1820360:	df000304 	addi	fp,sp,12
 1820364:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 1820368:	e0bfff17 	ldw	r2,-4(fp)
 182036c:	10801d17 	ldw	r2,116(r2)
 1820370:	10009e26 	beq	r2,zero,18205ec <tcp_rexmit+0x294>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 1820374:	e0bfff17 	ldw	r2,-4(fp)
 1820378:	10801d17 	ldw	r2,116(r2)
 182037c:	e0bffe15 	stw	r2,-8(fp)
  pcb->unacked = seg->next;
 1820380:	e0bffe17 	ldw	r2,-8(fp)
 1820384:	10c00017 	ldw	r3,0(r2)
 1820388:	e0bfff17 	ldw	r2,-4(fp)
 182038c:	10c01d15 	stw	r3,116(r2)

  cur_seg = &(pcb->unsent);
 1820390:	e0bfff17 	ldw	r2,-4(fp)
 1820394:	10801c04 	addi	r2,r2,112
 1820398:	e0bffd15 	stw	r2,-12(fp)
  while (*cur_seg &&
 182039c:	00000306 	br	18203ac <tcp_rexmit+0x54>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 18203a0:	e0bffd17 	ldw	r2,-12(fp)
 18203a4:	10800017 	ldw	r2,0(r2)
 18203a8:	e0bffd15 	stw	r2,-12(fp)
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 18203ac:	e0bffd17 	ldw	r2,-12(fp)
 18203b0:	10800017 	ldw	r2,0(r2)
 18203b4:	10007826 	beq	r2,zero,1820598 <tcp_rexmit+0x240>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 18203b8:	e0bffd17 	ldw	r2,-12(fp)
 18203bc:	10800017 	ldw	r2,0(r2)
 18203c0:	10800417 	ldw	r2,16(r2)
 18203c4:	10c00103 	ldbu	r3,4(r2)
 18203c8:	11000143 	ldbu	r4,5(r2)
 18203cc:	2008923a 	slli	r4,r4,8
 18203d0:	20c6b03a 	or	r3,r4,r3
 18203d4:	11000183 	ldbu	r4,6(r2)
 18203d8:	2008943a 	slli	r4,r4,16
 18203dc:	20c6b03a 	or	r3,r4,r3
 18203e0:	108001c3 	ldbu	r2,7(r2)
 18203e4:	1004963a 	slli	r2,r2,24
 18203e8:	10c4b03a 	or	r2,r2,r3
 18203ec:	1006d63a 	srli	r3,r2,24
 18203f0:	e0bffd17 	ldw	r2,-12(fp)
 18203f4:	10800017 	ldw	r2,0(r2)
 18203f8:	10800417 	ldw	r2,16(r2)
 18203fc:	11000103 	ldbu	r4,4(r2)
 1820400:	11400143 	ldbu	r5,5(r2)
 1820404:	280a923a 	slli	r5,r5,8
 1820408:	2908b03a 	or	r4,r5,r4
 182040c:	11400183 	ldbu	r5,6(r2)
 1820410:	280a943a 	slli	r5,r5,16
 1820414:	2908b03a 	or	r4,r5,r4
 1820418:	108001c3 	ldbu	r2,7(r2)
 182041c:	1004963a 	slli	r2,r2,24
 1820420:	1104b03a 	or	r2,r2,r4
 1820424:	1004d23a 	srli	r2,r2,8
 1820428:	10bfc00c 	andi	r2,r2,65280
 182042c:	1886b03a 	or	r3,r3,r2
 1820430:	e0bffd17 	ldw	r2,-12(fp)
 1820434:	10800017 	ldw	r2,0(r2)
 1820438:	10800417 	ldw	r2,16(r2)
 182043c:	11000103 	ldbu	r4,4(r2)
 1820440:	11400143 	ldbu	r5,5(r2)
 1820444:	280a923a 	slli	r5,r5,8
 1820448:	2908b03a 	or	r4,r5,r4
 182044c:	11400183 	ldbu	r5,6(r2)
 1820450:	280a943a 	slli	r5,r5,16
 1820454:	2908b03a 	or	r4,r5,r4
 1820458:	108001c3 	ldbu	r2,7(r2)
 182045c:	1004963a 	slli	r2,r2,24
 1820460:	1104b03a 	or	r2,r2,r4
 1820464:	10bfc00c 	andi	r2,r2,65280
 1820468:	1004923a 	slli	r2,r2,8
 182046c:	1886b03a 	or	r3,r3,r2
 1820470:	e0bffd17 	ldw	r2,-12(fp)
 1820474:	10800017 	ldw	r2,0(r2)
 1820478:	10800417 	ldw	r2,16(r2)
 182047c:	11000103 	ldbu	r4,4(r2)
 1820480:	11400143 	ldbu	r5,5(r2)
 1820484:	280a923a 	slli	r5,r5,8
 1820488:	2908b03a 	or	r4,r5,r4
 182048c:	11400183 	ldbu	r5,6(r2)
 1820490:	280a943a 	slli	r5,r5,16
 1820494:	2908b03a 	or	r4,r5,r4
 1820498:	108001c3 	ldbu	r2,7(r2)
 182049c:	1004963a 	slli	r2,r2,24
 18204a0:	1104b03a 	or	r2,r2,r4
 18204a4:	1004963a 	slli	r2,r2,24
 18204a8:	1886b03a 	or	r3,r3,r2
 18204ac:	e0bffe17 	ldw	r2,-8(fp)
 18204b0:	10800417 	ldw	r2,16(r2)
 18204b4:	11000103 	ldbu	r4,4(r2)
 18204b8:	11400143 	ldbu	r5,5(r2)
 18204bc:	280a923a 	slli	r5,r5,8
 18204c0:	2908b03a 	or	r4,r5,r4
 18204c4:	11400183 	ldbu	r5,6(r2)
 18204c8:	280a943a 	slli	r5,r5,16
 18204cc:	2908b03a 	or	r4,r5,r4
 18204d0:	108001c3 	ldbu	r2,7(r2)
 18204d4:	1004963a 	slli	r2,r2,24
 18204d8:	1104b03a 	or	r2,r2,r4
 18204dc:	1008d63a 	srli	r4,r2,24
 18204e0:	e0bffe17 	ldw	r2,-8(fp)
 18204e4:	10800417 	ldw	r2,16(r2)
 18204e8:	11400103 	ldbu	r5,4(r2)
 18204ec:	11800143 	ldbu	r6,5(r2)
 18204f0:	300c923a 	slli	r6,r6,8
 18204f4:	314ab03a 	or	r5,r6,r5
 18204f8:	11800183 	ldbu	r6,6(r2)
 18204fc:	300c943a 	slli	r6,r6,16
 1820500:	314ab03a 	or	r5,r6,r5
 1820504:	108001c3 	ldbu	r2,7(r2)
 1820508:	1004963a 	slli	r2,r2,24
 182050c:	1144b03a 	or	r2,r2,r5
 1820510:	1004d23a 	srli	r2,r2,8
 1820514:	10bfc00c 	andi	r2,r2,65280
 1820518:	2088b03a 	or	r4,r4,r2
 182051c:	e0bffe17 	ldw	r2,-8(fp)
 1820520:	10800417 	ldw	r2,16(r2)
 1820524:	11400103 	ldbu	r5,4(r2)
 1820528:	11800143 	ldbu	r6,5(r2)
 182052c:	300c923a 	slli	r6,r6,8
 1820530:	314ab03a 	or	r5,r6,r5
 1820534:	11800183 	ldbu	r6,6(r2)
 1820538:	300c943a 	slli	r6,r6,16
 182053c:	314ab03a 	or	r5,r6,r5
 1820540:	108001c3 	ldbu	r2,7(r2)
 1820544:	1004963a 	slli	r2,r2,24
 1820548:	1144b03a 	or	r2,r2,r5
 182054c:	10bfc00c 	andi	r2,r2,65280
 1820550:	1004923a 	slli	r2,r2,8
 1820554:	2088b03a 	or	r4,r4,r2
 1820558:	e0bffe17 	ldw	r2,-8(fp)
 182055c:	10800417 	ldw	r2,16(r2)
 1820560:	11400103 	ldbu	r5,4(r2)
 1820564:	11800143 	ldbu	r6,5(r2)
 1820568:	300c923a 	slli	r6,r6,8
 182056c:	314ab03a 	or	r5,r6,r5
 1820570:	11800183 	ldbu	r6,6(r2)
 1820574:	300c943a 	slli	r6,r6,16
 1820578:	314ab03a 	or	r5,r6,r5
 182057c:	108001c3 	ldbu	r2,7(r2)
 1820580:	1004963a 	slli	r2,r2,24
 1820584:	1144b03a 	or	r2,r2,r5
 1820588:	1004963a 	slli	r2,r2,24
 182058c:	2084b03a 	or	r2,r4,r2
 1820590:	1885c83a 	sub	r2,r3,r2
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 1820594:	103f8216 	blt	r2,zero,18203a0 <__ram_exceptions_end+0xff8100b0>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 1820598:	e0bffd17 	ldw	r2,-12(fp)
 182059c:	10c00017 	ldw	r3,0(r2)
 18205a0:	e0bffe17 	ldw	r2,-8(fp)
 18205a4:	10c00015 	stw	r3,0(r2)
  *cur_seg = seg;
 18205a8:	e0bffd17 	ldw	r2,-12(fp)
 18205ac:	e0fffe17 	ldw	r3,-8(fp)
 18205b0:	10c00015 	stw	r3,0(r2)
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 18205b4:	e0bffe17 	ldw	r2,-8(fp)
 18205b8:	10800017 	ldw	r2,0(r2)
 18205bc:	1000021e 	bne	r2,zero,18205c8 <tcp_rexmit+0x270>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 18205c0:	e0bfff17 	ldw	r2,-4(fp)
 18205c4:	10001b8d 	sth	zero,110(r2)
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 18205c8:	e0bfff17 	ldw	r2,-4(fp)
 18205cc:	10801283 	ldbu	r2,74(r2)
 18205d0:	10800044 	addi	r2,r2,1
 18205d4:	1007883a 	mov	r3,r2
 18205d8:	e0bfff17 	ldw	r2,-4(fp)
 18205dc:	10c01285 	stb	r3,74(r2)

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 18205e0:	e0bfff17 	ldw	r2,-4(fp)
 18205e4:	10000f15 	stw	zero,60(r2)
 18205e8:	00000106 	br	18205f0 <tcp_rexmit+0x298>
{
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
    return;
 18205ec:	0001883a 	nop

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 18205f0:	e037883a 	mov	sp,fp
 18205f4:	df000017 	ldw	fp,0(sp)
 18205f8:	dec00104 	addi	sp,sp,4
 18205fc:	f800283a 	ret

01820600 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 1820600:	defffd04 	addi	sp,sp,-12
 1820604:	dfc00215 	stw	ra,8(sp)
 1820608:	df000115 	stw	fp,4(sp)
 182060c:	df000104 	addi	fp,sp,4
 1820610:	e13fff15 	stw	r4,-4(fp)
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 1820614:	e0bfff17 	ldw	r2,-4(fp)
 1820618:	10801d17 	ldw	r2,116(r2)
 182061c:	10003c26 	beq	r2,zero,1820710 <tcp_rexmit_fast+0x110>
 1820620:	e0bfff17 	ldw	r2,-4(fp)
 1820624:	10800883 	ldbu	r2,34(r2)
 1820628:	10803fcc 	andi	r2,r2,255
 182062c:	1080010c 	andi	r2,r2,4
 1820630:	1000371e 	bne	r2,zero,1820710 <tcp_rexmit_fast+0x110>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 1820634:	e13fff17 	ldw	r4,-4(fp)
 1820638:	18203580 	call	1820358 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 182063c:	e0bfff17 	ldw	r2,-4(fp)
 1820640:	1100140b 	ldhu	r4,80(r2)
 1820644:	e0bfff17 	ldw	r2,-4(fp)
 1820648:	10c0190b 	ldhu	r3,100(r2)
 182064c:	20bfffcc 	andi	r2,r4,65535
 1820650:	18ffffcc 	andi	r3,r3,65535
 1820654:	1880082e 	bgeu	r3,r2,1820678 <tcp_rexmit_fast+0x78>
      pcb->ssthresh = pcb->snd_wnd / 2;
 1820658:	e0bfff17 	ldw	r2,-4(fp)
 182065c:	1080190b 	ldhu	r2,100(r2)
 1820660:	10bfffcc 	andi	r2,r2,65535
 1820664:	1004d07a 	srli	r2,r2,1
 1820668:	1007883a 	mov	r3,r2
 182066c:	e0bfff17 	ldw	r2,-4(fp)
 1820670:	10c0148d 	sth	r3,82(r2)
 1820674:	00000706 	br	1820694 <tcp_rexmit_fast+0x94>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 1820678:	e0bfff17 	ldw	r2,-4(fp)
 182067c:	1080140b 	ldhu	r2,80(r2)
 1820680:	10bfffcc 	andi	r2,r2,65535
 1820684:	1004d07a 	srli	r2,r2,1
 1820688:	1007883a 	mov	r3,r2
 182068c:	e0bfff17 	ldw	r2,-4(fp)
 1820690:	10c0148d 	sth	r3,82(r2)
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
 1820694:	e0bfff17 	ldw	r2,-4(fp)
 1820698:	1080148b 	ldhu	r2,82(r2)
 182069c:	10ffffcc 	andi	r3,r2,65535
 18206a0:	e0bfff17 	ldw	r2,-4(fp)
 18206a4:	10800e8b 	ldhu	r2,58(r2)
 18206a8:	10bfffcc 	andi	r2,r2,65535
 18206ac:	1085883a 	add	r2,r2,r2
 18206b0:	1880060e 	bge	r3,r2,18206cc <tcp_rexmit_fast+0xcc>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 18206b4:	e0bfff17 	ldw	r2,-4(fp)
 18206b8:	10800e8b 	ldhu	r2,58(r2)
 18206bc:	1085883a 	add	r2,r2,r2
 18206c0:	1007883a 	mov	r3,r2
 18206c4:	e0bfff17 	ldw	r2,-4(fp)
 18206c8:	10c0148d 	sth	r3,82(r2)
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 18206cc:	e0bfff17 	ldw	r2,-4(fp)
 18206d0:	1100148b 	ldhu	r4,82(r2)
 18206d4:	e0bfff17 	ldw	r2,-4(fp)
 18206d8:	10c00e8b 	ldhu	r3,58(r2)
 18206dc:	1805883a 	mov	r2,r3
 18206e0:	1085883a 	add	r2,r2,r2
 18206e4:	10c5883a 	add	r2,r2,r3
 18206e8:	2085883a 	add	r2,r4,r2
 18206ec:	1007883a 	mov	r3,r2
 18206f0:	e0bfff17 	ldw	r2,-4(fp)
 18206f4:	10c0140d 	sth	r3,80(r2)
    pcb->flags |= TF_INFR;
 18206f8:	e0bfff17 	ldw	r2,-4(fp)
 18206fc:	10800883 	ldbu	r2,34(r2)
 1820700:	10800114 	ori	r2,r2,4
 1820704:	1007883a 	mov	r3,r2
 1820708:	e0bfff17 	ldw	r2,-4(fp)
 182070c:	10c00885 	stb	r3,34(r2)
  } 
}
 1820710:	0001883a 	nop
 1820714:	e037883a 	mov	sp,fp
 1820718:	dfc00117 	ldw	ra,4(sp)
 182071c:	df000017 	ldw	fp,0(sp)
 1820720:	dec00204 	addi	sp,sp,8
 1820724:	f800283a 	ret

01820728 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
 1820728:	defff804 	addi	sp,sp,-32
 182072c:	dfc00715 	stw	ra,28(sp)
 1820730:	df000615 	stw	fp,24(sp)
 1820734:	df000604 	addi	fp,sp,24
 1820738:	e13fff15 	stw	r4,-4(fp)
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 182073c:	e0bfff17 	ldw	r2,-4(fp)
 1820740:	10801517 	ldw	r2,84(r2)
 1820744:	10bfffc4 	addi	r2,r2,-1
 1820748:	1006d63a 	srli	r3,r2,24
 182074c:	e0bfff17 	ldw	r2,-4(fp)
 1820750:	10801517 	ldw	r2,84(r2)
 1820754:	10bfffc4 	addi	r2,r2,-1
 1820758:	1004d23a 	srli	r2,r2,8
 182075c:	10bfc00c 	andi	r2,r2,65280
 1820760:	1886b03a 	or	r3,r3,r2
 1820764:	e0bfff17 	ldw	r2,-4(fp)
 1820768:	10801517 	ldw	r2,84(r2)
 182076c:	10bfffc4 	addi	r2,r2,-1
 1820770:	10bfc00c 	andi	r2,r2,65280
 1820774:	1004923a 	slli	r2,r2,8
 1820778:	1886b03a 	or	r3,r3,r2
 182077c:	e0bfff17 	ldw	r2,-4(fp)
 1820780:	10801517 	ldw	r2,84(r2)
 1820784:	10bfffc4 	addi	r2,r2,-1
 1820788:	1004963a 	slli	r2,r2,24
 182078c:	1884b03a 	or	r2,r3,r2
 1820790:	100f883a 	mov	r7,r2
 1820794:	000d883a 	mov	r6,zero
 1820798:	000b883a 	mov	r5,zero
 182079c:	e13fff17 	ldw	r4,-4(fp)
 18207a0:	181d49c0 	call	181d49c <tcp_output_alloc_header>
 18207a4:	e0bffd15 	stw	r2,-12(fp)
  if(p == NULL) {
 18207a8:	e0bffd17 	ldw	r2,-12(fp)
 18207ac:	10003d26 	beq	r2,zero,18208a4 <tcp_keepalive+0x17c>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 18207b0:	e0bffd17 	ldw	r2,-12(fp)
 18207b4:	10800117 	ldw	r2,4(r2)
 18207b8:	e0bffe15 	stw	r2,-8(fp)

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 18207bc:	e0ffff17 	ldw	r3,-4(fp)
 18207c0:	e0bfff17 	ldw	r2,-4(fp)
 18207c4:	11000104 	addi	r4,r2,4
                                      IP_PROTO_TCP, p->tot_len);
 18207c8:	e0bffd17 	ldw	r2,-12(fp)
 18207cc:	1080020b 	ldhu	r2,8(r2)
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 18207d0:	10bfffcc 	andi	r2,r2,65535
 18207d4:	d8800015 	stw	r2,0(sp)
 18207d8:	01c00184 	movi	r7,6
 18207dc:	200d883a 	mov	r6,r4
 18207e0:	180b883a 	mov	r5,r3
 18207e4:	e13ffd17 	ldw	r4,-12(fp)
 18207e8:	18313940 	call	1831394 <inet_chksum_pseudo>
 18207ec:	100d883a 	mov	r6,r2
 18207f0:	e0bffe17 	ldw	r2,-8(fp)
 18207f4:	30ffffcc 	andi	r3,r6,65535
 18207f8:	19403fcc 	andi	r5,r3,255
 18207fc:	10c00403 	ldbu	r3,16(r2)
 1820800:	1806703a 	and	r3,r3,zero
 1820804:	1809883a 	mov	r4,r3
 1820808:	2807883a 	mov	r3,r5
 182080c:	20c6b03a 	or	r3,r4,r3
 1820810:	10c00405 	stb	r3,16(r2)
 1820814:	30ffffcc 	andi	r3,r6,65535
 1820818:	1806d23a 	srli	r3,r3,8
 182081c:	197fffcc 	andi	r5,r3,65535
 1820820:	10c00443 	ldbu	r3,17(r2)
 1820824:	1806703a 	and	r3,r3,zero
 1820828:	1809883a 	mov	r4,r3
 182082c:	2807883a 	mov	r3,r5
 1820830:	20c6b03a 	or	r3,r4,r3
 1820834:	10c00445 	stb	r3,17(r2)
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 1820838:	00806134 	movhi	r2,388
 182083c:	109e7504 	addi	r2,r2,31188
 1820840:	10804817 	ldw	r2,288(r2)
 1820844:	10c00044 	addi	r3,r2,1
 1820848:	00806134 	movhi	r2,388
 182084c:	109e7504 	addi	r2,r2,31188
 1820850:	10c04815 	stw	r3,288(r2)

  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
 1820854:	e0ffff17 	ldw	r3,-4(fp)
 1820858:	e0bfff17 	ldw	r2,-4(fp)
 182085c:	11000104 	addi	r4,r2,4
 1820860:	e0bfff17 	ldw	r2,-4(fp)
 1820864:	10800283 	ldbu	r2,10(r2)
 1820868:	11403fcc 	andi	r5,r2,255
 182086c:	e0bfff17 	ldw	r2,-4(fp)
 1820870:	108002c4 	addi	r2,r2,11
 1820874:	d8800215 	stw	r2,8(sp)
 1820878:	00800184 	movi	r2,6
 182087c:	d8800115 	stw	r2,4(sp)
 1820880:	d8000015 	stw	zero,0(sp)
 1820884:	280f883a 	mov	r7,r5
 1820888:	200d883a 	mov	r6,r4
 182088c:	180b883a 	mov	r5,r3
 1820890:	e13ffd17 	ldw	r4,-12(fp)
 1820894:	18326a00 	call	18326a0 <ip_output_hinted>
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 1820898:	e13ffd17 	ldw	r4,-12(fp)
 182089c:	181a22c0 	call	181a22c <pbuf_free>
 18208a0:	00000106 	br	18208a8 <tcp_keepalive+0x180>
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
 18208a4:	0001883a 	nop

  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 18208a8:	e037883a 	mov	sp,fp
 18208ac:	dfc00117 	ldw	ra,4(sp)
 18208b0:	df000017 	ldw	fp,0(sp)
 18208b4:	dec00204 	addi	sp,sp,8
 18208b8:	f800283a 	ret

018208bc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 18208bc:	defff504 	addi	sp,sp,-44
 18208c0:	dfc00a15 	stw	ra,40(sp)
 18208c4:	df000915 	stw	fp,36(sp)
 18208c8:	df000904 	addi	fp,sp,36
 18208cc:	e13fff15 	stw	r4,-4(fp)
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 18208d0:	e0bfff17 	ldw	r2,-4(fp)
 18208d4:	10801d17 	ldw	r2,116(r2)
 18208d8:	e0bffa15 	stw	r2,-24(fp)

  if(seg == NULL) {
 18208dc:	e0bffa17 	ldw	r2,-24(fp)
 18208e0:	1000031e 	bne	r2,zero,18208f0 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
 18208e4:	e0bfff17 	ldw	r2,-4(fp)
 18208e8:	10801c17 	ldw	r2,112(r2)
 18208ec:	e0bffa15 	stw	r2,-24(fp)
  }
  if(seg == NULL) {
 18208f0:	e0bffa17 	ldw	r2,-24(fp)
 18208f4:	1000a326 	beq	r2,zero,1820b84 <tcp_zero_window_probe+0x2c8>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 18208f8:	e0bffa17 	ldw	r2,-24(fp)
 18208fc:	10800417 	ldw	r2,16(r2)
 1820900:	10c00303 	ldbu	r3,12(r2)
 1820904:	10800343 	ldbu	r2,13(r2)
 1820908:	1004923a 	slli	r2,r2,8
 182090c:	10c4b03a 	or	r2,r2,r3
 1820910:	10bfffcc 	andi	r2,r2,65535
 1820914:	1004d23a 	srli	r2,r2,8
 1820918:	10ffffcc 	andi	r3,r2,65535
 182091c:	e0bffa17 	ldw	r2,-24(fp)
 1820920:	10800417 	ldw	r2,16(r2)
 1820924:	11000303 	ldbu	r4,12(r2)
 1820928:	10800343 	ldbu	r2,13(r2)
 182092c:	1004923a 	slli	r2,r2,8
 1820930:	1104b03a 	or	r2,r2,r4
 1820934:	10bfffcc 	andi	r2,r2,65535
 1820938:	1004923a 	slli	r2,r2,8
 182093c:	10bfffcc 	andi	r2,r2,65535
 1820940:	1884b03a 	or	r2,r3,r2
 1820944:	1080004c 	andi	r2,r2,1
 1820948:	10000626 	beq	r2,zero,1820964 <tcp_zero_window_probe+0xa8>
 182094c:	e0bffa17 	ldw	r2,-24(fp)
 1820950:	1080020b 	ldhu	r2,8(r2)
 1820954:	10bfffcc 	andi	r2,r2,65535
 1820958:	1000021e 	bne	r2,zero,1820964 <tcp_zero_window_probe+0xa8>
 182095c:	00800044 	movi	r2,1
 1820960:	00000106 	br	1820968 <tcp_zero_window_probe+0xac>
 1820964:	0005883a 	mov	r2,zero
 1820968:	e0bffb05 	stb	r2,-20(fp)
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 182096c:	e0bffb03 	ldbu	r2,-20(fp)
 1820970:	1005003a 	cmpeq	r2,r2,zero
 1820974:	10803fcc 	andi	r2,r2,255
 1820978:	e0bffb8d 	sth	r2,-18(fp)

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 182097c:	e17ffb8b 	ldhu	r5,-18(fp)
 1820980:	e0bffa17 	ldw	r2,-24(fp)
 1820984:	10800417 	ldw	r2,16(r2)
 1820988:	10c00103 	ldbu	r3,4(r2)
 182098c:	11000143 	ldbu	r4,5(r2)
 1820990:	2008923a 	slli	r4,r4,8
 1820994:	20c6b03a 	or	r3,r4,r3
 1820998:	11000183 	ldbu	r4,6(r2)
 182099c:	2008943a 	slli	r4,r4,16
 18209a0:	20c6b03a 	or	r3,r4,r3
 18209a4:	108001c3 	ldbu	r2,7(r2)
 18209a8:	1004963a 	slli	r2,r2,24
 18209ac:	10c4b03a 	or	r2,r2,r3
 18209b0:	100f883a 	mov	r7,r2
 18209b4:	280d883a 	mov	r6,r5
 18209b8:	000b883a 	mov	r5,zero
 18209bc:	e13fff17 	ldw	r4,-4(fp)
 18209c0:	181d49c0 	call	181d49c <tcp_output_alloc_header>
 18209c4:	e0bffc15 	stw	r2,-16(fp)
  if(p == NULL) {
 18209c8:	e0bffc17 	ldw	r2,-16(fp)
 18209cc:	10006f26 	beq	r2,zero,1820b8c <tcp_zero_window_probe+0x2d0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 18209d0:	e0bffc17 	ldw	r2,-16(fp)
 18209d4:	10800117 	ldw	r2,4(r2)
 18209d8:	e0bffd15 	stw	r2,-12(fp)

  if (is_fin) {
 18209dc:	e0bffb03 	ldbu	r2,-20(fp)
 18209e0:	10001d26 	beq	r2,zero,1820a58 <tcp_zero_window_probe+0x19c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 18209e4:	e0bffd17 	ldw	r2,-12(fp)
 18209e8:	10c00303 	ldbu	r3,12(r2)
 18209ec:	10800343 	ldbu	r2,13(r2)
 18209f0:	1004923a 	slli	r2,r2,8
 18209f4:	10c4b03a 	or	r2,r2,r3
 18209f8:	1007883a 	mov	r3,r2
 18209fc:	00b03fc4 	movi	r2,-16129
 1820a00:	1884703a 	and	r2,r3,r2
 1820a04:	10844014 	ori	r2,r2,4352
 1820a08:	100d883a 	mov	r6,r2
 1820a0c:	e0bffd17 	ldw	r2,-12(fp)
 1820a10:	30ffffcc 	andi	r3,r6,65535
 1820a14:	19403fcc 	andi	r5,r3,255
 1820a18:	10c00303 	ldbu	r3,12(r2)
 1820a1c:	1806703a 	and	r3,r3,zero
 1820a20:	1809883a 	mov	r4,r3
 1820a24:	2807883a 	mov	r3,r5
 1820a28:	20c6b03a 	or	r3,r4,r3
 1820a2c:	10c00305 	stb	r3,12(r2)
 1820a30:	30ffffcc 	andi	r3,r6,65535
 1820a34:	1806d23a 	srli	r3,r3,8
 1820a38:	197fffcc 	andi	r5,r3,65535
 1820a3c:	10c00343 	ldbu	r3,13(r2)
 1820a40:	1806703a 	and	r3,r3,zero
 1820a44:	1809883a 	mov	r4,r3
 1820a48:	2807883a 	mov	r3,r5
 1820a4c:	20c6b03a 	or	r3,r4,r3
 1820a50:	10c00345 	stb	r3,13(r2)
 1820a54:	00001106 	br	1820a9c <tcp_zero_window_probe+0x1e0>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 1820a58:	e0bffc17 	ldw	r2,-16(fp)
 1820a5c:	10800117 	ldw	r2,4(r2)
 1820a60:	10800504 	addi	r2,r2,20
 1820a64:	e0bffe15 	stw	r2,-8(fp)
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 1820a68:	e0bffa17 	ldw	r2,-24(fp)
 1820a6c:	11000117 	ldw	r4,4(r2)
 1820a70:	e0bffa17 	ldw	r2,-24(fp)
 1820a74:	10800117 	ldw	r2,4(r2)
 1820a78:	10c0020b 	ldhu	r3,8(r2)
 1820a7c:	e0bffa17 	ldw	r2,-24(fp)
 1820a80:	1080020b 	ldhu	r2,8(r2)
 1820a84:	1885c83a 	sub	r2,r3,r2
 1820a88:	10bfffcc 	andi	r2,r2,65535
 1820a8c:	100f883a 	mov	r7,r2
 1820a90:	01800044 	movi	r6,1
 1820a94:	e17ffe17 	ldw	r5,-8(fp)
 1820a98:	181a8280 	call	181a828 <pbuf_copy_partial>
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 1820a9c:	e0ffff17 	ldw	r3,-4(fp)
 1820aa0:	e0bfff17 	ldw	r2,-4(fp)
 1820aa4:	11000104 	addi	r4,r2,4
                                      IP_PROTO_TCP, p->tot_len);
 1820aa8:	e0bffc17 	ldw	r2,-16(fp)
 1820aac:	1080020b 	ldhu	r2,8(r2)
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 1820ab0:	10bfffcc 	andi	r2,r2,65535
 1820ab4:	d8800015 	stw	r2,0(sp)
 1820ab8:	01c00184 	movi	r7,6
 1820abc:	200d883a 	mov	r6,r4
 1820ac0:	180b883a 	mov	r5,r3
 1820ac4:	e13ffc17 	ldw	r4,-16(fp)
 1820ac8:	18313940 	call	1831394 <inet_chksum_pseudo>
 1820acc:	100d883a 	mov	r6,r2
 1820ad0:	e0bffd17 	ldw	r2,-12(fp)
 1820ad4:	30ffffcc 	andi	r3,r6,65535
 1820ad8:	19403fcc 	andi	r5,r3,255
 1820adc:	10c00403 	ldbu	r3,16(r2)
 1820ae0:	1806703a 	and	r3,r3,zero
 1820ae4:	1809883a 	mov	r4,r3
 1820ae8:	2807883a 	mov	r3,r5
 1820aec:	20c6b03a 	or	r3,r4,r3
 1820af0:	10c00405 	stb	r3,16(r2)
 1820af4:	30ffffcc 	andi	r3,r6,65535
 1820af8:	1806d23a 	srli	r3,r3,8
 1820afc:	197fffcc 	andi	r5,r3,65535
 1820b00:	10c00443 	ldbu	r3,17(r2)
 1820b04:	1806703a 	and	r3,r3,zero
 1820b08:	1809883a 	mov	r4,r3
 1820b0c:	2807883a 	mov	r3,r5
 1820b10:	20c6b03a 	or	r3,r4,r3
 1820b14:	10c00445 	stb	r3,17(r2)
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 1820b18:	00806134 	movhi	r2,388
 1820b1c:	109e7504 	addi	r2,r2,31188
 1820b20:	10804817 	ldw	r2,288(r2)
 1820b24:	10c00044 	addi	r3,r2,1
 1820b28:	00806134 	movhi	r2,388
 1820b2c:	109e7504 	addi	r2,r2,31188
 1820b30:	10c04815 	stw	r3,288(r2)

  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
 1820b34:	e0ffff17 	ldw	r3,-4(fp)
 1820b38:	e0bfff17 	ldw	r2,-4(fp)
 1820b3c:	11000104 	addi	r4,r2,4
 1820b40:	e0bfff17 	ldw	r2,-4(fp)
 1820b44:	10800283 	ldbu	r2,10(r2)
 1820b48:	11403fcc 	andi	r5,r2,255
 1820b4c:	e0bfff17 	ldw	r2,-4(fp)
 1820b50:	108002c4 	addi	r2,r2,11
 1820b54:	d8800215 	stw	r2,8(sp)
 1820b58:	00800184 	movi	r2,6
 1820b5c:	d8800115 	stw	r2,4(sp)
 1820b60:	d8000015 	stw	zero,0(sp)
 1820b64:	280f883a 	mov	r7,r5
 1820b68:	200d883a 	mov	r6,r4
 1820b6c:	180b883a 	mov	r5,r3
 1820b70:	e13ffc17 	ldw	r4,-16(fp)
 1820b74:	18326a00 	call	18326a0 <ip_output_hinted>
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 1820b78:	e13ffc17 	ldw	r4,-16(fp)
 1820b7c:	181a22c0 	call	181a22c <pbuf_free>
 1820b80:	00000306 	br	1820b90 <tcp_zero_window_probe+0x2d4>

  if(seg == NULL) {
    seg = pcb->unsent;
  }
  if(seg == NULL) {
    return;
 1820b84:	0001883a 	nop
 1820b88:	00000106 	br	1820b90 <tcp_zero_window_probe+0x2d4>
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
 1820b8c:	0001883a 	nop
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 1820b90:	e037883a 	mov	sp,fp
 1820b94:	dfc00117 	ldw	ra,4(sp)
 1820b98:	df000017 	ldw	fp,0(sp)
 1820b9c:	dec00204 	addi	sp,sp,8
 1820ba0:	f800283a 	ret

01820ba4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 1820ba4:	defffd04 	addi	sp,sp,-12
 1820ba8:	dfc00215 	stw	ra,8(sp)
 1820bac:	df000115 	stw	fp,4(sp)
 1820bb0:	df000104 	addi	fp,sp,4
 1820bb4:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 1820bb8:	181b02c0 	call	181b02c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 1820bbc:	d0a7f317 	ldw	r2,-24628(gp)
 1820bc0:	1000021e 	bne	r2,zero,1820bcc <tcpip_tcp_timer+0x28>
 1820bc4:	d0a7f817 	ldw	r2,-24608(gp)
 1820bc8:	10000626 	beq	r2,zero,1820be4 <tcpip_tcp_timer+0x40>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 1820bcc:	000d883a 	mov	r6,zero
 1820bd0:	014060b4 	movhi	r5,386
 1820bd4:	2942e904 	addi	r5,r5,2980
 1820bd8:	01003e84 	movi	r4,250
 1820bdc:	1820de40 	call	1820de4 <sys_timeout>
 1820be0:	00000106 	br	1820be8 <tcpip_tcp_timer+0x44>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 1820be4:	d027fa15 	stw	zero,-24600(gp)
  }
}
 1820be8:	0001883a 	nop
 1820bec:	e037883a 	mov	sp,fp
 1820bf0:	dfc00117 	ldw	ra,4(sp)
 1820bf4:	df000017 	ldw	fp,0(sp)
 1820bf8:	dec00204 	addi	sp,sp,8
 1820bfc:	f800283a 	ret

01820c00 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 1820c00:	defffe04 	addi	sp,sp,-8
 1820c04:	dfc00115 	stw	ra,4(sp)
 1820c08:	df000015 	stw	fp,0(sp)
 1820c0c:	d839883a 	mov	fp,sp
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 1820c10:	d0a7fa17 	ldw	r2,-24600(gp)
 1820c14:	10000b1e 	bne	r2,zero,1820c44 <tcp_timer_needed+0x44>
 1820c18:	d0a7f317 	ldw	r2,-24628(gp)
 1820c1c:	1000021e 	bne	r2,zero,1820c28 <tcp_timer_needed+0x28>
 1820c20:	d0a7f817 	ldw	r2,-24608(gp)
 1820c24:	10000726 	beq	r2,zero,1820c44 <tcp_timer_needed+0x44>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 1820c28:	00800044 	movi	r2,1
 1820c2c:	d0a7fa15 	stw	r2,-24600(gp)
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 1820c30:	000d883a 	mov	r6,zero
 1820c34:	014060b4 	movhi	r5,386
 1820c38:	2942e904 	addi	r5,r5,2980
 1820c3c:	01003e84 	movi	r4,250
 1820c40:	1820de40 	call	1820de4 <sys_timeout>
  }
}
 1820c44:	0001883a 	nop
 1820c48:	e037883a 	mov	sp,fp
 1820c4c:	dfc00117 	ldw	ra,4(sp)
 1820c50:	df000017 	ldw	fp,0(sp)
 1820c54:	dec00204 	addi	sp,sp,8
 1820c58:	f800283a 	ret

01820c5c <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
 1820c5c:	defffd04 	addi	sp,sp,-12
 1820c60:	dfc00215 	stw	ra,8(sp)
 1820c64:	df000115 	stw	fp,4(sp)
 1820c68:	df000104 	addi	fp,sp,4
 1820c6c:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
 1820c70:	18327700 	call	1832770 <ip_reass_tmr>
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 1820c74:	000d883a 	mov	r6,zero
 1820c78:	014060b4 	movhi	r5,386
 1820c7c:	29431704 	addi	r5,r5,3164
 1820c80:	0100fa04 	movi	r4,1000
 1820c84:	1820de40 	call	1820de4 <sys_timeout>
}
 1820c88:	0001883a 	nop
 1820c8c:	e037883a 	mov	sp,fp
 1820c90:	dfc00117 	ldw	ra,4(sp)
 1820c94:	df000017 	ldw	fp,0(sp)
 1820c98:	dec00204 	addi	sp,sp,8
 1820c9c:	f800283a 	ret

01820ca0 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 1820ca0:	defffd04 	addi	sp,sp,-12
 1820ca4:	dfc00215 	stw	ra,8(sp)
 1820ca8:	df000115 	stw	fp,4(sp)
 1820cac:	df000104 	addi	fp,sp,4
 1820cb0:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 1820cb4:	18223340 	call	1822334 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 1820cb8:	000d883a 	mov	r6,zero
 1820cbc:	014060b4 	movhi	r5,386
 1820cc0:	29432804 	addi	r5,r5,3232
 1820cc4:	0104e204 	movi	r4,5000
 1820cc8:	1820de40 	call	1820de4 <sys_timeout>
}
 1820ccc:	0001883a 	nop
 1820cd0:	e037883a 	mov	sp,fp
 1820cd4:	dfc00117 	ldw	ra,4(sp)
 1820cd8:	df000017 	ldw	fp,0(sp)
 1820cdc:	dec00204 	addi	sp,sp,8
 1820ce0:	f800283a 	ret

01820ce4 <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
 1820ce4:	defffd04 	addi	sp,sp,-12
 1820ce8:	dfc00215 	stw	ra,8(sp)
 1820cec:	df000115 	stw	fp,4(sp)
 1820cf0:	df000104 	addi	fp,sp,4
 1820cf4:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
 1820cf8:	1815b080 	call	1815b08 <dhcp_coarse_tmr>
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 1820cfc:	000d883a 	mov	r6,zero
 1820d00:	014060b4 	movhi	r5,386
 1820d04:	29433904 	addi	r5,r5,3300
 1820d08:	013a9814 	movui	r4,60000
 1820d0c:	1820de40 	call	1820de4 <sys_timeout>
}
 1820d10:	0001883a 	nop
 1820d14:	e037883a 	mov	sp,fp
 1820d18:	dfc00117 	ldw	ra,4(sp)
 1820d1c:	df000017 	ldw	fp,0(sp)
 1820d20:	dec00204 	addi	sp,sp,8
 1820d24:	f800283a 	ret

01820d28 <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
 1820d28:	defffd04 	addi	sp,sp,-12
 1820d2c:	dfc00215 	stw	ra,8(sp)
 1820d30:	df000115 	stw	fp,4(sp)
 1820d34:	df000104 	addi	fp,sp,4
 1820d38:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
 1820d3c:	1815bb00 	call	1815bb0 <dhcp_fine_tmr>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 1820d40:	000d883a 	mov	r6,zero
 1820d44:	014060b4 	movhi	r5,386
 1820d48:	29434a04 	addi	r5,r5,3368
 1820d4c:	01007d04 	movi	r4,500
 1820d50:	1820de40 	call	1820de4 <sys_timeout>
}
 1820d54:	0001883a 	nop
 1820d58:	e037883a 	mov	sp,fp
 1820d5c:	dfc00117 	ldw	ra,4(sp)
 1820d60:	df000017 	ldw	fp,0(sp)
 1820d64:	dec00204 	addi	sp,sp,8
 1820d68:	f800283a 	ret

01820d6c <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
 1820d6c:	defffe04 	addi	sp,sp,-8
 1820d70:	dfc00115 	stw	ra,4(sp)
 1820d74:	df000015 	stw	fp,0(sp)
 1820d78:	d839883a 	mov	fp,sp
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 1820d7c:	000d883a 	mov	r6,zero
 1820d80:	014060b4 	movhi	r5,386
 1820d84:	29431704 	addi	r5,r5,3164
 1820d88:	0100fa04 	movi	r4,1000
 1820d8c:	1820de40 	call	1820de4 <sys_timeout>
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 1820d90:	000d883a 	mov	r6,zero
 1820d94:	014060b4 	movhi	r5,386
 1820d98:	29432804 	addi	r5,r5,3232
 1820d9c:	0104e204 	movi	r4,5000
 1820da0:	1820de40 	call	1820de4 <sys_timeout>
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 1820da4:	000d883a 	mov	r6,zero
 1820da8:	014060b4 	movhi	r5,386
 1820dac:	29433904 	addi	r5,r5,3300
 1820db0:	013a9814 	movui	r4,60000
 1820db4:	1820de40 	call	1820de4 <sys_timeout>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 1820db8:	000d883a 	mov	r6,zero
 1820dbc:	014060b4 	movhi	r5,386
 1820dc0:	29434a04 	addi	r5,r5,3368
 1820dc4:	01007d04 	movi	r4,500
 1820dc8:	1820de40 	call	1820de4 <sys_timeout>

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
#endif
}
 1820dcc:	0001883a 	nop
 1820dd0:	e037883a 	mov	sp,fp
 1820dd4:	dfc00117 	ldw	ra,4(sp)
 1820dd8:	df000017 	ldw	fp,0(sp)
 1820ddc:	dec00204 	addi	sp,sp,8
 1820de0:	f800283a 	ret

01820de4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 1820de4:	defff904 	addi	sp,sp,-28
 1820de8:	dfc00615 	stw	ra,24(sp)
 1820dec:	df000515 	stw	fp,20(sp)
 1820df0:	df000504 	addi	fp,sp,20
 1820df4:	e13ffd15 	stw	r4,-12(fp)
 1820df8:	e17ffe15 	stw	r5,-8(fp)
 1820dfc:	e1bfff15 	stw	r6,-4(fp)
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 1820e00:	00806134 	movhi	r2,388
 1820e04:	108bcc84 	addi	r2,r2,12082
 1820e08:	1080060b 	ldhu	r2,24(r2)
 1820e0c:	10bfffcc 	andi	r2,r2,65535
 1820e10:	1009883a 	mov	r4,r2
 1820e14:	183c5000 	call	183c500 <malloc>
 1820e18:	e0bffc15 	stw	r2,-16(fp)
  if (timeout == NULL) {
 1820e1c:	e0bffc17 	ldw	r2,-16(fp)
 1820e20:	10004d26 	beq	r2,zero,1820f58 <sys_timeout+0x174>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
 1820e24:	e0bffc17 	ldw	r2,-16(fp)
 1820e28:	10000015 	stw	zero,0(r2)
  timeout->h = handler;
 1820e2c:	e0bffc17 	ldw	r2,-16(fp)
 1820e30:	e0fffe17 	ldw	r3,-8(fp)
 1820e34:	10c00215 	stw	r3,8(r2)
  timeout->arg = arg;
 1820e38:	e0bffc17 	ldw	r2,-16(fp)
 1820e3c:	e0ffff17 	ldw	r3,-4(fp)
 1820e40:	10c00315 	stw	r3,12(r2)
  timeout->time = msecs;
 1820e44:	e0bffc17 	ldw	r2,-16(fp)
 1820e48:	e0fffd17 	ldw	r3,-12(fp)
 1820e4c:	10c00115 	stw	r3,4(r2)
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 1820e50:	d0a7f917 	ldw	r2,-24604(gp)
 1820e54:	1000031e 	bne	r2,zero,1820e64 <sys_timeout+0x80>
    next_timeout = timeout;
 1820e58:	e0bffc17 	ldw	r2,-16(fp)
 1820e5c:	d0a7f915 	stw	r2,-24604(gp)
    return;
 1820e60:	00003e06 	br	1820f5c <sys_timeout+0x178>
  }

  if (next_timeout->time > msecs) {
 1820e64:	d0a7f917 	ldw	r2,-24604(gp)
 1820e68:	10800117 	ldw	r2,4(r2)
 1820e6c:	e0fffd17 	ldw	r3,-12(fp)
 1820e70:	18800c2e 	bgeu	r3,r2,1820ea4 <sys_timeout+0xc0>
    next_timeout->time -= msecs;
 1820e74:	d0a7f917 	ldw	r2,-24604(gp)
 1820e78:	d0e7f917 	ldw	r3,-24604(gp)
 1820e7c:	19000117 	ldw	r4,4(r3)
 1820e80:	e0fffd17 	ldw	r3,-12(fp)
 1820e84:	20c7c83a 	sub	r3,r4,r3
 1820e88:	10c00115 	stw	r3,4(r2)
    timeout->next = next_timeout;
 1820e8c:	d0e7f917 	ldw	r3,-24604(gp)
 1820e90:	e0bffc17 	ldw	r2,-16(fp)
 1820e94:	10c00015 	stw	r3,0(r2)
    next_timeout = timeout;
 1820e98:	e0bffc17 	ldw	r2,-16(fp)
 1820e9c:	d0a7f915 	stw	r2,-24604(gp)
 1820ea0:	00002e06 	br	1820f5c <sys_timeout+0x178>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 1820ea4:	d0a7f917 	ldw	r2,-24604(gp)
 1820ea8:	e0bffb15 	stw	r2,-20(fp)
 1820eac:	00002706 	br	1820f4c <sys_timeout+0x168>
      timeout->time -= t->time;
 1820eb0:	e0bffc17 	ldw	r2,-16(fp)
 1820eb4:	10c00117 	ldw	r3,4(r2)
 1820eb8:	e0bffb17 	ldw	r2,-20(fp)
 1820ebc:	10800117 	ldw	r2,4(r2)
 1820ec0:	1887c83a 	sub	r3,r3,r2
 1820ec4:	e0bffc17 	ldw	r2,-16(fp)
 1820ec8:	10c00115 	stw	r3,4(r2)
      if (t->next == NULL || t->next->time > timeout->time) {
 1820ecc:	e0bffb17 	ldw	r2,-20(fp)
 1820ed0:	10800017 	ldw	r2,0(r2)
 1820ed4:	10000626 	beq	r2,zero,1820ef0 <sys_timeout+0x10c>
 1820ed8:	e0bffb17 	ldw	r2,-20(fp)
 1820edc:	10800017 	ldw	r2,0(r2)
 1820ee0:	10800117 	ldw	r2,4(r2)
 1820ee4:	e0fffc17 	ldw	r3,-16(fp)
 1820ee8:	18c00117 	ldw	r3,4(r3)
 1820eec:	1880142e 	bgeu	r3,r2,1820f40 <sys_timeout+0x15c>
        if (t->next != NULL) {
 1820ef0:	e0bffb17 	ldw	r2,-20(fp)
 1820ef4:	10800017 	ldw	r2,0(r2)
 1820ef8:	10000926 	beq	r2,zero,1820f20 <sys_timeout+0x13c>
          t->next->time -= timeout->time;
 1820efc:	e0bffb17 	ldw	r2,-20(fp)
 1820f00:	10800017 	ldw	r2,0(r2)
 1820f04:	e0fffb17 	ldw	r3,-20(fp)
 1820f08:	18c00017 	ldw	r3,0(r3)
 1820f0c:	19000117 	ldw	r4,4(r3)
 1820f10:	e0fffc17 	ldw	r3,-16(fp)
 1820f14:	18c00117 	ldw	r3,4(r3)
 1820f18:	20c7c83a 	sub	r3,r4,r3
 1820f1c:	10c00115 	stw	r3,4(r2)
        }
        timeout->next = t->next;
 1820f20:	e0bffb17 	ldw	r2,-20(fp)
 1820f24:	10c00017 	ldw	r3,0(r2)
 1820f28:	e0bffc17 	ldw	r2,-16(fp)
 1820f2c:	10c00015 	stw	r3,0(r2)
        t->next = timeout;
 1820f30:	e0bffb17 	ldw	r2,-20(fp)
 1820f34:	e0fffc17 	ldw	r3,-16(fp)
 1820f38:	10c00015 	stw	r3,0(r2)
        break;
 1820f3c:	00000706 	br	1820f5c <sys_timeout+0x178>
  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 1820f40:	e0bffb17 	ldw	r2,-20(fp)
 1820f44:	10800017 	ldw	r2,0(r2)
 1820f48:	e0bffb15 	stw	r2,-20(fp)
 1820f4c:	e0bffb17 	ldw	r2,-20(fp)
 1820f50:	103fd71e 	bne	r2,zero,1820eb0 <__ram_exceptions_end+0xff810bc0>
 1820f54:	00000106 	br	1820f5c <sys_timeout+0x178>
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  if (timeout == NULL) {
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
 1820f58:	0001883a 	nop
        t->next = timeout;
        break;
      }
    }
  }
}
 1820f5c:	e037883a 	mov	sp,fp
 1820f60:	dfc00117 	ldw	ra,4(sp)
 1820f64:	df000017 	ldw	fp,0(sp)
 1820f68:	dec00204 	addi	sp,sp,8
 1820f6c:	f800283a 	ret

01820f70 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 1820f70:	defffa04 	addi	sp,sp,-24
 1820f74:	dfc00515 	stw	ra,20(sp)
 1820f78:	df000415 	stw	fp,16(sp)
 1820f7c:	df000404 	addi	fp,sp,16
 1820f80:	e13ffe15 	stw	r4,-8(fp)
 1820f84:	e17fff15 	stw	r5,-4(fp)
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 1820f88:	d0a7f917 	ldw	r2,-24604(gp)
 1820f8c:	10002e26 	beq	r2,zero,1821048 <sys_untimeout+0xd8>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 1820f90:	d0a7f917 	ldw	r2,-24604(gp)
 1820f94:	e0bffd15 	stw	r2,-12(fp)
 1820f98:	e03ffc15 	stw	zero,-16(fp)
 1820f9c:	00002606 	br	1821038 <sys_untimeout+0xc8>
    if ((t->h == handler) && (t->arg == arg)) {
 1820fa0:	e0bffd17 	ldw	r2,-12(fp)
 1820fa4:	10c00217 	ldw	r3,8(r2)
 1820fa8:	e0bffe17 	ldw	r2,-8(fp)
 1820fac:	18801d1e 	bne	r3,r2,1821024 <sys_untimeout+0xb4>
 1820fb0:	e0bffd17 	ldw	r2,-12(fp)
 1820fb4:	10c00317 	ldw	r3,12(r2)
 1820fb8:	e0bfff17 	ldw	r2,-4(fp)
 1820fbc:	1880191e 	bne	r3,r2,1821024 <sys_untimeout+0xb4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 1820fc0:	e0bffc17 	ldw	r2,-16(fp)
 1820fc4:	1000041e 	bne	r2,zero,1820fd8 <sys_untimeout+0x68>
        next_timeout = t->next;
 1820fc8:	e0bffd17 	ldw	r2,-12(fp)
 1820fcc:	10800017 	ldw	r2,0(r2)
 1820fd0:	d0a7f915 	stw	r2,-24604(gp)
 1820fd4:	00000406 	br	1820fe8 <sys_untimeout+0x78>
      } else {
        prev_t->next = t->next;
 1820fd8:	e0bffd17 	ldw	r2,-12(fp)
 1820fdc:	10c00017 	ldw	r3,0(r2)
 1820fe0:	e0bffc17 	ldw	r2,-16(fp)
 1820fe4:	10c00015 	stw	r3,0(r2)
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 1820fe8:	e0bffd17 	ldw	r2,-12(fp)
 1820fec:	10800017 	ldw	r2,0(r2)
 1820ff0:	10000926 	beq	r2,zero,1821018 <sys_untimeout+0xa8>
        t->next->time += t->time;
 1820ff4:	e0bffd17 	ldw	r2,-12(fp)
 1820ff8:	10800017 	ldw	r2,0(r2)
 1820ffc:	e0fffd17 	ldw	r3,-12(fp)
 1821000:	18c00017 	ldw	r3,0(r3)
 1821004:	19000117 	ldw	r4,4(r3)
 1821008:	e0fffd17 	ldw	r3,-12(fp)
 182100c:	18c00117 	ldw	r3,4(r3)
 1821010:	20c7883a 	add	r3,r4,r3
 1821014:	10c00115 	stw	r3,4(r2)
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 1821018:	e13ffd17 	ldw	r4,-12(fp)
 182101c:	183c5140 	call	183c514 <free>
      return;
 1821020:	00000a06 	br	182104c <sys_untimeout+0xdc>

  if (next_timeout == NULL) {
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 1821024:	e0bffd17 	ldw	r2,-12(fp)
 1821028:	e0bffc15 	stw	r2,-16(fp)
 182102c:	e0bffd17 	ldw	r2,-12(fp)
 1821030:	10800017 	ldw	r2,0(r2)
 1821034:	e0bffd15 	stw	r2,-12(fp)
 1821038:	e0bffd17 	ldw	r2,-12(fp)
 182103c:	103fd81e 	bne	r2,zero,1820fa0 <__ram_exceptions_end+0xff810cb0>
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
      return;
    }
  }
  return;
 1821040:	0001883a 	nop
 1821044:	00000106 	br	182104c <sys_untimeout+0xdc>
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
    return;
 1821048:	0001883a 	nop
      memp_free(MEMP_SYS_TIMEOUT, t);
      return;
    }
  }
  return;
}
 182104c:	e037883a 	mov	sp,fp
 1821050:	dfc00117 	ldw	ra,4(sp)
 1821054:	df000017 	ldw	fp,0(sp)
 1821058:	dec00204 	addi	sp,sp,8
 182105c:	f800283a 	ret

01821060 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 1821060:	defff804 	addi	sp,sp,-32
 1821064:	dfc00715 	stw	ra,28(sp)
 1821068:	df000615 	stw	fp,24(sp)
 182106c:	df000604 	addi	fp,sp,24
 1821070:	e13ffe15 	stw	r4,-8(fp)
 1821074:	e17fff15 	stw	r5,-4(fp)
  struct sys_timeo *tmptimeout;
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
 1821078:	d0a7f917 	ldw	r2,-24604(gp)
 182107c:	1000061e 	bne	r2,zero,1821098 <sys_timeouts_mbox_fetch+0x38>
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
 1821080:	000d883a 	mov	r6,zero
 1821084:	e17fff17 	ldw	r5,-4(fp)
 1821088:	e13ffe17 	ldw	r4,-8(fp)
 182108c:	181548c0 	call	181548c <sys_arch_mbox_fetch>
 1821090:	e0bffa15 	stw	r2,-24(fp)
      } else {
        next_timeout->time = 0;
      }
    }
  }
}
 1821094:	00003006 	br	1821158 <sys_timeouts_mbox_fetch+0xf8>

 again:
  if (!next_timeout) {
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
  } else {
    if (next_timeout->time > 0) {
 1821098:	d0a7f917 	ldw	r2,-24604(gp)
 182109c:	10800117 	ldw	r2,4(r2)
 18210a0:	10000826 	beq	r2,zero,18210c4 <sys_timeouts_mbox_fetch+0x64>
      time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
 18210a4:	d0a7f917 	ldw	r2,-24604(gp)
 18210a8:	10800117 	ldw	r2,4(r2)
 18210ac:	100d883a 	mov	r6,r2
 18210b0:	e17fff17 	ldw	r5,-4(fp)
 18210b4:	e13ffe17 	ldw	r4,-8(fp)
 18210b8:	181548c0 	call	181548c <sys_arch_mbox_fetch>
 18210bc:	e0bffa15 	stw	r2,-24(fp)
 18210c0:	00000206 	br	18210cc <sys_timeouts_mbox_fetch+0x6c>
    } else {
      time_needed = SYS_ARCH_TIMEOUT;
 18210c4:	00bfffc4 	movi	r2,-1
 18210c8:	e0bffa15 	stw	r2,-24(fp)
    }

    if (time_needed == SYS_ARCH_TIMEOUT) {
 18210cc:	e0bffa17 	ldw	r2,-24(fp)
 18210d0:	10bfffd8 	cmpnei	r2,r2,-1
 18210d4:	1000131e 	bne	r2,zero,1821124 <sys_timeouts_mbox_fetch+0xc4>
      /* If time == SYS_ARCH_TIMEOUT, a timeout occured before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
 18210d8:	d0a7f917 	ldw	r2,-24604(gp)
 18210dc:	e0bffb15 	stw	r2,-20(fp)
      next_timeout = tmptimeout->next;
 18210e0:	e0bffb17 	ldw	r2,-20(fp)
 18210e4:	10800017 	ldw	r2,0(r2)
 18210e8:	d0a7f915 	stw	r2,-24604(gp)
      handler = tmptimeout->h;
 18210ec:	e0bffb17 	ldw	r2,-20(fp)
 18210f0:	10800217 	ldw	r2,8(r2)
 18210f4:	e0bffc15 	stw	r2,-16(fp)
      arg = tmptimeout->arg;
 18210f8:	e0bffb17 	ldw	r2,-20(fp)
 18210fc:	10800317 	ldw	r2,12(r2)
 1821100:	e0bffd15 	stw	r2,-12(fp)
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 1821104:	e13ffb17 	ldw	r4,-20(fp)
 1821108:	183c5140 	call	183c514 <free>
      if (handler != NULL) {
 182110c:	e0bffc17 	ldw	r2,-16(fp)
 1821110:	103fd926 	beq	r2,zero,1821078 <__ram_exceptions_end+0xff810d88>
        /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
           timeout handler function. */
        LOCK_TCPIP_CORE();
        handler(arg);
 1821114:	e0bffc17 	ldw	r2,-16(fp)
 1821118:	e13ffd17 	ldw	r4,-12(fp)
 182111c:	103ee83a 	callr	r2
        UNLOCK_TCPIP_CORE();
      }
      LWIP_TCPIP_THREAD_ALIVE();

      /* We try again to fetch a message from the mbox. */
      goto again;
 1821120:	003fd506 	br	1821078 <__ram_exceptions_end+0xff810d88>
    } else {
      /* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
 1821124:	d0a7f917 	ldw	r2,-24604(gp)
 1821128:	10800117 	ldw	r2,4(r2)
 182112c:	e0fffa17 	ldw	r3,-24(fp)
 1821130:	1880072e 	bgeu	r3,r2,1821150 <sys_timeouts_mbox_fetch+0xf0>
        next_timeout->time -= time_needed;
 1821134:	d0a7f917 	ldw	r2,-24604(gp)
 1821138:	d0e7f917 	ldw	r3,-24604(gp)
 182113c:	19000117 	ldw	r4,4(r3)
 1821140:	e0fffa17 	ldw	r3,-24(fp)
 1821144:	20c7c83a 	sub	r3,r4,r3
 1821148:	10c00115 	stw	r3,4(r2)
      } else {
        next_timeout->time = 0;
      }
    }
  }
}
 182114c:	00000206 	br	1821158 <sys_timeouts_mbox_fetch+0xf8>
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
        next_timeout->time -= time_needed;
      } else {
        next_timeout->time = 0;
 1821150:	d0a7f917 	ldw	r2,-24604(gp)
 1821154:	10000115 	stw	zero,4(r2)
      }
    }
  }
}
 1821158:	0001883a 	nop
 182115c:	e037883a 	mov	sp,fp
 1821160:	dfc00117 	ldw	ra,4(sp)
 1821164:	df000017 	ldw	fp,0(sp)
 1821168:	dec00204 	addi	sp,sp,8
 182116c:	f800283a 	ret

01821170 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 1821170:	deffff04 	addi	sp,sp,-4
 1821174:	df000015 	stw	fp,0(sp)
 1821178:	d839883a 	mov	fp,sp
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 182117c:	0001883a 	nop
 1821180:	e037883a 	mov	sp,fp
 1821184:	df000017 	ldw	fp,0(sp)
 1821188:	dec00104 	addi	sp,sp,4
 182118c:	f800283a 	ret

01821190 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 1821190:	defffd04 	addi	sp,sp,-12
 1821194:	df000215 	stw	fp,8(sp)
 1821198:	df000204 	addi	fp,sp,8
  u16_t n = 0;
 182119c:	e03ffe0d 	sth	zero,-8(fp)
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 18211a0:	d0a0130b 	ldhu	r2,-32692(gp)
 18211a4:	10c00044 	addi	r3,r2,1
 18211a8:	d0e0130d 	sth	r3,-32692(gp)
 18211ac:	10ffffcc 	andi	r3,r2,65535
 18211b0:	00bfffd4 	movui	r2,65535
 18211b4:	1880021e 	bne	r3,r2,18211c0 <udp_new_port+0x30>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 18211b8:	00b00004 	movi	r2,-16384
 18211bc:	d0a0130d 	sth	r2,-32692(gp)
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 18211c0:	d0a7fb17 	ldw	r2,-24596(gp)
 18211c4:	e0bfff15 	stw	r2,-4(fp)
 18211c8:	00001106 	br	1821210 <udp_new_port+0x80>
    if (pcb->local_port == udp_port) {
 18211cc:	e0bfff17 	ldw	r2,-4(fp)
 18211d0:	10c0048b 	ldhu	r3,18(r2)
 18211d4:	d0a0130b 	ldhu	r2,-32692(gp)
 18211d8:	18ffffcc 	andi	r3,r3,65535
 18211dc:	10bfffcc 	andi	r2,r2,65535
 18211e0:	1880081e 	bne	r3,r2,1821204 <udp_new_port+0x74>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 18211e4:	e0bffe0b 	ldhu	r2,-8(fp)
 18211e8:	10800044 	addi	r2,r2,1
 18211ec:	e0bffe0d 	sth	r2,-8(fp)
 18211f0:	e0bffe0b 	ldhu	r2,-8(fp)
 18211f4:	10900030 	cmpltui	r2,r2,16384
 18211f8:	103fe91e 	bne	r2,zero,18211a0 <__ram_exceptions_end+0xff810eb0>
        return 0;
 18211fc:	0005883a 	mov	r2,zero
 1821200:	00000606 	br	182121c <udp_new_port+0x8c>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 1821204:	e0bfff17 	ldw	r2,-4(fp)
 1821208:	10800317 	ldw	r2,12(r2)
 182120c:	e0bfff15 	stw	r2,-4(fp)
 1821210:	e0bfff17 	ldw	r2,-4(fp)
 1821214:	103fed1e 	bne	r2,zero,18211cc <__ram_exceptions_end+0xff810edc>
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
 1821218:	d0a0130b 	ldhu	r2,-32692(gp)
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 182121c:	e037883a 	mov	sp,fp
 1821220:	df000017 	ldw	fp,0(sp)
 1821224:	dec00104 	addi	sp,sp,4
 1821228:	f800283a 	ret

0182122c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 182122c:	defff304 	addi	sp,sp,-52
 1821230:	dfc00c15 	stw	ra,48(sp)
 1821234:	df000b15 	stw	fp,44(sp)
 1821238:	df000b04 	addi	fp,sp,44
 182123c:	e13ffe15 	stw	r4,-8(fp)
 1821240:	e17fff15 	stw	r5,-4(fp)
  u8_t local_match;
  u8_t broadcast;

  PERF_START;

  UDP_STATS_INC(udp.recv);
 1821244:	00806134 	movhi	r2,388
 1821248:	109e7504 	addi	r2,r2,31188
 182124c:	10803d17 	ldw	r2,244(r2)
 1821250:	10c00044 	addi	r3,r2,1
 1821254:	00806134 	movhi	r2,388
 1821258:	109e7504 	addi	r2,r2,31188
 182125c:	10c03d15 	stw	r3,244(r2)

  iphdr = (struct ip_hdr *)p->payload;
 1821260:	e0bffe17 	ldw	r2,-8(fp)
 1821264:	10800117 	ldw	r2,4(r2)
 1821268:	e0bffa15 	stw	r2,-24(fp)

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 182126c:	e0bffe17 	ldw	r2,-8(fp)
 1821270:	1080020b 	ldhu	r2,8(r2)
 1821274:	10ffffcc 	andi	r3,r2,65535
 1821278:	e0bffa17 	ldw	r2,-24(fp)
 182127c:	10800003 	ldbu	r2,0(r2)
 1821280:	10803fcc 	andi	r2,r2,255
 1821284:	108003cc 	andi	r2,r2,15
 1821288:	10800084 	addi	r2,r2,2
 182128c:	1085883a 	add	r2,r2,r2
 1821290:	1085883a 	add	r2,r2,r2
 1821294:	18800f16 	blt	r3,r2,18212d4 <udp_input+0xa8>
 1821298:	e0bffa17 	ldw	r2,-24(fp)
 182129c:	10800003 	ldbu	r2,0(r2)
 18212a0:	10803fcc 	andi	r2,r2,255
 18212a4:	108003cc 	andi	r2,r2,15
 18212a8:	1085883a 	add	r2,r2,r2
 18212ac:	1085883a 	add	r2,r2,r2
 18212b0:	0085c83a 	sub	r2,zero,r2
 18212b4:	10bfffcc 	andi	r2,r2,65535
 18212b8:	10a0001c 	xori	r2,r2,32768
 18212bc:	10a00004 	addi	r2,r2,-32768
 18212c0:	100b883a 	mov	r5,r2
 18212c4:	e13ffe17 	ldw	r4,-8(fp)
 18212c8:	181a07c0 	call	181a07c <pbuf_header>
 18212cc:	10803fcc 	andi	r2,r2,255
 18212d0:	10001126 	beq	r2,zero,1821318 <udp_input+0xec>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 18212d4:	00806134 	movhi	r2,388
 18212d8:	109e7504 	addi	r2,r2,31188
 18212dc:	10804117 	ldw	r2,260(r2)
 18212e0:	10c00044 	addi	r3,r2,1
 18212e4:	00806134 	movhi	r2,388
 18212e8:	109e7504 	addi	r2,r2,31188
 18212ec:	10c04115 	stw	r3,260(r2)
    UDP_STATS_INC(udp.drop);
 18212f0:	00806134 	movhi	r2,388
 18212f4:	109e7504 	addi	r2,r2,31188
 18212f8:	10803f17 	ldw	r2,252(r2)
 18212fc:	10c00044 	addi	r3,r2,1
 1821300:	00806134 	movhi	r2,388
 1821304:	109e7504 	addi	r2,r2,31188
 1821308:	10c03f15 	stw	r3,252(r2)
    snmp_inc_udpinerrors();
    pbuf_free(p);
 182130c:	e13ffe17 	ldw	r4,-8(fp)
 1821310:	181a22c0 	call	181a22c <pbuf_free>
    goto end;
 1821314:	00011f06 	br	1821794 <udp_input+0x568>
  }

  udphdr = (struct udp_hdr *)p->payload;
 1821318:	e0bffe17 	ldw	r2,-8(fp)
 182131c:	10800117 	ldw	r2,4(r2)
 1821320:	e0bffb15 	stw	r2,-20(fp)

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 1821324:	d0a81117 	ldw	r2,-24508(gp)
 1821328:	e17fff17 	ldw	r5,-4(fp)
 182132c:	1009883a 	mov	r4,r2
 1821330:	18189b80 	call	18189b8 <ip4_addr_isbroadcast>
 1821334:	e0bffc05 	stb	r2,-16(fp)

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 1821338:	e0bffb17 	ldw	r2,-20(fp)
 182133c:	10c00003 	ldbu	r3,0(r2)
 1821340:	10800043 	ldbu	r2,1(r2)
 1821344:	1004923a 	slli	r2,r2,8
 1821348:	10c4b03a 	or	r2,r2,r3
 182134c:	10bfffcc 	andi	r2,r2,65535
 1821350:	1004d23a 	srli	r2,r2,8
 1821354:	1009883a 	mov	r4,r2
 1821358:	e0bffb17 	ldw	r2,-20(fp)
 182135c:	10c00003 	ldbu	r3,0(r2)
 1821360:	10800043 	ldbu	r2,1(r2)
 1821364:	1004923a 	slli	r2,r2,8
 1821368:	10c4b03a 	or	r2,r2,r3
 182136c:	10bfffcc 	andi	r2,r2,65535
 1821370:	1004923a 	slli	r2,r2,8
 1821374:	2084b03a 	or	r2,r4,r2
 1821378:	e0bffc8d 	sth	r2,-14(fp)
  dest = ntohs(udphdr->dest);
 182137c:	e0bffb17 	ldw	r2,-20(fp)
 1821380:	10c00083 	ldbu	r3,2(r2)
 1821384:	108000c3 	ldbu	r2,3(r2)
 1821388:	1004923a 	slli	r2,r2,8
 182138c:	10c4b03a 	or	r2,r2,r3
 1821390:	10bfffcc 	andi	r2,r2,65535
 1821394:	1004d23a 	srli	r2,r2,8
 1821398:	1009883a 	mov	r4,r2
 182139c:	e0bffb17 	ldw	r2,-20(fp)
 18213a0:	10c00083 	ldbu	r3,2(r2)
 18213a4:	108000c3 	ldbu	r2,3(r2)
 18213a8:	1004923a 	slli	r2,r2,8
 18213ac:	10c4b03a 	or	r2,r2,r3
 18213b0:	10bfffcc 	andi	r2,r2,65535
 18213b4:	1004923a 	slli	r2,r2,8
 18213b8:	2084b03a 	or	r2,r4,r2
 18213bc:	e0bffd0d 	sth	r2,-12(fp)
               ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
               ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
               ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));

#if LWIP_DHCP
  pcb = NULL;
 18213c0:	e03ff615 	stw	zero,-40(fp)
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
 18213c4:	e0bffd0b 	ldhu	r2,-12(fp)
 18213c8:	10801118 	cmpnei	r2,r2,68
 18213cc:	10001f1e 	bne	r2,zero,182144c <udp_input+0x220>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
 18213d0:	e0bffc8b 	ldhu	r2,-14(fp)
 18213d4:	108010d8 	cmpnei	r2,r2,67
 18213d8:	10007a1e 	bne	r2,zero,18215c4 <udp_input+0x398>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
 18213dc:	e0bfff17 	ldw	r2,-4(fp)
 18213e0:	10800a17 	ldw	r2,40(r2)
 18213e4:	10007726 	beq	r2,zero,18215c4 <udp_input+0x398>
 18213e8:	e0bfff17 	ldw	r2,-4(fp)
 18213ec:	10800a17 	ldw	r2,40(r2)
 18213f0:	10800117 	ldw	r2,4(r2)
 18213f4:	10007326 	beq	r2,zero,18215c4 <udp_input+0x398>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
 18213f8:	e0bfff17 	ldw	r2,-4(fp)
 18213fc:	10800a17 	ldw	r2,40(r2)
 1821400:	10800117 	ldw	r2,4(r2)
 1821404:	10800104 	addi	r2,r2,4
 1821408:	10000b26 	beq	r2,zero,1821438 <udp_input+0x20c>
 182140c:	e0bfff17 	ldw	r2,-4(fp)
 1821410:	10800a17 	ldw	r2,40(r2)
 1821414:	10800117 	ldw	r2,4(r2)
 1821418:	10800117 	ldw	r2,4(r2)
 182141c:	10000626 	beq	r2,zero,1821438 <udp_input+0x20c>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
 1821420:	e0bfff17 	ldw	r2,-4(fp)
 1821424:	10800a17 	ldw	r2,40(r2)
 1821428:	10800117 	ldw	r2,4(r2)
 182142c:	10c00117 	ldw	r3,4(r2)
 1821430:	d0a80f17 	ldw	r2,-24516(gp)
    if (src == DHCP_SERVER_PORT) {
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
 1821434:	1880631e 	bne	r3,r2,18215c4 <udp_input+0x398>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
          pcb = inp->dhcp->pcb;
 1821438:	e0bfff17 	ldw	r2,-4(fp)
 182143c:	10800a17 	ldw	r2,40(r2)
 1821440:	10800117 	ldw	r2,4(r2)
 1821444:	e0bff615 	stw	r2,-40(fp)
 1821448:	00005e06 	br	18215c4 <udp_input+0x398>
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 182144c:	e03ff715 	stw	zero,-36(fp)
    local_match = 0;
 1821450:	e03ff905 	stb	zero,-28(fp)
    uncon_pcb = NULL;
 1821454:	e03ff815 	stw	zero,-32(fp)
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 1821458:	d0a7fb17 	ldw	r2,-24596(gp)
 182145c:	e0bff615 	stw	r2,-40(fp)
 1821460:	00005206 	br	18215ac <udp_input+0x380>
      local_match = 0;
 1821464:	e03ff905 	stb	zero,-28(fp)
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
 1821468:	e0bff617 	ldw	r2,-40(fp)
 182146c:	1080048b 	ldhu	r2,18(r2)
 1821470:	10ffffcc 	andi	r3,r2,65535
 1821474:	e0bffd0b 	ldhu	r2,-12(fp)
 1821478:	1880221e 	bne	r3,r2,1821504 <udp_input+0x2d8>
 182147c:	e0bffc03 	ldbu	r2,-16(fp)
 1821480:	1000051e 	bne	r2,zero,1821498 <udp_input+0x26c>
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 1821484:	e0bff617 	ldw	r2,-40(fp)
 1821488:	10001326 	beq	r2,zero,18214d8 <udp_input+0x2ac>
 182148c:	e0bff617 	ldw	r2,-40(fp)
 1821490:	10800017 	ldw	r2,0(r2)
 1821494:	10001026 	beq	r2,zero,18214d8 <udp_input+0x2ac>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 1821498:	e0bff617 	ldw	r2,-40(fp)
 182149c:	10c00017 	ldw	r3,0(r2)
 18214a0:	d0a81117 	ldw	r2,-24508(gp)
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 18214a4:	18800c26 	beq	r3,r2,18214d8 <udp_input+0x2ac>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 18214a8:	e0bffc03 	ldbu	r2,-16(fp)
 18214ac:	10001526 	beq	r2,zero,1821504 <udp_input+0x2d8>
#endif /* LWIP_IGMP */
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
 18214b0:	e0bff617 	ldw	r2,-40(fp)
 18214b4:	10c00017 	ldw	r3,0(r2)
 18214b8:	e0bfff17 	ldw	r2,-4(fp)
 18214bc:	10800117 	ldw	r2,4(r2)
           ip_addr_ismulticast(&current_iphdr_dest) ||
#endif /* LWIP_IGMP */
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
 18214c0:	18800526 	beq	r3,r2,18214d8 <udp_input+0x2ac>
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
			 ip_addr_isany(&pcb->local_ip))))) {
 18214c4:	e0bff617 	ldw	r2,-40(fp)
#endif /* LWIP_IGMP */
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
 18214c8:	10000326 	beq	r2,zero,18214d8 <udp_input+0x2ac>
			 ip_addr_isany(&pcb->local_ip))))) {
 18214cc:	e0bff617 	ldw	r2,-40(fp)
 18214d0:	10800017 	ldw	r2,0(r2)
 18214d4:	10000b1e 	bne	r2,zero,1821504 <udp_input+0x2d8>
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
 18214d8:	00800044 	movi	r2,1
 18214dc:	e0bff905 	stb	r2,-28(fp)
          if ((uncon_pcb == NULL) && 
 18214e0:	e0bff817 	ldw	r2,-32(fp)
 18214e4:	1000071e 	bne	r2,zero,1821504 <udp_input+0x2d8>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 18214e8:	e0bff617 	ldw	r2,-40(fp)
 18214ec:	10800403 	ldbu	r2,16(r2)
 18214f0:	10803fcc 	andi	r2,r2,255
 18214f4:	1080010c 	andi	r2,r2,4
            (broadcast &&
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
			 ip_addr_isany(&pcb->local_ip))))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
 18214f8:	1000021e 	bne	r2,zero,1821504 <udp_input+0x2d8>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
 18214fc:	e0bff617 	ldw	r2,-40(fp)
 1821500:	e0bff815 	stw	r2,-32(fp)
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 1821504:	e0bff903 	ldbu	r2,-28(fp)
 1821508:	10002326 	beq	r2,zero,1821598 <udp_input+0x36c>
          (pcb->remote_port == src) &&
 182150c:	e0bff617 	ldw	r2,-40(fp)
 1821510:	1080050b 	ldhu	r2,20(r2)
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 1821514:	10ffffcc 	andi	r3,r2,65535
 1821518:	e0bffc8b 	ldhu	r2,-14(fp)
 182151c:	18801e1e 	bne	r3,r2,1821598 <udp_input+0x36c>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 1821520:	e0bff617 	ldw	r2,-40(fp)
 1821524:	10800104 	addi	r2,r2,4
            uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
 1821528:	10000726 	beq	r2,zero,1821548 <udp_input+0x31c>
          (ip_addr_isany(&pcb->remote_ip) ||
 182152c:	e0bff617 	ldw	r2,-40(fp)
 1821530:	10800117 	ldw	r2,4(r2)
 1821534:	10000426 	beq	r2,zero,1821548 <udp_input+0x31c>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 1821538:	e0bff617 	ldw	r2,-40(fp)
 182153c:	10c00117 	ldw	r3,4(r2)
 1821540:	d0a80f17 	ldw	r2,-24516(gp)
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 1821544:	1880141e 	bne	r3,r2,1821598 <udp_input+0x36c>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 1821548:	e0bff717 	ldw	r2,-36(fp)
 182154c:	10000a26 	beq	r2,zero,1821578 <udp_input+0x34c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 1821550:	e0bff617 	ldw	r2,-40(fp)
 1821554:	10c00317 	ldw	r3,12(r2)
 1821558:	e0bff717 	ldw	r2,-36(fp)
 182155c:	10c00315 	stw	r3,12(r2)
          pcb->next = udp_pcbs;
 1821560:	d0e7fb17 	ldw	r3,-24596(gp)
 1821564:	e0bff617 	ldw	r2,-40(fp)
 1821568:	10c00315 	stw	r3,12(r2)
          udp_pcbs = pcb;
 182156c:	e0bff617 	ldw	r2,-40(fp)
 1821570:	d0a7fb15 	stw	r2,-24596(gp)
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 1821574:	00000f06 	br	18215b4 <udp_input+0x388>
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
        } else {
          UDP_STATS_INC(udp.cachehit);
 1821578:	00806134 	movhi	r2,388
 182157c:	109e7504 	addi	r2,r2,31188
 1821580:	10804717 	ldw	r2,284(r2)
 1821584:	10c00044 	addi	r3,r2,1
 1821588:	00806134 	movhi	r2,388
 182158c:	109e7504 	addi	r2,r2,31188
 1821590:	10c04715 	stw	r3,284(r2)
        }
        break;
 1821594:	00000706 	br	18215b4 <udp_input+0x388>
      }
      prev = pcb;
 1821598:	e0bff617 	ldw	r2,-40(fp)
 182159c:	e0bff715 	stw	r2,-36(fp)
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 18215a0:	e0bff617 	ldw	r2,-40(fp)
 18215a4:	10800317 	ldw	r2,12(r2)
 18215a8:	e0bff615 	stw	r2,-40(fp)
 18215ac:	e0bff617 	ldw	r2,-40(fp)
 18215b0:	103fac1e 	bne	r2,zero,1821464 <__ram_exceptions_end+0xff811174>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
 18215b4:	e0bff617 	ldw	r2,-40(fp)
 18215b8:	1000021e 	bne	r2,zero,18215c4 <udp_input+0x398>
      pcb = uncon_pcb;
 18215bc:	e0bff817 	ldw	r2,-32(fp)
 18215c0:	e0bff615 	stw	r2,-40(fp)
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 18215c4:	e0bff617 	ldw	r2,-40(fp)
 18215c8:	1000041e 	bne	r2,zero,18215dc <udp_input+0x3b0>
 18215cc:	e0bfff17 	ldw	r2,-4(fp)
 18215d0:	10c00117 	ldw	r3,4(r2)
 18215d4:	d0a81117 	ldw	r2,-24508(gp)
 18215d8:	18806c1e 	bne	r3,r2,182178c <udp_input+0x560>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
 18215dc:	e0bffb17 	ldw	r2,-20(fp)
 18215e0:	10c00183 	ldbu	r3,6(r2)
 18215e4:	108001c3 	ldbu	r2,7(r2)
 18215e8:	1004923a 	slli	r2,r2,8
 18215ec:	10c4b03a 	or	r2,r2,r3
 18215f0:	10bfffcc 	andi	r2,r2,65535
 18215f4:	10001c26 	beq	r2,zero,1821668 <udp_input+0x43c>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
                               IP_PROTO_UDP, p->tot_len) != 0) {
 18215f8:	e0bffe17 	ldw	r2,-8(fp)
 18215fc:	1080020b 	ldhu	r2,8(r2)
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 1821600:	10bfffcc 	andi	r2,r2,65535
 1821604:	d8800015 	stw	r2,0(sp)
 1821608:	01c00444 	movi	r7,17
 182160c:	d1a81104 	addi	r6,gp,-24508
 1821610:	d1680f04 	addi	r5,gp,-24516
 1821614:	e13ffe17 	ldw	r4,-8(fp)
 1821618:	18313940 	call	1831394 <inet_chksum_pseudo>
 182161c:	10bfffcc 	andi	r2,r2,65535
 1821620:	10001126 	beq	r2,zero,1821668 <udp_input+0x43c>
                               IP_PROTO_UDP, p->tot_len) != 0) {
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
 1821624:	00806134 	movhi	r2,388
 1821628:	109e7504 	addi	r2,r2,31188
 182162c:	10804017 	ldw	r2,256(r2)
 1821630:	10c00044 	addi	r3,r2,1
 1821634:	00806134 	movhi	r2,388
 1821638:	109e7504 	addi	r2,r2,31188
 182163c:	10c04015 	stw	r3,256(r2)
          UDP_STATS_INC(udp.drop);
 1821640:	00806134 	movhi	r2,388
 1821644:	109e7504 	addi	r2,r2,31188
 1821648:	10803f17 	ldw	r2,252(r2)
 182164c:	10c00044 	addi	r3,r2,1
 1821650:	00806134 	movhi	r2,388
 1821654:	109e7504 	addi	r2,r2,31188
 1821658:	10c03f15 	stw	r3,252(r2)
          snmp_inc_udpinerrors();
          pbuf_free(p);
 182165c:	e13ffe17 	ldw	r4,-8(fp)
 1821660:	181a22c0 	call	181a22c <pbuf_free>
          goto end;
 1821664:	00004b06 	br	1821794 <udp_input+0x568>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
 1821668:	017ffe04 	movi	r5,-8
 182166c:	e13ffe17 	ldw	r4,-8(fp)
 1821670:	181a07c0 	call	181a07c <pbuf_header>
 1821674:	10803fcc 	andi	r2,r2,255
 1821678:	10000a26 	beq	r2,zero,18216a4 <udp_input+0x478>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
 182167c:	00806134 	movhi	r2,388
 1821680:	109e7504 	addi	r2,r2,31188
 1821684:	10803f17 	ldw	r2,252(r2)
 1821688:	10c00044 	addi	r3,r2,1
 182168c:	00806134 	movhi	r2,388
 1821690:	109e7504 	addi	r2,r2,31188
 1821694:	10c03f15 	stw	r3,252(r2)
      snmp_inc_udpinerrors();
      pbuf_free(p);
 1821698:	e13ffe17 	ldw	r4,-8(fp)
 182169c:	181a22c0 	call	181a22c <pbuf_free>
      goto end;
 18216a0:	00003c06 	br	1821794 <udp_input+0x568>
    }
    if (pcb != NULL) {
 18216a4:	e0bff617 	ldw	r2,-40(fp)
 18216a8:	10001126 	beq	r2,zero,18216f0 <udp_input+0x4c4>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 18216ac:	e0bff617 	ldw	r2,-40(fp)
 18216b0:	10800617 	ldw	r2,24(r2)
 18216b4:	10000b26 	beq	r2,zero,18216e4 <udp_input+0x4b8>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 18216b8:	e0bff617 	ldw	r2,-40(fp)
 18216bc:	10800617 	ldw	r2,24(r2)
 18216c0:	e0fff617 	ldw	r3,-40(fp)
 18216c4:	19000717 	ldw	r4,28(r3)
 18216c8:	e0fffc8b 	ldhu	r3,-14(fp)
 18216cc:	d8c00015 	stw	r3,0(sp)
 18216d0:	d1e80f04 	addi	r7,gp,-24516
 18216d4:	e1bffe17 	ldw	r6,-8(fp)
 18216d8:	e17ff617 	ldw	r5,-40(fp)
 18216dc:	103ee83a 	callr	r2
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 18216e0:	00002c06 	br	1821794 <udp_input+0x568>
      if (pcb->recv != NULL) {
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
 18216e4:	e13ffe17 	ldw	r4,-8(fp)
 18216e8:	181a22c0 	call	181a22c <pbuf_free>
        goto end;
 18216ec:	00002906 	br	1821794 <udp_input+0x568>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 18216f0:	e0bffc03 	ldbu	r2,-16(fp)
 18216f4:	1000141e 	bne	r2,zero,1821748 <udp_input+0x51c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 18216f8:	d0a81117 	ldw	r2,-24508(gp)
 18216fc:	10803c0c 	andi	r2,r2,240
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 1821700:	10803820 	cmpeqi	r2,r2,224
 1821704:	1000101e 	bne	r2,zero,1821748 <udp_input+0x51c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 1821708:	e0bffa17 	ldw	r2,-24(fp)
 182170c:	10800003 	ldbu	r2,0(r2)
 1821710:	10803fcc 	andi	r2,r2,255
 1821714:	108003cc 	andi	r2,r2,15
 1821718:	10800084 	addi	r2,r2,2
 182171c:	1085883a 	add	r2,r2,r2
 1821720:	1085883a 	add	r2,r2,r2
 1821724:	10bfffcc 	andi	r2,r2,65535
 1821728:	10a0001c 	xori	r2,r2,32768
 182172c:	10a00004 	addi	r2,r2,-32768
 1821730:	100b883a 	mov	r5,r2
 1821734:	e13ffe17 	ldw	r4,-8(fp)
 1821738:	181a07c0 	call	181a07c <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 182173c:	014000c4 	movi	r5,3
 1821740:	e13ffe17 	ldw	r4,-8(fp)
 1821744:	1830ef00 	call	1830ef0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
 1821748:	00806134 	movhi	r2,388
 182174c:	109e7504 	addi	r2,r2,31188
 1821750:	10804417 	ldw	r2,272(r2)
 1821754:	10c00044 	addi	r3,r2,1
 1821758:	00806134 	movhi	r2,388
 182175c:	109e7504 	addi	r2,r2,31188
 1821760:	10c04415 	stw	r3,272(r2)
      UDP_STATS_INC(udp.drop);
 1821764:	00806134 	movhi	r2,388
 1821768:	109e7504 	addi	r2,r2,31188
 182176c:	10803f17 	ldw	r2,252(r2)
 1821770:	10c00044 	addi	r3,r2,1
 1821774:	00806134 	movhi	r2,388
 1821778:	109e7504 	addi	r2,r2,31188
 182177c:	10c03f15 	stw	r3,252(r2)
      snmp_inc_udpnoports();
      pbuf_free(p);
 1821780:	e13ffe17 	ldw	r4,-8(fp)
 1821784:	181a22c0 	call	181a22c <pbuf_free>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 1821788:	00000206 	br	1821794 <udp_input+0x568>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
 182178c:	e13ffe17 	ldw	r4,-8(fp)
 1821790:	181a22c0 	call	181a22c <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
 1821794:	0001883a 	nop
 1821798:	e037883a 	mov	sp,fp
 182179c:	dfc00117 	ldw	ra,4(sp)
 18217a0:	df000017 	ldw	fp,0(sp)
 18217a4:	dec00204 	addi	sp,sp,8
 18217a8:	f800283a 	ret

018217ac <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 18217ac:	defffc04 	addi	sp,sp,-16
 18217b0:	dfc00315 	stw	ra,12(sp)
 18217b4:	df000215 	stw	fp,8(sp)
 18217b8:	df000204 	addi	fp,sp,8
 18217bc:	e13ffe15 	stw	r4,-8(fp)
 18217c0:	e17fff15 	stw	r5,-4(fp)
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 18217c4:	e0bffe17 	ldw	r2,-8(fp)
 18217c8:	10c00104 	addi	r3,r2,4
 18217cc:	e0bffe17 	ldw	r2,-8(fp)
 18217d0:	1080050b 	ldhu	r2,20(r2)
 18217d4:	10bfffcc 	andi	r2,r2,65535
 18217d8:	100f883a 	mov	r7,r2
 18217dc:	180d883a 	mov	r6,r3
 18217e0:	e17fff17 	ldw	r5,-4(fp)
 18217e4:	e13ffe17 	ldw	r4,-8(fp)
 18217e8:	18218740 	call	1821874 <udp_sendto>
}
 18217ec:	e037883a 	mov	sp,fp
 18217f0:	dfc00117 	ldw	ra,4(sp)
 18217f4:	df000017 	ldw	fp,0(sp)
 18217f8:	dec00204 	addi	sp,sp,8
 18217fc:	f800283a 	ret

01821800 <udp_send_chksum>:
/** Same as udp_send() but with checksum
 */
err_t
udp_send_chksum(struct udp_pcb *pcb, struct pbuf *p,
                u8_t have_chksum, u16_t chksum)
{
 1821800:	defff804 	addi	sp,sp,-32
 1821804:	dfc00715 	stw	ra,28(sp)
 1821808:	df000615 	stw	fp,24(sp)
 182180c:	df000604 	addi	fp,sp,24
 1821810:	e13ffc15 	stw	r4,-16(fp)
 1821814:	e17ffd15 	stw	r5,-12(fp)
 1821818:	3007883a 	mov	r3,r6
 182181c:	3805883a 	mov	r2,r7
 1821820:	e0fffe05 	stb	r3,-8(fp)
 1821824:	e0bfff0d 	sth	r2,-4(fp)
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto_chksum(pcb, p, &pcb->remote_ip, pcb->remote_port,
 1821828:	e0bffc17 	ldw	r2,-16(fp)
 182182c:	11000104 	addi	r4,r2,4
 1821830:	e0bffc17 	ldw	r2,-16(fp)
 1821834:	1080050b 	ldhu	r2,20(r2)
 1821838:	117fffcc 	andi	r5,r2,65535
 182183c:	e0bffe03 	ldbu	r2,-8(fp)
 1821840:	e0ffff0b 	ldhu	r3,-4(fp)
 1821844:	d8c00115 	stw	r3,4(sp)
 1821848:	d8800015 	stw	r2,0(sp)
 182184c:	280f883a 	mov	r7,r5
 1821850:	200d883a 	mov	r6,r4
 1821854:	e17ffd17 	ldw	r5,-12(fp)
 1821858:	e13ffc17 	ldw	r4,-16(fp)
 182185c:	18218cc0 	call	18218cc <udp_sendto_chksum>
    have_chksum, chksum);
}
 1821860:	e037883a 	mov	sp,fp
 1821864:	dfc00117 	ldw	ra,4(sp)
 1821868:	df000017 	ldw	fp,0(sp)
 182186c:	dec00204 	addi	sp,sp,8
 1821870:	f800283a 	ret

01821874 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port)
{
 1821874:	defff804 	addi	sp,sp,-32
 1821878:	dfc00715 	stw	ra,28(sp)
 182187c:	df000615 	stw	fp,24(sp)
 1821880:	df000604 	addi	fp,sp,24
 1821884:	e13ffc15 	stw	r4,-16(fp)
 1821888:	e17ffd15 	stw	r5,-12(fp)
 182188c:	e1bffe15 	stw	r6,-8(fp)
 1821890:	3805883a 	mov	r2,r7
 1821894:	e0bfff0d 	sth	r2,-4(fp)
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
 1821898:	e0bfff0b 	ldhu	r2,-4(fp)
 182189c:	d8000115 	stw	zero,4(sp)
 18218a0:	d8000015 	stw	zero,0(sp)
 18218a4:	100f883a 	mov	r7,r2
 18218a8:	e1bffe17 	ldw	r6,-8(fp)
 18218ac:	e17ffd17 	ldw	r5,-12(fp)
 18218b0:	e13ffc17 	ldw	r4,-16(fp)
 18218b4:	18218cc0 	call	18218cc <udp_sendto_chksum>
}
 18218b8:	e037883a 	mov	sp,fp
 18218bc:	dfc00117 	ldw	ra,4(sp)
 18218c0:	df000017 	ldw	fp,0(sp)
 18218c4:	dec00204 	addi	sp,sp,8
 18218c8:	f800283a 	ret

018218cc <udp_sendto_chksum>:

/** Same as udp_sendto(), but with checksum */
err_t
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
 18218cc:	defff404 	addi	sp,sp,-48
 18218d0:	dfc00b15 	stw	ra,44(sp)
 18218d4:	df000a15 	stw	fp,40(sp)
 18218d8:	df000a04 	addi	fp,sp,40
 18218dc:	e13ffa15 	stw	r4,-24(fp)
 18218e0:	e17ffb15 	stw	r5,-20(fp)
 18218e4:	e1bffc15 	stw	r6,-16(fp)
 18218e8:	3809883a 	mov	r4,r7
 18218ec:	e0c00217 	ldw	r3,8(fp)
 18218f0:	e0800317 	ldw	r2,12(fp)
 18218f4:	e13ffd0d 	sth	r4,-12(fp)
 18218f8:	e0fffe05 	stb	r3,-8(fp)
 18218fc:	e0bfff0d 	sth	r2,-4(fp)

  /* find the outgoing network interface for this packet */
#if LWIP_IGMP
  netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
#else
  netif = ip_route(&(pcb->local_ip), dst_ip);
 1821900:	e0bffa17 	ldw	r2,-24(fp)
 1821904:	e17ffc17 	ldw	r5,-16(fp)
 1821908:	1009883a 	mov	r4,r2
 182190c:	18319740 	call	1831974 <ip_route>
 1821910:	e0bff915 	stw	r2,-28(fp)
#endif /* LWIP_IGMP */

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 1821914:	e0bff917 	ldw	r2,-28(fp)
 1821918:	1000091e 	bne	r2,zero,1821940 <udp_sendto_chksum+0x74>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
    UDP_STATS_INC(udp.rterr);
 182191c:	00806134 	movhi	r2,388
 1821920:	109e7504 	addi	r2,r2,31188
 1821924:	10804317 	ldw	r2,268(r2)
 1821928:	10c00044 	addi	r3,r2,1
 182192c:	00806134 	movhi	r2,388
 1821930:	109e7504 	addi	r2,r2,31188
 1821934:	10c04315 	stw	r3,268(r2)
    return ERR_RTE;
 1821938:	00bfff04 	movi	r2,-4
 182193c:	00000c06 	br	1821970 <udp_sendto_chksum+0xa4>
  }
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
 1821940:	e13ffd0b 	ldhu	r4,-12(fp)
 1821944:	e0bffe03 	ldbu	r2,-8(fp)
 1821948:	e0ffff0b 	ldhu	r3,-4(fp)
 182194c:	d8c00215 	stw	r3,8(sp)
 1821950:	d8800115 	stw	r2,4(sp)
 1821954:	e0bff917 	ldw	r2,-28(fp)
 1821958:	d8800015 	stw	r2,0(sp)
 182195c:	200f883a 	mov	r7,r4
 1821960:	e1bffc17 	ldw	r6,-16(fp)
 1821964:	e17ffb17 	ldw	r5,-20(fp)
 1821968:	e13ffa17 	ldw	r4,-24(fp)
 182196c:	18219e40 	call	18219e4 <udp_sendto_if_chksum>
#else /* LWIP_CHECKSUM_ON_COPY */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 1821970:	e037883a 	mov	sp,fp
 1821974:	dfc00117 	ldw	ra,4(sp)
 1821978:	df000017 	ldw	fp,0(sp)
 182197c:	dec00204 	addi	sp,sp,8
 1821980:	f800283a 	ret

01821984 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 1821984:	defff704 	addi	sp,sp,-36
 1821988:	dfc00815 	stw	ra,32(sp)
 182198c:	df000715 	stw	fp,28(sp)
 1821990:	df000704 	addi	fp,sp,28
 1821994:	e13ffc15 	stw	r4,-16(fp)
 1821998:	e17ffd15 	stw	r5,-12(fp)
 182199c:	e1bffe15 	stw	r6,-8(fp)
 18219a0:	3805883a 	mov	r2,r7
 18219a4:	e0bfff0d 	sth	r2,-4(fp)
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0);
 18219a8:	e0ffff0b 	ldhu	r3,-4(fp)
 18219ac:	d8000215 	stw	zero,8(sp)
 18219b0:	d8000115 	stw	zero,4(sp)
 18219b4:	e0800217 	ldw	r2,8(fp)
 18219b8:	d8800015 	stw	r2,0(sp)
 18219bc:	180f883a 	mov	r7,r3
 18219c0:	e1bffe17 	ldw	r6,-8(fp)
 18219c4:	e17ffd17 	ldw	r5,-12(fp)
 18219c8:	e13ffc17 	ldw	r4,-16(fp)
 18219cc:	18219e40 	call	18219e4 <udp_sendto_if_chksum>
}
 18219d0:	e037883a 	mov	sp,fp
 18219d4:	dfc00117 	ldw	ra,4(sp)
 18219d8:	df000017 	ldw	fp,0(sp)
 18219dc:	dec00204 	addi	sp,sp,8
 18219e0:	f800283a 	ret

018219e4 <udp_sendto_if_chksum>:
/** Same as udp_sendto_if(), but with checksum */
err_t
udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
                     u16_t dst_port, struct netif *netif, u8_t have_chksum,
                     u16_t chksum)
{
 18219e4:	defff004 	addi	sp,sp,-64
 18219e8:	dfc00f15 	stw	ra,60(sp)
 18219ec:	df000e15 	stw	fp,56(sp)
 18219f0:	df000e04 	addi	fp,sp,56
 18219f4:	e13ffa15 	stw	r4,-24(fp)
 18219f8:	e17ffb15 	stw	r5,-20(fp)
 18219fc:	e1bffc15 	stw	r6,-16(fp)
 1821a00:	3809883a 	mov	r4,r7
 1821a04:	e0c00317 	ldw	r3,12(fp)
 1821a08:	e0800417 	ldw	r2,16(fp)
 1821a0c:	e13ffd0d 	sth	r4,-12(fp)
 1821a10:	e0fffe05 	stb	r3,-8(fp)
 1821a14:	e0bfff0d 	sth	r2,-4(fp)
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 1821a18:	e0bffa17 	ldw	r2,-24(fp)
 1821a1c:	1080048b 	ldhu	r2,18(r2)
 1821a20:	10bfffcc 	andi	r2,r2,65535
 1821a24:	10000d1e 	bne	r2,zero,1821a5c <udp_sendto_if_chksum+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 1821a28:	e0fffa17 	ldw	r3,-24(fp)
 1821a2c:	e0bffa17 	ldw	r2,-24(fp)
 1821a30:	1080048b 	ldhu	r2,18(r2)
 1821a34:	10bfffcc 	andi	r2,r2,65535
 1821a38:	100d883a 	mov	r6,r2
 1821a3c:	180b883a 	mov	r5,r3
 1821a40:	e13ffa17 	ldw	r4,-24(fp)
 1821a44:	1821e380 	call	1821e38 <udp_bind>
 1821a48:	e0bff785 	stb	r2,-34(fp)
    if (err != ERR_OK) {
 1821a4c:	e0bff787 	ldb	r2,-34(fp)
 1821a50:	10000226 	beq	r2,zero,1821a5c <udp_sendto_if_chksum+0x78>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 1821a54:	e0bff783 	ldbu	r2,-34(fp)
 1821a58:	0000f206 	br	1821e24 <udp_sendto_if_chksum+0x440>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 1821a5c:	01400204 	movi	r5,8
 1821a60:	e13ffb17 	ldw	r4,-20(fp)
 1821a64:	181a07c0 	call	181a07c <pbuf_header>
 1821a68:	10803fcc 	andi	r2,r2,255
 1821a6c:	10001126 	beq	r2,zero,1821ab4 <udp_sendto_if_chksum+0xd0>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 1821a70:	000d883a 	mov	r6,zero
 1821a74:	01400204 	movi	r5,8
 1821a78:	01000044 	movi	r4,1
 1821a7c:	1819aa40 	call	1819aa4 <pbuf_alloc>
 1821a80:	e0bff615 	stw	r2,-40(fp)
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 1821a84:	e0bff617 	ldw	r2,-40(fp)
 1821a88:	1000021e 	bne	r2,zero,1821a94 <udp_sendto_if_chksum+0xb0>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 1821a8c:	00bfffc4 	movi	r2,-1
 1821a90:	0000e406 	br	1821e24 <udp_sendto_if_chksum+0x440>
    }
    if (p->tot_len != 0) {
 1821a94:	e0bffb17 	ldw	r2,-20(fp)
 1821a98:	1080020b 	ldhu	r2,8(r2)
 1821a9c:	10bfffcc 	andi	r2,r2,65535
 1821aa0:	10000626 	beq	r2,zero,1821abc <udp_sendto_if_chksum+0xd8>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 1821aa4:	e17ffb17 	ldw	r5,-20(fp)
 1821aa8:	e13ff617 	ldw	r4,-40(fp)
 1821aac:	181a4ec0 	call	181a4ec <pbuf_chain>
 1821ab0:	00000206 	br	1821abc <udp_sendto_if_chksum+0xd8>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 1821ab4:	e0bffb17 	ldw	r2,-20(fp)
 1821ab8:	e0bff615 	stw	r2,-40(fp)
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 1821abc:	e0bff617 	ldw	r2,-40(fp)
 1821ac0:	10800117 	ldw	r2,4(r2)
 1821ac4:	e0bff815 	stw	r2,-32(fp)
  udphdr->src = htons(pcb->local_port);
 1821ac8:	e0bffa17 	ldw	r2,-24(fp)
 1821acc:	1080048b 	ldhu	r2,18(r2)
 1821ad0:	10bfffcc 	andi	r2,r2,65535
 1821ad4:	1004d23a 	srli	r2,r2,8
 1821ad8:	1007883a 	mov	r3,r2
 1821adc:	e0bffa17 	ldw	r2,-24(fp)
 1821ae0:	1080048b 	ldhu	r2,18(r2)
 1821ae4:	10bfffcc 	andi	r2,r2,65535
 1821ae8:	1004923a 	slli	r2,r2,8
 1821aec:	1884b03a 	or	r2,r3,r2
 1821af0:	100d883a 	mov	r6,r2
 1821af4:	e0bff817 	ldw	r2,-32(fp)
 1821af8:	30ffffcc 	andi	r3,r6,65535
 1821afc:	19403fcc 	andi	r5,r3,255
 1821b00:	10c00003 	ldbu	r3,0(r2)
 1821b04:	1806703a 	and	r3,r3,zero
 1821b08:	1809883a 	mov	r4,r3
 1821b0c:	2807883a 	mov	r3,r5
 1821b10:	20c6b03a 	or	r3,r4,r3
 1821b14:	10c00005 	stb	r3,0(r2)
 1821b18:	30ffffcc 	andi	r3,r6,65535
 1821b1c:	1806d23a 	srli	r3,r3,8
 1821b20:	197fffcc 	andi	r5,r3,65535
 1821b24:	10c00043 	ldbu	r3,1(r2)
 1821b28:	1806703a 	and	r3,r3,zero
 1821b2c:	1809883a 	mov	r4,r3
 1821b30:	2807883a 	mov	r3,r5
 1821b34:	20c6b03a 	or	r3,r4,r3
 1821b38:	10c00045 	stb	r3,1(r2)
  udphdr->dest = htons(dst_port);
 1821b3c:	e0bffd0b 	ldhu	r2,-12(fp)
 1821b40:	1004d23a 	srli	r2,r2,8
 1821b44:	1007883a 	mov	r3,r2
 1821b48:	e0bffd0b 	ldhu	r2,-12(fp)
 1821b4c:	1004923a 	slli	r2,r2,8
 1821b50:	1884b03a 	or	r2,r3,r2
 1821b54:	100d883a 	mov	r6,r2
 1821b58:	e0bff817 	ldw	r2,-32(fp)
 1821b5c:	30ffffcc 	andi	r3,r6,65535
 1821b60:	19403fcc 	andi	r5,r3,255
 1821b64:	10c00083 	ldbu	r3,2(r2)
 1821b68:	1806703a 	and	r3,r3,zero
 1821b6c:	1809883a 	mov	r4,r3
 1821b70:	2807883a 	mov	r3,r5
 1821b74:	20c6b03a 	or	r3,r4,r3
 1821b78:	10c00085 	stb	r3,2(r2)
 1821b7c:	30ffffcc 	andi	r3,r6,65535
 1821b80:	1806d23a 	srli	r3,r3,8
 1821b84:	197fffcc 	andi	r5,r3,65535
 1821b88:	10c000c3 	ldbu	r3,3(r2)
 1821b8c:	1806703a 	and	r3,r3,zero
 1821b90:	1809883a 	mov	r4,r3
 1821b94:	2807883a 	mov	r3,r5
 1821b98:	20c6b03a 	or	r3,r4,r3
 1821b9c:	10c000c5 	stb	r3,3(r2)
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
 1821ba0:	e0bff817 	ldw	r2,-32(fp)
 1821ba4:	10c00183 	ldbu	r3,6(r2)
 1821ba8:	1806703a 	and	r3,r3,zero
 1821bac:	10c00185 	stb	r3,6(r2)
 1821bb0:	10c001c3 	ldbu	r3,7(r2)
 1821bb4:	1806703a 	and	r3,r3,zero
 1821bb8:	10c001c5 	stb	r3,7(r2)
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 1821bbc:	e0bffa17 	ldw	r2,-24(fp)
 1821bc0:	10000326 	beq	r2,zero,1821bd0 <udp_sendto_if_chksum+0x1ec>
 1821bc4:	e0bffa17 	ldw	r2,-24(fp)
 1821bc8:	10800017 	ldw	r2,0(r2)
 1821bcc:	1000041e 	bne	r2,zero,1821be0 <udp_sendto_if_chksum+0x1fc>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 1821bd0:	e0800217 	ldw	r2,8(fp)
 1821bd4:	10800104 	addi	r2,r2,4
 1821bd8:	e0bff515 	stw	r2,-44(fp)
 1821bdc:	00000f06 	br	1821c1c <udp_sendto_if_chksum+0x238>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 1821be0:	e0bffa17 	ldw	r2,-24(fp)
 1821be4:	10c00017 	ldw	r3,0(r2)
 1821be8:	e0800217 	ldw	r2,8(fp)
 1821bec:	10800117 	ldw	r2,4(r2)
 1821bf0:	18800826 	beq	r3,r2,1821c14 <udp_sendto_if_chksum+0x230>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
 1821bf4:	e0fff617 	ldw	r3,-40(fp)
 1821bf8:	e0bffb17 	ldw	r2,-20(fp)
 1821bfc:	18800326 	beq	r3,r2,1821c0c <udp_sendto_if_chksum+0x228>
        /* free the header pbuf */
        pbuf_free(q);
 1821c00:	e13ff617 	ldw	r4,-40(fp)
 1821c04:	181a22c0 	call	181a22c <pbuf_free>
        q = NULL;
 1821c08:	e03ff615 	stw	zero,-40(fp)
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
 1821c0c:	00bffe84 	movi	r2,-6
 1821c10:	00008406 	br	1821e24 <udp_sendto_if_chksum+0x440>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 1821c14:	e0bffa17 	ldw	r2,-24(fp)
 1821c18:	e0bff515 	stw	r2,-44(fp)
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 1821c1c:	e0bff617 	ldw	r2,-40(fp)
 1821c20:	1080020b 	ldhu	r2,8(r2)
 1821c24:	10bfffcc 	andi	r2,r2,65535
 1821c28:	1004d23a 	srli	r2,r2,8
 1821c2c:	1007883a 	mov	r3,r2
 1821c30:	e0bff617 	ldw	r2,-40(fp)
 1821c34:	1080020b 	ldhu	r2,8(r2)
 1821c38:	10bfffcc 	andi	r2,r2,65535
 1821c3c:	1004923a 	slli	r2,r2,8
 1821c40:	1884b03a 	or	r2,r3,r2
 1821c44:	100d883a 	mov	r6,r2
 1821c48:	e0bff817 	ldw	r2,-32(fp)
 1821c4c:	30ffffcc 	andi	r3,r6,65535
 1821c50:	19403fcc 	andi	r5,r3,255
 1821c54:	10c00103 	ldbu	r3,4(r2)
 1821c58:	1806703a 	and	r3,r3,zero
 1821c5c:	1809883a 	mov	r4,r3
 1821c60:	2807883a 	mov	r3,r5
 1821c64:	20c6b03a 	or	r3,r4,r3
 1821c68:	10c00105 	stb	r3,4(r2)
 1821c6c:	30ffffcc 	andi	r3,r6,65535
 1821c70:	1806d23a 	srli	r3,r3,8
 1821c74:	197fffcc 	andi	r5,r3,65535
 1821c78:	10c00143 	ldbu	r3,5(r2)
 1821c7c:	1806703a 	and	r3,r3,zero
 1821c80:	1809883a 	mov	r4,r3
 1821c84:	2807883a 	mov	r3,r5
 1821c88:	20c6b03a 	or	r3,r4,r3
 1821c8c:	10c00145 	stb	r3,5(r2)
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 1821c90:	e0bffa17 	ldw	r2,-24(fp)
 1821c94:	10800403 	ldbu	r2,16(r2)
 1821c98:	10803fcc 	andi	r2,r2,255
 1821c9c:	1080004c 	andi	r2,r2,1
 1821ca0:	10003b1e 	bne	r2,zero,1821d90 <udp_sendto_if_chksum+0x3ac>
      u16_t udpchksum;
#if LWIP_CHECKSUM_ON_COPY
      if (have_chksum) {
 1821ca4:	e0bffe03 	ldbu	r2,-8(fp)
 1821ca8:	10001926 	beq	r2,zero,1821d10 <udp_sendto_if_chksum+0x32c>
        u32_t acc;
        udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
          q->tot_len, UDP_HLEN);
 1821cac:	e0bff617 	ldw	r2,-40(fp)
 1821cb0:	1080020b 	ldhu	r2,8(r2)
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
      u16_t udpchksum;
#if LWIP_CHECKSUM_ON_COPY
      if (have_chksum) {
        u32_t acc;
        udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
 1821cb4:	10bfffcc 	andi	r2,r2,65535
 1821cb8:	00c00204 	movi	r3,8
 1821cbc:	d8c00115 	stw	r3,4(sp)
 1821cc0:	d8800015 	stw	r2,0(sp)
 1821cc4:	01c00444 	movi	r7,17
 1821cc8:	e1bffc17 	ldw	r6,-16(fp)
 1821ccc:	e17ff517 	ldw	r5,-44(fp)
 1821cd0:	e13ff617 	ldw	r4,-40(fp)
 1821cd4:	18315940 	call	1831594 <inet_chksum_pseudo_partial>
 1821cd8:	e0bff70d 	sth	r2,-36(fp)
          q->tot_len, UDP_HLEN);
        acc = udpchksum + (u16_t)~(chksum);
 1821cdc:	e0fff70b 	ldhu	r3,-36(fp)
 1821ce0:	e0bfff0b 	ldhu	r2,-4(fp)
 1821ce4:	0084303a 	nor	r2,zero,r2
 1821ce8:	10bfffcc 	andi	r2,r2,65535
 1821cec:	1885883a 	add	r2,r3,r2
 1821cf0:	e0bff915 	stw	r2,-28(fp)
        udpchksum = FOLD_U32T(acc);
 1821cf4:	e0bff917 	ldw	r2,-28(fp)
 1821cf8:	1004d43a 	srli	r2,r2,16
 1821cfc:	1007883a 	mov	r3,r2
 1821d00:	e0bff917 	ldw	r2,-28(fp)
 1821d04:	1885883a 	add	r2,r3,r2
 1821d08:	e0bff70d 	sth	r2,-36(fp)
 1821d0c:	00000a06 	br	1821d38 <udp_sendto_if_chksum+0x354>
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
 1821d10:	e0bff617 	ldw	r2,-40(fp)
 1821d14:	1080020b 	ldhu	r2,8(r2)
 1821d18:	10bfffcc 	andi	r2,r2,65535
 1821d1c:	d8800015 	stw	r2,0(sp)
 1821d20:	01c00444 	movi	r7,17
 1821d24:	e1bffc17 	ldw	r6,-16(fp)
 1821d28:	e17ff517 	ldw	r5,-44(fp)
 1821d2c:	e13ff617 	ldw	r4,-40(fp)
 1821d30:	18313940 	call	1831394 <inet_chksum_pseudo>
 1821d34:	e0bff70d 	sth	r2,-36(fp)
      }

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
 1821d38:	e0bff70b 	ldhu	r2,-36(fp)
 1821d3c:	1000021e 	bne	r2,zero,1821d48 <udp_sendto_if_chksum+0x364>
        udpchksum = 0xffff;
 1821d40:	00bfffc4 	movi	r2,-1
 1821d44:	e0bff70d 	sth	r2,-36(fp)
      }
      udphdr->chksum = udpchksum;
 1821d48:	e0bff817 	ldw	r2,-32(fp)
 1821d4c:	e0fff70b 	ldhu	r3,-36(fp)
 1821d50:	19403fcc 	andi	r5,r3,255
 1821d54:	10c00183 	ldbu	r3,6(r2)
 1821d58:	1806703a 	and	r3,r3,zero
 1821d5c:	1809883a 	mov	r4,r3
 1821d60:	2807883a 	mov	r3,r5
 1821d64:	20c6b03a 	or	r3,r4,r3
 1821d68:	10c00185 	stb	r3,6(r2)
 1821d6c:	e0fff70b 	ldhu	r3,-36(fp)
 1821d70:	1806d23a 	srli	r3,r3,8
 1821d74:	197fffcc 	andi	r5,r3,65535
 1821d78:	10c001c3 	ldbu	r3,7(r2)
 1821d7c:	1806703a 	and	r3,r3,zero
 1821d80:	1809883a 	mov	r4,r3
 1821d84:	2807883a 	mov	r3,r5
 1821d88:	20c6b03a 	or	r3,r4,r3
 1821d8c:	10c001c5 	stb	r3,7(r2)
    }
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
 1821d90:	e0bffa17 	ldw	r2,-24(fp)
 1821d94:	10c002c4 	addi	r3,r2,11
 1821d98:	e0800217 	ldw	r2,8(fp)
 1821d9c:	10c01015 	stw	r3,64(r2)
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 1821da0:	e0bffa17 	ldw	r2,-24(fp)
 1821da4:	10800283 	ldbu	r2,10(r2)
 1821da8:	11003fcc 	andi	r4,r2,255
 1821dac:	e0bffa17 	ldw	r2,-24(fp)
 1821db0:	10800243 	ldbu	r2,9(r2)
 1821db4:	10803fcc 	andi	r2,r2,255
 1821db8:	e0c00217 	ldw	r3,8(fp)
 1821dbc:	d8c00215 	stw	r3,8(sp)
 1821dc0:	00c00444 	movi	r3,17
 1821dc4:	d8c00115 	stw	r3,4(sp)
 1821dc8:	d8800015 	stw	r2,0(sp)
 1821dcc:	200f883a 	mov	r7,r4
 1821dd0:	e1bffc17 	ldw	r6,-16(fp)
 1821dd4:	e17ff517 	ldw	r5,-44(fp)
 1821dd8:	e13ff617 	ldw	r4,-40(fp)
 1821ddc:	1831fa00 	call	1831fa0 <ip_output_if>
 1821de0:	e0bff785 	stb	r2,-34(fp)
    NETIF_SET_HWADDRHINT(netif, NULL);
 1821de4:	e0800217 	ldw	r2,8(fp)
 1821de8:	10001015 	stw	zero,64(r2)
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 1821dec:	e0fff617 	ldw	r3,-40(fp)
 1821df0:	e0bffb17 	ldw	r2,-20(fp)
 1821df4:	18800326 	beq	r3,r2,1821e04 <udp_sendto_if_chksum+0x420>
    /* free the header pbuf */
    pbuf_free(q);
 1821df8:	e13ff617 	ldw	r4,-40(fp)
 1821dfc:	181a22c0 	call	181a22c <pbuf_free>
    q = NULL;
 1821e00:	e03ff615 	stw	zero,-40(fp)
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 1821e04:	00806134 	movhi	r2,388
 1821e08:	109e7504 	addi	r2,r2,31188
 1821e0c:	10803c17 	ldw	r2,240(r2)
 1821e10:	10c00044 	addi	r3,r2,1
 1821e14:	00806134 	movhi	r2,388
 1821e18:	109e7504 	addi	r2,r2,31188
 1821e1c:	10c03c15 	stw	r3,240(r2)
  return err;
 1821e20:	e0bff783 	ldbu	r2,-34(fp)
}
 1821e24:	e037883a 	mov	sp,fp
 1821e28:	dfc00117 	ldw	ra,4(sp)
 1821e2c:	df000017 	ldw	fp,0(sp)
 1821e30:	dec00204 	addi	sp,sp,8
 1821e34:	f800283a 	ret

01821e38 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 1821e38:	defff904 	addi	sp,sp,-28
 1821e3c:	dfc00615 	stw	ra,24(sp)
 1821e40:	df000515 	stw	fp,20(sp)
 1821e44:	df000504 	addi	fp,sp,20
 1821e48:	e13ffd15 	stw	r4,-12(fp)
 1821e4c:	e17ffe15 	stw	r5,-8(fp)
 1821e50:	3005883a 	mov	r2,r6
 1821e54:	e0bfff0d 	sth	r2,-4(fp)

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 1821e58:	e03ffc05 	stb	zero,-16(fp)
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 1821e5c:	d0a7fb17 	ldw	r2,-24596(gp)
 1821e60:	e0bffb15 	stw	r2,-20(fp)
 1821e64:	00002906 	br	1821f0c <udp_bind+0xd4>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 1821e68:	e0fffd17 	ldw	r3,-12(fp)
 1821e6c:	e0bffb17 	ldw	r2,-20(fp)
 1821e70:	1880031e 	bne	r3,r2,1821e80 <udp_bind+0x48>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
 1821e74:	00800044 	movi	r2,1
 1821e78:	e0bffc05 	stb	r2,-16(fp)
 1821e7c:	00002006 	br	1821f00 <udp_bind+0xc8>

    /* By default, we don't allow to bind to a port that any other udp
       PCB is alread bound to, unless *all* PCBs with that port have tha
       REUSEADDR flag set. */
#if SO_REUSE
    else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
 1821e80:	e0bffd17 	ldw	r2,-12(fp)
 1821e84:	10800203 	ldbu	r2,8(r2)
 1821e88:	10803fcc 	andi	r2,r2,255
 1821e8c:	1080010c 	andi	r2,r2,4
 1821e90:	10001b1e 	bne	r2,zero,1821f00 <udp_bind+0xc8>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
 1821e94:	e0bffb17 	ldw	r2,-20(fp)
 1821e98:	10800203 	ldbu	r2,8(r2)
 1821e9c:	10803fcc 	andi	r2,r2,255
 1821ea0:	1080010c 	andi	r2,r2,4

    /* By default, we don't allow to bind to a port that any other udp
       PCB is alread bound to, unless *all* PCBs with that port have tha
       REUSEADDR flag set. */
#if SO_REUSE
    else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
 1821ea4:	1000161e 	bne	r2,zero,1821f00 <udp_bind+0xc8>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 1821ea8:	e0bffb17 	ldw	r2,-20(fp)
 1821eac:	1080048b 	ldhu	r2,18(r2)
 1821eb0:	10ffffcc 	andi	r3,r2,65535
 1821eb4:	e0bfff0b 	ldhu	r2,-4(fp)
 1821eb8:	1880111e 	bne	r3,r2,1821f00 <udp_bind+0xc8>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 1821ebc:	e0bffb17 	ldw	r2,-20(fp)
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 1821ec0:	10000d26 	beq	r2,zero,1821ef8 <udp_bind+0xc0>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 1821ec4:	e0bffb17 	ldw	r2,-20(fp)
 1821ec8:	10800017 	ldw	r2,0(r2)
 1821ecc:	10000a26 	beq	r2,zero,1821ef8 <udp_bind+0xc0>
 1821ed0:	e0bffe17 	ldw	r2,-8(fp)
 1821ed4:	10000826 	beq	r2,zero,1821ef8 <udp_bind+0xc0>
           ip_addr_isany(ipaddr) ||
 1821ed8:	e0bffe17 	ldw	r2,-8(fp)
 1821edc:	10800017 	ldw	r2,0(r2)
 1821ee0:	10000526 	beq	r2,zero,1821ef8 <udp_bind+0xc0>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
 1821ee4:	e0bffb17 	ldw	r2,-20(fp)
 1821ee8:	10c00017 	ldw	r3,0(r2)
 1821eec:	e0bffe17 	ldw	r2,-8(fp)
 1821ef0:	10800017 	ldw	r2,0(r2)
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
           ip_addr_isany(ipaddr) ||
 1821ef4:	1880021e 	bne	r3,r2,1821f00 <udp_bind+0xc8>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
 1821ef8:	00bffe04 	movi	r2,-8
 1821efc:	00002006 	br	1821f80 <udp_bind+0x148>
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 1821f00:	e0bffb17 	ldw	r2,-20(fp)
 1821f04:	10800317 	ldw	r2,12(r2)
 1821f08:	e0bffb15 	stw	r2,-20(fp)
 1821f0c:	e0bffb17 	ldw	r2,-20(fp)
 1821f10:	103fd51e 	bne	r2,zero,1821e68 <__ram_exceptions_end+0xff811b78>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 1821f14:	e0bffe17 	ldw	r2,-8(fp)
 1821f18:	10000326 	beq	r2,zero,1821f28 <udp_bind+0xf0>
 1821f1c:	e0bffe17 	ldw	r2,-8(fp)
 1821f20:	10800017 	ldw	r2,0(r2)
 1821f24:	00000106 	br	1821f2c <udp_bind+0xf4>
 1821f28:	0005883a 	mov	r2,zero
 1821f2c:	e0fffd17 	ldw	r3,-12(fp)
 1821f30:	18800015 	stw	r2,0(r3)

  /* no port specified? */
  if (port == 0) {
 1821f34:	e0bfff0b 	ldhu	r2,-4(fp)
 1821f38:	1000061e 	bne	r2,zero,1821f54 <udp_bind+0x11c>
    port = udp_new_port();
 1821f3c:	18211900 	call	1821190 <udp_new_port>
 1821f40:	e0bfff0d 	sth	r2,-4(fp)
    if (port == 0) {
 1821f44:	e0bfff0b 	ldhu	r2,-4(fp)
 1821f48:	1000021e 	bne	r2,zero,1821f54 <udp_bind+0x11c>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 1821f4c:	00bffe04 	movi	r2,-8
 1821f50:	00000b06 	br	1821f80 <udp_bind+0x148>
    }
  }
  pcb->local_port = port;
 1821f54:	e0bffd17 	ldw	r2,-12(fp)
 1821f58:	e0ffff0b 	ldhu	r3,-4(fp)
 1821f5c:	10c0048d 	sth	r3,18(r2)
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 1821f60:	e0bffc03 	ldbu	r2,-16(fp)
 1821f64:	1000051e 	bne	r2,zero,1821f7c <udp_bind+0x144>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 1821f68:	d0e7fb17 	ldw	r3,-24596(gp)
 1821f6c:	e0bffd17 	ldw	r2,-12(fp)
 1821f70:	10c00315 	stw	r3,12(r2)
    udp_pcbs = pcb;
 1821f74:	e0bffd17 	ldw	r2,-12(fp)
 1821f78:	d0a7fb15 	stw	r2,-24596(gp)
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 1821f7c:	0005883a 	mov	r2,zero
}
 1821f80:	e037883a 	mov	sp,fp
 1821f84:	dfc00117 	ldw	ra,4(sp)
 1821f88:	df000017 	ldw	fp,0(sp)
 1821f8c:	dec00204 	addi	sp,sp,8
 1821f90:	f800283a 	ret

01821f94 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 1821f94:	defff904 	addi	sp,sp,-28
 1821f98:	dfc00615 	stw	ra,24(sp)
 1821f9c:	df000515 	stw	fp,20(sp)
 1821fa0:	df000504 	addi	fp,sp,20
 1821fa4:	e13ffd15 	stw	r4,-12(fp)
 1821fa8:	e17ffe15 	stw	r5,-8(fp)
 1821fac:	3005883a 	mov	r2,r6
 1821fb0:	e0bfff0d 	sth	r2,-4(fp)
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
 1821fb4:	e0bffd17 	ldw	r2,-12(fp)
 1821fb8:	1080048b 	ldhu	r2,18(r2)
 1821fbc:	10bfffcc 	andi	r2,r2,65535
 1821fc0:	10000d1e 	bne	r2,zero,1821ff8 <udp_connect+0x64>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 1821fc4:	e0fffd17 	ldw	r3,-12(fp)
 1821fc8:	e0bffd17 	ldw	r2,-12(fp)
 1821fcc:	1080048b 	ldhu	r2,18(r2)
 1821fd0:	10bfffcc 	andi	r2,r2,65535
 1821fd4:	100d883a 	mov	r6,r2
 1821fd8:	180b883a 	mov	r5,r3
 1821fdc:	e13ffd17 	ldw	r4,-12(fp)
 1821fe0:	1821e380 	call	1821e38 <udp_bind>
 1821fe4:	e0bffc05 	stb	r2,-16(fp)
    if (err != ERR_OK) {
 1821fe8:	e0bffc07 	ldb	r2,-16(fp)
 1821fec:	10000226 	beq	r2,zero,1821ff8 <udp_connect+0x64>
      return err;
 1821ff0:	e0bffc03 	ldbu	r2,-16(fp)
 1821ff4:	00002406 	br	1822088 <udp_connect+0xf4>
    }
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
 1821ff8:	e0bffe17 	ldw	r2,-8(fp)
 1821ffc:	10000326 	beq	r2,zero,182200c <udp_connect+0x78>
 1822000:	e0bffe17 	ldw	r2,-8(fp)
 1822004:	10800017 	ldw	r2,0(r2)
 1822008:	00000106 	br	1822010 <udp_connect+0x7c>
 182200c:	0005883a 	mov	r2,zero
 1822010:	e0fffd17 	ldw	r3,-12(fp)
 1822014:	18800115 	stw	r2,4(r3)
  pcb->remote_port = port;
 1822018:	e0bffd17 	ldw	r2,-12(fp)
 182201c:	e0ffff0b 	ldhu	r3,-4(fp)
 1822020:	10c0050d 	sth	r3,20(r2)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 1822024:	e0bffd17 	ldw	r2,-12(fp)
 1822028:	10800403 	ldbu	r2,16(r2)
 182202c:	10800114 	ori	r2,r2,4
 1822030:	1007883a 	mov	r3,r2
 1822034:	e0bffd17 	ldw	r2,-12(fp)
 1822038:	10c00405 	stb	r3,16(r2)
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 182203c:	d0a7fb17 	ldw	r2,-24596(gp)
 1822040:	e0bffb15 	stw	r2,-20(fp)
 1822044:	00000806 	br	1822068 <udp_connect+0xd4>
    if (pcb == ipcb) {
 1822048:	e0fffd17 	ldw	r3,-12(fp)
 182204c:	e0bffb17 	ldw	r2,-20(fp)
 1822050:	1880021e 	bne	r3,r2,182205c <udp_connect+0xc8>
      /* already on the list, just return */
      return ERR_OK;
 1822054:	0005883a 	mov	r2,zero
 1822058:	00000b06 	br	1822088 <udp_connect+0xf4>
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 182205c:	e0bffb17 	ldw	r2,-20(fp)
 1822060:	10800317 	ldw	r2,12(r2)
 1822064:	e0bffb15 	stw	r2,-20(fp)
 1822068:	e0bffb17 	ldw	r2,-20(fp)
 182206c:	103ff61e 	bne	r2,zero,1822048 <__ram_exceptions_end+0xff811d58>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 1822070:	d0e7fb17 	ldw	r3,-24596(gp)
 1822074:	e0bffd17 	ldw	r2,-12(fp)
 1822078:	10c00315 	stw	r3,12(r2)
  udp_pcbs = pcb;
 182207c:	e0bffd17 	ldw	r2,-12(fp)
 1822080:	d0a7fb15 	stw	r2,-24596(gp)
  return ERR_OK;
 1822084:	0005883a 	mov	r2,zero
}
 1822088:	e037883a 	mov	sp,fp
 182208c:	dfc00117 	ldw	ra,4(sp)
 1822090:	df000017 	ldw	fp,0(sp)
 1822094:	dec00204 	addi	sp,sp,8
 1822098:	f800283a 	ret

0182209c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 182209c:	defffe04 	addi	sp,sp,-8
 18220a0:	df000115 	stw	fp,4(sp)
 18220a4:	df000104 	addi	fp,sp,4
 18220a8:	e13fff15 	stw	r4,-4(fp)
  /* reset remote address association */
  ip_addr_set_any(&pcb->remote_ip);
 18220ac:	e0bfff17 	ldw	r2,-4(fp)
 18220b0:	10000115 	stw	zero,4(r2)
  pcb->remote_port = 0;
 18220b4:	e0bfff17 	ldw	r2,-4(fp)
 18220b8:	1000050d 	sth	zero,20(r2)
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 18220bc:	e0bfff17 	ldw	r2,-4(fp)
 18220c0:	10c00403 	ldbu	r3,16(r2)
 18220c4:	00bffec4 	movi	r2,-5
 18220c8:	1884703a 	and	r2,r3,r2
 18220cc:	1007883a 	mov	r3,r2
 18220d0:	e0bfff17 	ldw	r2,-4(fp)
 18220d4:	10c00405 	stb	r3,16(r2)
}
 18220d8:	0001883a 	nop
 18220dc:	e037883a 	mov	sp,fp
 18220e0:	df000017 	ldw	fp,0(sp)
 18220e4:	dec00104 	addi	sp,sp,4
 18220e8:	f800283a 	ret

018220ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 18220ec:	defffc04 	addi	sp,sp,-16
 18220f0:	df000315 	stw	fp,12(sp)
 18220f4:	df000304 	addi	fp,sp,12
 18220f8:	e13ffd15 	stw	r4,-12(fp)
 18220fc:	e17ffe15 	stw	r5,-8(fp)
 1822100:	e1bfff15 	stw	r6,-4(fp)
  /* remember recv() callback and user data */
  pcb->recv = recv;
 1822104:	e0bffd17 	ldw	r2,-12(fp)
 1822108:	e0fffe17 	ldw	r3,-8(fp)
 182210c:	10c00615 	stw	r3,24(r2)
  pcb->recv_arg = recv_arg;
 1822110:	e0bffd17 	ldw	r2,-12(fp)
 1822114:	e0ffff17 	ldw	r3,-4(fp)
 1822118:	10c00715 	stw	r3,28(r2)
}
 182211c:	0001883a 	nop
 1822120:	e037883a 	mov	sp,fp
 1822124:	df000017 	ldw	fp,0(sp)
 1822128:	dec00104 	addi	sp,sp,4
 182212c:	f800283a 	ret

01822130 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 1822130:	defffc04 	addi	sp,sp,-16
 1822134:	dfc00315 	stw	ra,12(sp)
 1822138:	df000215 	stw	fp,8(sp)
 182213c:	df000204 	addi	fp,sp,8
 1822140:	e13fff15 	stw	r4,-4(fp)
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 1822144:	d0e7fb17 	ldw	r3,-24596(gp)
 1822148:	e0bfff17 	ldw	r2,-4(fp)
 182214c:	1880041e 	bne	r3,r2,1822160 <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 1822150:	d0a7fb17 	ldw	r2,-24596(gp)
 1822154:	10800317 	ldw	r2,12(r2)
 1822158:	d0a7fb15 	stw	r2,-24596(gp)
 182215c:	00001306 	br	18221ac <udp_remove+0x7c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 1822160:	d0a7fb17 	ldw	r2,-24596(gp)
 1822164:	e0bffe15 	stw	r2,-8(fp)
 1822168:	00000e06 	br	18221a4 <udp_remove+0x74>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 182216c:	e0bffe17 	ldw	r2,-8(fp)
 1822170:	10800317 	ldw	r2,12(r2)
 1822174:	10000826 	beq	r2,zero,1822198 <udp_remove+0x68>
 1822178:	e0bffe17 	ldw	r2,-8(fp)
 182217c:	10c00317 	ldw	r3,12(r2)
 1822180:	e0bfff17 	ldw	r2,-4(fp)
 1822184:	1880041e 	bne	r3,r2,1822198 <udp_remove+0x68>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 1822188:	e0bfff17 	ldw	r2,-4(fp)
 182218c:	10c00317 	ldw	r3,12(r2)
 1822190:	e0bffe17 	ldw	r2,-8(fp)
 1822194:	10c00315 	stw	r3,12(r2)
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 1822198:	e0bffe17 	ldw	r2,-8(fp)
 182219c:	10800317 	ldw	r2,12(r2)
 18221a0:	e0bffe15 	stw	r2,-8(fp)
 18221a4:	e0bffe17 	ldw	r2,-8(fp)
 18221a8:	103ff01e 	bne	r2,zero,182216c <__ram_exceptions_end+0xff811e7c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 18221ac:	e13fff17 	ldw	r4,-4(fp)
 18221b0:	183c5140 	call	183c514 <free>
}
 18221b4:	0001883a 	nop
 18221b8:	e037883a 	mov	sp,fp
 18221bc:	dfc00117 	ldw	ra,4(sp)
 18221c0:	df000017 	ldw	fp,0(sp)
 18221c4:	dec00204 	addi	sp,sp,8
 18221c8:	f800283a 	ret

018221cc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 18221cc:	defffd04 	addi	sp,sp,-12
 18221d0:	dfc00215 	stw	ra,8(sp)
 18221d4:	df000115 	stw	fp,4(sp)
 18221d8:	df000104 	addi	fp,sp,4
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 18221dc:	00806134 	movhi	r2,388
 18221e0:	108bcc84 	addi	r2,r2,12082
 18221e4:	1080008b 	ldhu	r2,2(r2)
 18221e8:	10bfffcc 	andi	r2,r2,65535
 18221ec:	1009883a 	mov	r4,r2
 18221f0:	183c5000 	call	183c500 <malloc>
 18221f4:	e0bfff15 	stw	r2,-4(fp)
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 18221f8:	e0bfff17 	ldw	r2,-4(fp)
 18221fc:	10000726 	beq	r2,zero,182221c <udp_new+0x50>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 1822200:	01800804 	movi	r6,32
 1822204:	000b883a 	mov	r5,zero
 1822208:	e13fff17 	ldw	r4,-4(fp)
 182220c:	18060e00 	call	18060e0 <memset>
    pcb->ttl = UDP_TTL;
 1822210:	e0bfff17 	ldw	r2,-4(fp)
 1822214:	00c01004 	movi	r3,64
 1822218:	10c00285 	stb	r3,10(r2)
  }
  return pcb;
 182221c:	e0bfff17 	ldw	r2,-4(fp)
}
 1822220:	e037883a 	mov	sp,fp
 1822224:	dfc00117 	ldw	ra,4(sp)
 1822228:	df000017 	ldw	fp,0(sp)
 182222c:	dec00204 	addi	sp,sp,8
 1822230:	f800283a 	ret

01822234 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 1822234:	defffc04 	addi	sp,sp,-16
 1822238:	dfc00315 	stw	ra,12(sp)
 182223c:	df000215 	stw	fp,8(sp)
 1822240:	df000204 	addi	fp,sp,8
 1822244:	e13fff15 	stw	r4,-4(fp)
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  while (q) {
 1822248:	00000b06 	br	1822278 <free_etharp_q+0x44>
    r = q;
 182224c:	e0bfff17 	ldw	r2,-4(fp)
 1822250:	e0bffe15 	stw	r2,-8(fp)
    q = q->next;
 1822254:	e0bfff17 	ldw	r2,-4(fp)
 1822258:	10800017 	ldw	r2,0(r2)
 182225c:	e0bfff15 	stw	r2,-4(fp)
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
 1822260:	e0bffe17 	ldw	r2,-8(fp)
 1822264:	10800117 	ldw	r2,4(r2)
 1822268:	1009883a 	mov	r4,r2
 182226c:	181a22c0 	call	181a22c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 1822270:	e13ffe17 	ldw	r4,-8(fp)
 1822274:	183c5140 	call	183c514 <free>
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  while (q) {
 1822278:	e0bfff17 	ldw	r2,-4(fp)
 182227c:	103ff31e 	bne	r2,zero,182224c <__ram_exceptions_end+0xff811f5c>
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
    memp_free(MEMP_ARP_QUEUE, r);
  }
}
 1822280:	0001883a 	nop
 1822284:	e037883a 	mov	sp,fp
 1822288:	dfc00117 	ldw	ra,4(sp)
 182228c:	df000017 	ldw	fp,0(sp)
 1822290:	dec00204 	addi	sp,sp,8
 1822294:	f800283a 	ret

01822298 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 1822298:	defffd04 	addi	sp,sp,-12
 182229c:	dfc00215 	stw	ra,8(sp)
 18222a0:	df000115 	stw	fp,4(sp)
 18222a4:	df000104 	addi	fp,sp,4
 18222a8:	e13fff15 	stw	r4,-4(fp)
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 18222ac:	00806134 	movhi	r2,388
 18222b0:	109cd004 	addi	r2,r2,29504
 18222b4:	e0ffff17 	ldw	r3,-4(fp)
 18222b8:	18c00524 	muli	r3,r3,20
 18222bc:	10c5883a 	add	r2,r2,r3
 18222c0:	10800017 	ldw	r2,0(r2)
 18222c4:	10000e26 	beq	r2,zero,1822300 <etharp_free_entry+0x68>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 18222c8:	00806134 	movhi	r2,388
 18222cc:	109cd004 	addi	r2,r2,29504
 18222d0:	e0ffff17 	ldw	r3,-4(fp)
 18222d4:	18c00524 	muli	r3,r3,20
 18222d8:	10c5883a 	add	r2,r2,r3
 18222dc:	10800017 	ldw	r2,0(r2)
 18222e0:	1009883a 	mov	r4,r2
 18222e4:	18222340 	call	1822234 <free_etharp_q>
    arp_table[i].q = NULL;
 18222e8:	00806134 	movhi	r2,388
 18222ec:	109cd004 	addi	r2,r2,29504
 18222f0:	e0ffff17 	ldw	r3,-4(fp)
 18222f4:	18c00524 	muli	r3,r3,20
 18222f8:	10c5883a 	add	r2,r2,r3
 18222fc:	10000015 	stw	zero,0(r2)
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 1822300:	00806134 	movhi	r2,388
 1822304:	109cd004 	addi	r2,r2,29504
 1822308:	e0ffff17 	ldw	r3,-4(fp)
 182230c:	18c00524 	muli	r3,r3,20
 1822310:	10c5883a 	add	r2,r2,r3
 1822314:	10800484 	addi	r2,r2,18
 1822318:	10000005 	stb	zero,0(r2)
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 182231c:	0001883a 	nop
 1822320:	e037883a 	mov	sp,fp
 1822324:	dfc00117 	ldw	ra,4(sp)
 1822328:	df000017 	ldw	fp,0(sp)
 182232c:	dec00204 	addi	sp,sp,8
 1822330:	f800283a 	ret

01822334 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 1822334:	defffd04 	addi	sp,sp,-12
 1822338:	dfc00215 	stw	ra,8(sp)
 182233c:	df000115 	stw	fp,4(sp)
 1822340:	df000104 	addi	fp,sp,4
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1822344:	e03fff05 	stb	zero,-4(fp)
 1822348:	00005006 	br	182248c <etharp_tmr+0x158>
    u8_t state = arp_table[i].state;
 182234c:	e0ffff03 	ldbu	r3,-4(fp)
 1822350:	00806134 	movhi	r2,388
 1822354:	109cd004 	addi	r2,r2,29504
 1822358:	18c00524 	muli	r3,r3,20
 182235c:	10c5883a 	add	r2,r2,r3
 1822360:	10800484 	addi	r2,r2,18
 1822364:	10800003 	ldbu	r2,0(r2)
 1822368:	e0bfff45 	stb	r2,-3(fp)
    if (state != ETHARP_STATE_EMPTY
 182236c:	e0bfff43 	ldbu	r2,-3(fp)
 1822370:	10004326 	beq	r2,zero,1822480 <etharp_tmr+0x14c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 1822374:	e0ffff03 	ldbu	r3,-4(fp)
 1822378:	00806134 	movhi	r2,388
 182237c:	109cd004 	addi	r2,r2,29504
 1822380:	19000524 	muli	r4,r3,20
 1822384:	1105883a 	add	r2,r2,r4
 1822388:	108004c4 	addi	r2,r2,19
 182238c:	10800003 	ldbu	r2,0(r2)
 1822390:	10800044 	addi	r2,r2,1
 1822394:	1009883a 	mov	r4,r2
 1822398:	00806134 	movhi	r2,388
 182239c:	109cd004 	addi	r2,r2,29504
 18223a0:	18c00524 	muli	r3,r3,20
 18223a4:	10c5883a 	add	r2,r2,r3
 18223a8:	108004c4 	addi	r2,r2,19
 18223ac:	11000005 	stb	r4,0(r2)
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 18223b0:	e0ffff03 	ldbu	r3,-4(fp)
 18223b4:	00806134 	movhi	r2,388
 18223b8:	109cd004 	addi	r2,r2,29504
 18223bc:	18c00524 	muli	r3,r3,20
 18223c0:	10c5883a 	add	r2,r2,r3
 18223c4:	108004c4 	addi	r2,r2,19
 18223c8:	10800003 	ldbu	r2,0(r2)
 18223cc:	10803fcc 	andi	r2,r2,255
 18223d0:	10803c28 	cmpgeui	r2,r2,240
 18223d4:	1000141e 	bne	r2,zero,1822428 <etharp_tmr+0xf4>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 18223d8:	e0ffff03 	ldbu	r3,-4(fp)
 18223dc:	00806134 	movhi	r2,388
 18223e0:	109cd004 	addi	r2,r2,29504
 18223e4:	18c00524 	muli	r3,r3,20
 18223e8:	10c5883a 	add	r2,r2,r3
 18223ec:	10800484 	addi	r2,r2,18
 18223f0:	10800003 	ldbu	r2,0(r2)
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 18223f4:	10803fcc 	andi	r2,r2,255
 18223f8:	10800058 	cmpnei	r2,r2,1
 18223fc:	10000e1e 	bne	r2,zero,1822438 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 1822400:	e0ffff03 	ldbu	r3,-4(fp)
 1822404:	00806134 	movhi	r2,388
 1822408:	109cd004 	addi	r2,r2,29504
 182240c:	18c00524 	muli	r3,r3,20
 1822410:	10c5883a 	add	r2,r2,r3
 1822414:	108004c4 	addi	r2,r2,19
 1822418:	10800003 	ldbu	r2,0(r2)
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 182241c:	10803fcc 	andi	r2,r2,255
 1822420:	108000b0 	cmpltui	r2,r2,2
 1822424:	1000041e 	bne	r2,zero,1822438 <etharp_tmr+0x104>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 1822428:	e0bfff03 	ldbu	r2,-4(fp)
 182242c:	1009883a 	mov	r4,r2
 1822430:	18222980 	call	1822298 <etharp_free_entry>
 1822434:	00001206 	br	1822480 <etharp_tmr+0x14c>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 1822438:	e0ffff03 	ldbu	r3,-4(fp)
 182243c:	00806134 	movhi	r2,388
 1822440:	109cd004 	addi	r2,r2,29504
 1822444:	18c00524 	muli	r3,r3,20
 1822448:	10c5883a 	add	r2,r2,r3
 182244c:	10800484 	addi	r2,r2,18
 1822450:	10800003 	ldbu	r2,0(r2)
 1822454:	10803fcc 	andi	r2,r2,255
 1822458:	108000d8 	cmpnei	r2,r2,3
 182245c:	1000081e 	bne	r2,zero,1822480 <etharp_tmr+0x14c>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 1822460:	e0ffff03 	ldbu	r3,-4(fp)
 1822464:	00806134 	movhi	r2,388
 1822468:	109cd004 	addi	r2,r2,29504
 182246c:	18c00524 	muli	r3,r3,20
 1822470:	10c5883a 	add	r2,r2,r3
 1822474:	10800484 	addi	r2,r2,18
 1822478:	00c00084 	movi	r3,2
 182247c:	10c00005 	stb	r3,0(r2)
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1822480:	e0bfff03 	ldbu	r2,-4(fp)
 1822484:	10800044 	addi	r2,r2,1
 1822488:	e0bfff05 	stb	r2,-4(fp)
 182248c:	e0bfff03 	ldbu	r2,-4(fp)
 1822490:	10800670 	cmpltui	r2,r2,25
 1822494:	103fad1e 	bne	r2,zero,182234c <__ram_exceptions_end+0xff81205c>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
 1822498:	0001883a 	nop
 182249c:	e037883a 	mov	sp,fp
 18224a0:	dfc00117 	ldw	ra,4(sp)
 18224a4:	df000017 	ldw	fp,0(sp)
 18224a8:	dec00204 	addi	sp,sp,8
 18224ac:	f800283a 	ret

018224b0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 18224b0:	defff904 	addi	sp,sp,-28
 18224b4:	dfc00615 	stw	ra,24(sp)
 18224b8:	df000515 	stw	fp,20(sp)
 18224bc:	df000504 	addi	fp,sp,20
 18224c0:	e13ffe15 	stw	r4,-8(fp)
 18224c4:	2805883a 	mov	r2,r5
 18224c8:	e0bfff05 	stb	r2,-4(fp)
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 18224cc:	00800644 	movi	r2,25
 18224d0:	e0bffb05 	stb	r2,-20(fp)
 18224d4:	00800644 	movi	r2,25
 18224d8:	e0bffb45 	stb	r2,-19(fp)
  s8_t empty = ARP_TABLE_SIZE;
 18224dc:	00800644 	movi	r2,25
 18224e0:	e0bffb85 	stb	r2,-18(fp)
  u8_t i = 0, age_pending = 0, age_stable = 0;
 18224e4:	e03ffbc5 	stb	zero,-17(fp)
 18224e8:	e03ffc05 	stb	zero,-16(fp)
 18224ec:	e03ffc45 	stb	zero,-15(fp)
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 18224f0:	00800644 	movi	r2,25
 18224f4:	e0bffc85 	stb	r2,-14(fp)
  /* its age */
  u8_t age_queue = 0;
 18224f8:	e03ffcc5 	stb	zero,-13(fp)
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 18224fc:	e03ffbc5 	stb	zero,-17(fp)
 1822500:	00006e06 	br	18226bc <etharp_find_entry+0x20c>
    u8_t state = arp_table[i].state;
 1822504:	e0fffbc3 	ldbu	r3,-17(fp)
 1822508:	00806134 	movhi	r2,388
 182250c:	109cd004 	addi	r2,r2,29504
 1822510:	18c00524 	muli	r3,r3,20
 1822514:	10c5883a 	add	r2,r2,r3
 1822518:	10800484 	addi	r2,r2,18
 182251c:	10800003 	ldbu	r2,0(r2)
 1822520:	e0bffd05 	stb	r2,-12(fp)
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 1822524:	e0bffb87 	ldb	r2,-18(fp)
 1822528:	10800658 	cmpnei	r2,r2,25
 182252c:	1000051e 	bne	r2,zero,1822544 <etharp_find_entry+0x94>
 1822530:	e0bffd03 	ldbu	r2,-12(fp)
 1822534:	1000031e 	bne	r2,zero,1822544 <etharp_find_entry+0x94>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 1822538:	e0bffbc3 	ldbu	r2,-17(fp)
 182253c:	e0bffb85 	stb	r2,-18(fp)
 1822540:	00005b06 	br	18226b0 <etharp_find_entry+0x200>
    } else if (state != ETHARP_STATE_EMPTY) {
 1822544:	e0bffd03 	ldbu	r2,-12(fp)
 1822548:	10005926 	beq	r2,zero,18226b0 <etharp_find_entry+0x200>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 182254c:	e0bffe17 	ldw	r2,-8(fp)
 1822550:	10000c26 	beq	r2,zero,1822584 <etharp_find_entry+0xd4>
 1822554:	e0bffe17 	ldw	r2,-8(fp)
 1822558:	10c00017 	ldw	r3,0(r2)
 182255c:	e13ffbc3 	ldbu	r4,-17(fp)
 1822560:	00806134 	movhi	r2,388
 1822564:	109cd004 	addi	r2,r2,29504
 1822568:	21000524 	muli	r4,r4,20
 182256c:	1105883a 	add	r2,r2,r4
 1822570:	10800104 	addi	r2,r2,4
 1822574:	10800017 	ldw	r2,0(r2)
 1822578:	1880021e 	bne	r3,r2,1822584 <etharp_find_entry+0xd4>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 182257c:	e0bffbc3 	ldbu	r2,-17(fp)
 1822580:	00008c06 	br	18227b4 <etharp_find_entry+0x304>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 1822584:	e0bffd03 	ldbu	r2,-12(fp)
 1822588:	10800058 	cmpnei	r2,r2,1
 182258c:	1000311e 	bne	r2,zero,1822654 <etharp_find_entry+0x1a4>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 1822590:	e0fffbc3 	ldbu	r3,-17(fp)
 1822594:	00806134 	movhi	r2,388
 1822598:	109cd004 	addi	r2,r2,29504
 182259c:	18c00524 	muli	r3,r3,20
 18225a0:	10c5883a 	add	r2,r2,r3
 18225a4:	10800017 	ldw	r2,0(r2)
 18225a8:	10001526 	beq	r2,zero,1822600 <etharp_find_entry+0x150>
          if (arp_table[i].ctime >= age_queue) {
 18225ac:	e0fffbc3 	ldbu	r3,-17(fp)
 18225b0:	00806134 	movhi	r2,388
 18225b4:	109cd004 	addi	r2,r2,29504
 18225b8:	18c00524 	muli	r3,r3,20
 18225bc:	10c5883a 	add	r2,r2,r3
 18225c0:	108004c4 	addi	r2,r2,19
 18225c4:	10800003 	ldbu	r2,0(r2)
 18225c8:	10c03fcc 	andi	r3,r2,255
 18225cc:	e0bffcc3 	ldbu	r2,-13(fp)
 18225d0:	18803736 	bltu	r3,r2,18226b0 <etharp_find_entry+0x200>
            old_queue = i;
 18225d4:	e0bffbc3 	ldbu	r2,-17(fp)
 18225d8:	e0bffc85 	stb	r2,-14(fp)
            age_queue = arp_table[i].ctime;
 18225dc:	e0fffbc3 	ldbu	r3,-17(fp)
 18225e0:	00806134 	movhi	r2,388
 18225e4:	109cd004 	addi	r2,r2,29504
 18225e8:	18c00524 	muli	r3,r3,20
 18225ec:	10c5883a 	add	r2,r2,r3
 18225f0:	108004c4 	addi	r2,r2,19
 18225f4:	10800003 	ldbu	r2,0(r2)
 18225f8:	e0bffcc5 	stb	r2,-13(fp)
 18225fc:	00002c06 	br	18226b0 <etharp_find_entry+0x200>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 1822600:	e0fffbc3 	ldbu	r3,-17(fp)
 1822604:	00806134 	movhi	r2,388
 1822608:	109cd004 	addi	r2,r2,29504
 182260c:	18c00524 	muli	r3,r3,20
 1822610:	10c5883a 	add	r2,r2,r3
 1822614:	108004c4 	addi	r2,r2,19
 1822618:	10800003 	ldbu	r2,0(r2)
 182261c:	10c03fcc 	andi	r3,r2,255
 1822620:	e0bffc03 	ldbu	r2,-16(fp)
 1822624:	18802236 	bltu	r3,r2,18226b0 <etharp_find_entry+0x200>
            old_pending = i;
 1822628:	e0bffbc3 	ldbu	r2,-17(fp)
 182262c:	e0bffb05 	stb	r2,-20(fp)
            age_pending = arp_table[i].ctime;
 1822630:	e0fffbc3 	ldbu	r3,-17(fp)
 1822634:	00806134 	movhi	r2,388
 1822638:	109cd004 	addi	r2,r2,29504
 182263c:	18c00524 	muli	r3,r3,20
 1822640:	10c5883a 	add	r2,r2,r3
 1822644:	108004c4 	addi	r2,r2,19
 1822648:	10800003 	ldbu	r2,0(r2)
 182264c:	e0bffc05 	stb	r2,-16(fp)
 1822650:	00001706 	br	18226b0 <etharp_find_entry+0x200>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 1822654:	e0bffd03 	ldbu	r2,-12(fp)
 1822658:	108000b0 	cmpltui	r2,r2,2
 182265c:	1000141e 	bne	r2,zero,18226b0 <etharp_find_entry+0x200>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 1822660:	e0fffbc3 	ldbu	r3,-17(fp)
 1822664:	00806134 	movhi	r2,388
 1822668:	109cd004 	addi	r2,r2,29504
 182266c:	18c00524 	muli	r3,r3,20
 1822670:	10c5883a 	add	r2,r2,r3
 1822674:	108004c4 	addi	r2,r2,19
 1822678:	10800003 	ldbu	r2,0(r2)
 182267c:	10c03fcc 	andi	r3,r2,255
 1822680:	e0bffc43 	ldbu	r2,-15(fp)
 1822684:	18800a36 	bltu	r3,r2,18226b0 <etharp_find_entry+0x200>
            old_stable = i;
 1822688:	e0bffbc3 	ldbu	r2,-17(fp)
 182268c:	e0bffb45 	stb	r2,-19(fp)
            age_stable = arp_table[i].ctime;
 1822690:	e0fffbc3 	ldbu	r3,-17(fp)
 1822694:	00806134 	movhi	r2,388
 1822698:	109cd004 	addi	r2,r2,29504
 182269c:	18c00524 	muli	r3,r3,20
 18226a0:	10c5883a 	add	r2,r2,r3
 18226a4:	108004c4 	addi	r2,r2,19
 18226a8:	10800003 	ldbu	r2,0(r2)
 18226ac:	e0bffc45 	stb	r2,-15(fp)
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 18226b0:	e0bffbc3 	ldbu	r2,-17(fp)
 18226b4:	10800044 	addi	r2,r2,1
 18226b8:	e0bffbc5 	stb	r2,-17(fp)
 18226bc:	e0bffbc3 	ldbu	r2,-17(fp)
 18226c0:	10800670 	cmpltui	r2,r2,25
 18226c4:	103f8f1e 	bne	r2,zero,1822504 <__ram_exceptions_end+0xff812214>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 18226c8:	e0bfff03 	ldbu	r2,-4(fp)
 18226cc:	1080008c 	andi	r2,r2,2
 18226d0:	1000061e 	bne	r2,zero,18226ec <etharp_find_entry+0x23c>
 18226d4:	e0bffb87 	ldb	r2,-18(fp)
 18226d8:	10800658 	cmpnei	r2,r2,25
 18226dc:	1000051e 	bne	r2,zero,18226f4 <etharp_find_entry+0x244>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 18226e0:	e0bfff03 	ldbu	r2,-4(fp)
 18226e4:	1080004c 	andi	r2,r2,1
 18226e8:	1000021e 	bne	r2,zero,18226f4 <etharp_find_entry+0x244>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 18226ec:	00bfffc4 	movi	r2,-1
 18226f0:	00003006 	br	18227b4 <etharp_find_entry+0x304>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 18226f4:	e0bffb87 	ldb	r2,-18(fp)
 18226f8:	10800648 	cmpgei	r2,r2,25
 18226fc:	1000031e 	bne	r2,zero,182270c <etharp_find_entry+0x25c>
    i = empty;
 1822700:	e0bffb83 	ldbu	r2,-18(fp)
 1822704:	e0bffbc5 	stb	r2,-17(fp)
 1822708:	00001706 	br	1822768 <etharp_find_entry+0x2b8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 182270c:	e0bffb47 	ldb	r2,-19(fp)
 1822710:	10800648 	cmpgei	r2,r2,25
 1822714:	1000031e 	bne	r2,zero,1822724 <etharp_find_entry+0x274>
      /* recycle oldest stable*/
      i = old_stable;
 1822718:	e0bffb43 	ldbu	r2,-19(fp)
 182271c:	e0bffbc5 	stb	r2,-17(fp)
 1822720:	00000e06 	br	182275c <etharp_find_entry+0x2ac>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 1822724:	e0bffb07 	ldb	r2,-20(fp)
 1822728:	10800648 	cmpgei	r2,r2,25
 182272c:	1000031e 	bne	r2,zero,182273c <etharp_find_entry+0x28c>
      /* recycle oldest pending */
      i = old_pending;
 1822730:	e0bffb03 	ldbu	r2,-20(fp)
 1822734:	e0bffbc5 	stb	r2,-17(fp)
 1822738:	00000806 	br	182275c <etharp_find_entry+0x2ac>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 182273c:	e0bffc87 	ldb	r2,-14(fp)
 1822740:	10800648 	cmpgei	r2,r2,25
 1822744:	1000031e 	bne	r2,zero,1822754 <etharp_find_entry+0x2a4>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 1822748:	e0bffc83 	ldbu	r2,-14(fp)
 182274c:	e0bffbc5 	stb	r2,-17(fp)
 1822750:	00000206 	br	182275c <etharp_find_entry+0x2ac>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 1822754:	00bfffc4 	movi	r2,-1
 1822758:	00001606 	br	18227b4 <etharp_find_entry+0x304>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 182275c:	e0bffbc3 	ldbu	r2,-17(fp)
 1822760:	1009883a 	mov	r4,r2
 1822764:	18222980 	call	1822298 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 1822768:	e0bffe17 	ldw	r2,-8(fp)
 182276c:	10000926 	beq	r2,zero,1822794 <etharp_find_entry+0x2e4>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 1822770:	e13ffbc3 	ldbu	r4,-17(fp)
 1822774:	e0bffe17 	ldw	r2,-8(fp)
 1822778:	10c00017 	ldw	r3,0(r2)
 182277c:	00806134 	movhi	r2,388
 1822780:	109cd004 	addi	r2,r2,29504
 1822784:	21000524 	muli	r4,r4,20
 1822788:	1105883a 	add	r2,r2,r4
 182278c:	10800104 	addi	r2,r2,4
 1822790:	10c00015 	stw	r3,0(r2)
  }
  arp_table[i].ctime = 0;
 1822794:	e0fffbc3 	ldbu	r3,-17(fp)
 1822798:	00806134 	movhi	r2,388
 182279c:	109cd004 	addi	r2,r2,29504
 18227a0:	18c00524 	muli	r3,r3,20
 18227a4:	10c5883a 	add	r2,r2,r3
 18227a8:	108004c4 	addi	r2,r2,19
 18227ac:	10000005 	stb	zero,0(r2)
  return (err_t)i;
 18227b0:	e0bffbc3 	ldbu	r2,-17(fp)
}
 18227b4:	e037883a 	mov	sp,fp
 18227b8:	dfc00117 	ldw	ra,4(sp)
 18227bc:	df000017 	ldw	fp,0(sp)
 18227c0:	dec00204 	addi	sp,sp,8
 18227c4:	f800283a 	ret

018227c8 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 18227c8:	defff904 	addi	sp,sp,-28
 18227cc:	dfc00615 	stw	ra,24(sp)
 18227d0:	df000515 	stw	fp,20(sp)
 18227d4:	df000504 	addi	fp,sp,20
 18227d8:	e13ffc15 	stw	r4,-16(fp)
 18227dc:	e17ffd15 	stw	r5,-12(fp)
 18227e0:	e1bffe15 	stw	r6,-8(fp)
 18227e4:	e1ffff15 	stw	r7,-4(fp)
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 18227e8:	e0bffd17 	ldw	r2,-12(fp)
 18227ec:	10800117 	ldw	r2,4(r2)
 18227f0:	e0bffb15 	stw	r2,-20(fp)

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 18227f4:	e0bffb17 	ldw	r2,-20(fp)
 18227f8:	10800084 	addi	r2,r2,2
 18227fc:	01800184 	movi	r6,6
 1822800:	e17fff17 	ldw	r5,-4(fp)
 1822804:	1009883a 	mov	r4,r2
 1822808:	1805f980 	call	1805f98 <memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
 182280c:	e0bffb17 	ldw	r2,-20(fp)
 1822810:	10800204 	addi	r2,r2,8
 1822814:	01800184 	movi	r6,6
 1822818:	e17ffe17 	ldw	r5,-8(fp)
 182281c:	1009883a 	mov	r4,r2
 1822820:	1805f980 	call	1805f98 <memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 1822824:	e0bffb17 	ldw	r2,-20(fp)
 1822828:	10c00383 	ldbu	r3,14(r2)
 182282c:	1806703a 	and	r3,r3,zero
 1822830:	18c00214 	ori	r3,r3,8
 1822834:	10c00385 	stb	r3,14(r2)
 1822838:	10c003c3 	ldbu	r3,15(r2)
 182283c:	1806703a 	and	r3,r3,zero
 1822840:	10c003c5 	stb	r3,15(r2)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 1822844:	e0bffc17 	ldw	r2,-16(fp)
 1822848:	10800617 	ldw	r2,24(r2)
 182284c:	e17ffd17 	ldw	r5,-12(fp)
 1822850:	e13ffc17 	ldw	r4,-16(fp)
 1822854:	103ee83a 	callr	r2
}
 1822858:	e037883a 	mov	sp,fp
 182285c:	dfc00117 	ldw	ra,4(sp)
 1822860:	df000017 	ldw	fp,0(sp)
 1822864:	dec00204 	addi	sp,sp,8
 1822868:	f800283a 	ret

0182286c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 182286c:	defff704 	addi	sp,sp,-36
 1822870:	dfc00815 	stw	ra,32(sp)
 1822874:	df000715 	stw	fp,28(sp)
 1822878:	df000704 	addi	fp,sp,28
 182287c:	e13ffc15 	stw	r4,-16(fp)
 1822880:	e17ffd15 	stw	r5,-12(fp)
 1822884:	e1bffe15 	stw	r6,-8(fp)
 1822888:	3805883a 	mov	r2,r7
 182288c:	e0bfff05 	stb	r2,-4(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 1822890:	e0bffd17 	ldw	r2,-12(fp)
 1822894:	10000f26 	beq	r2,zero,18228d4 <etharp_update_arp_entry+0x68>
 1822898:	e0bffd17 	ldw	r2,-12(fp)
 182289c:	10800017 	ldw	r2,0(r2)
 18228a0:	10000c26 	beq	r2,zero,18228d4 <etharp_update_arp_entry+0x68>
      ip_addr_isbroadcast(ipaddr, netif) ||
 18228a4:	e0bffd17 	ldw	r2,-12(fp)
 18228a8:	10800017 	ldw	r2,0(r2)
 18228ac:	e17ffc17 	ldw	r5,-16(fp)
 18228b0:	1009883a 	mov	r4,r2
 18228b4:	18189b80 	call	18189b8 <ip4_addr_isbroadcast>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 18228b8:	10803fcc 	andi	r2,r2,255
 18228bc:	1000051e 	bne	r2,zero,18228d4 <etharp_update_arp_entry+0x68>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
 18228c0:	e0bffd17 	ldw	r2,-12(fp)
 18228c4:	10800017 	ldw	r2,0(r2)
 18228c8:	10803c0c 	andi	r2,r2,240
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
 18228cc:	10803818 	cmpnei	r2,r2,224
 18228d0:	1000021e 	bne	r2,zero,18228dc <etharp_update_arp_entry+0x70>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 18228d4:	00bffc84 	movi	r2,-14
 18228d8:	00005006 	br	1822a1c <etharp_update_arp_entry+0x1b0>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 18228dc:	e0bfff03 	ldbu	r2,-4(fp)
 18228e0:	100b883a 	mov	r5,r2
 18228e4:	e13ffd17 	ldw	r4,-12(fp)
 18228e8:	18224b00 	call	18224b0 <etharp_find_entry>
 18228ec:	e0bff905 	stb	r2,-28(fp)
  /* bail out if no entry could be found */
  if (i < 0) {
 18228f0:	e0bff907 	ldb	r2,-28(fp)
 18228f4:	1000020e 	bge	r2,zero,1822900 <etharp_update_arp_entry+0x94>
    return (err_t)i;
 18228f8:	e0bff903 	ldbu	r2,-28(fp)
 18228fc:	00004706 	br	1822a1c <etharp_update_arp_entry+0x1b0>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 1822900:	e0fff907 	ldb	r3,-28(fp)
 1822904:	00806134 	movhi	r2,388
 1822908:	109cd004 	addi	r2,r2,29504
 182290c:	18c00524 	muli	r3,r3,20
 1822910:	10c5883a 	add	r2,r2,r3
 1822914:	10800484 	addi	r2,r2,18
 1822918:	00c00084 	movi	r3,2
 182291c:	10c00005 	stb	r3,0(r2)
  }

  /* record network interface */
  arp_table[i].netif = netif;
 1822920:	e0fff907 	ldb	r3,-28(fp)
 1822924:	00806134 	movhi	r2,388
 1822928:	109cd004 	addi	r2,r2,29504
 182292c:	18c00524 	muli	r3,r3,20
 1822930:	10c5883a 	add	r2,r2,r3
 1822934:	10800204 	addi	r2,r2,8
 1822938:	e0fffc17 	ldw	r3,-16(fp)
 182293c:	10c00015 	stw	r3,0(r2)
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 1822940:	e0bff907 	ldb	r2,-28(fp)
 1822944:	10800524 	muli	r2,r2,20
 1822948:	10c00304 	addi	r3,r2,12
 182294c:	00806134 	movhi	r2,388
 1822950:	109cd004 	addi	r2,r2,29504
 1822954:	1885883a 	add	r2,r3,r2
 1822958:	01800184 	movi	r6,6
 182295c:	e17ffe17 	ldw	r5,-8(fp)
 1822960:	1009883a 	mov	r4,r2
 1822964:	1805f980 	call	1805f98 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 1822968:	e0fff907 	ldb	r3,-28(fp)
 182296c:	00806134 	movhi	r2,388
 1822970:	109cd004 	addi	r2,r2,29504
 1822974:	18c00524 	muli	r3,r3,20
 1822978:	10c5883a 	add	r2,r2,r3
 182297c:	108004c4 	addi	r2,r2,19
 1822980:	10000005 	stb	zero,0(r2)
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 1822984:	00001d06 	br	18229fc <etharp_update_arp_entry+0x190>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 1822988:	e0fff907 	ldb	r3,-28(fp)
 182298c:	00806134 	movhi	r2,388
 1822990:	109cd004 	addi	r2,r2,29504
 1822994:	18c00524 	muli	r3,r3,20
 1822998:	10c5883a 	add	r2,r2,r3
 182299c:	10800017 	ldw	r2,0(r2)
 18229a0:	e0bffa15 	stw	r2,-24(fp)
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 18229a4:	e13ff907 	ldb	r4,-28(fp)
 18229a8:	e0bffa17 	ldw	r2,-24(fp)
 18229ac:	10c00017 	ldw	r3,0(r2)
 18229b0:	00806134 	movhi	r2,388
 18229b4:	109cd004 	addi	r2,r2,29504
 18229b8:	21000524 	muli	r4,r4,20
 18229bc:	1105883a 	add	r2,r2,r4
 18229c0:	10c00015 	stw	r3,0(r2)
    /* get the packet pointer */
    p = q->p;
 18229c4:	e0bffa17 	ldw	r2,-24(fp)
 18229c8:	10800117 	ldw	r2,4(r2)
 18229cc:	e0bffb15 	stw	r2,-20(fp)
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 18229d0:	e13ffa17 	ldw	r4,-24(fp)
 18229d4:	183c5140 	call	183c514 <free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 18229d8:	e0bffc17 	ldw	r2,-16(fp)
 18229dc:	10800cc4 	addi	r2,r2,51
 18229e0:	e1fffe17 	ldw	r7,-8(fp)
 18229e4:	100d883a 	mov	r6,r2
 18229e8:	e17ffb17 	ldw	r5,-20(fp)
 18229ec:	e13ffc17 	ldw	r4,-16(fp)
 18229f0:	18227c80 	call	18227c8 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 18229f4:	e13ffb17 	ldw	r4,-20(fp)
 18229f8:	181a22c0 	call	181a22c <pbuf_free>
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  /* reset time stamp */
  arp_table[i].ctime = 0;
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 18229fc:	e0fff907 	ldb	r3,-28(fp)
 1822a00:	00806134 	movhi	r2,388
 1822a04:	109cd004 	addi	r2,r2,29504
 1822a08:	18c00524 	muli	r3,r3,20
 1822a0c:	10c5883a 	add	r2,r2,r3
 1822a10:	10800017 	ldw	r2,0(r2)
 1822a14:	103fdc1e 	bne	r2,zero,1822988 <__ram_exceptions_end+0xff812698>
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
    /* free the queued IP packet */
    pbuf_free(p);
  }
  return ERR_OK;
 1822a18:	0005883a 	mov	r2,zero
}
 1822a1c:	e037883a 	mov	sp,fp
 1822a20:	dfc00117 	ldw	ra,4(sp)
 1822a24:	df000017 	ldw	fp,0(sp)
 1822a28:	dec00204 	addi	sp,sp,8
 1822a2c:	f800283a 	ret

01822a30 <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
 1822a30:	defffc04 	addi	sp,sp,-16
 1822a34:	dfc00315 	stw	ra,12(sp)
 1822a38:	df000215 	stw	fp,8(sp)
 1822a3c:	df000204 	addi	fp,sp,8
 1822a40:	e13fff15 	stw	r4,-4(fp)
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1822a44:	e03ffe05 	stb	zero,-8(fp)
 1822a48:	00001906 	br	1822ab0 <etharp_cleanup_netif+0x80>
    u8_t state = arp_table[i].state;
 1822a4c:	e0fffe03 	ldbu	r3,-8(fp)
 1822a50:	00806134 	movhi	r2,388
 1822a54:	109cd004 	addi	r2,r2,29504
 1822a58:	18c00524 	muli	r3,r3,20
 1822a5c:	10c5883a 	add	r2,r2,r3
 1822a60:	10800484 	addi	r2,r2,18
 1822a64:	10800003 	ldbu	r2,0(r2)
 1822a68:	e0bffe45 	stb	r2,-7(fp)
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 1822a6c:	e0bffe43 	ldbu	r2,-7(fp)
 1822a70:	10000c26 	beq	r2,zero,1822aa4 <etharp_cleanup_netif+0x74>
 1822a74:	e0fffe03 	ldbu	r3,-8(fp)
 1822a78:	00806134 	movhi	r2,388
 1822a7c:	109cd004 	addi	r2,r2,29504
 1822a80:	18c00524 	muli	r3,r3,20
 1822a84:	10c5883a 	add	r2,r2,r3
 1822a88:	10800204 	addi	r2,r2,8
 1822a8c:	10c00017 	ldw	r3,0(r2)
 1822a90:	e0bfff17 	ldw	r2,-4(fp)
 1822a94:	1880031e 	bne	r3,r2,1822aa4 <etharp_cleanup_netif+0x74>
      etharp_free_entry(i);
 1822a98:	e0bffe03 	ldbu	r2,-8(fp)
 1822a9c:	1009883a 	mov	r4,r2
 1822aa0:	18222980 	call	1822298 <etharp_free_entry>
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1822aa4:	e0bffe03 	ldbu	r2,-8(fp)
 1822aa8:	10800044 	addi	r2,r2,1
 1822aac:	e0bffe05 	stb	r2,-8(fp)
 1822ab0:	e0bffe03 	ldbu	r2,-8(fp)
 1822ab4:	10800670 	cmpltui	r2,r2,25
 1822ab8:	103fe41e 	bne	r2,zero,1822a4c <__ram_exceptions_end+0xff81275c>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
 1822abc:	0001883a 	nop
 1822ac0:	e037883a 	mov	sp,fp
 1822ac4:	dfc00117 	ldw	ra,4(sp)
 1822ac8:	df000017 	ldw	fp,0(sp)
 1822acc:	dec00204 	addi	sp,sp,8
 1822ad0:	f800283a 	ret

01822ad4 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, ip_addr_t *ipaddr,
         struct eth_addr **eth_ret, ip_addr_t **ip_ret)
{
 1822ad4:	defff904 	addi	sp,sp,-28
 1822ad8:	dfc00615 	stw	ra,24(sp)
 1822adc:	df000515 	stw	fp,20(sp)
 1822ae0:	df000504 	addi	fp,sp,20
 1822ae4:	e13ffc15 	stw	r4,-16(fp)
 1822ae8:	e17ffd15 	stw	r5,-12(fp)
 1822aec:	e1bffe15 	stw	r6,-8(fp)
 1822af0:	e1ffff15 	stw	r7,-4(fp)
  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY);
 1822af4:	01400084 	movi	r5,2
 1822af8:	e13ffd17 	ldw	r4,-12(fp)
 1822afc:	18224b00 	call	18224b0 <etharp_find_entry>
 1822b00:	e0bffb05 	stb	r2,-20(fp)
  if((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 1822b04:	e0bffb07 	ldb	r2,-20(fp)
 1822b08:	10001c16 	blt	r2,zero,1822b7c <etharp_find_addr+0xa8>
 1822b0c:	e0fffb07 	ldb	r3,-20(fp)
 1822b10:	00806134 	movhi	r2,388
 1822b14:	109cd004 	addi	r2,r2,29504
 1822b18:	18c00524 	muli	r3,r3,20
 1822b1c:	10c5883a 	add	r2,r2,r3
 1822b20:	10800484 	addi	r2,r2,18
 1822b24:	10800003 	ldbu	r2,0(r2)
 1822b28:	10803fcc 	andi	r2,r2,255
 1822b2c:	108000b0 	cmpltui	r2,r2,2
 1822b30:	1000121e 	bne	r2,zero,1822b7c <etharp_find_addr+0xa8>
      *eth_ret = &arp_table[i].ethaddr;
 1822b34:	e0bffb07 	ldb	r2,-20(fp)
 1822b38:	10800524 	muli	r2,r2,20
 1822b3c:	10c00304 	addi	r3,r2,12
 1822b40:	00806134 	movhi	r2,388
 1822b44:	109cd004 	addi	r2,r2,29504
 1822b48:	1887883a 	add	r3,r3,r2
 1822b4c:	e0bffe17 	ldw	r2,-8(fp)
 1822b50:	10c00015 	stw	r3,0(r2)
      *ip_ret = &arp_table[i].ipaddr;
 1822b54:	e0bffb07 	ldb	r2,-20(fp)
 1822b58:	10800524 	muli	r2,r2,20
 1822b5c:	10c00104 	addi	r3,r2,4
 1822b60:	00806134 	movhi	r2,388
 1822b64:	109cd004 	addi	r2,r2,29504
 1822b68:	1887883a 	add	r3,r3,r2
 1822b6c:	e0bfff17 	ldw	r2,-4(fp)
 1822b70:	10c00015 	stw	r3,0(r2)
      return i;
 1822b74:	e0bffb03 	ldbu	r2,-20(fp)
 1822b78:	00000106 	br	1822b80 <etharp_find_addr+0xac>
  }
  return -1;
 1822b7c:	00bfffc4 	movi	r2,-1
}
 1822b80:	e037883a 	mov	sp,fp
 1822b84:	dfc00117 	ldw	ra,4(sp)
 1822b88:	df000017 	ldw	fp,0(sp)
 1822b8c:	dec00204 	addi	sp,sp,8
 1822b90:	f800283a 	ret

01822b94 <etharp_ip_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_ip_input(struct netif *netif, struct pbuf *p)
{
 1822b94:	defff904 	addi	sp,sp,-28
 1822b98:	dfc00615 	stw	ra,24(sp)
 1822b9c:	df000515 	stw	fp,20(sp)
 1822ba0:	df000504 	addi	fp,sp,20
 1822ba4:	e13ffe15 	stw	r4,-8(fp)
 1822ba8:	e17fff15 	stw	r5,-4(fp)
  struct eth_hdr *ethhdr;
  struct ip_hdr *iphdr;
  ip_addr_t iphdr_src;
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 1822bac:	e0bffe17 	ldw	r2,-8(fp)
 1822bb0:	1000091e 	bne	r2,zero,1822bd8 <etharp_ip_input+0x44>
 1822bb4:	01c06134 	movhi	r7,388
 1822bb8:	39c46504 	addi	r7,r7,4500
 1822bbc:	0180a104 	movi	r6,644
 1822bc0:	01406134 	movhi	r5,388
 1822bc4:	29446b04 	addi	r5,r5,4524
 1822bc8:	01006134 	movhi	r4,388
 1822bcc:	21046f04 	addi	r4,r4,4540
 1822bd0:	1800b240 	call	1800b24 <printf>
 1822bd4:	003fff06 	br	1822bd4 <__ram_exceptions_end+0xff8128e4>

  /* Only insert an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  ethhdr = (struct eth_hdr *)p->payload;
 1822bd8:	e0bfff17 	ldw	r2,-4(fp)
 1822bdc:	10800117 	ldw	r2,4(r2)
 1822be0:	e0bffb15 	stw	r2,-20(fp)
  iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 1822be4:	e0bffb17 	ldw	r2,-20(fp)
 1822be8:	10800404 	addi	r2,r2,16
 1822bec:	e0bffc15 	stw	r2,-16(fp)
  if (ethhdr->type == PP_HTONS(ETHTYPE_VLAN)) {
    iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  ip_addr_copy(iphdr_src, iphdr->src);
 1822bf0:	e0bffc17 	ldw	r2,-16(fp)
 1822bf4:	10c00303 	ldbu	r3,12(r2)
 1822bf8:	11000343 	ldbu	r4,13(r2)
 1822bfc:	2008923a 	slli	r4,r4,8
 1822c00:	20c6b03a 	or	r3,r4,r3
 1822c04:	11000383 	ldbu	r4,14(r2)
 1822c08:	2008943a 	slli	r4,r4,16
 1822c0c:	20c6b03a 	or	r3,r4,r3
 1822c10:	108003c3 	ldbu	r2,15(r2)
 1822c14:	1004963a 	slli	r2,r2,24
 1822c18:	10c4b03a 	or	r2,r2,r3
 1822c1c:	e0bffd15 	stw	r2,-12(fp)

  /* source is not on the local network? */
  if (!ip_addr_netcmp(&iphdr_src, &(netif->ip_addr), &(netif->netmask))) {
 1822c20:	e0fffd17 	ldw	r3,-12(fp)
 1822c24:	e0bffe17 	ldw	r2,-8(fp)
 1822c28:	10800117 	ldw	r2,4(r2)
 1822c2c:	1886f03a 	xor	r3,r3,r2
 1822c30:	e0bffe17 	ldw	r2,-8(fp)
 1822c34:	10800217 	ldw	r2,8(r2)
 1822c38:	1884703a 	and	r2,r3,r2
 1822c3c:	1000091e 	bne	r2,zero,1822c64 <etharp_ip_input+0xd0>

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update the source IP address in the cache, if present */
  /* @todo We could use ETHARP_FLAG_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  etharp_update_arp_entry(netif, &iphdr_src, &(ethhdr->src), ETHARP_FLAG_FIND_ONLY);
 1822c40:	e0bffb17 	ldw	r2,-20(fp)
 1822c44:	10c00204 	addi	r3,r2,8
 1822c48:	e0bffd04 	addi	r2,fp,-12
 1822c4c:	01c00084 	movi	r7,2
 1822c50:	180d883a 	mov	r6,r3
 1822c54:	100b883a 	mov	r5,r2
 1822c58:	e13ffe17 	ldw	r4,-8(fp)
 1822c5c:	182286c0 	call	182286c <etharp_update_arp_entry>
 1822c60:	00000106 	br	1822c68 <etharp_ip_input+0xd4>
  ip_addr_copy(iphdr_src, iphdr->src);

  /* source is not on the local network? */
  if (!ip_addr_netcmp(&iphdr_src, &(netif->ip_addr), &(netif->netmask))) {
    /* do nothing */
    return;
 1822c64:	0001883a 	nop
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update the source IP address in the cache, if present */
  /* @todo We could use ETHARP_FLAG_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  etharp_update_arp_entry(netif, &iphdr_src, &(ethhdr->src), ETHARP_FLAG_FIND_ONLY);
}
 1822c68:	e037883a 	mov	sp,fp
 1822c6c:	dfc00117 	ldw	ra,4(sp)
 1822c70:	df000017 	ldw	fp,0(sp)
 1822c74:	dec00204 	addi	sp,sp,8
 1822c78:	f800283a 	ret

01822c7c <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
 1822c7c:	defff404 	addi	sp,sp,-48
 1822c80:	dfc00b15 	stw	ra,44(sp)
 1822c84:	df000a15 	stw	fp,40(sp)
 1822c88:	df000a04 	addi	fp,sp,40
 1822c8c:	e13ffb15 	stw	r4,-20(fp)
 1822c90:	e17ffc15 	stw	r5,-16(fp)
 1822c94:	e1bffd15 	stw	r6,-12(fp)
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 1822c98:	e0bffb17 	ldw	r2,-20(fp)
 1822c9c:	1000091e 	bne	r2,zero,1822cc4 <etharp_arp_input+0x48>
 1822ca0:	01c06134 	movhi	r7,388
 1822ca4:	39c46504 	addi	r7,r7,4500
 1822ca8:	0180aec4 	movi	r6,699
 1822cac:	01406134 	movhi	r5,388
 1822cb0:	29446b04 	addi	r5,r5,4524
 1822cb4:	01006134 	movhi	r4,388
 1822cb8:	21046f04 	addi	r4,r4,4540
 1822cbc:	1800b240 	call	1800b24 <printf>
 1822cc0:	003fff06 	br	1822cc0 <__ram_exceptions_end+0xff8129d0>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 1822cc4:	e0bffd17 	ldw	r2,-12(fp)
 1822cc8:	1080028b 	ldhu	r2,10(r2)
 1822ccc:	10bfffcc 	andi	r2,r2,65535
 1822cd0:	10800b28 	cmpgeui	r2,r2,44
 1822cd4:	1000111e 	bne	r2,zero,1822d1c <etharp_arp_input+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
 1822cd8:	00806134 	movhi	r2,388
 1822cdc:	109e7504 	addi	r2,r2,31188
 1822ce0:	10801117 	ldw	r2,68(r2)
 1822ce4:	10c00044 	addi	r3,r2,1
 1822ce8:	00806134 	movhi	r2,388
 1822cec:	109e7504 	addi	r2,r2,31188
 1822cf0:	10c01115 	stw	r3,68(r2)
    ETHARP_STATS_INC(etharp.drop);
 1822cf4:	00806134 	movhi	r2,388
 1822cf8:	109e7504 	addi	r2,r2,31188
 1822cfc:	10800f17 	ldw	r2,60(r2)
 1822d00:	10c00044 	addi	r3,r2,1
 1822d04:	00806134 	movhi	r2,388
 1822d08:	109e7504 	addi	r2,r2,31188
 1822d0c:	10c00f15 	stw	r3,60(r2)
    pbuf_free(p);
 1822d10:	e13ffd17 	ldw	r4,-12(fp)
 1822d14:	181a22c0 	call	181a22c <pbuf_free>
    return;
 1822d18:	0000b606 	br	1822ff4 <etharp_arp_input+0x378>
  }

  ethhdr = (struct eth_hdr *)p->payload;
 1822d1c:	e0bffd17 	ldw	r2,-12(fp)
 1822d20:	10800117 	ldw	r2,4(r2)
 1822d24:	e0bff715 	stw	r2,-36(fp)
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 1822d28:	e0bff717 	ldw	r2,-36(fp)
 1822d2c:	10800404 	addi	r2,r2,16
 1822d30:	e0bff815 	stw	r2,-32(fp)
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 1822d34:	e0bff817 	ldw	r2,-32(fp)
 1822d38:	10c00003 	ldbu	r3,0(r2)
 1822d3c:	10800043 	ldbu	r2,1(r2)
 1822d40:	1004923a 	slli	r2,r2,8
 1822d44:	10c4b03a 	or	r2,r2,r3
 1822d48:	10bfffcc 	andi	r2,r2,65535
 1822d4c:	10804018 	cmpnei	r2,r2,256
 1822d50:	1000121e 	bne	r2,zero,1822d9c <etharp_arp_input+0x120>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 1822d54:	e0bff817 	ldw	r2,-32(fp)
 1822d58:	10800103 	ldbu	r2,4(r2)
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 1822d5c:	10803fcc 	andi	r2,r2,255
 1822d60:	10800198 	cmpnei	r2,r2,6
 1822d64:	10000d1e 	bne	r2,zero,1822d9c <etharp_arp_input+0x120>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 1822d68:	e0bff817 	ldw	r2,-32(fp)
 1822d6c:	10800143 	ldbu	r2,5(r2)
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 1822d70:	10803fcc 	andi	r2,r2,255
 1822d74:	10800118 	cmpnei	r2,r2,4
 1822d78:	1000081e 	bne	r2,zero,1822d9c <etharp_arp_input+0x120>
      (hdr->protolen != sizeof(ip_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 1822d7c:	e0bff817 	ldw	r2,-32(fp)
 1822d80:	10c00083 	ldbu	r3,2(r2)
 1822d84:	108000c3 	ldbu	r2,3(r2)
 1822d88:	1004923a 	slli	r2,r2,8
 1822d8c:	10c4b03a 	or	r2,r2,r3
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 1822d90:	10bfffcc 	andi	r2,r2,65535
 1822d94:	10800220 	cmpeqi	r2,r2,8
 1822d98:	1000111e 	bne	r2,zero,1822de0 <etharp_arp_input+0x164>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 1822d9c:	00806134 	movhi	r2,388
 1822da0:	109e7504 	addi	r2,r2,31188
 1822da4:	10801417 	ldw	r2,80(r2)
 1822da8:	10c00044 	addi	r3,r2,1
 1822dac:	00806134 	movhi	r2,388
 1822db0:	109e7504 	addi	r2,r2,31188
 1822db4:	10c01415 	stw	r3,80(r2)
    ETHARP_STATS_INC(etharp.drop);
 1822db8:	00806134 	movhi	r2,388
 1822dbc:	109e7504 	addi	r2,r2,31188
 1822dc0:	10800f17 	ldw	r2,60(r2)
 1822dc4:	10c00044 	addi	r3,r2,1
 1822dc8:	00806134 	movhi	r2,388
 1822dcc:	109e7504 	addi	r2,r2,31188
 1822dd0:	10c00f15 	stw	r3,60(r2)
    pbuf_free(p);
 1822dd4:	e13ffd17 	ldw	r4,-12(fp)
 1822dd8:	181a22c0 	call	181a22c <pbuf_free>
    return;
 1822ddc:	00008506 	br	1822ff4 <etharp_arp_input+0x378>
  }
  ETHARP_STATS_INC(etharp.recv);
 1822de0:	00806134 	movhi	r2,388
 1822de4:	109e7504 	addi	r2,r2,31188
 1822de8:	10800d17 	ldw	r2,52(r2)
 1822dec:	10c00044 	addi	r3,r2,1
 1822df0:	00806134 	movhi	r2,388
 1822df4:	109e7504 	addi	r2,r2,31188
 1822df8:	10c00d15 	stw	r3,52(r2)
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 1822dfc:	e0bff817 	ldw	r2,-32(fp)
 1822e00:	10c00384 	addi	r3,r2,14
 1822e04:	e0bff904 	addi	r2,fp,-28
 1822e08:	01800104 	movi	r6,4
 1822e0c:	180b883a 	mov	r5,r3
 1822e10:	1009883a 	mov	r4,r2
 1822e14:	1805f980 	call	1805f98 <memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 1822e18:	e0bff817 	ldw	r2,-32(fp)
 1822e1c:	10c00604 	addi	r3,r2,24
 1822e20:	e0bffa04 	addi	r2,fp,-24
 1822e24:	01800104 	movi	r6,4
 1822e28:	180b883a 	mov	r5,r3
 1822e2c:	1009883a 	mov	r4,r2
 1822e30:	1805f980 	call	1805f98 <memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 1822e34:	e0bffb17 	ldw	r2,-20(fp)
 1822e38:	10800104 	addi	r2,r2,4
 1822e3c:	10000326 	beq	r2,zero,1822e4c <etharp_arp_input+0x1d0>
 1822e40:	e0bffb17 	ldw	r2,-20(fp)
 1822e44:	10800117 	ldw	r2,4(r2)
 1822e48:	1000021e 	bne	r2,zero,1822e54 <etharp_arp_input+0x1d8>
    for_us = 0;
 1822e4c:	e03ff605 	stb	zero,-40(fp)
 1822e50:	00000506 	br	1822e68 <etharp_arp_input+0x1ec>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 1822e54:	e0fffa17 	ldw	r3,-24(fp)
 1822e58:	e0bffb17 	ldw	r2,-20(fp)
 1822e5c:	10800117 	ldw	r2,4(r2)
 1822e60:	1885003a 	cmpeq	r2,r3,r2
 1822e64:	e0bff605 	stb	r2,-40(fp)
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 1822e68:	e0bff817 	ldw	r2,-32(fp)
 1822e6c:	11000204 	addi	r4,r2,8
 1822e70:	e0bff603 	ldbu	r2,-40(fp)
 1822e74:	10000226 	beq	r2,zero,1822e80 <etharp_arp_input+0x204>
 1822e78:	00800044 	movi	r2,1
 1822e7c:	00000106 	br	1822e84 <etharp_arp_input+0x208>
 1822e80:	00800084 	movi	r2,2
 1822e84:	e0fff904 	addi	r3,fp,-28
 1822e88:	100f883a 	mov	r7,r2
 1822e8c:	200d883a 	mov	r6,r4
 1822e90:	180b883a 	mov	r5,r3
 1822e94:	e13ffb17 	ldw	r4,-20(fp)
 1822e98:	182286c0 	call	182286c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 1822e9c:	e0bff817 	ldw	r2,-32(fp)
 1822ea0:	10c00183 	ldbu	r3,6(r2)
 1822ea4:	108001c3 	ldbu	r2,7(r2)
 1822ea8:	1004923a 	slli	r2,r2,8
 1822eac:	10c4b03a 	or	r2,r2,r3
 1822eb0:	10bfffcc 	andi	r2,r2,65535
 1822eb4:	10c04020 	cmpeqi	r3,r2,256
 1822eb8:	1800031e 	bne	r3,zero,1822ec8 <etharp_arp_input+0x24c>
 1822ebc:	10808020 	cmpeqi	r2,r2,512
 1822ec0:	10003d1e 	bne	r2,zero,1822fb8 <etharp_arp_input+0x33c>
 1822ec4:	00004106 	br	1822fcc <etharp_arp_input+0x350>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 1822ec8:	e0bff603 	ldbu	r2,-40(fp)
 1822ecc:	10004726 	beq	r2,zero,1822fec <etharp_arp_input+0x370>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 1822ed0:	e0bff817 	ldw	r2,-32(fp)
 1822ed4:	10c00183 	ldbu	r3,6(r2)
 1822ed8:	1806703a 	and	r3,r3,zero
 1822edc:	10c00185 	stb	r3,6(r2)
 1822ee0:	10c001c3 	ldbu	r3,7(r2)
 1822ee4:	1806703a 	and	r3,r3,zero
 1822ee8:	18c00094 	ori	r3,r3,2
 1822eec:	10c001c5 	stb	r3,7(r2)

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 1822ef0:	e0bff817 	ldw	r2,-32(fp)
 1822ef4:	10c00604 	addi	r3,r2,24
 1822ef8:	e0bff817 	ldw	r2,-32(fp)
 1822efc:	10800384 	addi	r2,r2,14
 1822f00:	01800104 	movi	r6,4
 1822f04:	100b883a 	mov	r5,r2
 1822f08:	1809883a 	mov	r4,r3
 1822f0c:	1805f980 	call	1805f98 <memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 1822f10:	e0bff817 	ldw	r2,-32(fp)
 1822f14:	10c00384 	addi	r3,r2,14
 1822f18:	e0bffb17 	ldw	r2,-20(fp)
 1822f1c:	10800104 	addi	r2,r2,4
 1822f20:	01800104 	movi	r6,4
 1822f24:	100b883a 	mov	r5,r2
 1822f28:	1809883a 	mov	r4,r3
 1822f2c:	1805f980 	call	1805f98 <memcpy>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 1822f30:	e0bff817 	ldw	r2,-32(fp)
 1822f34:	10c00484 	addi	r3,r2,18
 1822f38:	e0bff817 	ldw	r2,-32(fp)
 1822f3c:	10800204 	addi	r2,r2,8
 1822f40:	01800184 	movi	r6,6
 1822f44:	100b883a 	mov	r5,r2
 1822f48:	1809883a 	mov	r4,r3
 1822f4c:	1805f980 	call	1805f98 <memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 1822f50:	e0bff717 	ldw	r2,-36(fp)
 1822f54:	10c00084 	addi	r3,r2,2
 1822f58:	e0bff817 	ldw	r2,-32(fp)
 1822f5c:	10800204 	addi	r2,r2,8
 1822f60:	01800184 	movi	r6,6
 1822f64:	100b883a 	mov	r5,r2
 1822f68:	1809883a 	mov	r4,r3
 1822f6c:	1805f980 	call	1805f98 <memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 1822f70:	e0bff817 	ldw	r2,-32(fp)
 1822f74:	10800204 	addi	r2,r2,8
 1822f78:	01800184 	movi	r6,6
 1822f7c:	e17ffc17 	ldw	r5,-16(fp)
 1822f80:	1009883a 	mov	r4,r2
 1822f84:	1805f980 	call	1805f98 <memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 1822f88:	e0bff717 	ldw	r2,-36(fp)
 1822f8c:	10800204 	addi	r2,r2,8
 1822f90:	01800184 	movi	r6,6
 1822f94:	e17ffc17 	ldw	r5,-16(fp)
 1822f98:	1009883a 	mov	r4,r2
 1822f9c:	1805f980 	call	1805f98 <memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 1822fa0:	e0bffb17 	ldw	r2,-20(fp)
 1822fa4:	10800617 	ldw	r2,24(r2)
 1822fa8:	e17ffd17 	ldw	r5,-12(fp)
 1822fac:	e13ffb17 	ldw	r4,-20(fp)
 1822fb0:	103ee83a 	callr	r2
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
 1822fb4:	00000d06 	br	1822fec <etharp_arp_input+0x370>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 1822fb8:	e0bff904 	addi	r2,fp,-28
 1822fbc:	100b883a 	mov	r5,r2
 1822fc0:	e13ffb17 	ldw	r4,-20(fp)
 1822fc4:	18165ec0 	call	18165ec <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 1822fc8:	00000806 	br	1822fec <etharp_arp_input+0x370>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 1822fcc:	00806134 	movhi	r2,388
 1822fd0:	109e7504 	addi	r2,r2,31188
 1822fd4:	10801617 	ldw	r2,88(r2)
 1822fd8:	10c00044 	addi	r3,r2,1
 1822fdc:	00806134 	movhi	r2,388
 1822fe0:	109e7504 	addi	r2,r2,31188
 1822fe4:	10c01615 	stw	r3,88(r2)
    break;
 1822fe8:	0001883a 	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 1822fec:	e13ffd17 	ldw	r4,-12(fp)
 1822ff0:	181a22c0 	call	181a22c <pbuf_free>
}
 1822ff4:	e037883a 	mov	sp,fp
 1822ff8:	dfc00117 	ldw	ra,4(sp)
 1822ffc:	df000017 	ldw	fp,0(sp)
 1823000:	dec00204 	addi	sp,sp,8
 1823004:	f800283a 	ret

01823008 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 1823008:	defffb04 	addi	sp,sp,-20
 182300c:	dfc00415 	stw	ra,16(sp)
 1823010:	df000315 	stw	fp,12(sp)
 1823014:	df000304 	addi	fp,sp,12
 1823018:	e13ffd15 	stw	r4,-12(fp)
 182301c:	e17ffe15 	stw	r5,-8(fp)
 1823020:	3005883a 	mov	r2,r6
 1823024:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 1823028:	e0ffff03 	ldbu	r3,-4(fp)
 182302c:	00806134 	movhi	r2,388
 1823030:	109cd004 	addi	r2,r2,29504
 1823034:	18c00524 	muli	r3,r3,20
 1823038:	10c5883a 	add	r2,r2,r3
 182303c:	10800484 	addi	r2,r2,18
 1823040:	10800003 	ldbu	r2,0(r2)
 1823044:	10803fcc 	andi	r2,r2,255
 1823048:	10800098 	cmpnei	r2,r2,2
 182304c:	10001f1e 	bne	r2,zero,18230cc <etharp_output_to_arp_index+0xc4>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
 1823050:	e0ffff03 	ldbu	r3,-4(fp)
 1823054:	00806134 	movhi	r2,388
 1823058:	109cd004 	addi	r2,r2,29504
 182305c:	18c00524 	muli	r3,r3,20
 1823060:	10c5883a 	add	r2,r2,r3
 1823064:	108004c4 	addi	r2,r2,19
 1823068:	10800003 	ldbu	r2,0(r2)
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 182306c:	10803fcc 	andi	r2,r2,255
 1823070:	10803930 	cmpltui	r2,r2,228
 1823074:	1000151e 	bne	r2,zero,18230cc <etharp_output_to_arp_index+0xc4>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 1823078:	e0bfff03 	ldbu	r2,-4(fp)
 182307c:	10800524 	muli	r2,r2,20
 1823080:	10c00104 	addi	r3,r2,4
 1823084:	00806134 	movhi	r2,388
 1823088:	109cd004 	addi	r2,r2,29504
 182308c:	1885883a 	add	r2,r3,r2
 1823090:	100b883a 	mov	r5,r2
 1823094:	e13ffd17 	ldw	r4,-12(fp)
 1823098:	1823a100 	call	1823a10 <etharp_request>
 182309c:	10803fcc 	andi	r2,r2,255
 18230a0:	1080201c 	xori	r2,r2,128
 18230a4:	10bfe004 	addi	r2,r2,-128
 18230a8:	1000081e 	bne	r2,zero,18230cc <etharp_output_to_arp_index+0xc4>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 18230ac:	e0ffff03 	ldbu	r3,-4(fp)
 18230b0:	00806134 	movhi	r2,388
 18230b4:	109cd004 	addi	r2,r2,29504
 18230b8:	18c00524 	muli	r3,r3,20
 18230bc:	10c5883a 	add	r2,r2,r3
 18230c0:	10800484 	addi	r2,r2,18
 18230c4:	00c000c4 	movi	r3,3
 18230c8:	10c00005 	stb	r3,0(r2)
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 18230cc:	e0bffd17 	ldw	r2,-12(fp)
 18230d0:	11000cc4 	addi	r4,r2,51
    &arp_table[arp_idx].ethaddr);
 18230d4:	e0bfff03 	ldbu	r2,-4(fp)
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 18230d8:	10800524 	muli	r2,r2,20
 18230dc:	10c00304 	addi	r3,r2,12
 18230e0:	00806134 	movhi	r2,388
 18230e4:	109cd004 	addi	r2,r2,29504
 18230e8:	1885883a 	add	r2,r3,r2
 18230ec:	100f883a 	mov	r7,r2
 18230f0:	200d883a 	mov	r6,r4
 18230f4:	e17ffe17 	ldw	r5,-8(fp)
 18230f8:	e13ffd17 	ldw	r4,-12(fp)
 18230fc:	18227c80 	call	18227c8 <etharp_send_ip>
    &arp_table[arp_idx].ethaddr);
}
 1823100:	e037883a 	mov	sp,fp
 1823104:	dfc00117 	ldw	ra,4(sp)
 1823108:	df000017 	ldw	fp,0(sp)
 182310c:	dec00204 	addi	sp,sp,8
 1823110:	f800283a 	ret

01823114 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 1823114:	defff704 	addi	sp,sp,-36
 1823118:	dfc00815 	stw	ra,32(sp)
 182311c:	df000715 	stw	fp,28(sp)
 1823120:	df000704 	addi	fp,sp,28
 1823124:	e13ffd15 	stw	r4,-12(fp)
 1823128:	e17ffe15 	stw	r5,-8(fp)
 182312c:	e1bfff15 	stw	r6,-4(fp)
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
 1823130:	e0bfff17 	ldw	r2,-4(fp)
 1823134:	e0bffa15 	stw	r2,-24(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 1823138:	01400404 	movi	r5,16
 182313c:	e13ffe17 	ldw	r4,-8(fp)
 1823140:	181a07c0 	call	181a07c <pbuf_header>
 1823144:	10803fcc 	andi	r2,r2,255
 1823148:	10000926 	beq	r2,zero,1823170 <etharp_output+0x5c>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
 182314c:	00806134 	movhi	r2,388
 1823150:	109e7504 	addi	r2,r2,31188
 1823154:	10800517 	ldw	r2,20(r2)
 1823158:	10c00044 	addi	r3,r2,1
 182315c:	00806134 	movhi	r2,388
 1823160:	109e7504 	addi	r2,r2,31188
 1823164:	10c00515 	stw	r3,20(r2)
    return ERR_BUF;
 1823168:	00bfff84 	movi	r2,-2
 182316c:	00009f06 	br	18233ec <etharp_output+0x2d8>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 1823170:	e0bfff17 	ldw	r2,-4(fp)
 1823174:	10800017 	ldw	r2,0(r2)
 1823178:	e17ffd17 	ldw	r5,-12(fp)
 182317c:	1009883a 	mov	r4,r2
 1823180:	18189b80 	call	18189b8 <ip4_addr_isbroadcast>
 1823184:	10803fcc 	andi	r2,r2,255
 1823188:	10000326 	beq	r2,zero,1823198 <etharp_output+0x84>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
 182318c:	d0a01384 	addi	r2,gp,-32690
 1823190:	e0bff915 	stw	r2,-28(fp)
 1823194:	00008e06 	br	18233d0 <etharp_output+0x2bc>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
 1823198:	e0bfff17 	ldw	r2,-4(fp)
 182319c:	10800017 	ldw	r2,0(r2)
 18231a0:	10803c0c 	andi	r2,r2,240
 18231a4:	10803818 	cmpnei	r2,r2,224
 18231a8:	1000131e 	bne	r2,zero,18231f8 <etharp_output+0xe4>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 18231ac:	00800044 	movi	r2,1
 18231b0:	e0bffb85 	stb	r2,-18(fp)
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 18231b4:	e03ffbc5 	stb	zero,-17(fp)
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 18231b8:	00801784 	movi	r2,94
 18231bc:	e0bffc05 	stb	r2,-16(fp)
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 18231c0:	e0bfff17 	ldw	r2,-4(fp)
 18231c4:	10800044 	addi	r2,r2,1
 18231c8:	10800003 	ldbu	r2,0(r2)
 18231cc:	10801fcc 	andi	r2,r2,127
 18231d0:	e0bffc45 	stb	r2,-15(fp)
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 18231d4:	e0bfff17 	ldw	r2,-4(fp)
 18231d8:	10800083 	ldbu	r2,2(r2)
 18231dc:	e0bffc85 	stb	r2,-14(fp)
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 18231e0:	e0bfff17 	ldw	r2,-4(fp)
 18231e4:	108000c3 	ldbu	r2,3(r2)
 18231e8:	e0bffcc5 	stb	r2,-13(fp)
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 18231ec:	e0bffb84 	addi	r2,fp,-18
 18231f0:	e0bff915 	stw	r2,-28(fp)
 18231f4:	00007606 	br	18233d0 <etharp_output+0x2bc>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 18231f8:	e0bfff17 	ldw	r2,-4(fp)
 18231fc:	10c00017 	ldw	r3,0(r2)
 1823200:	e0bffd17 	ldw	r2,-12(fp)
 1823204:	10800117 	ldw	r2,4(r2)
 1823208:	1886f03a 	xor	r3,r3,r2
 182320c:	e0bffd17 	ldw	r2,-12(fp)
 1823210:	10800217 	ldw	r2,8(r2)
 1823214:	1884703a 	and	r2,r3,r2
 1823218:	10001126 	beq	r2,zero,1823260 <etharp_output+0x14c>
        !ip_addr_islinklocal(ipaddr)) {
 182321c:	e0bfff17 	ldw	r2,-4(fp)
 1823220:	10800017 	ldw	r2,0(r2)
 1823224:	10ffffcc 	andi	r3,r2,65535
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 1823228:	00bfaa54 	movui	r2,65193
 182322c:	18800c26 	beq	r3,r2,1823260 <etharp_output+0x14c>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
 1823230:	e0bffd17 	ldw	r2,-12(fp)
 1823234:	10800304 	addi	r2,r2,12
 1823238:	10000726 	beq	r2,zero,1823258 <etharp_output+0x144>
 182323c:	e0bffd17 	ldw	r2,-12(fp)
 1823240:	10800317 	ldw	r2,12(r2)
 1823244:	10000426 	beq	r2,zero,1823258 <etharp_output+0x144>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
 1823248:	e0bffd17 	ldw	r2,-12(fp)
 182324c:	10800304 	addi	r2,r2,12
 1823250:	e0bffa15 	stw	r2,-24(fp)
 1823254:	00000206 	br	1823260 <etharp_output+0x14c>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
 1823258:	00bfff04 	movi	r2,-4
 182325c:	00006306 	br	18233ec <etharp_output+0x2d8>
        }
      }
    }
#if LWIP_NETIF_HWADDRHINT
    if (netif->addr_hint != NULL) {
 1823260:	e0bffd17 	ldw	r2,-12(fp)
 1823264:	10801017 	ldw	r2,64(r2)
 1823268:	10002826 	beq	r2,zero,182330c <etharp_output+0x1f8>
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
 182326c:	e0bffd17 	ldw	r2,-12(fp)
 1823270:	10801017 	ldw	r2,64(r2)
 1823274:	10800003 	ldbu	r2,0(r2)
 1823278:	e0bffb45 	stb	r2,-19(fp)
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
 182327c:	e0bffb43 	ldbu	r2,-19(fp)
 1823280:	10800668 	cmpgeui	r2,r2,25
 1823284:	1000211e 	bne	r2,zero,182330c <etharp_output+0x1f8>
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 1823288:	e0fffb43 	ldbu	r3,-19(fp)
 182328c:	00806134 	movhi	r2,388
 1823290:	109cd004 	addi	r2,r2,29504
 1823294:	18c00524 	muli	r3,r3,20
 1823298:	10c5883a 	add	r2,r2,r3
 182329c:	10800484 	addi	r2,r2,18
 18232a0:	10800003 	ldbu	r2,0(r2)
 18232a4:	10803fcc 	andi	r2,r2,255
 18232a8:	108000b0 	cmpltui	r2,r2,2
 18232ac:	1000171e 	bne	r2,zero,182330c <etharp_output+0x1f8>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 18232b0:	e0bffa17 	ldw	r2,-24(fp)
 18232b4:	10c00017 	ldw	r3,0(r2)
 18232b8:	e13ffb43 	ldbu	r4,-19(fp)
 18232bc:	00806134 	movhi	r2,388
 18232c0:	109cd004 	addi	r2,r2,29504
 18232c4:	21000524 	muli	r4,r4,20
 18232c8:	1105883a 	add	r2,r2,r4
 18232cc:	10800104 	addi	r2,r2,4
 18232d0:	10800017 	ldw	r2,0(r2)
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 18232d4:	18800d1e 	bne	r3,r2,182330c <etharp_output+0x1f8>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 18232d8:	00806134 	movhi	r2,388
 18232dc:	109e7504 	addi	r2,r2,31188
 18232e0:	10801717 	ldw	r2,92(r2)
 18232e4:	10c00044 	addi	r3,r2,1
 18232e8:	00806134 	movhi	r2,388
 18232ec:	109e7504 	addi	r2,r2,31188
 18232f0:	10c01715 	stw	r3,92(r2)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 18232f4:	e0bffb43 	ldbu	r2,-19(fp)
 18232f8:	100d883a 	mov	r6,r2
 18232fc:	e17ffe17 	ldw	r5,-8(fp)
 1823300:	e13ffd17 	ldw	r4,-12(fp)
 1823304:	18230080 	call	1823008 <etharp_output_to_arp_index>
 1823308:	00003806 	br	18233ec <etharp_output+0x2d8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 182330c:	e03ffb05 	stb	zero,-20(fp)
 1823310:	00002706 	br	18233b0 <etharp_output+0x29c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 1823314:	e0fffb07 	ldb	r3,-20(fp)
 1823318:	00806134 	movhi	r2,388
 182331c:	109cd004 	addi	r2,r2,29504
 1823320:	18c00524 	muli	r3,r3,20
 1823324:	10c5883a 	add	r2,r2,r3
 1823328:	10800484 	addi	r2,r2,18
 182332c:	10800003 	ldbu	r2,0(r2)
 1823330:	10803fcc 	andi	r2,r2,255
 1823334:	108000b0 	cmpltui	r2,r2,2
 1823338:	10001a1e 	bne	r2,zero,18233a4 <etharp_output+0x290>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 182333c:	e0bffa17 	ldw	r2,-24(fp)
 1823340:	10c00017 	ldw	r3,0(r2)
 1823344:	e13ffb07 	ldb	r4,-20(fp)
 1823348:	00806134 	movhi	r2,388
 182334c:	109cd004 	addi	r2,r2,29504
 1823350:	21000524 	muli	r4,r4,20
 1823354:	1105883a 	add	r2,r2,r4
 1823358:	10800104 	addi	r2,r2,4
 182335c:	10800017 	ldw	r2,0(r2)
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 1823360:	1880101e 	bne	r3,r2,18233a4 <etharp_output+0x290>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 1823364:	e0bffd17 	ldw	r2,-12(fp)
 1823368:	10000726 	beq	r2,zero,1823388 <etharp_output+0x274>
 182336c:	e0bffd17 	ldw	r2,-12(fp)
 1823370:	10801017 	ldw	r2,64(r2)
 1823374:	10000426 	beq	r2,zero,1823388 <etharp_output+0x274>
 1823378:	e0bffd17 	ldw	r2,-12(fp)
 182337c:	10801017 	ldw	r2,64(r2)
 1823380:	e0fffb03 	ldbu	r3,-20(fp)
 1823384:	10c00005 	stb	r3,0(r2)
        return etharp_output_to_arp_index(netif, q, i);
 1823388:	e0bffb03 	ldbu	r2,-20(fp)
 182338c:	10803fcc 	andi	r2,r2,255
 1823390:	100d883a 	mov	r6,r2
 1823394:	e17ffe17 	ldw	r5,-8(fp)
 1823398:	e13ffd17 	ldw	r4,-12(fp)
 182339c:	18230080 	call	1823008 <etharp_output_to_arp_index>
 18233a0:	00001206 	br	18233ec <etharp_output+0x2d8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 18233a4:	e0bffb03 	ldbu	r2,-20(fp)
 18233a8:	10800044 	addi	r2,r2,1
 18233ac:	e0bffb05 	stb	r2,-20(fp)
 18233b0:	e0bffb07 	ldb	r2,-20(fp)
 18233b4:	10800650 	cmplti	r2,r2,25
 18233b8:	103fd61e 	bne	r2,zero,1823314 <__ram_exceptions_end+0xff813024>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 18233bc:	e1bffe17 	ldw	r6,-8(fp)
 18233c0:	e17ffa17 	ldw	r5,-24(fp)
 18233c4:	e13ffd17 	ldw	r4,-12(fp)
 18233c8:	18234000 	call	1823400 <etharp_query>
 18233cc:	00000706 	br	18233ec <etharp_output+0x2d8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 18233d0:	e0bffd17 	ldw	r2,-12(fp)
 18233d4:	10800cc4 	addi	r2,r2,51
 18233d8:	e1fff917 	ldw	r7,-28(fp)
 18233dc:	100d883a 	mov	r6,r2
 18233e0:	e17ffe17 	ldw	r5,-8(fp)
 18233e4:	e13ffd17 	ldw	r4,-12(fp)
 18233e8:	18227c80 	call	18227c8 <etharp_send_ip>
}
 18233ec:	e037883a 	mov	sp,fp
 18233f0:	dfc00117 	ldw	ra,4(sp)
 18233f4:	df000017 	ldw	fp,0(sp)
 18233f8:	dec00204 	addi	sp,sp,8
 18233fc:	f800283a 	ret

01823400 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 1823400:	defff404 	addi	sp,sp,-48
 1823404:	dfc00b15 	stw	ra,44(sp)
 1823408:	df000a15 	stw	fp,40(sp)
 182340c:	df000a04 	addi	fp,sp,40
 1823410:	e13ffd15 	stw	r4,-12(fp)
 1823414:	e17ffe15 	stw	r5,-8(fp)
 1823418:	e1bfff15 	stw	r6,-4(fp)
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 182341c:	e0bffd17 	ldw	r2,-12(fp)
 1823420:	10800cc4 	addi	r2,r2,51
 1823424:	e0bffa15 	stw	r2,-24(fp)
  err_t result = ERR_MEM;
 1823428:	00bfffc4 	movi	r2,-1
 182342c:	e0bff605 	stb	r2,-40(fp)
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 1823430:	e0bffe17 	ldw	r2,-8(fp)
 1823434:	10800017 	ldw	r2,0(r2)
 1823438:	e17ffd17 	ldw	r5,-12(fp)
 182343c:	1009883a 	mov	r4,r2
 1823440:	18189b80 	call	18189b8 <ip4_addr_isbroadcast>
 1823444:	10803fcc 	andi	r2,r2,255
 1823448:	10000a1e 	bne	r2,zero,1823474 <etharp_query+0x74>
      ip_addr_ismulticast(ipaddr) ||
 182344c:	e0bffe17 	ldw	r2,-8(fp)
 1823450:	10800017 	ldw	r2,0(r2)
 1823454:	10803c0c 	andi	r2,r2,240
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 1823458:	10803820 	cmpeqi	r2,r2,224
 182345c:	1000051e 	bne	r2,zero,1823474 <etharp_query+0x74>
      ip_addr_ismulticast(ipaddr) ||
 1823460:	e0bffe17 	ldw	r2,-8(fp)
 1823464:	10000326 	beq	r2,zero,1823474 <etharp_query+0x74>
      ip_addr_isany(ipaddr)) {
 1823468:	e0bffe17 	ldw	r2,-8(fp)
 182346c:	10800017 	ldw	r2,0(r2)
 1823470:	1000021e 	bne	r2,zero,182347c <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 1823474:	00bffc84 	movi	r2,-14
 1823478:	0000cd06 	br	18237b0 <etharp_query+0x3b0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 182347c:	01400044 	movi	r5,1
 1823480:	e13ffe17 	ldw	r4,-8(fp)
 1823484:	18224b00 	call	18224b0 <etharp_find_entry>
 1823488:	e0bffb05 	stb	r2,-20(fp)

  /* could not find or create entry? */
  if (i < 0) {
 182348c:	e0bffb07 	ldb	r2,-20(fp)
 1823490:	10000b0e 	bge	r2,zero,18234c0 <etharp_query+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 1823494:	e0bfff17 	ldw	r2,-4(fp)
 1823498:	10000726 	beq	r2,zero,18234b8 <etharp_query+0xb8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 182349c:	00806134 	movhi	r2,388
 18234a0:	109e7504 	addi	r2,r2,31188
 18234a4:	10801217 	ldw	r2,72(r2)
 18234a8:	10c00044 	addi	r3,r2,1
 18234ac:	00806134 	movhi	r2,388
 18234b0:	109e7504 	addi	r2,r2,31188
 18234b4:	10c01215 	stw	r3,72(r2)
    }
    return (err_t)i;
 18234b8:	e0bffb03 	ldbu	r2,-20(fp)
 18234bc:	0000bc06 	br	18237b0 <etharp_query+0x3b0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 18234c0:	e0fffb07 	ldb	r3,-20(fp)
 18234c4:	00806134 	movhi	r2,388
 18234c8:	109cd004 	addi	r2,r2,29504
 18234cc:	18c00524 	muli	r3,r3,20
 18234d0:	10c5883a 	add	r2,r2,r3
 18234d4:	10800484 	addi	r2,r2,18
 18234d8:	10800003 	ldbu	r2,0(r2)
 18234dc:	10803fcc 	andi	r2,r2,255
 18234e0:	1000081e 	bne	r2,zero,1823504 <etharp_query+0x104>
    arp_table[i].state = ETHARP_STATE_PENDING;
 18234e4:	e0fffb07 	ldb	r3,-20(fp)
 18234e8:	00806134 	movhi	r2,388
 18234ec:	109cd004 	addi	r2,r2,29504
 18234f0:	18c00524 	muli	r3,r3,20
 18234f4:	10c5883a 	add	r2,r2,r3
 18234f8:	10800484 	addi	r2,r2,18
 18234fc:	00c00044 	movi	r3,1
 1823500:	10c00005 	stb	r3,0(r2)
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 1823504:	e0fffb07 	ldb	r3,-20(fp)
 1823508:	00806134 	movhi	r2,388
 182350c:	109cd004 	addi	r2,r2,29504
 1823510:	18c00524 	muli	r3,r3,20
 1823514:	10c5883a 	add	r2,r2,r3
 1823518:	10800484 	addi	r2,r2,18
 182351c:	10800003 	ldbu	r2,0(r2)
 1823520:	10803fcc 	andi	r2,r2,255
 1823524:	10800060 	cmpeqi	r2,r2,1
 1823528:	1000021e 	bne	r2,zero,1823534 <etharp_query+0x134>
 182352c:	e0bfff17 	ldw	r2,-4(fp)
 1823530:	1000081e 	bne	r2,zero,1823554 <etharp_query+0x154>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 1823534:	e17ffe17 	ldw	r5,-8(fp)
 1823538:	e13ffd17 	ldw	r4,-12(fp)
 182353c:	1823a100 	call	1823a10 <etharp_request>
 1823540:	e0bff605 	stb	r2,-40(fp)
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 1823544:	e0bfff17 	ldw	r2,-4(fp)
 1823548:	1000021e 	bne	r2,zero,1823554 <etharp_query+0x154>
      return result;
 182354c:	e0bff603 	ldbu	r2,-40(fp)
 1823550:	00009706 	br	18237b0 <etharp_query+0x3b0>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 1823554:	e0fffb07 	ldb	r3,-20(fp)
 1823558:	00806134 	movhi	r2,388
 182355c:	109cd004 	addi	r2,r2,29504
 1823560:	18c00524 	muli	r3,r3,20
 1823564:	10c5883a 	add	r2,r2,r3
 1823568:	10800484 	addi	r2,r2,18
 182356c:	10800003 	ldbu	r2,0(r2)
 1823570:	10803fcc 	andi	r2,r2,255
 1823574:	108000b0 	cmpltui	r2,r2,2
 1823578:	1000161e 	bne	r2,zero,18235d4 <etharp_query+0x1d4>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 182357c:	e0bffd17 	ldw	r2,-12(fp)
 1823580:	10000726 	beq	r2,zero,18235a0 <etharp_query+0x1a0>
 1823584:	e0bffd17 	ldw	r2,-12(fp)
 1823588:	10801017 	ldw	r2,64(r2)
 182358c:	10000426 	beq	r2,zero,18235a0 <etharp_query+0x1a0>
 1823590:	e0bffd17 	ldw	r2,-12(fp)
 1823594:	10801017 	ldw	r2,64(r2)
 1823598:	e0fffb03 	ldbu	r3,-20(fp)
 182359c:	10c00005 	stb	r3,0(r2)
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 18235a0:	e0bffb07 	ldb	r2,-20(fp)
 18235a4:	10800524 	muli	r2,r2,20
 18235a8:	10c00304 	addi	r3,r2,12
 18235ac:	00806134 	movhi	r2,388
 18235b0:	109cd004 	addi	r2,r2,29504
 18235b4:	1885883a 	add	r2,r3,r2
 18235b8:	100f883a 	mov	r7,r2
 18235bc:	e1bffa17 	ldw	r6,-24(fp)
 18235c0:	e17fff17 	ldw	r5,-4(fp)
 18235c4:	e13ffd17 	ldw	r4,-12(fp)
 18235c8:	18227c80 	call	18227c8 <etharp_send_ip>
 18235cc:	e0bff605 	stb	r2,-40(fp)
 18235d0:	00007606 	br	18237ac <etharp_query+0x3ac>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 18235d4:	e0fffb07 	ldb	r3,-20(fp)
 18235d8:	00806134 	movhi	r2,388
 18235dc:	109cd004 	addi	r2,r2,29504
 18235e0:	18c00524 	muli	r3,r3,20
 18235e4:	10c5883a 	add	r2,r2,r3
 18235e8:	10800484 	addi	r2,r2,18
 18235ec:	10800003 	ldbu	r2,0(r2)
 18235f0:	10803fcc 	andi	r2,r2,255
 18235f4:	10800058 	cmpnei	r2,r2,1
 18235f8:	10006c1e 	bne	r2,zero,18237ac <etharp_query+0x3ac>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 18235fc:	e03ff815 	stw	zero,-32(fp)
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 1823600:	e0bfff17 	ldw	r2,-4(fp)
 1823604:	e0bff715 	stw	r2,-36(fp)
    while (p) {
 1823608:	00000b06 	br	1823638 <etharp_query+0x238>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
 182360c:	e0bff717 	ldw	r2,-36(fp)
 1823610:	10800303 	ldbu	r2,12(r2)
 1823614:	10803fcc 	andi	r2,r2,255
 1823618:	10800060 	cmpeqi	r2,r2,1
 182361c:	1000031e 	bne	r2,zero,182362c <etharp_query+0x22c>
        copy_needed = 1;
 1823620:	00800044 	movi	r2,1
 1823624:	e0bff815 	stw	r2,-32(fp)
        break;
 1823628:	00000506 	br	1823640 <etharp_query+0x240>
      }
      p = p->next;
 182362c:	e0bff717 	ldw	r2,-36(fp)
 1823630:	10800017 	ldw	r2,0(r2)
 1823634:	e0bff715 	stw	r2,-36(fp)
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
 1823638:	e0bff717 	ldw	r2,-36(fp)
 182363c:	103ff31e 	bne	r2,zero,182360c <__ram_exceptions_end+0xff81331c>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if(copy_needed) {
 1823640:	e0bff817 	ldw	r2,-32(fp)
 1823644:	10001526 	beq	r2,zero,182369c <etharp_query+0x29c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 1823648:	e0bff717 	ldw	r2,-36(fp)
 182364c:	1080020b 	ldhu	r2,8(r2)
 1823650:	10bfffcc 	andi	r2,r2,65535
 1823654:	000d883a 	mov	r6,zero
 1823658:	100b883a 	mov	r5,r2
 182365c:	010000c4 	movi	r4,3
 1823660:	1819aa40 	call	1819aa4 <pbuf_alloc>
 1823664:	e0bff715 	stw	r2,-36(fp)
      if(p != NULL) {
 1823668:	e0bff717 	ldw	r2,-36(fp)
 182366c:	10000f26 	beq	r2,zero,18236ac <etharp_query+0x2ac>
        if (pbuf_copy(p, q) != ERR_OK) {
 1823670:	e17fff17 	ldw	r5,-4(fp)
 1823674:	e13ff717 	ldw	r4,-36(fp)
 1823678:	181a5cc0 	call	181a5cc <pbuf_copy>
 182367c:	10803fcc 	andi	r2,r2,255
 1823680:	1080201c 	xori	r2,r2,128
 1823684:	10bfe004 	addi	r2,r2,-128
 1823688:	10000826 	beq	r2,zero,18236ac <etharp_query+0x2ac>
          pbuf_free(p);
 182368c:	e13ff717 	ldw	r4,-36(fp)
 1823690:	181a22c0 	call	181a22c <pbuf_free>
          p = NULL;
 1823694:	e03ff715 	stw	zero,-36(fp)
 1823698:	00000406 	br	18236ac <etharp_query+0x2ac>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 182369c:	e0bfff17 	ldw	r2,-4(fp)
 18236a0:	e0bff715 	stw	r2,-36(fp)
      pbuf_ref(p);
 18236a4:	e13ff717 	ldw	r4,-36(fp)
 18236a8:	181a3b40 	call	181a3b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 18236ac:	e0bff717 	ldw	r2,-36(fp)
 18236b0:	10003526 	beq	r2,zero,1823788 <etharp_query+0x388>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 18236b4:	00806134 	movhi	r2,388
 18236b8:	108bcc84 	addi	r2,r2,12082
 18236bc:	1080058b 	ldhu	r2,22(r2)
 18236c0:	10bfffcc 	andi	r2,r2,65535
 18236c4:	1009883a 	mov	r4,r2
 18236c8:	183c5000 	call	183c500 <malloc>
 18236cc:	e0bffc15 	stw	r2,-16(fp)
      if (new_entry != NULL) {
 18236d0:	e0bffc17 	ldw	r2,-16(fp)
 18236d4:	10002726 	beq	r2,zero,1823774 <etharp_query+0x374>
        new_entry->next = 0;
 18236d8:	e0bffc17 	ldw	r2,-16(fp)
 18236dc:	10000015 	stw	zero,0(r2)
        new_entry->p = p;
 18236e0:	e0bffc17 	ldw	r2,-16(fp)
 18236e4:	e0fff717 	ldw	r3,-36(fp)
 18236e8:	10c00115 	stw	r3,4(r2)
        if(arp_table[i].q != NULL) {
 18236ec:	e0fffb07 	ldb	r3,-20(fp)
 18236f0:	00806134 	movhi	r2,388
 18236f4:	109cd004 	addi	r2,r2,29504
 18236f8:	18c00524 	muli	r3,r3,20
 18236fc:	10c5883a 	add	r2,r2,r3
 1823700:	10800017 	ldw	r2,0(r2)
 1823704:	10001226 	beq	r2,zero,1823750 <etharp_query+0x350>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 1823708:	e0fffb07 	ldb	r3,-20(fp)
 182370c:	00806134 	movhi	r2,388
 1823710:	109cd004 	addi	r2,r2,29504
 1823714:	18c00524 	muli	r3,r3,20
 1823718:	10c5883a 	add	r2,r2,r3
 182371c:	10800017 	ldw	r2,0(r2)
 1823720:	e0bff915 	stw	r2,-28(fp)
          while (r->next != NULL) {
 1823724:	00000306 	br	1823734 <etharp_query+0x334>
            r = r->next;
 1823728:	e0bff917 	ldw	r2,-28(fp)
 182372c:	10800017 	ldw	r2,0(r2)
 1823730:	e0bff915 	stw	r2,-28(fp)
        new_entry->p = p;
        if(arp_table[i].q != NULL) {
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
          while (r->next != NULL) {
 1823734:	e0bff917 	ldw	r2,-28(fp)
 1823738:	10800017 	ldw	r2,0(r2)
 182373c:	103ffa1e 	bne	r2,zero,1823728 <__ram_exceptions_end+0xff813438>
            r = r->next;
          }
          r->next = new_entry;
 1823740:	e0bff917 	ldw	r2,-28(fp)
 1823744:	e0fffc17 	ldw	r3,-16(fp)
 1823748:	10c00015 	stw	r3,0(r2)
 182374c:	00000706 	br	182376c <etharp_query+0x36c>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 1823750:	e0fffb07 	ldb	r3,-20(fp)
 1823754:	00806134 	movhi	r2,388
 1823758:	109cd004 	addi	r2,r2,29504
 182375c:	18c00524 	muli	r3,r3,20
 1823760:	10c5883a 	add	r2,r2,r3
 1823764:	e0fffc17 	ldw	r3,-16(fp)
 1823768:	10c00015 	stw	r3,0(r2)
        }
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
 182376c:	e03ff605 	stb	zero,-40(fp)
 1823770:	00000e06 	br	18237ac <etharp_query+0x3ac>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 1823774:	e13ff717 	ldw	r4,-36(fp)
 1823778:	181a22c0 	call	181a22c <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 182377c:	00bfffc4 	movi	r2,-1
 1823780:	e0bff605 	stb	r2,-40(fp)
 1823784:	00000906 	br	18237ac <etharp_query+0x3ac>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 1823788:	00806134 	movhi	r2,388
 182378c:	109e7504 	addi	r2,r2,31188
 1823790:	10801217 	ldw	r2,72(r2)
 1823794:	10c00044 	addi	r3,r2,1
 1823798:	00806134 	movhi	r2,388
 182379c:	109e7504 	addi	r2,r2,31188
 18237a0:	10c01215 	stw	r3,72(r2)
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 18237a4:	00bfffc4 	movi	r2,-1
 18237a8:	e0bff605 	stb	r2,-40(fp)
    }
  }
  return result;
 18237ac:	e0bff603 	ldbu	r2,-40(fp)
}
 18237b0:	e037883a 	mov	sp,fp
 18237b4:	dfc00117 	ldw	ra,4(sp)
 18237b8:	df000017 	ldw	fp,0(sp)
 18237bc:	dec00204 	addi	sp,sp,8
 18237c0:	f800283a 	ret

018237c4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
 18237c4:	defff504 	addi	sp,sp,-44
 18237c8:	dfc00a15 	stw	ra,40(sp)
 18237cc:	df000915 	stw	fp,36(sp)
 18237d0:	df000904 	addi	fp,sp,36
 18237d4:	e13ffb15 	stw	r4,-20(fp)
 18237d8:	e17ffc15 	stw	r5,-16(fp)
 18237dc:	e1bffd15 	stw	r6,-12(fp)
 18237e0:	e1fffe15 	stw	r7,-8(fp)
 18237e4:	e0800517 	ldw	r2,20(fp)
 18237e8:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  err_t result = ERR_OK;
 18237ec:	e03ff705 	stb	zero,-36(fp)
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 18237f0:	000d883a 	mov	r6,zero
 18237f4:	01400b04 	movi	r5,44
 18237f8:	010000c4 	movi	r4,3
 18237fc:	1819aa40 	call	1819aa4 <pbuf_alloc>
 1823800:	e0bff815 	stw	r2,-32(fp)
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 1823804:	e0bff817 	ldw	r2,-32(fp)
 1823808:	1000091e 	bne	r2,zero,1823830 <etharp_raw+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 182380c:	00806134 	movhi	r2,388
 1823810:	109e7504 	addi	r2,r2,31188
 1823814:	10801217 	ldw	r2,72(r2)
 1823818:	10c00044 	addi	r3,r2,1
 182381c:	00806134 	movhi	r2,388
 1823820:	109e7504 	addi	r2,r2,31188
 1823824:	10c01215 	stw	r3,72(r2)
    return ERR_MEM;
 1823828:	00bfffc4 	movi	r2,-1
 182382c:	00007306 	br	18239fc <etharp_raw+0x238>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
 1823830:	e0bff817 	ldw	r2,-32(fp)
 1823834:	10800117 	ldw	r2,4(r2)
 1823838:	e0bff915 	stw	r2,-28(fp)
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 182383c:	e0bff917 	ldw	r2,-28(fp)
 1823840:	10800404 	addi	r2,r2,16
 1823844:	e0bffa15 	stw	r2,-24(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 1823848:	e0bfff0b 	ldhu	r2,-4(fp)
 182384c:	1004d23a 	srli	r2,r2,8
 1823850:	1007883a 	mov	r3,r2
 1823854:	e0bfff0b 	ldhu	r2,-4(fp)
 1823858:	1004923a 	slli	r2,r2,8
 182385c:	1884b03a 	or	r2,r3,r2
 1823860:	100d883a 	mov	r6,r2
 1823864:	e0bffa17 	ldw	r2,-24(fp)
 1823868:	30ffffcc 	andi	r3,r6,65535
 182386c:	19403fcc 	andi	r5,r3,255
 1823870:	10c00183 	ldbu	r3,6(r2)
 1823874:	1806703a 	and	r3,r3,zero
 1823878:	1809883a 	mov	r4,r3
 182387c:	2807883a 	mov	r3,r5
 1823880:	20c6b03a 	or	r3,r4,r3
 1823884:	10c00185 	stb	r3,6(r2)
 1823888:	30ffffcc 	andi	r3,r6,65535
 182388c:	1806d23a 	srli	r3,r3,8
 1823890:	197fffcc 	andi	r5,r3,65535
 1823894:	10c001c3 	ldbu	r3,7(r2)
 1823898:	1806703a 	and	r3,r3,zero
 182389c:	1809883a 	mov	r4,r3
 18238a0:	2807883a 	mov	r3,r5
 18238a4:	20c6b03a 	or	r3,r4,r3
 18238a8:	10c001c5 	stb	r3,7(r2)
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 18238ac:	e0bffa17 	ldw	r2,-24(fp)
 18238b0:	10800204 	addi	r2,r2,8
 18238b4:	01800184 	movi	r6,6
 18238b8:	e17ffe17 	ldw	r5,-8(fp)
 18238bc:	1009883a 	mov	r4,r2
 18238c0:	1805f980 	call	1805f98 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 18238c4:	e0bffa17 	ldw	r2,-24(fp)
 18238c8:	10800484 	addi	r2,r2,18
 18238cc:	01800184 	movi	r6,6
 18238d0:	e1400317 	ldw	r5,12(fp)
 18238d4:	1009883a 	mov	r4,r2
 18238d8:	1805f980 	call	1805f98 <memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 18238dc:	e0bff917 	ldw	r2,-28(fp)
 18238e0:	10800084 	addi	r2,r2,2
 18238e4:	01800184 	movi	r6,6
 18238e8:	e17ffd17 	ldw	r5,-12(fp)
 18238ec:	1009883a 	mov	r4,r2
 18238f0:	1805f980 	call	1805f98 <memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 18238f4:	e0bff917 	ldw	r2,-28(fp)
 18238f8:	10800204 	addi	r2,r2,8
 18238fc:	01800184 	movi	r6,6
 1823900:	e17ffc17 	ldw	r5,-16(fp)
 1823904:	1009883a 	mov	r4,r2
 1823908:	1805f980 	call	1805f98 <memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 182390c:	e0bffa17 	ldw	r2,-24(fp)
 1823910:	10800384 	addi	r2,r2,14
 1823914:	01800104 	movi	r6,4
 1823918:	e1400217 	ldw	r5,8(fp)
 182391c:	1009883a 	mov	r4,r2
 1823920:	1805f980 	call	1805f98 <memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 1823924:	e0bffa17 	ldw	r2,-24(fp)
 1823928:	10800604 	addi	r2,r2,24
 182392c:	01800104 	movi	r6,4
 1823930:	e1400417 	ldw	r5,16(fp)
 1823934:	1009883a 	mov	r4,r2
 1823938:	1805f980 	call	1805f98 <memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 182393c:	e0bffa17 	ldw	r2,-24(fp)
 1823940:	10c00003 	ldbu	r3,0(r2)
 1823944:	1806703a 	and	r3,r3,zero
 1823948:	10c00005 	stb	r3,0(r2)
 182394c:	10c00043 	ldbu	r3,1(r2)
 1823950:	1806703a 	and	r3,r3,zero
 1823954:	18c00054 	ori	r3,r3,1
 1823958:	10c00045 	stb	r3,1(r2)
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 182395c:	e0bffa17 	ldw	r2,-24(fp)
 1823960:	10c00083 	ldbu	r3,2(r2)
 1823964:	1806703a 	and	r3,r3,zero
 1823968:	18c00214 	ori	r3,r3,8
 182396c:	10c00085 	stb	r3,2(r2)
 1823970:	10c000c3 	ldbu	r3,3(r2)
 1823974:	1806703a 	and	r3,r3,zero
 1823978:	10c000c5 	stb	r3,3(r2)
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 182397c:	e0bffa17 	ldw	r2,-24(fp)
 1823980:	00c00184 	movi	r3,6
 1823984:	10c00105 	stb	r3,4(r2)
  hdr->protolen = sizeof(ip_addr_t);
 1823988:	e0bffa17 	ldw	r2,-24(fp)
 182398c:	00c00104 	movi	r3,4
 1823990:	10c00145 	stb	r3,5(r2)

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 1823994:	e0bff917 	ldw	r2,-28(fp)
 1823998:	10c00383 	ldbu	r3,14(r2)
 182399c:	1806703a 	and	r3,r3,zero
 18239a0:	18c00214 	ori	r3,r3,8
 18239a4:	10c00385 	stb	r3,14(r2)
 18239a8:	10c003c3 	ldbu	r3,15(r2)
 18239ac:	1806703a 	and	r3,r3,zero
 18239b0:	18c00194 	ori	r3,r3,6
 18239b4:	10c003c5 	stb	r3,15(r2)
  /* send ARP query */
  result = netif->linkoutput(netif, p);
 18239b8:	e0bffb17 	ldw	r2,-20(fp)
 18239bc:	10800617 	ldw	r2,24(r2)
 18239c0:	e17ff817 	ldw	r5,-32(fp)
 18239c4:	e13ffb17 	ldw	r4,-20(fp)
 18239c8:	103ee83a 	callr	r2
 18239cc:	e0bff705 	stb	r2,-36(fp)
  ETHARP_STATS_INC(etharp.xmit);
 18239d0:	00806134 	movhi	r2,388
 18239d4:	109e7504 	addi	r2,r2,31188
 18239d8:	10800c17 	ldw	r2,48(r2)
 18239dc:	10c00044 	addi	r3,r2,1
 18239e0:	00806134 	movhi	r2,388
 18239e4:	109e7504 	addi	r2,r2,31188
 18239e8:	10c00c15 	stw	r3,48(r2)
  /* free ARP query packet */
  pbuf_free(p);
 18239ec:	e13ff817 	ldw	r4,-32(fp)
 18239f0:	181a22c0 	call	181a22c <pbuf_free>
  p = NULL;
 18239f4:	e03ff815 	stw	zero,-32(fp)
  /* could not allocate pbuf for ARP request */

  return result;
 18239f8:	e0bff703 	ldbu	r2,-36(fp)
}
 18239fc:	e037883a 	mov	sp,fp
 1823a00:	dfc00117 	ldw	ra,4(sp)
 1823a04:	df000017 	ldw	fp,0(sp)
 1823a08:	dec00204 	addi	sp,sp,8
 1823a0c:	f800283a 	ret

01823a10 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 1823a10:	defff804 	addi	sp,sp,-32
 1823a14:	dfc00715 	stw	ra,28(sp)
 1823a18:	df000615 	stw	fp,24(sp)
 1823a1c:	df000604 	addi	fp,sp,24
 1823a20:	e13ffe15 	stw	r4,-8(fp)
 1823a24:	e17fff15 	stw	r5,-4(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 1823a28:	e0bffe17 	ldw	r2,-8(fp)
 1823a2c:	11000cc4 	addi	r4,r2,51
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
 1823a30:	e0bffe17 	ldw	r2,-8(fp)
 1823a34:	11400cc4 	addi	r5,r2,51
 1823a38:	e0bffe17 	ldw	r2,-8(fp)
 1823a3c:	10800104 	addi	r2,r2,4
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 1823a40:	00c00044 	movi	r3,1
 1823a44:	d8c00315 	stw	r3,12(sp)
 1823a48:	e0ffff17 	ldw	r3,-4(fp)
 1823a4c:	d8c00215 	stw	r3,8(sp)
 1823a50:	d0e01504 	addi	r3,gp,-32684
 1823a54:	d8c00115 	stw	r3,4(sp)
 1823a58:	d8800015 	stw	r2,0(sp)
 1823a5c:	280f883a 	mov	r7,r5
 1823a60:	d1a01384 	addi	r6,gp,-32690
 1823a64:	200b883a 	mov	r5,r4
 1823a68:	e13ffe17 	ldw	r4,-8(fp)
 1823a6c:	18237c40 	call	18237c4 <etharp_raw>
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
 1823a70:	e037883a 	mov	sp,fp
 1823a74:	dfc00117 	ldw	ra,4(sp)
 1823a78:	df000017 	ldw	fp,0(sp)
 1823a7c:	dec00204 	addi	sp,sp,8
 1823a80:	f800283a 	ret

01823a84 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 1823a84:	defff904 	addi	sp,sp,-28
 1823a88:	dfc00615 	stw	ra,24(sp)
 1823a8c:	df000515 	stw	fp,20(sp)
 1823a90:	df000504 	addi	fp,sp,20
 1823a94:	e13ffe15 	stw	r4,-8(fp)
 1823a98:	e17fff15 	stw	r5,-4(fp)
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 1823a9c:	00800404 	movi	r2,16
 1823aa0:	e0bffb0d 	sth	r2,-20(fp)
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 1823aa4:	e0bffe17 	ldw	r2,-8(fp)
 1823aa8:	1080028b 	ldhu	r2,10(r2)
 1823aac:	10bfffcc 	andi	r2,r2,65535
 1823ab0:	10800468 	cmpgeui	r2,r2,17
 1823ab4:	10000f1e 	bne	r2,zero,1823af4 <ethernet_input+0x70>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 1823ab8:	00806134 	movhi	r2,388
 1823abc:	109e7504 	addi	r2,r2,31188
 1823ac0:	10801417 	ldw	r2,80(r2)
 1823ac4:	10c00044 	addi	r3,r2,1
 1823ac8:	00806134 	movhi	r2,388
 1823acc:	109e7504 	addi	r2,r2,31188
 1823ad0:	10c01415 	stw	r3,80(r2)
    ETHARP_STATS_INC(etharp.drop);
 1823ad4:	00806134 	movhi	r2,388
 1823ad8:	109e7504 	addi	r2,r2,31188
 1823adc:	10800f17 	ldw	r2,60(r2)
 1823ae0:	10c00044 	addi	r3,r2,1
 1823ae4:	00806134 	movhi	r2,388
 1823ae8:	109e7504 	addi	r2,r2,31188
 1823aec:	10c00f15 	stw	r3,60(r2)
    goto free_and_return;
 1823af0:	00006e06 	br	1823cac <ethernet_input+0x228>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 1823af4:	e0bffe17 	ldw	r2,-8(fp)
 1823af8:	10800117 	ldw	r2,4(r2)
 1823afc:	e0bffc15 	stw	r2,-16(fp)
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 1823b00:	e0bffc17 	ldw	r2,-16(fp)
 1823b04:	10c00383 	ldbu	r3,14(r2)
 1823b08:	108003c3 	ldbu	r2,15(r2)
 1823b0c:	1004923a 	slli	r2,r2,8
 1823b10:	10c4b03a 	or	r2,r2,r3
 1823b14:	e0bffd0d 	sth	r2,-12(fp)

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 1823b18:	e0bffc17 	ldw	r2,-16(fp)
 1823b1c:	10800083 	ldbu	r2,2(r2)
 1823b20:	10803fcc 	andi	r2,r2,255
 1823b24:	1080004c 	andi	r2,r2,1
 1823b28:	10002226 	beq	r2,zero,1823bb4 <ethernet_input+0x130>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 1823b2c:	e0bffc17 	ldw	r2,-16(fp)
 1823b30:	10800083 	ldbu	r2,2(r2)
 1823b34:	10803fcc 	andi	r2,r2,255
 1823b38:	10800058 	cmpnei	r2,r2,1
 1823b3c:	1000101e 	bne	r2,zero,1823b80 <ethernet_input+0xfc>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 1823b40:	e0bffc17 	ldw	r2,-16(fp)
 1823b44:	108000c3 	ldbu	r2,3(r2)
 1823b48:	10803fcc 	andi	r2,r2,255
 1823b4c:	1000191e 	bne	r2,zero,1823bb4 <ethernet_input+0x130>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
 1823b50:	e0bffc17 	ldw	r2,-16(fp)
 1823b54:	10800103 	ldbu	r2,4(r2)
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 1823b58:	10803fcc 	andi	r2,r2,255
 1823b5c:	10801798 	cmpnei	r2,r2,94
 1823b60:	1000141e 	bne	r2,zero,1823bb4 <ethernet_input+0x130>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 1823b64:	e0bffe17 	ldw	r2,-8(fp)
 1823b68:	10800343 	ldbu	r2,13(r2)
 1823b6c:	10800414 	ori	r2,r2,16
 1823b70:	1007883a 	mov	r3,r2
 1823b74:	e0bffe17 	ldw	r2,-8(fp)
 1823b78:	10c00345 	stb	r3,13(r2)
 1823b7c:	00000d06 	br	1823bb4 <ethernet_input+0x130>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 1823b80:	e0bffc17 	ldw	r2,-16(fp)
 1823b84:	10800084 	addi	r2,r2,2
 1823b88:	01800184 	movi	r6,6
 1823b8c:	d1601384 	addi	r5,gp,-32690
 1823b90:	1009883a 	mov	r4,r2
 1823b94:	183c5280 	call	183c528 <memcmp>
 1823b98:	1000061e 	bne	r2,zero,1823bb4 <ethernet_input+0x130>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 1823b9c:	e0bffe17 	ldw	r2,-8(fp)
 1823ba0:	10800343 	ldbu	r2,13(r2)
 1823ba4:	10800214 	ori	r2,r2,8
 1823ba8:	1007883a 	mov	r3,r2
 1823bac:	e0bffe17 	ldw	r2,-8(fp)
 1823bb0:	10c00345 	stb	r3,13(r2)
    }
  }

  switch (type) {
 1823bb4:	e0bffd0b 	ldhu	r2,-12(fp)
 1823bb8:	10c00220 	cmpeqi	r3,r2,8
 1823bbc:	1800031e 	bne	r3,zero,1823bcc <ethernet_input+0x148>
 1823bc0:	10818220 	cmpeqi	r2,r2,1544
 1823bc4:	1000171e 	bne	r2,zero,1823c24 <ethernet_input+0x1a0>
 1823bc8:	00002206 	br	1823c54 <ethernet_input+0x1d0>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 1823bcc:	e0bfff17 	ldw	r2,-4(fp)
 1823bd0:	10800e43 	ldbu	r2,57(r2)
 1823bd4:	10803fcc 	andi	r2,r2,255
 1823bd8:	1080080c 	andi	r2,r2,32
 1823bdc:	10002e26 	beq	r2,zero,1823c98 <ethernet_input+0x214>
        goto free_and_return;
      }
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
 1823be0:	e17ffe17 	ldw	r5,-8(fp)
 1823be4:	e13fff17 	ldw	r4,-4(fp)
 1823be8:	1822b940 	call	1822b94 <etharp_ip_input>
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
 1823bec:	e0bffb0b 	ldhu	r2,-20(fp)
 1823bf0:	0085c83a 	sub	r2,zero,r2
 1823bf4:	10bfffcc 	andi	r2,r2,65535
 1823bf8:	10a0001c 	xori	r2,r2,32768
 1823bfc:	10a00004 	addi	r2,r2,-32768
 1823c00:	100b883a 	mov	r5,r2
 1823c04:	e13ffe17 	ldw	r4,-8(fp)
 1823c08:	181a07c0 	call	181a07c <pbuf_header>
 1823c0c:	10803fcc 	andi	r2,r2,255
 1823c10:	1000231e 	bne	r2,zero,1823ca0 <ethernet_input+0x21c>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
 1823c14:	e17fff17 	ldw	r5,-4(fp)
 1823c18:	e13ffe17 	ldw	r4,-8(fp)
 1823c1c:	1831a640 	call	1831a64 <ip_input>
      }
      break;
 1823c20:	00001b06 	br	1823c90 <ethernet_input+0x20c>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 1823c24:	e0bfff17 	ldw	r2,-4(fp)
 1823c28:	10800e43 	ldbu	r2,57(r2)
 1823c2c:	10803fcc 	andi	r2,r2,255
 1823c30:	1080080c 	andi	r2,r2,32
 1823c34:	10001c26 	beq	r2,zero,1823ca8 <ethernet_input+0x224>
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 1823c38:	e0bfff17 	ldw	r2,-4(fp)
 1823c3c:	10800cc4 	addi	r2,r2,51
 1823c40:	e1bffe17 	ldw	r6,-8(fp)
 1823c44:	100b883a 	mov	r5,r2
 1823c48:	e13fff17 	ldw	r4,-4(fp)
 1823c4c:	1822c7c0 	call	1822c7c <etharp_arp_input>
      break;
 1823c50:	00000f06 	br	1823c90 <ethernet_input+0x20c>
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
 1823c54:	00806134 	movhi	r2,388
 1823c58:	109e7504 	addi	r2,r2,31188
 1823c5c:	10801417 	ldw	r2,80(r2)
 1823c60:	10c00044 	addi	r3,r2,1
 1823c64:	00806134 	movhi	r2,388
 1823c68:	109e7504 	addi	r2,r2,31188
 1823c6c:	10c01415 	stw	r3,80(r2)
      ETHARP_STATS_INC(etharp.drop);
 1823c70:	00806134 	movhi	r2,388
 1823c74:	109e7504 	addi	r2,r2,31188
 1823c78:	10800f17 	ldw	r2,60(r2)
 1823c7c:	10c00044 	addi	r3,r2,1
 1823c80:	00806134 	movhi	r2,388
 1823c84:	109e7504 	addi	r2,r2,31188
 1823c88:	10c00f15 	stw	r3,60(r2)
      goto free_and_return;
 1823c8c:	00000706 	br	1823cac <ethernet_input+0x228>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 1823c90:	0005883a 	mov	r2,zero
 1823c94:	00000806 	br	1823cb8 <ethernet_input+0x234>
  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
 1823c98:	0001883a 	nop
 1823c9c:	00000306 	br	1823cac <ethernet_input+0x228>
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
 1823ca0:	0001883a 	nop
 1823ca4:	00000106 	br	1823cac <ethernet_input+0x228>
      }
      break;
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
 1823ca8:	0001883a 	nop
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 1823cac:	e13ffe17 	ldw	r4,-8(fp)
 1823cb0:	181a22c0 	call	181a22c <pbuf_free>
  return ERR_OK;
 1823cb4:	0005883a 	mov	r2,zero
}
 1823cb8:	e037883a 	mov	sp,fp
 1823cbc:	dfc00117 	ldw	ra,4(sp)
 1823cc0:	df000017 	ldw	fp,0(sp)
 1823cc4:	dec00204 	addi	sp,sp,8
 1823cc8:	f800283a 	ret

01823ccc <ping_send>:
#define LWIP_PING_DATA_LENGTH			10

static u16_t ping_seq_num;
static u32_t ping_time;

err_t ping_send(int s, ip_addr_t *addr, u8_t *data, u16_t size) {
 1823ccc:	defff104 	addi	sp,sp,-60
 1823cd0:	dfc00e15 	stw	ra,56(sp)
 1823cd4:	df000d15 	stw	fp,52(sp)
 1823cd8:	df000d04 	addi	fp,sp,52
 1823cdc:	e13ffc15 	stw	r4,-16(fp)
 1823ce0:	e17ffd15 	stw	r5,-12(fp)
 1823ce4:	e1bffe15 	stw	r6,-8(fp)
 1823ce8:	3805883a 	mov	r2,r7
 1823cec:	e0bfff0d 	sth	r2,-4(fp)
	int err;
	struct icmp_echo_hdr *iecho;
	struct sockaddr_in to;
	size_t total_size = sizeof(struct icmp_echo_hdr) + size;
 1823cf0:	e0bfff0b 	ldhu	r2,-4(fp)
 1823cf4:	10800204 	addi	r2,r2,8
 1823cf8:	e0bff515 	stw	r2,-44(fp)

	LWIP_ASSERT("ping_size is too big", total_size <= 0xffff);

	iecho = (struct icmp_echo_hdr *)mem_malloc(total_size);
 1823cfc:	e13ff517 	ldw	r4,-44(fp)
 1823d00:	183c5000 	call	183c500 <malloc>
 1823d04:	e0bff615 	stw	r2,-40(fp)
	if (!iecho)
 1823d08:	e0bff617 	ldw	r2,-40(fp)
 1823d0c:	1000021e 	bne	r2,zero,1823d18 <ping_send+0x4c>
		return ERR_MEM;
 1823d10:	00bfffc4 	movi	r2,-1
 1823d14:	00006f06 	br	1823ed4 <ping_send+0x208>

	// increase ping counter
	++ping_seq_num;
 1823d18:	d0a7fc0b 	ldhu	r2,-24592(gp)
 1823d1c:	10800044 	addi	r2,r2,1
 1823d20:	d0a7fc0d 	sth	r2,-24592(gp)

	// set appropriate data
	ICMPH_TYPE_SET(iecho, ICMP_ECHO);
 1823d24:	e0bff617 	ldw	r2,-40(fp)
 1823d28:	00c00204 	movi	r3,8
 1823d2c:	10c00005 	stb	r3,0(r2)
	ICMPH_CODE_SET(iecho, 0);
 1823d30:	e0bff617 	ldw	r2,-40(fp)
 1823d34:	10000045 	stb	zero,1(r2)
	iecho->chksum = 0;
 1823d38:	e0bff617 	ldw	r2,-40(fp)
 1823d3c:	10c00083 	ldbu	r3,2(r2)
 1823d40:	1806703a 	and	r3,r3,zero
 1823d44:	10c00085 	stb	r3,2(r2)
 1823d48:	10c000c3 	ldbu	r3,3(r2)
 1823d4c:	1806703a 	and	r3,r3,zero
 1823d50:	10c000c5 	stb	r3,3(r2)
	iecho->id     = PING_ID;
 1823d54:	e0bff617 	ldw	r2,-40(fp)
 1823d58:	10c00103 	ldbu	r3,4(r2)
 1823d5c:	1806703a 	and	r3,r3,zero
 1823d60:	1809883a 	mov	r4,r3
 1823d64:	00ffebc4 	movi	r3,-81
 1823d68:	20c6b03a 	or	r3,r4,r3
 1823d6c:	10c00105 	stb	r3,4(r2)
 1823d70:	10c00143 	ldbu	r3,5(r2)
 1823d74:	1806703a 	and	r3,r3,zero
 1823d78:	1809883a 	mov	r4,r3
 1823d7c:	00ffebc4 	movi	r3,-81
 1823d80:	20c6b03a 	or	r3,r4,r3
 1823d84:	10c00145 	stb	r3,5(r2)
	iecho->seqno  = htons(ping_seq_num); // you can't assume that htons is a function if it's a macro with 2 shifts the counter will be incremented 2 times...
 1823d88:	d0a7fc0b 	ldhu	r2,-24592(gp)
 1823d8c:	10bfffcc 	andi	r2,r2,65535
 1823d90:	1004d23a 	srli	r2,r2,8
 1823d94:	1007883a 	mov	r3,r2
 1823d98:	d0a7fc0b 	ldhu	r2,-24592(gp)
 1823d9c:	10bfffcc 	andi	r2,r2,65535
 1823da0:	1004923a 	slli	r2,r2,8
 1823da4:	1884b03a 	or	r2,r3,r2
 1823da8:	100d883a 	mov	r6,r2
 1823dac:	e0bff617 	ldw	r2,-40(fp)
 1823db0:	30ffffcc 	andi	r3,r6,65535
 1823db4:	19403fcc 	andi	r5,r3,255
 1823db8:	10c00183 	ldbu	r3,6(r2)
 1823dbc:	1806703a 	and	r3,r3,zero
 1823dc0:	1809883a 	mov	r4,r3
 1823dc4:	2807883a 	mov	r3,r5
 1823dc8:	20c6b03a 	or	r3,r4,r3
 1823dcc:	10c00185 	stb	r3,6(r2)
 1823dd0:	30ffffcc 	andi	r3,r6,65535
 1823dd4:	1806d23a 	srli	r3,r3,8
 1823dd8:	197fffcc 	andi	r5,r3,65535
 1823ddc:	10c001c3 	ldbu	r3,7(r2)
 1823de0:	1806703a 	and	r3,r3,zero
 1823de4:	1809883a 	mov	r4,r3
 1823de8:	2807883a 	mov	r3,r5
 1823dec:	20c6b03a 	or	r3,r4,r3
 1823df0:	10c001c5 	stb	r3,7(r2)

	// fill additional data in the buffer
	memcpy((((char*)iecho) + sizeof(struct icmp_echo_hdr)), data, size);
 1823df4:	e0bff617 	ldw	r2,-40(fp)
 1823df8:	10800204 	addi	r2,r2,8
 1823dfc:	e0ffff0b 	ldhu	r3,-4(fp)
 1823e00:	180d883a 	mov	r6,r3
 1823e04:	e17ffe17 	ldw	r5,-8(fp)
 1823e08:	1009883a 	mov	r4,r2
 1823e0c:	1805f980 	call	1805f98 <memcpy>

	// calculate the checksum
	iecho->chksum = inet_chksum(iecho, total_size);
 1823e10:	e0bff517 	ldw	r2,-44(fp)
 1823e14:	10bfffcc 	andi	r2,r2,65535
 1823e18:	100b883a 	mov	r5,r2
 1823e1c:	e13ff617 	ldw	r4,-40(fp)
 1823e20:	18317cc0 	call	18317cc <inet_chksum>
 1823e24:	100d883a 	mov	r6,r2
 1823e28:	e0bff617 	ldw	r2,-40(fp)
 1823e2c:	30ffffcc 	andi	r3,r6,65535
 1823e30:	19403fcc 	andi	r5,r3,255
 1823e34:	10c00083 	ldbu	r3,2(r2)
 1823e38:	1806703a 	and	r3,r3,zero
 1823e3c:	1809883a 	mov	r4,r3
 1823e40:	2807883a 	mov	r3,r5
 1823e44:	20c6b03a 	or	r3,r4,r3
 1823e48:	10c00085 	stb	r3,2(r2)
 1823e4c:	30ffffcc 	andi	r3,r6,65535
 1823e50:	1806d23a 	srli	r3,r3,8
 1823e54:	197fffcc 	andi	r5,r3,65535
 1823e58:	10c000c3 	ldbu	r3,3(r2)
 1823e5c:	1806703a 	and	r3,r3,zero
 1823e60:	1809883a 	mov	r4,r3
 1823e64:	2807883a 	mov	r3,r5
 1823e68:	20c6b03a 	or	r3,r4,r3
 1823e6c:	10c000c5 	stb	r3,3(r2)

	// set the appropriate ethernet header
	to.sin_len = sizeof(to);
 1823e70:	00800404 	movi	r2,16
 1823e74:	e0bff805 	stb	r2,-32(fp)
	to.sin_family = AF_INET;
 1823e78:	00800084 	movi	r2,2
 1823e7c:	e0bff845 	stb	r2,-31(fp)
	inet_addr_from_ipaddr(&to.sin_addr, addr);
 1823e80:	e0bffd17 	ldw	r2,-12(fp)
 1823e84:	10800017 	ldw	r2,0(r2)
 1823e88:	e0bff915 	stw	r2,-28(fp)
	//to.sin_addr.s_addr = addr->addr;

	// send the packet
	err = sendto(s, iecho, total_size, 0, (struct sockaddr*)&to, sizeof(to));
 1823e8c:	00800404 	movi	r2,16
 1823e90:	d8800115 	stw	r2,4(sp)
 1823e94:	e0bff804 	addi	r2,fp,-32
 1823e98:	d8800015 	stw	r2,0(sp)
 1823e9c:	000f883a 	mov	r7,zero
 1823ea0:	e1bff517 	ldw	r6,-44(fp)
 1823ea4:	e17ff617 	ldw	r5,-40(fp)
 1823ea8:	e13ffc17 	ldw	r4,-16(fp)
 1823eac:	182e07c0 	call	182e07c <lwip_sendto>
 1823eb0:	e0bff715 	stw	r2,-36(fp)
	if (err < 0)
		LWIP_DEBUGF(PING_DEBUG, ("Couldn't send ICMP Ping packet!\n"));

	// clear the ping object
	mem_free(iecho);
 1823eb4:	e13ff617 	ldw	r4,-40(fp)
 1823eb8:	183c5140 	call	183c514 <free>

	// how did it turn out?
	return ((err == (int)total_size) ? ERR_OK : ERR_VAL);
 1823ebc:	e0bff517 	ldw	r2,-44(fp)
 1823ec0:	e0fff717 	ldw	r3,-36(fp)
 1823ec4:	1880021e 	bne	r3,r2,1823ed0 <ping_send+0x204>
 1823ec8:	0005883a 	mov	r2,zero
 1823ecc:	00000106 	br	1823ed4 <ping_send+0x208>
 1823ed0:	00bffe84 	movi	r2,-6
}
 1823ed4:	e037883a 	mov	sp,fp
 1823ed8:	dfc00117 	ldw	ra,4(sp)
 1823edc:	df000017 	ldw	fp,0(sp)
 1823ee0:	dec00204 	addi	sp,sp,8
 1823ee4:	f800283a 	ret

01823ee8 <ping_recv>:

int ping_recv(int s)
{
 1823ee8:	deffe204 	addi	sp,sp,-120
 1823eec:	dfc01d15 	stw	ra,116(sp)
 1823ef0:	df001c15 	stw	fp,112(sp)
 1823ef4:	df001c04 	addi	fp,sp,112
 1823ef8:	e13fff15 	stw	r4,-4(fp)
	struct sockaddr_in from;
	struct ip_hdr *iphdr;
	struct icmp_echo_hdr *iecho;

	// remember that there is a one minute timeout on on the receive function ;)
	while ((len = recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*)&from, (socklen_t*)&fromlen)) > 0) {
 1823efc:	00002b06 	br	1823fac <ping_recv+0xc4>
		if (len >= (int)(sizeof(struct ip_hdr)+sizeof(struct icmp_echo_hdr))) {
 1823f00:	e0bfe617 	ldw	r2,-104(fp)
 1823f04:	10800710 	cmplti	r2,r2,28
 1823f08:	1000281e 	bne	r2,zero,1823fac <ping_recv+0xc4>
			ip_addr_t fromaddr;

			inet_addr_to_ipaddr(&fromaddr, &from.sin_addr);
 1823f0c:	e0bffb17 	ldw	r2,-20(fp)
 1823f10:	e0bffe15 	stw	r2,-8(fp)

			LWIP_DEBUGF( PING_DEBUG, ("ping: recv "));
			ip_addr_debug_print(PING_DEBUG, &fromaddr);
			LWIP_DEBUGF( PING_DEBUG, (" %"U32_F" ms\n", (sys_now() - ping_time)));

			iphdr = (struct ip_hdr *)buf;
 1823f14:	e0bfe904 	addi	r2,fp,-92
 1823f18:	e0bfe715 	stw	r2,-100(fp)
			iecho = (struct icmp_echo_hdr *)(buf + (IPH_HL(iphdr) * 4));
 1823f1c:	e0bfe717 	ldw	r2,-100(fp)
 1823f20:	10800003 	ldbu	r2,0(r2)
 1823f24:	10803fcc 	andi	r2,r2,255
 1823f28:	108003cc 	andi	r2,r2,15
 1823f2c:	1085883a 	add	r2,r2,r2
 1823f30:	1085883a 	add	r2,r2,r2
 1823f34:	1007883a 	mov	r3,r2
 1823f38:	e0bfe904 	addi	r2,fp,-92
 1823f3c:	10c5883a 	add	r2,r2,r3
 1823f40:	e0bfe815 	stw	r2,-96(fp)

			if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num))) {
 1823f44:	e0bfe817 	ldw	r2,-96(fp)
 1823f48:	10c00103 	ldbu	r3,4(r2)
 1823f4c:	10800143 	ldbu	r2,5(r2)
 1823f50:	1004923a 	slli	r2,r2,8
 1823f54:	10c4b03a 	or	r2,r2,r3
 1823f58:	10ffffcc 	andi	r3,r2,65535
 1823f5c:	00abebd4 	movui	r2,44975
 1823f60:	1880121e 	bne	r3,r2,1823fac <ping_recv+0xc4>
 1823f64:	e0bfe817 	ldw	r2,-96(fp)
 1823f68:	10c00183 	ldbu	r3,6(r2)
 1823f6c:	108001c3 	ldbu	r2,7(r2)
 1823f70:	1004923a 	slli	r2,r2,8
 1823f74:	10c4b03a 	or	r2,r2,r3
 1823f78:	10ffffcc 	andi	r3,r2,65535
 1823f7c:	d0a7fc0b 	ldhu	r2,-24592(gp)
 1823f80:	10bfffcc 	andi	r2,r2,65535
 1823f84:	1004d23a 	srli	r2,r2,8
 1823f88:	113fffcc 	andi	r4,r2,65535
 1823f8c:	d0a7fc0b 	ldhu	r2,-24592(gp)
 1823f90:	10bfffcc 	andi	r2,r2,65535
 1823f94:	1004923a 	slli	r2,r2,8
 1823f98:	10bfffcc 	andi	r2,r2,65535
 1823f9c:	2084b03a 	or	r2,r4,r2
 1823fa0:	1880021e 	bne	r3,r2,1823fac <ping_recv+0xc4>
				return 1;
 1823fa4:	00800044 	movi	r2,1
 1823fa8:	00000e06 	br	1823fe4 <ping_recv+0xfc>
	struct sockaddr_in from;
	struct ip_hdr *iphdr;
	struct icmp_echo_hdr *iecho;

	// remember that there is a one minute timeout on on the receive function ;)
	while ((len = recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*)&from, (socklen_t*)&fromlen)) > 0) {
 1823fac:	e0ffe904 	addi	r3,fp,-92
 1823fb0:	e0bff904 	addi	r2,fp,-28
 1823fb4:	d8800115 	stw	r2,4(sp)
 1823fb8:	e0bffa04 	addi	r2,fp,-24
 1823fbc:	d8800015 	stw	r2,0(sp)
 1823fc0:	000f883a 	mov	r7,zero
 1823fc4:	01801004 	movi	r6,64
 1823fc8:	180b883a 	mov	r5,r3
 1823fcc:	e13fff17 	ldw	r4,-4(fp)
 1823fd0:	182d9c40 	call	182d9c4 <lwip_recvfrom>
 1823fd4:	e0bfe615 	stw	r2,-104(fp)
 1823fd8:	e0bfe617 	ldw	r2,-104(fp)
 1823fdc:	00bfc816 	blt	zero,r2,1823f00 <__ram_exceptions_end+0xff813c10>
	if (len == 0) {
		LWIP_DEBUGF( PING_DEBUG, ("ping: recv - %"U32_F" ms - timeout\n", (sys_now()-ping_time)));
	}

	/* do some ping result processing */
	return -EXIT_FAILURE;
 1823fe0:	00bfffc4 	movi	r2,-1
}
 1823fe4:	e037883a 	mov	sp,fp
 1823fe8:	dfc00117 	ldw	ra,4(sp)
 1823fec:	df000017 	ldw	fp,0(sp)
 1823ff0:	dec00204 	addi	sp,sp,8
 1823ff4:	f800283a 	ret

01823ff8 <lwip_ping_target>:

int lwip_ping_target(u32_t addr, u8_t packets, int get_response, u8_t size)
{
 1823ff8:	defff504 	addi	sp,sp,-44
 1823ffc:	dfc00a15 	stw	ra,40(sp)
 1824000:	df000915 	stw	fp,36(sp)
 1824004:	dc000815 	stw	r16,32(sp)
 1824008:	df000904 	addi	fp,sp,36
 182400c:	e13ffb15 	stw	r4,-20(fp)
 1824010:	e1bffd15 	stw	r6,-12(fp)
 1824014:	3809883a 	mov	r4,r7
 1824018:	e17ffc05 	stb	r5,-16(fp)
 182401c:	e13ffe05 	stb	r4,-8(fp)
 1824020:	d809883a 	mov	r4,sp
 1824024:	2021883a 	mov	r16,r4
	u8_t buf[size];
 1824028:	e13ffe03 	ldbu	r4,-8(fp)
 182402c:	21403fcc 	andi	r5,r4,255
 1824030:	297fffc4 	addi	r5,r5,-1
 1824034:	e17ff915 	stw	r5,-28(fp)
 1824038:	21403fcc 	andi	r5,r4,255
 182403c:	2819883a 	mov	r12,r5
 1824040:	001b883a 	mov	r13,zero
 1824044:	600ad77a 	srli	r5,r12,29
 1824048:	681290fa 	slli	r9,r13,3
 182404c:	2a52b03a 	or	r9,r5,r9
 1824050:	601090fa 	slli	r8,r12,3
 1824054:	21403fcc 	andi	r5,r4,255
 1824058:	2815883a 	mov	r10,r5
 182405c:	0017883a 	mov	r11,zero
 1824060:	500ad77a 	srli	r5,r10,29
 1824064:	580690fa 	slli	r3,r11,3
 1824068:	28c6b03a 	or	r3,r5,r3
 182406c:	500490fa 	slli	r2,r10,3
 1824070:	20803fcc 	andi	r2,r4,255
 1824074:	108000c4 	addi	r2,r2,3
 1824078:	1004d0ba 	srli	r2,r2,2
 182407c:	1085883a 	add	r2,r2,r2
 1824080:	1085883a 	add	r2,r2,r2
 1824084:	d8b7c83a 	sub	sp,sp,r2
 1824088:	d8800104 	addi	r2,sp,4
 182408c:	1005883a 	mov	r2,r2
 1824090:	e0bffa15 	stw	r2,-24(fp)
	int idx;

	// fill dummy data
	for (idx = 0; idx < size; idx++)
 1824094:	e03ff815 	stw	zero,-32(fp)
 1824098:	00000906 	br	18240c0 <lwip_ping_target+0xc8>
		buf[idx] = idx;
 182409c:	e0bff817 	ldw	r2,-32(fp)
 18240a0:	1009883a 	mov	r4,r2
 18240a4:	e0fffa17 	ldw	r3,-24(fp)
 18240a8:	e0bff817 	ldw	r2,-32(fp)
 18240ac:	1885883a 	add	r2,r3,r2
 18240b0:	11000005 	stb	r4,0(r2)
{
	u8_t buf[size];
	int idx;

	// fill dummy data
	for (idx = 0; idx < size; idx++)
 18240b4:	e0bff817 	ldw	r2,-32(fp)
 18240b8:	10800044 	addi	r2,r2,1
 18240bc:	e0bff815 	stw	r2,-32(fp)
 18240c0:	e0bffe03 	ldbu	r2,-8(fp)
 18240c4:	e0fff817 	ldw	r3,-32(fp)
 18240c8:	18bff416 	blt	r3,r2,182409c <__ram_exceptions_end+0xff813dac>
		buf[idx] = idx;

	// send this
	return lwip_ping_target_data(addr, packets, get_response, buf, size);
 18240cc:	e0fffc03 	ldbu	r3,-16(fp)
 18240d0:	e13ffa17 	ldw	r4,-24(fp)
 18240d4:	e0bffe03 	ldbu	r2,-8(fp)
 18240d8:	d8800015 	stw	r2,0(sp)
 18240dc:	200f883a 	mov	r7,r4
 18240e0:	e1bffd17 	ldw	r6,-12(fp)
 18240e4:	180b883a 	mov	r5,r3
 18240e8:	e13ffb17 	ldw	r4,-20(fp)
 18240ec:	182410c0 	call	182410c <lwip_ping_target_data>
 18240f0:	8037883a 	mov	sp,r16
}
 18240f4:	e6ffff04 	addi	sp,fp,-4
 18240f8:	dfc00217 	ldw	ra,8(sp)
 18240fc:	df000117 	ldw	fp,4(sp)
 1824100:	dc000017 	ldw	r16,0(sp)
 1824104:	dec00304 	addi	sp,sp,12
 1824108:	f800283a 	ret

0182410c <lwip_ping_target_data>:

int lwip_ping_target_data(u32_t addr, u8_t packets, int get_response, u8_t *data, u16_t size)
{
 182410c:	defff404 	addi	sp,sp,-48
 1824110:	dfc00b15 	stw	ra,44(sp)
 1824114:	df000a15 	stw	fp,40(sp)
 1824118:	df000a04 	addi	fp,sp,40
 182411c:	e13ffb15 	stw	r4,-20(fp)
 1824120:	2807883a 	mov	r3,r5
 1824124:	e1bffd15 	stw	r6,-12(fp)
 1824128:	e1fffe15 	stw	r7,-8(fp)
 182412c:	e0800217 	ldw	r2,8(fp)
 1824130:	e0fffc05 	stb	r3,-16(fp)
 1824134:	e0bfff0d 	sth	r2,-4(fp)
	int s;
	ip_addr_t ping_target;
	int pongcnt = 0;
 1824138:	e03ff715 	stw	zero,-36(fp)
	int timeout = PING_RCV_TIMEO;
 182413c:	0080fa04 	movi	r2,1000
 1824140:	e0bffa15 	stw	r2,-24(fp)

	// open our raw socket
	if ((s = socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
 1824144:	01800044 	movi	r6,1
 1824148:	014000c4 	movi	r5,3
 182414c:	01000084 	movi	r4,2
 1824150:	182e2740 	call	182e274 <lwip_socket>
 1824154:	e0bff815 	stw	r2,-32(fp)
 1824158:	e0bff817 	ldw	r2,-32(fp)
 182415c:	1000020e 	bge	r2,zero,1824168 <lwip_ping_target_data+0x5c>
		return -EXIT_SUCCESS;
 1824160:	0005883a 	mov	r2,zero
 1824164:	00003406 	br	1824238 <lwip_ping_target_data+0x12c>

	if (setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout)) < 0)
 1824168:	e0fffa04 	addi	r3,fp,-24
 182416c:	00800104 	movi	r2,4
 1824170:	d8800015 	stw	r2,0(sp)
 1824174:	180f883a 	mov	r7,r3
 1824178:	01840184 	movi	r6,4102
 182417c:	0143ffc4 	movi	r5,4095
 1824180:	e13ff817 	ldw	r4,-32(fp)
 1824184:	182f9dc0 	call	182f9dc <lwip_setsockopt>
		LWIP_DEBUGF(PING_DEBUG, ("Couldn't set ping receive socket timeout\n"));

	while (packets--) {
 1824188:	00002306 	br	1824218 <lwip_ping_target_data+0x10c>
		ping_target.addr = addr; // addr should already be converted with htonl just like normal socket operations
 182418c:	e0bffb17 	ldw	r2,-20(fp)
 1824190:	e0bff915 	stw	r2,-28(fp)

		if (ping_send(s, &ping_target, data, size) == ERR_OK) {
 1824194:	e0ffff0b 	ldhu	r3,-4(fp)
 1824198:	e0bff904 	addi	r2,fp,-28
 182419c:	180f883a 	mov	r7,r3
 18241a0:	e1bffe17 	ldw	r6,-8(fp)
 18241a4:	100b883a 	mov	r5,r2
 18241a8:	e13ff817 	ldw	r4,-32(fp)
 18241ac:	1823ccc0 	call	1823ccc <ping_send>
 18241b0:	10803fcc 	andi	r2,r2,255
 18241b4:	1080201c 	xori	r2,r2,128
 18241b8:	10bfe004 	addi	r2,r2,-128
 18241bc:	10000f1e 	bne	r2,zero,18241fc <lwip_ping_target_data+0xf0>

			ip_addr_debug_print(PING_DEBUG, &ping_target);

			LWIP_DEBUGF( PING_DEBUG, ("\n"));

			ping_time = sys_now();
 18241c0:	1814e3c0 	call	1814e3c <sys_now>
 18241c4:	d0a7fd15 	stw	r2,-24588(gp)

			// get the pong if we we ever receive one
			if (get_response)
 18241c8:	e0bffd17 	ldw	r2,-12(fp)
 18241cc:	10000726 	beq	r2,zero,18241ec <lwip_ping_target_data+0xe0>
				pongcnt += ping_recv(s);
 18241d0:	e13ff817 	ldw	r4,-32(fp)
 18241d4:	1823ee80 	call	1823ee8 <ping_recv>
 18241d8:	1007883a 	mov	r3,r2
 18241dc:	e0bff717 	ldw	r2,-36(fp)
 18241e0:	10c5883a 	add	r2,r2,r3
 18241e4:	e0bff715 	stw	r2,-36(fp)
 18241e8:	00000706 	br	1824208 <lwip_ping_target_data+0xfc>
			else
				pongcnt++;
 18241ec:	e0bff717 	ldw	r2,-36(fp)
 18241f0:	10800044 	addi	r2,r2,1
 18241f4:	e0bff715 	stw	r2,-36(fp)
 18241f8:	00000306 	br	1824208 <lwip_ping_target_data+0xfc>

			ip_addr_debug_print(PING_DEBUG, &ping_target);

			LWIP_DEBUGF( PING_DEBUG, (" - error\n"));

			pongcnt--;
 18241fc:	e0bff717 	ldw	r2,-36(fp)
 1824200:	10bfffc4 	addi	r2,r2,-1
 1824204:	e0bff715 	stw	r2,-36(fp)
		}

		// if we need to send more packets, w'll wait a bit
		if (packets)
 1824208:	e0bffc03 	ldbu	r2,-16(fp)
 182420c:	10000226 	beq	r2,zero,1824218 <lwip_ping_target_data+0x10c>
			sys_msleep(PING_DELAY);
 1824210:	0100fa04 	movi	r4,1000
 1824214:	18343e80 	call	18343e8 <sys_msleep>
		return -EXIT_SUCCESS;

	if (setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout)) < 0)
		LWIP_DEBUGF(PING_DEBUG, ("Couldn't set ping receive socket timeout\n"));

	while (packets--) {
 1824218:	e0bffc03 	ldbu	r2,-16(fp)
 182421c:	10ffffc4 	addi	r3,r2,-1
 1824220:	e0fffc05 	stb	r3,-16(fp)
 1824224:	10803fcc 	andi	r2,r2,255
 1824228:	103fd81e 	bne	r2,zero,182418c <__ram_exceptions_end+0xff813e9c>
		// if we need to send more packets, w'll wait a bit
		if (packets)
			sys_msleep(PING_DELAY);
	}

	close(s);
 182422c:	e13ff817 	ldw	r4,-32(fp)
 1824230:	18131cc0 	call	18131cc <close>

	return pongcnt;
 1824234:	e0bff717 	ldw	r2,-36(fp)
}
 1824238:	e037883a 	mov	sp,fp
 182423c:	dfc00117 	ldw	ra,4(sp)
 1824240:	df000017 	ldw	fp,0(sp)
 1824244:	dec00204 	addi	sp,sp,8
 1824248:	f800283a 	ret

0182424c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 182424c:	defffd04 	addi	sp,sp,-12
 1824250:	dfc00215 	stw	ra,8(sp)
 1824254:	df000115 	stw	fp,4(sp)
 1824258:	df000104 	addi	fp,sp,4
 182425c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1824260:	d1600804 	addi	r5,gp,-32736
 1824264:	e13fff17 	ldw	r4,-4(fp)
 1824268:	182c1b00 	call	182c1b0 <alt_dev_llist_insert>
}
 182426c:	e037883a 	mov	sp,fp
 1824270:	dfc00117 	ldw	ra,4(sp)
 1824274:	df000017 	ldw	fp,0(sp)
 1824278:	dec00204 	addi	sp,sp,8
 182427c:	f800283a 	ret

01824280 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1824280:	defffd04 	addi	sp,sp,-12
 1824284:	dfc00215 	stw	ra,8(sp)
 1824288:	df000115 	stw	fp,4(sp)
 182428c:	df000104 	addi	fp,sp,4
 1824290:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 1824294:	182cee00 	call	182cee0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1824298:	00800044 	movi	r2,1
 182429c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 18242a0:	0001883a 	nop
 18242a4:	e037883a 	mov	sp,fp
 18242a8:	dfc00117 	ldw	ra,4(sp)
 18242ac:	df000017 	ldw	fp,0(sp)
 18242b0:	dec00204 	addi	sp,sp,8
 18242b4:	f800283a 	ret

018242b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 18242b8:	defffe04 	addi	sp,sp,-8
 18242bc:	dfc00115 	stw	ra,4(sp)
 18242c0:	df000015 	stw	fp,0(sp)
 18242c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 18242c8:	01c0fa04 	movi	r7,1000
 18242cc:	01800104 	movi	r6,4
 18242d0:	000b883a 	mov	r5,zero
 18242d4:	010080b4 	movhi	r4,514
 18242d8:	21041004 	addi	r4,r4,4160
 18242dc:	1825cd80 	call	1825cd8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 18242e0:	01800084 	movi	r6,2
 18242e4:	000b883a 	mov	r5,zero
 18242e8:	01006134 	movhi	r4,388
 18242ec:	210f7d04 	addi	r4,r4,15860
 18242f0:	18244c80 	call	18244c8 <altera_avalon_jtag_uart_init>
 18242f4:	01006134 	movhi	r4,388
 18242f8:	210f7304 	addi	r4,r4,15820
 18242fc:	182424c0 	call	182424c <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TSE_RX_0, sgdma_tse_rx_0);
 1824300:	000d883a 	mov	r6,zero
 1824304:	000b883a 	mov	r5,zero
 1824308:	01006134 	movhi	r4,388
 182430c:	21138d04 	addi	r4,r4,20020
 1824310:	1825bb80 	call	1825bb8 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TSE_TX_0, sgdma_tse_tx_0);
 1824314:	01800044 	movi	r6,1
 1824318:	000b883a 	mov	r5,zero
 182431c:	01006134 	movhi	r4,388
 1824320:	21139904 	addi	r4,r4,20068
 1824324:	1825bb80 	call	1825bb8 <alt_avalon_sgdma_init>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 1824328:	01800144 	movi	r6,5
 182432c:	000b883a 	mov	r5,zero
 1824330:	01006134 	movhi	r4,388
 1824334:	2113af04 	addi	r4,r4,20156
 1824338:	182ae400 	call	182ae40 <altera_avalon_uart_init>
 182433c:	01006134 	movhi	r4,388
 1824340:	2113a504 	addi	r4,r4,20116
 1824344:	182424c0 	call	182424c <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_MAC_0, tse_mac_0);
 1824348:	0001883a 	nop
}
 182434c:	0001883a 	nop
 1824350:	e037883a 	mov	sp,fp
 1824354:	dfc00117 	ldw	ra,4(sp)
 1824358:	df000017 	ldw	fp,0(sp)
 182435c:	dec00204 	addi	sp,sp,8
 1824360:	f800283a 	ret

01824364 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1824364:	defffa04 	addi	sp,sp,-24
 1824368:	dfc00515 	stw	ra,20(sp)
 182436c:	df000415 	stw	fp,16(sp)
 1824370:	df000404 	addi	fp,sp,16
 1824374:	e13ffd15 	stw	r4,-12(fp)
 1824378:	e17ffe15 	stw	r5,-8(fp)
 182437c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1824380:	e0bffd17 	ldw	r2,-12(fp)
 1824384:	10800017 	ldw	r2,0(r2)
 1824388:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 182438c:	e0bffc17 	ldw	r2,-16(fp)
 1824390:	10c00a04 	addi	r3,r2,40
 1824394:	e0bffd17 	ldw	r2,-12(fp)
 1824398:	10800217 	ldw	r2,8(r2)
 182439c:	100f883a 	mov	r7,r2
 18243a0:	e1bfff17 	ldw	r6,-4(fp)
 18243a4:	e17ffe17 	ldw	r5,-8(fp)
 18243a8:	1809883a 	mov	r4,r3
 18243ac:	1824a140 	call	1824a14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 18243b0:	e037883a 	mov	sp,fp
 18243b4:	dfc00117 	ldw	ra,4(sp)
 18243b8:	df000017 	ldw	fp,0(sp)
 18243bc:	dec00204 	addi	sp,sp,8
 18243c0:	f800283a 	ret

018243c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 18243c4:	defffa04 	addi	sp,sp,-24
 18243c8:	dfc00515 	stw	ra,20(sp)
 18243cc:	df000415 	stw	fp,16(sp)
 18243d0:	df000404 	addi	fp,sp,16
 18243d4:	e13ffd15 	stw	r4,-12(fp)
 18243d8:	e17ffe15 	stw	r5,-8(fp)
 18243dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 18243e0:	e0bffd17 	ldw	r2,-12(fp)
 18243e4:	10800017 	ldw	r2,0(r2)
 18243e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 18243ec:	e0bffc17 	ldw	r2,-16(fp)
 18243f0:	10c00a04 	addi	r3,r2,40
 18243f4:	e0bffd17 	ldw	r2,-12(fp)
 18243f8:	10800217 	ldw	r2,8(r2)
 18243fc:	100f883a 	mov	r7,r2
 1824400:	e1bfff17 	ldw	r6,-4(fp)
 1824404:	e17ffe17 	ldw	r5,-8(fp)
 1824408:	1809883a 	mov	r4,r3
 182440c:	1824c6c0 	call	1824c6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1824410:	e037883a 	mov	sp,fp
 1824414:	dfc00117 	ldw	ra,4(sp)
 1824418:	df000017 	ldw	fp,0(sp)
 182441c:	dec00204 	addi	sp,sp,8
 1824420:	f800283a 	ret

01824424 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1824424:	defffc04 	addi	sp,sp,-16
 1824428:	dfc00315 	stw	ra,12(sp)
 182442c:	df000215 	stw	fp,8(sp)
 1824430:	df000204 	addi	fp,sp,8
 1824434:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1824438:	e0bfff17 	ldw	r2,-4(fp)
 182443c:	10800017 	ldw	r2,0(r2)
 1824440:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1824444:	e0bffe17 	ldw	r2,-8(fp)
 1824448:	10c00a04 	addi	r3,r2,40
 182444c:	e0bfff17 	ldw	r2,-4(fp)
 1824450:	10800217 	ldw	r2,8(r2)
 1824454:	100b883a 	mov	r5,r2
 1824458:	1809883a 	mov	r4,r3
 182445c:	18248bc0 	call	18248bc <altera_avalon_jtag_uart_close>
}
 1824460:	e037883a 	mov	sp,fp
 1824464:	dfc00117 	ldw	ra,4(sp)
 1824468:	df000017 	ldw	fp,0(sp)
 182446c:	dec00204 	addi	sp,sp,8
 1824470:	f800283a 	ret

01824474 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1824474:	defffa04 	addi	sp,sp,-24
 1824478:	dfc00515 	stw	ra,20(sp)
 182447c:	df000415 	stw	fp,16(sp)
 1824480:	df000404 	addi	fp,sp,16
 1824484:	e13ffd15 	stw	r4,-12(fp)
 1824488:	e17ffe15 	stw	r5,-8(fp)
 182448c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1824490:	e0bffd17 	ldw	r2,-12(fp)
 1824494:	10800017 	ldw	r2,0(r2)
 1824498:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 182449c:	e0bffc17 	ldw	r2,-16(fp)
 18244a0:	10800a04 	addi	r2,r2,40
 18244a4:	e1bfff17 	ldw	r6,-4(fp)
 18244a8:	e17ffe17 	ldw	r5,-8(fp)
 18244ac:	1009883a 	mov	r4,r2
 18244b0:	18249240 	call	1824924 <altera_avalon_jtag_uart_ioctl>
}
 18244b4:	e037883a 	mov	sp,fp
 18244b8:	dfc00117 	ldw	ra,4(sp)
 18244bc:	df000017 	ldw	fp,0(sp)
 18244c0:	dec00204 	addi	sp,sp,8
 18244c4:	f800283a 	ret

018244c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 18244c8:	defff304 	addi	sp,sp,-52
 18244cc:	dfc00c15 	stw	ra,48(sp)
 18244d0:	df000b15 	stw	fp,44(sp)
 18244d4:	df000b04 	addi	fp,sp,44
 18244d8:	e13ff915 	stw	r4,-28(fp)
 18244dc:	e17ffa15 	stw	r5,-24(fp)
 18244e0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
 18244e4:	e0bff917 	ldw	r2,-28(fp)
 18244e8:	10800a04 	addi	r2,r2,40
 18244ec:	e0bff615 	stw	r2,-40(fp)
 18244f0:	00800044 	movi	r2,1
 18244f4:	e0bff88d 	sth	r2,-30(fp)
 18244f8:	e0bff88b 	ldhu	r2,-30(fp)
 18244fc:	10000226 	beq	r2,zero,1824508 <altera_avalon_jtag_uart_init+0x40>
 1824500:	e0bff88b 	ldhu	r2,-30(fp)
 1824504:	00000106 	br	182450c <altera_avalon_jtag_uart_init+0x44>
 1824508:	00800044 	movi	r2,1
 182450c:	e0fff88b 	ldhu	r3,-30(fp)
 1824510:	180b883a 	mov	r5,r3
 1824514:	1009883a 	mov	r4,r2
 1824518:	180d9300 	call	180d930 <xQueueCreateCountingSemaphore>
 182451c:	1007883a 	mov	r3,r2
 1824520:	e0bff617 	ldw	r2,-40(fp)
 1824524:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 1824528:	e0bff917 	ldw	r2,-28(fp)
 182452c:	10800b04 	addi	r2,r2,44
 1824530:	e0bff715 	stw	r2,-36(fp)
 1824534:	00800044 	movi	r2,1
 1824538:	e0bff80d 	sth	r2,-32(fp)
 182453c:	e0bff80b 	ldhu	r2,-32(fp)
 1824540:	10000226 	beq	r2,zero,182454c <altera_avalon_jtag_uart_init+0x84>
 1824544:	e0bff80b 	ldhu	r2,-32(fp)
 1824548:	00000106 	br	1824550 <altera_avalon_jtag_uart_init+0x88>
 182454c:	00800044 	movi	r2,1
 1824550:	e0fff80b 	ldhu	r3,-32(fp)
 1824554:	180b883a 	mov	r5,r3
 1824558:	1009883a 	mov	r4,r2
 182455c:	180d9300 	call	180d930 <xQueueCreateCountingSemaphore>
 1824560:	1007883a 	mov	r3,r2
 1824564:	e0bff717 	ldw	r2,-36(fp)
 1824568:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 182456c:	e0bff917 	ldw	r2,-28(fp)
 1824570:	00c00044 	movi	r3,1
 1824574:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1824578:	e0bff917 	ldw	r2,-28(fp)
 182457c:	10800017 	ldw	r2,0(r2)
 1824580:	10800104 	addi	r2,r2,4
 1824584:	1007883a 	mov	r3,r2
 1824588:	e0bff917 	ldw	r2,-28(fp)
 182458c:	10800817 	ldw	r2,32(r2)
 1824590:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1824594:	e0bffa17 	ldw	r2,-24(fp)
 1824598:	e0fffb17 	ldw	r3,-20(fp)
 182459c:	d8000015 	stw	zero,0(sp)
 18245a0:	e1fff917 	ldw	r7,-28(fp)
 18245a4:	018060b4 	movhi	r6,386
 18245a8:	31918404 	addi	r6,r6,17936
 18245ac:	180b883a 	mov	r5,r3
 18245b0:	1009883a 	mov	r4,r2
 18245b4:	182c6f40 	call	182c6f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 18245b8:	e0bff917 	ldw	r2,-28(fp)
 18245bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 18245c0:	e0bff917 	ldw	r2,-28(fp)
 18245c4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 18245c8:	d0e80717 	ldw	r3,-24548(gp)
 18245cc:	e1fff917 	ldw	r7,-28(fp)
 18245d0:	018060b4 	movhi	r6,386
 18245d4:	31920704 	addi	r6,r6,18460
 18245d8:	180b883a 	mov	r5,r3
 18245dc:	1009883a 	mov	r4,r2
 18245e0:	182bd240 	call	182bd24 <alt_alarm_start>
 18245e4:	1000040e 	bge	r2,zero,18245f8 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 18245e8:	e0fff917 	ldw	r3,-28(fp)
 18245ec:	00a00034 	movhi	r2,32768
 18245f0:	10bfffc4 	addi	r2,r2,-1
 18245f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 18245f8:	0001883a 	nop
 18245fc:	e037883a 	mov	sp,fp
 1824600:	dfc00117 	ldw	ra,4(sp)
 1824604:	df000017 	ldw	fp,0(sp)
 1824608:	dec00204 	addi	sp,sp,8
 182460c:	f800283a 	ret

01824610 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1824610:	defff804 	addi	sp,sp,-32
 1824614:	df000715 	stw	fp,28(sp)
 1824618:	df000704 	addi	fp,sp,28
 182461c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1824620:	e0bfff17 	ldw	r2,-4(fp)
 1824624:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 1824628:	e0bffb17 	ldw	r2,-20(fp)
 182462c:	10800017 	ldw	r2,0(r2)
 1824630:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1824634:	e0bffc17 	ldw	r2,-16(fp)
 1824638:	10800104 	addi	r2,r2,4
 182463c:	10800037 	ldwio	r2,0(r2)
 1824640:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1824644:	e0bffd17 	ldw	r2,-12(fp)
 1824648:	1080c00c 	andi	r2,r2,768
 182464c:	10006d26 	beq	r2,zero,1824804 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1824650:	e0bffd17 	ldw	r2,-12(fp)
 1824654:	1080400c 	andi	r2,r2,256
 1824658:	10003526 	beq	r2,zero,1824730 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 182465c:	00800074 	movhi	r2,1
 1824660:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1824664:	e0bffb17 	ldw	r2,-20(fp)
 1824668:	10800c17 	ldw	r2,48(r2)
 182466c:	10800044 	addi	r2,r2,1
 1824670:	1081ffcc 	andi	r2,r2,2047
 1824674:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1824678:	e0bffb17 	ldw	r2,-20(fp)
 182467c:	10c00d17 	ldw	r3,52(r2)
 1824680:	e0bffe17 	ldw	r2,-8(fp)
 1824684:	18801526 	beq	r3,r2,18246dc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1824688:	e0bffc17 	ldw	r2,-16(fp)
 182468c:	10800037 	ldwio	r2,0(r2)
 1824690:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1824694:	e0bff917 	ldw	r2,-28(fp)
 1824698:	10a0000c 	andi	r2,r2,32768
 182469c:	10001126 	beq	r2,zero,18246e4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 18246a0:	e0bffb17 	ldw	r2,-20(fp)
 18246a4:	10800c17 	ldw	r2,48(r2)
 18246a8:	e0fff917 	ldw	r3,-28(fp)
 18246ac:	1809883a 	mov	r4,r3
 18246b0:	e0fffb17 	ldw	r3,-20(fp)
 18246b4:	1885883a 	add	r2,r3,r2
 18246b8:	10801004 	addi	r2,r2,64
 18246bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 18246c0:	e0bffb17 	ldw	r2,-20(fp)
 18246c4:	10800c17 	ldw	r2,48(r2)
 18246c8:	10800044 	addi	r2,r2,1
 18246cc:	10c1ffcc 	andi	r3,r2,2047
 18246d0:	e0bffb17 	ldw	r2,-20(fp)
 18246d4:	10c00c15 	stw	r3,48(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 18246d8:	003fe206 	br	1824664 <__ram_exceptions_end+0xff814374>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 18246dc:	0001883a 	nop
 18246e0:	00000106 	br	18246e8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 18246e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 18246e8:	e0bff917 	ldw	r2,-28(fp)
 18246ec:	10bfffec 	andhi	r2,r2,65535
 18246f0:	10000f26 	beq	r2,zero,1824730 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 18246f4:	e0bffb17 	ldw	r2,-20(fp)
 18246f8:	10c00817 	ldw	r3,32(r2)
 18246fc:	00bfff84 	movi	r2,-2
 1824700:	1886703a 	and	r3,r3,r2
 1824704:	e0bffb17 	ldw	r2,-20(fp)
 1824708:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 182470c:	e0bffc17 	ldw	r2,-16(fp)
 1824710:	10800104 	addi	r2,r2,4
 1824714:	1007883a 	mov	r3,r2
 1824718:	e0bffb17 	ldw	r2,-20(fp)
 182471c:	10800817 	ldw	r2,32(r2)
 1824720:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1824724:	e0bffc17 	ldw	r2,-16(fp)
 1824728:	10800104 	addi	r2,r2,4
 182472c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1824730:	e0bffd17 	ldw	r2,-12(fp)
 1824734:	1080800c 	andi	r2,r2,512
 1824738:	103fbe26 	beq	r2,zero,1824634 <__ram_exceptions_end+0xff814344>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 182473c:	e0bffd17 	ldw	r2,-12(fp)
 1824740:	1004d43a 	srli	r2,r2,16
 1824744:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1824748:	00001406 	br	182479c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 182474c:	e0bffc17 	ldw	r2,-16(fp)
 1824750:	e0fffb17 	ldw	r3,-20(fp)
 1824754:	18c00f17 	ldw	r3,60(r3)
 1824758:	e13ffb17 	ldw	r4,-20(fp)
 182475c:	20c7883a 	add	r3,r4,r3
 1824760:	18c21004 	addi	r3,r3,2112
 1824764:	18c00003 	ldbu	r3,0(r3)
 1824768:	18c03fcc 	andi	r3,r3,255
 182476c:	18c0201c 	xori	r3,r3,128
 1824770:	18ffe004 	addi	r3,r3,-128
 1824774:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1824778:	e0bffb17 	ldw	r2,-20(fp)
 182477c:	10800f17 	ldw	r2,60(r2)
 1824780:	10800044 	addi	r2,r2,1
 1824784:	10c1ffcc 	andi	r3,r2,2047
 1824788:	e0bffb17 	ldw	r2,-20(fp)
 182478c:	10c00f15 	stw	r3,60(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1824790:	e0bffa17 	ldw	r2,-24(fp)
 1824794:	10bfffc4 	addi	r2,r2,-1
 1824798:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 182479c:	e0bffa17 	ldw	r2,-24(fp)
 18247a0:	10000526 	beq	r2,zero,18247b8 <altera_avalon_jtag_uart_irq+0x1a8>
 18247a4:	e0bffb17 	ldw	r2,-20(fp)
 18247a8:	10c00f17 	ldw	r3,60(r2)
 18247ac:	e0bffb17 	ldw	r2,-20(fp)
 18247b0:	10800e17 	ldw	r2,56(r2)
 18247b4:	18bfe51e 	bne	r3,r2,182474c <__ram_exceptions_end+0xff81445c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 18247b8:	e0bffa17 	ldw	r2,-24(fp)
 18247bc:	103f9d26 	beq	r2,zero,1824634 <__ram_exceptions_end+0xff814344>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 18247c0:	e0bffb17 	ldw	r2,-20(fp)
 18247c4:	10c00817 	ldw	r3,32(r2)
 18247c8:	00bfff44 	movi	r2,-3
 18247cc:	1886703a 	and	r3,r3,r2
 18247d0:	e0bffb17 	ldw	r2,-20(fp)
 18247d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 18247d8:	e0bffb17 	ldw	r2,-20(fp)
 18247dc:	10800017 	ldw	r2,0(r2)
 18247e0:	10800104 	addi	r2,r2,4
 18247e4:	1007883a 	mov	r3,r2
 18247e8:	e0bffb17 	ldw	r2,-20(fp)
 18247ec:	10800817 	ldw	r2,32(r2)
 18247f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 18247f4:	e0bffc17 	ldw	r2,-16(fp)
 18247f8:	10800104 	addi	r2,r2,4
 18247fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1824800:	003f8c06 	br	1824634 <__ram_exceptions_end+0xff814344>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1824804:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1824808:	0001883a 	nop
 182480c:	e037883a 	mov	sp,fp
 1824810:	df000017 	ldw	fp,0(sp)
 1824814:	dec00104 	addi	sp,sp,4
 1824818:	f800283a 	ret

0182481c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 182481c:	defff804 	addi	sp,sp,-32
 1824820:	df000715 	stw	fp,28(sp)
 1824824:	df000704 	addi	fp,sp,28
 1824828:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 182482c:	e0bffb17 	ldw	r2,-20(fp)
 1824830:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1824834:	e0bff917 	ldw	r2,-28(fp)
 1824838:	10800017 	ldw	r2,0(r2)
 182483c:	10800104 	addi	r2,r2,4
 1824840:	10800037 	ldwio	r2,0(r2)
 1824844:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1824848:	e0bffa17 	ldw	r2,-24(fp)
 182484c:	1081000c 	andi	r2,r2,1024
 1824850:	10000b26 	beq	r2,zero,1824880 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1824854:	e0bff917 	ldw	r2,-28(fp)
 1824858:	10800017 	ldw	r2,0(r2)
 182485c:	10800104 	addi	r2,r2,4
 1824860:	1007883a 	mov	r3,r2
 1824864:	e0bff917 	ldw	r2,-28(fp)
 1824868:	10800817 	ldw	r2,32(r2)
 182486c:	10810014 	ori	r2,r2,1024
 1824870:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1824874:	e0bff917 	ldw	r2,-28(fp)
 1824878:	10000915 	stw	zero,36(r2)
 182487c:	00000a06 	br	18248a8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1824880:	e0bff917 	ldw	r2,-28(fp)
 1824884:	10c00917 	ldw	r3,36(r2)
 1824888:	00a00034 	movhi	r2,32768
 182488c:	10bfff04 	addi	r2,r2,-4
 1824890:	10c00536 	bltu	r2,r3,18248a8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1824894:	e0bff917 	ldw	r2,-28(fp)
 1824898:	10800917 	ldw	r2,36(r2)
 182489c:	10c00044 	addi	r3,r2,1
 18248a0:	e0bff917 	ldw	r2,-28(fp)
 18248a4:	10c00915 	stw	r3,36(r2)
 18248a8:	d0a80717 	ldw	r2,-24548(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 18248ac:	e037883a 	mov	sp,fp
 18248b0:	df000017 	ldw	fp,0(sp)
 18248b4:	dec00104 	addi	sp,sp,4
 18248b8:	f800283a 	ret

018248bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 18248bc:	defffd04 	addi	sp,sp,-12
 18248c0:	df000215 	stw	fp,8(sp)
 18248c4:	df000204 	addi	fp,sp,8
 18248c8:	e13ffe15 	stw	r4,-8(fp)
 18248cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 18248d0:	00000506 	br	18248e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 18248d4:	e0bfff17 	ldw	r2,-4(fp)
 18248d8:	1090000c 	andi	r2,r2,16384
 18248dc:	10000226 	beq	r2,zero,18248e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 18248e0:	00bffd44 	movi	r2,-11
 18248e4:	00000b06 	br	1824914 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 18248e8:	e0bffe17 	ldw	r2,-8(fp)
 18248ec:	10c00f17 	ldw	r3,60(r2)
 18248f0:	e0bffe17 	ldw	r2,-8(fp)
 18248f4:	10800e17 	ldw	r2,56(r2)
 18248f8:	18800526 	beq	r3,r2,1824910 <altera_avalon_jtag_uart_close+0x54>
 18248fc:	e0bffe17 	ldw	r2,-8(fp)
 1824900:	10c00917 	ldw	r3,36(r2)
 1824904:	e0bffe17 	ldw	r2,-8(fp)
 1824908:	10800117 	ldw	r2,4(r2)
 182490c:	18bff136 	bltu	r3,r2,18248d4 <__ram_exceptions_end+0xff8145e4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1824910:	0005883a 	mov	r2,zero
}
 1824914:	e037883a 	mov	sp,fp
 1824918:	df000017 	ldw	fp,0(sp)
 182491c:	dec00104 	addi	sp,sp,4
 1824920:	f800283a 	ret

01824924 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1824924:	defffa04 	addi	sp,sp,-24
 1824928:	df000515 	stw	fp,20(sp)
 182492c:	df000504 	addi	fp,sp,20
 1824930:	e13ffd15 	stw	r4,-12(fp)
 1824934:	e17ffe15 	stw	r5,-8(fp)
 1824938:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 182493c:	00bff9c4 	movi	r2,-25
 1824940:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1824944:	e0bffe17 	ldw	r2,-8(fp)
 1824948:	10da8060 	cmpeqi	r3,r2,27137
 182494c:	1800031e 	bne	r3,zero,182495c <altera_avalon_jtag_uart_ioctl+0x38>
 1824950:	109a80a0 	cmpeqi	r2,r2,27138
 1824954:	1000181e 	bne	r2,zero,18249b8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1824958:	00002906 	br	1824a00 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 182495c:	e0bffd17 	ldw	r2,-12(fp)
 1824960:	10c00117 	ldw	r3,4(r2)
 1824964:	00a00034 	movhi	r2,32768
 1824968:	10bfffc4 	addi	r2,r2,-1
 182496c:	18802126 	beq	r3,r2,18249f4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1824970:	e0bfff17 	ldw	r2,-4(fp)
 1824974:	10800017 	ldw	r2,0(r2)
 1824978:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 182497c:	e0bffc17 	ldw	r2,-16(fp)
 1824980:	10800090 	cmplti	r2,r2,2
 1824984:	1000061e 	bne	r2,zero,18249a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 1824988:	e0fffc17 	ldw	r3,-16(fp)
 182498c:	00a00034 	movhi	r2,32768
 1824990:	10bfffc4 	addi	r2,r2,-1
 1824994:	18800226 	beq	r3,r2,18249a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 1824998:	e0bffc17 	ldw	r2,-16(fp)
 182499c:	00000206 	br	18249a8 <altera_avalon_jtag_uart_ioctl+0x84>
 18249a0:	00a00034 	movhi	r2,32768
 18249a4:	10bfff84 	addi	r2,r2,-2
 18249a8:	e0fffd17 	ldw	r3,-12(fp)
 18249ac:	18800115 	stw	r2,4(r3)
      rc = 0;
 18249b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 18249b4:	00000f06 	br	18249f4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 18249b8:	e0bffd17 	ldw	r2,-12(fp)
 18249bc:	10c00117 	ldw	r3,4(r2)
 18249c0:	00a00034 	movhi	r2,32768
 18249c4:	10bfffc4 	addi	r2,r2,-1
 18249c8:	18800c26 	beq	r3,r2,18249fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 18249cc:	e0bffd17 	ldw	r2,-12(fp)
 18249d0:	10c00917 	ldw	r3,36(r2)
 18249d4:	e0bffd17 	ldw	r2,-12(fp)
 18249d8:	10800117 	ldw	r2,4(r2)
 18249dc:	1885803a 	cmpltu	r2,r3,r2
 18249e0:	10c03fcc 	andi	r3,r2,255
 18249e4:	e0bfff17 	ldw	r2,-4(fp)
 18249e8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 18249ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 18249f0:	00000206 	br	18249fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 18249f4:	0001883a 	nop
 18249f8:	00000106 	br	1824a00 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 18249fc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1824a00:	e0bffb17 	ldw	r2,-20(fp)
}
 1824a04:	e037883a 	mov	sp,fp
 1824a08:	df000017 	ldw	fp,0(sp)
 1824a0c:	dec00104 	addi	sp,sp,4
 1824a10:	f800283a 	ret

01824a14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1824a14:	defff004 	addi	sp,sp,-64
 1824a18:	dfc00f15 	stw	ra,60(sp)
 1824a1c:	df000e15 	stw	fp,56(sp)
 1824a20:	df000e04 	addi	fp,sp,56
 1824a24:	e13ffb15 	stw	r4,-20(fp)
 1824a28:	e17ffc15 	stw	r5,-16(fp)
 1824a2c:	e1bffd15 	stw	r6,-12(fp)
 1824a30:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1824a34:	e0bffc17 	ldw	r2,-16(fp)
 1824a38:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 1824a3c:	e0bffb17 	ldw	r2,-20(fp)
 1824a40:	10800a17 	ldw	r2,40(r2)
 1824a44:	e0bff915 	stw	r2,-28(fp)
 1824a48:	e03ffa0d 	sth	zero,-24(fp)
 * converted into the functions return value.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (xSemaphoreHandle sem, alt_u16 timeout)
{
	return xSemaphoreTake(sem, timeout) ? 0 : -1;
 1824a4c:	e0bffa0b 	ldhu	r2,-24(fp)
 1824a50:	100b883a 	mov	r5,r2
 1824a54:	e13ff917 	ldw	r4,-28(fp)
 1824a58:	180df140 	call	180df14 <xQueueSemaphoreTake>

  while (space > 0)
 1824a5c:	00004706 	br	1824b7c <altera_avalon_jtag_uart_read+0x168>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1824a60:	e0bffb17 	ldw	r2,-20(fp)
 1824a64:	10800c17 	ldw	r2,48(r2)
 1824a68:	e0bff515 	stw	r2,-44(fp)
      out = sp->rx_out;
 1824a6c:	e0bffb17 	ldw	r2,-20(fp)
 1824a70:	10800d17 	ldw	r2,52(r2)
 1824a74:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1824a78:	e0fff517 	ldw	r3,-44(fp)
 1824a7c:	e0bff617 	ldw	r2,-40(fp)
 1824a80:	18800536 	bltu	r3,r2,1824a98 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 1824a84:	e0fff517 	ldw	r3,-44(fp)
 1824a88:	e0bff617 	ldw	r2,-40(fp)
 1824a8c:	1885c83a 	sub	r2,r3,r2
 1824a90:	e0bff315 	stw	r2,-52(fp)
 1824a94:	00000406 	br	1824aa8 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1824a98:	00c20004 	movi	r3,2048
 1824a9c:	e0bff617 	ldw	r2,-40(fp)
 1824aa0:	1885c83a 	sub	r2,r3,r2
 1824aa4:	e0bff315 	stw	r2,-52(fp)

      if (n == 0)
 1824aa8:	e0bff317 	ldw	r2,-52(fp)
 1824aac:	10001e26 	beq	r2,zero,1824b28 <altera_avalon_jtag_uart_read+0x114>
        break; /* No more data available */

      if (n > space)
 1824ab0:	e0fffd17 	ldw	r3,-12(fp)
 1824ab4:	e0bff317 	ldw	r2,-52(fp)
 1824ab8:	1880022e 	bgeu	r3,r2,1824ac4 <altera_avalon_jtag_uart_read+0xb0>
        n = space;
 1824abc:	e0bffd17 	ldw	r2,-12(fp)
 1824ac0:	e0bff315 	stw	r2,-52(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1824ac4:	e0bffb17 	ldw	r2,-20(fp)
 1824ac8:	10c01004 	addi	r3,r2,64
 1824acc:	e0bff617 	ldw	r2,-40(fp)
 1824ad0:	1885883a 	add	r2,r3,r2
 1824ad4:	e1bff317 	ldw	r6,-52(fp)
 1824ad8:	100b883a 	mov	r5,r2
 1824adc:	e13ff217 	ldw	r4,-56(fp)
 1824ae0:	1805f980 	call	1805f98 <memcpy>
      ptr   += n;
 1824ae4:	e0fff217 	ldw	r3,-56(fp)
 1824ae8:	e0bff317 	ldw	r2,-52(fp)
 1824aec:	1885883a 	add	r2,r3,r2
 1824af0:	e0bff215 	stw	r2,-56(fp)
      space -= n;
 1824af4:	e0fffd17 	ldw	r3,-12(fp)
 1824af8:	e0bff317 	ldw	r2,-52(fp)
 1824afc:	1885c83a 	sub	r2,r3,r2
 1824b00:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1824b04:	e0fff617 	ldw	r3,-40(fp)
 1824b08:	e0bff317 	ldw	r2,-52(fp)
 1824b0c:	1885883a 	add	r2,r3,r2
 1824b10:	10c1ffcc 	andi	r3,r2,2047
 1824b14:	e0bffb17 	ldw	r2,-20(fp)
 1824b18:	10c00d15 	stw	r3,52(r2)
    }
    while (space > 0);
 1824b1c:	e0bffd17 	ldw	r2,-12(fp)
 1824b20:	00bfcf16 	blt	zero,r2,1824a60 <__ram_exceptions_end+0xff814770>
 1824b24:	00000106 	br	1824b2c <altera_avalon_jtag_uart_read+0x118>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1824b28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1824b2c:	e0fff217 	ldw	r3,-56(fp)
 1824b30:	e0bffc17 	ldw	r2,-16(fp)
 1824b34:	1880141e 	bne	r3,r2,1824b88 <altera_avalon_jtag_uart_read+0x174>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1824b38:	e0bffe17 	ldw	r2,-8(fp)
 1824b3c:	1090000c 	andi	r2,r2,16384
 1824b40:	1000131e 	bne	r2,zero,1824b90 <altera_avalon_jtag_uart_read+0x17c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1824b44:	0001883a 	nop
 1824b48:	e0bffb17 	ldw	r2,-20(fp)
 1824b4c:	10c00c17 	ldw	r3,48(r2)
 1824b50:	e0bff517 	ldw	r2,-44(fp)
 1824b54:	1880051e 	bne	r3,r2,1824b6c <altera_avalon_jtag_uart_read+0x158>
 1824b58:	e0bffb17 	ldw	r2,-20(fp)
 1824b5c:	10c00917 	ldw	r3,36(r2)
 1824b60:	e0bffb17 	ldw	r2,-20(fp)
 1824b64:	10800117 	ldw	r2,4(r2)
 1824b68:	18bff736 	bltu	r3,r2,1824b48 <__ram_exceptions_end+0xff814858>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1824b6c:	e0bffb17 	ldw	r2,-20(fp)
 1824b70:	10c00c17 	ldw	r3,48(r2)
 1824b74:	e0bff517 	ldw	r2,-44(fp)
 1824b78:	18800726 	beq	r3,r2,1824b98 <altera_avalon_jtag_uart_read+0x184>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1824b7c:	e0bffd17 	ldw	r2,-12(fp)
 1824b80:	00bfb716 	blt	zero,r2,1824a60 <__ram_exceptions_end+0xff814770>
 1824b84:	00000506 	br	1824b9c <altera_avalon_jtag_uart_read+0x188>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1824b88:	0001883a 	nop
 1824b8c:	00000306 	br	1824b9c <altera_avalon_jtag_uart_read+0x188>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1824b90:	0001883a 	nop
 1824b94:	00000106 	br	1824b9c <altera_avalon_jtag_uart_read+0x188>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1824b98:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 1824b9c:	e0bffb17 	ldw	r2,-20(fp)
 1824ba0:	10800a17 	ldw	r2,40(r2)
 1824ba4:	000f883a 	mov	r7,zero
 1824ba8:	000d883a 	mov	r6,zero
 1824bac:	000b883a 	mov	r5,zero
 1824bb0:	1009883a 	mov	r4,r2
 1824bb4:	180d9880 	call	180d988 <xQueueGenericSend>

  if (ptr != buffer)
 1824bb8:	e0fff217 	ldw	r3,-56(fp)
 1824bbc:	e0bffc17 	ldw	r2,-16(fp)
 1824bc0:	18801826 	beq	r3,r2,1824c24 <altera_avalon_jtag_uart_read+0x210>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1824bc4:	0005303a 	rdctl	r2,status
 1824bc8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1824bcc:	e0fff817 	ldw	r3,-32(fp)
 1824bd0:	00bfff84 	movi	r2,-2
 1824bd4:	1884703a 	and	r2,r3,r2
 1824bd8:	1001703a 	wrctl	status,r2
  
  return context;
 1824bdc:	e0bff817 	ldw	r2,-32(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1824be0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1824be4:	e0bffb17 	ldw	r2,-20(fp)
 1824be8:	10800817 	ldw	r2,32(r2)
 1824bec:	10c00054 	ori	r3,r2,1
 1824bf0:	e0bffb17 	ldw	r2,-20(fp)
 1824bf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1824bf8:	e0bffb17 	ldw	r2,-20(fp)
 1824bfc:	10800017 	ldw	r2,0(r2)
 1824c00:	10800104 	addi	r2,r2,4
 1824c04:	1007883a 	mov	r3,r2
 1824c08:	e0bffb17 	ldw	r2,-20(fp)
 1824c0c:	10800817 	ldw	r2,32(r2)
 1824c10:	18800035 	stwio	r2,0(r3)
 1824c14:	e0bff717 	ldw	r2,-36(fp)
 1824c18:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1824c1c:	e0bff417 	ldw	r2,-48(fp)
 1824c20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1824c24:	e0fff217 	ldw	r3,-56(fp)
 1824c28:	e0bffc17 	ldw	r2,-16(fp)
 1824c2c:	18800426 	beq	r3,r2,1824c40 <altera_avalon_jtag_uart_read+0x22c>
    return ptr - buffer;
 1824c30:	e0fff217 	ldw	r3,-56(fp)
 1824c34:	e0bffc17 	ldw	r2,-16(fp)
 1824c38:	1885c83a 	sub	r2,r3,r2
 1824c3c:	00000606 	br	1824c58 <altera_avalon_jtag_uart_read+0x244>
  else if (flags & O_NONBLOCK)
 1824c40:	e0bffe17 	ldw	r2,-8(fp)
 1824c44:	1090000c 	andi	r2,r2,16384
 1824c48:	10000226 	beq	r2,zero,1824c54 <altera_avalon_jtag_uart_read+0x240>
    return -EWOULDBLOCK;
 1824c4c:	00bffd44 	movi	r2,-11
 1824c50:	00000106 	br	1824c58 <altera_avalon_jtag_uart_read+0x244>
  else
    return -EIO;
 1824c54:	00bffec4 	movi	r2,-5
}
 1824c58:	e037883a 	mov	sp,fp
 1824c5c:	dfc00117 	ldw	ra,4(sp)
 1824c60:	df000017 	ldw	fp,0(sp)
 1824c64:	dec00204 	addi	sp,sp,8
 1824c68:	f800283a 	ret

01824c6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1824c6c:	defff004 	addi	sp,sp,-64
 1824c70:	dfc00f15 	stw	ra,60(sp)
 1824c74:	df000e15 	stw	fp,56(sp)
 1824c78:	df000e04 	addi	fp,sp,56
 1824c7c:	e13ffb15 	stw	r4,-20(fp)
 1824c80:	e17ffc15 	stw	r5,-16(fp)
 1824c84:	e1bffd15 	stw	r6,-12(fp)
 1824c88:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1824c8c:	e03ff215 	stw	zero,-56(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1824c90:	e0bffc17 	ldw	r2,-16(fp)
 1824c94:	e0bff415 	stw	r2,-48(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 1824c98:	e0bffb17 	ldw	r2,-20(fp)
 1824c9c:	10800b17 	ldw	r2,44(r2)
 1824ca0:	e0bff915 	stw	r2,-28(fp)
 1824ca4:	e03ffa0d 	sth	zero,-24(fp)
 1824ca8:	e0bffa0b 	ldhu	r2,-24(fp)
 1824cac:	100b883a 	mov	r5,r2
 1824cb0:	e13ff917 	ldw	r4,-28(fp)
 1824cb4:	180df140 	call	180df14 <xQueueSemaphoreTake>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1824cb8:	00003706 	br	1824d98 <altera_avalon_jtag_uart_write+0x12c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1824cbc:	e0bffb17 	ldw	r2,-20(fp)
 1824cc0:	10800e17 	ldw	r2,56(r2)
 1824cc4:	e0bff615 	stw	r2,-40(fp)
      out = sp->tx_out;
 1824cc8:	e0bffb17 	ldw	r2,-20(fp)
 1824ccc:	10800f17 	ldw	r2,60(r2)
 1824cd0:	e0bff215 	stw	r2,-56(fp)

      if (in < out)
 1824cd4:	e0fff617 	ldw	r3,-40(fp)
 1824cd8:	e0bff217 	ldw	r2,-56(fp)
 1824cdc:	1880062e 	bgeu	r3,r2,1824cf8 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 1824ce0:	e0fff217 	ldw	r3,-56(fp)
 1824ce4:	e0bff617 	ldw	r2,-40(fp)
 1824ce8:	1885c83a 	sub	r2,r3,r2
 1824cec:	10bfffc4 	addi	r2,r2,-1
 1824cf0:	e0bff315 	stw	r2,-52(fp)
 1824cf4:	00000b06 	br	1824d24 <altera_avalon_jtag_uart_write+0xb8>
      else if (out > 0)
 1824cf8:	e0bff217 	ldw	r2,-56(fp)
 1824cfc:	10000526 	beq	r2,zero,1824d14 <altera_avalon_jtag_uart_write+0xa8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1824d00:	00c20004 	movi	r3,2048
 1824d04:	e0bff617 	ldw	r2,-40(fp)
 1824d08:	1885c83a 	sub	r2,r3,r2
 1824d0c:	e0bff315 	stw	r2,-52(fp)
 1824d10:	00000406 	br	1824d24 <altera_avalon_jtag_uart_write+0xb8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1824d14:	00c1ffc4 	movi	r3,2047
 1824d18:	e0bff617 	ldw	r2,-40(fp)
 1824d1c:	1885c83a 	sub	r2,r3,r2
 1824d20:	e0bff315 	stw	r2,-52(fp)

      if (n == 0)
 1824d24:	e0bff317 	ldw	r2,-52(fp)
 1824d28:	10001e26 	beq	r2,zero,1824da4 <altera_avalon_jtag_uart_write+0x138>
        break;

      if (n > count)
 1824d2c:	e0fffd17 	ldw	r3,-12(fp)
 1824d30:	e0bff317 	ldw	r2,-52(fp)
 1824d34:	1880022e 	bgeu	r3,r2,1824d40 <altera_avalon_jtag_uart_write+0xd4>
        n = count;
 1824d38:	e0bffd17 	ldw	r2,-12(fp)
 1824d3c:	e0bff315 	stw	r2,-52(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1824d40:	e0bffb17 	ldw	r2,-20(fp)
 1824d44:	10c21004 	addi	r3,r2,2112
 1824d48:	e0bff617 	ldw	r2,-40(fp)
 1824d4c:	1885883a 	add	r2,r3,r2
 1824d50:	e1bff317 	ldw	r6,-52(fp)
 1824d54:	e17ffc17 	ldw	r5,-16(fp)
 1824d58:	1009883a 	mov	r4,r2
 1824d5c:	1805f980 	call	1805f98 <memcpy>
      ptr   += n;
 1824d60:	e0fffc17 	ldw	r3,-16(fp)
 1824d64:	e0bff317 	ldw	r2,-52(fp)
 1824d68:	1885883a 	add	r2,r3,r2
 1824d6c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1824d70:	e0fffd17 	ldw	r3,-12(fp)
 1824d74:	e0bff317 	ldw	r2,-52(fp)
 1824d78:	1885c83a 	sub	r2,r3,r2
 1824d7c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1824d80:	e0fff617 	ldw	r3,-40(fp)
 1824d84:	e0bff317 	ldw	r2,-52(fp)
 1824d88:	1885883a 	add	r2,r3,r2
 1824d8c:	10c1ffcc 	andi	r3,r2,2047
 1824d90:	e0bffb17 	ldw	r2,-20(fp)
 1824d94:	10c00e15 	stw	r3,56(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1824d98:	e0bffd17 	ldw	r2,-12(fp)
 1824d9c:	00bfc716 	blt	zero,r2,1824cbc <__ram_exceptions_end+0xff8149cc>
 1824da0:	00000106 	br	1824da8 <altera_avalon_jtag_uart_write+0x13c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1824da4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1824da8:	0005303a 	rdctl	r2,status
 1824dac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1824db0:	e0fff817 	ldw	r3,-32(fp)
 1824db4:	00bfff84 	movi	r2,-2
 1824db8:	1884703a 	and	r2,r3,r2
 1824dbc:	1001703a 	wrctl	status,r2
  
  return context;
 1824dc0:	e0bff817 	ldw	r2,-32(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1824dc4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1824dc8:	e0bffb17 	ldw	r2,-20(fp)
 1824dcc:	10800817 	ldw	r2,32(r2)
 1824dd0:	10c00094 	ori	r3,r2,2
 1824dd4:	e0bffb17 	ldw	r2,-20(fp)
 1824dd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1824ddc:	e0bffb17 	ldw	r2,-20(fp)
 1824de0:	10800017 	ldw	r2,0(r2)
 1824de4:	10800104 	addi	r2,r2,4
 1824de8:	1007883a 	mov	r3,r2
 1824dec:	e0bffb17 	ldw	r2,-20(fp)
 1824df0:	10800817 	ldw	r2,32(r2)
 1824df4:	18800035 	stwio	r2,0(r3)
 1824df8:	e0bff717 	ldw	r2,-36(fp)
 1824dfc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1824e00:	e0bff517 	ldw	r2,-44(fp)
 1824e04:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1824e08:	e0bffd17 	ldw	r2,-12(fp)
 1824e0c:	0080100e 	bge	zero,r2,1824e50 <altera_avalon_jtag_uart_write+0x1e4>
    {
      if (flags & O_NONBLOCK)
 1824e10:	e0bffe17 	ldw	r2,-8(fp)
 1824e14:	1090000c 	andi	r2,r2,16384
 1824e18:	1000101e 	bne	r2,zero,1824e5c <altera_avalon_jtag_uart_write+0x1f0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1824e1c:	0001883a 	nop
 1824e20:	e0bffb17 	ldw	r2,-20(fp)
 1824e24:	10c00f17 	ldw	r3,60(r2)
 1824e28:	e0bff217 	ldw	r2,-56(fp)
 1824e2c:	1880051e 	bne	r3,r2,1824e44 <altera_avalon_jtag_uart_write+0x1d8>
 1824e30:	e0bffb17 	ldw	r2,-20(fp)
 1824e34:	10c00917 	ldw	r3,36(r2)
 1824e38:	e0bffb17 	ldw	r2,-20(fp)
 1824e3c:	10800117 	ldw	r2,4(r2)
 1824e40:	18bff736 	bltu	r3,r2,1824e20 <__ram_exceptions_end+0xff814b30>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1824e44:	e0bffb17 	ldw	r2,-20(fp)
 1824e48:	10800917 	ldw	r2,36(r2)
 1824e4c:	1000051e 	bne	r2,zero,1824e64 <altera_avalon_jtag_uart_write+0x1f8>
         break;
    }
  }
  while (count > 0);
 1824e50:	e0bffd17 	ldw	r2,-12(fp)
 1824e54:	00bfd016 	blt	zero,r2,1824d98 <__ram_exceptions_end+0xff814aa8>
 1824e58:	00000306 	br	1824e68 <altera_avalon_jtag_uart_write+0x1fc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1824e5c:	0001883a 	nop
 1824e60:	00000106 	br	1824e68 <altera_avalon_jtag_uart_write+0x1fc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1824e64:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 1824e68:	e0bffb17 	ldw	r2,-20(fp)
 1824e6c:	10800b17 	ldw	r2,44(r2)
 1824e70:	000f883a 	mov	r7,zero
 1824e74:	000d883a 	mov	r6,zero
 1824e78:	000b883a 	mov	r5,zero
 1824e7c:	1009883a 	mov	r4,r2
 1824e80:	180d9880 	call	180d988 <xQueueGenericSend>

  if (ptr != start)
 1824e84:	e0fffc17 	ldw	r3,-16(fp)
 1824e88:	e0bff417 	ldw	r2,-48(fp)
 1824e8c:	18800426 	beq	r3,r2,1824ea0 <altera_avalon_jtag_uart_write+0x234>
    return ptr - start;
 1824e90:	e0fffc17 	ldw	r3,-16(fp)
 1824e94:	e0bff417 	ldw	r2,-48(fp)
 1824e98:	1885c83a 	sub	r2,r3,r2
 1824e9c:	00000606 	br	1824eb8 <altera_avalon_jtag_uart_write+0x24c>
  else if (flags & O_NONBLOCK)
 1824ea0:	e0bffe17 	ldw	r2,-8(fp)
 1824ea4:	1090000c 	andi	r2,r2,16384
 1824ea8:	10000226 	beq	r2,zero,1824eb4 <altera_avalon_jtag_uart_write+0x248>
    return -EWOULDBLOCK;
 1824eac:	00bffd44 	movi	r2,-11
 1824eb0:	00000106 	br	1824eb8 <altera_avalon_jtag_uart_write+0x24c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1824eb4:	00bffec4 	movi	r2,-5
}
 1824eb8:	e037883a 	mov	sp,fp
 1824ebc:	dfc00117 	ldw	ra,4(sp)
 1824ec0:	df000017 	ldw	fp,0(sp)
 1824ec4:	dec00204 	addi	sp,sp,8
 1824ec8:	f800283a 	ret

01824ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1824ecc:	defffe04 	addi	sp,sp,-8
 1824ed0:	dfc00115 	stw	ra,4(sp)
 1824ed4:	df000015 	stw	fp,0(sp)
 1824ed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1824edc:	d0a01a17 	ldw	r2,-32664(gp)
 1824ee0:	10000326 	beq	r2,zero,1824ef0 <alt_get_errno+0x24>
 1824ee4:	d0a01a17 	ldw	r2,-32664(gp)
 1824ee8:	103ee83a 	callr	r2
 1824eec:	00000106 	br	1824ef4 <alt_get_errno+0x28>
 1824ef0:	d0a7ce04 	addi	r2,gp,-24776
}
 1824ef4:	e037883a 	mov	sp,fp
 1824ef8:	dfc00117 	ldw	ra,4(sp)
 1824efc:	df000017 	ldw	fp,0(sp)
 1824f00:	dec00204 	addi	sp,sp,8
 1824f04:	f800283a 	ret

01824f08 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 1824f08:	defffc04 	addi	sp,sp,-16
 1824f0c:	df000315 	stw	fp,12(sp)
 1824f10:	df000304 	addi	fp,sp,12
 1824f14:	e13ffe15 	stw	r4,-8(fp)
 1824f18:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 1824f1c:	e0bffe17 	ldw	r2,-8(fp)
 1824f20:	10800317 	ldw	r2,12(r2)
 1824f24:	10800037 	ldwio	r2,0(r2)
 1824f28:	1080040c 	andi	r2,r2,16
 1824f2c:	10000226 	beq	r2,zero,1824f38 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 1824f30:	00bffc04 	movi	r2,-16
 1824f34:	00003906 	br	182501c <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 1824f38:	e0bffe17 	ldw	r2,-8(fp)
 1824f3c:	10800317 	ldw	r2,12(r2)
 1824f40:	10800404 	addi	r2,r2,16
 1824f44:	e0fffe17 	ldw	r3,-8(fp)
 1824f48:	18c00317 	ldw	r3,12(r3)
 1824f4c:	18c00404 	addi	r3,r3,16
 1824f50:	19000037 	ldwio	r4,0(r3)
 1824f54:	00fff7c4 	movi	r3,-33
 1824f58:	20c6703a 	and	r3,r4,r3
 1824f5c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 1824f60:	e0bffe17 	ldw	r2,-8(fp)
 1824f64:	10800317 	ldw	r2,12(r2)
 1824f68:	00c03fc4 	movi	r3,255
 1824f6c:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 1824f70:	e0bffe17 	ldw	r2,-8(fp)
 1824f74:	10800317 	ldw	r2,12(r2)
 1824f78:	10800804 	addi	r2,r2,32
 1824f7c:	e0ffff17 	ldw	r3,-4(fp)
 1824f80:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 1824f84:	e0bffe17 	ldw	r2,-8(fp)
 1824f88:	10800917 	ldw	r2,36(r2)
 1824f8c:	10001126 	beq	r2,zero,1824fd4 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 1824f90:	e0bffe17 	ldw	r2,-8(fp)
 1824f94:	10800317 	ldw	r2,12(r2)
 1824f98:	10800404 	addi	r2,r2,16
 1824f9c:	10800037 	ldwio	r2,0(r2)
 1824fa0:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
 1824fa4:	e0bffe17 	ldw	r2,-8(fp)
 1824fa8:	10c00b17 	ldw	r3,44(r2)
 1824fac:	e0bffd17 	ldw	r2,-12(fp)
 1824fb0:	1884b03a 	or	r2,r3,r2
 1824fb4:	10801814 	ori	r2,r2,96
 1824fb8:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 1824fbc:	e0bffe17 	ldw	r2,-8(fp)
 1824fc0:	10800317 	ldw	r2,12(r2)
 1824fc4:	10800404 	addi	r2,r2,16
 1824fc8:	e0fffd17 	ldw	r3,-12(fp)
 1824fcc:	10c00035 	stwio	r3,0(r2)
 1824fd0:	00001106 	br	1825018 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 1824fd4:	e0bffe17 	ldw	r2,-8(fp)
 1824fd8:	10800317 	ldw	r2,12(r2)
 1824fdc:	10800404 	addi	r2,r2,16
 1824fe0:	10800037 	ldwio	r2,0(r2)
 1824fe4:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 1824fe8:	e0bffd17 	ldw	r2,-12(fp)
 1824fec:	10801814 	ori	r2,r2,96
 1824ff0:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 1824ff4:	e0fffd17 	ldw	r3,-12(fp)
 1824ff8:	00bffbc4 	movi	r2,-17
 1824ffc:	1884703a 	and	r2,r3,r2
 1825000:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 1825004:	e0bffe17 	ldw	r2,-8(fp)
 1825008:	10800317 	ldw	r2,12(r2)
 182500c:	10800404 	addi	r2,r2,16
 1825010:	e0fffd17 	ldw	r3,-12(fp)
 1825014:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 1825018:	0005883a 	mov	r2,zero
}
 182501c:	e037883a 	mov	sp,fp
 1825020:	df000017 	ldw	fp,0(sp)
 1825024:	dec00104 	addi	sp,sp,4
 1825028:	f800283a 	ret

0182502c <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 182502c:	defffc04 	addi	sp,sp,-16
 1825030:	df000315 	stw	fp,12(sp)
 1825034:	df000304 	addi	fp,sp,12
 1825038:	e13ffe15 	stw	r4,-8(fp)
 182503c:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 1825040:	0001883a 	nop
 1825044:	e0bffe17 	ldw	r2,-8(fp)
 1825048:	10800317 	ldw	r2,12(r2)
 182504c:	10800037 	ldwio	r2,0(r2)
 1825050:	1080040c 	andi	r2,r2,16
 1825054:	103ffb1e 	bne	r2,zero,1825044 <__ram_exceptions_end+0xff814d54>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 1825058:	e0bffe17 	ldw	r2,-8(fp)
 182505c:	10800317 	ldw	r2,12(r2)
 1825060:	10800404 	addi	r2,r2,16
 1825064:	e0fffe17 	ldw	r3,-8(fp)
 1825068:	18c00317 	ldw	r3,12(r3)
 182506c:	18c00404 	addi	r3,r3,16
 1825070:	19000037 	ldwio	r4,0(r3)
 1825074:	00fff7c4 	movi	r3,-33
 1825078:	20c6703a 	and	r3,r4,r3
 182507c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 1825080:	e0bffe17 	ldw	r2,-8(fp)
 1825084:	10800317 	ldw	r2,12(r2)
 1825088:	00c03fc4 	movi	r3,255
 182508c:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 1825090:	e0bffe17 	ldw	r2,-8(fp)
 1825094:	10800317 	ldw	r2,12(r2)
 1825098:	10800804 	addi	r2,r2,32
 182509c:	e0ffff17 	ldw	r3,-4(fp)
 18250a0:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 18250a4:	e0bffe17 	ldw	r2,-8(fp)
 18250a8:	10800317 	ldw	r2,12(r2)
 18250ac:	10800404 	addi	r2,r2,16
 18250b0:	e0fffe17 	ldw	r3,-8(fp)
 18250b4:	18c00317 	ldw	r3,12(r3)
 18250b8:	18c00404 	addi	r3,r3,16
 18250bc:	18c00037 	ldwio	r3,0(r3)
 18250c0:	18c01814 	ori	r3,r3,96
 18250c4:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 18250c8:	0001883a 	nop
 18250cc:	e0bffe17 	ldw	r2,-8(fp)
 18250d0:	10800317 	ldw	r2,12(r2)
 18250d4:	10800037 	ldwio	r2,0(r2)
 18250d8:	1080040c 	andi	r2,r2,16
 18250dc:	103ffb1e 	bne	r2,zero,18250cc <__ram_exceptions_end+0xff814ddc>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 18250e0:	e0bffe17 	ldw	r2,-8(fp)
 18250e4:	10800317 	ldw	r2,12(r2)
 18250e8:	10800404 	addi	r2,r2,16
 18250ec:	e0fffe17 	ldw	r3,-8(fp)
 18250f0:	18c00317 	ldw	r3,12(r3)
 18250f4:	18c00404 	addi	r3,r3,16
 18250f8:	19000037 	ldwio	r4,0(r3)
 18250fc:	00fff7c4 	movi	r3,-33
 1825100:	20c6703a 	and	r3,r4,r3
 1825104:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 1825108:	e0bffe17 	ldw	r2,-8(fp)
 182510c:	10800317 	ldw	r2,12(r2)
 1825110:	10800037 	ldwio	r2,0(r2)
 1825114:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 1825118:	e0bffe17 	ldw	r2,-8(fp)
 182511c:	10800317 	ldw	r2,12(r2)
 1825120:	00c03fc4 	movi	r3,255
 1825124:	10c00035 	stwio	r3,0(r2)

  return status;
 1825128:	e0bffd03 	ldbu	r2,-12(fp)
}
 182512c:	e037883a 	mov	sp,fp
 1825130:	df000017 	ldw	fp,0(sp)
 1825134:	dec00104 	addi	sp,sp,4
 1825138:	f800283a 	ret

0182513c <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 182513c:	defff404 	addi	sp,sp,-48
 1825140:	dfc00b15 	stw	ra,44(sp)
 1825144:	df000a15 	stw	fp,40(sp)
 1825148:	df000a04 	addi	fp,sp,40
 182514c:	e13ffb15 	stw	r4,-20(fp)
 1825150:	e17ffc15 	stw	r5,-16(fp)
 1825154:	e1bffd15 	stw	r6,-12(fp)
 1825158:	e1fffe15 	stw	r7,-8(fp)
 182515c:	e0800217 	ldw	r2,8(fp)
 1825160:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 1825164:	e0bfff0b 	ldhu	r2,-4(fp)
 1825168:	d8000415 	stw	zero,16(sp)
 182516c:	d8000315 	stw	zero,12(sp)
 1825170:	e0c00417 	ldw	r3,16(fp)
 1825174:	d8c00215 	stw	r3,8(sp)
 1825178:	e0c00317 	ldw	r3,12(fp)
 182517c:	d8c00115 	stw	r3,4(sp)
 1825180:	d8800015 	stw	r2,0(sp)
 1825184:	e1fffe17 	ldw	r7,-8(fp)
 1825188:	e1bffd17 	ldw	r6,-12(fp)
 182518c:	e17ffc17 	ldw	r5,-16(fp)
 1825190:	e13ffb17 	ldw	r4,-20(fp)
 1825194:	18251b00 	call	18251b0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 1825198:	0001883a 	nop
 182519c:	e037883a 	mov	sp,fp
 18251a0:	dfc00117 	ldw	ra,4(sp)
 18251a4:	df000017 	ldw	fp,0(sp)
 18251a8:	dec00204 	addi	sp,sp,8
 18251ac:	f800283a 	ret

018251b0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 18251b0:	defff204 	addi	sp,sp,-56
 18251b4:	dfc00d15 	stw	ra,52(sp)
 18251b8:	df000c15 	stw	fp,48(sp)
 18251bc:	df000c04 	addi	fp,sp,48
 18251c0:	e13ffb15 	stw	r4,-20(fp)
 18251c4:	e17ffc15 	stw	r5,-16(fp)
 18251c8:	e1bffd15 	stw	r6,-12(fp)
 18251cc:	e1fffe15 	stw	r7,-8(fp)
 18251d0:	e0800217 	ldw	r2,8(fp)
 18251d4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 18251d8:	e0bfff0b 	ldhu	r2,-4(fp)
 18251dc:	d8000615 	stw	zero,24(sp)
 18251e0:	e0c00617 	ldw	r3,24(fp)
 18251e4:	d8c00515 	stw	r3,20(sp)
 18251e8:	e0c00517 	ldw	r3,20(fp)
 18251ec:	d8c00415 	stw	r3,16(sp)
 18251f0:	e0c00417 	ldw	r3,16(fp)
 18251f4:	d8c00315 	stw	r3,12(sp)
 18251f8:	e0c00317 	ldw	r3,12(fp)
 18251fc:	d8c00215 	stw	r3,8(sp)
 1825200:	d8000115 	stw	zero,4(sp)
 1825204:	d8800015 	stw	r2,0(sp)
 1825208:	e1fffe17 	ldw	r7,-8(fp)
 182520c:	e1bffd17 	ldw	r6,-12(fp)
 1825210:	e17ffc17 	ldw	r5,-16(fp)
 1825214:	e13ffb17 	ldw	r4,-20(fp)
 1825218:	18257440 	call	1825744 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 182521c:	0001883a 	nop
 1825220:	e037883a 	mov	sp,fp
 1825224:	dfc00117 	ldw	ra,4(sp)
 1825228:	df000017 	ldw	fp,0(sp)
 182522c:	dec00204 	addi	sp,sp,8
 1825230:	f800283a 	ret

01825234 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 1825234:	defff804 	addi	sp,sp,-32
 1825238:	dfc00715 	stw	ra,28(sp)
 182523c:	df000615 	stw	fp,24(sp)
 1825240:	df000604 	addi	fp,sp,24
 1825244:	e13ffc15 	stw	r4,-16(fp)
 1825248:	e17ffd15 	stw	r5,-12(fp)
 182524c:	e1bffe15 	stw	r6,-8(fp)
 1825250:	3805883a 	mov	r2,r7
 1825254:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 1825258:	e0ffff0b 	ldhu	r3,-4(fp)
 182525c:	d8000115 	stw	zero,4(sp)
 1825260:	e0800217 	ldw	r2,8(fp)
 1825264:	d8800015 	stw	r2,0(sp)
 1825268:	180f883a 	mov	r7,r3
 182526c:	e1bffe17 	ldw	r6,-8(fp)
 1825270:	e17ffd17 	ldw	r5,-12(fp)
 1825274:	e13ffc17 	ldw	r4,-16(fp)
 1825278:	18252940 	call	1825294 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 182527c:	0001883a 	nop
 1825280:	e037883a 	mov	sp,fp
 1825284:	dfc00117 	ldw	ra,4(sp)
 1825288:	df000017 	ldw	fp,0(sp)
 182528c:	dec00204 	addi	sp,sp,8
 1825290:	f800283a 	ret

01825294 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 1825294:	defff304 	addi	sp,sp,-52
 1825298:	dfc00c15 	stw	ra,48(sp)
 182529c:	df000b15 	stw	fp,44(sp)
 18252a0:	df000b04 	addi	fp,sp,44
 18252a4:	e13ffc15 	stw	r4,-16(fp)
 18252a8:	e17ffd15 	stw	r5,-12(fp)
 18252ac:	e1bffe15 	stw	r6,-8(fp)
 18252b0:	3805883a 	mov	r2,r7
 18252b4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 18252b8:	e0bfff0b 	ldhu	r2,-4(fp)
 18252bc:	d8000615 	stw	zero,24(sp)
 18252c0:	e0c00317 	ldw	r3,12(fp)
 18252c4:	d8c00515 	stw	r3,20(sp)
 18252c8:	d8000415 	stw	zero,16(sp)
 18252cc:	e0c00217 	ldw	r3,8(fp)
 18252d0:	d8c00315 	stw	r3,12(sp)
 18252d4:	d8000215 	stw	zero,8(sp)
 18252d8:	d8000115 	stw	zero,4(sp)
 18252dc:	d8800015 	stw	r2,0(sp)
 18252e0:	e1fffe17 	ldw	r7,-8(fp)
 18252e4:	000d883a 	mov	r6,zero
 18252e8:	e17ffd17 	ldw	r5,-12(fp)
 18252ec:	e13ffc17 	ldw	r4,-16(fp)
 18252f0:	18257440 	call	1825744 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 18252f4:	0001883a 	nop
 18252f8:	e037883a 	mov	sp,fp
 18252fc:	dfc00117 	ldw	ra,4(sp)
 1825300:	df000017 	ldw	fp,0(sp)
 1825304:	dec00204 	addi	sp,sp,8
 1825308:	f800283a 	ret

0182530c <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 182530c:	defff404 	addi	sp,sp,-48
 1825310:	dfc00b15 	stw	ra,44(sp)
 1825314:	df000a15 	stw	fp,40(sp)
 1825318:	df000a04 	addi	fp,sp,40
 182531c:	e13ffb15 	stw	r4,-20(fp)
 1825320:	e17ffc15 	stw	r5,-16(fp)
 1825324:	e1bffd15 	stw	r6,-12(fp)
 1825328:	3807883a 	mov	r3,r7
 182532c:	e0800517 	ldw	r2,20(fp)
 1825330:	e0fffe0d 	sth	r3,-8(fp)
 1825334:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 1825338:	e0fffe0b 	ldhu	r3,-8(fp)
 182533c:	e0bfff03 	ldbu	r2,-4(fp)
 1825340:	d8800415 	stw	r2,16(sp)
 1825344:	d8000315 	stw	zero,12(sp)
 1825348:	e0800417 	ldw	r2,16(fp)
 182534c:	d8800215 	stw	r2,8(sp)
 1825350:	e0800317 	ldw	r2,12(fp)
 1825354:	d8800115 	stw	r2,4(sp)
 1825358:	e0800217 	ldw	r2,8(fp)
 182535c:	d8800015 	stw	r2,0(sp)
 1825360:	180f883a 	mov	r7,r3
 1825364:	e1bffd17 	ldw	r6,-12(fp)
 1825368:	e17ffc17 	ldw	r5,-16(fp)
 182536c:	e13ffb17 	ldw	r4,-20(fp)
 1825370:	182538c0 	call	182538c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 1825374:	0001883a 	nop
 1825378:	e037883a 	mov	sp,fp
 182537c:	dfc00117 	ldw	ra,4(sp)
 1825380:	df000017 	ldw	fp,0(sp)
 1825384:	dec00204 	addi	sp,sp,8
 1825388:	f800283a 	ret

0182538c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 182538c:	defff204 	addi	sp,sp,-56
 1825390:	dfc00d15 	stw	ra,52(sp)
 1825394:	df000c15 	stw	fp,48(sp)
 1825398:	df000c04 	addi	fp,sp,48
 182539c:	e13ffb15 	stw	r4,-20(fp)
 18253a0:	e17ffc15 	stw	r5,-16(fp)
 18253a4:	e1bffd15 	stw	r6,-12(fp)
 18253a8:	3807883a 	mov	r3,r7
 18253ac:	e0800617 	ldw	r2,24(fp)
 18253b0:	e0fffe0d 	sth	r3,-8(fp)
 18253b4:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 18253b8:	e0bffe0b 	ldhu	r2,-8(fp)
 18253bc:	e0ffff03 	ldbu	r3,-4(fp)
 18253c0:	d8c00615 	stw	r3,24(sp)
 18253c4:	d8000515 	stw	zero,20(sp)
 18253c8:	e0c00517 	ldw	r3,20(fp)
 18253cc:	d8c00415 	stw	r3,16(sp)
 18253d0:	e0c00317 	ldw	r3,12(fp)
 18253d4:	d8c00315 	stw	r3,12(sp)
 18253d8:	e0c00217 	ldw	r3,8(fp)
 18253dc:	d8c00215 	stw	r3,8(sp)
 18253e0:	e0c00417 	ldw	r3,16(fp)
 18253e4:	d8c00115 	stw	r3,4(sp)
 18253e8:	d8800015 	stw	r2,0(sp)
 18253ec:	000f883a 	mov	r7,zero
 18253f0:	e1bffd17 	ldw	r6,-12(fp)
 18253f4:	e17ffc17 	ldw	r5,-16(fp)
 18253f8:	e13ffb17 	ldw	r4,-20(fp)
 18253fc:	18257440 	call	1825744 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 1825400:	0001883a 	nop
 1825404:	e037883a 	mov	sp,fp
 1825408:	dfc00117 	ldw	ra,4(sp)
 182540c:	df000017 	ldw	fp,0(sp)
 1825410:	dec00204 	addi	sp,sp,8
 1825414:	f800283a 	ret

01825418 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 1825418:	defffb04 	addi	sp,sp,-20
 182541c:	df000415 	stw	fp,16(sp)
 1825420:	df000404 	addi	fp,sp,16
 1825424:	e13ffc15 	stw	r4,-16(fp)
 1825428:	e17ffd15 	stw	r5,-12(fp)
 182542c:	e1bffe15 	stw	r6,-8(fp)
 1825430:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 1825434:	e0bffc17 	ldw	r2,-16(fp)
 1825438:	e0fffd17 	ldw	r3,-12(fp)
 182543c:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
 1825440:	e0bffc17 	ldw	r2,-16(fp)
 1825444:	e0ffff17 	ldw	r3,-4(fp)
 1825448:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
 182544c:	e0bffc17 	ldw	r2,-16(fp)
 1825450:	e0fffe17 	ldw	r3,-8(fp)
 1825454:	10c00b15 	stw	r3,44(r2)
}
 1825458:	0001883a 	nop
 182545c:	e037883a 	mov	sp,fp
 1825460:	df000017 	ldw	fp,0(sp)
 1825464:	dec00104 	addi	sp,sp,4
 1825468:	f800283a 	ret

0182546c <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 182546c:	defffd04 	addi	sp,sp,-12
 1825470:	df000215 	stw	fp,8(sp)
 1825474:	df000204 	addi	fp,sp,8
 1825478:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 182547c:	e0bfff17 	ldw	r2,-4(fp)
 1825480:	10800317 	ldw	r2,12(r2)
 1825484:	10800404 	addi	r2,r2,16
 1825488:	10800037 	ldwio	r2,0(r2)
 182548c:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 1825490:	e0bffe17 	ldw	r2,-8(fp)
 1825494:	10800814 	ori	r2,r2,32
 1825498:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 182549c:	e0bfff17 	ldw	r2,-4(fp)
 18254a0:	10800317 	ldw	r2,12(r2)
 18254a4:	10800404 	addi	r2,r2,16
 18254a8:	e0fffe17 	ldw	r3,-8(fp)
 18254ac:	10c00035 	stwio	r3,0(r2)
}
 18254b0:	0001883a 	nop
 18254b4:	e037883a 	mov	sp,fp
 18254b8:	df000017 	ldw	fp,0(sp)
 18254bc:	dec00104 	addi	sp,sp,4
 18254c0:	f800283a 	ret

018254c4 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 18254c4:	defffd04 	addi	sp,sp,-12
 18254c8:	df000215 	stw	fp,8(sp)
 18254cc:	df000204 	addi	fp,sp,8
 18254d0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 18254d4:	e0bfff17 	ldw	r2,-4(fp)
 18254d8:	10800317 	ldw	r2,12(r2)
 18254dc:	10800404 	addi	r2,r2,16
 18254e0:	10800037 	ldwio	r2,0(r2)
 18254e4:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 18254e8:	e0fffe17 	ldw	r3,-8(fp)
 18254ec:	00bff7c4 	movi	r2,-33
 18254f0:	1884703a 	and	r2,r3,r2
 18254f4:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 18254f8:	e0bfff17 	ldw	r2,-4(fp)
 18254fc:	10800317 	ldw	r2,12(r2)
 1825500:	10800404 	addi	r2,r2,16
 1825504:	e0fffe17 	ldw	r3,-8(fp)
 1825508:	10c00035 	stwio	r3,0(r2)
}
 182550c:	0001883a 	nop
 1825510:	e037883a 	mov	sp,fp
 1825514:	df000017 	ldw	fp,0(sp)
 1825518:	dec00104 	addi	sp,sp,4
 182551c:	f800283a 	ret

01825520 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 1825520:	defffe04 	addi	sp,sp,-8
 1825524:	df000115 	stw	fp,4(sp)
 1825528:	df000104 	addi	fp,sp,4
 182552c:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 1825530:	e0bfff17 	ldw	r2,-4(fp)
 1825534:	10800784 	addi	r2,r2,30
 1825538:	10800023 	ldbuio	r2,0(r2)
 182553c:	10803fcc 	andi	r2,r2,255
 1825540:	10801fcc 	andi	r2,r2,127
 1825544:	10000226 	beq	r2,zero,1825550 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 1825548:	00bffec4 	movi	r2,-5
 182554c:	00000906 	br	1825574 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 1825550:	e0bfff17 	ldw	r2,-4(fp)
 1825554:	108007c4 	addi	r2,r2,31
 1825558:	10800023 	ldbuio	r2,0(r2)
 182555c:	10803fcc 	andi	r2,r2,255
 1825560:	1080200c 	andi	r2,r2,128
 1825564:	10000226 	beq	r2,zero,1825570 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 1825568:	00bfe244 	movi	r2,-119
 182556c:	00000106 	br	1825574 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
 1825570:	0005883a 	mov	r2,zero
}
 1825574:	e037883a 	mov	sp,fp
 1825578:	df000017 	ldw	fp,0(sp)
 182557c:	dec00104 	addi	sp,sp,4
 1825580:	f800283a 	ret

01825584 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 1825584:	defffc04 	addi	sp,sp,-16
 1825588:	dfc00315 	stw	ra,12(sp)
 182558c:	df000215 	stw	fp,8(sp)
 1825590:	df000204 	addi	fp,sp,8
 1825594:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 1825598:	d1601704 	addi	r5,gp,-32676
 182559c:	e13fff17 	ldw	r4,-4(fp)
 18255a0:	182c2540 	call	182c254 <alt_find_dev>
 18255a4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 18255a8:	e0bffe17 	ldw	r2,-8(fp)
 18255ac:	1000041e 	bne	r2,zero,18255c0 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
 18255b0:	1824ecc0 	call	1824ecc <alt_get_errno>
 18255b4:	1007883a 	mov	r3,r2
 18255b8:	008004c4 	movi	r2,19
 18255bc:	18800015 	stw	r2,0(r3)
  }

  return dev;
 18255c0:	e0bffe17 	ldw	r2,-8(fp)
}
 18255c4:	e037883a 	mov	sp,fp
 18255c8:	dfc00117 	ldw	ra,4(sp)
 18255cc:	df000017 	ldw	fp,0(sp)
 18255d0:	dec00204 	addi	sp,sp,8
 18255d4:	f800283a 	ret

018255d8 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 18255d8:	defff104 	addi	sp,sp,-60
 18255dc:	dfc00e15 	stw	ra,56(sp)
 18255e0:	df000d15 	stw	fp,52(sp)
 18255e4:	df000d04 	addi	fp,sp,52
 18255e8:	e13ffa15 	stw	r4,-24(fp)
 18255ec:	e17ffb15 	stw	r5,-20(fp)
 18255f0:	e1bffc15 	stw	r6,-16(fp)
 18255f4:	e1fffd15 	stw	r7,-12(fp)
 18255f8:	e0c00217 	ldw	r3,8(fp)
 18255fc:	e0800617 	ldw	r2,24(fp)
 1825600:	e0fffe0d 	sth	r3,-8(fp)
 1825604:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 1825608:	e0bffe0b 	ldhu	r2,-8(fp)
 182560c:	e0ffff03 	ldbu	r3,-4(fp)
 1825610:	d8c00615 	stw	r3,24(sp)
 1825614:	d8000515 	stw	zero,20(sp)
 1825618:	d8000415 	stw	zero,16(sp)
 182561c:	e0c00517 	ldw	r3,20(fp)
 1825620:	d8c00315 	stw	r3,12(sp)
 1825624:	e0c00417 	ldw	r3,16(fp)
 1825628:	d8c00215 	stw	r3,8(sp)
 182562c:	e0c00317 	ldw	r3,12(fp)
 1825630:	d8c00115 	stw	r3,4(sp)
 1825634:	d8800015 	stw	r2,0(sp)
 1825638:	e1fffd17 	ldw	r7,-12(fp)
 182563c:	e1bffc17 	ldw	r6,-16(fp)
 1825640:	e17ffb17 	ldw	r5,-20(fp)
 1825644:	e13ffa17 	ldw	r4,-24(fp)
 1825648:	18257440 	call	1825744 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 182564c:	0001883a 	nop
 1825650:	e037883a 	mov	sp,fp
 1825654:	dfc00117 	ldw	ra,4(sp)
 1825658:	df000017 	ldw	fp,0(sp)
 182565c:	dec00204 	addi	sp,sp,8
 1825660:	f800283a 	ret

01825664 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 1825664:	defffc04 	addi	sp,sp,-16
 1825668:	df000315 	stw	fp,12(sp)
 182566c:	df000304 	addi	fp,sp,12
 1825670:	e13ffe15 	stw	r4,-8(fp)
 1825674:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 1825678:	e0bffe17 	ldw	r2,-8(fp)
 182567c:	10800317 	ldw	r2,12(r2)
 1825680:	10800404 	addi	r2,r2,16
 1825684:	10800037 	ldwio	r2,0(r2)
 1825688:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 182568c:	e0fffd17 	ldw	r3,-12(fp)
 1825690:	00a00434 	movhi	r2,32784
 1825694:	10bfffc4 	addi	r2,r2,-1
 1825698:	1884703a 	and	r2,r3,r2
 182569c:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
 18256a0:	e0bfff17 	ldw	r2,-4(fp)
 18256a4:	1004953a 	slli	r2,r2,20
 18256a8:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 18256ac:	e0bffd17 	ldw	r2,-12(fp)
 18256b0:	1884b03a 	or	r2,r3,r2
 18256b4:	10800134 	orhi	r2,r2,4
 18256b8:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 18256bc:	e0bffe17 	ldw	r2,-8(fp)
 18256c0:	10800317 	ldw	r2,12(r2)
 18256c4:	10800404 	addi	r2,r2,16
 18256c8:	e0fffd17 	ldw	r3,-12(fp)
 18256cc:	10c00035 	stwio	r3,0(r2)
  
  return;
 18256d0:	0001883a 	nop
}
 18256d4:	e037883a 	mov	sp,fp
 18256d8:	df000017 	ldw	fp,0(sp)
 18256dc:	dec00104 	addi	sp,sp,4
 18256e0:	f800283a 	ret

018256e4 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 18256e4:	defffd04 	addi	sp,sp,-12
 18256e8:	df000215 	stw	fp,8(sp)
 18256ec:	df000204 	addi	fp,sp,8
 18256f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 18256f4:	e0bfff17 	ldw	r2,-4(fp)
 18256f8:	10800317 	ldw	r2,12(r2)
 18256fc:	10800404 	addi	r2,r2,16
 1825700:	10800037 	ldwio	r2,0(r2)
 1825704:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 1825708:	e0fffe17 	ldw	r3,-8(fp)
 182570c:	00bfff34 	movhi	r2,65532
 1825710:	10bfffc4 	addi	r2,r2,-1
 1825714:	1884703a 	and	r2,r3,r2
 1825718:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 182571c:	e0bfff17 	ldw	r2,-4(fp)
 1825720:	10800317 	ldw	r2,12(r2)
 1825724:	10800404 	addi	r2,r2,16
 1825728:	e0fffe17 	ldw	r3,-8(fp)
 182572c:	10c00035 	stwio	r3,0(r2)
  
  return;
 1825730:	0001883a 	nop
}
 1825734:	e037883a 	mov	sp,fp
 1825738:	df000017 	ldw	fp,0(sp)
 182573c:	dec00104 	addi	sp,sp,4
 1825740:	f800283a 	ret

01825744 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 1825744:	defff804 	addi	sp,sp,-32
 1825748:	dfc00715 	stw	ra,28(sp)
 182574c:	df000615 	stw	fp,24(sp)
 1825750:	df000604 	addi	fp,sp,24
 1825754:	e13ffa15 	stw	r4,-24(fp)
 1825758:	e17ffb15 	stw	r5,-20(fp)
 182575c:	e1bffc15 	stw	r6,-16(fp)
 1825760:	e1fffd15 	stw	r7,-12(fp)
 1825764:	e0c00217 	ldw	r3,8(fp)
 1825768:	e0800817 	ldw	r2,32(fp)
 182576c:	e0fffe0d 	sth	r3,-8(fp)
 1825770:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 1825774:	e0bffb17 	ldw	r2,-20(fp)
 1825778:	108007c4 	addi	r2,r2,31
 182577c:	e0fffb17 	ldw	r3,-20(fp)
 1825780:	18c007c3 	ldbu	r3,31(r3)
 1825784:	19003fcc 	andi	r4,r3,255
 1825788:	00ffdfc4 	movi	r3,-129
 182578c:	20c6703a 	and	r3,r4,r3
 1825790:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 1825794:	e0bffa17 	ldw	r2,-24(fp)
 1825798:	e0fffc17 	ldw	r3,-16(fp)
 182579c:	19403fcc 	andi	r5,r3,255
 18257a0:	10c00003 	ldbu	r3,0(r2)
 18257a4:	1806703a 	and	r3,r3,zero
 18257a8:	1809883a 	mov	r4,r3
 18257ac:	2807883a 	mov	r3,r5
 18257b0:	20c6b03a 	or	r3,r4,r3
 18257b4:	10c00005 	stb	r3,0(r2)
 18257b8:	e0fffc17 	ldw	r3,-16(fp)
 18257bc:	1806d23a 	srli	r3,r3,8
 18257c0:	19403fcc 	andi	r5,r3,255
 18257c4:	10c00043 	ldbu	r3,1(r2)
 18257c8:	1806703a 	and	r3,r3,zero
 18257cc:	1809883a 	mov	r4,r3
 18257d0:	2807883a 	mov	r3,r5
 18257d4:	20c6b03a 	or	r3,r4,r3
 18257d8:	10c00045 	stb	r3,1(r2)
 18257dc:	e0fffc17 	ldw	r3,-16(fp)
 18257e0:	1806d43a 	srli	r3,r3,16
 18257e4:	19403fcc 	andi	r5,r3,255
 18257e8:	10c00083 	ldbu	r3,2(r2)
 18257ec:	1806703a 	and	r3,r3,zero
 18257f0:	1809883a 	mov	r4,r3
 18257f4:	2807883a 	mov	r3,r5
 18257f8:	20c6b03a 	or	r3,r4,r3
 18257fc:	10c00085 	stb	r3,2(r2)
 1825800:	e0fffc17 	ldw	r3,-16(fp)
 1825804:	180ad63a 	srli	r5,r3,24
 1825808:	10c000c3 	ldbu	r3,3(r2)
 182580c:	1806703a 	and	r3,r3,zero
 1825810:	1809883a 	mov	r4,r3
 1825814:	2807883a 	mov	r3,r5
 1825818:	20c6b03a 	or	r3,r4,r3
 182581c:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
 1825820:	e0bffa17 	ldw	r2,-24(fp)
 1825824:	e0fffd17 	ldw	r3,-12(fp)
 1825828:	19403fcc 	andi	r5,r3,255
 182582c:	10c00203 	ldbu	r3,8(r2)
 1825830:	1806703a 	and	r3,r3,zero
 1825834:	1809883a 	mov	r4,r3
 1825838:	2807883a 	mov	r3,r5
 182583c:	20c6b03a 	or	r3,r4,r3
 1825840:	10c00205 	stb	r3,8(r2)
 1825844:	e0fffd17 	ldw	r3,-12(fp)
 1825848:	1806d23a 	srli	r3,r3,8
 182584c:	19403fcc 	andi	r5,r3,255
 1825850:	10c00243 	ldbu	r3,9(r2)
 1825854:	1806703a 	and	r3,r3,zero
 1825858:	1809883a 	mov	r4,r3
 182585c:	2807883a 	mov	r3,r5
 1825860:	20c6b03a 	or	r3,r4,r3
 1825864:	10c00245 	stb	r3,9(r2)
 1825868:	e0fffd17 	ldw	r3,-12(fp)
 182586c:	1806d43a 	srli	r3,r3,16
 1825870:	19403fcc 	andi	r5,r3,255
 1825874:	10c00283 	ldbu	r3,10(r2)
 1825878:	1806703a 	and	r3,r3,zero
 182587c:	1809883a 	mov	r4,r3
 1825880:	2807883a 	mov	r3,r5
 1825884:	20c6b03a 	or	r3,r4,r3
 1825888:	10c00285 	stb	r3,10(r2)
 182588c:	e0fffd17 	ldw	r3,-12(fp)
 1825890:	180ad63a 	srli	r5,r3,24
 1825894:	10c002c3 	ldbu	r3,11(r2)
 1825898:	1806703a 	and	r3,r3,zero
 182589c:	1809883a 	mov	r4,r3
 18258a0:	2807883a 	mov	r3,r5
 18258a4:	20c6b03a 	or	r3,r4,r3
 18258a8:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
 18258ac:	e0bffa17 	ldw	r2,-24(fp)
 18258b0:	e0fffb17 	ldw	r3,-20(fp)
 18258b4:	19403fcc 	andi	r5,r3,255
 18258b8:	10c00403 	ldbu	r3,16(r2)
 18258bc:	1806703a 	and	r3,r3,zero
 18258c0:	1809883a 	mov	r4,r3
 18258c4:	2807883a 	mov	r3,r5
 18258c8:	20c6b03a 	or	r3,r4,r3
 18258cc:	10c00405 	stb	r3,16(r2)
 18258d0:	e0fffb17 	ldw	r3,-20(fp)
 18258d4:	1806d23a 	srli	r3,r3,8
 18258d8:	19403fcc 	andi	r5,r3,255
 18258dc:	10c00443 	ldbu	r3,17(r2)
 18258e0:	1806703a 	and	r3,r3,zero
 18258e4:	1809883a 	mov	r4,r3
 18258e8:	2807883a 	mov	r3,r5
 18258ec:	20c6b03a 	or	r3,r4,r3
 18258f0:	10c00445 	stb	r3,17(r2)
 18258f4:	e0fffb17 	ldw	r3,-20(fp)
 18258f8:	1806d43a 	srli	r3,r3,16
 18258fc:	19403fcc 	andi	r5,r3,255
 1825900:	10c00483 	ldbu	r3,18(r2)
 1825904:	1806703a 	and	r3,r3,zero
 1825908:	1809883a 	mov	r4,r3
 182590c:	2807883a 	mov	r3,r5
 1825910:	20c6b03a 	or	r3,r4,r3
 1825914:	10c00485 	stb	r3,18(r2)
 1825918:	e0fffb17 	ldw	r3,-20(fp)
 182591c:	180ad63a 	srli	r5,r3,24
 1825920:	10c004c3 	ldbu	r3,19(r2)
 1825924:	1806703a 	and	r3,r3,zero
 1825928:	1809883a 	mov	r4,r3
 182592c:	2807883a 	mov	r3,r5
 1825930:	20c6b03a 	or	r3,r4,r3
 1825934:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
 1825938:	e0bffa17 	ldw	r2,-24(fp)
 182593c:	10c00103 	ldbu	r3,4(r2)
 1825940:	1806703a 	and	r3,r3,zero
 1825944:	10c00105 	stb	r3,4(r2)
 1825948:	10c00143 	ldbu	r3,5(r2)
 182594c:	1806703a 	and	r3,r3,zero
 1825950:	10c00145 	stb	r3,5(r2)
 1825954:	10c00183 	ldbu	r3,6(r2)
 1825958:	1806703a 	and	r3,r3,zero
 182595c:	10c00185 	stb	r3,6(r2)
 1825960:	10c001c3 	ldbu	r3,7(r2)
 1825964:	1806703a 	and	r3,r3,zero
 1825968:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
 182596c:	e0bffa17 	ldw	r2,-24(fp)
 1825970:	10c00303 	ldbu	r3,12(r2)
 1825974:	1806703a 	and	r3,r3,zero
 1825978:	10c00305 	stb	r3,12(r2)
 182597c:	10c00343 	ldbu	r3,13(r2)
 1825980:	1806703a 	and	r3,r3,zero
 1825984:	10c00345 	stb	r3,13(r2)
 1825988:	10c00383 	ldbu	r3,14(r2)
 182598c:	1806703a 	and	r3,r3,zero
 1825990:	10c00385 	stb	r3,14(r2)
 1825994:	10c003c3 	ldbu	r3,15(r2)
 1825998:	1806703a 	and	r3,r3,zero
 182599c:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
 18259a0:	e0bffa17 	ldw	r2,-24(fp)
 18259a4:	10c00503 	ldbu	r3,20(r2)
 18259a8:	1806703a 	and	r3,r3,zero
 18259ac:	10c00505 	stb	r3,20(r2)
 18259b0:	10c00543 	ldbu	r3,21(r2)
 18259b4:	1806703a 	and	r3,r3,zero
 18259b8:	10c00545 	stb	r3,21(r2)
 18259bc:	10c00583 	ldbu	r3,22(r2)
 18259c0:	1806703a 	and	r3,r3,zero
 18259c4:	10c00585 	stb	r3,22(r2)
 18259c8:	10c005c3 	ldbu	r3,23(r2)
 18259cc:	1806703a 	and	r3,r3,zero
 18259d0:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
 18259d4:	e0bffa17 	ldw	r2,-24(fp)
 18259d8:	e0fffe17 	ldw	r3,-8(fp)
 18259dc:	19403fcc 	andi	r5,r3,255
 18259e0:	10c00603 	ldbu	r3,24(r2)
 18259e4:	1806703a 	and	r3,r3,zero
 18259e8:	1809883a 	mov	r4,r3
 18259ec:	2807883a 	mov	r3,r5
 18259f0:	20c6b03a 	or	r3,r4,r3
 18259f4:	10c00605 	stb	r3,24(r2)
 18259f8:	e0fffe17 	ldw	r3,-8(fp)
 18259fc:	1806d23a 	srli	r3,r3,8
 1825a00:	19403fcc 	andi	r5,r3,255
 1825a04:	10c00643 	ldbu	r3,25(r2)
 1825a08:	1806703a 	and	r3,r3,zero
 1825a0c:	1809883a 	mov	r4,r3
 1825a10:	2807883a 	mov	r3,r5
 1825a14:	20c6b03a 	or	r3,r4,r3
 1825a18:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
 1825a1c:	e0bffa17 	ldw	r2,-24(fp)
 1825a20:	10c00703 	ldbu	r3,28(r2)
 1825a24:	1806703a 	and	r3,r3,zero
 1825a28:	10c00705 	stb	r3,28(r2)
 1825a2c:	10c00743 	ldbu	r3,29(r2)
 1825a30:	1806703a 	and	r3,r3,zero
 1825a34:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
 1825a38:	e0bffa17 	ldw	r2,-24(fp)
 1825a3c:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 1825a40:	e0800617 	ldw	r2,24(fp)
 1825a44:	1007883a 	mov	r3,r2
 1825a48:	e0bffa17 	ldw	r2,-24(fp)
 1825a4c:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 1825a50:	e0800717 	ldw	r2,28(fp)
 1825a54:	1007883a 	mov	r3,r2
 1825a58:	e0bffa17 	ldw	r2,-24(fp)
 1825a5c:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 1825a60:	e0800317 	ldw	r2,12(fp)
 1825a64:	10000226 	beq	r2,zero,1825a70 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 1825a68:	00bfe044 	movi	r2,-127
 1825a6c:	00000106 	br	1825a74 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
 1825a70:	00bfe004 	movi	r2,-128
 1825a74:	e0c00417 	ldw	r3,16(fp)
 1825a78:	18000226 	beq	r3,zero,1825a84 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
 1825a7c:	00c00084 	movi	r3,2
 1825a80:	00000106 	br	1825a88 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
 1825a84:	0007883a 	mov	r3,zero
 1825a88:	10c4b03a 	or	r2,r2,r3
 1825a8c:	1007883a 	mov	r3,r2
 1825a90:	e0800517 	ldw	r2,20(fp)
 1825a94:	10000226 	beq	r2,zero,1825aa0 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
 1825a98:	00800104 	movi	r2,4
 1825a9c:	00000106 	br	1825aa4 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
 1825aa0:	0005883a 	mov	r2,zero
 1825aa4:	1884b03a 	or	r2,r3,r2
 1825aa8:	1007883a 	mov	r3,r2
 1825aac:	e0bfff03 	ldbu	r2,-4(fp)
 1825ab0:	10000426 	beq	r2,zero,1825ac4 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
 1825ab4:	e0bfff03 	ldbu	r2,-4(fp)
 1825ab8:	108003cc 	andi	r2,r2,15
 1825abc:	100490fa 	slli	r2,r2,3
 1825ac0:	00000106 	br	1825ac8 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 1825ac4:	0005883a 	mov	r2,zero
 1825ac8:	1884b03a 	or	r2,r3,r2
 1825acc:	1007883a 	mov	r3,r2
 1825ad0:	e0bffa17 	ldw	r2,-24(fp)
 1825ad4:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
 1825ad8:	01400804 	movi	r5,32
 1825adc:	e13ffa17 	ldw	r4,-24(fp)
 1825ae0:	182c0b40 	call	182c0b4 <alt_dcache_flush>
}
 1825ae4:	0001883a 	nop
 1825ae8:	e037883a 	mov	sp,fp
 1825aec:	dfc00117 	ldw	ra,4(sp)
 1825af0:	df000017 	ldw	fp,0(sp)
 1825af4:	dec00204 	addi	sp,sp,8
 1825af8:	f800283a 	ret

01825afc <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 1825afc:	defff904 	addi	sp,sp,-28
 1825b00:	dfc00615 	stw	ra,24(sp)
 1825b04:	df000515 	stw	fp,20(sp)
 1825b08:	df000504 	addi	fp,sp,20
 1825b0c:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 1825b10:	e0bfff17 	ldw	r2,-4(fp)
 1825b14:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 1825b18:	e0bffb17 	ldw	r2,-20(fp)
 1825b1c:	10800317 	ldw	r2,12(r2)
 1825b20:	10800404 	addi	r2,r2,16
 1825b24:	e0fffb17 	ldw	r3,-20(fp)
 1825b28:	18c00317 	ldw	r3,12(r3)
 1825b2c:	18c00404 	addi	r3,r3,16
 1825b30:	18c00037 	ldwio	r3,0(r3)
 1825b34:	18e00034 	orhi	r3,r3,32768
 1825b38:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 1825b3c:	e0bffb17 	ldw	r2,-20(fp)
 1825b40:	10800317 	ldw	r2,12(r2)
 1825b44:	10800404 	addi	r2,r2,16
 1825b48:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 1825b4c:	e0bffb17 	ldw	r2,-20(fp)
 1825b50:	10800917 	ldw	r2,36(r2)
 1825b54:	10001226 	beq	r2,zero,1825ba0 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1825b58:	0005303a 	rdctl	r2,status
 1825b5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1825b60:	e0fffd17 	ldw	r3,-12(fp)
 1825b64:	00bfff84 	movi	r2,-2
 1825b68:	1884703a 	and	r2,r3,r2
 1825b6c:	1001703a 	wrctl	status,r2
  
  return context;
 1825b70:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
 1825b74:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
 1825b78:	e0bffb17 	ldw	r2,-20(fp)
 1825b7c:	10800917 	ldw	r2,36(r2)
 1825b80:	e0fffb17 	ldw	r3,-20(fp)
 1825b84:	18c00a17 	ldw	r3,40(r3)
 1825b88:	1809883a 	mov	r4,r3
 1825b8c:	103ee83a 	callr	r2
 1825b90:	e0bffc17 	ldw	r2,-16(fp)
 1825b94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1825b98:	e0bffe17 	ldw	r2,-8(fp)
 1825b9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 1825ba0:	0001883a 	nop
 1825ba4:	e037883a 	mov	sp,fp
 1825ba8:	dfc00117 	ldw	ra,4(sp)
 1825bac:	df000017 	ldw	fp,0(sp)
 1825bb0:	dec00204 	addi	sp,sp,8
 1825bb4:	f800283a 	ret

01825bb8 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 1825bb8:	defffa04 	addi	sp,sp,-24
 1825bbc:	dfc00515 	stw	ra,20(sp)
 1825bc0:	df000415 	stw	fp,16(sp)
 1825bc4:	df000404 	addi	fp,sp,16
 1825bc8:	e13ffd15 	stw	r4,-12(fp)
 1825bcc:	e17ffe15 	stw	r5,-8(fp)
 1825bd0:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 1825bd4:	e0bffd17 	ldw	r2,-12(fp)
 1825bd8:	10800317 	ldw	r2,12(r2)
 1825bdc:	10800404 	addi	r2,r2,16
 1825be0:	00c00074 	movhi	r3,1
 1825be4:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 1825be8:	e0bffd17 	ldw	r2,-12(fp)
 1825bec:	10800317 	ldw	r2,12(r2)
 1825bf0:	10800404 	addi	r2,r2,16
 1825bf4:	00c00074 	movhi	r3,1
 1825bf8:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 1825bfc:	e0bffd17 	ldw	r2,-12(fp)
 1825c00:	10800317 	ldw	r2,12(r2)
 1825c04:	10800404 	addi	r2,r2,16
 1825c08:	0007883a 	mov	r3,zero
 1825c0c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 1825c10:	e0bffd17 	ldw	r2,-12(fp)
 1825c14:	10800317 	ldw	r2,12(r2)
 1825c18:	00c03fc4 	movi	r3,255
 1825c1c:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 1825c20:	d1601704 	addi	r5,gp,-32676
 1825c24:	e13ffd17 	ldw	r4,-12(fp)
 1825c28:	182c1b00 	call	182c1b0 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 1825c2c:	d8000015 	stw	zero,0(sp)
 1825c30:	e1fffd17 	ldw	r7,-12(fp)
 1825c34:	018060b4 	movhi	r6,386
 1825c38:	3196bf04 	addi	r6,r6,23292
 1825c3c:	e17fff17 	ldw	r5,-4(fp)
 1825c40:	e13ffe17 	ldw	r4,-8(fp)
 1825c44:	182c6f40 	call	182c6f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 1825c48:	0001883a 	nop
 1825c4c:	e037883a 	mov	sp,fp
 1825c50:	dfc00117 	ldw	ra,4(sp)
 1825c54:	df000017 	ldw	fp,0(sp)
 1825c58:	dec00204 	addi	sp,sp,8
 1825c5c:	f800283a 	ret

01825c60 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1825c60:	defffa04 	addi	sp,sp,-24
 1825c64:	dfc00515 	stw	ra,20(sp)
 1825c68:	df000415 	stw	fp,16(sp)
 1825c6c:	df000404 	addi	fp,sp,16
 1825c70:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1825c74:	0007883a 	mov	r3,zero
 1825c78:	e0bfff17 	ldw	r2,-4(fp)
 1825c7c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1825c80:	e0bfff17 	ldw	r2,-4(fp)
 1825c84:	10800104 	addi	r2,r2,4
 1825c88:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1825c8c:	0005303a 	rdctl	r2,status
 1825c90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1825c94:	e0fffd17 	ldw	r3,-12(fp)
 1825c98:	00bfff84 	movi	r2,-2
 1825c9c:	1884703a 	and	r2,r3,r2
 1825ca0:	1001703a 	wrctl	status,r2
  
  return context;
 1825ca4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1825ca8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 1825cac:	182cc2c0 	call	182cc2c <alt_tick>
 1825cb0:	e0bffc17 	ldw	r2,-16(fp)
 1825cb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1825cb8:	e0bffe17 	ldw	r2,-8(fp)
 1825cbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1825cc0:	0001883a 	nop
 1825cc4:	e037883a 	mov	sp,fp
 1825cc8:	dfc00117 	ldw	ra,4(sp)
 1825ccc:	df000017 	ldw	fp,0(sp)
 1825cd0:	dec00204 	addi	sp,sp,8
 1825cd4:	f800283a 	ret

01825cd8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1825cd8:	defff804 	addi	sp,sp,-32
 1825cdc:	dfc00715 	stw	ra,28(sp)
 1825ce0:	df000615 	stw	fp,24(sp)
 1825ce4:	df000604 	addi	fp,sp,24
 1825ce8:	e13ffc15 	stw	r4,-16(fp)
 1825cec:	e17ffd15 	stw	r5,-12(fp)
 1825cf0:	e1bffe15 	stw	r6,-8(fp)
 1825cf4:	e1ffff15 	stw	r7,-4(fp)
 1825cf8:	e0bfff17 	ldw	r2,-4(fp)
 1825cfc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1825d00:	d0a80717 	ldw	r2,-24548(gp)
 1825d04:	1000021e 	bne	r2,zero,1825d10 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 1825d08:	e0bffb17 	ldw	r2,-20(fp)
 1825d0c:	d0a80715 	stw	r2,-24548(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1825d10:	e0bffc17 	ldw	r2,-16(fp)
 1825d14:	10800104 	addi	r2,r2,4
 1825d18:	00c001c4 	movi	r3,7
 1825d1c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1825d20:	d8000015 	stw	zero,0(sp)
 1825d24:	e1fffc17 	ldw	r7,-16(fp)
 1825d28:	018060b4 	movhi	r6,386
 1825d2c:	31971804 	addi	r6,r6,23648
 1825d30:	e17ffe17 	ldw	r5,-8(fp)
 1825d34:	e13ffd17 	ldw	r4,-12(fp)
 1825d38:	182c6f40 	call	182c6f4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1825d3c:	0001883a 	nop
 1825d40:	e037883a 	mov	sp,fp
 1825d44:	dfc00117 	ldw	ra,4(sp)
 1825d48:	df000017 	ldw	fp,0(sp)
 1825d4c:	dec00204 	addi	sp,sp,8
 1825d50:	f800283a 	ret

01825d54 <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
 1825d54:	defffb04 	addi	sp,sp,-20
 1825d58:	df000115 	stw	fp,4(sp)
 1825d5c:	df000104 	addi	fp,sp,4
 1825d60:	e13fff15 	stw	r4,-4(fp)
 1825d64:	e1400115 	stw	r5,4(fp)
 1825d68:	e1800215 	stw	r6,8(fp)
 1825d6c:	e1c00315 	stw	r7,12(fp)
 1825d70:	0001883a 	nop
 1825d74:	e037883a 	mov	sp,fp
 1825d78:	df000017 	ldw	fp,0(sp)
 1825d7c:	dec00404 	addi	sp,sp,16
 1825d80:	f800283a 	ret

01825d84 <tse_mac_initTransInfo2>:

alt_32 tse_mac_initTransInfo2( tse_mac_trans_info *mi,
                                        alt_u32 mac_base,
                                        alt_32 tx_sgdma,
                                        alt_32 rx_sgdma,
                                        alt_32 cfgflags) {
 1825d84:	defffb04 	addi	sp,sp,-20
 1825d88:	df000415 	stw	fp,16(sp)
 1825d8c:	df000404 	addi	fp,sp,16
 1825d90:	e13ffc15 	stw	r4,-16(fp)
 1825d94:	e17ffd15 	stw	r5,-12(fp)
 1825d98:	e1bffe15 	stw	r6,-8(fp)
 1825d9c:	e1ffff15 	stw	r7,-4(fp)
                                              
        mi->base     = (np_tse_mac*)mac_base;
 1825da0:	e0fffd17 	ldw	r3,-12(fp)
 1825da4:	e0bffc17 	ldw	r2,-16(fp)
 1825da8:	10c00015 	stw	r3,0(r2)
        mi->tx_sgdma = (alt_sgdma_dev *)tx_sgdma;
 1825dac:	e0fffe17 	ldw	r3,-8(fp)
 1825db0:	e0bffc17 	ldw	r2,-16(fp)
 1825db4:	10c00115 	stw	r3,4(r2)
        mi->rx_sgdma = (alt_sgdma_dev *)rx_sgdma;
 1825db8:	e0ffff17 	ldw	r3,-4(fp)
 1825dbc:	e0bffc17 	ldw	r2,-16(fp)
 1825dc0:	10c00215 	stw	r3,8(r2)
        mi->cfgflags = cfgflags;     
 1825dc4:	e0c00117 	ldw	r3,4(fp)
 1825dc8:	e0bffc17 	ldw	r2,-16(fp)
 1825dcc:	10c00415 	stw	r3,16(r2)
        return SUCCESS;
 1825dd0:	0005883a 	mov	r2,zero
}
 1825dd4:	e037883a 	mov	sp,fp
 1825dd8:	df000017 	ldw	fp,0(sp)
 1825ddc:	dec00104 	addi	sp,sp,4
 1825de0:	f800283a 	ret

01825de4 <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit SGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_sgdma_descriptor *txDesc)   
{ 
 1825de4:	defffa04 	addi	sp,sp,-24
 1825de8:	dfc00515 	stw	ra,20(sp)
 1825dec:	df000415 	stw	fp,16(sp)
 1825df0:	df000404 	addi	fp,sp,16
 1825df4:	e13ffe15 	stw	r4,-8(fp)
 1825df8:	e17fff15 	stw	r5,-4(fp)

  alt_32 timeout;
  alt_u8 result = 0;
 1825dfc:	e03ffd05 	stb	zero,-12(fp)
  alt_u16 actualBytesTransferred;
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
 1825e00:	e03ffc15 	stw	zero,-16(fp)
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 1825e04:	00000b06 	br	1825e34 <tse_mac_sTxWrite+0x50>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
           if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 1825e08:	e0fffc17 	ldw	r3,-16(fp)
 1825e0c:	18800044 	addi	r2,r3,1
 1825e10:	e0bffc15 	stw	r2,-16(fp)
 1825e14:	008003f4 	movhi	r2,15
 1825e18:	10909004 	addi	r2,r2,16960
 1825e1c:	1880051e 	bne	r3,r2,1825e34 <tse_mac_sTxWrite+0x50>
            tse_dprintf(4, "WARNING : TX SGDMA Timeout\n");
 1825e20:	01006134 	movhi	r4,388
 1825e24:	21048d04 	addi	r4,r4,4660
 1825e28:	183c7cc0 	call	183c7cc <puts>
            return ENP_RESOURCE;  // avoid being stuck here
 1825e2c:	00bffa84 	movi	r2,-22
 1825e30:	00002006 	br	1825eb4 <tse_mac_sTxWrite+0xd0>
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 1825e34:	e0bffe17 	ldw	r2,-8(fp)
 1825e38:	10800117 	ldw	r2,4(r2)
 1825e3c:	10800317 	ldw	r2,12(r2)
 1825e40:	10800037 	ldwio	r2,0(r2)
 1825e44:	1080040c 	andi	r2,r2,16
 1825e48:	103fef1e 	bne	r2,zero,1825e08 <__ram_exceptions_end+0xff815b18>
           }
  }

  // Set up the SGDMA
  // Clear the status and control bits of the SGDMA descriptor
  IOWR_ALTERA_AVALON_SGDMA_CONTROL (mi->tx_sgdma->base, 0);
 1825e4c:	e0bffe17 	ldw	r2,-8(fp)
 1825e50:	10800117 	ldw	r2,4(r2)
 1825e54:	10800317 	ldw	r2,12(r2)
 1825e58:	10800404 	addi	r2,r2,16
 1825e5c:	0007883a 	mov	r3,zero
 1825e60:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS (mi->tx_sgdma->base, 0xFF);
 1825e64:	e0bffe17 	ldw	r2,-8(fp)
 1825e68:	10800117 	ldw	r2,4(r2)
 1825e6c:	10800317 	ldw	r2,12(r2)
 1825e70:	00c03fc4 	movi	r3,255
 1825e74:	10c00035 	stwio	r3,0(r2)
  
  // Start SGDMA (blocking call)
  result = alt_avalon_sgdma_do_sync_transfer(
 1825e78:	e0bffe17 	ldw	r2,-8(fp)
 1825e7c:	10800117 	ldw	r2,4(r2)
 1825e80:	e17fff17 	ldw	r5,-4(fp)
 1825e84:	1009883a 	mov	r4,r2
 1825e88:	182502c0 	call	182502c <alt_avalon_sgdma_do_sync_transfer>
 1825e8c:	e0bffd05 	stb	r2,-12(fp)
                mi->tx_sgdma, 
                (alt_sgdma_descriptor *) &txDesc[0]);
  
  if (result != 0)
 1825e90:	e0bffd03 	ldbu	r2,-12(fp)
 1825e94:	10000226 	beq	r2,zero,1825ea0 <tse_mac_sTxWrite+0xbc>
    return -1;
 1825e98:	00bfffc4 	movi	r2,-1
 1825e9c:	00000506 	br	1825eb4 <tse_mac_sTxWrite+0xd0>
  
  /* perform cache save read to obtain actual bytes transferred for current sgdma descriptor */
  actualBytesTransferred = IORD_ALTERA_TSE_SGDMA_DESC_ACTUAL_BYTES_TRANSFERRED(&txDesc[0]);
 1825ea0:	e0bfff17 	ldw	r2,-4(fp)
 1825ea4:	10800704 	addi	r2,r2,28
 1825ea8:	10800037 	ldwio	r2,0(r2)
 1825eac:	e0bffd8d 	sth	r2,-10(fp)

  return actualBytesTransferred;
 1825eb0:	e0bffd8b 	ldhu	r2,-10(fp)
}
 1825eb4:	e037883a 	mov	sp,fp
 1825eb8:	dfc00117 	ldw	ra,4(sp)
 1825ebc:	df000017 	ldw	fp,0(sp)
 1825ec0:	dec00204 	addi	sp,sp,8
 1825ec4:	f800283a 	ret

01825ec8 <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_sgdma_descriptor *rxDesc)  
{
 1825ec8:	defffa04 	addi	sp,sp,-24
 1825ecc:	dfc00515 	stw	ra,20(sp)
 1825ed0:	df000415 	stw	fp,16(sp)
 1825ed4:	df000404 	addi	fp,sp,16
 1825ed8:	e13ffe15 	stw	r4,-8(fp)
 1825edc:	e17fff15 	stw	r5,-4(fp)
  alt_32 timeout;
  
  alt_u8 result = 0;
 1825ee0:	e03ffd05 	stb	zero,-12(fp)
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
 1825ee4:	e03ffc15 	stw	zero,-16(fp)
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 1825ee8:	00000b06 	br	1825f18 <tse_mac_aRxRead+0x50>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 1825eec:	e0fffc17 	ldw	r3,-16(fp)
 1825ef0:	18800044 	addi	r2,r3,1
 1825ef4:	e0bffc15 	stw	r2,-16(fp)
 1825ef8:	008003f4 	movhi	r2,15
 1825efc:	10909004 	addi	r2,r2,16960
 1825f00:	1880051e 	bne	r3,r2,1825f18 <tse_mac_aRxRead+0x50>
        tse_dprintf(4, "WARNING : RX SGDMA Timeout\n");
 1825f04:	01006134 	movhi	r4,388
 1825f08:	21049404 	addi	r4,r4,4688
 1825f0c:	183c7cc0 	call	183c7cc <puts>
        return ENP_RESOURCE;  // avoid being stuck here
 1825f10:	00bffa84 	movi	r2,-22
 1825f14:	00001106 	br	1825f5c <tse_mac_aRxRead+0x94>
  alt_u8 result = 0;
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 1825f18:	e0bffe17 	ldw	r2,-8(fp)
 1825f1c:	10800217 	ldw	r2,8(r2)
 1825f20:	10800317 	ldw	r2,12(r2)
 1825f24:	10800037 	ldwio	r2,0(r2)
 1825f28:	1080040c 	andi	r2,r2,16
 1825f2c:	103fef1e 	bne	r2,zero,1825eec <__ram_exceptions_end+0xff815bfc>
    }
  }

 
  // SGDMA operation invoked for RX (non-blocking call)
  result = alt_avalon_sgdma_do_async_transfer(
 1825f30:	e0bffe17 	ldw	r2,-8(fp)
 1825f34:	10800217 	ldw	r2,8(r2)
 1825f38:	e17fff17 	ldw	r5,-4(fp)
 1825f3c:	1009883a 	mov	r4,r2
 1825f40:	1824f080 	call	1824f08 <alt_avalon_sgdma_do_async_transfer>
 1825f44:	e0bffd05 	stb	r2,-12(fp)
                mi->rx_sgdma, 
                (alt_sgdma_descriptor *) &rxDesc[0]);
  
  if (result != 0)
 1825f48:	e0bffd03 	ldbu	r2,-12(fp)
 1825f4c:	10000226 	beq	r2,zero,1825f58 <tse_mac_aRxRead+0x90>
    return -1;
 1825f50:	00bfffc4 	movi	r2,-1
 1825f54:	00000106 	br	1825f5c <tse_mac_aRxRead+0x94>
 
  return SUCCESS;
 1825f58:	0005883a 	mov	r2,zero
}
 1825f5c:	e037883a 	mov	sp,fp
 1825f60:	dfc00117 	ldw	ra,4(sp)
 1825f64:	df000017 	ldw	fp,0(sp)
 1825f68:	dec00204 	addi	sp,sp,8
 1825f6c:	f800283a 	ret

01825f70 <tse_mac_SwReset>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
 1825f70:	defffc04 	addi	sp,sp,-16
 1825f74:	df000315 	stw	fp,12(sp)
 1825f78:	df000304 	addi	fp,sp,12
 1825f7c:	e13fff15 	stw	r4,-4(fp)
	alt_32 timeout;
	alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 1825f80:	e0bfff17 	ldw	r2,-4(fp)
 1825f84:	10800204 	addi	r2,r2,8
 1825f88:	10800037 	ldwio	r2,0(r2)
 1825f8c:	e0bffe15 	stw	r2,-8(fp)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
 1825f90:	e0bfff17 	ldw	r2,-4(fp)
 1825f94:	10800204 	addi	r2,r2,8
 1825f98:	00c80204 	movi	r3,8200
 1825f9c:	10c00035 	stwio	r3,0(r2)

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
 1825fa0:	e03ffd15 	stw	zero,-12(fp)
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
 1825fa4:	00000306 	br	1825fb4 <tse_mac_SwReset+0x44>
 1825fa8:	e0bffd17 	ldw	r2,-12(fp)
 1825fac:	10800044 	addi	r2,r2,1
 1825fb0:	e0bffd15 	stw	r2,-12(fp)
 1825fb4:	e0bfff17 	ldw	r2,-4(fp)
 1825fb8:	10800204 	addi	r2,r2,8
 1825fbc:	10800037 	ldwio	r2,0(r2)
 1825fc0:	1088000c 	andi	r2,r2,8192
 1825fc4:	10000326 	beq	r2,zero,1825fd4 <tse_mac_SwReset+0x64>
 1825fc8:	e0bffd17 	ldw	r2,-12(fp)
 1825fcc:	1089c410 	cmplti	r2,r2,10000
 1825fd0:	103ff51e 	bne	r2,zero,1825fa8 <__ram_exceptions_end+0xff815cb8>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
 1825fd4:	e0bfff17 	ldw	r2,-4(fp)
 1825fd8:	10800204 	addi	r2,r2,8
 1825fdc:	e0fffe17 	ldw	r3,-8(fp)
 1825fe0:	10c00035 	stwio	r3,0(r2)
    return SUCCESS;
 1825fe4:	0005883a 	mov	r2,zero
}
 1825fe8:	e037883a 	mov	sp,fp
 1825fec:	df000017 	ldw	fp,0(sp)
 1825ff0:	dec00104 	addi	sp,sp,4
 1825ff4:	f800283a 	ret

01825ff8 <tse_mac_setMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
 1825ff8:	defffd04 	addi	sp,sp,-12
 1825ffc:	df000215 	stw	fp,8(sp)
 1826000:	df000204 	addi	fp,sp,8
 1826004:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 1826008:	e0bfff17 	ldw	r2,-4(fp)
 182600c:	10800204 	addi	r2,r2,8
 1826010:	10800037 	ldwio	r2,0(r2)
 1826014:	e0bffe15 	stw	r2,-8(fp)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
 1826018:	e0fffe17 	ldw	r3,-8(fp)
 182601c:	00bffdc4 	movi	r2,-9
 1826020:	1884703a 	and	r2,r3,r2
 1826024:	e0bffe15 	stw	r2,-8(fp)
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 1826028:	e0bfff17 	ldw	r2,-4(fp)
 182602c:	10800204 	addi	r2,r2,8
 1826030:	e0fffe17 	ldw	r3,-8(fp)
 1826034:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 1826038:	0005883a 	mov	r2,zero
}
 182603c:	e037883a 	mov	sp,fp
 1826040:	df000017 	ldw	fp,0(sp)
 1826044:	dec00104 	addi	sp,sp,4
 1826048:	f800283a 	ret

0182604c <tse_mac_setGMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
 182604c:	defffd04 	addi	sp,sp,-12
 1826050:	df000215 	stw	fp,8(sp)
 1826054:	df000204 	addi	fp,sp,8
 1826058:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 182605c:	e0bfff17 	ldw	r2,-4(fp)
 1826060:	10800204 	addi	r2,r2,8
 1826064:	10800037 	ldwio	r2,0(r2)
 1826068:	e0bffe15 	stw	r2,-8(fp)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 182606c:	e0bffe17 	ldw	r2,-8(fp)
 1826070:	10800214 	ori	r2,r2,8
 1826074:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 1826078:	e0bfff17 	ldw	r2,-4(fp)
 182607c:	10800204 	addi	r2,r2,8
 1826080:	e0fffe17 	ldw	r3,-8(fp)
 1826084:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 1826088:	0005883a 	mov	r2,zero
}
 182608c:	e037883a 	mov	sp,fp
 1826090:	df000017 	ldw	fp,0(sp)
 1826094:	dec00104 	addi	sp,sp,4
 1826098:	f800283a 	ret

0182609c <alt_tse_phy_add_profile>:
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
 182609c:	defffb04 	addi	sp,sp,-20
 18260a0:	dfc00415 	stw	ra,16(sp)
 18260a4:	df000315 	stw	fp,12(sp)
 18260a8:	dc000215 	stw	r16,8(sp)
 18260ac:	df000304 	addi	fp,sp,12
 18260b0:	e13ffe15 	stw	r4,-8(fp)
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 18260b4:	e03ffd15 	stw	zero,-12(fp)
 18260b8:	00002906 	br	1826160 <alt_tse_phy_add_profile+0xc4>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 18260bc:	00806134 	movhi	r2,388
 18260c0:	109eda04 	addi	r2,r2,31592
 18260c4:	e0fffd17 	ldw	r3,-12(fp)
 18260c8:	18c7883a 	add	r3,r3,r3
 18260cc:	18c7883a 	add	r3,r3,r3
 18260d0:	10c5883a 	add	r2,r2,r3
 18260d4:	10800017 	ldw	r2,0(r2)
 18260d8:	10c01417 	ldw	r3,80(r2)
 18260dc:	e0bffe17 	ldw	r2,-8(fp)
 18260e0:	10801417 	ldw	r2,80(r2)
 18260e4:	18801b1e 	bne	r3,r2,1826154 <alt_tse_phy_add_profile+0xb8>
 18260e8:	00806134 	movhi	r2,388
 18260ec:	109eda04 	addi	r2,r2,31592
 18260f0:	e0fffd17 	ldw	r3,-12(fp)
 18260f4:	18c7883a 	add	r3,r3,r3
 18260f8:	18c7883a 	add	r3,r3,r3
 18260fc:	10c5883a 	add	r2,r2,r3
 1826100:	10800017 	ldw	r2,0(r2)
 1826104:	10c01503 	ldbu	r3,84(r2)
 1826108:	e0bffe17 	ldw	r2,-8(fp)
 182610c:	10801503 	ldbu	r2,84(r2)
 1826110:	18c03fcc 	andi	r3,r3,255
 1826114:	10803fcc 	andi	r2,r2,255
 1826118:	18800e1e 	bne	r3,r2,1826154 <alt_tse_phy_add_profile+0xb8>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
 182611c:	e0bffe17 	ldw	r2,-8(fp)
 1826120:	10801417 	ldw	r2,80(r2)
 1826124:	1007883a 	mov	r3,r2
 1826128:	e0bffe17 	ldw	r2,-8(fp)
 182612c:	10801503 	ldbu	r2,84(r2)
 1826130:	10803fcc 	andi	r2,r2,255
 1826134:	100d883a 	mov	r6,r2
 1826138:	180b883a 	mov	r5,r3
 182613c:	01006134 	movhi	r4,388
 1826140:	21049b04 	addi	r4,r4,4716
 1826144:	1800b240 	call	1800b24 <printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
 1826148:	01006134 	movhi	r4,388
 182614c:	2104af04 	addi	r4,r4,4796
 1826150:	183c7cc0 	call	183c7cc <puts>
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 1826154:	e0bffd17 	ldw	r2,-12(fp)
 1826158:	10800044 	addi	r2,r2,1
 182615c:	e0bffd15 	stw	r2,-12(fp)
 1826160:	d0a7fe03 	ldbu	r2,-24584(gp)
 1826164:	10803fcc 	andi	r2,r2,255
 1826168:	e0fffd17 	ldw	r3,-12(fp)
 182616c:	18bfd316 	blt	r3,r2,18260bc <__ram_exceptions_end+0xff815dcc>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 1826170:	d0a7fe03 	ldbu	r2,-24584(gp)
 1826174:	14003fcc 	andi	r16,r2,255
 1826178:	01001904 	movi	r4,100
 182617c:	183c5000 	call	183c500 <malloc>
 1826180:	1009883a 	mov	r4,r2
 1826184:	00806134 	movhi	r2,388
 1826188:	109eda04 	addi	r2,r2,31592
 182618c:	8407883a 	add	r3,r16,r16
 1826190:	18c7883a 	add	r3,r3,r3
 1826194:	10c5883a 	add	r2,r2,r3
 1826198:	11000015 	stw	r4,0(r2)
    if(!pphy_profiles[phy_profile_count]) {
 182619c:	d0a7fe03 	ldbu	r2,-24584(gp)
 18261a0:	10c03fcc 	andi	r3,r2,255
 18261a4:	00806134 	movhi	r2,388
 18261a8:	109eda04 	addi	r2,r2,31592
 18261ac:	18c7883a 	add	r3,r3,r3
 18261b0:	18c7883a 	add	r3,r3,r3
 18261b4:	10c5883a 	add	r2,r2,r3
 18261b8:	10800017 	ldw	r2,0(r2)
 18261bc:	1000081e 	bne	r2,zero,18261e0 <alt_tse_phy_add_profile+0x144>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
 18261c0:	d0a7fe03 	ldbu	r2,-24584(gp)
 18261c4:	10803fcc 	andi	r2,r2,255
 18261c8:	100b883a 	mov	r5,r2
 18261cc:	01006134 	movhi	r4,388
 18261d0:	2104c704 	addi	r4,r4,4892
 18261d4:	1800b240 	call	1800b24 <printf>
        return ALTERA_TSE_MALLOC_FAILED;
 18261d8:	00bfffc4 	movi	r2,-1
 18261dc:	00002206 	br	1826268 <alt_tse_phy_add_profile+0x1cc>
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
 18261e0:	d0a7fe03 	ldbu	r2,-24584(gp)
 18261e4:	10c03fcc 	andi	r3,r2,255
 18261e8:	00806134 	movhi	r2,388
 18261ec:	109eda04 	addi	r2,r2,31592
 18261f0:	18c7883a 	add	r3,r3,r3
 18261f4:	18c7883a 	add	r3,r3,r3
 18261f8:	10c5883a 	add	r2,r2,r3
 18261fc:	10c00017 	ldw	r3,0(r2)
 1826200:	e0bffe17 	ldw	r2,-8(fp)
 1826204:	1009883a 	mov	r4,r2
 1826208:	00801904 	movi	r2,100
 182620c:	100d883a 	mov	r6,r2
 1826210:	200b883a 	mov	r5,r4
 1826214:	1809883a 	mov	r4,r3
 1826218:	1805f980 	call	1805f98 <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
 182621c:	d0a7fe03 	ldbu	r2,-24584(gp)
 1826220:	10c03fcc 	andi	r3,r2,255
 1826224:	00806134 	movhi	r2,388
 1826228:	109eda04 	addi	r2,r2,31592
 182622c:	18c7883a 	add	r3,r3,r3
 1826230:	18c7883a 	add	r3,r3,r3
 1826234:	10c5883a 	add	r2,r2,r3
 1826238:	10800017 	ldw	r2,0(r2)
 182623c:	1007883a 	mov	r3,r2
 1826240:	e0bffe17 	ldw	r2,-8(fp)
 1826244:	100b883a 	mov	r5,r2
 1826248:	1809883a 	mov	r4,r3
 182624c:	183c99c0 	call	183c99c <strcpy>
    
    phy_profile_count++;
 1826250:	d0a7fe03 	ldbu	r2,-24584(gp)
 1826254:	10800044 	addi	r2,r2,1
 1826258:	d0a7fe05 	stb	r2,-24584(gp)
    
    return phy_profile_count - 1;
 182625c:	d0a7fe03 	ldbu	r2,-24584(gp)
 1826260:	10803fcc 	andi	r2,r2,255
 1826264:	10bfffc4 	addi	r2,r2,-1
}
 1826268:	e6ffff04 	addi	sp,fp,-4
 182626c:	dfc00217 	ldw	ra,8(sp)
 1826270:	df000117 	ldw	fp,4(sp)
 1826274:	dc000017 	ldw	r16,0(sp)
 1826278:	dec00304 	addi	sp,sp,12
 182627c:	f800283a 	ret

01826280 <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
	alt_tse_system_mac					*psys_mac,
	alt_tse_system_sgdma				*psys_sgdma,
	alt_tse_system_desc_mem				*psys_mem,
	alt_tse_system_shared_fifo			*psys_shared_fifo,
	alt_tse_system_phy 					*psys_phy ) {
 1826280:	defff204 	addi	sp,sp,-56
 1826284:	dfc00d15 	stw	ra,52(sp)
 1826288:	df000c15 	stw	fp,48(sp)
 182628c:	dc000b15 	stw	r16,44(sp)
 1826290:	df000c04 	addi	fp,sp,48
 1826294:	e13ffb15 	stw	r4,-20(fp)
 1826298:	e17ffc15 	stw	r5,-16(fp)
 182629c:	e1bffd15 	stw	r6,-12(fp)
 18262a0:	e1fffe15 	stw	r7,-8(fp)

	int i;
	int loop_end;
	
	alt_tse_system_mac					*pmac	= psys_mac;
 18262a4:	e0bffb17 	ldw	r2,-20(fp)
 18262a8:	e0bffa15 	stw	r2,-24(fp)
	alt_tse_system_sgdma				*psgdma	= psys_sgdma;
 18262ac:	e0bffc17 	ldw	r2,-16(fp)
 18262b0:	e0bff615 	stw	r2,-40(fp)
	alt_tse_system_desc_mem				*pmem	= psys_mem;
 18262b4:	e0bffd17 	ldw	r2,-12(fp)
 18262b8:	e0bff715 	stw	r2,-36(fp)
	alt_tse_system_shared_fifo			*pfifo	= psys_shared_fifo;
 18262bc:	e0bffe17 	ldw	r2,-8(fp)
 18262c0:	e0bff815 	stw	r2,-32(fp)
	alt_tse_system_phy 					*pphy	= psys_phy;
 18262c4:	e0800217 	ldw	r2,8(fp)
 18262c8:	e0bff915 	stw	r2,-28(fp)
	
	static alt_8 tse_system_count = 0;
	
	/* Determine number of loop */
	/* Run at least one for non-multi-channel MAC */
	if(pmac->tse_num_of_channel == 0) {
 18262cc:	e0bffa17 	ldw	r2,-24(fp)
 18262d0:	10800303 	ldbu	r2,12(r2)
 18262d4:	10803fcc 	andi	r2,r2,255
 18262d8:	1000031e 	bne	r2,zero,18262e8 <alt_tse_system_add_sys+0x68>
		loop_end = 1;
 18262dc:	00800044 	movi	r2,1
 18262e0:	e0bff515 	stw	r2,-44(fp)
 18262e4:	00000e06 	br	1826320 <alt_tse_system_add_sys+0xa0>
	}
	else if(pmac->tse_num_of_channel > 0) {
 18262e8:	e0bffa17 	ldw	r2,-24(fp)
 18262ec:	10800303 	ldbu	r2,12(r2)
 18262f0:	10803fcc 	andi	r2,r2,255
 18262f4:	10000526 	beq	r2,zero,182630c <alt_tse_system_add_sys+0x8c>
		loop_end = pmac->tse_num_of_channel; 
 18262f8:	e0bffa17 	ldw	r2,-24(fp)
 18262fc:	10800303 	ldbu	r2,12(r2)
 1826300:	10803fcc 	andi	r2,r2,255
 1826304:	e0bff515 	stw	r2,-44(fp)
 1826308:	00000506 	br	1826320 <alt_tse_system_add_sys+0xa0>
	}
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
 182630c:	01006134 	movhi	r4,388
 1826310:	2104d604 	addi	r4,r4,4952
 1826314:	183c7cc0 	call	183c7cc <puts>
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
 1826318:	00bfffc4 	movi	r2,-1
 182631c:	00025106 	br	1826c64 <alt_tse_system_add_sys+0x9e4>
	}

	for(i = 0; i < loop_end; i++) {
 1826320:	e03ff415 	stw	zero,-48(fp)
 1826324:	00024b06 	br	1826c54 <alt_tse_system_add_sys+0x9d4>
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
 1826328:	d0a7fe83 	ldbu	r2,-24582(gp)
 182632c:	10803fcc 	andi	r2,r2,255
 1826330:	1080201c 	xori	r2,r2,128
 1826334:	10bfe004 	addi	r2,r2,-128
 1826338:	10800210 	cmplti	r2,r2,8
 182633c:	10000c1e 	bne	r2,zero,1826370 <alt_tse_system_add_sys+0xf0>
			tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
 1826340:	01006134 	movhi	r4,388
 1826344:	2104e204 	addi	r4,r4,5000
 1826348:	183c7cc0 	call	183c7cc <puts>
			tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
 182634c:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826350:	10803fcc 	andi	r2,r2,255
 1826354:	1080201c 	xori	r2,r2,128
 1826358:	10bfe004 	addi	r2,r2,-128
 182635c:	100d883a 	mov	r6,r2
 1826360:	01400204 	movi	r5,8
 1826364:	01006134 	movhi	r4,388
 1826368:	2104f204 	addi	r4,r4,5064
 182636c:	1800b240 	call	1800b24 <printf>
		}

		/* Add MAC info to alt_tse_system_info structure */
		if(pmac == 0) {
 1826370:	e0bffa17 	ldw	r2,-24(fp)
 1826374:	1000081e 	bne	r2,zero,1826398 <alt_tse_system_add_sys+0x118>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 1826378:	01006134 	movhi	r4,388
 182637c:	21050104 	addi	r4,r4,5124
 1826380:	183c7cc0 	call	183c7cc <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
 1826384:	01006134 	movhi	r4,388
 1826388:	21050b04 	addi	r4,r4,5164
 182638c:	183c7cc0 	call	183c7cc <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 1826390:	00bfffc4 	movi	r2,-1
 1826394:	00023306 	br	1826c64 <alt_tse_system_add_sys+0x9e4>
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
 1826398:	d0a7fe83 	ldbu	r2,-24582(gp)
 182639c:	11003fcc 	andi	r4,r2,255
 18263a0:	2100201c 	xori	r4,r4,128
 18263a4:	213fe004 	addi	r4,r4,-128
 18263a8:	e0bffa17 	ldw	r2,-24(fp)
 18263ac:	10800017 	ldw	r2,0(r2)
 18263b0:	e0fff417 	ldw	r3,-48(fp)
 18263b4:	180692ba 	slli	r3,r3,10
 18263b8:	10c7883a 	add	r3,r2,r3
 18263bc:	00806134 	movhi	r2,388
 18263c0:	1093d804 	addi	r2,r2,20320
 18263c4:	21001224 	muli	r4,r4,72
 18263c8:	1105883a 	add	r2,r2,r4
 18263cc:	10c00015 	stw	r3,0(r2)
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
 18263d0:	d0a7fe83 	ldbu	r2,-24582(gp)
 18263d4:	11003fcc 	andi	r4,r2,255
 18263d8:	2100201c 	xori	r4,r4,128
 18263dc:	213fe004 	addi	r4,r4,-128
 18263e0:	e0bffa17 	ldw	r2,-24(fp)
 18263e4:	10c0010b 	ldhu	r3,4(r2)
 18263e8:	00806134 	movhi	r2,388
 18263ec:	1093d804 	addi	r2,r2,20320
 18263f0:	21001224 	muli	r4,r4,72
 18263f4:	1105883a 	add	r2,r2,r4
 18263f8:	10800104 	addi	r2,r2,4
 18263fc:	10c0000d 	sth	r3,0(r2)
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
 1826400:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826404:	11003fcc 	andi	r4,r2,255
 1826408:	2100201c 	xori	r4,r4,128
 182640c:	213fe004 	addi	r4,r4,-128
 1826410:	e0bffa17 	ldw	r2,-24(fp)
 1826414:	10c0018b 	ldhu	r3,6(r2)
 1826418:	00806134 	movhi	r2,388
 182641c:	1093d804 	addi	r2,r2,20320
 1826420:	21001224 	muli	r4,r4,72
 1826424:	1105883a 	add	r2,r2,r4
 1826428:	10800184 	addi	r2,r2,6
 182642c:	10c0000d 	sth	r3,0(r2)
		tse_mac_device[tse_system_count].tse_use_mdio 					= pmac->tse_use_mdio;
 1826430:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826434:	11003fcc 	andi	r4,r2,255
 1826438:	2100201c 	xori	r4,r4,128
 182643c:	213fe004 	addi	r4,r4,-128
 1826440:	e0bffa17 	ldw	r2,-24(fp)
 1826444:	10c00203 	ldbu	r3,8(r2)
 1826448:	00806134 	movhi	r2,388
 182644c:	1093d804 	addi	r2,r2,20320
 1826450:	21001224 	muli	r4,r4,72
 1826454:	1105883a 	add	r2,r2,r4
 1826458:	10800204 	addi	r2,r2,8
 182645c:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_en_maclite 				= pmac->tse_en_maclite;
 1826460:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826464:	11003fcc 	andi	r4,r2,255
 1826468:	2100201c 	xori	r4,r4,128
 182646c:	213fe004 	addi	r4,r4,-128
 1826470:	e0bffa17 	ldw	r2,-24(fp)
 1826474:	10c00243 	ldbu	r3,9(r2)
 1826478:	00806134 	movhi	r2,388
 182647c:	1093d804 	addi	r2,r2,20320
 1826480:	21001224 	muli	r4,r4,72
 1826484:	1105883a 	add	r2,r2,r4
 1826488:	10800244 	addi	r2,r2,9
 182648c:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_maclite_gige 				= pmac->tse_maclite_gige;
 1826490:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826494:	11003fcc 	andi	r4,r2,255
 1826498:	2100201c 	xori	r4,r4,128
 182649c:	213fe004 	addi	r4,r4,-128
 18264a0:	e0bffa17 	ldw	r2,-24(fp)
 18264a4:	10c00283 	ldbu	r3,10(r2)
 18264a8:	00806134 	movhi	r2,388
 18264ac:	1093d804 	addi	r2,r2,20320
 18264b0:	21001224 	muli	r4,r4,72
 18264b4:	1105883a 	add	r2,r2,r4
 18264b8:	10800284 	addi	r2,r2,10
 18264bc:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_multichannel_mac 			= pmac->tse_multichannel_mac;
 18264c0:	d0a7fe83 	ldbu	r2,-24582(gp)
 18264c4:	11003fcc 	andi	r4,r2,255
 18264c8:	2100201c 	xori	r4,r4,128
 18264cc:	213fe004 	addi	r4,r4,-128
 18264d0:	e0bffa17 	ldw	r2,-24(fp)
 18264d4:	10c002c3 	ldbu	r3,11(r2)
 18264d8:	00806134 	movhi	r2,388
 18264dc:	1093d804 	addi	r2,r2,20320
 18264e0:	21001224 	muli	r4,r4,72
 18264e4:	1105883a 	add	r2,r2,r4
 18264e8:	108002c4 	addi	r2,r2,11
 18264ec:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_num_of_channel 			= pmac->tse_num_of_channel;
 18264f0:	d0a7fe83 	ldbu	r2,-24582(gp)
 18264f4:	11003fcc 	andi	r4,r2,255
 18264f8:	2100201c 	xori	r4,r4,128
 18264fc:	213fe004 	addi	r4,r4,-128
 1826500:	e0bffa17 	ldw	r2,-24(fp)
 1826504:	10c00303 	ldbu	r3,12(r2)
 1826508:	00806134 	movhi	r2,388
 182650c:	1093d804 	addi	r2,r2,20320
 1826510:	21001224 	muli	r4,r4,72
 1826514:	1105883a 	add	r2,r2,r4
 1826518:	10800304 	addi	r2,r2,12
 182651c:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_mdio_shared 				= pmac->tse_mdio_shared;
 1826520:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826524:	11003fcc 	andi	r4,r2,255
 1826528:	2100201c 	xori	r4,r4,128
 182652c:	213fe004 	addi	r4,r4,-128
 1826530:	e0bffa17 	ldw	r2,-24(fp)
 1826534:	10c00343 	ldbu	r3,13(r2)
 1826538:	00806134 	movhi	r2,388
 182653c:	1093d804 	addi	r2,r2,20320
 1826540:	21001224 	muli	r4,r4,72
 1826544:	1105883a 	add	r2,r2,r4
 1826548:	10800344 	addi	r2,r2,13
 182654c:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared	= pmac->tse_number_of_mac_mdio_shared;
 1826550:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826554:	11003fcc 	andi	r4,r2,255
 1826558:	2100201c 	xori	r4,r4,128
 182655c:	213fe004 	addi	r4,r4,-128
 1826560:	e0bffa17 	ldw	r2,-24(fp)
 1826564:	10c00383 	ldbu	r3,14(r2)
 1826568:	00806134 	movhi	r2,388
 182656c:	1093d804 	addi	r2,r2,20320
 1826570:	21001224 	muli	r4,r4,72
 1826574:	1105883a 	add	r2,r2,r4
 1826578:	10800384 	addi	r2,r2,14
 182657c:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_pcs_ena 					= pmac->tse_pcs_ena;
 1826580:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826584:	11003fcc 	andi	r4,r2,255
 1826588:	2100201c 	xori	r4,r4,128
 182658c:	213fe004 	addi	r4,r4,-128
 1826590:	e0bffa17 	ldw	r2,-24(fp)
 1826594:	10c003c3 	ldbu	r3,15(r2)
 1826598:	00806134 	movhi	r2,388
 182659c:	1093d804 	addi	r2,r2,20320
 18265a0:	21001224 	muli	r4,r4,72
 18265a4:	1105883a 	add	r2,r2,r4
 18265a8:	108003c4 	addi	r2,r2,15
 18265ac:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_pcs_sgmii 					= pmac->tse_pcs_sgmii;
 18265b0:	d0a7fe83 	ldbu	r2,-24582(gp)
 18265b4:	11003fcc 	andi	r4,r2,255
 18265b8:	2100201c 	xori	r4,r4,128
 18265bc:	213fe004 	addi	r4,r4,-128
 18265c0:	e0bffa17 	ldw	r2,-24(fp)
 18265c4:	10c00403 	ldbu	r3,16(r2)
 18265c8:	00806134 	movhi	r2,388
 18265cc:	1093d804 	addi	r2,r2,20320
 18265d0:	21001224 	muli	r4,r4,72
 18265d4:	1105883a 	add	r2,r2,r4
 18265d8:	10800404 	addi	r2,r2,16
 18265dc:	10c00005 	stb	r3,0(r2)
		
		/* Add SGDMA info to alt_tse_system_info structure */
		if(psgdma == 0) {
 18265e0:	e0bff617 	ldw	r2,-40(fp)
 18265e4:	10000d1e 	bne	r2,zero,182661c <alt_tse_system_add_sys+0x39c>
			tse_dprintf(2, "ERROR   : SGDMA system structure == NULL\n");
 18265e8:	01006134 	movhi	r4,388
 18265ec:	21051d04 	addi	r4,r4,5236
 18265f0:	183c7cc0 	call	183c7cc <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
 18265f4:	d0a7fe83 	ldbu	r2,-24582(gp)
 18265f8:	10803fcc 	andi	r2,r2,255
 18265fc:	1080201c 	xori	r2,r2,128
 1826600:	10bfe004 	addi	r2,r2,-128
 1826604:	100b883a 	mov	r5,r2
 1826608:	01006134 	movhi	r4,388
 182660c:	21052804 	addi	r4,r4,5280
 1826610:	1800b240 	call	1800b24 <printf>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 1826614:	00bfffc4 	movi	r2,-1
 1826618:	00019206 	br	1826c64 <alt_tse_system_add_sys+0x9e4>
		}
		
		tse_mac_device[tse_system_count].tse_sgdma_tx = (char *) malloc(strlen(psgdma->tse_sgdma_tx) + 1);
 182661c:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826620:	14003fcc 	andi	r16,r2,255
 1826624:	8400201c 	xori	r16,r16,128
 1826628:	843fe004 	addi	r16,r16,-128
 182662c:	e0bff617 	ldw	r2,-40(fp)
 1826630:	10800017 	ldw	r2,0(r2)
 1826634:	1009883a 	mov	r4,r2
 1826638:	18074e40 	call	18074e4 <strlen>
 182663c:	10800044 	addi	r2,r2,1
 1826640:	1009883a 	mov	r4,r2
 1826644:	183c5000 	call	183c500 <malloc>
 1826648:	1009883a 	mov	r4,r2
 182664c:	00806134 	movhi	r2,388
 1826650:	1093d804 	addi	r2,r2,20320
 1826654:	80c01224 	muli	r3,r16,72
 1826658:	10c5883a 	add	r2,r2,r3
 182665c:	10800504 	addi	r2,r2,20
 1826660:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_tx) {
 1826664:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826668:	10c03fcc 	andi	r3,r2,255
 182666c:	18c0201c 	xori	r3,r3,128
 1826670:	18ffe004 	addi	r3,r3,-128
 1826674:	00806134 	movhi	r2,388
 1826678:	1093d804 	addi	r2,r2,20320
 182667c:	18c01224 	muli	r3,r3,72
 1826680:	10c5883a 	add	r2,r2,r3
 1826684:	10800504 	addi	r2,r2,20
 1826688:	10800017 	ldw	r2,0(r2)
 182668c:	10000a1e 	bne	r2,zero,18266b8 <alt_tse_system_add_sys+0x438>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
 1826690:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826694:	10803fcc 	andi	r2,r2,255
 1826698:	1080201c 	xori	r2,r2,128
 182669c:	10bfe004 	addi	r2,r2,-128
 18266a0:	100b883a 	mov	r5,r2
 18266a4:	01006134 	movhi	r4,388
 18266a8:	21054004 	addi	r4,r4,5376
 18266ac:	1800b240 	call	1800b24 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
 18266b0:	00bfffc4 	movi	r2,-1
 18266b4:	00016b06 	br	1826c64 <alt_tse_system_add_sys+0x9e4>
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
 18266b8:	d0a7fe83 	ldbu	r2,-24582(gp)
 18266bc:	10c03fcc 	andi	r3,r2,255
 18266c0:	18c0201c 	xori	r3,r3,128
 18266c4:	18ffe004 	addi	r3,r3,-128
 18266c8:	00806134 	movhi	r2,388
 18266cc:	1093d804 	addi	r2,r2,20320
 18266d0:	18c01224 	muli	r3,r3,72
 18266d4:	10c5883a 	add	r2,r2,r3
 18266d8:	10800504 	addi	r2,r2,20
 18266dc:	10c00017 	ldw	r3,0(r2)
 18266e0:	e0bff617 	ldw	r2,-40(fp)
 18266e4:	10800017 	ldw	r2,0(r2)
 18266e8:	100b883a 	mov	r5,r2
 18266ec:	1809883a 	mov	r4,r3
 18266f0:	183c99c0 	call	183c99c <strcpy>
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
 18266f4:	d0a7fe83 	ldbu	r2,-24582(gp)
 18266f8:	14003fcc 	andi	r16,r2,255
 18266fc:	8400201c 	xori	r16,r16,128
 1826700:	843fe004 	addi	r16,r16,-128
 1826704:	e0bff617 	ldw	r2,-40(fp)
 1826708:	10800117 	ldw	r2,4(r2)
 182670c:	1009883a 	mov	r4,r2
 1826710:	18074e40 	call	18074e4 <strlen>
 1826714:	10800044 	addi	r2,r2,1
 1826718:	1009883a 	mov	r4,r2
 182671c:	183c5000 	call	183c500 <malloc>
 1826720:	1009883a 	mov	r4,r2
 1826724:	00806134 	movhi	r2,388
 1826728:	1093d804 	addi	r2,r2,20320
 182672c:	80c01224 	muli	r3,r16,72
 1826730:	10c5883a 	add	r2,r2,r3
 1826734:	10800604 	addi	r2,r2,24
 1826738:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
 182673c:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826740:	10c03fcc 	andi	r3,r2,255
 1826744:	18c0201c 	xori	r3,r3,128
 1826748:	18ffe004 	addi	r3,r3,-128
 182674c:	00806134 	movhi	r2,388
 1826750:	1093d804 	addi	r2,r2,20320
 1826754:	18c01224 	muli	r3,r3,72
 1826758:	10c5883a 	add	r2,r2,r3
 182675c:	10800604 	addi	r2,r2,24
 1826760:	10800017 	ldw	r2,0(r2)
 1826764:	10000a1e 	bne	r2,zero,1826790 <alt_tse_system_add_sys+0x510>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_rx\n", tse_system_count);
 1826768:	d0a7fe83 	ldbu	r2,-24582(gp)
 182676c:	10803fcc 	andi	r2,r2,255
 1826770:	1080201c 	xori	r2,r2,128
 1826774:	10bfe004 	addi	r2,r2,-128
 1826778:	100b883a 	mov	r5,r2
 182677c:	01006134 	movhi	r4,388
 1826780:	21055304 	addi	r4,r4,5452
 1826784:	1800b240 	call	1800b24 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
 1826788:	00bfffc4 	movi	r2,-1
 182678c:	00013506 	br	1826c64 <alt_tse_system_add_sys+0x9e4>
	    }
	    strcpy(tse_mac_device[tse_system_count].tse_sgdma_rx, psgdma->tse_sgdma_rx);
 1826790:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826794:	10c03fcc 	andi	r3,r2,255
 1826798:	18c0201c 	xori	r3,r3,128
 182679c:	18ffe004 	addi	r3,r3,-128
 18267a0:	00806134 	movhi	r2,388
 18267a4:	1093d804 	addi	r2,r2,20320
 18267a8:	18c01224 	muli	r3,r3,72
 18267ac:	10c5883a 	add	r2,r2,r3
 18267b0:	10800604 	addi	r2,r2,24
 18267b4:	10c00017 	ldw	r3,0(r2)
 18267b8:	e0bff617 	ldw	r2,-40(fp)
 18267bc:	10800117 	ldw	r2,4(r2)
 18267c0:	100b883a 	mov	r5,r2
 18267c4:	1809883a 	mov	r4,r3
 18267c8:	183c99c0 	call	183c99c <strcpy>
	    
		tse_mac_device[tse_system_count].tse_sgdma_rx_irq = psgdma->tse_sgdma_rx_irq;
 18267cc:	d0a7fe83 	ldbu	r2,-24582(gp)
 18267d0:	11003fcc 	andi	r4,r2,255
 18267d4:	2100201c 	xori	r4,r4,128
 18267d8:	213fe004 	addi	r4,r4,-128
 18267dc:	e0bff617 	ldw	r2,-40(fp)
 18267e0:	10c0020b 	ldhu	r3,8(r2)
 18267e4:	00806134 	movhi	r2,388
 18267e8:	1093d804 	addi	r2,r2,20320
 18267ec:	21001224 	muli	r4,r4,72
 18267f0:	1105883a 	add	r2,r2,r4
 18267f4:	10800704 	addi	r2,r2,28
 18267f8:	10c0000d 	sth	r3,0(r2)
		
		/* Add descriptor memory info to alt_tse_system_info structure */
		if(pmem == 0) {
 18267fc:	e0bff717 	ldw	r2,-36(fp)
 1826800:	1000151e 	bne	r2,zero,1826858 <alt_tse_system_add_sys+0x5d8>
			tse_mac_device[tse_system_count].ext_desc_mem	= TSE_INT_DESC_MEM;
 1826804:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826808:	10c03fcc 	andi	r3,r2,255
 182680c:	18c0201c 	xori	r3,r3,128
 1826810:	18ffe004 	addi	r3,r3,-128
 1826814:	00806134 	movhi	r2,388
 1826818:	1093d804 	addi	r2,r2,20320
 182681c:	18c01224 	muli	r3,r3,72
 1826820:	10c5883a 	add	r2,r2,r3
 1826824:	10800784 	addi	r2,r2,30
 1826828:	10000005 	stb	zero,0(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= TSE_INT_DESC_MEM;
 182682c:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826830:	10c03fcc 	andi	r3,r2,255
 1826834:	18c0201c 	xori	r3,r3,128
 1826838:	18ffe004 	addi	r3,r3,-128
 182683c:	00806134 	movhi	r2,388
 1826840:	1093d804 	addi	r2,r2,20320
 1826844:	18c01224 	muli	r3,r3,72
 1826848:	10c5883a 	add	r2,r2,r3
 182684c:	10800804 	addi	r2,r2,32
 1826850:	10000015 	stw	zero,0(r2)
 1826854:	00001806 	br	18268b8 <alt_tse_system_add_sys+0x638>
		}
		else {
			tse_mac_device[tse_system_count].ext_desc_mem	= pmem->ext_desc_mem;
 1826858:	d0a7fe83 	ldbu	r2,-24582(gp)
 182685c:	11003fcc 	andi	r4,r2,255
 1826860:	2100201c 	xori	r4,r4,128
 1826864:	213fe004 	addi	r4,r4,-128
 1826868:	e0bff717 	ldw	r2,-36(fp)
 182686c:	10c00003 	ldbu	r3,0(r2)
 1826870:	00806134 	movhi	r2,388
 1826874:	1093d804 	addi	r2,r2,20320
 1826878:	21001224 	muli	r4,r4,72
 182687c:	1105883a 	add	r2,r2,r4
 1826880:	10800784 	addi	r2,r2,30
 1826884:	10c00005 	stb	r3,0(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= pmem->desc_mem_base;
 1826888:	d0a7fe83 	ldbu	r2,-24582(gp)
 182688c:	11003fcc 	andi	r4,r2,255
 1826890:	2100201c 	xori	r4,r4,128
 1826894:	213fe004 	addi	r4,r4,-128
 1826898:	e0bff717 	ldw	r2,-36(fp)
 182689c:	10c00117 	ldw	r3,4(r2)
 18268a0:	00806134 	movhi	r2,388
 18268a4:	1093d804 	addi	r2,r2,20320
 18268a8:	21001224 	muli	r4,r4,72
 18268ac:	1105883a 	add	r2,r2,r4
 18268b0:	10800804 	addi	r2,r2,32
 18268b4:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add shared fifo info to alt_tse_system_info structure */
		if(pfifo == 0) {
 18268b8:	e0bff817 	ldw	r2,-32(fp)
 18268bc:	1000471e 	bne	r2,zero,18269dc <alt_tse_system_add_sys+0x75c>
			tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
 18268c0:	d0a7fe83 	ldbu	r2,-24582(gp)
 18268c4:	10c03fcc 	andi	r3,r2,255
 18268c8:	18c0201c 	xori	r3,r3,128
 18268cc:	18ffe004 	addi	r3,r3,-128
 18268d0:	00806134 	movhi	r2,388
 18268d4:	1093d804 	addi	r2,r2,20320
 18268d8:	18c01224 	muli	r3,r3,72
 18268dc:	10c5883a 	add	r2,r2,r3
 18268e0:	10800904 	addi	r2,r2,36
 18268e4:	10000005 	stb	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= TSE_NO_SHARED_FIFO;
 18268e8:	d0a7fe83 	ldbu	r2,-24582(gp)
 18268ec:	10c03fcc 	andi	r3,r2,255
 18268f0:	18c0201c 	xori	r3,r3,128
 18268f4:	18ffe004 	addi	r3,r3,-128
 18268f8:	00806134 	movhi	r2,388
 18268fc:	1093d804 	addi	r2,r2,20320
 1826900:	18c01224 	muli	r3,r3,72
 1826904:	10c5883a 	add	r2,r2,r3
 1826908:	10800a04 	addi	r2,r2,40
 182690c:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= TSE_NO_SHARED_FIFO;
 1826910:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826914:	10c03fcc 	andi	r3,r2,255
 1826918:	18c0201c 	xori	r3,r3,128
 182691c:	18ffe004 	addi	r3,r3,-128
 1826920:	00806134 	movhi	r2,388
 1826924:	1093d804 	addi	r2,r2,20320
 1826928:	18c01224 	muli	r3,r3,72
 182692c:	10c5883a 	add	r2,r2,r3
 1826930:	10800b04 	addi	r2,r2,44
 1826934:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
 1826938:	d0a7fe83 	ldbu	r2,-24582(gp)
 182693c:	10c03fcc 	andi	r3,r2,255
 1826940:	18c0201c 	xori	r3,r3,128
 1826944:	18ffe004 	addi	r3,r3,-128
 1826948:	00806134 	movhi	r2,388
 182694c:	1093d804 	addi	r2,r2,20320
 1826950:	18c01224 	muli	r3,r3,72
 1826954:	10c5883a 	add	r2,r2,r3
 1826958:	10800c04 	addi	r2,r2,48
 182695c:	10000015 	stw	zero,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= TSE_NO_SHARED_FIFO;
 1826960:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826964:	10c03fcc 	andi	r3,r2,255
 1826968:	18c0201c 	xori	r3,r3,128
 182696c:	18ffe004 	addi	r3,r3,-128
 1826970:	00806134 	movhi	r2,388
 1826974:	1093d804 	addi	r2,r2,20320
 1826978:	18c01224 	muli	r3,r3,72
 182697c:	10c5883a 	add	r2,r2,r3
 1826980:	10800d04 	addi	r2,r2,52
 1826984:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= TSE_NO_SHARED_FIFO;
 1826988:	d0a7fe83 	ldbu	r2,-24582(gp)
 182698c:	10c03fcc 	andi	r3,r2,255
 1826990:	18c0201c 	xori	r3,r3,128
 1826994:	18ffe004 	addi	r3,r3,-128
 1826998:	00806134 	movhi	r2,388
 182699c:	1093d804 	addi	r2,r2,20320
 18269a0:	18c01224 	muli	r3,r3,72
 18269a4:	10c5883a 	add	r2,r2,r3
 18269a8:	10800e04 	addi	r2,r2,56
 18269ac:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
 18269b0:	d0a7fe83 	ldbu	r2,-24582(gp)
 18269b4:	10c03fcc 	andi	r3,r2,255
 18269b8:	18c0201c 	xori	r3,r3,128
 18269bc:	18ffe004 	addi	r3,r3,-128
 18269c0:	00806134 	movhi	r2,388
 18269c4:	1093d804 	addi	r2,r2,20320
 18269c8:	18c01224 	muli	r3,r3,72
 18269cc:	10c5883a 	add	r2,r2,r3
 18269d0:	10800f04 	addi	r2,r2,60
 18269d4:	10000015 	stw	zero,0(r2)
 18269d8:	00005406 	br	1826b2c <alt_tse_system_add_sys+0x8ac>
		}
		else {
			tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
 18269dc:	d0a7fe83 	ldbu	r2,-24582(gp)
 18269e0:	11003fcc 	andi	r4,r2,255
 18269e4:	2100201c 	xori	r4,r4,128
 18269e8:	213fe004 	addi	r4,r4,-128
 18269ec:	e0bff817 	ldw	r2,-32(fp)
 18269f0:	10c00003 	ldbu	r3,0(r2)
 18269f4:	00806134 	movhi	r2,388
 18269f8:	1093d804 	addi	r2,r2,20320
 18269fc:	21001224 	muli	r4,r4,72
 1826a00:	1105883a 	add	r2,r2,r4
 1826a04:	10800904 	addi	r2,r2,36
 1826a08:	10c00005 	stb	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= pfifo->tse_shared_fifo_tx_ctrl_base;
 1826a0c:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826a10:	11003fcc 	andi	r4,r2,255
 1826a14:	2100201c 	xori	r4,r4,128
 1826a18:	213fe004 	addi	r4,r4,-128
 1826a1c:	e0bff817 	ldw	r2,-32(fp)
 1826a20:	10c00117 	ldw	r3,4(r2)
 1826a24:	00806134 	movhi	r2,388
 1826a28:	1093d804 	addi	r2,r2,20320
 1826a2c:	21001224 	muli	r4,r4,72
 1826a30:	1105883a 	add	r2,r2,r4
 1826a34:	10800a04 	addi	r2,r2,40
 1826a38:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= pfifo->tse_shared_fifo_tx_stat_base;
 1826a3c:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826a40:	11003fcc 	andi	r4,r2,255
 1826a44:	2100201c 	xori	r4,r4,128
 1826a48:	213fe004 	addi	r4,r4,-128
 1826a4c:	e0bff817 	ldw	r2,-32(fp)
 1826a50:	10c00217 	ldw	r3,8(r2)
 1826a54:	00806134 	movhi	r2,388
 1826a58:	1093d804 	addi	r2,r2,20320
 1826a5c:	21001224 	muli	r4,r4,72
 1826a60:	1105883a 	add	r2,r2,r4
 1826a64:	10800b04 	addi	r2,r2,44
 1826a68:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
 1826a6c:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826a70:	11003fcc 	andi	r4,r2,255
 1826a74:	2100201c 	xori	r4,r4,128
 1826a78:	213fe004 	addi	r4,r4,-128
 1826a7c:	e0bff817 	ldw	r2,-32(fp)
 1826a80:	10c00317 	ldw	r3,12(r2)
 1826a84:	00806134 	movhi	r2,388
 1826a88:	1093d804 	addi	r2,r2,20320
 1826a8c:	21001224 	muli	r4,r4,72
 1826a90:	1105883a 	add	r2,r2,r4
 1826a94:	10800c04 	addi	r2,r2,48
 1826a98:	10c00015 	stw	r3,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= pfifo->tse_shared_fifo_rx_ctrl_base;
 1826a9c:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826aa0:	11003fcc 	andi	r4,r2,255
 1826aa4:	2100201c 	xori	r4,r4,128
 1826aa8:	213fe004 	addi	r4,r4,-128
 1826aac:	e0bff817 	ldw	r2,-32(fp)
 1826ab0:	10c00417 	ldw	r3,16(r2)
 1826ab4:	00806134 	movhi	r2,388
 1826ab8:	1093d804 	addi	r2,r2,20320
 1826abc:	21001224 	muli	r4,r4,72
 1826ac0:	1105883a 	add	r2,r2,r4
 1826ac4:	10800d04 	addi	r2,r2,52
 1826ac8:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= pfifo->tse_shared_fifo_rx_stat_base;
 1826acc:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826ad0:	11003fcc 	andi	r4,r2,255
 1826ad4:	2100201c 	xori	r4,r4,128
 1826ad8:	213fe004 	addi	r4,r4,-128
 1826adc:	e0bff817 	ldw	r2,-32(fp)
 1826ae0:	10c00517 	ldw	r3,20(r2)
 1826ae4:	00806134 	movhi	r2,388
 1826ae8:	1093d804 	addi	r2,r2,20320
 1826aec:	21001224 	muli	r4,r4,72
 1826af0:	1105883a 	add	r2,r2,r4
 1826af4:	10800e04 	addi	r2,r2,56
 1826af8:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
 1826afc:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826b00:	11003fcc 	andi	r4,r2,255
 1826b04:	2100201c 	xori	r4,r4,128
 1826b08:	213fe004 	addi	r4,r4,-128
 1826b0c:	e0bff817 	ldw	r2,-32(fp)
 1826b10:	10c00617 	ldw	r3,24(r2)
 1826b14:	00806134 	movhi	r2,388
 1826b18:	1093d804 	addi	r2,r2,20320
 1826b1c:	21001224 	muli	r4,r4,72
 1826b20:	1105883a 	add	r2,r2,r4
 1826b24:	10800f04 	addi	r2,r2,60
 1826b28:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add PHY info to alt_tse_system_info structure */
		if(pphy == 0) {
 1826b2c:	e0bff917 	ldw	r2,-28(fp)
 1826b30:	1000161e 	bne	r2,zero,1826b8c <alt_tse_system_add_sys+0x90c>
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= TSE_PHY_AUTO_ADDRESS;
 1826b34:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826b38:	10c03fcc 	andi	r3,r2,255
 1826b3c:	18c0201c 	xori	r3,r3,128
 1826b40:	18ffe004 	addi	r3,r3,-128
 1826b44:	00806134 	movhi	r2,388
 1826b48:	1093d804 	addi	r2,r2,20320
 1826b4c:	18c01224 	muli	r3,r3,72
 1826b50:	10c5883a 	add	r2,r2,r3
 1826b54:	10801004 	addi	r2,r2,64
 1826b58:	00ffffc4 	movi	r3,-1
 1826b5c:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= 0;
 1826b60:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826b64:	10c03fcc 	andi	r3,r2,255
 1826b68:	18c0201c 	xori	r3,r3,128
 1826b6c:	18ffe004 	addi	r3,r3,-128
 1826b70:	00806134 	movhi	r2,388
 1826b74:	1093d804 	addi	r2,r2,20320
 1826b78:	18c01224 	muli	r3,r3,72
 1826b7c:	10c5883a 	add	r2,r2,r3
 1826b80:	10801104 	addi	r2,r2,68
 1826b84:	10000015 	stw	zero,0(r2)
 1826b88:	00001806 	br	1826bec <alt_tse_system_add_sys+0x96c>
		}
		else {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
 1826b8c:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826b90:	11003fcc 	andi	r4,r2,255
 1826b94:	2100201c 	xori	r4,r4,128
 1826b98:	213fe004 	addi	r4,r4,-128
 1826b9c:	e0bff917 	ldw	r2,-28(fp)
 1826ba0:	10c00017 	ldw	r3,0(r2)
 1826ba4:	00806134 	movhi	r2,388
 1826ba8:	1093d804 	addi	r2,r2,20320
 1826bac:	21001224 	muli	r4,r4,72
 1826bb0:	1105883a 	add	r2,r2,r4
 1826bb4:	10801004 	addi	r2,r2,64
 1826bb8:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
 1826bbc:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826bc0:	11003fcc 	andi	r4,r2,255
 1826bc4:	2100201c 	xori	r4,r4,128
 1826bc8:	213fe004 	addi	r4,r4,-128
 1826bcc:	e0bff917 	ldw	r2,-28(fp)
 1826bd0:	10c00117 	ldw	r3,4(r2)
 1826bd4:	00806134 	movhi	r2,388
 1826bd8:	1093d804 	addi	r2,r2,20320
 1826bdc:	21001224 	muli	r4,r4,72
 1826be0:	1105883a 	add	r2,r2,r4
 1826be4:	10801104 	addi	r2,r2,68
 1826be8:	10c00015 	stw	r3,0(r2)
		}
		
		/* Point to next structure */
		psgdma++;
 1826bec:	e0bff617 	ldw	r2,-40(fp)
 1826bf0:	10800304 	addi	r2,r2,12
 1826bf4:	e0bff615 	stw	r2,-40(fp)
		if(pmem) pmem++;
 1826bf8:	e0bff717 	ldw	r2,-36(fp)
 1826bfc:	10000326 	beq	r2,zero,1826c0c <alt_tse_system_add_sys+0x98c>
 1826c00:	e0bff717 	ldw	r2,-36(fp)
 1826c04:	10800204 	addi	r2,r2,8
 1826c08:	e0bff715 	stw	r2,-36(fp)
		if(pfifo) pfifo++;
 1826c0c:	e0bff817 	ldw	r2,-32(fp)
 1826c10:	10000326 	beq	r2,zero,1826c20 <alt_tse_system_add_sys+0x9a0>
 1826c14:	e0bff817 	ldw	r2,-32(fp)
 1826c18:	10800704 	addi	r2,r2,28
 1826c1c:	e0bff815 	stw	r2,-32(fp)
		if(pphy) pphy++;
 1826c20:	e0bff917 	ldw	r2,-28(fp)
 1826c24:	10000326 	beq	r2,zero,1826c34 <alt_tse_system_add_sys+0x9b4>
 1826c28:	e0bff917 	ldw	r2,-28(fp)
 1826c2c:	10800204 	addi	r2,r2,8
 1826c30:	e0bff915 	stw	r2,-28(fp)
		
		tse_system_count++;
 1826c34:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826c38:	10800044 	addi	r2,r2,1
 1826c3c:	d0a7fe85 	stb	r2,-24582(gp)
		max_mac_system = tse_system_count;
 1826c40:	d0a7fe83 	ldbu	r2,-24582(gp)
 1826c44:	d0a01905 	stb	r2,-32668(gp)
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
	}

	for(i = 0; i < loop_end; i++) {
 1826c48:	e0bff417 	ldw	r2,-48(fp)
 1826c4c:	10800044 	addi	r2,r2,1
 1826c50:	e0bff415 	stw	r2,-48(fp)
 1826c54:	e0fff417 	ldw	r3,-48(fp)
 1826c58:	e0bff517 	ldw	r2,-44(fp)
 1826c5c:	18bdb216 	blt	r3,r2,1826328 <__ram_exceptions_end+0xff816038>
		
		tse_system_count++;
		max_mac_system = tse_system_count;
	}
	
	return SUCCESS;
 1826c60:	0005883a 	mov	r2,zero
	
}
 1826c64:	e6ffff04 	addi	sp,fp,-4
 1826c68:	dfc00217 	ldw	ra,8(sp)
 1826c6c:	df000117 	ldw	fp,4(sp)
 1826c70:	dc000017 	ldw	r16,0(sp)
 1826c74:	dec00304 	addi	sp,sp,12
 1826c78:	f800283a 	ret

01826c7c <alt_tse_sys_enable_mdio_sharing>:
 * @param		number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 * 				ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
 1826c7c:	defff904 	addi	sp,sp,-28
 1826c80:	dfc00615 	stw	ra,24(sp)
 1826c84:	df000515 	stw	fp,20(sp)
 1826c88:	df000504 	addi	fp,sp,20
 1826c8c:	e13ffe15 	stw	r4,-8(fp)
 1826c90:	2805883a 	mov	r2,r5
 1826c94:	e0bfff05 	stb	r2,-4(fp)
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 1826c98:	e03ffb15 	stw	zero,-20(fp)
 1826c9c:	00004806 	br	1826dc0 <alt_tse_sys_enable_mdio_sharing+0x144>
		psys_mac = psys_mac_list[i];
 1826ca0:	e0bffb17 	ldw	r2,-20(fp)
 1826ca4:	1085883a 	add	r2,r2,r2
 1826ca8:	1085883a 	add	r2,r2,r2
 1826cac:	1007883a 	mov	r3,r2
 1826cb0:	e0bffe17 	ldw	r2,-8(fp)
 1826cb4:	10c5883a 	add	r2,r2,r3
 1826cb8:	10800017 	ldw	r2,0(r2)
 1826cbc:	e0bffd15 	stw	r2,-12(fp)
		
		if(psys_mac == 0) {
 1826cc0:	e0bffd17 	ldw	r2,-12(fp)
 1826cc4:	1000081e 	bne	r2,zero,1826ce8 <alt_tse_sys_enable_mdio_sharing+0x6c>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 1826cc8:	01006134 	movhi	r4,388
 1826ccc:	21050104 	addi	r4,r4,5124
 1826cd0:	183c7cc0 	call	183c7cc <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
 1826cd4:	01006134 	movhi	r4,388
 1826cd8:	21056604 	addi	r4,r4,5528
 1826cdc:	183c7cc0 	call	183c7cc <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 1826ce0:	00bfffc4 	movi	r2,-1
 1826ce4:	00003a06 	br	1826dd0 <alt_tse_sys_enable_mdio_sharing+0x154>
		}
		
		for(j = 0; j < max_mac_system; j++) {
 1826ce8:	e03ffc15 	stw	zero,-16(fp)
 1826cec:	00002d06 	br	1826da4 <alt_tse_sys_enable_mdio_sharing+0x128>
			
			if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
 1826cf0:	e0bffd17 	ldw	r2,-12(fp)
 1826cf4:	10c00017 	ldw	r3,0(r2)
 1826cf8:	00806134 	movhi	r2,388
 1826cfc:	1093d804 	addi	r2,r2,20320
 1826d00:	e13ffc17 	ldw	r4,-16(fp)
 1826d04:	21001224 	muli	r4,r4,72
 1826d08:	1105883a 	add	r2,r2,r4
 1826d0c:	10800017 	ldw	r2,0(r2)
 1826d10:	1880211e 	bne	r3,r2,1826d98 <alt_tse_sys_enable_mdio_sharing+0x11c>
				if(tse_mac_device[j].tse_multichannel_mac) {
 1826d14:	00806134 	movhi	r2,388
 1826d18:	1093d804 	addi	r2,r2,20320
 1826d1c:	e0fffc17 	ldw	r3,-16(fp)
 1826d20:	18c01224 	muli	r3,r3,72
 1826d24:	10c5883a 	add	r2,r2,r3
 1826d28:	108002c4 	addi	r2,r2,11
 1826d2c:	10800003 	ldbu	r2,0(r2)
 1826d30:	10803fcc 	andi	r2,r2,255
 1826d34:	10000826 	beq	r2,zero,1826d58 <alt_tse_sys_enable_mdio_sharing+0xdc>
					tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
 1826d38:	01006134 	movhi	r4,388
 1826d3c:	21057a04 	addi	r4,r4,5608
 1826d40:	183c7cc0 	call	183c7cc <puts>
					tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
 1826d44:	01006134 	movhi	r4,388
 1826d48:	21058b04 	addi	r4,r4,5676
 1826d4c:	183c7cc0 	call	183c7cc <puts>
					return ALTERA_TSE_SYSTEM_DEF_ERROR;
 1826d50:	00bfffc4 	movi	r2,-1
 1826d54:	00001e06 	br	1826dd0 <alt_tse_sys_enable_mdio_sharing+0x154>
				}
				
				tse_mac_device[j].tse_mdio_shared = 1;
 1826d58:	00806134 	movhi	r2,388
 1826d5c:	1093d804 	addi	r2,r2,20320
 1826d60:	e0fffc17 	ldw	r3,-16(fp)
 1826d64:	18c01224 	muli	r3,r3,72
 1826d68:	10c5883a 	add	r2,r2,r3
 1826d6c:	10800344 	addi	r2,r2,13
 1826d70:	00c00044 	movi	r3,1
 1826d74:	10c00005 	stb	r3,0(r2)
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
 1826d78:	00806134 	movhi	r2,388
 1826d7c:	1093d804 	addi	r2,r2,20320
 1826d80:	e0fffc17 	ldw	r3,-16(fp)
 1826d84:	18c01224 	muli	r3,r3,72
 1826d88:	10c5883a 	add	r2,r2,r3
 1826d8c:	10800384 	addi	r2,r2,14
 1826d90:	e0ffff03 	ldbu	r3,-4(fp)
 1826d94:	10c00005 	stb	r3,0(r2)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		for(j = 0; j < max_mac_system; j++) {
 1826d98:	e0bffc17 	ldw	r2,-16(fp)
 1826d9c:	10800044 	addi	r2,r2,1
 1826da0:	e0bffc15 	stw	r2,-16(fp)
 1826da4:	d0a01903 	ldbu	r2,-32668(gp)
 1826da8:	10803fcc 	andi	r2,r2,255
 1826dac:	e0fffc17 	ldw	r3,-16(fp)
 1826db0:	18bfcf16 	blt	r3,r2,1826cf0 <__ram_exceptions_end+0xff816a00>
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 1826db4:	e0bffb17 	ldw	r2,-20(fp)
 1826db8:	10800044 	addi	r2,r2,1
 1826dbc:	e0bffb15 	stw	r2,-20(fp)
 1826dc0:	e0bfff03 	ldbu	r2,-4(fp)
 1826dc4:	e0fffb17 	ldw	r3,-20(fp)
 1826dc8:	18bfb516 	blt	r3,r2,1826ca0 <__ram_exceptions_end+0xff8169b0>
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
			}
		}	
	}
	
	return SUCCESS;
 1826dcc:	0005883a 	mov	r2,zero
}
 1826dd0:	e037883a 	mov	sp,fp
 1826dd4:	dfc00117 	ldw	ra,4(sp)
 1826dd8:	df000017 	ldw	fp,0(sp)
 1826ddc:	dec00204 	addi	sp,sp,8
 1826de0:	f800283a 	ret

01826de4 <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
 1826de4:	defffc04 	addi	sp,sp,-16
 1826de8:	dfc00315 	stw	ra,12(sp)
 1826dec:	df000215 	stw	fp,8(sp)
 1826df0:	df000204 	addi	fp,sp,8
 1826df4:	e13fff15 	stw	r4,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 1826df8:	e13fff17 	ldw	r4,-4(fp)
 1826dfc:	1826fcc0 	call	1826fcc <alt_tse_get_mac_info>
 1826e00:	10800317 	ldw	r2,12(r2)
 1826e04:	e0bffe15 	stw	r2,-8(fp)
    return alt_tse_phy_get_common_speed(pmac_group);
 1826e08:	e13ffe17 	ldw	r4,-8(fp)
 1826e0c:	182a18c0 	call	182a18c <alt_tse_phy_get_common_speed>
}
 1826e10:	e037883a 	mov	sp,fp
 1826e14:	dfc00117 	ldw	ra,4(sp)
 1826e18:	df000017 	ldw	fp,0(sp)
 1826e1c:	dec00204 	addi	sp,sp,8
 1826e20:	f800283a 	ret

01826e24 <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
 1826e24:	defffb04 	addi	sp,sp,-20
 1826e28:	dfc00415 	stw	ra,16(sp)
 1826e2c:	df000315 	stw	fp,12(sp)
 1826e30:	df000304 	addi	fp,sp,12
 1826e34:	e13ffe15 	stw	r4,-8(fp)
 1826e38:	e17fff15 	stw	r5,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 1826e3c:	e13ffe17 	ldw	r4,-8(fp)
 1826e40:	1826fcc0 	call	1826fcc <alt_tse_get_mac_info>
 1826e44:	10800317 	ldw	r2,12(r2)
 1826e48:	e0bffd15 	stw	r2,-12(fp)
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
 1826e4c:	e17fff17 	ldw	r5,-4(fp)
 1826e50:	e13ffd17 	ldw	r4,-12(fp)
 1826e54:	182a4b40 	call	182a4b4 <alt_tse_phy_set_common_speed>
}
 1826e58:	e037883a 	mov	sp,fp
 1826e5c:	dfc00117 	ldw	ra,4(sp)
 1826e60:	df000017 	ldw	fp,0(sp)
 1826e64:	dec00204 	addi	sp,sp,8
 1826e68:	f800283a 	ret

01826e6c <alt_tse_get_system_index>:
/* @Function Description: Get the index of alt_tse_system_info structure in tse_mac_device[]
 * @API Type:        Internal
 * @param psys_info  Pointer to the alt_tse_system_info structure
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
 1826e6c:	defffd04 	addi	sp,sp,-12
 1826e70:	df000215 	stw	fp,8(sp)
 1826e74:	df000204 	addi	fp,sp,8
 1826e78:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 1826e7c:	e03ffe15 	stw	zero,-8(fp)
 1826e80:	00000c06 	br	1826eb4 <alt_tse_get_system_index+0x48>
        if(psys_info == &tse_mac_device[i]) {
 1826e84:	e0bffe17 	ldw	r2,-8(fp)
 1826e88:	10c01224 	muli	r3,r2,72
 1826e8c:	00806134 	movhi	r2,388
 1826e90:	1093d804 	addi	r2,r2,20320
 1826e94:	1887883a 	add	r3,r3,r2
 1826e98:	e0bfff17 	ldw	r2,-4(fp)
 1826e9c:	1880021e 	bne	r3,r2,1826ea8 <alt_tse_get_system_index+0x3c>
            return i;
 1826ea0:	e0bffe17 	ldw	r2,-8(fp)
 1826ea4:	00000806 	br	1826ec8 <alt_tse_get_system_index+0x5c>
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 1826ea8:	e0bffe17 	ldw	r2,-8(fp)
 1826eac:	10800044 	addi	r2,r2,1
 1826eb0:	e0bffe15 	stw	r2,-8(fp)
 1826eb4:	d0a01903 	ldbu	r2,-32668(gp)
 1826eb8:	10803fcc 	andi	r2,r2,255
 1826ebc:	e0fffe17 	ldw	r3,-8(fp)
 1826ec0:	18bff016 	blt	r3,r2,1826e84 <__ram_exceptions_end+0xff816b94>
        if(psys_info == &tse_mac_device[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 1826ec4:	00bfffc4 	movi	r2,-1
}
 1826ec8:	e037883a 	mov	sp,fp
 1826ecc:	df000017 	ldw	fp,0(sp)
 1826ed0:	dec00104 	addi	sp,sp,4
 1826ed4:	f800283a 	ret

01826ed8 <alt_tse_get_mac_group_index>:
/* @Function Description: Get the index of alt_tse_mac_group structure in pmac_groups[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_group structure
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
 1826ed8:	defffd04 	addi	sp,sp,-12
 1826edc:	df000215 	stw	fp,8(sp)
 1826ee0:	df000204 	addi	fp,sp,8
 1826ee4:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 1826ee8:	e03ffe15 	stw	zero,-8(fp)
 1826eec:	00000e06 	br	1826f28 <alt_tse_get_mac_group_index+0x50>
        if(pmac_group == pmac_groups[i]) {
 1826ef0:	00806134 	movhi	r2,388
 1826ef4:	109ed204 	addi	r2,r2,31560
 1826ef8:	e0fffe17 	ldw	r3,-8(fp)
 1826efc:	18c7883a 	add	r3,r3,r3
 1826f00:	18c7883a 	add	r3,r3,r3
 1826f04:	10c5883a 	add	r2,r2,r3
 1826f08:	10c00017 	ldw	r3,0(r2)
 1826f0c:	e0bfff17 	ldw	r2,-4(fp)
 1826f10:	1880021e 	bne	r3,r2,1826f1c <alt_tse_get_mac_group_index+0x44>
            return i;
 1826f14:	e0bffe17 	ldw	r2,-8(fp)
 1826f18:	00000806 	br	1826f3c <alt_tse_get_mac_group_index+0x64>
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 1826f1c:	e0bffe17 	ldw	r2,-8(fp)
 1826f20:	10800044 	addi	r2,r2,1
 1826f24:	e0bffe15 	stw	r2,-8(fp)
 1826f28:	d0a7fe43 	ldbu	r2,-24583(gp)
 1826f2c:	10803fcc 	andi	r2,r2,255
 1826f30:	e0fffe17 	ldw	r3,-8(fp)
 1826f34:	18bfee16 	blt	r3,r2,1826ef0 <__ram_exceptions_end+0xff816c00>
        if(pmac_group == pmac_groups[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 1826f38:	00bfffc4 	movi	r2,-1
}
 1826f3c:	e037883a 	mov	sp,fp
 1826f40:	df000017 	ldw	fp,0(sp)
 1826f44:	dec00104 	addi	sp,sp,4
 1826f48:	f800283a 	ret

01826f4c <alt_tse_get_mac_info_index>:
/* @Function Description: Get the index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_info structure
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
 1826f4c:	defffd04 	addi	sp,sp,-12
 1826f50:	df000215 	stw	fp,8(sp)
 1826f54:	df000204 	addi	fp,sp,8
 1826f58:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 1826f5c:	e03ffe15 	stw	zero,-8(fp)
 1826f60:	00000f06 	br	1826fa0 <alt_tse_get_mac_info_index+0x54>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
 1826f64:	e0bfff17 	ldw	r2,-4(fp)
 1826f68:	10c00317 	ldw	r3,12(r2)
 1826f6c:	e0bffe17 	ldw	r2,-8(fp)
 1826f70:	10800044 	addi	r2,r2,1
 1826f74:	1085883a 	add	r2,r2,r2
 1826f78:	1085883a 	add	r2,r2,r2
 1826f7c:	1885883a 	add	r2,r3,r2
 1826f80:	10c00017 	ldw	r3,0(r2)
 1826f84:	e0bfff17 	ldw	r2,-4(fp)
 1826f88:	1880021e 	bne	r3,r2,1826f94 <alt_tse_get_mac_info_index+0x48>
            return i;
 1826f8c:	e0bffe17 	ldw	r2,-8(fp)
 1826f90:	00000a06 	br	1826fbc <alt_tse_get_mac_info_index+0x70>
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 1826f94:	e0bffe17 	ldw	r2,-8(fp)
 1826f98:	10800044 	addi	r2,r2,1
 1826f9c:	e0bffe15 	stw	r2,-8(fp)
 1826fa0:	e0bfff17 	ldw	r2,-4(fp)
 1826fa4:	10800317 	ldw	r2,12(r2)
 1826fa8:	10800003 	ldbu	r2,0(r2)
 1826fac:	10803fcc 	andi	r2,r2,255
 1826fb0:	e0fffe17 	ldw	r3,-8(fp)
 1826fb4:	18bfeb16 	blt	r3,r2,1826f64 <__ram_exceptions_end+0xff816c74>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
            return i;
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
 1826fb8:	00bfffc4 	movi	r2,-1
}
 1826fbc:	e037883a 	mov	sp,fp
 1826fc0:	df000017 	ldw	fp,0(sp)
 1826fc4:	dec00104 	addi	sp,sp,4
 1826fc8:	f800283a 	ret

01826fcc <alt_tse_get_mac_info>:
/* @Function Description: Get the pointer of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac        Pointer to the TSE MAC Control Interface Base address
 * @return            Pointer to alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_tse_mac_info *alt_tse_get_mac_info(np_tse_mac *pmac) {
 1826fcc:	defffa04 	addi	sp,sp,-24
 1826fd0:	df000515 	stw	fp,20(sp)
 1826fd4:	df000504 	addi	fp,sp,20
 1826fd8:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
 1826fdc:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 1826fe0:	e03ffe15 	stw	zero,-8(fp)
    
    for(i = 0; i < mac_group_count; i++) {
 1826fe4:	e03ffb15 	stw	zero,-20(fp)
 1826fe8:	00002506 	br	1827080 <alt_tse_get_mac_info+0xb4>
        pmac_group = pmac_groups[i];
 1826fec:	00806134 	movhi	r2,388
 1826ff0:	109ed204 	addi	r2,r2,31560
 1826ff4:	e0fffb17 	ldw	r3,-20(fp)
 1826ff8:	18c7883a 	add	r3,r3,r3
 1826ffc:	18c7883a 	add	r3,r3,r3
 1827000:	10c5883a 	add	r2,r2,r3
 1827004:	10800017 	ldw	r2,0(r2)
 1827008:	e0bffd15 	stw	r2,-12(fp)
        for(j = 0; j < pmac_group->channel; j++) {
 182700c:	e03ffc15 	stw	zero,-16(fp)
 1827010:	00001306 	br	1827060 <alt_tse_get_mac_info+0x94>
            pmac_info = pmac_group->pmac_info[j];
 1827014:	e0fffd17 	ldw	r3,-12(fp)
 1827018:	e0bffc17 	ldw	r2,-16(fp)
 182701c:	10800044 	addi	r2,r2,1
 1827020:	1085883a 	add	r2,r2,r2
 1827024:	1085883a 	add	r2,r2,r2
 1827028:	1885883a 	add	r2,r3,r2
 182702c:	10800017 	ldw	r2,0(r2)
 1827030:	e0bffe15 	stw	r2,-8(fp)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
 1827034:	e0bffe17 	ldw	r2,-8(fp)
 1827038:	10800217 	ldw	r2,8(r2)
 182703c:	10800017 	ldw	r2,0(r2)
 1827040:	1007883a 	mov	r3,r2
 1827044:	e0bfff17 	ldw	r2,-4(fp)
 1827048:	1880021e 	bne	r3,r2,1827054 <alt_tse_get_mac_info+0x88>
                return pmac_info;
 182704c:	e0bffe17 	ldw	r2,-8(fp)
 1827050:	00001006 	br	1827094 <alt_tse_get_mac_info+0xc8>
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
        pmac_group = pmac_groups[i];
        for(j = 0; j < pmac_group->channel; j++) {
 1827054:	e0bffc17 	ldw	r2,-16(fp)
 1827058:	10800044 	addi	r2,r2,1
 182705c:	e0bffc15 	stw	r2,-16(fp)
 1827060:	e0bffd17 	ldw	r2,-12(fp)
 1827064:	10800003 	ldbu	r2,0(r2)
 1827068:	10803fcc 	andi	r2,r2,255
 182706c:	e0fffc17 	ldw	r3,-16(fp)
 1827070:	18bfe816 	blt	r3,r2,1827014 <__ram_exceptions_end+0xff816d24>
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
 1827074:	e0bffb17 	ldw	r2,-20(fp)
 1827078:	10800044 	addi	r2,r2,1
 182707c:	e0bffb15 	stw	r2,-20(fp)
 1827080:	d0a7fe43 	ldbu	r2,-24583(gp)
 1827084:	10803fcc 	andi	r2,r2,255
 1827088:	e0fffb17 	ldw	r3,-20(fp)
 182708c:	18bfd716 	blt	r3,r2,1826fec <__ram_exceptions_end+0xff816cfc>
                return pmac_info;
            }
        }        
    }
    
    return 0;
 1827090:	0005883a 	mov	r2,zero
}
 1827094:	e037883a 	mov	sp,fp
 1827098:	df000017 	ldw	fp,0(sp)
 182709c:	dec00104 	addi	sp,sp,4
 18270a0:	f800283a 	ret

018270a4 <alt_tse_mac_set_speed>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param speed 2 = 1000 Mbps, 1 = 100 Mbps, 0 = 10 Mbps
 * @return ENP_PARAM if invalid speed specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
 18270a4:	defffc04 	addi	sp,sp,-16
 18270a8:	df000315 	stw	fp,12(sp)
 18270ac:	df000304 	addi	fp,sp,12
 18270b0:	e13ffe15 	stw	r4,-8(fp)
 18270b4:	2805883a 	mov	r2,r5
 18270b8:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 18270bc:	e0bffe17 	ldw	r2,-8(fp)
 18270c0:	10800204 	addi	r2,r2,8
 18270c4:	10800037 	ldwio	r2,0(r2)
 18270c8:	e0bffd15 	stw	r2,-12(fp)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
 18270cc:	e0bfff03 	ldbu	r2,-4(fp)
 18270d0:	10800098 	cmpnei	r2,r2,2
 18270d4:	1000091e 	bne	r2,zero,18270fc <alt_tse_mac_set_speed+0x58>
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 18270d8:	e0bffd17 	ldw	r2,-12(fp)
 18270dc:	10800214 	ori	r2,r2,8
 18270e0:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 18270e4:	e0fffd17 	ldw	r3,-12(fp)
 18270e8:	00bf8034 	movhi	r2,65024
 18270ec:	10bfffc4 	addi	r2,r2,-1
 18270f0:	1884703a 	and	r2,r3,r2
 18270f4:	e0bffd15 	stw	r2,-12(fp)
 18270f8:	00001906 	br	1827160 <alt_tse_mac_set_speed+0xbc>
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
 18270fc:	e0bfff03 	ldbu	r2,-4(fp)
 1827100:	10800058 	cmpnei	r2,r2,1
 1827104:	10000a1e 	bne	r2,zero,1827130 <alt_tse_mac_set_speed+0x8c>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 1827108:	e0fffd17 	ldw	r3,-12(fp)
 182710c:	00bffdc4 	movi	r2,-9
 1827110:	1884703a 	and	r2,r3,r2
 1827114:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 1827118:	e0fffd17 	ldw	r3,-12(fp)
 182711c:	00bf8034 	movhi	r2,65024
 1827120:	10bfffc4 	addi	r2,r2,-1
 1827124:	1884703a 	and	r2,r3,r2
 1827128:	e0bffd15 	stw	r2,-12(fp)
 182712c:	00000c06 	br	1827160 <alt_tse_mac_set_speed+0xbc>
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
 1827130:	e0bfff03 	ldbu	r2,-4(fp)
 1827134:	1000081e 	bne	r2,zero,1827158 <alt_tse_mac_set_speed+0xb4>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 1827138:	e0fffd17 	ldw	r3,-12(fp)
 182713c:	00bffdc4 	movi	r2,-9
 1827140:	1884703a 	and	r2,r3,r2
 1827144:	e0bffd15 	stw	r2,-12(fp)
	helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 1827148:	e0bffd17 	ldw	r2,-12(fp)
 182714c:	10808034 	orhi	r2,r2,512
 1827150:	e0bffd15 	stw	r2,-12(fp)
 1827154:	00000206 	br	1827160 <alt_tse_mac_set_speed+0xbc>
  }  
  else {
    return ENP_PARAM;
 1827158:	00bffd84 	movi	r2,-10
 182715c:	00000506 	br	1827174 <alt_tse_mac_set_speed+0xd0>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 1827160:	e0bffe17 	ldw	r2,-8(fp)
 1827164:	10800204 	addi	r2,r2,8
 1827168:	e0fffd17 	ldw	r3,-12(fp)
 182716c:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 1827170:	0005883a 	mov	r2,zero
}
 1827174:	e037883a 	mov	sp,fp
 1827178:	df000017 	ldw	fp,0(sp)
 182717c:	dec00104 	addi	sp,sp,4
 1827180:	f800283a 	ret

01827184 <alt_tse_mac_set_duplex>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param duplex 1 = Full Duplex, 0 = Half Duplex
 * @return ENP_PARAM if invalid duplex specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
 1827184:	defffc04 	addi	sp,sp,-16
 1827188:	df000315 	stw	fp,12(sp)
 182718c:	df000304 	addi	fp,sp,12
 1827190:	e13ffe15 	stw	r4,-8(fp)
 1827194:	2805883a 	mov	r2,r5
 1827198:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 182719c:	e0bffe17 	ldw	r2,-8(fp)
 18271a0:	10800204 	addi	r2,r2,8
 18271a4:	10800037 	ldwio	r2,0(r2)
 18271a8:	e0bffd15 	stw	r2,-12(fp)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 18271ac:	e0bfff03 	ldbu	r2,-4(fp)
 18271b0:	1000041e 	bne	r2,zero,18271c4 <alt_tse_mac_set_duplex+0x40>
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 18271b4:	e0bffd17 	ldw	r2,-12(fp)
 18271b8:	10810014 	ori	r2,r2,1024
 18271bc:	e0bffd15 	stw	r2,-12(fp)
 18271c0:	00000a06 	br	18271ec <alt_tse_mac_set_duplex+0x68>
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
 18271c4:	e0bfff03 	ldbu	r2,-4(fp)
 18271c8:	10800058 	cmpnei	r2,r2,1
 18271cc:	1000051e 	bne	r2,zero,18271e4 <alt_tse_mac_set_duplex+0x60>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 18271d0:	e0fffd17 	ldw	r3,-12(fp)
 18271d4:	00beffc4 	movi	r2,-1025
 18271d8:	1884703a 	and	r2,r3,r2
 18271dc:	e0bffd15 	stw	r2,-12(fp)
 18271e0:	00000206 	br	18271ec <alt_tse_mac_set_duplex+0x68>
  }
  else {
    return ENP_PARAM;
 18271e4:	00bffd84 	movi	r2,-10
 18271e8:	00000506 	br	1827200 <alt_tse_mac_set_duplex+0x7c>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 18271ec:	e0bffe17 	ldw	r2,-8(fp)
 18271f0:	10800204 	addi	r2,r2,8
 18271f4:	e0fffd17 	ldw	r3,-12(fp)
 18271f8:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 18271fc:	0005883a 	mov	r2,zero

}
 1827200:	e037883a 	mov	sp,fp
 1827204:	df000017 	ldw	fp,0(sp)
 1827208:	dec00104 	addi	sp,sp,4
 182720c:	f800283a 	ret

01827210 <getPHYSpeed>:
  	(((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
	(((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
	(((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
	((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
 1827210:	defff404 	addi	sp,sp,-48
 1827214:	dfc00b15 	stw	ra,44(sp)
 1827218:	df000a15 	stw	fp,40(sp)
 182721c:	df000a04 	addi	fp,sp,40
 1827220:	e13fff15 	stw	r4,-4(fp)

	alt_u8 speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 1827224:	00800044 	movi	r2,1
 1827228:	e0bff705 	stb	r2,-36(fp)
	alt_u8 duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;     /* 1 = full ; 0 = half*/
 182722c:	00800044 	movi	r2,1
 1827230:	e0bff745 	stb	r2,-35(fp)
	alt_32 result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 1827234:	e0bff743 	ldbu	r2,-35(fp)
 1827238:	10c0004c 	andi	r3,r2,1
 182723c:	e0bff703 	ldbu	r2,-36(fp)
 1827240:	10800098 	cmpnei	r2,r2,2
 1827244:	1000021e 	bne	r2,zero,1827250 <getPHYSpeed+0x40>
 1827248:	00800084 	movi	r2,2
 182724c:	00000106 	br	1827254 <getPHYSpeed+0x44>
 1827250:	0005883a 	mov	r2,zero
 1827254:	1886b03a 	or	r3,r3,r2
 1827258:	e0bff703 	ldbu	r2,-36(fp)
 182725c:	10800058 	cmpnei	r2,r2,1
 1827260:	1000021e 	bne	r2,zero,182726c <getPHYSpeed+0x5c>
 1827264:	00800104 	movi	r2,4
 1827268:	00000106 	br	1827270 <getPHYSpeed+0x60>
 182726c:	0005883a 	mov	r2,zero
 1827270:	1886b03a 	or	r3,r3,r2
 1827274:	e0bff703 	ldbu	r2,-36(fp)
 1827278:	1000021e 	bne	r2,zero,1827284 <getPHYSpeed+0x74>
 182727c:	00800204 	movi	r2,8
 1827280:	00000106 	br	1827288 <getPHYSpeed+0x78>
 1827284:	0005883a 	mov	r2,zero
 1827288:	1886b03a 	or	r3,r3,r2
 182728c:	e0bff703 	ldbu	r2,-36(fp)
 1827290:	108000d8 	cmpnei	r2,r2,3
 1827294:	1000021e 	bne	r2,zero,18272a0 <getPHYSpeed+0x90>
 1827298:	00800074 	movhi	r2,1
 182729c:	00000106 	br	18272a4 <getPHYSpeed+0x94>
 18272a0:	0005883a 	mov	r2,zero
 18272a4:	1884b03a 	or	r2,r3,r2
 18272a8:	e0bff815 	stw	r2,-32(fp)
    
    alt_tse_phy_info *pphy = 0;
 18272ac:	e03ff915 	stw	zero,-28(fp)
    alt_tse_mac_info *pmac_info = 0;
 18272b0:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_mac_group *pmac_group = 0;
 18272b4:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_system_info *psys = 0;
 18272b8:	e03ffc15 	stw	zero,-16(fp)
    
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 18272bc:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = 0;
 18272c0:	e03ffd45 	stb	zero,-11(fp)
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
 18272c4:	d0a7fec3 	ldbu	r2,-24581(gp)
 18272c8:	10803fcc 	andi	r2,r2,255
 18272cc:	1000031e 	bne	r2,zero,18272dc <getPHYSpeed+0xcc>
        alt_tse_phy_init();
 18272d0:	18292040 	call	1829204 <alt_tse_phy_init>
        is_init = 1;
 18272d4:	00800044 	movi	r2,1
 18272d8:	d0a7fec5 	stb	r2,-24581(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
 18272dc:	e13fff17 	ldw	r4,-4(fp)
 18272e0:	1826fcc0 	call	1826fcc <alt_tse_get_mac_info>
 18272e4:	e0bffa15 	stw	r2,-24(fp)
    
    if(pmac_info == 0) {
 18272e8:	e0bffa17 	ldw	r2,-24(fp)
 18272ec:	1000481e 	bne	r2,zero,1827410 <getPHYSpeed+0x200>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 18272f0:	00800044 	movi	r2,1
 18272f4:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 18272f8:	00800044 	movi	r2,1
 18272fc:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
 1827300:	e0bff743 	ldbu	r2,-35(fp)
 1827304:	10c0004c 	andi	r3,r2,1
 1827308:	e0bff703 	ldbu	r2,-36(fp)
 182730c:	10800098 	cmpnei	r2,r2,2
 1827310:	1000021e 	bne	r2,zero,182731c <getPHYSpeed+0x10c>
 1827314:	00800084 	movi	r2,2
 1827318:	00000106 	br	1827320 <getPHYSpeed+0x110>
 182731c:	0005883a 	mov	r2,zero
 1827320:	1886b03a 	or	r3,r3,r2
 1827324:	e0bff703 	ldbu	r2,-36(fp)
 1827328:	10800058 	cmpnei	r2,r2,1
 182732c:	1000021e 	bne	r2,zero,1827338 <getPHYSpeed+0x128>
 1827330:	00800104 	movi	r2,4
 1827334:	00000106 	br	182733c <getPHYSpeed+0x12c>
 1827338:	0005883a 	mov	r2,zero
 182733c:	1886b03a 	or	r3,r3,r2
 1827340:	e0bff703 	ldbu	r2,-36(fp)
 1827344:	1000021e 	bne	r2,zero,1827350 <getPHYSpeed+0x140>
 1827348:	00800204 	movi	r2,8
 182734c:	00000106 	br	1827354 <getPHYSpeed+0x144>
 1827350:	0005883a 	mov	r2,zero
 1827354:	1886b03a 	or	r3,r3,r2
 1827358:	e0bff703 	ldbu	r2,-36(fp)
 182735c:	108000d8 	cmpnei	r2,r2,3
 1827360:	1000021e 	bne	r2,zero,182736c <getPHYSpeed+0x15c>
 1827364:	00800074 	movhi	r2,1
 1827368:	00000106 	br	1827370 <getPHYSpeed+0x160>
 182736c:	0005883a 	mov	r2,zero
 1827370:	1884b03a 	or	r2,r3,r2
 1827374:	10802034 	orhi	r2,r2,128
 1827378:	e0bff815 	stw	r2,-32(fp)
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
 182737c:	e0bff703 	ldbu	r2,-36(fp)
 1827380:	108000a0 	cmpeqi	r2,r2,2
 1827384:	10000e1e 	bne	r2,zero,18273c0 <getPHYSpeed+0x1b0>
 1827388:	e0bff703 	ldbu	r2,-36(fp)
 182738c:	10800060 	cmpeqi	r2,r2,1
 1827390:	1000081e 	bne	r2,zero,18273b4 <getPHYSpeed+0x1a4>
 1827394:	e0bff703 	ldbu	r2,-36(fp)
 1827398:	1000031e 	bne	r2,zero,18273a8 <getPHYSpeed+0x198>
 182739c:	00806134 	movhi	r2,388
 18273a0:	10859a04 	addi	r2,r2,5736
 18273a4:	00000806 	br	18273c8 <getPHYSpeed+0x1b8>
 18273a8:	00806134 	movhi	r2,388
 18273ac:	10859b04 	addi	r2,r2,5740
 18273b0:	00000506 	br	18273c8 <getPHYSpeed+0x1b8>
 18273b4:	00806134 	movhi	r2,388
 18273b8:	10859d04 	addi	r2,r2,5748
 18273bc:	00000206 	br	18273c8 <getPHYSpeed+0x1b8>
 18273c0:	00806134 	movhi	r2,388
 18273c4:	10859e04 	addi	r2,r2,5752
 18273c8:	e0fff743 	ldbu	r3,-35(fp)
 18273cc:	18c00058 	cmpnei	r3,r3,1
 18273d0:	1800031e 	bne	r3,zero,18273e0 <getPHYSpeed+0x1d0>
 18273d4:	00c06134 	movhi	r3,388
 18273d8:	18c5a004 	addi	r3,r3,5760
 18273dc:	00000206 	br	18273e8 <getPHYSpeed+0x1d8>
 18273e0:	00c06134 	movhi	r3,388
 18273e4:	18c5a204 	addi	r3,r3,5768
 18273e8:	180d883a 	mov	r6,r3
 18273ec:	100b883a 	mov	r5,r2
 18273f0:	01006134 	movhi	r4,388
 18273f4:	2105a404 	addi	r4,r4,5776
 18273f8:	1800b240 	call	1800b24 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
 18273fc:	01006134 	movhi	r4,388
 1827400:	2105bc04 	addi	r4,r4,5872
 1827404:	183c7cc0 	call	183c7cc <puts>
        return result;
 1827408:	e0bff817 	ldw	r2,-32(fp)
 182740c:	00021a06 	br	1827c78 <getPHYSpeed+0xa68>
    }
    
    pphy = pmac_info->pphy_info;
 1827410:	e0bffa17 	ldw	r2,-24(fp)
 1827414:	10800117 	ldw	r2,4(r2)
 1827418:	e0bff915 	stw	r2,-28(fp)
    pmac_group = pmac_info->pmac_group;
 182741c:	e0bffa17 	ldw	r2,-24(fp)
 1827420:	10800317 	ldw	r2,12(r2)
 1827424:	e0bffb15 	stw	r2,-20(fp)
    psys = pmac_info->psys_info;
 1827428:	e0bffa17 	ldw	r2,-24(fp)
 182742c:	10800217 	ldw	r2,8(r2)
 1827430:	e0bffc15 	stw	r2,-16(fp)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 1827434:	e13ffa17 	ldw	r4,-24(fp)
 1827438:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 182743c:	e0bffd05 	stb	r2,-12(fp)
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 1827440:	e13ffb17 	ldw	r4,-20(fp)
 1827444:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 1827448:	e0bffd45 	stb	r2,-11(fp)
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
 182744c:	e0bffb17 	ldw	r2,-20(fp)
 1827450:	10800117 	ldw	r2,4(r2)
 1827454:	10800217 	ldw	r2,8(r2)
 1827458:	10800203 	ldbu	r2,8(r2)
 182745c:	10803fcc 	andi	r2,r2,255
 1827460:	10005a1e 	bne	r2,zero,18275cc <getPHYSpeed+0x3bc>
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 1827464:	00800044 	movi	r2,1
 1827468:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 182746c:	00800044 	movi	r2,1
 1827470:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
 1827474:	e0bff743 	ldbu	r2,-35(fp)
 1827478:	10c0004c 	andi	r3,r2,1
 182747c:	e0bff703 	ldbu	r2,-36(fp)
 1827480:	10800098 	cmpnei	r2,r2,2
 1827484:	1000021e 	bne	r2,zero,1827490 <getPHYSpeed+0x280>
 1827488:	00800084 	movi	r2,2
 182748c:	00000106 	br	1827494 <getPHYSpeed+0x284>
 1827490:	0005883a 	mov	r2,zero
 1827494:	1886b03a 	or	r3,r3,r2
 1827498:	e0bff703 	ldbu	r2,-36(fp)
 182749c:	10800058 	cmpnei	r2,r2,1
 18274a0:	1000021e 	bne	r2,zero,18274ac <getPHYSpeed+0x29c>
 18274a4:	00800104 	movi	r2,4
 18274a8:	00000106 	br	18274b0 <getPHYSpeed+0x2a0>
 18274ac:	0005883a 	mov	r2,zero
 18274b0:	1886b03a 	or	r3,r3,r2
 18274b4:	e0bff703 	ldbu	r2,-36(fp)
 18274b8:	1000021e 	bne	r2,zero,18274c4 <getPHYSpeed+0x2b4>
 18274bc:	00800204 	movi	r2,8
 18274c0:	00000106 	br	18274c8 <getPHYSpeed+0x2b8>
 18274c4:	0005883a 	mov	r2,zero
 18274c8:	1886b03a 	or	r3,r3,r2
 18274cc:	e0bff703 	ldbu	r2,-36(fp)
 18274d0:	108000d8 	cmpnei	r2,r2,3
 18274d4:	1000021e 	bne	r2,zero,18274e0 <getPHYSpeed+0x2d0>
 18274d8:	00800074 	movhi	r2,1
 18274dc:	00000106 	br	18274e4 <getPHYSpeed+0x2d4>
 18274e0:	0005883a 	mov	r2,zero
 18274e4:	1884b03a 	or	r2,r3,r2
 18274e8:	10801034 	orhi	r2,r2,64
 18274ec:	e0bff815 	stw	r2,-32(fp)
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
 18274f0:	010000b4 	movhi	r4,2
 18274f4:	2121a804 	addi	r4,r4,-31072
 18274f8:	181319c0 	call	181319c <usleep>
        if(psys->tse_phy_cfg) {
 18274fc:	e0bffc17 	ldw	r2,-16(fp)
 1827500:	10801117 	ldw	r2,68(r2)
 1827504:	10000d26 	beq	r2,zero,182753c <getPHYSpeed+0x32c>
        	tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
 1827508:	e0bffd47 	ldb	r2,-11(fp)
 182750c:	e0fffd07 	ldb	r3,-12(fp)
 1827510:	180d883a 	mov	r6,r3
 1827514:	100b883a 	mov	r5,r2
 1827518:	01006134 	movhi	r4,388
 182751c:	2105cd04 	addi	r4,r4,5940
 1827520:	1800b240 	call	1800b24 <printf>
        	result = psys->tse_phy_cfg(pmac);
 1827524:	e0bffc17 	ldw	r2,-16(fp)
 1827528:	10801117 	ldw	r2,68(r2)
 182752c:	e13fff17 	ldw	r4,-4(fp)
 1827530:	103ee83a 	callr	r2
 1827534:	e0bff815 	stw	r2,-32(fp)
 1827538:	00002206 	br	18275c4 <getPHYSpeed+0x3b4>
        }
        else {
        	tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 182753c:	e13ffd47 	ldb	r4,-11(fp)
 1827540:	e0bff703 	ldbu	r2,-36(fp)
 1827544:	108000a0 	cmpeqi	r2,r2,2
 1827548:	10000e1e 	bne	r2,zero,1827584 <getPHYSpeed+0x374>
 182754c:	e0bff703 	ldbu	r2,-36(fp)
 1827550:	10800060 	cmpeqi	r2,r2,1
 1827554:	1000081e 	bne	r2,zero,1827578 <getPHYSpeed+0x368>
 1827558:	e0bff703 	ldbu	r2,-36(fp)
 182755c:	1000031e 	bne	r2,zero,182756c <getPHYSpeed+0x35c>
 1827560:	00806134 	movhi	r2,388
 1827564:	10859a04 	addi	r2,r2,5736
 1827568:	00000806 	br	182758c <getPHYSpeed+0x37c>
 182756c:	00806134 	movhi	r2,388
 1827570:	10859b04 	addi	r2,r2,5740
 1827574:	00000506 	br	182758c <getPHYSpeed+0x37c>
 1827578:	00806134 	movhi	r2,388
 182757c:	10859d04 	addi	r2,r2,5748
 1827580:	00000206 	br	182758c <getPHYSpeed+0x37c>
 1827584:	00806134 	movhi	r2,388
 1827588:	10859e04 	addi	r2,r2,5752
 182758c:	e0fff743 	ldbu	r3,-35(fp)
 1827590:	18c00058 	cmpnei	r3,r3,1
 1827594:	1800031e 	bne	r3,zero,18275a4 <getPHYSpeed+0x394>
 1827598:	00c06134 	movhi	r3,388
 182759c:	18c5a004 	addi	r3,r3,5760
 18275a0:	00000206 	br	18275ac <getPHYSpeed+0x39c>
 18275a4:	00c06134 	movhi	r3,388
 18275a8:	18c5a204 	addi	r3,r3,5768
 18275ac:	180f883a 	mov	r7,r3
 18275b0:	100d883a 	mov	r6,r2
 18275b4:	200b883a 	mov	r5,r4
 18275b8:	01006134 	movhi	r4,388
 18275bc:	2105df04 	addi	r4,r4,6012
 18275c0:	1800b240 	call	1800b24 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        }
        return result;
 18275c4:	e0bff817 	ldw	r2,-32(fp)
 18275c8:	0001ab06 	br	1827c78 <getPHYSpeed+0xa68>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
	
		/* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
		np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 18275cc:	e0bffb17 	ldw	r2,-20(fp)
 18275d0:	10800117 	ldw	r2,4(r2)
 18275d4:	10800217 	ldw	r2,8(r2)
 18275d8:	10800017 	ldw	r2,0(r2)
 18275dc:	e0bffe15 	stw	r2,-8(fp)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
 18275e0:	e0bff917 	ldw	r2,-28(fp)
 18275e4:	1000491e 	bne	r2,zero,182770c <getPHYSpeed+0x4fc>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 18275e8:	00800044 	movi	r2,1
 18275ec:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 18275f0:	00800044 	movi	r2,1
 18275f4:	e0bff745 	stb	r2,-35(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
 18275f8:	e0bff743 	ldbu	r2,-35(fp)
 18275fc:	10c0004c 	andi	r3,r2,1
 1827600:	e0bff703 	ldbu	r2,-36(fp)
 1827604:	10800098 	cmpnei	r2,r2,2
 1827608:	1000021e 	bne	r2,zero,1827614 <getPHYSpeed+0x404>
 182760c:	00800084 	movi	r2,2
 1827610:	00000106 	br	1827618 <getPHYSpeed+0x408>
 1827614:	0005883a 	mov	r2,zero
 1827618:	1886b03a 	or	r3,r3,r2
 182761c:	e0bff703 	ldbu	r2,-36(fp)
 1827620:	10800058 	cmpnei	r2,r2,1
 1827624:	1000021e 	bne	r2,zero,1827630 <getPHYSpeed+0x420>
 1827628:	00800104 	movi	r2,4
 182762c:	00000106 	br	1827634 <getPHYSpeed+0x424>
 1827630:	0005883a 	mov	r2,zero
 1827634:	1886b03a 	or	r3,r3,r2
 1827638:	e0bff703 	ldbu	r2,-36(fp)
 182763c:	1000021e 	bne	r2,zero,1827648 <getPHYSpeed+0x438>
 1827640:	00800204 	movi	r2,8
 1827644:	00000106 	br	182764c <getPHYSpeed+0x43c>
 1827648:	0005883a 	mov	r2,zero
 182764c:	1886b03a 	or	r3,r3,r2
 1827650:	e0bff703 	ldbu	r2,-36(fp)
 1827654:	108000d8 	cmpnei	r2,r2,3
 1827658:	1000021e 	bne	r2,zero,1827664 <getPHYSpeed+0x454>
 182765c:	00800074 	movhi	r2,1
 1827660:	00000106 	br	1827668 <getPHYSpeed+0x458>
 1827664:	0005883a 	mov	r2,zero
 1827668:	1884b03a 	or	r2,r3,r2
 182766c:	10800834 	orhi	r2,r2,32
 1827670:	e0bff815 	stw	r2,-32(fp)
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 1827674:	e13ffd47 	ldb	r4,-11(fp)
 1827678:	e17ffd07 	ldb	r5,-12(fp)
 182767c:	e0bff703 	ldbu	r2,-36(fp)
 1827680:	108000a0 	cmpeqi	r2,r2,2
 1827684:	10000e1e 	bne	r2,zero,18276c0 <getPHYSpeed+0x4b0>
 1827688:	e0bff703 	ldbu	r2,-36(fp)
 182768c:	10800060 	cmpeqi	r2,r2,1
 1827690:	1000081e 	bne	r2,zero,18276b4 <getPHYSpeed+0x4a4>
 1827694:	e0bff703 	ldbu	r2,-36(fp)
 1827698:	1000031e 	bne	r2,zero,18276a8 <getPHYSpeed+0x498>
 182769c:	00806134 	movhi	r2,388
 18276a0:	10859a04 	addi	r2,r2,5736
 18276a4:	00000806 	br	18276c8 <getPHYSpeed+0x4b8>
 18276a8:	00806134 	movhi	r2,388
 18276ac:	10859b04 	addi	r2,r2,5740
 18276b0:	00000506 	br	18276c8 <getPHYSpeed+0x4b8>
 18276b4:	00806134 	movhi	r2,388
 18276b8:	10859d04 	addi	r2,r2,5748
 18276bc:	00000206 	br	18276c8 <getPHYSpeed+0x4b8>
 18276c0:	00806134 	movhi	r2,388
 18276c4:	10859e04 	addi	r2,r2,5752
 18276c8:	e0fff743 	ldbu	r3,-35(fp)
 18276cc:	18c00058 	cmpnei	r3,r3,1
 18276d0:	1800031e 	bne	r3,zero,18276e0 <getPHYSpeed+0x4d0>
 18276d4:	00c06134 	movhi	r3,388
 18276d8:	18c5a004 	addi	r3,r3,5760
 18276dc:	00000206 	br	18276e8 <getPHYSpeed+0x4d8>
 18276e0:	00c06134 	movhi	r3,388
 18276e4:	18c5a204 	addi	r3,r3,5768
 18276e8:	d8c00015 	stw	r3,0(sp)
 18276ec:	100f883a 	mov	r7,r2
 18276f0:	280d883a 	mov	r6,r5
 18276f4:	200b883a 	mov	r5,r4
 18276f8:	01006134 	movhi	r4,388
 18276fc:	2105f104 	addi	r4,r4,6084
 1827700:	1800b240 	call	1800b24 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
 1827704:	e0bff817 	ldw	r2,-32(fp)
 1827708:	00015b06 	br	1827c78 <getPHYSpeed+0xa68>
        }

		/* Small MAC */
		if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 182770c:	e0bffa17 	ldw	r2,-24(fp)
 1827710:	10800003 	ldbu	r2,0(r2)
 1827714:	10803fcc 	andi	r2,r2,255
 1827718:	10800058 	cmpnei	r2,r2,1
 182771c:	1000071e 	bne	r2,zero,182773c <getPHYSpeed+0x52c>
			alt_tse_phy_set_adv_1000(pphy, 0);
 1827720:	000b883a 	mov	r5,zero
 1827724:	e13ff917 	ldw	r4,-28(fp)
 1827728:	1829bcc0 	call	1829bcc <alt_tse_phy_set_adv_1000>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 182772c:	017e0034 	movhi	r5,63488
 1827730:	e13ff917 	ldw	r4,-28(fp)
 1827734:	182931c0 	call	182931c <alt_tse_phy_restart_an>
 1827738:	00000e06 	br	1827774 <getPHYSpeed+0x564>
		}
		else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 182773c:	e0bffa17 	ldw	r2,-24(fp)
 1827740:	10800003 	ldbu	r2,0(r2)
 1827744:	10803fcc 	andi	r2,r2,255
 1827748:	10800098 	cmpnei	r2,r2,2
 182774c:	1000091e 	bne	r2,zero,1827774 <getPHYSpeed+0x564>
			alt_tse_phy_set_adv_100(pphy, 0);
 1827750:	000b883a 	mov	r5,zero
 1827754:	e13ff917 	ldw	r4,-28(fp)
 1827758:	1829d900 	call	1829d90 <alt_tse_phy_set_adv_100>
			alt_tse_phy_set_adv_10(pphy, 0);
 182775c:	000b883a 	mov	r5,zero
 1827760:	e13ff917 	ldw	r4,-28(fp)
 1827764:	1829fe40 	call	1829fe4 <alt_tse_phy_set_adv_10>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 1827768:	017e0034 	movhi	r5,63488
 182776c:	e13ff917 	ldw	r4,-28(fp)
 1827770:	182931c0 	call	182931c <alt_tse_phy_restart_an>
		}
		
		/* check link connection for this PHY */
		if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
 1827774:	017e0034 	movhi	r5,63488
 1827778:	e13ff917 	ldw	r4,-28(fp)
 182777c:	18294d80 	call	18294d8 <alt_tse_phy_check_link>
 1827780:	10bfffd8 	cmpnei	r2,r2,-1
 1827784:	1000491e 	bne	r2,zero,18278ac <getPHYSpeed+0x69c>
			speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 1827788:	00800044 	movi	r2,1
 182778c:	e0bff705 	stb	r2,-36(fp)
			duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 1827790:	00800044 	movi	r2,1
 1827794:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
 1827798:	e0bff743 	ldbu	r2,-35(fp)
 182779c:	10c0004c 	andi	r3,r2,1
 18277a0:	e0bff703 	ldbu	r2,-36(fp)
 18277a4:	10800098 	cmpnei	r2,r2,2
 18277a8:	1000021e 	bne	r2,zero,18277b4 <getPHYSpeed+0x5a4>
 18277ac:	00800084 	movi	r2,2
 18277b0:	00000106 	br	18277b8 <getPHYSpeed+0x5a8>
 18277b4:	0005883a 	mov	r2,zero
 18277b8:	1886b03a 	or	r3,r3,r2
 18277bc:	e0bff703 	ldbu	r2,-36(fp)
 18277c0:	10800058 	cmpnei	r2,r2,1
 18277c4:	1000021e 	bne	r2,zero,18277d0 <getPHYSpeed+0x5c0>
 18277c8:	00800104 	movi	r2,4
 18277cc:	00000106 	br	18277d4 <getPHYSpeed+0x5c4>
 18277d0:	0005883a 	mov	r2,zero
 18277d4:	1886b03a 	or	r3,r3,r2
 18277d8:	e0bff703 	ldbu	r2,-36(fp)
 18277dc:	1000021e 	bne	r2,zero,18277e8 <getPHYSpeed+0x5d8>
 18277e0:	00800204 	movi	r2,8
 18277e4:	00000106 	br	18277ec <getPHYSpeed+0x5dc>
 18277e8:	0005883a 	mov	r2,zero
 18277ec:	1886b03a 	or	r3,r3,r2
 18277f0:	e0bff703 	ldbu	r2,-36(fp)
 18277f4:	108000d8 	cmpnei	r2,r2,3
 18277f8:	1000021e 	bne	r2,zero,1827804 <getPHYSpeed+0x5f4>
 18277fc:	00800074 	movhi	r2,1
 1827800:	00000106 	br	1827808 <getPHYSpeed+0x5f8>
 1827804:	0005883a 	mov	r2,zero
 1827808:	1884b03a 	or	r2,r3,r2
 182780c:	10800234 	orhi	r2,r2,8
 1827810:	e0bff815 	stw	r2,-32(fp)
			tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 1827814:	e13ffd47 	ldb	r4,-11(fp)
 1827818:	e17ffd07 	ldb	r5,-12(fp)
 182781c:	e0bff703 	ldbu	r2,-36(fp)
 1827820:	108000a0 	cmpeqi	r2,r2,2
 1827824:	10000e1e 	bne	r2,zero,1827860 <getPHYSpeed+0x650>
 1827828:	e0bff703 	ldbu	r2,-36(fp)
 182782c:	10800060 	cmpeqi	r2,r2,1
 1827830:	1000081e 	bne	r2,zero,1827854 <getPHYSpeed+0x644>
 1827834:	e0bff703 	ldbu	r2,-36(fp)
 1827838:	1000031e 	bne	r2,zero,1827848 <getPHYSpeed+0x638>
 182783c:	00806134 	movhi	r2,388
 1827840:	10859a04 	addi	r2,r2,5736
 1827844:	00000806 	br	1827868 <getPHYSpeed+0x658>
 1827848:	00806134 	movhi	r2,388
 182784c:	10859b04 	addi	r2,r2,5740
 1827850:	00000506 	br	1827868 <getPHYSpeed+0x658>
 1827854:	00806134 	movhi	r2,388
 1827858:	10859d04 	addi	r2,r2,5748
 182785c:	00000206 	br	1827868 <getPHYSpeed+0x658>
 1827860:	00806134 	movhi	r2,388
 1827864:	10859e04 	addi	r2,r2,5752
 1827868:	e0fff743 	ldbu	r3,-35(fp)
 182786c:	18c00058 	cmpnei	r3,r3,1
 1827870:	1800031e 	bne	r3,zero,1827880 <getPHYSpeed+0x670>
 1827874:	00c06134 	movhi	r3,388
 1827878:	18c5a004 	addi	r3,r3,5760
 182787c:	00000206 	br	1827888 <getPHYSpeed+0x678>
 1827880:	00c06134 	movhi	r3,388
 1827884:	18c5a204 	addi	r3,r3,5768
 1827888:	d8c00015 	stw	r3,0(sp)
 182788c:	100f883a 	mov	r7,r2
 1827890:	280d883a 	mov	r6,r5
 1827894:	200b883a 	mov	r5,r4
 1827898:	01006134 	movhi	r4,388
 182789c:	21060204 	addi	r4,r4,6152
 18278a0:	1800b240 	call	1800b24 <printf>
																			 speed == TSE_PHY_SPEED_100 ? "100" :
																			 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
																			 duplex == 1 ? "Full" : "Half");
			return result;
 18278a4:	e0bff817 	ldw	r2,-32(fp)
 18278a8:	0000f306 	br	1827c78 <getPHYSpeed+0xa68>
		}

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
 18278ac:	e0bffe17 	ldw	r2,-8(fp)
 18278b0:	10801004 	addi	r2,r2,64
 18278b4:	e0fff917 	ldw	r3,-28(fp)
 18278b8:	18c00003 	ldbu	r3,0(r3)
 18278bc:	18c03fcc 	andi	r3,r3,255
 18278c0:	10c00035 	stwio	r3,0(r2)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
		#else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 18278c4:	d8000015 	stw	zero,0(sp)
 18278c8:	01c00044 	movi	r7,1
 18278cc:	01800384 	movi	r6,14
 18278d0:	000b883a 	mov	r5,zero
 18278d4:	e13ff917 	ldw	r4,-28(fp)
 18278d8:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
 18278dc:	e0bff917 	ldw	r2,-28(fp)
 18278e0:	10800517 	ldw	r2,20(r2)
 18278e4:	10002b1e 	bne	r2,zero,1827994 <getPHYSpeed+0x784>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
 18278e8:	e0bffd47 	ldb	r2,-11(fp)
 18278ec:	e0fffd07 	ldb	r3,-12(fp)
 18278f0:	180d883a 	mov	r6,r3
 18278f4:	100b883a 	mov	r5,r2
 18278f8:	01006134 	movhi	r4,388
 18278fc:	21061604 	addi	r4,r4,6232
 1827900:	1800b240 	call	1800b24 <printf>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 1827904:	00800044 	movi	r2,1
 1827908:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 182790c:	00800044 	movi	r2,1
 1827910:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
 1827914:	e0bff743 	ldbu	r2,-35(fp)
 1827918:	10c0004c 	andi	r3,r2,1
 182791c:	e0bff703 	ldbu	r2,-36(fp)
 1827920:	10800098 	cmpnei	r2,r2,2
 1827924:	1000021e 	bne	r2,zero,1827930 <getPHYSpeed+0x720>
 1827928:	00800084 	movi	r2,2
 182792c:	00000106 	br	1827934 <getPHYSpeed+0x724>
 1827930:	0005883a 	mov	r2,zero
 1827934:	1886b03a 	or	r3,r3,r2
 1827938:	e0bff703 	ldbu	r2,-36(fp)
 182793c:	10800058 	cmpnei	r2,r2,1
 1827940:	1000021e 	bne	r2,zero,182794c <getPHYSpeed+0x73c>
 1827944:	00800104 	movi	r2,4
 1827948:	00000106 	br	1827950 <getPHYSpeed+0x740>
 182794c:	0005883a 	mov	r2,zero
 1827950:	1886b03a 	or	r3,r3,r2
 1827954:	e0bff703 	ldbu	r2,-36(fp)
 1827958:	1000021e 	bne	r2,zero,1827964 <getPHYSpeed+0x754>
 182795c:	00800204 	movi	r2,8
 1827960:	00000106 	br	1827968 <getPHYSpeed+0x758>
 1827964:	0005883a 	mov	r2,zero
 1827968:	1886b03a 	or	r3,r3,r2
 182796c:	e0bff703 	ldbu	r2,-36(fp)
 1827970:	108000d8 	cmpnei	r2,r2,3
 1827974:	1000021e 	bne	r2,zero,1827980 <getPHYSpeed+0x770>
 1827978:	00800074 	movhi	r2,1
 182797c:	00000106 	br	1827984 <getPHYSpeed+0x774>
 1827980:	0005883a 	mov	r2,zero
 1827984:	1884b03a 	or	r2,r3,r2
 1827988:	10800134 	orhi	r2,r2,4
 182798c:	e0bff815 	stw	r2,-32(fp)
 1827990:	00009406 	br	1827be4 <getPHYSpeed+0x9d4>
        }
        // retrieve duplex information from PHY
		else
		{
			if(pphy->pphy_profile->link_status_read)
 1827994:	e0bff917 	ldw	r2,-28(fp)
 1827998:	10800517 	ldw	r2,20(r2)
 182799c:	10801817 	ldw	r2,96(r2)
 18279a0:	10002626 	beq	r2,zero,1827a3c <getPHYSpeed+0x82c>
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
 18279a4:	e0bff917 	ldw	r2,-28(fp)
 18279a8:	10800517 	ldw	r2,20(r2)
 18279ac:	10801817 	ldw	r2,96(r2)
 18279b0:	e13ffe17 	ldw	r4,-8(fp)
 18279b4:	103ee83a 	callr	r2
 18279b8:	e0bff815 	stw	r2,-32(fp)
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 18279bc:	e0bff817 	ldw	r2,-32(fp)
 18279c0:	1080008c 	andi	r2,r2,2
 18279c4:	10000c1e 	bne	r2,zero,18279f8 <getPHYSpeed+0x7e8>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
 18279c8:	e0bff817 	ldw	r2,-32(fp)
 18279cc:	1080010c 	andi	r2,r2,4
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 18279d0:	1000071e 	bne	r2,zero,18279f0 <getPHYSpeed+0x7e0>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
 18279d4:	e0bff817 	ldw	r2,-32(fp)
 18279d8:	1080020c 	andi	r2,r2,8
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 18279dc:	10000226 	beq	r2,zero,18279e8 <getPHYSpeed+0x7d8>
 18279e0:	0005883a 	mov	r2,zero
 18279e4:	00000506 	br	18279fc <getPHYSpeed+0x7ec>
 18279e8:	008000c4 	movi	r2,3
 18279ec:	00000306 	br	18279fc <getPHYSpeed+0x7ec>
 18279f0:	00800044 	movi	r2,1
 18279f4:	00000106 	br	18279fc <getPHYSpeed+0x7ec>
 18279f8:	00800084 	movi	r2,2
 18279fc:	e0bff705 	stb	r2,-36(fp)
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
				duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
 1827a00:	e0bff817 	ldw	r2,-32(fp)
 1827a04:	1080004c 	andi	r2,r2,1
 1827a08:	1004c03a 	cmpne	r2,r2,zero
 1827a0c:	e0bff745 	stb	r2,-35(fp)
				
				if(result & ALT_TSE_E_INVALID_SPEED)
 1827a10:	e0bff817 	ldw	r2,-32(fp)
 1827a14:	1080006c 	andhi	r2,r2,1
 1827a18:	10007226 	beq	r2,zero,1827be4 <getPHYSpeed+0x9d4>
				{
					tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
 1827a1c:	e0bffd47 	ldb	r2,-11(fp)
 1827a20:	e0fffd07 	ldb	r3,-12(fp)
 1827a24:	180d883a 	mov	r6,r3
 1827a28:	100b883a 	mov	r5,r2
 1827a2c:	01006134 	movhi	r4,388
 1827a30:	21062404 	addi	r4,r4,6288
 1827a34:	1800b240 	call	1800b24 <printf>
 1827a38:	00006a06 	br	1827be4 <getPHYSpeed+0x9d4>
				}
			}
			else if(pphy->pphy_profile->status_reg_location == 0)
 1827a3c:	e0bff917 	ldw	r2,-28(fp)
 1827a40:	10800517 	ldw	r2,20(r2)
 1827a44:	10801583 	ldbu	r2,86(r2)
 1827a48:	10803fcc 	andi	r2,r2,255
 1827a4c:	10002b1e 	bne	r2,zero,1827afc <getPHYSpeed+0x8ec>
	        {
	            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
 1827a50:	e0bffd47 	ldb	r2,-11(fp)
 1827a54:	e0fffd07 	ldb	r3,-12(fp)
 1827a58:	180d883a 	mov	r6,r3
 1827a5c:	100b883a 	mov	r5,r2
 1827a60:	01006134 	movhi	r4,388
 1827a64:	21063104 	addi	r4,r4,6340
 1827a68:	1800b240 	call	1800b24 <printf>
	            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 1827a6c:	00800044 	movi	r2,1
 1827a70:	e0bff705 	stb	r2,-36(fp)
	            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 1827a74:	00800044 	movi	r2,1
 1827a78:	e0bff745 	stb	r2,-35(fp)
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
 1827a7c:	e0bff743 	ldbu	r2,-35(fp)
 1827a80:	10c0004c 	andi	r3,r2,1
 1827a84:	e0bff703 	ldbu	r2,-36(fp)
 1827a88:	10800098 	cmpnei	r2,r2,2
 1827a8c:	1000021e 	bne	r2,zero,1827a98 <getPHYSpeed+0x888>
 1827a90:	00800084 	movi	r2,2
 1827a94:	00000106 	br	1827a9c <getPHYSpeed+0x88c>
 1827a98:	0005883a 	mov	r2,zero
 1827a9c:	1886b03a 	or	r3,r3,r2
 1827aa0:	e0bff703 	ldbu	r2,-36(fp)
 1827aa4:	10800058 	cmpnei	r2,r2,1
 1827aa8:	1000021e 	bne	r2,zero,1827ab4 <getPHYSpeed+0x8a4>
 1827aac:	00800104 	movi	r2,4
 1827ab0:	00000106 	br	1827ab8 <getPHYSpeed+0x8a8>
 1827ab4:	0005883a 	mov	r2,zero
 1827ab8:	1886b03a 	or	r3,r3,r2
 1827abc:	e0bff703 	ldbu	r2,-36(fp)
 1827ac0:	1000021e 	bne	r2,zero,1827acc <getPHYSpeed+0x8bc>
 1827ac4:	00800204 	movi	r2,8
 1827ac8:	00000106 	br	1827ad0 <getPHYSpeed+0x8c0>
 1827acc:	0005883a 	mov	r2,zero
 1827ad0:	1886b03a 	or	r3,r3,r2
 1827ad4:	e0bff703 	ldbu	r2,-36(fp)
 1827ad8:	108000d8 	cmpnei	r2,r2,3
 1827adc:	1000021e 	bne	r2,zero,1827ae8 <getPHYSpeed+0x8d8>
 1827ae0:	00800074 	movhi	r2,1
 1827ae4:	00000106 	br	1827aec <getPHYSpeed+0x8dc>
 1827ae8:	0005883a 	mov	r2,zero
 1827aec:	1884b03a 	or	r2,r3,r2
 1827af0:	108000b4 	orhi	r2,r2,2
 1827af4:	e0bff815 	stw	r2,-32(fp)
 1827af8:	00003a06 	br	1827be4 <getPHYSpeed+0x9d4>
	        }
	        else
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 1827afc:	e0bff917 	ldw	r2,-28(fp)
 1827b00:	10800517 	ldw	r2,20(r2)
 1827b04:	10801583 	ldbu	r2,86(r2)
 1827b08:	10c03fcc 	andi	r3,r2,255
 1827b0c:	e0bff917 	ldw	r2,-28(fp)
 1827b10:	10800517 	ldw	r2,20(r2)
 1827b14:	108015c3 	ldbu	r2,87(r2)
 1827b18:	10803fcc 	andi	r2,r2,255
 1827b1c:	01c00084 	movi	r7,2
 1827b20:	100d883a 	mov	r6,r2
 1827b24:	180b883a 	mov	r5,r3
 1827b28:	e13ff917 	ldw	r4,-28(fp)
 1827b2c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1827b30:	e0bff705 	stb	r2,-36(fp)
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 1827b34:	e0bff917 	ldw	r2,-28(fp)
 1827b38:	10800517 	ldw	r2,20(r2)
 1827b3c:	10801583 	ldbu	r2,86(r2)
 1827b40:	10c03fcc 	andi	r3,r2,255
 1827b44:	e0bff917 	ldw	r2,-28(fp)
 1827b48:	10800517 	ldw	r2,20(r2)
 1827b4c:	10801603 	ldbu	r2,88(r2)
 1827b50:	10803fcc 	andi	r2,r2,255
 1827b54:	01c00044 	movi	r7,1
 1827b58:	100d883a 	mov	r6,r2
 1827b5c:	180b883a 	mov	r5,r3
 1827b60:	e13ff917 	ldw	r4,-28(fp)
 1827b64:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1827b68:	e0bff745 	stb	r2,-35(fp)
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 1827b6c:	e0bff743 	ldbu	r2,-35(fp)
 1827b70:	10c0004c 	andi	r3,r2,1
 1827b74:	e0bff703 	ldbu	r2,-36(fp)
 1827b78:	10800098 	cmpnei	r2,r2,2
 1827b7c:	1000021e 	bne	r2,zero,1827b88 <getPHYSpeed+0x978>
 1827b80:	00800084 	movi	r2,2
 1827b84:	00000106 	br	1827b8c <getPHYSpeed+0x97c>
 1827b88:	0005883a 	mov	r2,zero
 1827b8c:	1886b03a 	or	r3,r3,r2
 1827b90:	e0bff703 	ldbu	r2,-36(fp)
 1827b94:	10800058 	cmpnei	r2,r2,1
 1827b98:	1000021e 	bne	r2,zero,1827ba4 <getPHYSpeed+0x994>
 1827b9c:	00800104 	movi	r2,4
 1827ba0:	00000106 	br	1827ba8 <getPHYSpeed+0x998>
 1827ba4:	0005883a 	mov	r2,zero
 1827ba8:	1886b03a 	or	r3,r3,r2
 1827bac:	e0bff703 	ldbu	r2,-36(fp)
 1827bb0:	1000021e 	bne	r2,zero,1827bbc <getPHYSpeed+0x9ac>
 1827bb4:	00800204 	movi	r2,8
 1827bb8:	00000106 	br	1827bc0 <getPHYSpeed+0x9b0>
 1827bbc:	0005883a 	mov	r2,zero
 1827bc0:	1886b03a 	or	r3,r3,r2
 1827bc4:	e0bff703 	ldbu	r2,-36(fp)
 1827bc8:	108000d8 	cmpnei	r2,r2,3
 1827bcc:	1000021e 	bne	r2,zero,1827bd8 <getPHYSpeed+0x9c8>
 1827bd0:	00800074 	movhi	r2,1
 1827bd4:	00000106 	br	1827bdc <getPHYSpeed+0x9cc>
 1827bd8:	0005883a 	mov	r2,zero
 1827bdc:	1884b03a 	or	r2,r3,r2
 1827be0:	e0bff815 	stw	r2,-32(fp)
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 1827be4:	e13ffd47 	ldb	r4,-11(fp)
 1827be8:	e17ffd07 	ldb	r5,-12(fp)
 1827bec:	e0bff703 	ldbu	r2,-36(fp)
 1827bf0:	108000a0 	cmpeqi	r2,r2,2
 1827bf4:	10000e1e 	bne	r2,zero,1827c30 <getPHYSpeed+0xa20>
 1827bf8:	e0bff703 	ldbu	r2,-36(fp)
 1827bfc:	10800060 	cmpeqi	r2,r2,1
 1827c00:	1000081e 	bne	r2,zero,1827c24 <getPHYSpeed+0xa14>
 1827c04:	e0bff703 	ldbu	r2,-36(fp)
 1827c08:	1000031e 	bne	r2,zero,1827c18 <getPHYSpeed+0xa08>
 1827c0c:	00806134 	movhi	r2,388
 1827c10:	10859a04 	addi	r2,r2,5736
 1827c14:	00000806 	br	1827c38 <getPHYSpeed+0xa28>
 1827c18:	00806134 	movhi	r2,388
 1827c1c:	10859b04 	addi	r2,r2,5740
 1827c20:	00000506 	br	1827c38 <getPHYSpeed+0xa28>
 1827c24:	00806134 	movhi	r2,388
 1827c28:	10859d04 	addi	r2,r2,5748
 1827c2c:	00000206 	br	1827c38 <getPHYSpeed+0xa28>
 1827c30:	00806134 	movhi	r2,388
 1827c34:	10859e04 	addi	r2,r2,5752
 1827c38:	e0fff743 	ldbu	r3,-35(fp)
 1827c3c:	18c00058 	cmpnei	r3,r3,1
 1827c40:	1800031e 	bne	r3,zero,1827c50 <getPHYSpeed+0xa40>
 1827c44:	00c06134 	movhi	r3,388
 1827c48:	18c5a004 	addi	r3,r3,5760
 1827c4c:	00000206 	br	1827c58 <getPHYSpeed+0xa48>
 1827c50:	00c06134 	movhi	r3,388
 1827c54:	18c5a204 	addi	r3,r3,5768
 1827c58:	d8c00015 	stw	r3,0(sp)
 1827c5c:	100f883a 	mov	r7,r2
 1827c60:	280d883a 	mov	r6,r5
 1827c64:	200b883a 	mov	r5,r4
 1827c68:	01006134 	movhi	r4,388
 1827c6c:	21064804 	addi	r4,r4,6432
 1827c70:	1800b240 	call	1800b24 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
 1827c74:	e0bff817 	ldw	r2,-32(fp)
}
 1827c78:	e037883a 	mov	sp,fp
 1827c7c:	dfc00117 	ldw	ra,4(sp)
 1827c80:	df000017 	ldw	fp,0(sp)
 1827c84:	dec00204 	addi	sp,sp,8
 1827c88:	f800283a 	ret

01827c8c <alt_tse_phy_rd_mdio_addr>:
/* @Function Description: Read MDIO address from the MDIO address1 register of first MAC within MAC group
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
 1827c8c:	defffd04 	addi	sp,sp,-12
 1827c90:	df000215 	stw	fp,8(sp)
 1827c94:	df000204 	addi	fp,sp,8
 1827c98:	e13fff15 	stw	r4,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 1827c9c:	e0bfff17 	ldw	r2,-4(fp)
 1827ca0:	10800617 	ldw	r2,24(r2)
 1827ca4:	10800317 	ldw	r2,12(r2)
 1827ca8:	10800117 	ldw	r2,4(r2)
 1827cac:	10800217 	ldw	r2,8(r2)
 1827cb0:	10800017 	ldw	r2,0(r2)
 1827cb4:	e0bffe15 	stw	r2,-8(fp)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
 1827cb8:	e0bffe17 	ldw	r2,-8(fp)
 1827cbc:	10801004 	addi	r2,r2,64
 1827cc0:	10800037 	ldwio	r2,0(r2)
}
 1827cc4:	e037883a 	mov	sp,fp
 1827cc8:	df000017 	ldw	fp,0(sp)
 1827ccc:	dec00104 	addi	sp,sp,4
 1827cd0:	f800283a 	ret

01827cd4 <alt_tse_phy_wr_mdio_addr>:
 * @API Type:           Internal
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
 1827cd4:	defffc04 	addi	sp,sp,-16
 1827cd8:	df000315 	stw	fp,12(sp)
 1827cdc:	df000304 	addi	fp,sp,12
 1827ce0:	e13ffe15 	stw	r4,-8(fp)
 1827ce4:	2805883a 	mov	r2,r5
 1827ce8:	e0bfff05 	stb	r2,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 1827cec:	e0bffe17 	ldw	r2,-8(fp)
 1827cf0:	10800617 	ldw	r2,24(r2)
 1827cf4:	10800317 	ldw	r2,12(r2)
 1827cf8:	10800117 	ldw	r2,4(r2)
 1827cfc:	10800217 	ldw	r2,8(r2)
 1827d00:	10800017 	ldw	r2,0(r2)
 1827d04:	e0bffd15 	stw	r2,-12(fp)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
 1827d08:	e0bffd17 	ldw	r2,-12(fp)
 1827d0c:	10801004 	addi	r2,r2,64
 1827d10:	e0ffff03 	ldbu	r3,-4(fp)
 1827d14:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 1827d18:	0005883a 	mov	r2,zero
}
 1827d1c:	e037883a 	mov	sp,fp
 1827d20:	df000017 	ldw	fp,0(sp)
 1827d24:	dec00104 	addi	sp,sp,4
 1827d28:	f800283a 	ret

01827d2c <alt_tse_phy_wr_mdio_reg>:
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
 1827d2c:	defff604 	addi	sp,sp,-40
 1827d30:	df000915 	stw	fp,36(sp)
 1827d34:	df000904 	addi	fp,sp,36
 1827d38:	e13ffb15 	stw	r4,-20(fp)
 1827d3c:	3009883a 	mov	r4,r6
 1827d40:	3807883a 	mov	r3,r7
 1827d44:	e0800117 	ldw	r2,4(fp)
 1827d48:	e17ffc05 	stb	r5,-16(fp)
 1827d4c:	e13ffd05 	stb	r4,-12(fp)
 1827d50:	e0fffe05 	stb	r3,-8(fp)
 1827d54:	e0bfff0d 	sth	r2,-4(fp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 1827d58:	e0bffb17 	ldw	r2,-20(fp)
 1827d5c:	10800617 	ldw	r2,24(r2)
 1827d60:	10800317 	ldw	r2,12(r2)
 1827d64:	10800117 	ldw	r2,4(r2)
 1827d68:	10800217 	ldw	r2,8(r2)
 1827d6c:	10800017 	ldw	r2,0(r2)
 1827d70:	e0bff915 	stw	r2,-28(fp)
    
    bit_mask = 0x00;
 1827d74:	e03ff70d 	sth	zero,-36(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 1827d78:	e03ff815 	stw	zero,-32(fp)
 1827d7c:	00000906 	br	1827da4 <alt_tse_phy_wr_mdio_reg+0x78>
    {
        bit_mask <<= 1;
 1827d80:	e0bff70b 	ldhu	r2,-36(fp)
 1827d84:	1085883a 	add	r2,r2,r2
 1827d88:	e0bff70d 	sth	r2,-36(fp)
        bit_mask |= 0x01;        
 1827d8c:	e0bff70b 	ldhu	r2,-36(fp)
 1827d90:	10800054 	ori	r2,r2,1
 1827d94:	e0bff70d 	sth	r2,-36(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 1827d98:	e0bff817 	ldw	r2,-32(fp)
 1827d9c:	10800044 	addi	r2,r2,1
 1827da0:	e0bff815 	stw	r2,-32(fp)
 1827da4:	e0bffe03 	ldbu	r2,-8(fp)
 1827da8:	e0fff817 	ldw	r3,-32(fp)
 1827dac:	18bff416 	blt	r3,r2,1827d80 <__ram_exceptions_end+0xff817a90>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;
 1827db0:	e0fff70b 	ldhu	r3,-36(fp)
 1827db4:	e0bffd03 	ldbu	r2,-12(fp)
 1827db8:	1884983a 	sll	r2,r3,r2
 1827dbc:	e0bff70d 	sth	r2,-36(fp)

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 1827dc0:	e0bff917 	ldw	r2,-28(fp)
 1827dc4:	10c0a004 	addi	r3,r2,640
 1827dc8:	e0bffc03 	ldbu	r2,-16(fp)
 1827dcc:	1085883a 	add	r2,r2,r2
 1827dd0:	1085883a 	add	r2,r2,r2
 1827dd4:	1885883a 	add	r2,r3,r2
 1827dd8:	10800037 	ldwio	r2,0(r2)
 1827ddc:	e0bffa0d 	sth	r2,-24(fp)
    
    /* clear bits to be written */
    temp_data &= ~bit_mask;
 1827de0:	e0bff70b 	ldhu	r2,-36(fp)
 1827de4:	0084303a 	nor	r2,zero,r2
 1827de8:	1007883a 	mov	r3,r2
 1827dec:	e0bffa0b 	ldhu	r2,-24(fp)
 1827df0:	1884703a 	and	r2,r3,r2
 1827df4:	e0bffa0d 	sth	r2,-24(fp)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
 1827df8:	e0ffff0b 	ldhu	r3,-4(fp)
 1827dfc:	e0bffd03 	ldbu	r2,-12(fp)
 1827e00:	1884983a 	sll	r2,r3,r2
 1827e04:	1007883a 	mov	r3,r2
 1827e08:	e0bff70b 	ldhu	r2,-36(fp)
 1827e0c:	1884703a 	and	r2,r3,r2
 1827e10:	1007883a 	mov	r3,r2
 1827e14:	e0bffa0b 	ldhu	r2,-24(fp)
 1827e18:	1884b03a 	or	r2,r3,r2
 1827e1c:	e0bffa0d 	sth	r2,-24(fp)
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
 1827e20:	e0bff917 	ldw	r2,-28(fp)
 1827e24:	10c0a004 	addi	r3,r2,640
 1827e28:	e0bffc03 	ldbu	r2,-16(fp)
 1827e2c:	1085883a 	add	r2,r2,r2
 1827e30:	1085883a 	add	r2,r2,r2
 1827e34:	1885883a 	add	r2,r3,r2
 1827e38:	e0fffa0b 	ldhu	r3,-24(fp)
 1827e3c:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 1827e40:	0005883a 	mov	r2,zero
    
}
 1827e44:	e037883a 	mov	sp,fp
 1827e48:	df000017 	ldw	fp,0(sp)
 1827e4c:	dec00104 	addi	sp,sp,4
 1827e50:	f800283a 	ret

01827e54 <alt_tse_phy_rd_mdio_reg>:
 * @param  bit_length       number of bits to be read from the register.
 * @return data read from MDIO register 
 */

alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
 1827e54:	defff704 	addi	sp,sp,-36
 1827e58:	df000815 	stw	fp,32(sp)
 1827e5c:	df000804 	addi	fp,sp,32
 1827e60:	e13ffc15 	stw	r4,-16(fp)
 1827e64:	2809883a 	mov	r4,r5
 1827e68:	3007883a 	mov	r3,r6
 1827e6c:	3805883a 	mov	r2,r7
 1827e70:	e13ffd05 	stb	r4,-12(fp)
 1827e74:	e0fffe05 	stb	r3,-8(fp)
 1827e78:	e0bfff05 	stb	r2,-4(fp)
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 1827e7c:	e0bffc17 	ldw	r2,-16(fp)
 1827e80:	10800617 	ldw	r2,24(r2)
 1827e84:	10800317 	ldw	r2,12(r2)
 1827e88:	10800117 	ldw	r2,4(r2)
 1827e8c:	10800217 	ldw	r2,8(r2)
 1827e90:	10800017 	ldw	r2,0(r2)
 1827e94:	e0bffa15 	stw	r2,-24(fp)
    
    bit_mask = 0x00;
 1827e98:	e03ff815 	stw	zero,-32(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 1827e9c:	e03ff915 	stw	zero,-28(fp)
 1827ea0:	00000906 	br	1827ec8 <alt_tse_phy_rd_mdio_reg+0x74>
    {
        bit_mask <<= 1;
 1827ea4:	e0bff817 	ldw	r2,-32(fp)
 1827ea8:	1085883a 	add	r2,r2,r2
 1827eac:	e0bff815 	stw	r2,-32(fp)
        bit_mask |= 0x01;        
 1827eb0:	e0bff817 	ldw	r2,-32(fp)
 1827eb4:	10800054 	ori	r2,r2,1
 1827eb8:	e0bff815 	stw	r2,-32(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 1827ebc:	e0bff917 	ldw	r2,-28(fp)
 1827ec0:	10800044 	addi	r2,r2,1
 1827ec4:	e0bff915 	stw	r2,-28(fp)
 1827ec8:	e0bfff03 	ldbu	r2,-4(fp)
 1827ecc:	e0fff917 	ldw	r3,-28(fp)
 1827ed0:	18bff416 	blt	r3,r2,1827ea4 <__ram_exceptions_end+0xff817bb4>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 1827ed4:	e0bffa17 	ldw	r2,-24(fp)
 1827ed8:	10c0a004 	addi	r3,r2,640
 1827edc:	e0bffd03 	ldbu	r2,-12(fp)
 1827ee0:	1085883a 	add	r2,r2,r2
 1827ee4:	1085883a 	add	r2,r2,r2
 1827ee8:	1885883a 	add	r2,r3,r2
 1827eec:	10800037 	ldwio	r2,0(r2)
 1827ef0:	e0bffb0d 	sth	r2,-20(fp)
    
    /* shifting read data */
    temp_data >>= lsb_num;
 1827ef4:	e0fffb0b 	ldhu	r3,-20(fp)
 1827ef8:	e0bffe03 	ldbu	r2,-8(fp)
 1827efc:	1885d83a 	sra	r2,r3,r2
 1827f00:	e0bffb0d 	sth	r2,-20(fp)
    
    return (temp_data & bit_mask);
 1827f04:	e0fffb0b 	ldhu	r3,-20(fp)
 1827f08:	e0bff817 	ldw	r2,-32(fp)
 1827f0c:	1884703a 	and	r2,r3,r2
}
 1827f10:	e037883a 	mov	sp,fp
 1827f14:	df000017 	ldw	fp,0(sp)
 1827f18:	dec00104 	addi	sp,sp,4
 1827f1c:	f800283a 	ret

01827f20 <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
 1827f20:	deff9a04 	addi	sp,sp,-408
 1827f24:	dfc06515 	stw	ra,404(sp)
 1827f28:	df006415 	stw	fp,400(sp)
 1827f2c:	df006404 	addi	fp,sp,400
        
    /* ------------------------------ */
    /* Marvell PHY on PHYWORKX board  */
    /* ------------------------------ */
    
    alt_tse_phy_profile MV88E1111 = {"Marvell 88E1111",      /* Marvell 88E1111                                  */
 1827f30:	e0ff9c04 	addi	r3,fp,-400
 1827f34:	00801904 	movi	r2,100
 1827f38:	100d883a 	mov	r6,r2
 1827f3c:	000b883a 	mov	r5,zero
 1827f40:	1809883a 	mov	r4,r3
 1827f44:	18060e00 	call	18060e0 <memset>
 1827f48:	009d9cb4 	movhi	r2,30322
 1827f4c:	10985344 	addi	r2,r2,24909
 1827f50:	e0bf9c15 	stw	r2,-400(fp)
 1827f54:	00881b34 	movhi	r2,8300
 1827f58:	109b1944 	addi	r2,r2,27749
 1827f5c:	e0bf9d15 	stw	r2,-396(fp)
 1827f60:	008c5174 	movhi	r2,12613
 1827f64:	108e0e04 	addi	r2,r2,14392
 1827f68:	e0bf9e15 	stw	r2,-392(fp)
 1827f6c:	00800c74 	movhi	r2,49
 1827f70:	108c4c44 	addi	r2,r2,12593
 1827f74:	e0bf9f15 	stw	r2,-388(fp)
 1827f78:	e0bfa004 	addi	r2,fp,-384
 1827f7c:	00c01004 	movi	r3,64
 1827f80:	180d883a 	mov	r6,r3
 1827f84:	000b883a 	mov	r5,zero
 1827f88:	1009883a 	mov	r4,r2
 1827f8c:	18060e00 	call	18060e0 <memset>
 1827f90:	009410c4 	movi	r2,20547
 1827f94:	e0bfb015 	stw	r2,-320(fp)
 1827f98:	00800304 	movi	r2,12
 1827f9c:	e0bfb105 	stb	r2,-316(fp)
 1827fa0:	00800084 	movi	r2,2
 1827fa4:	e0bfb145 	stb	r2,-315(fp)
 1827fa8:	00800444 	movi	r2,17
 1827fac:	e0bfb185 	stb	r2,-314(fp)
 1827fb0:	00800384 	movi	r2,14
 1827fb4:	e0bfb1c5 	stb	r2,-313(fp)
 1827fb8:	00800344 	movi	r2,13
 1827fbc:	e0bfb205 	stb	r2,-312(fp)
 1827fc0:	00800284 	movi	r2,10
 1827fc4:	e0bfb245 	stb	r2,-311(fp)
 1827fc8:	008060f4 	movhi	r2,387
 1827fcc:	10aa5a04 	addi	r2,r2,-22168
 1827fd0:	e0bfb315 	stw	r2,-308(fp)
    
    /* ---------------------------------- */
    /* Marvell Quad PHY on PHYWORKX board */
    /* ---------------------------------- */
    
    alt_tse_phy_profile MV88E1145 = {"Marvell Quad PHY 88E1145",      /* Marvell 88E1145                                  */
 1827fd4:	e0bfb504 	addi	r2,fp,-300
 1827fd8:	00c01904 	movi	r3,100
 1827fdc:	180d883a 	mov	r6,r3
 1827fe0:	000b883a 	mov	r5,zero
 1827fe4:	1009883a 	mov	r4,r2
 1827fe8:	18060e00 	call	18060e0 <memset>
 1827fec:	009d9cb4 	movhi	r2,30322
 1827ff0:	10985344 	addi	r2,r2,24909
 1827ff4:	e0bfb515 	stw	r2,-300(fp)
 1827ff8:	00881b34 	movhi	r2,8300
 1827ffc:	109b1944 	addi	r2,r2,27749
 1828000:	e0bfb615 	stw	r2,-296(fp)
 1828004:	00991874 	movhi	r2,25697
 1828008:	109d5444 	addi	r2,r2,30033
 182800c:	e0bfb715 	stw	r2,-292(fp)
 1828010:	00965234 	movhi	r2,22856
 1828014:	10940804 	addi	r2,r2,20512
 1828018:	e0bfb815 	stw	r2,-288(fp)
 182801c:	00914e34 	movhi	r2,17720
 1828020:	108e0804 	addi	r2,r2,14368
 1828024:	e0bfb915 	stw	r2,-284(fp)
 1828028:	008d4d34 	movhi	r2,13620
 182802c:	108c4c44 	addi	r2,r2,12593
 1828030:	e0bfba15 	stw	r2,-280(fp)
 1828034:	e03fbb15 	stw	zero,-276(fp)
 1828038:	e03fbc15 	stw	zero,-272(fp)
 182803c:	e03fbd15 	stw	zero,-268(fp)
 1828040:	e03fbe15 	stw	zero,-264(fp)
 1828044:	e03fbf15 	stw	zero,-260(fp)
 1828048:	e03fc015 	stw	zero,-256(fp)
 182804c:	e03fc115 	stw	zero,-252(fp)
 1828050:	e03fc215 	stw	zero,-248(fp)
 1828054:	e03fc315 	stw	zero,-244(fp)
 1828058:	e03fc415 	stw	zero,-240(fp)
 182805c:	e03fc515 	stw	zero,-236(fp)
 1828060:	e03fc615 	stw	zero,-232(fp)
 1828064:	e03fc715 	stw	zero,-228(fp)
 1828068:	e03fc815 	stw	zero,-224(fp)
 182806c:	009410c4 	movi	r2,20547
 1828070:	e0bfc915 	stw	r2,-220(fp)
 1828074:	00800344 	movi	r2,13
 1828078:	e0bfca05 	stb	r2,-216(fp)
 182807c:	00800084 	movi	r2,2
 1828080:	e0bfca45 	stb	r2,-215(fp)
 1828084:	00800444 	movi	r2,17
 1828088:	e0bfca85 	stb	r2,-214(fp)
 182808c:	00800384 	movi	r2,14
 1828090:	e0bfcac5 	stb	r2,-213(fp)
 1828094:	00800344 	movi	r2,13
 1828098:	e0bfcb05 	stb	r2,-212(fp)
 182809c:	00800284 	movi	r2,10
 18280a0:	e0bfcb45 	stb	r2,-211(fp)
 18280a4:	008060f4 	movhi	r2,387
 18280a8:	10aa5a04 	addi	r2,r2,-22168
 18280ac:	e0bfcc15 	stw	r2,-208(fp)
                      
    /* ------------------------------ */
    /* National PHY on PHYWORKX board */
    /* ------------------------------ */  
    
    alt_tse_phy_profile DP83865 = {"National DP83865",     /* National DP83865                                 */
 18280b0:	e0bfce04 	addi	r2,fp,-200
 18280b4:	00c01904 	movi	r3,100
 18280b8:	180d883a 	mov	r6,r3
 18280bc:	000b883a 	mov	r5,zero
 18280c0:	1009883a 	mov	r4,r2
 18280c4:	18060e00 	call	18060e0 <memset>
 18280c8:	009a5d34 	movhi	r2,26996
 18280cc:	10985384 	addi	r2,r2,24910
 18280d0:	e0bfce15 	stw	r2,-200(fp)
 18280d4:	009b1874 	movhi	r2,27745
 18280d8:	109b9bc4 	addi	r2,r2,28271
 18280dc:	e0bfcf15 	stw	r2,-196(fp)
 18280e0:	008e1434 	movhi	r2,14416
 18280e4:	10910804 	addi	r2,r2,17440
 18280e8:	e0bfd015 	stw	r2,-192(fp)
 18280ec:	008d4db4 	movhi	r2,13622
 18280f0:	108e0cc4 	addi	r2,r2,14387
 18280f4:	e0bfd115 	stw	r2,-188(fp)
 18280f8:	e03fd215 	stw	zero,-184(fp)
 18280fc:	e0bfd304 	addi	r2,fp,-180
 1828100:	00c00f04 	movi	r3,60
 1828104:	180d883a 	mov	r6,r3
 1828108:	000b883a 	mov	r5,zero
 182810c:	1009883a 	mov	r4,r2
 1828110:	18060e00 	call	18060e0 <memset>
 1828114:	00800234 	movhi	r2,8
 1828118:	108005c4 	addi	r2,r2,23
 182811c:	e0bfe215 	stw	r2,-120(fp)
 1828120:	008001c4 	movi	r2,7
 1828124:	e0bfe305 	stb	r2,-116(fp)
 1828128:	00800284 	movi	r2,10
 182812c:	e0bfe345 	stb	r2,-115(fp)
 1828130:	00800444 	movi	r2,17
 1828134:	e0bfe385 	stb	r2,-114(fp)
 1828138:	008000c4 	movi	r2,3
 182813c:	e0bfe3c5 	stb	r2,-113(fp)
 1828140:	00800044 	movi	r2,1
 1828144:	e0bfe405 	stb	r2,-112(fp)
 1828148:	00800084 	movi	r2,2
 182814c:	e0bfe445 	stb	r2,-111(fp)
                      
    /* -------------------------------------- */
    /* National 10/100 PHY on PHYWORKX board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile DP83848C = {"National DP83848C",  /* National DP83848C                                          */
 1828150:	00806134 	movhi	r2,388
 1828154:	10865404 	addi	r2,r2,6480
 1828158:	e0ffe704 	addi	r3,fp,-100
 182815c:	1009883a 	mov	r4,r2
 1828160:	00801904 	movi	r2,100
 1828164:	100d883a 	mov	r6,r2
 1828168:	200b883a 	mov	r5,r4
 182816c:	1809883a 	mov	r4,r3
 1828170:	1805f980 	call	1805f98 <memcpy>
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
 1828174:	e13f9c04 	addi	r4,fp,-400
 1828178:	182609c0 	call	182609c <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
 182817c:	e0bfb504 	addi	r2,fp,-300
 1828180:	1009883a 	mov	r4,r2
 1828184:	182609c0 	call	182609c <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
 1828188:	e0bfce04 	addi	r2,fp,-200
 182818c:	1009883a 	mov	r4,r2
 1828190:	182609c0 	call	182609c <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
 1828194:	e0bfe704 	addi	r2,fp,-100
 1828198:	1009883a 	mov	r4,r2
 182819c:	182609c0 	call	182609c <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
 18281a0:	d0a7fe03 	ldbu	r2,-24584(gp)
 18281a4:	10803fcc 	andi	r2,r2,255
}
 18281a8:	e037883a 	mov	sp,fp
 18281ac:	dfc00117 	ldw	ra,4(sp)
 18281b0:	df000017 	ldw	fp,0(sp)
 18281b4:	dec00204 	addi	sp,sp,8
 18281b8:	f800283a 	ret

018281bc <alt_tse_phy_print_profile>:
/* @Function Description: Display PHYs available in profile
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      Number of PHY in profile
 */
alt_32 alt_tse_phy_print_profile() {
 18281bc:	defffd04 	addi	sp,sp,-12
 18281c0:	dfc00215 	stw	ra,8(sp)
 18281c4:	df000115 	stw	fp,4(sp)
 18281c8:	df000104 	addi	fp,sp,4
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
 18281cc:	d0a7fe03 	ldbu	r2,-24584(gp)
 18281d0:	10803fcc 	andi	r2,r2,255
 18281d4:	100b883a 	mov	r5,r2
 18281d8:	01006134 	movhi	r4,388
 18281dc:	21066d04 	addi	r4,r4,6580
 18281e0:	1825d540 	call	1825d54 <no_printf>
    
    for(i = 0; i < phy_profile_count; i++)
 18281e4:	e03fff05 	stb	zero,-4(fp)
 18281e8:	00006d06 	br	18283a0 <alt_tse_phy_print_profile+0x1e4>
    {
        tse_dprintf(6, "Profile No.%2d   :\n", i);
 18281ec:	e0bfff07 	ldb	r2,-4(fp)
 18281f0:	100b883a 	mov	r5,r2
 18281f4:	01006134 	movhi	r4,388
 18281f8:	21067c04 	addi	r4,r4,6640
 18281fc:	1825d540 	call	1825d54 <no_printf>
        tse_dprintf(6, "PHY Name        : %s\n", pphy_profiles[i]->name);
 1828200:	e0ffff07 	ldb	r3,-4(fp)
 1828204:	00806134 	movhi	r2,388
 1828208:	109eda04 	addi	r2,r2,31592
 182820c:	18c7883a 	add	r3,r3,r3
 1828210:	18c7883a 	add	r3,r3,r3
 1828214:	10c5883a 	add	r2,r2,r3
 1828218:	10800017 	ldw	r2,0(r2)
 182821c:	100b883a 	mov	r5,r2
 1828220:	01006134 	movhi	r4,388
 1828224:	21068104 	addi	r4,r4,6660
 1828228:	1825d540 	call	1825d54 <no_printf>
   
        tse_dprintf(6, "PHY OUI         : 0x%06x\n", (int)pphy_profiles[i]->oui);
 182822c:	e0ffff07 	ldb	r3,-4(fp)
 1828230:	00806134 	movhi	r2,388
 1828234:	109eda04 	addi	r2,r2,31592
 1828238:	18c7883a 	add	r3,r3,r3
 182823c:	18c7883a 	add	r3,r3,r3
 1828240:	10c5883a 	add	r2,r2,r3
 1828244:	10800017 	ldw	r2,0(r2)
 1828248:	10801417 	ldw	r2,80(r2)
 182824c:	100b883a 	mov	r5,r2
 1828250:	01006134 	movhi	r4,388
 1828254:	21068704 	addi	r4,r4,6684
 1828258:	1825d540 	call	1825d54 <no_printf>
        tse_dprintf(6, "PHY Model Num.  : 0x%02x\n", pphy_profiles[i]->model_number);
 182825c:	e0ffff07 	ldb	r3,-4(fp)
 1828260:	00806134 	movhi	r2,388
 1828264:	109eda04 	addi	r2,r2,31592
 1828268:	18c7883a 	add	r3,r3,r3
 182826c:	18c7883a 	add	r3,r3,r3
 1828270:	10c5883a 	add	r2,r2,r3
 1828274:	10800017 	ldw	r2,0(r2)
 1828278:	10801503 	ldbu	r2,84(r2)
 182827c:	10803fcc 	andi	r2,r2,255
 1828280:	100b883a 	mov	r5,r2
 1828284:	01006134 	movhi	r4,388
 1828288:	21068e04 	addi	r4,r4,6712
 182828c:	1825d540 	call	1825d54 <no_printf>
        tse_dprintf(6, "PHY Rev. Num.   : 0x%02x\n", pphy_profiles[i]->revision_number);
 1828290:	e0ffff07 	ldb	r3,-4(fp)
 1828294:	00806134 	movhi	r2,388
 1828298:	109eda04 	addi	r2,r2,31592
 182829c:	18c7883a 	add	r3,r3,r3
 18282a0:	18c7883a 	add	r3,r3,r3
 18282a4:	10c5883a 	add	r2,r2,r3
 18282a8:	10800017 	ldw	r2,0(r2)
 18282ac:	10801543 	ldbu	r2,85(r2)
 18282b0:	10803fcc 	andi	r2,r2,255
 18282b4:	100b883a 	mov	r5,r2
 18282b8:	01006134 	movhi	r4,388
 18282bc:	21069504 	addi	r4,r4,6740
 18282c0:	1825d540 	call	1825d54 <no_printf>
        
        tse_dprintf(6, "Status Register : 0x%02x\n", pphy_profiles[i]->status_reg_location); 
 18282c4:	e0ffff07 	ldb	r3,-4(fp)
 18282c8:	00806134 	movhi	r2,388
 18282cc:	109eda04 	addi	r2,r2,31592
 18282d0:	18c7883a 	add	r3,r3,r3
 18282d4:	18c7883a 	add	r3,r3,r3
 18282d8:	10c5883a 	add	r2,r2,r3
 18282dc:	10800017 	ldw	r2,0(r2)
 18282e0:	10801583 	ldbu	r2,86(r2)
 18282e4:	10803fcc 	andi	r2,r2,255
 18282e8:	100b883a 	mov	r5,r2
 18282ec:	01006134 	movhi	r4,388
 18282f0:	21069c04 	addi	r4,r4,6768
 18282f4:	1825d540 	call	1825d54 <no_printf>
        
        tse_dprintf(6, "Speed Bit       : %d\n", pphy_profiles[i]->speed_lsb_location);
 18282f8:	e0ffff07 	ldb	r3,-4(fp)
 18282fc:	00806134 	movhi	r2,388
 1828300:	109eda04 	addi	r2,r2,31592
 1828304:	18c7883a 	add	r3,r3,r3
 1828308:	18c7883a 	add	r3,r3,r3
 182830c:	10c5883a 	add	r2,r2,r3
 1828310:	10800017 	ldw	r2,0(r2)
 1828314:	108015c3 	ldbu	r2,87(r2)
 1828318:	10803fcc 	andi	r2,r2,255
 182831c:	100b883a 	mov	r5,r2
 1828320:	01006134 	movhi	r4,388
 1828324:	2106a304 	addi	r4,r4,6796
 1828328:	1825d540 	call	1825d54 <no_printf>
        
        tse_dprintf(6, "Duplex Bit      : %d\n", pphy_profiles[i]->duplex_bit_location);
 182832c:	e0ffff07 	ldb	r3,-4(fp)
 1828330:	00806134 	movhi	r2,388
 1828334:	109eda04 	addi	r2,r2,31592
 1828338:	18c7883a 	add	r3,r3,r3
 182833c:	18c7883a 	add	r3,r3,r3
 1828340:	10c5883a 	add	r2,r2,r3
 1828344:	10800017 	ldw	r2,0(r2)
 1828348:	10801603 	ldbu	r2,88(r2)
 182834c:	10803fcc 	andi	r2,r2,255
 1828350:	100b883a 	mov	r5,r2
 1828354:	01006134 	movhi	r4,388
 1828358:	2106a904 	addi	r4,r4,6820
 182835c:	1825d540 	call	1825d54 <no_printf>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 1828360:	e0ffff07 	ldb	r3,-4(fp)
 1828364:	00806134 	movhi	r2,388
 1828368:	109eda04 	addi	r2,r2,31592
 182836c:	18c7883a 	add	r3,r3,r3
 1828370:	18c7883a 	add	r3,r3,r3
 1828374:	10c5883a 	add	r2,r2,r3
 1828378:	10800017 	ldw	r2,0(r2)
 182837c:	10801643 	ldbu	r2,89(r2)
 1828380:	10803fcc 	andi	r2,r2,255
 1828384:	100b883a 	mov	r5,r2
 1828388:	01006134 	movhi	r4,388
 182838c:	2106af04 	addi	r4,r4,6844
 1828390:	1825d540 	call	1825d54 <no_printf>
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
    
    for(i = 0; i < phy_profile_count; i++)
 1828394:	e0bfff03 	ldbu	r2,-4(fp)
 1828398:	10800044 	addi	r2,r2,1
 182839c:	e0bfff05 	stb	r2,-4(fp)
 18283a0:	e0ffff07 	ldb	r3,-4(fp)
 18283a4:	d0a7fe03 	ldbu	r2,-24584(gp)
 18283a8:	10803fcc 	andi	r2,r2,255
 18283ac:	18bf8f16 	blt	r3,r2,18281ec <__ram_exceptions_end+0xff817efc>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 
    }
    
    return phy_profile_count;
 18283b0:	d0a7fe03 	ldbu	r2,-24584(gp)
 18283b4:	10803fcc 	andi	r2,r2,255
}
 18283b8:	e037883a 	mov	sp,fp
 18283bc:	dfc00117 	ldw	ra,4(sp)
 18283c0:	df000017 	ldw	fp,0(sp)
 18283c4:	dec00204 	addi	sp,sp,8
 18283c8:	f800283a 	ret

018283cc <alt_tse_mac_group_init>:
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
 18283cc:	defffa04 	addi	sp,sp,-24
 18283d0:	dfc00515 	stw	ra,20(sp)
 18283d4:	df000415 	stw	fp,16(sp)
 18283d8:	df000404 	addi	fp,sp,16
    
	alt_8 i;
	alt_8 j;
    
    alt_tse_mac_group *pmac_group = 0;
 18283dc:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 18283e0:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_system_info *psys = 0;
 18283e4:	e03fff15 	stw	zero,-4(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
 18283e8:	d027fe45 	stb	zero,-24583(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 18283ec:	e03ffc05 	stb	zero,-16(fp)
 18283f0:	00019506 	br	1828a48 <alt_tse_mac_group_init+0x67c>
        psys = &tse_mac_device[i];
 18283f4:	e0bffc07 	ldb	r2,-16(fp)
 18283f8:	10c01224 	muli	r3,r2,72
 18283fc:	00806134 	movhi	r2,388
 1828400:	1093d804 	addi	r2,r2,20320
 1828404:	1885883a 	add	r2,r3,r2
 1828408:	e0bfff15 	stw	r2,-4(fp)

        if((psys->tse_sgdma_tx != 0) && (psys->tse_sgdma_rx != 0)) {    	
 182840c:	e0bfff17 	ldw	r2,-4(fp)
 1828410:	10800517 	ldw	r2,20(r2)
 1828414:	10018926 	beq	r2,zero,1828a3c <alt_tse_mac_group_init+0x670>
 1828418:	e0bfff17 	ldw	r2,-4(fp)
 182841c:	10800617 	ldw	r2,24(r2)
 1828420:	10018626 	beq	r2,zero,1828a3c <alt_tse_mac_group_init+0x670>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
 1828424:	d0a7fe43 	ldbu	r2,-24583(gp)
 1828428:	10c03fcc 	andi	r3,r2,255
 182842c:	e0bfff17 	ldw	r2,-4(fp)
 1828430:	10800017 	ldw	r2,0(r2)
 1828434:	100d883a 	mov	r6,r2
 1828438:	180b883a 	mov	r5,r3
 182843c:	01006134 	movhi	r4,388
 1828440:	2106b504 	addi	r4,r4,6868
 1828444:	1800b240 	call	1800b24 <printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
 1828448:	01000904 	movi	r4,36
 182844c:	183c5000 	call	183c500 <malloc>
 1828450:	e0bffd15 	stw	r2,-12(fp)
            if(!pmac_group) {
 1828454:	e0bffd17 	ldw	r2,-12(fp)
 1828458:	1000081e 	bne	r2,zero,182847c <alt_tse_mac_group_init+0xb0>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
 182845c:	d0a7fe43 	ldbu	r2,-24583(gp)
 1828460:	10803fcc 	andi	r2,r2,255
 1828464:	100b883a 	mov	r5,r2
 1828468:	01006134 	movhi	r4,388
 182846c:	2106c104 	addi	r4,r4,6916
 1828470:	1800b240 	call	1800b24 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 1828474:	00bfffc4 	movi	r2,-1
 1828478:	00017806 	br	1828a5c <alt_tse_mac_group_init+0x690>
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
 182847c:	e0bfff17 	ldw	r2,-4(fp)
 1828480:	108002c3 	ldbu	r2,11(r2)
 1828484:	10803fcc 	andi	r2,r2,255
 1828488:	10001226 	beq	r2,zero,18284d4 <alt_tse_mac_group_init+0x108>
                pmac_group->channel = psys->tse_num_of_channel;
 182848c:	e0bfff17 	ldw	r2,-4(fp)
 1828490:	10c00303 	ldbu	r3,12(r2)
 1828494:	e0bffd17 	ldw	r2,-12(fp)
 1828498:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
 182849c:	01006134 	movhi	r4,388
 18284a0:	2106cf04 	addi	r4,r4,6972
 18284a4:	1825d540 	call	1825d54 <no_printf>
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
 18284a8:	e0bffd17 	ldw	r2,-12(fp)
 18284ac:	10800003 	ldbu	r2,0(r2)
 18284b0:	10803fcc 	andi	r2,r2,255
 18284b4:	100b883a 	mov	r5,r2
 18284b8:	01006134 	movhi	r4,388
 18284bc:	2106da04 	addi	r4,r4,7016
 18284c0:	1825d540 	call	1825d54 <no_printf>
            	tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 18284c4:	01006134 	movhi	r4,388
 18284c8:	2106e504 	addi	r4,r4,7060
 18284cc:	1825d540 	call	1825d54 <no_printf>
 18284d0:	00001f06 	br	1828550 <alt_tse_mac_group_init+0x184>
            }
            else if(psys->tse_mdio_shared) {
 18284d4:	e0bfff17 	ldw	r2,-4(fp)
 18284d8:	10800343 	ldbu	r2,13(r2)
 18284dc:	10803fcc 	andi	r2,r2,255
 18284e0:	10001226 	beq	r2,zero,182852c <alt_tse_mac_group_init+0x160>
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
 18284e4:	e0bfff17 	ldw	r2,-4(fp)
 18284e8:	10c00383 	ldbu	r3,14(r2)
 18284ec:	e0bffd17 	ldw	r2,-12(fp)
 18284f0:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 18284f4:	01006134 	movhi	r4,388
 18284f8:	2106f004 	addi	r4,r4,7104
 18284fc:	1825d540 	call	1825d54 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 1828500:	01006134 	movhi	r4,388
 1828504:	2106e504 	addi	r4,r4,7060
 1828508:	1825d540 	call	1825d54 <no_printf>
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
 182850c:	e0bffd17 	ldw	r2,-12(fp)
 1828510:	10800003 	ldbu	r2,0(r2)
 1828514:	10803fcc 	andi	r2,r2,255
 1828518:	100b883a 	mov	r5,r2
 182851c:	01006134 	movhi	r4,388
 1828520:	2106fb04 	addi	r4,r4,7148
 1828524:	1825d540 	call	1825d54 <no_printf>
 1828528:	00000906 	br	1828550 <alt_tse_mac_group_init+0x184>
            }
            else {
                pmac_group->channel = 1;
 182852c:	e0bffd17 	ldw	r2,-12(fp)
 1828530:	00c00044 	movi	r3,1
 1828534:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 1828538:	01006134 	movhi	r4,388
 182853c:	2106f004 	addi	r4,r4,7104
 1828540:	1825d540 	call	1825d54 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
 1828544:	01006134 	movhi	r4,388
 1828548:	21070604 	addi	r4,r4,7192
 182854c:	1825d540 	call	1825d54 <no_printf>
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 1828550:	e03ffc45 	stb	zero,-15(fp)
 1828554:	00012206 	br	18289e0 <alt_tse_mac_group_init+0x614>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
 1828558:	01000404 	movi	r4,16
 182855c:	183c5000 	call	183c500 <malloc>
 1828560:	e0bffe15 	stw	r2,-8(fp)
                if(!pmac_info) {
 1828564:	e0bffe17 	ldw	r2,-8(fp)
 1828568:	10000a1e 	bne	r2,zero,1828594 <alt_tse_mac_group_init+0x1c8>
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
 182856c:	d0a7fe43 	ldbu	r2,-24583(gp)
 1828570:	10803fcc 	andi	r2,r2,255
 1828574:	e0fffc47 	ldb	r3,-15(fp)
 1828578:	180d883a 	mov	r6,r3
 182857c:	100b883a 	mov	r5,r2
 1828580:	01006134 	movhi	r4,388
 1828584:	21071104 	addi	r4,r4,7236
 1828588:	1800b240 	call	1800b24 <printf>
                    return ALTERA_TSE_MALLOC_FAILED;
 182858c:	00bfffc4 	movi	r2,-1
 1828590:	00013206 	br	1828a5c <alt_tse_mac_group_init+0x690>
                }
                
                pmac_info->pmac_group = pmac_group;
 1828594:	e0bffe17 	ldw	r2,-8(fp)
 1828598:	e0fffd17 	ldw	r3,-12(fp)
 182859c:	10c00315 	stw	r3,12(r2)
                
                pmac_info->pphy_info = 0;
 18285a0:	e0bffe17 	ldw	r2,-8(fp)
 18285a4:	10000115 	stw	zero,4(r2)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 18285a8:	e0fffc07 	ldb	r3,-16(fp)
 18285ac:	e0bffc47 	ldb	r2,-15(fp)
 18285b0:	1885883a 	add	r2,r3,r2
 18285b4:	10c01224 	muli	r3,r2,72
 18285b8:	00806134 	movhi	r2,388
 18285bc:	1093d804 	addi	r2,r2,20320
 18285c0:	1887883a 	add	r3,r3,r2
 18285c4:	e0bffe17 	ldw	r2,-8(fp)
 18285c8:	10c00215 	stw	r3,8(r2)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_sgdma_tx == 0) || (pmac_info->psys_info->tse_sgdma_rx == 0)){                	
 18285cc:	e0bffe17 	ldw	r2,-8(fp)
 18285d0:	10800217 	ldw	r2,8(r2)
 18285d4:	10800517 	ldw	r2,20(r2)
 18285d8:	10000426 	beq	r2,zero,18285ec <alt_tse_mac_group_init+0x220>
 18285dc:	e0bffe17 	ldw	r2,-8(fp)
 18285e0:	10800217 	ldw	r2,8(r2)
 18285e4:	10800617 	ldw	r2,24(r2)
 18285e8:	1000091e 	bne	r2,zero,1828610 <alt_tse_mac_group_init+0x244>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
 18285ec:	e0fffc07 	ldb	r3,-16(fp)
 18285f0:	e0bffc47 	ldb	r2,-15(fp)
 18285f4:	1885883a 	add	r2,r3,r2
 18285f8:	100b883a 	mov	r5,r2
 18285fc:	01006134 	movhi	r4,388
 1828600:	21072304 	addi	r4,r4,7308
 1828604:	1800b240 	call	1800b24 <printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
 1828608:	00bfffc4 	movi	r2,-1
 182860c:	00011306 	br	1828a5c <alt_tse_mac_group_init+0x690>
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
 1828610:	e0bffe17 	ldw	r2,-8(fp)
 1828614:	10800217 	ldw	r2,8(r2)
 1828618:	10800243 	ldbu	r2,9(r2)
 182861c:	10803fcc 	andi	r2,r2,255
 1828620:	10000d26 	beq	r2,zero,1828658 <alt_tse_mac_group_init+0x28c>
                    if(pmac_info->psys_info->tse_maclite_gige) {
 1828624:	e0bffe17 	ldw	r2,-8(fp)
 1828628:	10800217 	ldw	r2,8(r2)
 182862c:	10800283 	ldbu	r2,10(r2)
 1828630:	10803fcc 	andi	r2,r2,255
 1828634:	10000426 	beq	r2,zero,1828648 <alt_tse_mac_group_init+0x27c>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
 1828638:	e0bffe17 	ldw	r2,-8(fp)
 182863c:	00c00084 	movi	r3,2
 1828640:	10c00005 	stb	r3,0(r2)
 1828644:	00000606 	br	1828660 <alt_tse_mac_group_init+0x294>
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
 1828648:	e0bffe17 	ldw	r2,-8(fp)
 182864c:	00c00044 	movi	r3,1
 1828650:	10c00005 	stb	r3,0(r2)
 1828654:	00000206 	br	1828660 <alt_tse_mac_group_init+0x294>
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
 1828658:	e0bffe17 	ldw	r2,-8(fp)
 182865c:	10000005 	stb	zero,0(r2)
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
 1828660:	e0bffe17 	ldw	r2,-8(fp)
 1828664:	10800217 	ldw	r2,8(r2)
 1828668:	10800343 	ldbu	r2,13(r2)
 182866c:	10803fcc 	andi	r2,r2,255
 1828670:	10006626 	beq	r2,zero,182880c <alt_tse_mac_group_init+0x440>
 1828674:	e0bffe17 	ldw	r2,-8(fp)
 1828678:	10800217 	ldw	r2,8(r2)
 182867c:	108002c3 	ldbu	r2,11(r2)
 1828680:	10803fcc 	andi	r2,r2,255
 1828684:	1000611e 	bne	r2,zero,182880c <alt_tse_mac_group_init+0x440>
                	tse_dprintf(6, "INFO    : MAC %2d Address           = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 1828688:	e0fffc47 	ldb	r3,-15(fp)
 182868c:	e0bffe17 	ldw	r2,-8(fp)
 1828690:	10800217 	ldw	r2,8(r2)
 1828694:	10800017 	ldw	r2,0(r2)
 1828698:	100d883a 	mov	r6,r2
 182869c:	180b883a 	mov	r5,r3
 18286a0:	01006134 	movhi	r4,388
 18286a4:	21073204 	addi	r4,r4,7368
 18286a8:	1825d540 	call	1825d54 <no_printf>
                    tse_dprintf(6, "INFO    : MAC %2d Device            = tse_mac_device[%d]\n", j, i + j);
 18286ac:	e13ffc47 	ldb	r4,-15(fp)
 18286b0:	e0fffc07 	ldb	r3,-16(fp)
 18286b4:	e0bffc47 	ldb	r2,-15(fp)
 18286b8:	1885883a 	add	r2,r3,r2
 18286bc:	100d883a 	mov	r6,r2
 18286c0:	200b883a 	mov	r5,r4
 18286c4:	01006134 	movhi	r4,388
 18286c8:	21073e04 	addi	r4,r4,7416
 18286cc:	1825d540 	call	1825d54 <no_printf>
                    
                	switch(pmac_info->mac_type) {
 18286d0:	e0bffe17 	ldw	r2,-8(fp)
 18286d4:	10800003 	ldbu	r2,0(r2)
 18286d8:	10803fcc 	andi	r2,r2,255
 18286dc:	10c00060 	cmpeqi	r3,r2,1
 18286e0:	18000c1e 	bne	r3,zero,1828714 <alt_tse_mac_group_init+0x348>
 18286e4:	10c000a0 	cmpeqi	r3,r2,2
 18286e8:	1800021e 	bne	r3,zero,18286f4 <alt_tse_mac_group_init+0x328>
 18286ec:	10001126 	beq	r2,zero,1828734 <alt_tse_mac_group_init+0x368>
 18286f0:	00001806 	br	1828754 <alt_tse_mac_group_init+0x388>
                        case ALTERA_TSE_MACLITE_1000:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "1000 Mbps Small MAC");
 18286f4:	e0bffc47 	ldb	r2,-15(fp)
 18286f8:	01806134 	movhi	r6,388
 18286fc:	31874d04 	addi	r6,r6,7476
 1828700:	100b883a 	mov	r5,r2
 1828704:	01006134 	movhi	r4,388
 1828708:	21075204 	addi	r4,r4,7496
 182870c:	1825d540 	call	1825d54 <no_printf>
                            break;
 1828710:	00001806 	br	1828774 <alt_tse_mac_group_init+0x3a8>
                        case ALTERA_TSE_MACLITE_10_100:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100 Mbps Small MAC");
 1828714:	e0bffc47 	ldb	r2,-15(fp)
 1828718:	01806134 	movhi	r6,388
 182871c:	31875d04 	addi	r6,r6,7540
 1828720:	100b883a 	mov	r5,r2
 1828724:	01006134 	movhi	r4,388
 1828728:	21075204 	addi	r4,r4,7496
 182872c:	1825d540 	call	1825d54 <no_printf>
                            break;
 1828730:	00001006 	br	1828774 <alt_tse_mac_group_init+0x3a8>
                        case ALTERA_TSE_FULL_MAC:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100/1000 Ethernet MAC");
 1828734:	e0bffc47 	ldb	r2,-15(fp)
 1828738:	01806134 	movhi	r6,388
 182873c:	31876304 	addi	r6,r6,7564
 1828740:	100b883a 	mov	r5,r2
 1828744:	01006134 	movhi	r4,388
 1828748:	21075204 	addi	r4,r4,7496
 182874c:	1825d540 	call	1825d54 <no_printf>
                            break;
 1828750:	00000806 	br	1828774 <alt_tse_mac_group_init+0x3a8>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
 1828754:	e0bffc47 	ldb	r2,-15(fp)
 1828758:	01806134 	movhi	r6,388
 182875c:	31859b04 	addi	r6,r6,5740
 1828760:	100b883a 	mov	r5,r2
 1828764:	01006134 	movhi	r4,388
 1828768:	21075204 	addi	r4,r4,7496
 182876c:	1825d540 	call	1825d54 <no_printf>
                            break;
 1828770:	0001883a 	nop
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
 1828774:	e0bffe17 	ldw	r2,-8(fp)
 1828778:	10800217 	ldw	r2,8(r2)
 182877c:	108003c3 	ldbu	r2,15(r2)
 1828780:	10803fcc 	andi	r2,r2,255
 1828784:	10008b26 	beq	r2,zero,18289b4 <alt_tse_mac_group_init+0x5e8>
                        tse_dprintf(6, "INFO    : PCS %2d Enable            = %s\n", j, pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 1828788:	e0fffc47 	ldb	r3,-15(fp)
 182878c:	e0bffe17 	ldw	r2,-8(fp)
 1828790:	10800217 	ldw	r2,8(r2)
 1828794:	108003c3 	ldbu	r2,15(r2)
 1828798:	10803fcc 	andi	r2,r2,255
 182879c:	10000326 	beq	r2,zero,18287ac <alt_tse_mac_group_init+0x3e0>
 18287a0:	00806134 	movhi	r2,388
 18287a4:	10876a04 	addi	r2,r2,7592
 18287a8:	00000206 	br	18287b4 <alt_tse_mac_group_init+0x3e8>
 18287ac:	00806134 	movhi	r2,388
 18287b0:	10876b04 	addi	r2,r2,7596
 18287b4:	100d883a 	mov	r6,r2
 18287b8:	180b883a 	mov	r5,r3
 18287bc:	01006134 	movhi	r4,388
 18287c0:	21076c04 	addi	r4,r4,7600
 18287c4:	1825d540 	call	1825d54 <no_printf>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
 18287c8:	e0fffc47 	ldb	r3,-15(fp)
 18287cc:	e0bffe17 	ldw	r2,-8(fp)
 18287d0:	10800217 	ldw	r2,8(r2)
 18287d4:	10800403 	ldbu	r2,16(r2)
 18287d8:	10803fcc 	andi	r2,r2,255
 18287dc:	10000326 	beq	r2,zero,18287ec <alt_tse_mac_group_init+0x420>
 18287e0:	00806134 	movhi	r2,388
 18287e4:	10876a04 	addi	r2,r2,7592
 18287e8:	00000206 	br	18287f4 <alt_tse_mac_group_init+0x428>
 18287ec:	00806134 	movhi	r2,388
 18287f0:	10876b04 	addi	r2,r2,7596
 18287f4:	100d883a 	mov	r6,r2
 18287f8:	180b883a 	mov	r5,r3
 18287fc:	01006134 	movhi	r4,388
 1828800:	21077704 	addi	r4,r4,7644
 1828804:	1825d540 	call	1825d54 <no_printf>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
                            break;
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
 1828808:	00006a06 	br	18289b4 <alt_tse_mac_group_init+0x5e8>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
                    }
                }
                else {
                	/* display only once for all MAC, except shared MDIO MACs */
	                if(j == 0) {
 182880c:	e0bffc47 	ldb	r2,-15(fp)
 1828810:	1000421e 	bne	r2,zero,182891c <alt_tse_mac_group_init+0x550>
	                    switch(pmac_info->mac_type) {
 1828814:	e0bffe17 	ldw	r2,-8(fp)
 1828818:	10800003 	ldbu	r2,0(r2)
 182881c:	10803fcc 	andi	r2,r2,255
 1828820:	10c00060 	cmpeqi	r3,r2,1
 1828824:	18000a1e 	bne	r3,zero,1828850 <alt_tse_mac_group_init+0x484>
 1828828:	10c000a0 	cmpeqi	r3,r2,2
 182882c:	1800021e 	bne	r3,zero,1828838 <alt_tse_mac_group_init+0x46c>
 1828830:	10000d26 	beq	r2,zero,1828868 <alt_tse_mac_group_init+0x49c>
 1828834:	00001206 	br	1828880 <alt_tse_mac_group_init+0x4b4>
	                        case ALTERA_TSE_MACLITE_1000:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "1000 Mbps Small MAC");
 1828838:	01406134 	movhi	r5,388
 182883c:	29474d04 	addi	r5,r5,7476
 1828840:	01006134 	movhi	r4,388
 1828844:	21078204 	addi	r4,r4,7688
 1828848:	1825d540 	call	1825d54 <no_printf>
	                            break;
 182884c:	00001206 	br	1828898 <alt_tse_mac_group_init+0x4cc>
	                        case ALTERA_TSE_MACLITE_10_100:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100 Mbps Small MAC");
 1828850:	01406134 	movhi	r5,388
 1828854:	29475d04 	addi	r5,r5,7540
 1828858:	01006134 	movhi	r4,388
 182885c:	21078204 	addi	r4,r4,7688
 1828860:	1825d540 	call	1825d54 <no_printf>
	                            break;
 1828864:	00000c06 	br	1828898 <alt_tse_mac_group_init+0x4cc>
	                        case ALTERA_TSE_FULL_MAC:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100/1000 Ethernet MAC");
 1828868:	01406134 	movhi	r5,388
 182886c:	29476304 	addi	r5,r5,7564
 1828870:	01006134 	movhi	r4,388
 1828874:	21078204 	addi	r4,r4,7688
 1828878:	1825d540 	call	1825d54 <no_printf>
	                            break;
 182887c:	00000606 	br	1828898 <alt_tse_mac_group_init+0x4cc>
	                        default :
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "Unknown");
 1828880:	01406134 	movhi	r5,388
 1828884:	29459b04 	addi	r5,r5,5740
 1828888:	01006134 	movhi	r4,388
 182888c:	21078204 	addi	r4,r4,7688
 1828890:	1825d540 	call	1825d54 <no_printf>
                                    break;
 1828894:	0001883a 	nop
			    }
	                    
	                    if(pmac_info->psys_info->tse_pcs_ena) {
 1828898:	e0bffe17 	ldw	r2,-8(fp)
 182889c:	10800217 	ldw	r2,8(r2)
 18288a0:	108003c3 	ldbu	r2,15(r2)
 18288a4:	10803fcc 	andi	r2,r2,255
 18288a8:	10001c26 	beq	r2,zero,182891c <alt_tse_mac_group_init+0x550>
	                        tse_dprintf(6, "INFO    : PCS Enable               = %s\n", pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 18288ac:	e0bffe17 	ldw	r2,-8(fp)
 18288b0:	10800217 	ldw	r2,8(r2)
 18288b4:	108003c3 	ldbu	r2,15(r2)
 18288b8:	10803fcc 	andi	r2,r2,255
 18288bc:	10000326 	beq	r2,zero,18288cc <alt_tse_mac_group_init+0x500>
 18288c0:	00806134 	movhi	r2,388
 18288c4:	10876a04 	addi	r2,r2,7592
 18288c8:	00000206 	br	18288d4 <alt_tse_mac_group_init+0x508>
 18288cc:	00806134 	movhi	r2,388
 18288d0:	10876b04 	addi	r2,r2,7596
 18288d4:	100b883a 	mov	r5,r2
 18288d8:	01006134 	movhi	r4,388
 18288dc:	21078d04 	addi	r4,r4,7732
 18288e0:	1825d540 	call	1825d54 <no_printf>
	                        tse_dprintf(6, "INFO    : PCS SGMII Enable         = %s\n", pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");	                        
 18288e4:	e0bffe17 	ldw	r2,-8(fp)
 18288e8:	10800217 	ldw	r2,8(r2)
 18288ec:	10800403 	ldbu	r2,16(r2)
 18288f0:	10803fcc 	andi	r2,r2,255
 18288f4:	10000326 	beq	r2,zero,1828904 <alt_tse_mac_group_init+0x538>
 18288f8:	00806134 	movhi	r2,388
 18288fc:	10876a04 	addi	r2,r2,7592
 1828900:	00000206 	br	182890c <alt_tse_mac_group_init+0x540>
 1828904:	00806134 	movhi	r2,388
 1828908:	10876b04 	addi	r2,r2,7596
 182890c:	100b883a 	mov	r5,r2
 1828910:	01006134 	movhi	r4,388
 1828914:	21079804 	addi	r4,r4,7776
 1828918:	1825d540 	call	1825d54 <no_printf>
	                    }
	                }
	                
                	if(pmac_info->psys_info->tse_multichannel_mac) {
 182891c:	e0bffe17 	ldw	r2,-8(fp)
 1828920:	10800217 	ldw	r2,8(r2)
 1828924:	108002c3 	ldbu	r2,11(r2)
 1828928:	10803fcc 	andi	r2,r2,255
 182892c:	10001326 	beq	r2,zero,182897c <alt_tse_mac_group_init+0x5b0>
                		tse_dprintf(6, "INFO    : Channel %2d Address       = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 1828930:	e0fffc47 	ldb	r3,-15(fp)
 1828934:	e0bffe17 	ldw	r2,-8(fp)
 1828938:	10800217 	ldw	r2,8(r2)
 182893c:	10800017 	ldw	r2,0(r2)
 1828940:	100d883a 	mov	r6,r2
 1828944:	180b883a 	mov	r5,r3
 1828948:	01006134 	movhi	r4,388
 182894c:	2107a304 	addi	r4,r4,7820
 1828950:	1825d540 	call	1825d54 <no_printf>
	                    tse_dprintf(6, "INFO    : Channel %2d Device        = tse_mac_device[%d]\n", j, i + j);
 1828954:	e13ffc47 	ldb	r4,-15(fp)
 1828958:	e0fffc07 	ldb	r3,-16(fp)
 182895c:	e0bffc47 	ldb	r2,-15(fp)
 1828960:	1885883a 	add	r2,r3,r2
 1828964:	100d883a 	mov	r6,r2
 1828968:	200b883a 	mov	r5,r4
 182896c:	01006134 	movhi	r4,388
 1828970:	2107af04 	addi	r4,r4,7868
 1828974:	1825d540 	call	1825d54 <no_printf>
 1828978:	00000e06 	br	18289b4 <alt_tse_mac_group_init+0x5e8>
	            	}                
	                else {
	                    tse_dprintf(6, "INFO    : MAC Address              = 0x%08x\n", (int) pmac_info->psys_info->tse_mac_base);
 182897c:	e0bffe17 	ldw	r2,-8(fp)
 1828980:	10800217 	ldw	r2,8(r2)
 1828984:	10800017 	ldw	r2,0(r2)
 1828988:	100b883a 	mov	r5,r2
 182898c:	01006134 	movhi	r4,388
 1828990:	2107be04 	addi	r4,r4,7928
 1828994:	1825d540 	call	1825d54 <no_printf>
	                    tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
 1828998:	e0fffc07 	ldb	r3,-16(fp)
 182899c:	e0bffc47 	ldb	r2,-15(fp)
 18289a0:	1885883a 	add	r2,r3,r2
 18289a4:	100b883a 	mov	r5,r2
 18289a8:	01006134 	movhi	r4,388
 18289ac:	2107ca04 	addi	r4,r4,7976
 18289b0:	1825d540 	call	1825d54 <no_printf>
	                }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
 18289b4:	e0bffc47 	ldb	r2,-15(fp)
 18289b8:	e0fffd17 	ldw	r3,-12(fp)
 18289bc:	10800044 	addi	r2,r2,1
 18289c0:	1085883a 	add	r2,r2,r2
 18289c4:	1085883a 	add	r2,r2,r2
 18289c8:	1885883a 	add	r2,r3,r2
 18289cc:	e0fffe17 	ldw	r3,-8(fp)
 18289d0:	10c00015 	stw	r3,0(r2)
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 18289d4:	e0bffc43 	ldbu	r2,-15(fp)
 18289d8:	10800044 	addi	r2,r2,1
 18289dc:	e0bffc45 	stb	r2,-15(fp)
 18289e0:	e0fffc47 	ldb	r3,-15(fp)
 18289e4:	e0bffd17 	ldw	r2,-12(fp)
 18289e8:	10800003 	ldbu	r2,0(r2)
 18289ec:	10803fcc 	andi	r2,r2,255
 18289f0:	18bed916 	blt	r3,r2,1828558 <__ram_exceptions_end+0xff818268>
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
 18289f4:	d0a7fe43 	ldbu	r2,-24583(gp)
 18289f8:	10c03fcc 	andi	r3,r2,255
 18289fc:	00806134 	movhi	r2,388
 1828a00:	109ed204 	addi	r2,r2,31560
 1828a04:	18c7883a 	add	r3,r3,r3
 1828a08:	18c7883a 	add	r3,r3,r3
 1828a0c:	10c5883a 	add	r2,r2,r3
 1828a10:	e0fffd17 	ldw	r3,-12(fp)
 1828a14:	10c00015 	stw	r3,0(r2)
            
            mac_group_count++;
 1828a18:	d0a7fe43 	ldbu	r2,-24583(gp)
 1828a1c:	10800044 	addi	r2,r2,1
 1828a20:	d0a7fe45 	stb	r2,-24583(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
 1828a24:	e0bffd17 	ldw	r2,-12(fp)
 1828a28:	10c00003 	ldbu	r3,0(r2)
 1828a2c:	e0bffc03 	ldbu	r2,-16(fp)
 1828a30:	1885883a 	add	r2,r3,r2
 1828a34:	10bfffc4 	addi	r2,r2,-1
 1828a38:	e0bffc05 	stb	r2,-16(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 1828a3c:	e0bffc03 	ldbu	r2,-16(fp)
 1828a40:	10800044 	addi	r2,r2,1
 1828a44:	e0bffc05 	stb	r2,-16(fp)
 1828a48:	e0fffc07 	ldb	r3,-16(fp)
 1828a4c:	d0a01903 	ldbu	r2,-32668(gp)
 1828a50:	10803fcc 	andi	r2,r2,255
 1828a54:	18be6716 	blt	r3,r2,18283f4 <__ram_exceptions_end+0xff818104>
            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
                        
        }
    }
    return SUCCESS;
 1828a58:	0005883a 	mov	r2,zero
}
 1828a5c:	e037883a 	mov	sp,fp
 1828a60:	dfc00117 	ldw	ra,4(sp)
 1828a64:	df000017 	ldw	fp,0(sp)
 1828a68:	dec00204 	addi	sp,sp,8
 1828a6c:	f800283a 	ret

01828a70 <alt_tse_mac_get_phy>:
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
 1828a70:	deffed04 	addi	sp,sp,-76
 1828a74:	dfc01215 	stw	ra,72(sp)
 1828a78:	df001115 	stw	fp,68(sp)
 1828a7c:	df001104 	addi	fp,sp,68
 1828a80:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 phyid; 
	alt_32 phyid2 = 0;
 1828a84:	e03ff515 	stw	zero,-44(fp)
    alt_u8 revision_number;

    alt_32 i;

    alt_u8 is_phy_in_profile;
    alt_32 return_value = 0;
 1828a88:	e03ff315 	stw	zero,-52(fp)
    
    alt_8 phy_info_count = 0;
 1828a8c:	e03ff405 	stb	zero,-48(fp)
    
    alt_tse_phy_info *pphy = 0;
 1828a90:	e03ff615 	stw	zero,-40(fp)
    alt_tse_mac_info *pmac_info = 0;
 1828a94:	e03ff715 	stw	zero,-36(fp)
    alt_tse_system_info *psys = 0;
 1828a98:	e03ff815 	stw	zero,-32(fp)
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 1828a9c:	e0bfff17 	ldw	r2,-4(fp)
 1828aa0:	10800117 	ldw	r2,4(r2)
 1828aa4:	10800217 	ldw	r2,8(r2)
 1828aa8:	10800017 	ldw	r2,0(r2)
 1828aac:	e0bff915 	stw	r2,-28(fp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 1828ab0:	e0bff917 	ldw	r2,-28(fp)
 1828ab4:	10801004 	addi	r2,r2,64
 1828ab8:	10800037 	ldwio	r2,0(r2)
 1828abc:	e0bffa15 	stw	r2,-24(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 1828ac0:	e13fff17 	ldw	r4,-4(fp)
 1828ac4:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 1828ac8:	e0bffb05 	stb	r2,-20(fp)
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x01; phyadd < 0x20; phyadd++)
 1828acc:	00800044 	movi	r2,1
 1828ad0:	e0bff005 	stb	r2,-64(fp)
 1828ad4:	0000ca06 	br	1828e00 <alt_tse_mac_get_phy+0x390>
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
 1828ad8:	e0bff917 	ldw	r2,-28(fp)
 1828adc:	10801004 	addi	r2,r2,64
 1828ae0:	e0fff003 	ldbu	r3,-64(fp)
 1828ae4:	10c00035 	stwio	r3,0(r2)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
 1828ae8:	e0bff917 	ldw	r2,-28(fp)
 1828aec:	1080a204 	addi	r2,r2,648
 1828af0:	10800037 	ldwio	r2,0(r2)
 1828af4:	e0bffc15 	stw	r2,-16(fp)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
 1828af8:	e0bff917 	ldw	r2,-28(fp)
 1828afc:	1080a304 	addi	r2,r2,652
 1828b00:	10800037 	ldwio	r2,0(r2)
 1828b04:	e0bff515 	stw	r2,-44(fp)
        
        /* PHY found */
        if (phyid != phyid2)
 1828b08:	e0fffc17 	ldw	r3,-16(fp)
 1828b0c:	e0bff517 	ldw	r2,-44(fp)
 1828b10:	1880b826 	beq	r3,r2,1828df4 <alt_tse_mac_get_phy+0x384>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
 1828b14:	01000704 	movi	r4,28
 1828b18:	183c5000 	call	183c500 <malloc>
 1828b1c:	e0bff615 	stw	r2,-40(fp)
            if(!pphy) {
 1828b20:	e0bff617 	ldw	r2,-40(fp)
 1828b24:	1000091e 	bne	r2,zero,1828b4c <alt_tse_mac_get_phy+0xdc>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
 1828b28:	e0bffb07 	ldb	r2,-20(fp)
 1828b2c:	e0fff407 	ldb	r3,-48(fp)
 1828b30:	180d883a 	mov	r6,r3
 1828b34:	100b883a 	mov	r5,r2
 1828b38:	01006134 	movhi	r4,388
 1828b3c:	2107d904 	addi	r4,r4,8036
 1828b40:	1800b240 	call	1800b24 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 1828b44:	00bfffc4 	movi	r2,-1
 1828b48:	0000cd06 	br	1828e80 <alt_tse_mac_get_phy+0x410>
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
 1828b4c:	e0bff617 	ldw	r2,-40(fp)
 1828b50:	e0fff003 	ldbu	r3,-64(fp)
 1828b54:	10c00005 	stb	r3,0(r2)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 1828b58:	e0bffc17 	ldw	r2,-16(fp)
 1828b5c:	100691ba 	slli	r3,r2,6
 1828b60:	e0bff517 	ldw	r2,-44(fp)
 1828b64:	1005d2ba 	srai	r2,r2,10
 1828b68:	10800fcc 	andi	r2,r2,63
 1828b6c:	1884b03a 	or	r2,r3,r2
 1828b70:	e0bffd15 	stw	r2,-12(fp)
            model_number = (phyid2 >> 4) & 0x3f;
 1828b74:	e0bff517 	ldw	r2,-44(fp)
 1828b78:	1005d13a 	srai	r2,r2,4
 1828b7c:	10800fcc 	andi	r2,r2,63
 1828b80:	e0bffe05 	stb	r2,-8(fp)
            revision_number = phyid2 & 0x0f;
 1828b84:	e0bff517 	ldw	r2,-44(fp)
 1828b88:	108003cc 	andi	r2,r2,15
 1828b8c:	e0bffe45 	stb	r2,-7(fp)
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
 1828b90:	e03ff205 	stb	zero,-56(fp)
            for(i = 0; i < phy_profile_count; i++) {
 1828b94:	e03ff115 	stw	zero,-60(fp)
 1828b98:	00003406 	br	1828c6c <alt_tse_mac_get_phy+0x1fc>
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 1828b9c:	00806134 	movhi	r2,388
 1828ba0:	109eda04 	addi	r2,r2,31592
 1828ba4:	e0fff117 	ldw	r3,-60(fp)
 1828ba8:	18c7883a 	add	r3,r3,r3
 1828bac:	18c7883a 	add	r3,r3,r3
 1828bb0:	10c5883a 	add	r2,r2,r3
 1828bb4:	10800017 	ldw	r2,0(r2)
 1828bb8:	10c01417 	ldw	r3,80(r2)
 1828bbc:	e0bffd17 	ldw	r2,-12(fp)
 1828bc0:	1880271e 	bne	r3,r2,1828c60 <alt_tse_mac_get_phy+0x1f0>
 1828bc4:	00806134 	movhi	r2,388
 1828bc8:	109eda04 	addi	r2,r2,31592
 1828bcc:	e0fff117 	ldw	r3,-60(fp)
 1828bd0:	18c7883a 	add	r3,r3,r3
 1828bd4:	18c7883a 	add	r3,r3,r3
 1828bd8:	10c5883a 	add	r2,r2,r3
 1828bdc:	10800017 	ldw	r2,0(r2)
 1828be0:	10801503 	ldbu	r2,84(r2)
 1828be4:	10c03fcc 	andi	r3,r2,255
 1828be8:	e0bffe03 	ldbu	r2,-8(fp)
 1828bec:	18801c1e 	bne	r3,r2,1828c60 <alt_tse_mac_get_phy+0x1f0>
                {
                    pphy->pphy_profile = pphy_profiles[i];
 1828bf0:	00806134 	movhi	r2,388
 1828bf4:	109eda04 	addi	r2,r2,31592
 1828bf8:	e0fff117 	ldw	r3,-60(fp)
 1828bfc:	18c7883a 	add	r3,r3,r3
 1828c00:	18c7883a 	add	r3,r3,r3
 1828c04:	10c5883a 	add	r2,r2,r3
 1828c08:	10c00017 	ldw	r3,0(r2)
 1828c0c:	e0bff617 	ldw	r2,-40(fp)
 1828c10:	10c00515 	stw	r3,20(r2)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
 1828c14:	00806134 	movhi	r2,388
 1828c18:	109eda04 	addi	r2,r2,31592
 1828c1c:	e0fff117 	ldw	r3,-60(fp)
 1828c20:	18c7883a 	add	r3,r3,r3
 1828c24:	18c7883a 	add	r3,r3,r3
 1828c28:	10c5883a 	add	r2,r2,r3
 1828c2c:	10800017 	ldw	r2,0(r2)
 1828c30:	1009883a 	mov	r4,r2
 1828c34:	e0bff003 	ldbu	r2,-64(fp)
 1828c38:	e0fffb07 	ldb	r3,-20(fp)
 1828c3c:	180f883a 	mov	r7,r3
 1828c40:	100d883a 	mov	r6,r2
 1828c44:	200b883a 	mov	r5,r4
 1828c48:	01006134 	movhi	r4,388
 1828c4c:	2107e804 	addi	r4,r4,8096
 1828c50:	1800b240 	call	1800b24 <printf>
                    is_phy_in_profile = 1;
 1828c54:	00800044 	movi	r2,1
 1828c58:	e0bff205 	stb	r2,-56(fp)
                    break;
 1828c5c:	00000706 	br	1828c7c <alt_tse_mac_get_phy+0x20c>
            model_number = (phyid2 >> 4) & 0x3f;
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
 1828c60:	e0bff117 	ldw	r2,-60(fp)
 1828c64:	10800044 	addi	r2,r2,1
 1828c68:	e0bff115 	stw	r2,-60(fp)
 1828c6c:	d0a7fe03 	ldbu	r2,-24584(gp)
 1828c70:	10803fcc 	andi	r2,r2,255
 1828c74:	e0fff117 	ldw	r3,-60(fp)
 1828c78:	18bfc816 	blt	r3,r2,1828b9c <__ram_exceptions_end+0xff8188ac>
                    is_phy_in_profile = 1;
                    break;
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
 1828c7c:	e0bff203 	ldbu	r2,-56(fp)
 1828c80:	10000f1e 	bne	r2,zero,1828cc0 <alt_tse_mac_get_phy+0x250>
                pphy->pphy_profile = 0;
 1828c84:	e0bff617 	ldw	r2,-40(fp)
 1828c88:	10000515 	stw	zero,20(r2)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
 1828c8c:	e0bff003 	ldbu	r2,-64(fp)
 1828c90:	e0fffb07 	ldb	r3,-20(fp)
 1828c94:	180d883a 	mov	r6,r3
 1828c98:	100b883a 	mov	r5,r2
 1828c9c:	01006134 	movhi	r4,388
 1828ca0:	2107f804 	addi	r4,r4,8160
 1828ca4:	1800b240 	call	1800b24 <printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
 1828ca8:	01006134 	movhi	r4,388
 1828cac:	21080904 	addi	r4,r4,8228
 1828cb0:	183c7cc0 	call	183c7cc <puts>
                return_value++;
 1828cb4:	e0bff317 	ldw	r2,-52(fp)
 1828cb8:	10800044 	addi	r2,r2,1
 1828cbc:	e0bff315 	stw	r2,-52(fp)
            }
            
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
 1828cc0:	e0bffd17 	ldw	r2,-12(fp)
 1828cc4:	100b883a 	mov	r5,r2
 1828cc8:	01006134 	movhi	r4,388
 1828ccc:	21081604 	addi	r4,r4,8280
 1828cd0:	1825d540 	call	1825d54 <no_printf>
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
 1828cd4:	e0bffe03 	ldbu	r2,-8(fp)
 1828cd8:	100b883a 	mov	r5,r2
 1828cdc:	01006134 	movhi	r4,388
 1828ce0:	21082104 	addi	r4,r4,8324
 1828ce4:	1825d540 	call	1825d54 <no_printf>
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
 1828ce8:	e0bffe43 	ldbu	r2,-7(fp)
 1828cec:	100b883a 	mov	r5,r2
 1828cf0:	01006134 	movhi	r4,388
 1828cf4:	21082c04 	addi	r4,r4,8368
 1828cf8:	1825d540 	call	1825d54 <no_printf>
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
 1828cfc:	e17ff617 	ldw	r5,-40(fp)
 1828d00:	e13fff17 	ldw	r4,-4(fp)
 1828d04:	1828e940 	call	1828e94 <alt_tse_mac_associate_phy>
 1828d08:	1000341e 	bne	r2,zero,1828ddc <alt_tse_mac_get_phy+0x36c>
            	
            	pmac_info = pphy->pmac_info;
 1828d0c:	e0bff617 	ldw	r2,-40(fp)
 1828d10:	10800617 	ldw	r2,24(r2)
 1828d14:	e0bff715 	stw	r2,-36(fp)
            	psys = pmac_info->psys_info;
 1828d18:	e0bff717 	ldw	r2,-36(fp)
 1828d1c:	10800217 	ldw	r2,8(r2)
 1828d20:	e0bff815 	stw	r2,-32(fp)
            	
            	/* Disable PHY loopback to allow Auto-Negotiation completed */
    	        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 1828d24:	d8000015 	stw	zero,0(sp)
 1828d28:	01c00044 	movi	r7,1
 1828d2c:	01800384 	movi	r6,14
 1828d30:	000b883a 	mov	r5,zero
 1828d34:	e13ff617 	ldw	r4,-40(fp)
 1828d38:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
				
				/* Reset auto-negotiation advertisement */
				alt_tse_phy_set_adv_1000(pphy, 1);
 1828d3c:	01400044 	movi	r5,1
 1828d40:	e13ff617 	ldw	r4,-40(fp)
 1828d44:	1829bcc0 	call	1829bcc <alt_tse_phy_set_adv_1000>
				alt_tse_phy_set_adv_100(pphy, 1);
 1828d48:	01400044 	movi	r5,1
 1828d4c:	e13ff617 	ldw	r4,-40(fp)
 1828d50:	1829d900 	call	1829d90 <alt_tse_phy_set_adv_100>
				alt_tse_phy_set_adv_10(pphy, 1);
 1828d54:	01400044 	movi	r5,1
 1828d58:	e13ff617 	ldw	r4,-40(fp)
 1828d5c:	1829fe40 	call	1829fe4 <alt_tse_phy_set_adv_10>
            	            	
	            /* check link connection for this PHY */
	            alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
 1828d60:	017e0034 	movhi	r5,63488
 1828d64:	e13ff617 	ldw	r4,-40(fp)
 1828d68:	182931c0 	call	182931c <alt_tse_phy_restart_an>
	            
	            /* Perform additional setting if there is any */
	            /* Profile specific */
	            if(pphy->pphy_profile) {
 1828d6c:	e0bff617 	ldw	r2,-40(fp)
 1828d70:	10800517 	ldw	r2,20(r2)
 1828d74:	10000f26 	beq	r2,zero,1828db4 <alt_tse_mac_get_phy+0x344>
		            if(pphy->pphy_profile->phy_cfg) {
 1828d78:	e0bff617 	ldw	r2,-40(fp)
 1828d7c:	10800517 	ldw	r2,20(r2)
 1828d80:	10801717 	ldw	r2,92(r2)
 1828d84:	10000b26 	beq	r2,zero,1828db4 <alt_tse_mac_get_phy+0x344>
		                tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
 1828d88:	e0bff617 	ldw	r2,-40(fp)
 1828d8c:	10800517 	ldw	r2,20(r2)
 1828d90:	100b883a 	mov	r5,r2
 1828d94:	01006134 	movhi	r4,388
 1828d98:	21083704 	addi	r4,r4,8412
 1828d9c:	1825d540 	call	1825d54 <no_printf>
		                pphy->pphy_profile->phy_cfg(pmac_group_base);
 1828da0:	e0bff617 	ldw	r2,-40(fp)
 1828da4:	10800517 	ldw	r2,20(r2)
 1828da8:	10801717 	ldw	r2,92(r2)
 1828dac:	e13ff917 	ldw	r4,-28(fp)
 1828db0:	103ee83a 	callr	r2
		            }
	            }
	            
	            /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
	            /* Individual PHY specific */
            	if(psys->tse_phy_cfg) {
 1828db4:	e0bff817 	ldw	r2,-32(fp)
 1828db8:	10801117 	ldw	r2,68(r2)
 1828dbc:	10000726 	beq	r2,zero,1828ddc <alt_tse_mac_get_phy+0x36c>
            		tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
 1828dc0:	01006134 	movhi	r4,388
 1828dc4:	21084504 	addi	r4,r4,8468
 1828dc8:	1825d540 	call	1825d54 <no_printf>
            		psys->tse_phy_cfg(pmac_group_base);
 1828dcc:	e0bff817 	ldw	r2,-32(fp)
 1828dd0:	10801117 	ldw	r2,68(r2)
 1828dd4:	e13ff917 	ldw	r4,-28(fp)
 1828dd8:	103ee83a 	callr	r2
            	}
            }
            
            tse_dprintf(6, "\n");
 1828ddc:	01006134 	movhi	r4,388
 1828de0:	21085304 	addi	r4,r4,8524
 1828de4:	1825d540 	call	1825d54 <no_printf>
	            
            phy_info_count++;
 1828de8:	e0bff403 	ldbu	r2,-48(fp)
 1828dec:	10800044 	addi	r2,r2,1
 1828df0:	e0bff405 	stb	r2,-48(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x01; phyadd < 0x20; phyadd++)
 1828df4:	e0bff003 	ldbu	r2,-64(fp)
 1828df8:	10800044 	addi	r2,r2,1
 1828dfc:	e0bff005 	stb	r2,-64(fp)
 1828e00:	e0bff003 	ldbu	r2,-64(fp)
 1828e04:	10800830 	cmpltui	r2,r2,32
 1828e08:	103f331e 	bne	r2,zero,1828ad8 <__ram_exceptions_end+0xff8187e8>
            phy_info_count++;
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
 1828e0c:	e0bfff17 	ldw	r2,-4(fp)
 1828e10:	10800003 	ldbu	r2,0(r2)
 1828e14:	10c03fcc 	andi	r3,r2,255
 1828e18:	e0bff407 	ldb	r2,-48(fp)
 1828e1c:	18801326 	beq	r3,r2,1828e6c <alt_tse_mac_get_phy+0x3fc>
        if(phy_info_count == 0) {
 1828e20:	e0bff407 	ldb	r2,-48(fp)
 1828e24:	1000061e 	bne	r2,zero,1828e40 <alt_tse_mac_get_phy+0x3d0>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
 1828e28:	e0bffb07 	ldb	r2,-20(fp)
 1828e2c:	100b883a 	mov	r5,r2
 1828e30:	01006134 	movhi	r4,388
 1828e34:	21085404 	addi	r4,r4,8528
 1828e38:	1800b240 	call	1800b24 <printf>
 1828e3c:	00000b06 	br	1828e6c <alt_tse_mac_get_phy+0x3fc>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
 1828e40:	e0fffb07 	ldb	r3,-20(fp)
 1828e44:	e13ff407 	ldb	r4,-48(fp)
 1828e48:	e0bfff17 	ldw	r2,-4(fp)
 1828e4c:	10800003 	ldbu	r2,0(r2)
 1828e50:	10803fcc 	andi	r2,r2,255
 1828e54:	100f883a 	mov	r7,r2
 1828e58:	200d883a 	mov	r6,r4
 1828e5c:	180b883a 	mov	r5,r3
 1828e60:	01006134 	movhi	r4,388
 1828e64:	21086004 	addi	r4,r4,8576
 1828e68:	1800b240 	call	1800b24 <printf>
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 1828e6c:	e0bff917 	ldw	r2,-28(fp)
 1828e70:	10801004 	addi	r2,r2,64
 1828e74:	e0fffa17 	ldw	r3,-24(fp)
 1828e78:	10c00035 	stwio	r3,0(r2)
    
    return return_value;
 1828e7c:	e0bff317 	ldw	r2,-52(fp)
}
 1828e80:	e037883a 	mov	sp,fp
 1828e84:	dfc00117 	ldw	ra,4(sp)
 1828e88:	df000017 	ldw	fp,0(sp)
 1828e8c:	dec00204 	addi	sp,sp,8
 1828e90:	f800283a 	ret

01828e94 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
 1828e94:	defff604 	addi	sp,sp,-40
 1828e98:	dfc00915 	stw	ra,36(sp)
 1828e9c:	df000815 	stw	fp,32(sp)
 1828ea0:	df000804 	addi	fp,sp,32
 1828ea4:	e13ffe15 	stw	r4,-8(fp)
 1828ea8:	e17fff15 	stw	r5,-4(fp)
    
	alt_32 i;
	alt_32 return_value = TSE_PHY_MAP_SUCCESS;
 1828eac:	e03ff915 	stw	zero,-28(fp)
    
	alt_u8 is_mapped;

    alt_tse_system_info *psys = 0;
 1828eb0:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_mac_info *pmac_info = 0;
 1828eb4:	e03ffc15 	stw	zero,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 1828eb8:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 1828ebc:	e13ffe17 	ldw	r4,-8(fp)
 1828ec0:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 1828ec4:	e0bffd45 	stb	r2,-11(fp)
    alt_8 sys_info_index = 0;
 1828ec8:	e03ffd85 	stb	zero,-10(fp)
    
    is_mapped = 0;
 1828ecc:	e03ffa05 	stb	zero,-24(fp)
    
    for(i = 0; i < pmac_group->channel; i++) {
 1828ed0:	e03ff815 	stw	zero,-32(fp)
 1828ed4:	00002c06 	br	1828f88 <alt_tse_mac_associate_phy+0xf4>
        pmac_info = pmac_group->pmac_info[i];
 1828ed8:	e0fffe17 	ldw	r3,-8(fp)
 1828edc:	e0bff817 	ldw	r2,-32(fp)
 1828ee0:	10800044 	addi	r2,r2,1
 1828ee4:	1085883a 	add	r2,r2,r2
 1828ee8:	1085883a 	add	r2,r2,r2
 1828eec:	1885883a 	add	r2,r3,r2
 1828ef0:	10800017 	ldw	r2,0(r2)
 1828ef4:	e0bffc15 	stw	r2,-16(fp)
        psys = pmac_info->psys_info;
 1828ef8:	e0bffc17 	ldw	r2,-16(fp)
 1828efc:	10800217 	ldw	r2,8(r2)
 1828f00:	e0bffb15 	stw	r2,-20(fp)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
 1828f04:	e0bffb17 	ldw	r2,-20(fp)
 1828f08:	10c01017 	ldw	r3,64(r2)
 1828f0c:	e0bfff17 	ldw	r2,-4(fp)
 1828f10:	10800003 	ldbu	r2,0(r2)
 1828f14:	10803fcc 	andi	r2,r2,255
 1828f18:	1880181e 	bne	r3,r2,1828f7c <alt_tse_mac_associate_phy+0xe8>
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 1828f1c:	e13ffc17 	ldw	r4,-16(fp)
 1828f20:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 1828f24:	e0bffd05 	stb	r2,-12(fp)
	        sys_info_index = alt_tse_get_system_index(psys);
 1828f28:	e13ffb17 	ldw	r4,-20(fp)
 1828f2c:	1826e6c0 	call	1826e6c <alt_tse_get_system_index>
 1828f30:	e0bffd85 	stb	r2,-10(fp)
	        
            pmac_info->pphy_info = pphy;
 1828f34:	e0bffc17 	ldw	r2,-16(fp)
 1828f38:	e0ffff17 	ldw	r3,-4(fp)
 1828f3c:	10c00115 	stw	r3,4(r2)
            pphy->pmac_info = pmac_info;
 1828f40:	e0bfff17 	ldw	r2,-4(fp)
 1828f44:	e0fffc17 	ldw	r3,-16(fp)
 1828f48:	10c00615 	stw	r3,24(r2)
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 1828f4c:	e0bffd47 	ldb	r2,-11(fp)
 1828f50:	e0fffd07 	ldb	r3,-12(fp)
 1828f54:	e13ffd87 	ldb	r4,-10(fp)
 1828f58:	200f883a 	mov	r7,r4
 1828f5c:	180d883a 	mov	r6,r3
 1828f60:	100b883a 	mov	r5,r2
 1828f64:	01006134 	movhi	r4,388
 1828f68:	21087f04 	addi	r4,r4,8700
 1828f6c:	1800b240 	call	1800b24 <printf>
            is_mapped = 1;
 1828f70:	00800044 	movi	r2,1
 1828f74:	e0bffa05 	stb	r2,-24(fp)
            break;
 1828f78:	00000806 	br	1828f9c <alt_tse_mac_associate_phy+0x108>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
 1828f7c:	e0bff817 	ldw	r2,-32(fp)
 1828f80:	10800044 	addi	r2,r2,1
 1828f84:	e0bff815 	stw	r2,-32(fp)
 1828f88:	e0bffe17 	ldw	r2,-8(fp)
 1828f8c:	10800003 	ldbu	r2,0(r2)
 1828f90:	10803fcc 	andi	r2,r2,255
 1828f94:	e0fff817 	ldw	r3,-32(fp)
 1828f98:	18bfcf16 	blt	r3,r2,1828ed8 <__ram_exceptions_end+0xff818be8>
            break;
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
 1828f9c:	e0bffa03 	ldbu	r2,-24(fp)
 1828fa0:	10003d1e 	bne	r2,zero,1829098 <alt_tse_mac_associate_phy+0x204>
        for(i = 0; i < pmac_group->channel; i++) {
 1828fa4:	e03ff815 	stw	zero,-32(fp)
 1828fa8:	00003606 	br	1829084 <alt_tse_mac_associate_phy+0x1f0>
            pmac_info = pmac_group->pmac_info[i];
 1828fac:	e0fffe17 	ldw	r3,-8(fp)
 1828fb0:	e0bff817 	ldw	r2,-32(fp)
 1828fb4:	10800044 	addi	r2,r2,1
 1828fb8:	1085883a 	add	r2,r2,r2
 1828fbc:	1085883a 	add	r2,r2,r2
 1828fc0:	1885883a 	add	r2,r3,r2
 1828fc4:	10800017 	ldw	r2,0(r2)
 1828fc8:	e0bffc15 	stw	r2,-16(fp)
            psys = pmac_info->psys_info;
 1828fcc:	e0bffc17 	ldw	r2,-16(fp)
 1828fd0:	10800217 	ldw	r2,8(r2)
 1828fd4:	e0bffb15 	stw	r2,-20(fp)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
 1828fd8:	e0bffb17 	ldw	r2,-20(fp)
 1828fdc:	10800517 	ldw	r2,20(r2)
 1828fe0:	10002426 	beq	r2,zero,1829074 <alt_tse_mac_associate_phy+0x1e0>
 1828fe4:	e0bffb17 	ldw	r2,-20(fp)
 1828fe8:	10800617 	ldw	r2,24(r2)
 1828fec:	10002126 	beq	r2,zero,1829074 <alt_tse_mac_associate_phy+0x1e0>
            	continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
 1828ff0:	e0bffb17 	ldw	r2,-20(fp)
 1828ff4:	10801017 	ldw	r2,64(r2)
 1828ff8:	10bfffd8 	cmpnei	r2,r2,-1
 1828ffc:	10001e1e 	bne	r2,zero,1829078 <alt_tse_mac_associate_phy+0x1e4>
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 1829000:	e13ffc17 	ldw	r4,-16(fp)
 1829004:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 1829008:	e0bffd05 	stb	r2,-12(fp)
                sys_info_index = alt_tse_get_system_index(psys);
 182900c:	e13ffb17 	ldw	r4,-20(fp)
 1829010:	1826e6c0 	call	1826e6c <alt_tse_get_system_index>
 1829014:	e0bffd85 	stb	r2,-10(fp)
                
                pmac_info->pphy_info = pphy;
 1829018:	e0bffc17 	ldw	r2,-16(fp)
 182901c:	e0ffff17 	ldw	r3,-4(fp)
 1829020:	10c00115 	stw	r3,4(r2)
                pphy->pmac_info = pmac_info;
 1829024:	e0bfff17 	ldw	r2,-4(fp)
 1829028:	e0fffc17 	ldw	r3,-16(fp)
 182902c:	10c00615 	stw	r3,24(r2)
                psys->tse_phy_mdio_address = pphy->mdio_address;
 1829030:	e0bfff17 	ldw	r2,-4(fp)
 1829034:	10800003 	ldbu	r2,0(r2)
 1829038:	10c03fcc 	andi	r3,r2,255
 182903c:	e0bffb17 	ldw	r2,-20(fp)
 1829040:	10c01015 	stw	r3,64(r2)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 1829044:	e0bffd47 	ldb	r2,-11(fp)
 1829048:	e0fffd07 	ldb	r3,-12(fp)
 182904c:	e13ffd87 	ldb	r4,-10(fp)
 1829050:	200f883a 	mov	r7,r4
 1829054:	180d883a 	mov	r6,r3
 1829058:	100b883a 	mov	r5,r2
 182905c:	01006134 	movhi	r4,388
 1829060:	21088f04 	addi	r4,r4,8764
 1829064:	1800b240 	call	1800b24 <printf>
                is_mapped = 1;
 1829068:	00800044 	movi	r2,1
 182906c:	e0bffa05 	stb	r2,-24(fp)
                break;
 1829070:	00000906 	br	1829098 <alt_tse_mac_associate_phy+0x204>
            pmac_info = pmac_group->pmac_info[i];
            psys = pmac_info->psys_info;
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
            	continue;
 1829074:	0001883a 	nop
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
        for(i = 0; i < pmac_group->channel; i++) {
 1829078:	e0bff817 	ldw	r2,-32(fp)
 182907c:	10800044 	addi	r2,r2,1
 1829080:	e0bff815 	stw	r2,-32(fp)
 1829084:	e0bffe17 	ldw	r2,-8(fp)
 1829088:	10800003 	ldbu	r2,0(r2)
 182908c:	10803fcc 	andi	r2,r2,255
 1829090:	e0fff817 	ldw	r3,-32(fp)
 1829094:	18bfc516 	blt	r3,r2,1828fac <__ram_exceptions_end+0xff818cbc>
            }
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
 1829098:	e0bffa03 	ldbu	r2,-24(fp)
 182909c:	1000091e 	bne	r2,zero,18290c4 <alt_tse_mac_associate_phy+0x230>
    	pphy->pmac_info = 0;
 18290a0:	e0bfff17 	ldw	r2,-4(fp)
 18290a4:	10000615 	stw	zero,24(r2)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
 18290a8:	e0bffd47 	ldb	r2,-11(fp)
 18290ac:	100b883a 	mov	r5,r2
 18290b0:	01006134 	movhi	r4,388
 18290b4:	2108a004 	addi	r4,r4,8832
 18290b8:	1800b240 	call	1800b24 <printf>
        return_value = TSE_PHY_MAP_ERROR;
 18290bc:	00bfffc4 	movi	r2,-1
 18290c0:	e0bff915 	stw	r2,-28(fp)
    }
    
    return return_value;
 18290c4:	e0bff917 	ldw	r2,-28(fp)
}
 18290c8:	e037883a 	mov	sp,fp
 18290cc:	dfc00117 	ldw	ra,4(sp)
 18290d0:	df000017 	ldw	fp,0(sp)
 18290d4:	dec00204 	addi	sp,sp,8
 18290d8:	f800283a 	ret

018290dc <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
 18290dc:	defff804 	addi	sp,sp,-32
 18290e0:	dfc00715 	stw	ra,28(sp)
 18290e4:	df000615 	stw	fp,24(sp)
 18290e8:	df000604 	addi	fp,sp,24
 18290ec:	e13fff15 	stw	r4,-4(fp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
 18290f0:	e0bfff17 	ldw	r2,-4(fp)
 18290f4:	10800217 	ldw	r2,8(r2)
 18290f8:	e0bffa15 	stw	r2,-24(fp)
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
 18290fc:	e0bffa17 	ldw	r2,-24(fp)
 1829100:	10800017 	ldw	r2,0(r2)
 1829104:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 1829108:	e0bfff17 	ldw	r2,-4(fp)
 182910c:	10800317 	ldw	r2,12(r2)
 1829110:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 1829114:	e13fff17 	ldw	r4,-4(fp)
 1829118:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 182911c:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 1829120:	e13ffc17 	ldw	r4,-16(fp)
 1829124:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 1829128:	e0bffd45 	stb	r2,-11(fp)

    if(psys->tse_pcs_ena) {
 182912c:	e0bffa17 	ldw	r2,-24(fp)
 1829130:	108003c3 	ldbu	r2,15(r2)
 1829134:	10803fcc 	andi	r2,r2,255
 1829138:	10002c26 	beq	r2,zero,18291ec <alt_tse_phy_cfg_pcs+0x110>
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 182913c:	e0bffd47 	ldb	r2,-11(fp)
 1829140:	e0fffd07 	ldb	r3,-12(fp)
 1829144:	180d883a 	mov	r6,r3
 1829148:	100b883a 	mov	r5,r2
 182914c:	01006134 	movhi	r4,388
 1829150:	2108d104 	addi	r4,r4,9028
 1829154:	1800b240 	call	1800b24 <printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
 1829158:	e0bffb17 	ldw	r2,-20(fp)
 182915c:	10808004 	addi	r2,r2,512
 1829160:	10801404 	addi	r2,r2,80
 1829164:	10800037 	ldwio	r2,0(r2)
 1829168:	e0bffe15 	stw	r2,-8(fp)
        
        if(psys->tse_pcs_sgmii) {
 182916c:	e0bffa17 	ldw	r2,-24(fp)
 1829170:	10800403 	ldbu	r2,16(r2)
 1829174:	10803fcc 	andi	r2,r2,255
 1829178:	10000e26 	beq	r2,zero,18291b4 <alt_tse_phy_cfg_pcs+0xd8>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
 182917c:	e0bffd47 	ldb	r2,-11(fp)
 1829180:	e0fffd07 	ldb	r3,-12(fp)
 1829184:	180d883a 	mov	r6,r3
 1829188:	100b883a 	mov	r5,r2
 182918c:	01006134 	movhi	r4,388
 1829190:	2108df04 	addi	r4,r4,9084
 1829194:	1800b240 	call	1800b24 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
 1829198:	e0bffb17 	ldw	r2,-20(fp)
 182919c:	10808004 	addi	r2,r2,512
 18291a0:	10801404 	addi	r2,r2,80
 18291a4:	e0fffe17 	ldw	r3,-8(fp)
 18291a8:	18c000d4 	ori	r3,r3,3
 18291ac:	10c00035 	stwio	r3,0(r2)
 18291b0:	00000e06 	br	18291ec <alt_tse_phy_cfg_pcs+0x110>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
 18291b4:	e0bffd47 	ldb	r2,-11(fp)
 18291b8:	e0fffd07 	ldb	r3,-12(fp)
 18291bc:	180d883a 	mov	r6,r3
 18291c0:	100b883a 	mov	r5,r2
 18291c4:	01006134 	movhi	r4,388
 18291c8:	2108eb04 	addi	r4,r4,9132
 18291cc:	1800b240 	call	1800b24 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
 18291d0:	e0bffb17 	ldw	r2,-20(fp)
 18291d4:	10808004 	addi	r2,r2,512
 18291d8:	10801404 	addi	r2,r2,80
 18291dc:	e13ffe17 	ldw	r4,-8(fp)
 18291e0:	00ffff04 	movi	r3,-4
 18291e4:	20c6703a 	and	r3,r4,r3
 18291e8:	10c00035 	stwio	r3,0(r2)
        }
    }
    
    return SUCCESS;
 18291ec:	0005883a 	mov	r2,zero
}
 18291f0:	e037883a 	mov	sp,fp
 18291f4:	dfc00117 	ldw	ra,4(sp)
 18291f8:	df000017 	ldw	fp,0(sp)
 18291fc:	dec00204 	addi	sp,sp,8
 1829200:	f800283a 	ret

01829204 <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
 1829204:	defffb04 	addi	sp,sp,-20
 1829208:	dfc00415 	stw	ra,16(sp)
 182920c:	df000315 	stw	fp,12(sp)
 1829210:	df000304 	addi	fp,sp,12
	alt_8 i = 0;
 1829214:	e03ffd05 	stb	zero,-12(fp)
	alt_8 j = 0;
 1829218:	e03ffd45 	stb	zero,-11(fp)
    
    alt_tse_mac_group *pmac_group = 0;
 182921c:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
 1829220:	e03fff15 	stw	zero,-4(fp)
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
 1829224:	1827f200 	call	1827f20 <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
 1829228:	18281bc0 	call	18281bc <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
 182922c:	18283cc0 	call	18283cc <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 1829230:	e03ffd05 	stb	zero,-12(fp)
 1829234:	00002f06 	br	18292f4 <alt_tse_phy_init+0xf0>
        pmac_group = pmac_groups[i];
 1829238:	e0fffd07 	ldb	r3,-12(fp)
 182923c:	00806134 	movhi	r2,388
 1829240:	109ed204 	addi	r2,r2,31560
 1829244:	18c7883a 	add	r3,r3,r3
 1829248:	18c7883a 	add	r3,r3,r3
 182924c:	10c5883a 	add	r2,r2,r3
 1829250:	10800017 	ldw	r2,0(r2)
 1829254:	e0bffe15 	stw	r2,-8(fp)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
 1829258:	e0bffe17 	ldw	r2,-8(fp)
 182925c:	10800117 	ldw	r2,4(r2)
 1829260:	10800217 	ldw	r2,8(r2)
 1829264:	10800203 	ldbu	r2,8(r2)
 1829268:	10803fcc 	andi	r2,r2,255
 182926c:	10000326 	beq	r2,zero,182927c <alt_tse_phy_init+0x78>
            
        	/* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
 1829270:	e13ffe17 	ldw	r4,-8(fp)
 1829274:	1828a700 	call	1828a70 <alt_tse_mac_get_phy>
 1829278:	00000706 	br	1829298 <alt_tse_phy_init+0x94>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
 182927c:	e0bffd07 	ldb	r2,-12(fp)
 1829280:	e0fffd47 	ldb	r3,-11(fp)
 1829284:	180d883a 	mov	r6,r3
 1829288:	100b883a 	mov	r5,r2
 182928c:	01006134 	movhi	r4,388
 1829290:	2108f704 	addi	r4,r4,9180
 1829294:	1800b240 	call	1800b24 <printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 1829298:	e03ffd45 	stb	zero,-11(fp)
 182929c:	00000d06 	br	18292d4 <alt_tse_phy_init+0xd0>
            pmac_info = pmac_group->pmac_info[j];
 18292a0:	e0bffd47 	ldb	r2,-11(fp)
 18292a4:	e0fffe17 	ldw	r3,-8(fp)
 18292a8:	10800044 	addi	r2,r2,1
 18292ac:	1085883a 	add	r2,r2,r2
 18292b0:	1085883a 	add	r2,r2,r2
 18292b4:	1885883a 	add	r2,r3,r2
 18292b8:	10800017 	ldw	r2,0(r2)
 18292bc:	e0bfff15 	stw	r2,-4(fp)
            
            alt_tse_phy_cfg_pcs(pmac_info);
 18292c0:	e13fff17 	ldw	r4,-4(fp)
 18292c4:	18290dc0 	call	18290dc <alt_tse_phy_cfg_pcs>
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 18292c8:	e0bffd43 	ldbu	r2,-11(fp)
 18292cc:	10800044 	addi	r2,r2,1
 18292d0:	e0bffd45 	stb	r2,-11(fp)
 18292d4:	e0fffd47 	ldb	r3,-11(fp)
 18292d8:	e0bffe17 	ldw	r2,-8(fp)
 18292dc:	10800003 	ldbu	r2,0(r2)
 18292e0:	10803fcc 	andi	r2,r2,255
 18292e4:	18bfee16 	blt	r3,r2,18292a0 <__ram_exceptions_end+0xff818fb0>
    
    alt_tse_mac_group_init();
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 18292e8:	e0bffd03 	ldbu	r2,-12(fp)
 18292ec:	10800044 	addi	r2,r2,1
 18292f0:	e0bffd05 	stb	r2,-12(fp)
 18292f4:	e0fffd07 	ldb	r3,-12(fp)
 18292f8:	d0a7fe43 	ldbu	r2,-24583(gp)
 18292fc:	10803fcc 	andi	r2,r2,255
 1829300:	18bfcd16 	blt	r3,r2,1829238 <__ram_exceptions_end+0xff818f48>
            
            alt_tse_phy_cfg_pcs(pmac_info);
        }
    }
                
    return SUCCESS;
 1829304:	0005883a 	mov	r2,zero
}
 1829308:	e037883a 	mov	sp,fp
 182930c:	dfc00117 	ldw	ra,4(sp)
 1829310:	df000017 	ldw	fp,0(sp)
 1829314:	dec00204 	addi	sp,sp,8
 1829318:	f800283a 	ret

0182931c <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 182931c:	defff704 	addi	sp,sp,-36
 1829320:	dfc00815 	stw	ra,32(sp)
 1829324:	df000715 	stw	fp,28(sp)
 1829328:	df000704 	addi	fp,sp,28
 182932c:	e13ffe15 	stw	r4,-8(fp)
 1829330:	e17fff15 	stw	r5,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 1829334:	e0bffe17 	ldw	r2,-8(fp)
 1829338:	10800617 	ldw	r2,24(r2)
 182933c:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 1829340:	e0bffb17 	ldw	r2,-20(fp)
 1829344:	10800317 	ldw	r2,12(r2)
 1829348:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182934c:	e13ffb17 	ldw	r4,-20(fp)
 1829350:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 1829354:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 1829358:	e13ffc17 	ldw	r4,-16(fp)
 182935c:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 1829360:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 1829364:	e13ffe17 	ldw	r4,-8(fp)
 1829368:	1827c8c0 	call	1827c8c <alt_tse_phy_rd_mdio_addr>
 182936c:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 1829370:	e0bffe17 	ldw	r2,-8(fp)
 1829374:	10800003 	ldbu	r2,0(r2)
 1829378:	10803fcc 	andi	r2,r2,255
 182937c:	100b883a 	mov	r5,r2
 1829380:	e13ffe17 	ldw	r4,-8(fp)
 1829384:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 1829388:	01c00044 	movi	r7,1
 182938c:	018000c4 	movi	r6,3
 1829390:	01400044 	movi	r5,1
 1829394:	e13ffe17 	ldw	r4,-8(fp)
 1829398:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 182939c:	10000d1e 	bne	r2,zero,18293d4 <alt_tse_phy_restart_an+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 18293a0:	e0bffd47 	ldb	r2,-11(fp)
 18293a4:	e0fffd07 	ldb	r3,-12(fp)
 18293a8:	180d883a 	mov	r6,r3
 18293ac:	100b883a 	mov	r5,r2
 18293b0:	01006134 	movhi	r4,388
 18293b4:	21090d04 	addi	r4,r4,9268
 18293b8:	1800b240 	call	1800b24 <printf>
        
		/* Restore previous MDIO address */
		alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 18293bc:	e0bffd83 	ldbu	r2,-10(fp)
 18293c0:	100b883a 	mov	r5,r2
 18293c4:	e13ffe17 	ldw	r4,-8(fp)
 18293c8:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
		
		return TSE_PHY_AN_NOT_CAPABLE;
 18293cc:	00bfff84 	movi	r2,-2
 18293d0:	00003c06 	br	18294c4 <alt_tse_phy_restart_an+0x1a8>
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
 18293d4:	00800044 	movi	r2,1
 18293d8:	d8800015 	stw	r2,0(sp)
 18293dc:	01c00044 	movi	r7,1
 18293e0:	01800304 	movi	r6,12
 18293e4:	000b883a 	mov	r5,zero
 18293e8:	e13ffe17 	ldw	r4,-8(fp)
 18293ec:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
 18293f0:	00800044 	movi	r2,1
 18293f4:	d8800015 	stw	r2,0(sp)
 18293f8:	01c00044 	movi	r7,1
 18293fc:	01800244 	movi	r6,9
 1829400:	000b883a 	mov	r5,zero
 1829404:	e13ffe17 	ldw	r4,-8(fp)
 1829408:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 182940c:	e0bffd47 	ldb	r2,-11(fp)
 1829410:	e0fffd07 	ldb	r3,-12(fp)
 1829414:	180d883a 	mov	r6,r3
 1829418:	100b883a 	mov	r5,r2
 182941c:	01006134 	movhi	r4,388
 1829420:	21091d04 	addi	r4,r4,9332
 1829424:	1800b240 	call	1800b24 <printf>
    
    alt_32 timeout = 0;
 1829428:	e03ffa15 	stw	zero,-24(fp)
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 182942c:	00001306 	br	182947c <alt_tse_phy_restart_an+0x160>
        if(timeout++ > timeout_threshold) {
 1829430:	e0bffa17 	ldw	r2,-24(fp)
 1829434:	10c00044 	addi	r3,r2,1
 1829438:	e0fffa15 	stw	r3,-24(fp)
 182943c:	1007883a 	mov	r3,r2
 1829440:	e0bfff17 	ldw	r2,-4(fp)
 1829444:	10c00d2e 	bgeu	r2,r3,182947c <alt_tse_phy_restart_an+0x160>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
 1829448:	e0bffd47 	ldb	r2,-11(fp)
 182944c:	e0fffd07 	ldb	r3,-12(fp)
 1829450:	180d883a 	mov	r6,r3
 1829454:	100b883a 	mov	r5,r2
 1829458:	01006134 	movhi	r4,388
 182945c:	21092f04 	addi	r4,r4,9404
 1829460:	1800b240 	call	1800b24 <printf>
		   
		   /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 1829464:	e0bffd83 	ldbu	r2,-10(fp)
 1829468:	100b883a 	mov	r5,r2
 182946c:	e13ffe17 	ldw	r4,-8(fp)
 1829470:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
           
		   return TSE_PHY_AN_NOT_COMPLETE;
 1829474:	00bfffc4 	movi	r2,-1
 1829478:	00001206 	br	18294c4 <alt_tse_phy_restart_an+0x1a8>
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
    
    alt_32 timeout = 0;
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 182947c:	01c00044 	movi	r7,1
 1829480:	01800144 	movi	r6,5
 1829484:	01400044 	movi	r5,1
 1829488:	e13ffe17 	ldw	r4,-8(fp)
 182948c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829490:	103fe726 	beq	r2,zero,1829430 <__ram_exceptions_end+0xff819140>
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
           
		   return TSE_PHY_AN_NOT_COMPLETE;
        }
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
 1829494:	e0bffd47 	ldb	r2,-11(fp)
 1829498:	e0fffd07 	ldb	r3,-12(fp)
 182949c:	180d883a 	mov	r6,r3
 18294a0:	100b883a 	mov	r5,r2
 18294a4:	01006134 	movhi	r4,388
 18294a8:	21093b04 	addi	r4,r4,9452
 18294ac:	1800b240 	call	1800b24 <printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 18294b0:	e0bffd83 	ldbu	r2,-10(fp)
 18294b4:	100b883a 	mov	r5,r2
 18294b8:	e13ffe17 	ldw	r4,-8(fp)
 18294bc:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE;
 18294c0:	0005883a 	mov	r2,zero
}
 18294c4:	e037883a 	mov	sp,fp
 18294c8:	dfc00117 	ldw	ra,4(sp)
 18294cc:	df000017 	ldw	fp,0(sp)
 18294d0:	dec00204 	addi	sp,sp,8
 18294d4:	f800283a 	ret

018294d8 <alt_tse_phy_check_link>:
 * @param pphy                  Pointer to the alt_tse_phy_info structure
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 18294d8:	defff904 	addi	sp,sp,-28
 18294dc:	dfc00615 	stw	ra,24(sp)
 18294e0:	df000515 	stw	fp,20(sp)
 18294e4:	df000504 	addi	fp,sp,20
 18294e8:	e13ffe15 	stw	r4,-8(fp)
 18294ec:	e17fff15 	stw	r5,-4(fp)

    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 18294f0:	e0bffe17 	ldw	r2,-8(fp)
 18294f4:	10800617 	ldw	r2,24(r2)
 18294f8:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 18294fc:	e0bffb17 	ldw	r2,-20(fp)
 1829500:	10800317 	ldw	r2,12(r2)
 1829504:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 1829508:	e13ffb17 	ldw	r4,-20(fp)
 182950c:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 1829510:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
 1829514:	e13ffc17 	ldw	r4,-16(fp)
 1829518:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 182951c:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 1829520:	e13ffe17 	ldw	r4,-8(fp)
 1829524:	1827c8c0 	call	1827c8c <alt_tse_phy_rd_mdio_addr>
 1829528:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182952c:	e0bffe17 	ldw	r2,-8(fp)
 1829530:	10800003 	ldbu	r2,0(r2)
 1829534:	10803fcc 	andi	r2,r2,255
 1829538:	100b883a 	mov	r5,r2
 182953c:	e13ffe17 	ldw	r4,-8(fp)
 1829540:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 1829544:	e0bffd47 	ldb	r2,-11(fp)
 1829548:	e0fffd07 	ldb	r3,-12(fp)
 182954c:	180d883a 	mov	r6,r3
 1829550:	100b883a 	mov	r5,r2
 1829554:	01006134 	movhi	r4,388
 1829558:	21094704 	addi	r4,r4,9500
 182955c:	1800b240 	call	1800b24 <printf>
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 1829560:	01c00044 	movi	r7,1
 1829564:	01800384 	movi	r6,14
 1829568:	000b883a 	mov	r5,zero
 182956c:	e13ffe17 	ldw	r4,-8(fp)
 1829570:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829574:	1000061e 	bne	r2,zero,1829590 <alt_tse_phy_check_link+0xb8>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
 1829578:	01c00044 	movi	r7,1
 182957c:	01800144 	movi	r6,5
 1829580:	01400044 	movi	r5,1
 1829584:	e13ffe17 	ldw	r4,-8(fp)
 1829588:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 182958c:	1000191e 	bne	r2,zero,18295f4 <alt_tse_phy_check_link+0x11c>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
        
        tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
 1829590:	e0bffd47 	ldb	r2,-11(fp)
 1829594:	e0fffd07 	ldb	r3,-12(fp)
 1829598:	180d883a 	mov	r6,r3
 182959c:	100b883a 	mov	r5,r2
 18295a0:	01006134 	movhi	r4,388
 18295a4:	21095204 	addi	r4,r4,9544
 18295a8:	1800b240 	call	1800b24 <printf>
        /* restart Auto-Negotiation */
        /* if Auto-Negotiation still cannot complete, then go to next PHY */
        if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE) {
 18295ac:	e17fff17 	ldw	r5,-4(fp)
 18295b0:	e13ffe17 	ldw	r4,-8(fp)
 18295b4:	182931c0 	call	182931c <alt_tse_phy_restart_an>
 18295b8:	10bfffd8 	cmpnei	r2,r2,-1
 18295bc:	10000d1e 	bne	r2,zero,18295f4 <alt_tse_phy_check_link+0x11c>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
 18295c0:	e0bffd47 	ldb	r2,-11(fp)
 18295c4:	e0fffd07 	ldb	r3,-12(fp)
 18295c8:	180d883a 	mov	r6,r3
 18295cc:	100b883a 	mov	r5,r2
 18295d0:	01006134 	movhi	r4,388
 18295d4:	21096604 	addi	r4,r4,9624
 18295d8:	1800b240 	call	1800b24 <printf>
			
			/* Restore previous MDIO address */
			alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 18295dc:	e0bffd83 	ldbu	r2,-10(fp)
 18295e0:	100b883a 	mov	r5,r2
 18295e4:	e13ffe17 	ldw	r4,-8(fp)
 18295e8:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
	
            return TSE_PHY_AN_NOT_COMPLETE;
 18295ec:	00bfffc4 	movi	r2,-1
 18295f0:	00000c06 	br	1829624 <alt_tse_phy_check_link+0x14c>
        }            
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
 18295f4:	e0bffd47 	ldb	r2,-11(fp)
 18295f8:	e0fffd07 	ldb	r3,-12(fp)
 18295fc:	180d883a 	mov	r6,r3
 1829600:	100b883a 	mov	r5,r2
 1829604:	01006134 	movhi	r4,388
 1829608:	21097304 	addi	r4,r4,9676
 182960c:	1800b240 	call	1800b24 <printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 1829610:	e0bffd83 	ldbu	r2,-10(fp)
 1829614:	100b883a 	mov	r5,r2
 1829618:	e13ffe17 	ldw	r4,-8(fp)
 182961c:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE; 
 1829620:	0005883a 	mov	r2,zero
}
 1829624:	e037883a 	mov	sp,fp
 1829628:	dfc00117 	ldw	ra,4(sp)
 182962c:	df000017 	ldw	fp,0(sp)
 1829630:	dec00204 	addi	sp,sp,8
 1829634:	f800283a 	ret

01829638 <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
 1829638:	defff904 	addi	sp,sp,-28
 182963c:	dfc00615 	stw	ra,24(sp)
 1829640:	df000515 	stw	fp,20(sp)
 1829644:	df000504 	addi	fp,sp,20
 1829648:	e13fff15 	stw	r4,-4(fp)
	alt_32 return_value = TSE_PHY_AN_COMPLETE;
 182964c:	e03ffb15 	stw	zero,-20(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 1829650:	e0bfff17 	ldw	r2,-4(fp)
 1829654:	10800617 	ldw	r2,24(r2)
 1829658:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 182965c:	e0bffc17 	ldw	r2,-16(fp)
 1829660:	10800317 	ldw	r2,12(r2)
 1829664:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 1829668:	e13ffc17 	ldw	r4,-16(fp)
 182966c:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 1829670:	e0bffe05 	stb	r2,-8(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
 1829674:	e13ffd17 	ldw	r4,-12(fp)
 1829678:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 182967c:	e0bffe45 	stb	r2,-7(fp)
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 1829680:	e13fff17 	ldw	r4,-4(fp)
 1829684:	1827c8c0 	call	1827c8c <alt_tse_phy_rd_mdio_addr>
 1829688:	e0bffe85 	stb	r2,-6(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182968c:	e0bfff17 	ldw	r2,-4(fp)
 1829690:	10800003 	ldbu	r2,0(r2)
 1829694:	10803fcc 	andi	r2,r2,255
 1829698:	100b883a 	mov	r5,r2
 182969c:	e13fff17 	ldw	r4,-4(fp)
 18296a0:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 18296a4:	01c00044 	movi	r7,1
 18296a8:	018000c4 	movi	r6,3
 18296ac:	01400044 	movi	r5,1
 18296b0:	e13fff17 	ldw	r4,-4(fp)
 18296b4:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 18296b8:	10000d1e 	bne	r2,zero,18296f0 <alt_tse_phy_get_cap+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 18296bc:	e0bffe47 	ldb	r2,-7(fp)
 18296c0:	e0fffe07 	ldb	r3,-8(fp)
 18296c4:	180d883a 	mov	r6,r3
 18296c8:	100b883a 	mov	r5,r2
 18296cc:	01006134 	movhi	r4,388
 18296d0:	21090d04 	addi	r4,r4,9268
 18296d4:	1800b240 	call	1800b24 <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 18296d8:	e0bffe83 	ldbu	r2,-6(fp)
 18296dc:	100b883a 	mov	r5,r2
 18296e0:	e13fff17 	ldw	r4,-4(fp)
 18296e4:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
 18296e8:	00bfff84 	movi	r2,-2
 18296ec:	00013206 	br	1829bb8 <alt_tse_phy_get_cap+0x580>
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 18296f0:	017e0034 	movhi	r5,63488
 18296f4:	e13fff17 	ldw	r4,-4(fp)
 18296f8:	182931c0 	call	182931c <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
 18296fc:	01c00044 	movi	r7,1
 1829700:	01800144 	movi	r6,5
 1829704:	01400044 	movi	r5,1
 1829708:	e13fff17 	ldw	r4,-4(fp)
 182970c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829710:	1000021e 	bne	r2,zero,182971c <alt_tse_phy_get_cap+0xe4>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
 1829714:	00bfffc4 	movi	r2,-1
 1829718:	e0bffb15 	stw	r2,-20(fp)
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
 182971c:	01c00044 	movi	r7,1
 1829720:	018003c4 	movi	r6,15
 1829724:	014003c4 	movi	r5,15
 1829728:	e13fff17 	ldw	r4,-4(fp)
 182972c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829730:	1007883a 	mov	r3,r2
 1829734:	e0bfff17 	ldw	r2,-4(fp)
 1829738:	10c00045 	stb	r3,1(r2)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
 182973c:	01c00044 	movi	r7,1
 1829740:	01800384 	movi	r6,14
 1829744:	014003c4 	movi	r5,15
 1829748:	e13fff17 	ldw	r4,-4(fp)
 182974c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829750:	1007883a 	mov	r3,r2
 1829754:	e0bfff17 	ldw	r2,-4(fp)
 1829758:	10c00085 	stb	r3,2(r2)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
 182975c:	01c00044 	movi	r7,1
 1829760:	01800344 	movi	r6,13
 1829764:	014003c4 	movi	r5,15
 1829768:	e13fff17 	ldw	r4,-4(fp)
 182976c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829770:	1007883a 	mov	r3,r2
 1829774:	e0bfff17 	ldw	r2,-4(fp)
 1829778:	10c000c5 	stb	r3,3(r2)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 182977c:	01c00044 	movi	r7,1
 1829780:	01800304 	movi	r6,12
 1829784:	014003c4 	movi	r5,15
 1829788:	e13fff17 	ldw	r4,-4(fp)
 182978c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829790:	1007883a 	mov	r3,r2
 1829794:	e0bfff17 	ldw	r2,-4(fp)
 1829798:	10c00105 	stb	r3,4(r2)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 182979c:	01c00044 	movi	r7,1
 18297a0:	018003c4 	movi	r6,15
 18297a4:	01400044 	movi	r5,1
 18297a8:	e13fff17 	ldw	r4,-4(fp)
 18297ac:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 18297b0:	1007883a 	mov	r3,r2
 18297b4:	e0bfff17 	ldw	r2,-4(fp)
 18297b8:	10c00145 	stb	r3,5(r2)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 18297bc:	01c00044 	movi	r7,1
 18297c0:	01800384 	movi	r6,14
 18297c4:	01400044 	movi	r5,1
 18297c8:	e13fff17 	ldw	r4,-4(fp)
 18297cc:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 18297d0:	1007883a 	mov	r3,r2
 18297d4:	e0bfff17 	ldw	r2,-4(fp)
 18297d8:	10c00185 	stb	r3,6(r2)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 18297dc:	01c00044 	movi	r7,1
 18297e0:	01800344 	movi	r6,13
 18297e4:	01400044 	movi	r5,1
 18297e8:	e13fff17 	ldw	r4,-4(fp)
 18297ec:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 18297f0:	1007883a 	mov	r3,r2
 18297f4:	e0bfff17 	ldw	r2,-4(fp)
 18297f8:	10c001c5 	stb	r3,7(r2)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
 18297fc:	01c00044 	movi	r7,1
 1829800:	01800284 	movi	r6,10
 1829804:	01400044 	movi	r5,1
 1829808:	e13fff17 	ldw	r4,-4(fp)
 182980c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829810:	1007883a 	mov	r3,r2
 1829814:	e0bfff17 	ldw	r2,-4(fp)
 1829818:	10c00205 	stb	r3,8(r2)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
 182981c:	01c00044 	movi	r7,1
 1829820:	01800244 	movi	r6,9
 1829824:	01400044 	movi	r5,1
 1829828:	e13fff17 	ldw	r4,-4(fp)
 182982c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829830:	1007883a 	mov	r3,r2
 1829834:	e0bfff17 	ldw	r2,-4(fp)
 1829838:	10c00245 	stb	r3,9(r2)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 182983c:	01c00044 	movi	r7,1
 1829840:	01800304 	movi	r6,12
 1829844:	01400044 	movi	r5,1
 1829848:	e13fff17 	ldw	r4,-4(fp)
 182984c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829850:	1007883a 	mov	r3,r2
 1829854:	e0bfff17 	ldw	r2,-4(fp)
 1829858:	10c00285 	stb	r3,10(r2)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 182985c:	01c00044 	movi	r7,1
 1829860:	018002c4 	movi	r6,11
 1829864:	01400044 	movi	r5,1
 1829868:	e13fff17 	ldw	r4,-4(fp)
 182986c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829870:	1007883a 	mov	r3,r2
 1829874:	e0bfff17 	ldw	r2,-4(fp)
 1829878:	10c002c5 	stb	r3,11(r2)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
 182987c:	01c00044 	movi	r7,1
 1829880:	018002c4 	movi	r6,11
 1829884:	01400284 	movi	r5,10
 1829888:	e13fff17 	ldw	r4,-4(fp)
 182988c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829890:	1007883a 	mov	r3,r2
 1829894:	e0bfff17 	ldw	r2,-4(fp)
 1829898:	10c00305 	stb	r3,12(r2)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
 182989c:	01c00044 	movi	r7,1
 18298a0:	01800284 	movi	r6,10
 18298a4:	01400284 	movi	r5,10
 18298a8:	e13fff17 	ldw	r4,-4(fp)
 18298ac:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 18298b0:	1007883a 	mov	r3,r2
 18298b4:	e0bfff17 	ldw	r2,-4(fp)
 18298b8:	10c00345 	stb	r3,13(r2)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
 18298bc:	01c00044 	movi	r7,1
 18298c0:	01800244 	movi	r6,9
 18298c4:	01400144 	movi	r5,5
 18298c8:	e13fff17 	ldw	r4,-4(fp)
 18298cc:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 18298d0:	1007883a 	mov	r3,r2
 18298d4:	e0bfff17 	ldw	r2,-4(fp)
 18298d8:	10c00385 	stb	r3,14(r2)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
 18298dc:	01c00044 	movi	r7,1
 18298e0:	01800204 	movi	r6,8
 18298e4:	01400144 	movi	r5,5
 18298e8:	e13fff17 	ldw	r4,-4(fp)
 18298ec:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 18298f0:	1007883a 	mov	r3,r2
 18298f4:	e0bfff17 	ldw	r2,-4(fp)
 18298f8:	10c003c5 	stb	r3,15(r2)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
 18298fc:	01c00044 	movi	r7,1
 1829900:	018001c4 	movi	r6,7
 1829904:	01400144 	movi	r5,5
 1829908:	e13fff17 	ldw	r4,-4(fp)
 182990c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829910:	1007883a 	mov	r3,r2
 1829914:	e0bfff17 	ldw	r2,-4(fp)
 1829918:	10c00405 	stb	r3,16(r2)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
 182991c:	01c00044 	movi	r7,1
 1829920:	01800184 	movi	r6,6
 1829924:	01400144 	movi	r5,5
 1829928:	e13fff17 	ldw	r4,-4(fp)
 182992c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829930:	1007883a 	mov	r3,r2
 1829934:	e0bfff17 	ldw	r2,-4(fp)
 1829938:	10c00445 	stb	r3,17(r2)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
 182993c:	01c00044 	movi	r7,1
 1829940:	01800144 	movi	r6,5
 1829944:	01400144 	movi	r5,5
 1829948:	e13fff17 	ldw	r4,-4(fp)
 182994c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829950:	1007883a 	mov	r3,r2
 1829954:	e0bfff17 	ldw	r2,-4(fp)
 1829958:	10c00485 	stb	r3,18(r2)
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Capability of PHY :\n", mac_group_index, mac_info_index);
 182995c:	e0bffe47 	ldb	r2,-7(fp)
 1829960:	e0fffe07 	ldb	r3,-8(fp)
 1829964:	180d883a 	mov	r6,r3
 1829968:	100b883a 	mov	r5,r2
 182996c:	01006134 	movhi	r4,388
 1829970:	21097e04 	addi	r4,r4,9720
 1829974:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Full Duplex = %d\n", pphy->link_capability.cap_1000_base_x_full);
 1829978:	e0bfff17 	ldw	r2,-4(fp)
 182997c:	10800043 	ldbu	r2,1(r2)
 1829980:	10803fcc 	andi	r2,r2,255
 1829984:	100b883a 	mov	r5,r2
 1829988:	01006134 	movhi	r4,388
 182998c:	21098904 	addi	r4,r4,9764
 1829990:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Half Duplex = %d\n", pphy->link_capability.cap_1000_base_x_half);
 1829994:	e0bfff17 	ldw	r2,-4(fp)
 1829998:	10800083 	ldbu	r2,2(r2)
 182999c:	10803fcc 	andi	r2,r2,255
 18299a0:	100b883a 	mov	r5,r2
 18299a4:	01006134 	movhi	r4,388
 18299a8:	21099304 	addi	r4,r4,9804
 18299ac:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.cap_1000_base_t_full);
 18299b0:	e0bfff17 	ldw	r2,-4(fp)
 18299b4:	108000c3 	ldbu	r2,3(r2)
 18299b8:	10803fcc 	andi	r2,r2,255
 18299bc:	100b883a 	mov	r5,r2
 18299c0:	01006134 	movhi	r4,388
 18299c4:	21099d04 	addi	r4,r4,9844
 18299c8:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.cap_1000_base_t_half);
 18299cc:	e0bfff17 	ldw	r2,-4(fp)
 18299d0:	10800103 	ldbu	r2,4(r2)
 18299d4:	10803fcc 	andi	r2,r2,255
 18299d8:	100b883a 	mov	r5,r2
 18299dc:	01006134 	movhi	r4,388
 18299e0:	2109a704 	addi	r4,r4,9884
 18299e4:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.cap_100_base_t4);
 18299e8:	e0bfff17 	ldw	r2,-4(fp)
 18299ec:	10800143 	ldbu	r2,5(r2)
 18299f0:	10803fcc 	andi	r2,r2,255
 18299f4:	100b883a 	mov	r5,r2
 18299f8:	01006134 	movhi	r4,388
 18299fc:	2109b104 	addi	r4,r4,9924
 1829a00:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Full Duplex  = %d\n", pphy->link_capability.cap_100_base_x_full);
 1829a04:	e0bfff17 	ldw	r2,-4(fp)
 1829a08:	10800183 	ldbu	r2,6(r2)
 1829a0c:	10803fcc 	andi	r2,r2,255
 1829a10:	100b883a 	mov	r5,r2
 1829a14:	01006134 	movhi	r4,388
 1829a18:	2109bb04 	addi	r4,r4,9964
 1829a1c:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Half Duplex  = %d\n", pphy->link_capability.cap_100_base_x_half);
 1829a20:	e0bfff17 	ldw	r2,-4(fp)
 1829a24:	108001c3 	ldbu	r2,7(r2)
 1829a28:	10803fcc 	andi	r2,r2,255
 1829a2c:	100b883a 	mov	r5,r2
 1829a30:	01006134 	movhi	r4,388
 1829a34:	2109c504 	addi	r4,r4,10004
 1829a38:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Full Duplex = %d\n", pphy->link_capability.cap_100_base_t2_full);
 1829a3c:	e0bfff17 	ldw	r2,-4(fp)
 1829a40:	10800203 	ldbu	r2,8(r2)
 1829a44:	10803fcc 	andi	r2,r2,255
 1829a48:	100b883a 	mov	r5,r2
 1829a4c:	01006134 	movhi	r4,388
 1829a50:	2109cf04 	addi	r4,r4,10044
 1829a54:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Half Duplex = %d\n", pphy->link_capability.cap_100_base_t2_half);
 1829a58:	e0bfff17 	ldw	r2,-4(fp)
 1829a5c:	10800243 	ldbu	r2,9(r2)
 1829a60:	10803fcc 	andi	r2,r2,255
 1829a64:	100b883a 	mov	r5,r2
 1829a68:	01006134 	movhi	r4,388
 1829a6c:	2109d904 	addi	r4,r4,10084
 1829a70:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Full Duplex   = %d\n", pphy->link_capability.cap_10_base_t_full);
 1829a74:	e0bfff17 	ldw	r2,-4(fp)
 1829a78:	10800283 	ldbu	r2,10(r2)
 1829a7c:	10803fcc 	andi	r2,r2,255
 1829a80:	100b883a 	mov	r5,r2
 1829a84:	01006134 	movhi	r4,388
 1829a88:	2109e304 	addi	r4,r4,10124
 1829a8c:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Half Duplex   = %d\n", pphy->link_capability.cap_10_base_t_half);
 1829a90:	e0bfff17 	ldw	r2,-4(fp)
 1829a94:	108002c3 	ldbu	r2,11(r2)
 1829a98:	10803fcc 	andi	r2,r2,255
 1829a9c:	100b883a 	mov	r5,r2
 1829aa0:	01006134 	movhi	r4,388
 1829aa4:	2109ed04 	addi	r4,r4,10164
 1829aa8:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "\n");
 1829aac:	01006134 	movhi	r4,388
 1829ab0:	21085304 	addi	r4,r4,8524
 1829ab4:	1825d540 	call	1825d54 <no_printf>
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Link Partner Capability :\n", mac_group_index, mac_info_index);
 1829ab8:	e0bffe47 	ldb	r2,-7(fp)
 1829abc:	e0fffe07 	ldb	r3,-8(fp)
 1829ac0:	180d883a 	mov	r6,r3
 1829ac4:	100b883a 	mov	r5,r2
 1829ac8:	01006134 	movhi	r4,388
 1829acc:	2109f704 	addi	r4,r4,10204
 1829ad0:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.lp_1000_base_t_full);
 1829ad4:	e0bfff17 	ldw	r2,-4(fp)
 1829ad8:	10800303 	ldbu	r2,12(r2)
 1829adc:	10803fcc 	andi	r2,r2,255
 1829ae0:	100b883a 	mov	r5,r2
 1829ae4:	01006134 	movhi	r4,388
 1829ae8:	21099d04 	addi	r4,r4,9844
 1829aec:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.lp_1000_base_t_half);
 1829af0:	e0bfff17 	ldw	r2,-4(fp)
 1829af4:	10800343 	ldbu	r2,13(r2)
 1829af8:	10803fcc 	andi	r2,r2,255
 1829afc:	100b883a 	mov	r5,r2
 1829b00:	01006134 	movhi	r4,388
 1829b04:	2109a704 	addi	r4,r4,9884
 1829b08:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.lp_100_base_t4);
 1829b0c:	e0bfff17 	ldw	r2,-4(fp)
 1829b10:	10800383 	ldbu	r2,14(r2)
 1829b14:	10803fcc 	andi	r2,r2,255
 1829b18:	100b883a 	mov	r5,r2
 1829b1c:	01006134 	movhi	r4,388
 1829b20:	2109b104 	addi	r4,r4,9924
 1829b24:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Full Duplex = %d\n", pphy->link_capability.lp_100_base_tx_full);
 1829b28:	e0bfff17 	ldw	r2,-4(fp)
 1829b2c:	108003c3 	ldbu	r2,15(r2)
 1829b30:	10803fcc 	andi	r2,r2,255
 1829b34:	100b883a 	mov	r5,r2
 1829b38:	01006134 	movhi	r4,388
 1829b3c:	210a0404 	addi	r4,r4,10256
 1829b40:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Half Duplex = %d\n", pphy->link_capability.lp_100_base_tx_half);
 1829b44:	e0bfff17 	ldw	r2,-4(fp)
 1829b48:	10800403 	ldbu	r2,16(r2)
 1829b4c:	10803fcc 	andi	r2,r2,255
 1829b50:	100b883a 	mov	r5,r2
 1829b54:	01006134 	movhi	r4,388
 1829b58:	210a0e04 	addi	r4,r4,10296
 1829b5c:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
 1829b60:	e0bfff17 	ldw	r2,-4(fp)
 1829b64:	10800443 	ldbu	r2,17(r2)
 1829b68:	10803fcc 	andi	r2,r2,255
 1829b6c:	100b883a 	mov	r5,r2
 1829b70:	01006134 	movhi	r4,388
 1829b74:	210a1804 	addi	r4,r4,10336
 1829b78:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
 1829b7c:	e0bfff17 	ldw	r2,-4(fp)
 1829b80:	10800483 	ldbu	r2,18(r2)
 1829b84:	10803fcc 	andi	r2,r2,255
 1829b88:	100b883a 	mov	r5,r2
 1829b8c:	01006134 	movhi	r4,388
 1829b90:	210a2204 	addi	r4,r4,10376
 1829b94:	1825d540 	call	1825d54 <no_printf>
    tse_dprintf(6, "\n");
 1829b98:	01006134 	movhi	r4,388
 1829b9c:	21085304 	addi	r4,r4,8524
 1829ba0:	1825d540 	call	1825d54 <no_printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 1829ba4:	e0bffe83 	ldbu	r2,-6(fp)
 1829ba8:	100b883a 	mov	r5,r2
 1829bac:	e13fff17 	ldw	r4,-4(fp)
 1829bb0:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
 1829bb4:	e0bffb17 	ldw	r2,-20(fp)
    
}
 1829bb8:	e037883a 	mov	sp,fp
 1829bbc:	dfc00117 	ldw	ra,4(sp)
 1829bc0:	df000017 	ldw	fp,0(sp)
 1829bc4:	dec00204 	addi	sp,sp,8
 1829bc8:	f800283a 	ret

01829bcc <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
 1829bcc:	defff804 	addi	sp,sp,-32
 1829bd0:	dfc00715 	stw	ra,28(sp)
 1829bd4:	df000615 	stw	fp,24(sp)
 1829bd8:	df000604 	addi	fp,sp,24
 1829bdc:	e13ffe15 	stw	r4,-8(fp)
 1829be0:	2805883a 	mov	r2,r5
 1829be4:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 1829be8:	e0bffe17 	ldw	r2,-8(fp)
 1829bec:	10800617 	ldw	r2,24(r2)
 1829bf0:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 1829bf4:	e0bffb17 	ldw	r2,-20(fp)
 1829bf8:	10800317 	ldw	r2,12(r2)
 1829bfc:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 1829c00:	e13ffb17 	ldw	r4,-20(fp)
 1829c04:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 1829c08:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 1829c0c:	e13ffc17 	ldw	r4,-16(fp)
 1829c10:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 1829c14:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 1829c18:	e13ffe17 	ldw	r4,-8(fp)
 1829c1c:	1827c8c0 	call	1827c8c <alt_tse_phy_rd_mdio_addr>
 1829c20:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 1829c24:	e0bffe17 	ldw	r2,-8(fp)
 1829c28:	10800003 	ldbu	r2,0(r2)
 1829c2c:	10803fcc 	andi	r2,r2,255
 1829c30:	100b883a 	mov	r5,r2
 1829c34:	e13ffe17 	ldw	r4,-8(fp)
 1829c38:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 1829c3c:	e0bfff03 	ldbu	r2,-4(fp)
 1829c40:	10002d26 	beq	r2,zero,1829cf8 <alt_tse_phy_set_adv_1000+0x12c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
 1829c44:	01c00044 	movi	r7,1
 1829c48:	01800344 	movi	r6,13
 1829c4c:	014003c4 	movi	r5,15
 1829c50:	e13ffe17 	ldw	r4,-8(fp)
 1829c54:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829c58:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
 1829c5c:	e0bffdc3 	ldbu	r2,-9(fp)
 1829c60:	d8800015 	stw	r2,0(sp)
 1829c64:	01c00044 	movi	r7,1
 1829c68:	01800244 	movi	r6,9
 1829c6c:	01400244 	movi	r5,9
 1829c70:	e13ffe17 	ldw	r4,-8(fp)
 1829c74:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 1829c78:	e0bffd47 	ldb	r2,-11(fp)
 1829c7c:	e0fffd07 	ldb	r3,-12(fp)
 1829c80:	e13ffdc3 	ldbu	r4,-9(fp)
 1829c84:	200f883a 	mov	r7,r4
 1829c88:	180d883a 	mov	r6,r3
 1829c8c:	100b883a 	mov	r5,r2
 1829c90:	01006134 	movhi	r4,388
 1829c94:	210a2c04 	addi	r4,r4,10416
 1829c98:	1825d540 	call	1825d54 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 1829c9c:	01c00044 	movi	r7,1
 1829ca0:	01800304 	movi	r6,12
 1829ca4:	014003c4 	movi	r5,15
 1829ca8:	e13ffe17 	ldw	r4,-8(fp)
 1829cac:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829cb0:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
 1829cb4:	e0bffdc3 	ldbu	r2,-9(fp)
 1829cb8:	d8800015 	stw	r2,0(sp)
 1829cbc:	01c00044 	movi	r7,1
 1829cc0:	01800204 	movi	r6,8
 1829cc4:	01400244 	movi	r5,9
 1829cc8:	e13ffe17 	ldw	r4,-8(fp)
 1829ccc:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 1829cd0:	e0bffd47 	ldb	r2,-11(fp)
 1829cd4:	e0fffd07 	ldb	r3,-12(fp)
 1829cd8:	e13ffdc3 	ldbu	r4,-9(fp)
 1829cdc:	200f883a 	mov	r7,r4
 1829ce0:	180d883a 	mov	r6,r3
 1829ce4:	100b883a 	mov	r5,r2
 1829ce8:	01006134 	movhi	r4,388
 1829cec:	210a3f04 	addi	r4,r4,10492
 1829cf0:	1825d540 	call	1825d54 <no_printf>
 1829cf4:	00001c06 	br	1829d68 <alt_tse_phy_set_adv_1000+0x19c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
 1829cf8:	d8000015 	stw	zero,0(sp)
 1829cfc:	01c00044 	movi	r7,1
 1829d00:	01800244 	movi	r6,9
 1829d04:	01400244 	movi	r5,9
 1829d08:	e13ffe17 	ldw	r4,-8(fp)
 1829d0c:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 1829d10:	e0bffd47 	ldb	r2,-11(fp)
 1829d14:	e0fffd07 	ldb	r3,-12(fp)
 1829d18:	000f883a 	mov	r7,zero
 1829d1c:	180d883a 	mov	r6,r3
 1829d20:	100b883a 	mov	r5,r2
 1829d24:	01006134 	movhi	r4,388
 1829d28:	210a2c04 	addi	r4,r4,10416
 1829d2c:	1825d540 	call	1825d54 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
 1829d30:	d8000015 	stw	zero,0(sp)
 1829d34:	01c00044 	movi	r7,1
 1829d38:	01800204 	movi	r6,8
 1829d3c:	01400244 	movi	r5,9
 1829d40:	e13ffe17 	ldw	r4,-8(fp)
 1829d44:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 1829d48:	e0bffd47 	ldb	r2,-11(fp)
 1829d4c:	e0fffd07 	ldb	r3,-12(fp)
 1829d50:	000f883a 	mov	r7,zero
 1829d54:	180d883a 	mov	r6,r3
 1829d58:	100b883a 	mov	r5,r2
 1829d5c:	01006134 	movhi	r4,388
 1829d60:	210a5204 	addi	r4,r4,10568
 1829d64:	1825d540 	call	1825d54 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
 1829d68:	e0bffd83 	ldbu	r2,-10(fp)
 1829d6c:	100b883a 	mov	r5,r2
 1829d70:	e13ffe17 	ldw	r4,-8(fp)
 1829d74:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
 1829d78:	0005883a 	mov	r2,zero
}
 1829d7c:	e037883a 	mov	sp,fp
 1829d80:	dfc00117 	ldw	ra,4(sp)
 1829d84:	df000017 	ldw	fp,0(sp)
 1829d88:	dec00204 	addi	sp,sp,8
 1829d8c:	f800283a 	ret

01829d90 <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
 1829d90:	defff804 	addi	sp,sp,-32
 1829d94:	dfc00715 	stw	ra,28(sp)
 1829d98:	df000615 	stw	fp,24(sp)
 1829d9c:	df000604 	addi	fp,sp,24
 1829da0:	e13ffe15 	stw	r4,-8(fp)
 1829da4:	2805883a 	mov	r2,r5
 1829da8:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 1829dac:	e0bffe17 	ldw	r2,-8(fp)
 1829db0:	10800617 	ldw	r2,24(r2)
 1829db4:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 1829db8:	e0bffb17 	ldw	r2,-20(fp)
 1829dbc:	10800317 	ldw	r2,12(r2)
 1829dc0:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 1829dc4:	e13ffb17 	ldw	r4,-20(fp)
 1829dc8:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 1829dcc:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 1829dd0:	e13ffc17 	ldw	r4,-16(fp)
 1829dd4:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 1829dd8:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 1829ddc:	e13ffe17 	ldw	r4,-8(fp)
 1829de0:	1827c8c0 	call	1827c8c <alt_tse_phy_rd_mdio_addr>
 1829de4:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 1829de8:	e0bffe17 	ldw	r2,-8(fp)
 1829dec:	10800003 	ldbu	r2,0(r2)
 1829df0:	10803fcc 	andi	r2,r2,255
 1829df4:	100b883a 	mov	r5,r2
 1829df8:	e13ffe17 	ldw	r4,-8(fp)
 1829dfc:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 1829e00:	e0bfff03 	ldbu	r2,-4(fp)
 1829e04:	10004326 	beq	r2,zero,1829f14 <alt_tse_phy_set_adv_100+0x184>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 1829e08:	01c00044 	movi	r7,1
 1829e0c:	018003c4 	movi	r6,15
 1829e10:	01400044 	movi	r5,1
 1829e14:	e13ffe17 	ldw	r4,-8(fp)
 1829e18:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829e1c:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
 1829e20:	e0bffdc3 	ldbu	r2,-9(fp)
 1829e24:	d8800015 	stw	r2,0(sp)
 1829e28:	01c00044 	movi	r7,1
 1829e2c:	01800244 	movi	r6,9
 1829e30:	01400104 	movi	r5,4
 1829e34:	e13ffe17 	ldw	r4,-8(fp)
 1829e38:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
 1829e3c:	e0bffd47 	ldb	r2,-11(fp)
 1829e40:	e0fffd07 	ldb	r3,-12(fp)
 1829e44:	e13ffdc3 	ldbu	r4,-9(fp)
 1829e48:	200f883a 	mov	r7,r4
 1829e4c:	180d883a 	mov	r6,r3
 1829e50:	100b883a 	mov	r5,r2
 1829e54:	01006134 	movhi	r4,388
 1829e58:	210a6404 	addi	r4,r4,10640
 1829e5c:	1825d540 	call	1825d54 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 1829e60:	01c00044 	movi	r7,1
 1829e64:	01800384 	movi	r6,14
 1829e68:	01400044 	movi	r5,1
 1829e6c:	e13ffe17 	ldw	r4,-8(fp)
 1829e70:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829e74:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
 1829e78:	e0bffdc3 	ldbu	r2,-9(fp)
 1829e7c:	d8800015 	stw	r2,0(sp)
 1829e80:	01c00044 	movi	r7,1
 1829e84:	01800204 	movi	r6,8
 1829e88:	01400104 	movi	r5,4
 1829e8c:	e13ffe17 	ldw	r4,-8(fp)
 1829e90:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 1829e94:	e0bffd47 	ldb	r2,-11(fp)
 1829e98:	e0fffd07 	ldb	r3,-12(fp)
 1829e9c:	e13ffdc3 	ldbu	r4,-9(fp)
 1829ea0:	200f883a 	mov	r7,r4
 1829ea4:	180d883a 	mov	r6,r3
 1829ea8:	100b883a 	mov	r5,r2
 1829eac:	01006134 	movhi	r4,388
 1829eb0:	210a7404 	addi	r4,r4,10704
 1829eb4:	1825d540 	call	1825d54 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 1829eb8:	01c00044 	movi	r7,1
 1829ebc:	01800344 	movi	r6,13
 1829ec0:	01400044 	movi	r5,1
 1829ec4:	e13ffe17 	ldw	r4,-8(fp)
 1829ec8:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 1829ecc:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
 1829ed0:	e0bffdc3 	ldbu	r2,-9(fp)
 1829ed4:	d8800015 	stw	r2,0(sp)
 1829ed8:	01c00044 	movi	r7,1
 1829edc:	018001c4 	movi	r6,7
 1829ee0:	01400104 	movi	r5,4
 1829ee4:	e13ffe17 	ldw	r4,-8(fp)
 1829ee8:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 1829eec:	e0bffd47 	ldb	r2,-11(fp)
 1829ef0:	e0fffd07 	ldb	r3,-12(fp)
 1829ef4:	e13ffdc3 	ldbu	r4,-9(fp)
 1829ef8:	200f883a 	mov	r7,r4
 1829efc:	180d883a 	mov	r6,r3
 1829f00:	100b883a 	mov	r5,r2
 1829f04:	01006134 	movhi	r4,388
 1829f08:	210a8704 	addi	r4,r4,10780
 1829f0c:	1825d540 	call	1825d54 <no_printf>
 1829f10:	00002a06 	br	1829fbc <alt_tse_phy_set_adv_100+0x22c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
 1829f14:	d8000015 	stw	zero,0(sp)
 1829f18:	01c00044 	movi	r7,1
 1829f1c:	01800244 	movi	r6,9
 1829f20:	01400104 	movi	r5,4
 1829f24:	e13ffe17 	ldw	r4,-8(fp)
 1829f28:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
 1829f2c:	e0bffd47 	ldb	r2,-11(fp)
 1829f30:	e0fffd07 	ldb	r3,-12(fp)
 1829f34:	000f883a 	mov	r7,zero
 1829f38:	180d883a 	mov	r6,r3
 1829f3c:	100b883a 	mov	r5,r2
 1829f40:	01006134 	movhi	r4,388
 1829f44:	210a6404 	addi	r4,r4,10640
 1829f48:	1825d540 	call	1825d54 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
 1829f4c:	d8000015 	stw	zero,0(sp)
 1829f50:	01c00044 	movi	r7,1
 1829f54:	01800204 	movi	r6,8
 1829f58:	01400104 	movi	r5,4
 1829f5c:	e13ffe17 	ldw	r4,-8(fp)
 1829f60:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 1829f64:	e0bffd47 	ldb	r2,-11(fp)
 1829f68:	e0fffd07 	ldb	r3,-12(fp)
 1829f6c:	000f883a 	mov	r7,zero
 1829f70:	180d883a 	mov	r6,r3
 1829f74:	100b883a 	mov	r5,r2
 1829f78:	01006134 	movhi	r4,388
 1829f7c:	210a7404 	addi	r4,r4,10704
 1829f80:	1825d540 	call	1825d54 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
 1829f84:	d8000015 	stw	zero,0(sp)
 1829f88:	01c00044 	movi	r7,1
 1829f8c:	018001c4 	movi	r6,7
 1829f90:	01400104 	movi	r5,4
 1829f94:	e13ffe17 	ldw	r4,-8(fp)
 1829f98:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 1829f9c:	e0bffd47 	ldb	r2,-11(fp)
 1829fa0:	e0fffd07 	ldb	r3,-12(fp)
 1829fa4:	000f883a 	mov	r7,zero
 1829fa8:	180d883a 	mov	r6,r3
 1829fac:	100b883a 	mov	r5,r2
 1829fb0:	01006134 	movhi	r4,388
 1829fb4:	210a8704 	addi	r4,r4,10780
 1829fb8:	1825d540 	call	1825d54 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
 1829fbc:	e0bffd83 	ldbu	r2,-10(fp)
 1829fc0:	100b883a 	mov	r5,r2
 1829fc4:	e13ffe17 	ldw	r4,-8(fp)
 1829fc8:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 1829fcc:	0005883a 	mov	r2,zero
}
 1829fd0:	e037883a 	mov	sp,fp
 1829fd4:	dfc00117 	ldw	ra,4(sp)
 1829fd8:	df000017 	ldw	fp,0(sp)
 1829fdc:	dec00204 	addi	sp,sp,8
 1829fe0:	f800283a 	ret

01829fe4 <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
 1829fe4:	defff504 	addi	sp,sp,-44
 1829fe8:	dfc00a15 	stw	ra,40(sp)
 1829fec:	df000915 	stw	fp,36(sp)
 1829ff0:	df000904 	addi	fp,sp,36
 1829ff4:	e13ffe15 	stw	r4,-8(fp)
 1829ff8:	2805883a 	mov	r2,r5
 1829ffc:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 182a000:	e0bffe17 	ldw	r2,-8(fp)
 182a004:	10800617 	ldw	r2,24(r2)
 182a008:	e0bff815 	stw	r2,-32(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 182a00c:	e0bff817 	ldw	r2,-32(fp)
 182a010:	10800317 	ldw	r2,12(r2)
 182a014:	e0bff915 	stw	r2,-28(fp)
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182a018:	e13ff817 	ldw	r4,-32(fp)
 182a01c:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 182a020:	e0bffa15 	stw	r2,-24(fp)
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182a024:	e13ff917 	ldw	r4,-28(fp)
 182a028:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 182a02c:	e0bffb15 	stw	r2,-20(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 182a030:	e13ffe17 	ldw	r4,-8(fp)
 182a034:	1827c8c0 	call	1827c8c <alt_tse_phy_rd_mdio_addr>
 182a038:	e0bffc15 	stw	r2,-16(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182a03c:	e0bffe17 	ldw	r2,-8(fp)
 182a040:	10800003 	ldbu	r2,0(r2)
 182a044:	10803fcc 	andi	r2,r2,255
 182a048:	100b883a 	mov	r5,r2
 182a04c:	e13ffe17 	ldw	r4,-8(fp)
 182a050:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 182a054:	e0bfff03 	ldbu	r2,-4(fp)
 182a058:	10002926 	beq	r2,zero,182a100 <alt_tse_phy_set_adv_10+0x11c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 182a05c:	01c00044 	movi	r7,1
 182a060:	01800304 	movi	r6,12
 182a064:	01400044 	movi	r5,1
 182a068:	e13ffe17 	ldw	r4,-8(fp)
 182a06c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 182a070:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
 182a074:	e0bffd03 	ldbu	r2,-12(fp)
 182a078:	d8800015 	stw	r2,0(sp)
 182a07c:	01c00044 	movi	r7,1
 182a080:	01800184 	movi	r6,6
 182a084:	01400104 	movi	r5,4
 182a088:	e13ffe17 	ldw	r4,-8(fp)
 182a08c:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 182a090:	e0bffd03 	ldbu	r2,-12(fp)
 182a094:	100f883a 	mov	r7,r2
 182a098:	e1bffa17 	ldw	r6,-24(fp)
 182a09c:	e17ffb17 	ldw	r5,-20(fp)
 182a0a0:	01006134 	movhi	r4,388
 182a0a4:	210a9a04 	addi	r4,r4,10856
 182a0a8:	1825d540 	call	1825d54 <no_printf>
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 182a0ac:	01c00044 	movi	r7,1
 182a0b0:	018002c4 	movi	r6,11
 182a0b4:	01400044 	movi	r5,1
 182a0b8:	e13ffe17 	ldw	r4,-8(fp)
 182a0bc:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 182a0c0:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
 182a0c4:	e0bffd03 	ldbu	r2,-12(fp)
 182a0c8:	d8800015 	stw	r2,0(sp)
 182a0cc:	01c00044 	movi	r7,1
 182a0d0:	01800144 	movi	r6,5
 182a0d4:	01400104 	movi	r5,4
 182a0d8:	e13ffe17 	ldw	r4,-8(fp)
 182a0dc:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 182a0e0:	e0bffd03 	ldbu	r2,-12(fp)
 182a0e4:	100f883a 	mov	r7,r2
 182a0e8:	e1bffa17 	ldw	r6,-24(fp)
 182a0ec:	e17ffb17 	ldw	r5,-20(fp)
 182a0f0:	01006134 	movhi	r4,388
 182a0f4:	210aad04 	addi	r4,r4,10932
 182a0f8:	1825d540 	call	1825d54 <no_printf>
 182a0fc:	00001806 	br	182a160 <alt_tse_phy_set_adv_10+0x17c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
 182a100:	d8000015 	stw	zero,0(sp)
 182a104:	01c00044 	movi	r7,1
 182a108:	01800184 	movi	r6,6
 182a10c:	01400104 	movi	r5,4
 182a110:	e13ffe17 	ldw	r4,-8(fp)
 182a114:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 182a118:	000f883a 	mov	r7,zero
 182a11c:	e1bffa17 	ldw	r6,-24(fp)
 182a120:	e17ffb17 	ldw	r5,-20(fp)
 182a124:	01006134 	movhi	r4,388
 182a128:	210a9a04 	addi	r4,r4,10856
 182a12c:	1825d540 	call	1825d54 <no_printf>
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
 182a130:	d8000015 	stw	zero,0(sp)
 182a134:	01c00044 	movi	r7,1
 182a138:	01800144 	movi	r6,5
 182a13c:	01400104 	movi	r5,4
 182a140:	e13ffe17 	ldw	r4,-8(fp)
 182a144:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 182a148:	000f883a 	mov	r7,zero
 182a14c:	e1bffa17 	ldw	r6,-24(fp)
 182a150:	e17ffb17 	ldw	r5,-20(fp)
 182a154:	01006134 	movhi	r4,388
 182a158:	210aad04 	addi	r4,r4,10932
 182a15c:	1825d540 	call	1825d54 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 182a160:	e0bffc17 	ldw	r2,-16(fp)
 182a164:	10803fcc 	andi	r2,r2,255
 182a168:	100b883a 	mov	r5,r2
 182a16c:	e13ffe17 	ldw	r4,-8(fp)
 182a170:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 182a174:	0005883a 	mov	r2,zero
}
 182a178:	e037883a 	mov	sp,fp
 182a17c:	dfc00117 	ldw	ra,4(sp)
 182a180:	df000017 	ldw	fp,0(sp)
 182a184:	dec00204 	addi	sp,sp,8
 182a188:	f800283a 	ret

0182a18c <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
 182a18c:	defff604 	addi	sp,sp,-40
 182a190:	dfc00915 	stw	ra,36(sp)
 182a194:	df000815 	stw	fp,32(sp)
 182a198:	df000804 	addi	fp,sp,32
 182a19c:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 i;
	alt_u8 common_1000 = 1;
 182a1a0:	00800044 	movi	r2,1
 182a1a4:	e0bff905 	stb	r2,-28(fp)
	alt_u8 common_100 = 1;
 182a1a8:	00800044 	movi	r2,1
 182a1ac:	e0bff945 	stb	r2,-27(fp)
	alt_u8 common_10 = 1;
 182a1b0:	00800044 	movi	r2,1
 182a1b4:	e0bff985 	stb	r2,-26(fp)
    
	alt_32 common_speed;
    
	alt_u8 none_an_complete = 1;
 182a1b8:	00800044 	movi	r2,1
 182a1bc:	e0bffb05 	stb	r2,-20(fp)
    
    alt_tse_mac_info *pmac_info = 0;
 182a1c0:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_phy_info *pphy = 0;
 182a1c4:	e03ffd15 	stw	zero,-12(fp)
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182a1c8:	e13fff17 	ldw	r4,-4(fp)
 182a1cc:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 182a1d0:	e0bffe05 	stb	r2,-8(fp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 182a1d4:	e03ff815 	stw	zero,-32(fp)
 182a1d8:	00001c06 	br	182a24c <alt_tse_phy_get_common_speed+0xc0>
        pmac_info = pmac_group->pmac_info[i];
 182a1dc:	e0ffff17 	ldw	r3,-4(fp)
 182a1e0:	e0bff817 	ldw	r2,-32(fp)
 182a1e4:	10800044 	addi	r2,r2,1
 182a1e8:	1085883a 	add	r2,r2,r2
 182a1ec:	1085883a 	add	r2,r2,r2
 182a1f0:	1885883a 	add	r2,r3,r2
 182a1f4:	10800017 	ldw	r2,0(r2)
 182a1f8:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
 182a1fc:	e0bffc17 	ldw	r2,-16(fp)
 182a200:	10800117 	ldw	r2,4(r2)
 182a204:	e0bffd15 	stw	r2,-12(fp)
        
        /* run only if PHY connected */
        if(pphy) {
 182a208:	e0bffd17 	ldw	r2,-12(fp)
 182a20c:	10000926 	beq	r2,zero,182a234 <alt_tse_phy_get_common_speed+0xa8>
            alt_tse_phy_set_adv_1000(pphy, 1);
 182a210:	01400044 	movi	r5,1
 182a214:	e13ffd17 	ldw	r4,-12(fp)
 182a218:	1829bcc0 	call	1829bcc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 182a21c:	01400044 	movi	r5,1
 182a220:	e13ffd17 	ldw	r4,-12(fp)
 182a224:	1829d900 	call	1829d90 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 182a228:	01400044 	movi	r5,1
 182a22c:	e13ffd17 	ldw	r4,-12(fp)
 182a230:	1829fe40 	call	1829fe4 <alt_tse_phy_set_adv_10>
        }
        tse_dprintf(6, "\n");
 182a234:	01006134 	movhi	r4,388
 182a238:	21085304 	addi	r4,r4,8524
 182a23c:	1825d540 	call	1825d54 <no_printf>
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 182a240:	e0bff817 	ldw	r2,-32(fp)
 182a244:	10800044 	addi	r2,r2,1
 182a248:	e0bff815 	stw	r2,-32(fp)
 182a24c:	e0bfff17 	ldw	r2,-4(fp)
 182a250:	10800003 	ldbu	r2,0(r2)
 182a254:	10803fcc 	andi	r2,r2,255
 182a258:	e0fff817 	ldw	r3,-32(fp)
 182a25c:	18bfdf16 	blt	r3,r2,182a1dc <__ram_exceptions_end+0xff819eec>
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 182a260:	e03ff815 	stw	zero,-32(fp)
 182a264:	00005606 	br	182a3c0 <alt_tse_phy_get_common_speed+0x234>

        pmac_info = pmac_group->pmac_info[i];
 182a268:	e0ffff17 	ldw	r3,-4(fp)
 182a26c:	e0bff817 	ldw	r2,-32(fp)
 182a270:	10800044 	addi	r2,r2,1
 182a274:	1085883a 	add	r2,r2,r2
 182a278:	1085883a 	add	r2,r2,r2
 182a27c:	1885883a 	add	r2,r3,r2
 182a280:	10800017 	ldw	r2,0(r2)
 182a284:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
 182a288:	e0bffc17 	ldw	r2,-16(fp)
 182a28c:	10800117 	ldw	r2,4(r2)
 182a290:	e0bffd15 	stw	r2,-12(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 182a294:	e0bffd17 	ldw	r2,-12(fp)
 182a298:	10004326 	beq	r2,zero,182a3a8 <alt_tse_phy_get_common_speed+0x21c>
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
 182a29c:	e13ffd17 	ldw	r4,-12(fp)
 182a2a0:	18296380 	call	1829638 <alt_tse_phy_get_cap>
 182a2a4:	1000421e 	bne	r2,zero,182a3b0 <alt_tse_phy_get_common_speed+0x224>
            continue;
        }
        
        none_an_complete = 0;
 182a2a8:	e03ffb05 	stb	zero,-20(fp)
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 182a2ac:	e0bffc17 	ldw	r2,-16(fp)
 182a2b0:	10800003 	ldbu	r2,0(r2)
 182a2b4:	10803fcc 	andi	r2,r2,255
 182a2b8:	10800058 	cmpnei	r2,r2,1
 182a2bc:	1000021e 	bne	r2,zero,182a2c8 <alt_tse_phy_get_common_speed+0x13c>
            common_1000 = 0;
 182a2c0:	e03ff905 	stb	zero,-28(fp)
 182a2c4:	00000706 	br	182a2e4 <alt_tse_phy_get_common_speed+0x158>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 182a2c8:	e0bffc17 	ldw	r2,-16(fp)
 182a2cc:	10800003 	ldbu	r2,0(r2)
 182a2d0:	10803fcc 	andi	r2,r2,255
 182a2d4:	10800098 	cmpnei	r2,r2,2
 182a2d8:	1000021e 	bne	r2,zero,182a2e4 <alt_tse_phy_get_common_speed+0x158>
            common_100 = 0;
 182a2dc:	e03ff945 	stb	zero,-27(fp)
            common_10 = 0;            
 182a2e0:	e03ff985 	stb	zero,-26(fp)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
 182a2e4:	e0bffd17 	ldw	r2,-12(fp)
 182a2e8:	10c000c3 	ldbu	r3,3(r2)
 182a2ec:	e0bffd17 	ldw	r2,-12(fp)
 182a2f0:	10800303 	ldbu	r2,12(r2)
 182a2f4:	1884703a 	and	r2,r3,r2
 182a2f8:	1007883a 	mov	r3,r2
 182a2fc:	e0bff903 	ldbu	r2,-28(fp)
 182a300:	1884703a 	and	r2,r3,r2
 182a304:	e0bff905 	stb	r2,-28(fp)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 182a308:	e0bffd17 	ldw	r2,-12(fp)
 182a30c:	10c00183 	ldbu	r3,6(r2)
 182a310:	e0bffd17 	ldw	r2,-12(fp)
 182a314:	108003c3 	ldbu	r2,15(r2)
 182a318:	1884703a 	and	r2,r3,r2
 182a31c:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
 182a320:	e0bffd17 	ldw	r2,-12(fp)
 182a324:	10c001c3 	ldbu	r3,7(r2)
 182a328:	e0bffd17 	ldw	r2,-12(fp)
 182a32c:	10800403 	ldbu	r2,16(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 182a330:	1884703a 	and	r2,r3,r2
 182a334:	2084b03a 	or	r2,r4,r2
 182a338:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
 182a33c:	e0bffd17 	ldw	r2,-12(fp)
 182a340:	10c00143 	ldbu	r3,5(r2)
 182a344:	e0bffd17 	ldw	r2,-12(fp)
 182a348:	10800383 	ldbu	r2,14(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 182a34c:	1884703a 	and	r2,r3,r2
 182a350:	2084b03a 	or	r2,r4,r2
 182a354:	1007883a 	mov	r3,r2
 182a358:	e0bff943 	ldbu	r2,-27(fp)
 182a35c:	1884703a 	and	r2,r3,r2
 182a360:	e0bff945 	stb	r2,-27(fp)
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 182a364:	e0bffd17 	ldw	r2,-12(fp)
 182a368:	10c00283 	ldbu	r3,10(r2)
 182a36c:	e0bffd17 	ldw	r2,-12(fp)
 182a370:	10800443 	ldbu	r2,17(r2)
 182a374:	1884703a 	and	r2,r3,r2
 182a378:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));
 182a37c:	e0bffd17 	ldw	r2,-12(fp)
 182a380:	10c002c3 	ldbu	r3,11(r2)
 182a384:	e0bffd17 	ldw	r2,-12(fp)
 182a388:	10800483 	ldbu	r2,18(r2)
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 182a38c:	1884703a 	and	r2,r3,r2
 182a390:	2084b03a 	or	r2,r4,r2
 182a394:	1007883a 	mov	r3,r2
 182a398:	e0bff983 	ldbu	r2,-26(fp)
 182a39c:	1884703a 	and	r2,r3,r2
 182a3a0:	e0bff985 	stb	r2,-26(fp)
 182a3a4:	00000306 	br	182a3b4 <alt_tse_phy_get_common_speed+0x228>
        pmac_info = pmac_group->pmac_info[i];
        pphy = pmac_info->pphy_info;
        
        /* if no PHY connected */
        if(!pphy) {
            continue;
 182a3a8:	0001883a 	nop
 182a3ac:	00000106 	br	182a3b4 <alt_tse_phy_get_common_speed+0x228>
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
            continue;
 182a3b0:	0001883a 	nop
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 182a3b4:	e0bff817 	ldw	r2,-32(fp)
 182a3b8:	10800044 	addi	r2,r2,1
 182a3bc:	e0bff815 	stw	r2,-32(fp)
 182a3c0:	e0bfff17 	ldw	r2,-4(fp)
 182a3c4:	10800003 	ldbu	r2,0(r2)
 182a3c8:	10803fcc 	andi	r2,r2,255
 182a3cc:	e0fff817 	ldw	r3,-32(fp)
 182a3d0:	18bfa516 	blt	r3,r2,182a268 <__ram_exceptions_end+0xff819f78>
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
 182a3d4:	e0bffb03 	ldbu	r2,-20(fp)
 182a3d8:	10800058 	cmpnei	r2,r2,1
 182a3dc:	1000081e 	bne	r2,zero,182a400 <alt_tse_phy_get_common_speed+0x274>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 182a3e0:	00bfffc4 	movi	r2,-1
 182a3e4:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
 182a3e8:	e0bffe07 	ldb	r2,-8(fp)
 182a3ec:	100b883a 	mov	r5,r2
 182a3f0:	01006134 	movhi	r4,388
 182a3f4:	210ac004 	addi	r4,r4,11008
 182a3f8:	1800b240 	call	1800b24 <printf>
 182a3fc:	00002706 	br	182a49c <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_1000) {
 182a400:	e0bff903 	ldbu	r2,-28(fp)
 182a404:	10000926 	beq	r2,zero,182a42c <alt_tse_phy_get_common_speed+0x2a0>
        common_speed = TSE_PHY_SPEED_1000;
 182a408:	00800084 	movi	r2,2
 182a40c:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
 182a410:	e0bffe07 	ldb	r2,-8(fp)
 182a414:	0180fa04 	movi	r6,1000
 182a418:	100b883a 	mov	r5,r2
 182a41c:	01006134 	movhi	r4,388
 182a420:	210ad204 	addi	r4,r4,11080
 182a424:	1800b240 	call	1800b24 <printf>
 182a428:	00001c06 	br	182a49c <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_100) {
 182a42c:	e0bff943 	ldbu	r2,-27(fp)
 182a430:	10000926 	beq	r2,zero,182a458 <alt_tse_phy_get_common_speed+0x2cc>
        common_speed = TSE_PHY_SPEED_100;
 182a434:	00800044 	movi	r2,1
 182a438:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
 182a43c:	e0bffe07 	ldb	r2,-8(fp)
 182a440:	01801904 	movi	r6,100
 182a444:	100b883a 	mov	r5,r2
 182a448:	01006134 	movhi	r4,388
 182a44c:	210ad204 	addi	r4,r4,11080
 182a450:	1800b240 	call	1800b24 <printf>
 182a454:	00001106 	br	182a49c <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_10) {
 182a458:	e0bff983 	ldbu	r2,-26(fp)
 182a45c:	10000826 	beq	r2,zero,182a480 <alt_tse_phy_get_common_speed+0x2f4>
        common_speed = TSE_PHY_SPEED_10;
 182a460:	e03ffa15 	stw	zero,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
 182a464:	e0bffe07 	ldb	r2,-8(fp)
 182a468:	01800284 	movi	r6,10
 182a46c:	100b883a 	mov	r5,r2
 182a470:	01006134 	movhi	r4,388
 182a474:	210ad204 	addi	r4,r4,11080
 182a478:	1800b240 	call	1800b24 <printf>
 182a47c:	00000706 	br	182a49c <alt_tse_phy_get_common_speed+0x310>
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 182a480:	00bfffc4 	movi	r2,-1
 182a484:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
 182a488:	e0bffe07 	ldb	r2,-8(fp)
 182a48c:	100b883a 	mov	r5,r2
 182a490:	01006134 	movhi	r4,388
 182a494:	210adf04 	addi	r4,r4,11132
 182a498:	1800b240 	call	1800b24 <printf>

    return common_speed;
 182a49c:	e0bffa17 	ldw	r2,-24(fp)
}
 182a4a0:	e037883a 	mov	sp,fp
 182a4a4:	dfc00117 	ldw	ra,4(sp)
 182a4a8:	df000017 	ldw	fp,0(sp)
 182a4ac:	dec00204 	addi	sp,sp,8
 182a4b0:	f800283a 	ret

0182a4b4 <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
 182a4b4:	defff004 	addi	sp,sp,-64
 182a4b8:	dfc00f15 	stw	ra,60(sp)
 182a4bc:	df000e15 	stw	fp,56(sp)
 182a4c0:	dc400d15 	stw	r17,52(sp)
 182a4c4:	dc000c15 	stw	r16,48(sp)
 182a4c8:	df000e04 	addi	fp,sp,56
 182a4cc:	e13ffc15 	stw	r4,-16(fp)
 182a4d0:	e17ffd15 	stw	r5,-12(fp)
	alt_u8 speed;
	alt_u8 duplex;
    
	alt_u8 gb_capable;
    
    alt_tse_phy_info *pphy = 0;
 182a4d4:	e03ff515 	stw	zero,-44(fp)
    alt_tse_mac_info *pmac_info = 0;
 182a4d8:	e03ff615 	stw	zero,-40(fp)
    alt_tse_system_info *psys = 0;
 182a4dc:	e03ff715 	stw	zero,-36(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 182a4e0:	e03ff805 	stb	zero,-32(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182a4e4:	e13ffc17 	ldw	r4,-16(fp)
 182a4e8:	1826ed80 	call	1826ed8 <alt_tse_get_mac_group_index>
 182a4ec:	e0bff845 	stb	r2,-31(fp)
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 182a4f0:	e0bffc17 	ldw	r2,-16(fp)
 182a4f4:	10800117 	ldw	r2,4(r2)
 182a4f8:	10800217 	ldw	r2,8(r2)
 182a4fc:	10800017 	ldw	r2,0(r2)
 182a500:	e0bff915 	stw	r2,-28(fp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 182a504:	e0bff917 	ldw	r2,-28(fp)
 182a508:	10801004 	addi	r2,r2,64
 182a50c:	10800037 	ldwio	r2,0(r2)
 182a510:	e0bffa15 	stw	r2,-24(fp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
 182a514:	e0bffd17 	ldw	r2,-12(fp)
 182a518:	10000316 	blt	r2,zero,182a528 <alt_tse_phy_set_common_speed+0x74>
 182a51c:	e0bffd17 	ldw	r2,-12(fp)
 182a520:	108000d0 	cmplti	r2,r2,3
 182a524:	10000c1e 	bne	r2,zero,182a558 <alt_tse_phy_set_common_speed+0xa4>
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
 182a528:	e0bff847 	ldb	r2,-31(fp)
 182a52c:	e1bffd17 	ldw	r6,-12(fp)
 182a530:	100b883a 	mov	r5,r2
 182a534:	01006134 	movhi	r4,388
 182a538:	210aec04 	addi	r4,r4,11184
 182a53c:	1800b240 	call	1800b24 <printf>
		/* Restore previous MDIO address */
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 182a540:	e0bff917 	ldw	r2,-28(fp)
 182a544:	10801004 	addi	r2,r2,64
 182a548:	e0fffa17 	ldw	r3,-24(fp)
 182a54c:	10c00035 	stwio	r3,0(r2)
        return TSE_PHY_SPEED_NO_COMMON;
 182a550:	00bfffc4 	movi	r2,-1
 182a554:	0000fd06 	br	182a94c <alt_tse_phy_set_common_speed+0x498>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 182a558:	e03ff315 	stw	zero,-52(fp)
 182a55c:	0000db06 	br	182a8cc <alt_tse_phy_set_common_speed+0x418>
        pmac_info = pmac_group->pmac_info[i];
 182a560:	e0fffc17 	ldw	r3,-16(fp)
 182a564:	e0bff317 	ldw	r2,-52(fp)
 182a568:	10800044 	addi	r2,r2,1
 182a56c:	1085883a 	add	r2,r2,r2
 182a570:	1085883a 	add	r2,r2,r2
 182a574:	1885883a 	add	r2,r3,r2
 182a578:	10800017 	ldw	r2,0(r2)
 182a57c:	e0bff615 	stw	r2,-40(fp)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182a580:	e13ff617 	ldw	r4,-40(fp)
 182a584:	1826f4c0 	call	1826f4c <alt_tse_get_mac_info_index>
 182a588:	e0bff805 	stb	r2,-32(fp)

        pphy = pmac_info->pphy_info;
 182a58c:	e0bff617 	ldw	r2,-40(fp)
 182a590:	10800117 	ldw	r2,4(r2)
 182a594:	e0bff515 	stw	r2,-44(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 182a598:	e0bff517 	ldw	r2,-44(fp)
 182a59c:	1000c726 	beq	r2,zero,182a8bc <alt_tse_phy_set_common_speed+0x408>
            continue;
        }
        
        psys = pmac_info->psys_info; 
 182a5a0:	e0bff617 	ldw	r2,-40(fp)
 182a5a4:	10800217 	ldw	r2,8(r2)
 182a5a8:	e0bff715 	stw	r2,-36(fp)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182a5ac:	e0bff517 	ldw	r2,-44(fp)
 182a5b0:	10800003 	ldbu	r2,0(r2)
 182a5b4:	10803fcc 	andi	r2,r2,255
 182a5b8:	100b883a 	mov	r5,r2
 182a5bc:	e13ff517 	ldw	r4,-44(fp)
 182a5c0:	1827cd40 	call	1827cd4 <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 182a5c4:	e0bff517 	ldw	r2,-44(fp)
 182a5c8:	108000c3 	ldbu	r2,3(r2)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 182a5cc:	10803fcc 	andi	r2,r2,255
 182a5d0:	10000c1e 	bne	r2,zero,182a604 <alt_tse_phy_set_common_speed+0x150>
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 182a5d4:	e0bff517 	ldw	r2,-44(fp)
 182a5d8:	10800103 	ldbu	r2,4(r2)
 182a5dc:	10803fcc 	andi	r2,r2,255
 182a5e0:	1000081e 	bne	r2,zero,182a604 <alt_tse_phy_set_common_speed+0x150>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 182a5e4:	e0bff517 	ldw	r2,-44(fp)
 182a5e8:	10800043 	ldbu	r2,1(r2)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 182a5ec:	10803fcc 	andi	r2,r2,255
 182a5f0:	1000041e 	bne	r2,zero,182a604 <alt_tse_phy_set_common_speed+0x150>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 182a5f4:	e0bff517 	ldw	r2,-44(fp)
 182a5f8:	10800083 	ldbu	r2,2(r2)
 182a5fc:	10803fcc 	andi	r2,r2,255
 182a600:	10000226 	beq	r2,zero,182a60c <alt_tse_phy_set_common_speed+0x158>
 182a604:	00800044 	movi	r2,1
 182a608:	00000106 	br	182a610 <alt_tse_phy_set_common_speed+0x15c>
 182a60c:	0005883a 	mov	r2,zero
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 182a610:	e0bffb05 	stb	r2,-20(fp)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
 182a614:	e0bffb03 	ldbu	r2,-20(fp)
 182a618:	1000101e 	bne	r2,zero,182a65c <alt_tse_phy_set_common_speed+0x1a8>
 182a61c:	e0bffd17 	ldw	r2,-12(fp)
 182a620:	10800098 	cmpnei	r2,r2,2
 182a624:	10000d1e 	bne	r2,zero,182a65c <alt_tse_phy_set_common_speed+0x1a8>
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
 182a628:	e0bff847 	ldb	r2,-31(fp)
 182a62c:	e0fff807 	ldb	r3,-32(fp)
 182a630:	180d883a 	mov	r6,r3
 182a634:	100b883a 	mov	r5,r2
 182a638:	01006134 	movhi	r4,388
 182a63c:	210b0004 	addi	r4,r4,11264
 182a640:	1800b240 	call	1800b24 <printf>
			/* Restore previous MDIO address */
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 182a644:	e0bff917 	ldw	r2,-28(fp)
 182a648:	10801004 	addi	r2,r2,64
 182a64c:	e0fffa17 	ldw	r3,-24(fp)
 182a650:	10c00035 	stwio	r3,0(r2)
            return TSE_PHY_SPEED_NO_COMMON;
 182a654:	00bfffc4 	movi	r2,-1
 182a658:	0000bc06 	br	182a94c <alt_tse_phy_set_common_speed+0x498>
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 182a65c:	01c00044 	movi	r7,1
 182a660:	018000c4 	movi	r6,3
 182a664:	01400044 	movi	r5,1
 182a668:	e13ff517 	ldw	r4,-44(fp)
 182a66c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 182a670:	1000141e 	bne	r2,zero,182a6c4 <alt_tse_phy_set_common_speed+0x210>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
 182a674:	e0bffb03 	ldbu	r2,-20(fp)
 182a678:	10000926 	beq	r2,zero,182a6a0 <alt_tse_phy_set_common_speed+0x1ec>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
 182a67c:	e0bffd17 	ldw	r2,-12(fp)
 182a680:	1005d07a 	srai	r2,r2,1
 182a684:	10bfffcc 	andi	r2,r2,65535
 182a688:	d8800015 	stw	r2,0(sp)
 182a68c:	01c00044 	movi	r7,1
 182a690:	01800184 	movi	r6,6
 182a694:	000b883a 	mov	r5,zero
 182a698:	e13ff517 	ldw	r4,-44(fp)
 182a69c:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
 182a6a0:	e0bffd17 	ldw	r2,-12(fp)
 182a6a4:	10bfffcc 	andi	r2,r2,65535
 182a6a8:	d8800015 	stw	r2,0(sp)
 182a6ac:	01c00044 	movi	r7,1
 182a6b0:	01800344 	movi	r6,13
 182a6b4:	000b883a 	mov	r5,zero
 182a6b8:	e13ff517 	ldw	r4,-44(fp)
 182a6bc:	1827d2c0 	call	1827d2c <alt_tse_phy_wr_mdio_reg>
            
            /* continue to next PHY */
            continue;
 182a6c0:	00007f06 	br	182a8c0 <alt_tse_phy_set_common_speed+0x40c>
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
 182a6c4:	e0bffd17 	ldw	r2,-12(fp)
 182a6c8:	10800098 	cmpnei	r2,r2,2
 182a6cc:	10000a1e 	bne	r2,zero,182a6f8 <alt_tse_phy_set_common_speed+0x244>
            alt_tse_phy_set_adv_1000(pphy, 1);
 182a6d0:	01400044 	movi	r5,1
 182a6d4:	e13ff517 	ldw	r4,-44(fp)
 182a6d8:	1829bcc0 	call	1829bcc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 182a6dc:	01400044 	movi	r5,1
 182a6e0:	e13ff517 	ldw	r4,-44(fp)
 182a6e4:	1829d900 	call	1829d90 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 182a6e8:	01400044 	movi	r5,1
 182a6ec:	e13ff517 	ldw	r4,-44(fp)
 182a6f0:	1829fe40 	call	1829fe4 <alt_tse_phy_set_adv_10>
 182a6f4:	00002206 	br	182a780 <alt_tse_phy_set_common_speed+0x2cc>
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
 182a6f8:	e0bffd17 	ldw	r2,-12(fp)
 182a6fc:	10800058 	cmpnei	r2,r2,1
 182a700:	10000a1e 	bne	r2,zero,182a72c <alt_tse_phy_set_common_speed+0x278>
            alt_tse_phy_set_adv_1000(pphy, 0);
 182a704:	000b883a 	mov	r5,zero
 182a708:	e13ff517 	ldw	r4,-44(fp)
 182a70c:	1829bcc0 	call	1829bcc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 182a710:	01400044 	movi	r5,1
 182a714:	e13ff517 	ldw	r4,-44(fp)
 182a718:	1829d900 	call	1829d90 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 182a71c:	01400044 	movi	r5,1
 182a720:	e13ff517 	ldw	r4,-44(fp)
 182a724:	1829fe40 	call	1829fe4 <alt_tse_phy_set_adv_10>
 182a728:	00001506 	br	182a780 <alt_tse_phy_set_common_speed+0x2cc>
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
 182a72c:	e0bffd17 	ldw	r2,-12(fp)
 182a730:	10000a1e 	bne	r2,zero,182a75c <alt_tse_phy_set_common_speed+0x2a8>
            alt_tse_phy_set_adv_1000(pphy, 0);
 182a734:	000b883a 	mov	r5,zero
 182a738:	e13ff517 	ldw	r4,-44(fp)
 182a73c:	1829bcc0 	call	1829bcc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 182a740:	000b883a 	mov	r5,zero
 182a744:	e13ff517 	ldw	r4,-44(fp)
 182a748:	1829d900 	call	1829d90 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 182a74c:	01400044 	movi	r5,1
 182a750:	e13ff517 	ldw	r4,-44(fp)
 182a754:	1829fe40 	call	1829fe4 <alt_tse_phy_set_adv_10>
 182a758:	00000906 	br	182a780 <alt_tse_phy_set_common_speed+0x2cc>
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
 182a75c:	000b883a 	mov	r5,zero
 182a760:	e13ff517 	ldw	r4,-44(fp)
 182a764:	1829bcc0 	call	1829bcc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 182a768:	000b883a 	mov	r5,zero
 182a76c:	e13ff517 	ldw	r4,-44(fp)
 182a770:	1829d900 	call	1829d90 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
 182a774:	000b883a 	mov	r5,zero
 182a778:	e13ff517 	ldw	r4,-44(fp)
 182a77c:	1829fe40 	call	1829fe4 <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
 182a780:	01c00044 	movi	r7,1
 182a784:	01800144 	movi	r6,5
 182a788:	01400044 	movi	r5,1
 182a78c:	e13ff517 	ldw	r4,-44(fp)
 182a790:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 182a794:	10800058 	cmpnei	r2,r2,1
 182a798:	10003a1e 	bne	r2,zero,182a884 <alt_tse_phy_set_common_speed+0x3d0>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
 182a79c:	e0bffb03 	ldbu	r2,-20(fp)
 182a7a0:	10000f26 	beq	r2,zero,182a7e0 <alt_tse_phy_set_common_speed+0x32c>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 182a7a4:	e0bff517 	ldw	r2,-44(fp)
 182a7a8:	10800517 	ldw	r2,20(r2)
 182a7ac:	10801583 	ldbu	r2,86(r2)
 182a7b0:	10c03fcc 	andi	r3,r2,255
 182a7b4:	e0bff517 	ldw	r2,-44(fp)
 182a7b8:	10800517 	ldw	r2,20(r2)
 182a7bc:	108015c3 	ldbu	r2,87(r2)
 182a7c0:	10803fcc 	andi	r2,r2,255
 182a7c4:	01c00084 	movi	r7,2
 182a7c8:	100d883a 	mov	r6,r2
 182a7cc:	180b883a 	mov	r5,r3
 182a7d0:	e13ff517 	ldw	r4,-44(fp)
 182a7d4:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 182a7d8:	e0bff405 	stb	r2,-48(fp)
 182a7dc:	00000e06 	br	182a818 <alt_tse_phy_set_common_speed+0x364>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
 182a7e0:	e0bff517 	ldw	r2,-44(fp)
 182a7e4:	10800517 	ldw	r2,20(r2)
 182a7e8:	10801583 	ldbu	r2,86(r2)
 182a7ec:	10c03fcc 	andi	r3,r2,255
 182a7f0:	e0bff517 	ldw	r2,-44(fp)
 182a7f4:	10800517 	ldw	r2,20(r2)
 182a7f8:	108015c3 	ldbu	r2,87(r2)
 182a7fc:	10803fcc 	andi	r2,r2,255
 182a800:	01c00044 	movi	r7,1
 182a804:	100d883a 	mov	r6,r2
 182a808:	180b883a 	mov	r5,r3
 182a80c:	e13ff517 	ldw	r4,-44(fp)
 182a810:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 182a814:	e0bff405 	stb	r2,-48(fp)
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
 182a818:	e0fff403 	ldbu	r3,-48(fp)
 182a81c:	e0bffd17 	ldw	r2,-12(fp)
 182a820:	18800326 	beq	r3,r2,182a830 <alt_tse_phy_set_common_speed+0x37c>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 182a824:	017e0034 	movhi	r5,63488
 182a828:	e13ff517 	ldw	r4,-44(fp)
 182a82c:	182931c0 	call	182931c <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 182a830:	e0bff517 	ldw	r2,-44(fp)
 182a834:	10800517 	ldw	r2,20(r2)
 182a838:	10801583 	ldbu	r2,86(r2)
 182a83c:	10c03fcc 	andi	r3,r2,255
 182a840:	e0bff517 	ldw	r2,-44(fp)
 182a844:	10800517 	ldw	r2,20(r2)
 182a848:	10801603 	ldbu	r2,88(r2)
 182a84c:	10803fcc 	andi	r2,r2,255
 182a850:	01c00044 	movi	r7,1
 182a854:	100d883a 	mov	r6,r2
 182a858:	180b883a 	mov	r5,r3
 182a85c:	e13ff517 	ldw	r4,-44(fp)
 182a860:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 182a864:	e0bffb45 	stb	r2,-19(fp)
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
 182a868:	e0bff717 	ldw	r2,-36(fp)
 182a86c:	10800017 	ldw	r2,0(r2)
 182a870:	1007883a 	mov	r3,r2
 182a874:	e0bffb43 	ldbu	r2,-19(fp)
 182a878:	100b883a 	mov	r5,r2
 182a87c:	1809883a 	mov	r4,r3
 182a880:	18271840 	call	1827184 <alt_tse_mac_set_duplex>
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
 182a884:	e43ff847 	ldb	r16,-31(fp)
 182a888:	e47ff807 	ldb	r17,-32(fp)
 182a88c:	01c00404 	movi	r7,16
 182a890:	000d883a 	mov	r6,zero
 182a894:	01400044 	movi	r5,1
 182a898:	e13ff517 	ldw	r4,-44(fp)
 182a89c:	1827e540 	call	1827e54 <alt_tse_phy_rd_mdio_reg>
 182a8a0:	100f883a 	mov	r7,r2
 182a8a4:	880d883a 	mov	r6,r17
 182a8a8:	800b883a 	mov	r5,r16
 182a8ac:	01006134 	movhi	r4,388
 182a8b0:	210b1704 	addi	r4,r4,11356
 182a8b4:	1800b240 	call	1800b24 <printf>
 182a8b8:	00000106 	br	182a8c0 <alt_tse_phy_set_common_speed+0x40c>

        pphy = pmac_info->pphy_info;
        
        /* if no PHY connected */
        if(!pphy) {
            continue;
 182a8bc:	0001883a 	nop
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 182a8c0:	e0bff317 	ldw	r2,-52(fp)
 182a8c4:	10800044 	addi	r2,r2,1
 182a8c8:	e0bff315 	stw	r2,-52(fp)
 182a8cc:	e0bffc17 	ldw	r2,-16(fp)
 182a8d0:	10800003 	ldbu	r2,0(r2)
 182a8d4:	10803fcc 	andi	r2,r2,255
 182a8d8:	e0fff317 	ldw	r3,-52(fp)
 182a8dc:	18bf2016 	blt	r3,r2,182a560 <__ram_exceptions_end+0xff81a270>
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
 182a8e0:	e0fff847 	ldb	r3,-31(fp)
 182a8e4:	e0bffd17 	ldw	r2,-12(fp)
 182a8e8:	108000a0 	cmpeqi	r2,r2,2
 182a8ec:	1000071e 	bne	r2,zero,182a90c <alt_tse_phy_set_common_speed+0x458>
 182a8f0:	e0bffd17 	ldw	r2,-12(fp)
 182a8f4:	10800058 	cmpnei	r2,r2,1
 182a8f8:	1000021e 	bne	r2,zero,182a904 <alt_tse_phy_set_common_speed+0x450>
 182a8fc:	00801904 	movi	r2,100
 182a900:	00000306 	br	182a910 <alt_tse_phy_set_common_speed+0x45c>
 182a904:	00800284 	movi	r2,10
 182a908:	00000106 	br	182a910 <alt_tse_phy_set_common_speed+0x45c>
 182a90c:	0080fa04 	movi	r2,1000
 182a910:	100d883a 	mov	r6,r2
 182a914:	180b883a 	mov	r5,r3
 182a918:	01006134 	movhi	r4,388
 182a91c:	210b2304 	addi	r4,r4,11404
 182a920:	1800b240 	call	1800b24 <printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
 182a924:	e0bffd17 	ldw	r2,-12(fp)
 182a928:	10803fcc 	andi	r2,r2,255
 182a92c:	100b883a 	mov	r5,r2
 182a930:	e13ff917 	ldw	r4,-28(fp)
 182a934:	18270a40 	call	18270a4 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 182a938:	e0bff917 	ldw	r2,-28(fp)
 182a93c:	10801004 	addi	r2,r2,64
 182a940:	e0fffa17 	ldw	r3,-24(fp)
 182a944:	10c00035 	stwio	r3,0(r2)
        
    return common_speed;
 182a948:	e0bffd17 	ldw	r2,-12(fp)
}
 182a94c:	e6fffe04 	addi	sp,fp,-8
 182a950:	dfc00317 	ldw	ra,12(sp)
 182a954:	df000217 	ldw	fp,8(sp)
 182a958:	dc400117 	ldw	r17,4(sp)
 182a95c:	dc000017 	ldw	r16,0(sp)
 182a960:	dec00404 	addi	sp,sp,16
 182a964:	f800283a 	ret

0182a968 <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
 182a968:	defffc04 	addi	sp,sp,-16
 182a96c:	dfc00315 	stw	ra,12(sp)
 182a970:	df000215 	stw	fp,8(sp)
 182a974:	df000204 	addi	fp,sp,8
 182a978:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & 1<<5) == 0) {
 182a97c:	e0bfff17 	ldw	r2,-4(fp)
 182a980:	1080a104 	addi	r2,r2,644
 182a984:	10800037 	ldwio	r2,0(r2)
 182a988:	1080080c 	andi	r2,r2,32
 182a98c:	1000161e 	bne	r2,zero,182a9e8 <marvell_phy_cfg+0x80>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
 182a990:	01006134 	movhi	r4,388
 182a994:	210b3404 	addi	r4,r4,11472
 182a998:	183c7cc0 	call	183c7cc <puts>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
 182a99c:	e0bfff17 	ldw	r2,-4(fp)
 182a9a0:	1080a004 	addi	r2,r2,640
 182a9a4:	10801004 	addi	r2,r2,64
 182a9a8:	00c01e04 	movi	r3,120
 182a9ac:	10c00035 	stwio	r3,0(r2)
        tse_dprintf(5, "MARVELL : PHY reset\n");
 182a9b0:	01006134 	movhi	r4,388
 182a9b4:	210b3d04 	addi	r4,r4,11508
 182a9b8:	183c7cc0 	call	183c7cc <puts>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
 182a9bc:	e0bfff17 	ldw	r2,-4(fp)
 182a9c0:	1080a004 	addi	r2,r2,640
 182a9c4:	10800037 	ldwio	r2,0(r2)
 182a9c8:	e0bffe0d 	sth	r2,-8(fp)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);        
 182a9cc:	e0bfff17 	ldw	r2,-4(fp)
 182a9d0:	1080a004 	addi	r2,r2,640
 182a9d4:	e13ffe0b 	ldhu	r4,-8(fp)
 182a9d8:	00e00004 	movi	r3,-32768
 182a9dc:	20c6b03a 	or	r3,r4,r3
 182a9e0:	18ffffcc 	andi	r3,r3,65535
 182a9e4:	10c00035 	stwio	r3,0(r2)
    }
    
    return 0;
 182a9e8:	0005883a 	mov	r2,zero
}
 182a9ec:	e037883a 	mov	sp,fp
 182a9f0:	dfc00117 	ldw	ra,4(sp)
 182a9f4:	df000017 	ldw	fp,0(sp)
 182a9f8:	dec00204 	addi	sp,sp,8
 182a9fc:	f800283a 	ret

0182aa00 <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
 182aa00:	defffc04 	addi	sp,sp,-16
 182aa04:	dfc00315 	stw	ra,12(sp)
 182aa08:	df000215 	stw	fp,8(sp)
 182aa0c:	df000204 	addi	fp,sp,8
 182aa10:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 182aa14:	e0bfff17 	ldw	r2,-4(fp)
 182aa18:	1080bb04 	addi	r2,r2,748
 182aa1c:	10800037 	ldwio	r2,0(r2)
 182aa20:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 182aa24:	e0fffe0b 	ldhu	r3,-8(fp)
 182aa28:	00bffc04 	movi	r2,-16
 182aa2c:	1884703a 	and	r2,r3,r2
 182aa30:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
 182aa34:	01006134 	movhi	r4,388
 182aa38:	210b4204 	addi	r4,r4,11528
 182aa3c:	183c7cc0 	call	183c7cc <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
 182aa40:	e0bfff17 	ldw	r2,-4(fp)
 182aa44:	1080bb04 	addi	r2,r2,748
 182aa48:	e0fffe0b 	ldhu	r3,-8(fp)
 182aa4c:	18c003d4 	ori	r3,r3,15
 182aa50:	18ffffcc 	andi	r3,r3,65535
 182aa54:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 182aa58:	01006134 	movhi	r4,388
 182aa5c:	210b4e04 	addi	r4,r4,11576
 182aa60:	183c7cc0 	call	183c7cc <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 182aa64:	e0bfff17 	ldw	r2,-4(fp)
 182aa68:	1080b404 	addi	r2,r2,720
 182aa6c:	10800037 	ldwio	r2,0(r2)
 182aa70:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 182aa74:	e0fffe0b 	ldhu	r3,-8(fp)
 182aa78:	00bfdf44 	movi	r2,-131
 182aa7c:	1884703a 	and	r2,r3,r2
 182aa80:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 182aa84:	e0bfff17 	ldw	r2,-4(fp)
 182aa88:	1080b404 	addi	r2,r2,720
 182aa8c:	e0fffe0b 	ldhu	r3,-8(fp)
 182aa90:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 182aa94:	01006134 	movhi	r4,388
 182aa98:	210b3d04 	addi	r4,r4,11508
 182aa9c:	183c7cc0 	call	183c7cc <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 182aaa0:	e0bfff17 	ldw	r2,-4(fp)
 182aaa4:	1080a004 	addi	r2,r2,640
 182aaa8:	10800037 	ldwio	r2,0(r2)
 182aaac:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);
 182aab0:	e0bfff17 	ldw	r2,-4(fp)
 182aab4:	1080a004 	addi	r2,r2,640
 182aab8:	e13ffe0b 	ldhu	r4,-8(fp)
 182aabc:	00e00004 	movi	r3,-32768
 182aac0:	20c6b03a 	or	r3,r4,r3
 182aac4:	18ffffcc 	andi	r3,r3,65535
 182aac8:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 182aacc:	00800044 	movi	r2,1
}
 182aad0:	e037883a 	mov	sp,fp
 182aad4:	dfc00117 	ldw	ra,4(sp)
 182aad8:	df000017 	ldw	fp,0(sp)
 182aadc:	dec00204 	addi	sp,sp,8
 182aae0:	f800283a 	ret

0182aae4 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
 182aae4:	defffc04 	addi	sp,sp,-16
 182aae8:	dfc00315 	stw	ra,12(sp)
 182aaec:	df000215 	stw	fp,8(sp)
 182aaf0:	df000204 	addi	fp,sp,8
 182aaf4:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 182aaf8:	e0bfff17 	ldw	r2,-4(fp)
 182aafc:	1080bb04 	addi	r2,r2,748
 182ab00:	10800037 	ldwio	r2,0(r2)
 182ab04:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 182ab08:	e0fffe0b 	ldhu	r3,-8(fp)
 182ab0c:	00bffc04 	movi	r2,-16
 182ab10:	1884703a 	and	r2,r3,r2
 182ab14:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
 182ab18:	01006134 	movhi	r4,388
 182ab1c:	210b5804 	addi	r4,r4,11616
 182ab20:	183c7cc0 	call	183c7cc <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
 182ab24:	e0bfff17 	ldw	r2,-4(fp)
 182ab28:	1080bb04 	addi	r2,r2,748
 182ab2c:	e0fffe0b 	ldhu	r3,-8(fp)
 182ab30:	18c00114 	ori	r3,r3,4
 182ab34:	18ffffcc 	andi	r3,r3,65535
 182ab38:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 182ab3c:	01006134 	movhi	r4,388
 182ab40:	210b4e04 	addi	r4,r4,11576
 182ab44:	183c7cc0 	call	183c7cc <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 182ab48:	e0bfff17 	ldw	r2,-4(fp)
 182ab4c:	1080b404 	addi	r2,r2,720
 182ab50:	10800037 	ldwio	r2,0(r2)
 182ab54:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 182ab58:	e0fffe0b 	ldhu	r3,-8(fp)
 182ab5c:	00bfdf44 	movi	r2,-131
 182ab60:	1884703a 	and	r2,r3,r2
 182ab64:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 182ab68:	e0bfff17 	ldw	r2,-4(fp)
 182ab6c:	1080b404 	addi	r2,r2,720
 182ab70:	e0fffe0b 	ldhu	r3,-8(fp)
 182ab74:	10c00035 	stwio	r3,0(r2)

    tse_dprintf(5, "MARVELL : PHY reset\n");
 182ab78:	01006134 	movhi	r4,388
 182ab7c:	210b3d04 	addi	r4,r4,11508
 182ab80:	183c7cc0 	call	183c7cc <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 182ab84:	e0bfff17 	ldw	r2,-4(fp)
 182ab88:	1080a004 	addi	r2,r2,640
 182ab8c:	10800037 	ldwio	r2,0(r2)
 182ab90:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);
 182ab94:	e0bfff17 	ldw	r2,-4(fp)
 182ab98:	1080a004 	addi	r2,r2,640
 182ab9c:	e13ffe0b 	ldhu	r4,-8(fp)
 182aba0:	00e00004 	movi	r3,-32768
 182aba4:	20c6b03a 	or	r3,r4,r3
 182aba8:	18ffffcc 	andi	r3,r3,65535
 182abac:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 182abb0:	00800044 	movi	r2,1
}
 182abb4:	e037883a 	mov	sp,fp
 182abb8:	dfc00117 	ldw	ra,4(sp)
 182abbc:	df000017 	ldw	fp,0(sp)
 182abc0:	dec00204 	addi	sp,sp,8
 182abc4:	f800283a 	ret

0182abc8 <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
 182abc8:	defffc04 	addi	sp,sp,-16
 182abcc:	dfc00315 	stw	ra,12(sp)
 182abd0:	df000215 	stw	fp,8(sp)
 182abd4:	df000204 	addi	fp,sp,8
 182abd8:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 182abdc:	e0bfff17 	ldw	r2,-4(fp)
 182abe0:	1080bb04 	addi	r2,r2,748
 182abe4:	10800037 	ldwio	r2,0(r2)
 182abe8:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 182abec:	e0fffe0b 	ldhu	r3,-8(fp)
 182abf0:	00bffc04 	movi	r2,-16
 182abf4:	1884703a 	and	r2,r3,r2
 182abf8:	e0bffe0d 	sth	r2,-8(fp)
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
 182abfc:	01006134 	movhi	r4,388
 182ac00:	210b6d04 	addi	r4,r4,11700
 182ac04:	183c7cc0 	call	183c7cc <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
 182ac08:	e0bfff17 	ldw	r2,-4(fp)
 182ac0c:	1080bb04 	addi	r2,r2,748
 182ac10:	e0fffe0b 	ldhu	r3,-8(fp)
 182ac14:	18c002d4 	ori	r3,r3,11
 182ac18:	18ffffcc 	andi	r3,r3,65535
 182ac1c:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
 182ac20:	01006134 	movhi	r4,388
 182ac24:	210b7c04 	addi	r4,r4,11760
 182ac28:	183c7cc0 	call	183c7cc <puts>
    dat = IORD(&pmac->mdio1.reg14, 0);
 182ac2c:	e0bfff17 	ldw	r2,-4(fp)
 182ac30:	1080b404 	addi	r2,r2,720
 182ac34:	10800037 	ldwio	r2,0(r2)
 182ac38:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 182ac3c:	e0fffe0b 	ldhu	r3,-8(fp)
 182ac40:	00bfdf44 	movi	r2,-131
 182ac44:	1884703a 	and	r2,r3,r2
 182ac48:	e0bffe0d 	sth	r2,-8(fp)
    dat |= 0x82;
 182ac4c:	e0bffe0b 	ldhu	r2,-8(fp)
 182ac50:	10802094 	ori	r2,r2,130
 182ac54:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);    
 182ac58:	e0bfff17 	ldw	r2,-4(fp)
 182ac5c:	1080b404 	addi	r2,r2,720
 182ac60:	e0fffe0b 	ldhu	r3,-8(fp)
 182ac64:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 182ac68:	01006134 	movhi	r4,388
 182ac6c:	210b3d04 	addi	r4,r4,11508
 182ac70:	183c7cc0 	call	183c7cc <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 182ac74:	e0bfff17 	ldw	r2,-4(fp)
 182ac78:	1080a004 	addi	r2,r2,640
 182ac7c:	10800037 	ldwio	r2,0(r2)
 182ac80:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);
 182ac84:	e0bfff17 	ldw	r2,-4(fp)
 182ac88:	1080a004 	addi	r2,r2,640
 182ac8c:	e13ffe0b 	ldhu	r4,-8(fp)
 182ac90:	00e00004 	movi	r3,-32768
 182ac94:	20c6b03a 	or	r3,r4,r3
 182ac98:	18ffffcc 	andi	r3,r3,65535
 182ac9c:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 182aca0:	00800044 	movi	r2,1
    
}
 182aca4:	e037883a 	mov	sp,fp
 182aca8:	dfc00117 	ldw	ra,4(sp)
 182acac:	df000017 	ldw	fp,0(sp)
 182acb0:	dec00204 	addi	sp,sp,8
 182acb4:	f800283a 	ret

0182acb8 <DP83848C_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
 182acb8:	defffc04 	addi	sp,sp,-16
 182acbc:	df000315 	stw	fp,12(sp)
 182acc0:	df000304 	addi	fp,sp,12
 182acc4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 link_status = 0;
 182acc8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
 182accc:	e0bfff17 	ldw	r2,-4(fp)
 182acd0:	1080b004 	addi	r2,r2,704
 182acd4:	10800037 	ldwio	r2,0(r2)
 182acd8:	e0bffe15 	stw	r2,-8(fp)
	
	/* If speed == 10 Mbps */
	if(reg_status & 0x2) {
 182acdc:	e0bffe17 	ldw	r2,-8(fp)
 182ace0:	1080008c 	andi	r2,r2,2
 182ace4:	10000426 	beq	r2,zero,182acf8 <DP83848C_link_status_read+0x40>
		link_status |= 0x8;
 182ace8:	e0bffd17 	ldw	r2,-12(fp)
 182acec:	10800214 	ori	r2,r2,8
 182acf0:	e0bffd15 	stw	r2,-12(fp)
 182acf4:	00000306 	br	182ad04 <DP83848C_link_status_read+0x4c>
	}
	/* Else speed = 100 Mbps */
	else {
		link_status |= 0x4;
 182acf8:	e0bffd17 	ldw	r2,-12(fp)
 182acfc:	10800114 	ori	r2,r2,4
 182ad00:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* If duplex == Full */
	if(reg_status & 0x4) {
 182ad04:	e0bffe17 	ldw	r2,-8(fp)
 182ad08:	1080010c 	andi	r2,r2,4
 182ad0c:	10000326 	beq	r2,zero,182ad1c <DP83848C_link_status_read+0x64>
		link_status |= 0x1;
 182ad10:	e0bffd17 	ldw	r2,-12(fp)
 182ad14:	10800054 	ori	r2,r2,1
 182ad18:	e0bffd15 	stw	r2,-12(fp)
	}
	
	return link_status;
 182ad1c:	e0bffd17 	ldw	r2,-12(fp)
}
 182ad20:	e037883a 	mov	sp,fp
 182ad24:	df000017 	ldw	fp,0(sp)
 182ad28:	dec00104 	addi	sp,sp,4
 182ad2c:	f800283a 	ret

0182ad30 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 182ad30:	defffa04 	addi	sp,sp,-24
 182ad34:	dfc00515 	stw	ra,20(sp)
 182ad38:	df000415 	stw	fp,16(sp)
 182ad3c:	df000404 	addi	fp,sp,16
 182ad40:	e13ffd15 	stw	r4,-12(fp)
 182ad44:	e17ffe15 	stw	r5,-8(fp)
 182ad48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 182ad4c:	e0bffd17 	ldw	r2,-12(fp)
 182ad50:	10800017 	ldw	r2,0(r2)
 182ad54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 182ad58:	e0bffc17 	ldw	r2,-16(fp)
 182ad5c:	10c00a04 	addi	r3,r2,40
 182ad60:	e0bffd17 	ldw	r2,-12(fp)
 182ad64:	10800217 	ldw	r2,8(r2)
 182ad68:	100f883a 	mov	r7,r2
 182ad6c:	e1bfff17 	ldw	r6,-4(fp)
 182ad70:	e17ffe17 	ldw	r5,-8(fp)
 182ad74:	1809883a 	mov	r4,r3
 182ad78:	182b2f40 	call	182b2f4 <altera_avalon_uart_read>
      fd->fd_flags);
}
 182ad7c:	e037883a 	mov	sp,fp
 182ad80:	dfc00117 	ldw	ra,4(sp)
 182ad84:	df000017 	ldw	fp,0(sp)
 182ad88:	dec00204 	addi	sp,sp,8
 182ad8c:	f800283a 	ret

0182ad90 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 182ad90:	defffa04 	addi	sp,sp,-24
 182ad94:	dfc00515 	stw	ra,20(sp)
 182ad98:	df000415 	stw	fp,16(sp)
 182ad9c:	df000404 	addi	fp,sp,16
 182ada0:	e13ffd15 	stw	r4,-12(fp)
 182ada4:	e17ffe15 	stw	r5,-8(fp)
 182ada8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 182adac:	e0bffd17 	ldw	r2,-12(fp)
 182adb0:	10800017 	ldw	r2,0(r2)
 182adb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 182adb8:	e0bffc17 	ldw	r2,-16(fp)
 182adbc:	10c00a04 	addi	r3,r2,40
 182adc0:	e0bffd17 	ldw	r2,-12(fp)
 182adc4:	10800217 	ldw	r2,8(r2)
 182adc8:	100f883a 	mov	r7,r2
 182adcc:	e1bfff17 	ldw	r6,-4(fp)
 182add0:	e17ffe17 	ldw	r5,-8(fp)
 182add4:	1809883a 	mov	r4,r3
 182add8:	182b5480 	call	182b548 <altera_avalon_uart_write>
      fd->fd_flags);
}
 182addc:	e037883a 	mov	sp,fp
 182ade0:	dfc00117 	ldw	ra,4(sp)
 182ade4:	df000017 	ldw	fp,0(sp)
 182ade8:	dec00204 	addi	sp,sp,8
 182adec:	f800283a 	ret

0182adf0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 182adf0:	defffc04 	addi	sp,sp,-16
 182adf4:	dfc00315 	stw	ra,12(sp)
 182adf8:	df000215 	stw	fp,8(sp)
 182adfc:	df000204 	addi	fp,sp,8
 182ae00:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 182ae04:	e0bfff17 	ldw	r2,-4(fp)
 182ae08:	10800017 	ldw	r2,0(r2)
 182ae0c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 182ae10:	e0bffe17 	ldw	r2,-8(fp)
 182ae14:	10c00a04 	addi	r3,r2,40
 182ae18:	e0bfff17 	ldw	r2,-4(fp)
 182ae1c:	10800217 	ldw	r2,8(r2)
 182ae20:	100b883a 	mov	r5,r2
 182ae24:	1809883a 	mov	r4,r3
 182ae28:	182b2640 	call	182b264 <altera_avalon_uart_close>
}
 182ae2c:	e037883a 	mov	sp,fp
 182ae30:	dfc00117 	ldw	ra,4(sp)
 182ae34:	df000017 	ldw	fp,0(sp)
 182ae38:	dec00204 	addi	sp,sp,8
 182ae3c:	f800283a 	ret

0182ae40 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 182ae40:	defff504 	addi	sp,sp,-44
 182ae44:	dfc00a15 	stw	ra,40(sp)
 182ae48:	df000915 	stw	fp,36(sp)
 182ae4c:	df000904 	addi	fp,sp,36
 182ae50:	e13ffd15 	stw	r4,-12(fp)
 182ae54:	e17ffe15 	stw	r5,-8(fp)
 182ae58:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 182ae5c:	e0bffd17 	ldw	r2,-12(fp)
 182ae60:	10800017 	ldw	r2,0(r2)
 182ae64:	e0bff815 	stw	r2,-32(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 182ae68:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 182ae6c:	1000301e 	bne	r2,zero,182af30 <altera_avalon_uart_init+0xf0>
 182ae70:	e0bffd17 	ldw	r2,-12(fp)
 182ae74:	10800704 	addi	r2,r2,28
 182ae78:	e0bff915 	stw	r2,-28(fp)
 182ae7c:	00800044 	movi	r2,1
 182ae80:	e0bffc0d 	sth	r2,-16(fp)
 * alt_sem_create() is a wrapper for xSemaphoreCreateCounting(). The return value is 0 if 
 * the semaphore has been successfully created, or non-zero otherwise.
 */
static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (xSemaphoreHandle* sem, alt_u16 value)
{
	*sem = xSemaphoreCreateCounting(value ? value : 1, value);
 182ae84:	e0bffc0b 	ldhu	r2,-16(fp)
 182ae88:	10000226 	beq	r2,zero,182ae94 <altera_avalon_uart_init+0x54>
 182ae8c:	e0bffc0b 	ldhu	r2,-16(fp)
 182ae90:	00000106 	br	182ae98 <altera_avalon_uart_init+0x58>
 182ae94:	00800044 	movi	r2,1
 182ae98:	e0fffc0b 	ldhu	r3,-16(fp)
 182ae9c:	180b883a 	mov	r5,r3
 182aea0:	1009883a 	mov	r4,r2
 182aea4:	180d9300 	call	180d930 <xQueueCreateCountingSemaphore>
 182aea8:	1007883a 	mov	r3,r2
 182aeac:	e0bff917 	ldw	r2,-28(fp)
 182aeb0:	10c00015 	stw	r3,0(r2)
	return *sem ? 0 : -1;
 182aeb4:	e0bff917 	ldw	r2,-28(fp)
 182aeb8:	10800017 	ldw	r2,0(r2)
 182aebc:	10000226 	beq	r2,zero,182aec8 <altera_avalon_uart_init+0x88>
 182aec0:	0005883a 	mov	r2,zero
 182aec4:	00000106 	br	182aecc <altera_avalon_uart_init+0x8c>
 182aec8:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 182aecc:	1000181e 	bne	r2,zero,182af30 <altera_avalon_uart_init+0xf0>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
 182aed0:	e0bffd17 	ldw	r2,-12(fp)
 182aed4:	10800804 	addi	r2,r2,32
 182aed8:	e0bffa15 	stw	r2,-24(fp)
 182aedc:	00800044 	movi	r2,1
 182aee0:	e0bffc8d 	sth	r2,-14(fp)
 * alt_sem_create() is a wrapper for xSemaphoreCreateCounting(). The return value is 0 if 
 * the semaphore has been successfully created, or non-zero otherwise.
 */
static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (xSemaphoreHandle* sem, alt_u16 value)
{
	*sem = xSemaphoreCreateCounting(value ? value : 1, value);
 182aee4:	e0bffc8b 	ldhu	r2,-14(fp)
 182aee8:	10000226 	beq	r2,zero,182aef4 <altera_avalon_uart_init+0xb4>
 182aeec:	e0bffc8b 	ldhu	r2,-14(fp)
 182aef0:	00000106 	br	182aef8 <altera_avalon_uart_init+0xb8>
 182aef4:	00800044 	movi	r2,1
 182aef8:	e0fffc8b 	ldhu	r3,-14(fp)
 182aefc:	180b883a 	mov	r5,r3
 182af00:	1009883a 	mov	r4,r2
 182af04:	180d9300 	call	180d930 <xQueueCreateCountingSemaphore>
 182af08:	1007883a 	mov	r3,r2
 182af0c:	e0bffa17 	ldw	r2,-24(fp)
 182af10:	10c00015 	stw	r3,0(r2)
	return *sem ? 0 : -1;
 182af14:	e0bffa17 	ldw	r2,-24(fp)
 182af18:	10800017 	ldw	r2,0(r2)
 182af1c:	10000226 	beq	r2,zero,182af28 <altera_avalon_uart_init+0xe8>
 182af20:	0005883a 	mov	r2,zero
 182af24:	00000106 	br	182af2c <altera_avalon_uart_init+0xec>
 182af28:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 182af2c:	10000226 	beq	r2,zero,182af38 <altera_avalon_uart_init+0xf8>
 182af30:	00800044 	movi	r2,1
 182af34:	00000106 	br	182af3c <altera_avalon_uart_init+0xfc>
 182af38:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 182af3c:	e0bffb15 	stw	r2,-20(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 182af40:	e0bffb17 	ldw	r2,-20(fp)
 182af44:	10000f1e 	bne	r2,zero,182af84 <altera_avalon_uart_init+0x144>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 182af48:	e0bffd17 	ldw	r2,-12(fp)
 182af4c:	00c32004 	movi	r3,3200
 182af50:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 182af54:	e0bff817 	ldw	r2,-32(fp)
 182af58:	10800304 	addi	r2,r2,12
 182af5c:	e0fffd17 	ldw	r3,-12(fp)
 182af60:	18c00117 	ldw	r3,4(r3)
 182af64:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 182af68:	d8000015 	stw	zero,0(sp)
 182af6c:	e1fffd17 	ldw	r7,-12(fp)
 182af70:	018060f4 	movhi	r6,387
 182af74:	31abe704 	addi	r6,r6,-20580
 182af78:	e17fff17 	ldw	r5,-4(fp)
 182af7c:	e13ffe17 	ldw	r4,-8(fp)
 182af80:	182c6f40 	call	182c6f4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 182af84:	0001883a 	nop
 182af88:	e037883a 	mov	sp,fp
 182af8c:	dfc00117 	ldw	ra,4(sp)
 182af90:	df000017 	ldw	fp,0(sp)
 182af94:	dec00204 	addi	sp,sp,8
 182af98:	f800283a 	ret

0182af9c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 182af9c:	defffa04 	addi	sp,sp,-24
 182afa0:	dfc00515 	stw	ra,20(sp)
 182afa4:	df000415 	stw	fp,16(sp)
 182afa8:	df000404 	addi	fp,sp,16
 182afac:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 182afb0:	e0bfff17 	ldw	r2,-4(fp)
 182afb4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 182afb8:	e0bffc17 	ldw	r2,-16(fp)
 182afbc:	10800017 	ldw	r2,0(r2)
 182afc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 182afc4:	e0bffd17 	ldw	r2,-12(fp)
 182afc8:	10800204 	addi	r2,r2,8
 182afcc:	10800037 	ldwio	r2,0(r2)
 182afd0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 182afd4:	e0bffd17 	ldw	r2,-12(fp)
 182afd8:	10800204 	addi	r2,r2,8
 182afdc:	0007883a 	mov	r3,zero
 182afe0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 182afe4:	e0bffd17 	ldw	r2,-12(fp)
 182afe8:	10800204 	addi	r2,r2,8
 182afec:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 182aff0:	e0bffe17 	ldw	r2,-8(fp)
 182aff4:	1080200c 	andi	r2,r2,128
 182aff8:	10000326 	beq	r2,zero,182b008 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 182affc:	e17ffe17 	ldw	r5,-8(fp)
 182b000:	e13ffc17 	ldw	r4,-16(fp)
 182b004:	182b0380 	call	182b038 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 182b008:	e0bffe17 	ldw	r2,-8(fp)
 182b00c:	1081100c 	andi	r2,r2,1088
 182b010:	10000326 	beq	r2,zero,182b020 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 182b014:	e17ffe17 	ldw	r5,-8(fp)
 182b018:	e13ffc17 	ldw	r4,-16(fp)
 182b01c:	182b11c0 	call	182b11c <altera_avalon_uart_txirq>
  }
  

}
 182b020:	0001883a 	nop
 182b024:	e037883a 	mov	sp,fp
 182b028:	dfc00117 	ldw	ra,4(sp)
 182b02c:	df000017 	ldw	fp,0(sp)
 182b030:	dec00204 	addi	sp,sp,8
 182b034:	f800283a 	ret

0182b038 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 182b038:	defffc04 	addi	sp,sp,-16
 182b03c:	df000315 	stw	fp,12(sp)
 182b040:	df000304 	addi	fp,sp,12
 182b044:	e13ffe15 	stw	r4,-8(fp)
 182b048:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 182b04c:	e0bfff17 	ldw	r2,-4(fp)
 182b050:	108000cc 	andi	r2,r2,3
 182b054:	10002c1e 	bne	r2,zero,182b108 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 182b058:	e0bffe17 	ldw	r2,-8(fp)
 182b05c:	10800317 	ldw	r2,12(r2)
 182b060:	e0bffe17 	ldw	r2,-8(fp)
 182b064:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 182b068:	e0bffe17 	ldw	r2,-8(fp)
 182b06c:	10800317 	ldw	r2,12(r2)
 182b070:	10800044 	addi	r2,r2,1
 182b074:	10800fcc 	andi	r2,r2,63
 182b078:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 182b07c:	e0bffe17 	ldw	r2,-8(fp)
 182b080:	10800317 	ldw	r2,12(r2)
 182b084:	e0fffe17 	ldw	r3,-8(fp)
 182b088:	18c00017 	ldw	r3,0(r3)
 182b08c:	18c00037 	ldwio	r3,0(r3)
 182b090:	1809883a 	mov	r4,r3
 182b094:	e0fffe17 	ldw	r3,-8(fp)
 182b098:	1885883a 	add	r2,r3,r2
 182b09c:	10800904 	addi	r2,r2,36
 182b0a0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 182b0a4:	e0bffe17 	ldw	r2,-8(fp)
 182b0a8:	e0fffd17 	ldw	r3,-12(fp)
 182b0ac:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 182b0b0:	e0bffe17 	ldw	r2,-8(fp)
 182b0b4:	10800317 	ldw	r2,12(r2)
 182b0b8:	10800044 	addi	r2,r2,1
 182b0bc:	10800fcc 	andi	r2,r2,63
 182b0c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 182b0c4:	e0bffe17 	ldw	r2,-8(fp)
 182b0c8:	10c00217 	ldw	r3,8(r2)
 182b0cc:	e0bffd17 	ldw	r2,-12(fp)
 182b0d0:	18800e1e 	bne	r3,r2,182b10c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 182b0d4:	e0bffe17 	ldw	r2,-8(fp)
 182b0d8:	10c00117 	ldw	r3,4(r2)
 182b0dc:	00bfdfc4 	movi	r2,-129
 182b0e0:	1886703a 	and	r3,r3,r2
 182b0e4:	e0bffe17 	ldw	r2,-8(fp)
 182b0e8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 182b0ec:	e0bffe17 	ldw	r2,-8(fp)
 182b0f0:	10800017 	ldw	r2,0(r2)
 182b0f4:	10800304 	addi	r2,r2,12
 182b0f8:	e0fffe17 	ldw	r3,-8(fp)
 182b0fc:	18c00117 	ldw	r3,4(r3)
 182b100:	10c00035 	stwio	r3,0(r2)
 182b104:	00000106 	br	182b10c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 182b108:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 182b10c:	e037883a 	mov	sp,fp
 182b110:	df000017 	ldw	fp,0(sp)
 182b114:	dec00104 	addi	sp,sp,4
 182b118:	f800283a 	ret

0182b11c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 182b11c:	defffb04 	addi	sp,sp,-20
 182b120:	df000415 	stw	fp,16(sp)
 182b124:	df000404 	addi	fp,sp,16
 182b128:	e13ffc15 	stw	r4,-16(fp)
 182b12c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 182b130:	e0bffc17 	ldw	r2,-16(fp)
 182b134:	10c00417 	ldw	r3,16(r2)
 182b138:	e0bffc17 	ldw	r2,-16(fp)
 182b13c:	10800517 	ldw	r2,20(r2)
 182b140:	18803226 	beq	r3,r2,182b20c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 182b144:	e0bffc17 	ldw	r2,-16(fp)
 182b148:	10800617 	ldw	r2,24(r2)
 182b14c:	1080008c 	andi	r2,r2,2
 182b150:	10000326 	beq	r2,zero,182b160 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 182b154:	e0bffd17 	ldw	r2,-12(fp)
 182b158:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 182b15c:	10001d26 	beq	r2,zero,182b1d4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 182b160:	e0bffc17 	ldw	r2,-16(fp)
 182b164:	10800417 	ldw	r2,16(r2)
 182b168:	e0bffc17 	ldw	r2,-16(fp)
 182b16c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 182b170:	e0bffc17 	ldw	r2,-16(fp)
 182b174:	10800017 	ldw	r2,0(r2)
 182b178:	10800104 	addi	r2,r2,4
 182b17c:	e0fffc17 	ldw	r3,-16(fp)
 182b180:	18c00417 	ldw	r3,16(r3)
 182b184:	e13ffc17 	ldw	r4,-16(fp)
 182b188:	20c7883a 	add	r3,r4,r3
 182b18c:	18c01904 	addi	r3,r3,100
 182b190:	18c00003 	ldbu	r3,0(r3)
 182b194:	18c03fcc 	andi	r3,r3,255
 182b198:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 182b19c:	e0bffc17 	ldw	r2,-16(fp)
 182b1a0:	10800417 	ldw	r2,16(r2)
 182b1a4:	10800044 	addi	r2,r2,1
 182b1a8:	e0fffc17 	ldw	r3,-16(fp)
 182b1ac:	18800415 	stw	r2,16(r3)
 182b1b0:	10c00fcc 	andi	r3,r2,63
 182b1b4:	e0bffc17 	ldw	r2,-16(fp)
 182b1b8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 182b1bc:	e0bffc17 	ldw	r2,-16(fp)
 182b1c0:	10800117 	ldw	r2,4(r2)
 182b1c4:	10c01014 	ori	r3,r2,64
 182b1c8:	e0bffc17 	ldw	r2,-16(fp)
 182b1cc:	10c00115 	stw	r3,4(r2)
 182b1d0:	00000e06 	br	182b20c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 182b1d4:	e0bffc17 	ldw	r2,-16(fp)
 182b1d8:	10800017 	ldw	r2,0(r2)
 182b1dc:	10800204 	addi	r2,r2,8
 182b1e0:	10800037 	ldwio	r2,0(r2)
 182b1e4:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 182b1e8:	e0bffd17 	ldw	r2,-12(fp)
 182b1ec:	1082000c 	andi	r2,r2,2048
 182b1f0:	1000061e 	bne	r2,zero,182b20c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 182b1f4:	e0bffc17 	ldw	r2,-16(fp)
 182b1f8:	10c00117 	ldw	r3,4(r2)
 182b1fc:	00bfefc4 	movi	r2,-65
 182b200:	1886703a 	and	r3,r3,r2
 182b204:	e0bffc17 	ldw	r2,-16(fp)
 182b208:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 182b20c:	e0bffc17 	ldw	r2,-16(fp)
 182b210:	10c00417 	ldw	r3,16(r2)
 182b214:	e0bffc17 	ldw	r2,-16(fp)
 182b218:	10800517 	ldw	r2,20(r2)
 182b21c:	1880061e 	bne	r3,r2,182b238 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 182b220:	e0bffc17 	ldw	r2,-16(fp)
 182b224:	10c00117 	ldw	r3,4(r2)
 182b228:	00beefc4 	movi	r2,-1089
 182b22c:	1886703a 	and	r3,r3,r2
 182b230:	e0bffc17 	ldw	r2,-16(fp)
 182b234:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 182b238:	e0bffc17 	ldw	r2,-16(fp)
 182b23c:	10800017 	ldw	r2,0(r2)
 182b240:	10800304 	addi	r2,r2,12
 182b244:	e0fffc17 	ldw	r3,-16(fp)
 182b248:	18c00117 	ldw	r3,4(r3)
 182b24c:	10c00035 	stwio	r3,0(r2)
}
 182b250:	0001883a 	nop
 182b254:	e037883a 	mov	sp,fp
 182b258:	df000017 	ldw	fp,0(sp)
 182b25c:	dec00104 	addi	sp,sp,4
 182b260:	f800283a 	ret

0182b264 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 182b264:	defffd04 	addi	sp,sp,-12
 182b268:	df000215 	stw	fp,8(sp)
 182b26c:	df000204 	addi	fp,sp,8
 182b270:	e13ffe15 	stw	r4,-8(fp)
 182b274:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 182b278:	00000506 	br	182b290 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 182b27c:	e0bfff17 	ldw	r2,-4(fp)
 182b280:	1090000c 	andi	r2,r2,16384
 182b284:	10000226 	beq	r2,zero,182b290 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 182b288:	00bffd44 	movi	r2,-11
 182b28c:	00000606 	br	182b2a8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 182b290:	e0bffe17 	ldw	r2,-8(fp)
 182b294:	10c00417 	ldw	r3,16(r2)
 182b298:	e0bffe17 	ldw	r2,-8(fp)
 182b29c:	10800517 	ldw	r2,20(r2)
 182b2a0:	18bff61e 	bne	r3,r2,182b27c <__ram_exceptions_end+0xff81af8c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 182b2a4:	0005883a 	mov	r2,zero
}
 182b2a8:	e037883a 	mov	sp,fp
 182b2ac:	df000017 	ldw	fp,0(sp)
 182b2b0:	dec00104 	addi	sp,sp,4
 182b2b4:	f800283a 	ret

0182b2b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 182b2b8:	defffe04 	addi	sp,sp,-8
 182b2bc:	dfc00115 	stw	ra,4(sp)
 182b2c0:	df000015 	stw	fp,0(sp)
 182b2c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 182b2c8:	d0a01a17 	ldw	r2,-32664(gp)
 182b2cc:	10000326 	beq	r2,zero,182b2dc <alt_get_errno+0x24>
 182b2d0:	d0a01a17 	ldw	r2,-32664(gp)
 182b2d4:	103ee83a 	callr	r2
 182b2d8:	00000106 	br	182b2e0 <alt_get_errno+0x28>
 182b2dc:	d0a7ce04 	addi	r2,gp,-24776
}
 182b2e0:	e037883a 	mov	sp,fp
 182b2e4:	dfc00117 	ldw	ra,4(sp)
 182b2e8:	df000017 	ldw	fp,0(sp)
 182b2ec:	dec00204 	addi	sp,sp,8
 182b2f0:	f800283a 	ret

0182b2f4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 182b2f4:	deffef04 	addi	sp,sp,-68
 182b2f8:	dfc01015 	stw	ra,64(sp)
 182b2fc:	df000f15 	stw	fp,60(sp)
 182b300:	df000f04 	addi	fp,sp,60
 182b304:	e13ffb15 	stw	r4,-20(fp)
 182b308:	e17ffc15 	stw	r5,-16(fp)
 182b30c:	e1bffd15 	stw	r6,-12(fp)
 182b310:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 182b314:	e03ff105 	stb	zero,-60(fp)
  int             count = 0;
 182b318:	e03ff215 	stw	zero,-56(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 182b31c:	e0bffe17 	ldw	r2,-8(fp)
 182b320:	1090000c 	andi	r2,r2,16384
 182b324:	1005003a 	cmpeq	r2,r2,zero
 182b328:	10803fcc 	andi	r2,r2,255
 182b32c:	e0bff315 	stw	r2,-52(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
 182b330:	e0bffb17 	ldw	r2,-20(fp)
 182b334:	10800717 	ldw	r2,28(r2)
 182b338:	e0bff915 	stw	r2,-28(fp)
 182b33c:	e03ffa0d 	sth	zero,-24(fp)
 * converted into the functions return value.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (xSemaphoreHandle sem, alt_u16 timeout)
{
	return xSemaphoreTake(sem, timeout) ? 0 : -1;
 182b340:	e0bffa0b 	ldhu	r2,-24(fp)
 182b344:	100b883a 	mov	r5,r2
 182b348:	e13ff917 	ldw	r4,-28(fp)
 182b34c:	180df140 	call	180df14 <xQueueSemaphoreTake>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 182b350:	00001306 	br	182b3a0 <altera_avalon_uart_read+0xac>
    {
      count++;
 182b354:	e0bff217 	ldw	r2,-56(fp)
 182b358:	10800044 	addi	r2,r2,1
 182b35c:	e0bff215 	stw	r2,-56(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 182b360:	e0bffc17 	ldw	r2,-16(fp)
 182b364:	10c00044 	addi	r3,r2,1
 182b368:	e0fffc15 	stw	r3,-16(fp)
 182b36c:	e0fffb17 	ldw	r3,-20(fp)
 182b370:	18c00217 	ldw	r3,8(r3)
 182b374:	e13ffb17 	ldw	r4,-20(fp)
 182b378:	20c7883a 	add	r3,r4,r3
 182b37c:	18c00904 	addi	r3,r3,36
 182b380:	18c00003 	ldbu	r3,0(r3)
 182b384:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 182b388:	e0bffb17 	ldw	r2,-20(fp)
 182b38c:	10800217 	ldw	r2,8(r2)
 182b390:	10800044 	addi	r2,r2,1
 182b394:	10c00fcc 	andi	r3,r2,63
 182b398:	e0bffb17 	ldw	r2,-20(fp)
 182b39c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 182b3a0:	e0fff217 	ldw	r3,-56(fp)
 182b3a4:	e0bffd17 	ldw	r2,-12(fp)
 182b3a8:	1880050e 	bge	r3,r2,182b3c0 <altera_avalon_uart_read+0xcc>
 182b3ac:	e0bffb17 	ldw	r2,-20(fp)
 182b3b0:	10c00217 	ldw	r3,8(r2)
 182b3b4:	e0bffb17 	ldw	r2,-20(fp)
 182b3b8:	10800317 	ldw	r2,12(r2)
 182b3bc:	18bfe51e 	bne	r3,r2,182b354 <__ram_exceptions_end+0xff81b064>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 182b3c0:	e0bff217 	ldw	r2,-56(fp)
 182b3c4:	1000251e 	bne	r2,zero,182b45c <altera_avalon_uart_read+0x168>
 182b3c8:	e0bffb17 	ldw	r2,-20(fp)
 182b3cc:	10c00217 	ldw	r3,8(r2)
 182b3d0:	e0bffb17 	ldw	r2,-20(fp)
 182b3d4:	10800317 	ldw	r2,12(r2)
 182b3d8:	1880201e 	bne	r3,r2,182b45c <altera_avalon_uart_read+0x168>
    {
      if (!block)
 182b3dc:	e0bff317 	ldw	r2,-52(fp)
 182b3e0:	1000071e 	bne	r2,zero,182b400 <altera_avalon_uart_read+0x10c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 182b3e4:	182b2b80 	call	182b2b8 <alt_get_errno>
 182b3e8:	1007883a 	mov	r3,r2
 182b3ec:	008002c4 	movi	r2,11
 182b3f0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 182b3f4:	00800044 	movi	r2,1
 182b3f8:	e0bff105 	stb	r2,-60(fp)
        break;
 182b3fc:	00001b06 	br	182b46c <altera_avalon_uart_read+0x178>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182b400:	0005303a 	rdctl	r2,status
 182b404:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182b408:	e0fff617 	ldw	r3,-40(fp)
 182b40c:	00bfff84 	movi	r2,-2
 182b410:	1884703a 	and	r2,r3,r2
 182b414:	1001703a 	wrctl	status,r2
  
  return context;
 182b418:	e0bff617 	ldw	r2,-40(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 182b41c:	e0bff515 	stw	r2,-44(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 182b420:	e0bffb17 	ldw	r2,-20(fp)
 182b424:	10800117 	ldw	r2,4(r2)
 182b428:	10c02014 	ori	r3,r2,128
 182b42c:	e0bffb17 	ldw	r2,-20(fp)
 182b430:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 182b434:	e0bffb17 	ldw	r2,-20(fp)
 182b438:	10800017 	ldw	r2,0(r2)
 182b43c:	10800304 	addi	r2,r2,12
 182b440:	e0fffb17 	ldw	r3,-20(fp)
 182b444:	18c00117 	ldw	r3,4(r3)
 182b448:	10c00035 	stwio	r3,0(r2)
 182b44c:	e0bff517 	ldw	r2,-44(fp)
 182b450:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182b454:	e0bff717 	ldw	r2,-36(fp)
 182b458:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 182b45c:	e0bff217 	ldw	r2,-56(fp)
 182b460:	1000021e 	bne	r2,zero,182b46c <altera_avalon_uart_read+0x178>
 182b464:	e0bffd17 	ldw	r2,-12(fp)
 182b468:	103fcd1e 	bne	r2,zero,182b3a0 <__ram_exceptions_end+0xff81b0b0>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 182b46c:	e0bffb17 	ldw	r2,-20(fp)
 182b470:	10800717 	ldw	r2,28(r2)
 182b474:	000f883a 	mov	r7,zero
 182b478:	000d883a 	mov	r6,zero
 182b47c:	000b883a 	mov	r5,zero
 182b480:	1009883a 	mov	r4,r2
 182b484:	180d9880 	call	180d988 <xQueueGenericSend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182b488:	0005303a 	rdctl	r2,status
 182b48c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182b490:	e0fff817 	ldw	r3,-32(fp)
 182b494:	00bfff84 	movi	r2,-2
 182b498:	1884703a 	and	r2,r3,r2
 182b49c:	1001703a 	wrctl	status,r2
  
  return context;
 182b4a0:	e0bff817 	ldw	r2,-32(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 182b4a4:	e0bff515 	stw	r2,-44(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 182b4a8:	e0bffb17 	ldw	r2,-20(fp)
 182b4ac:	10800117 	ldw	r2,4(r2)
 182b4b0:	10c02014 	ori	r3,r2,128
 182b4b4:	e0bffb17 	ldw	r2,-20(fp)
 182b4b8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 182b4bc:	e0bffb17 	ldw	r2,-20(fp)
 182b4c0:	10800017 	ldw	r2,0(r2)
 182b4c4:	10800304 	addi	r2,r2,12
 182b4c8:	e0fffb17 	ldw	r3,-20(fp)
 182b4cc:	18c00117 	ldw	r3,4(r3)
 182b4d0:	10c00035 	stwio	r3,0(r2)
 182b4d4:	e0bff517 	ldw	r2,-44(fp)
 182b4d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182b4dc:	e0bff417 	ldw	r2,-48(fp)
 182b4e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 182b4e4:	e0bff103 	ldbu	r2,-60(fp)
 182b4e8:	10000226 	beq	r2,zero,182b4f4 <altera_avalon_uart_read+0x200>
    return -EWOULDBLOCK;
 182b4ec:	00bffd44 	movi	r2,-11
 182b4f0:	00000106 	br	182b4f8 <altera_avalon_uart_read+0x204>
  }
  else {
    return count;
 182b4f4:	e0bff217 	ldw	r2,-56(fp)
  }
}
 182b4f8:	e037883a 	mov	sp,fp
 182b4fc:	dfc00117 	ldw	ra,4(sp)
 182b500:	df000017 	ldw	fp,0(sp)
 182b504:	dec00204 	addi	sp,sp,8
 182b508:	f800283a 	ret

0182b50c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 182b50c:	defffe04 	addi	sp,sp,-8
 182b510:	dfc00115 	stw	ra,4(sp)
 182b514:	df000015 	stw	fp,0(sp)
 182b518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 182b51c:	d0a01a17 	ldw	r2,-32664(gp)
 182b520:	10000326 	beq	r2,zero,182b530 <alt_get_errno+0x24>
 182b524:	d0a01a17 	ldw	r2,-32664(gp)
 182b528:	103ee83a 	callr	r2
 182b52c:	00000106 	br	182b534 <alt_get_errno+0x28>
 182b530:	d0a7ce04 	addi	r2,gp,-24776
}
 182b534:	e037883a 	mov	sp,fp
 182b538:	dfc00117 	ldw	ra,4(sp)
 182b53c:	df000017 	ldw	fp,0(sp)
 182b540:	dec00204 	addi	sp,sp,8
 182b544:	f800283a 	ret

0182b548 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 182b548:	deffef04 	addi	sp,sp,-68
 182b54c:	dfc01015 	stw	ra,64(sp)
 182b550:	df000f15 	stw	fp,60(sp)
 182b554:	df000f04 	addi	fp,sp,60
 182b558:	e13ffb15 	stw	r4,-20(fp)
 182b55c:	e17ffc15 	stw	r5,-16(fp)
 182b560:	e1bffd15 	stw	r6,-12(fp)
 182b564:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 182b568:	e0bffd17 	ldw	r2,-12(fp)
 182b56c:	e0bff115 	stw	r2,-60(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 182b570:	e0bffe17 	ldw	r2,-8(fp)
 182b574:	1090000c 	andi	r2,r2,16384
 182b578:	e0bff215 	stw	r2,-56(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
 182b57c:	e0bffb17 	ldw	r2,-20(fp)
 182b580:	10800817 	ldw	r2,32(r2)
 182b584:	e0bff915 	stw	r2,-28(fp)
 182b588:	e03ffa0d 	sth	zero,-24(fp)
 182b58c:	e0bffa0b 	ldhu	r2,-24(fp)
 182b590:	100b883a 	mov	r5,r2
 182b594:	e13ff917 	ldw	r4,-28(fp)
 182b598:	180df140 	call	180df14 <xQueueSemaphoreTake>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 182b59c:	00003c06 	br	182b690 <altera_avalon_uart_write+0x148>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 182b5a0:	e0bffb17 	ldw	r2,-20(fp)
 182b5a4:	10800517 	ldw	r2,20(r2)
 182b5a8:	10800044 	addi	r2,r2,1
 182b5ac:	10800fcc 	andi	r2,r2,63
 182b5b0:	e0bff415 	stw	r2,-48(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 182b5b4:	e0bffb17 	ldw	r2,-20(fp)
 182b5b8:	10c00417 	ldw	r3,16(r2)
 182b5bc:	e0bff417 	ldw	r2,-48(fp)
 182b5c0:	1880221e 	bne	r3,r2,182b64c <altera_avalon_uart_write+0x104>
    {
      if (no_block)
 182b5c4:	e0bff217 	ldw	r2,-56(fp)
 182b5c8:	10000526 	beq	r2,zero,182b5e0 <altera_avalon_uart_write+0x98>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 182b5cc:	182b50c0 	call	182b50c <alt_get_errno>
 182b5d0:	1007883a 	mov	r3,r2
 182b5d4:	008002c4 	movi	r2,11
 182b5d8:	18800015 	stw	r2,0(r3)
        break;
 182b5dc:	00002e06 	br	182b698 <altera_avalon_uart_write+0x150>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182b5e0:	0005303a 	rdctl	r2,status
 182b5e4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182b5e8:	e0fff617 	ldw	r3,-40(fp)
 182b5ec:	00bfff84 	movi	r2,-2
 182b5f0:	1884703a 	and	r2,r3,r2
 182b5f4:	1001703a 	wrctl	status,r2
  
  return context;
 182b5f8:	e0bff617 	ldw	r2,-40(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 182b5fc:	e0bff515 	stw	r2,-44(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 182b600:	e0bffb17 	ldw	r2,-20(fp)
 182b604:	10800117 	ldw	r2,4(r2)
 182b608:	10c11014 	ori	r3,r2,1088
 182b60c:	e0bffb17 	ldw	r2,-20(fp)
 182b610:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 182b614:	e0bffb17 	ldw	r2,-20(fp)
 182b618:	10800017 	ldw	r2,0(r2)
 182b61c:	10800304 	addi	r2,r2,12
 182b620:	e0fffb17 	ldw	r3,-20(fp)
 182b624:	18c00117 	ldw	r3,4(r3)
 182b628:	10c00035 	stwio	r3,0(r2)
 182b62c:	e0bff517 	ldw	r2,-44(fp)
 182b630:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182b634:	e0bff317 	ldw	r2,-52(fp)
 182b638:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 182b63c:	e0bffb17 	ldw	r2,-20(fp)
 182b640:	10c00417 	ldw	r3,16(r2)
 182b644:	e0bff417 	ldw	r2,-48(fp)
 182b648:	18bffc26 	beq	r3,r2,182b63c <__ram_exceptions_end+0xff81b34c>
      }
    }

    count--;
 182b64c:	e0bff117 	ldw	r2,-60(fp)
 182b650:	10bfffc4 	addi	r2,r2,-1
 182b654:	e0bff115 	stw	r2,-60(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 182b658:	e0bffb17 	ldw	r2,-20(fp)
 182b65c:	10c00517 	ldw	r3,20(r2)
 182b660:	e0bffc17 	ldw	r2,-16(fp)
 182b664:	11000044 	addi	r4,r2,1
 182b668:	e13ffc15 	stw	r4,-16(fp)
 182b66c:	10800003 	ldbu	r2,0(r2)
 182b670:	1009883a 	mov	r4,r2
 182b674:	e0bffb17 	ldw	r2,-20(fp)
 182b678:	10c5883a 	add	r2,r2,r3
 182b67c:	10801904 	addi	r2,r2,100
 182b680:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 182b684:	e0bffb17 	ldw	r2,-20(fp)
 182b688:	e0fff417 	ldw	r3,-48(fp)
 182b68c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 182b690:	e0bff117 	ldw	r2,-60(fp)
 182b694:	103fc21e 	bne	r2,zero,182b5a0 <__ram_exceptions_end+0xff81b2b0>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
 182b698:	e0bffb17 	ldw	r2,-20(fp)
 182b69c:	10800817 	ldw	r2,32(r2)
 182b6a0:	000f883a 	mov	r7,zero
 182b6a4:	000d883a 	mov	r6,zero
 182b6a8:	000b883a 	mov	r5,zero
 182b6ac:	1009883a 	mov	r4,r2
 182b6b0:	180d9880 	call	180d988 <xQueueGenericSend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182b6b4:	0005303a 	rdctl	r2,status
 182b6b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182b6bc:	e0fff817 	ldw	r3,-32(fp)
 182b6c0:	00bfff84 	movi	r2,-2
 182b6c4:	1884703a 	and	r2,r3,r2
 182b6c8:	1001703a 	wrctl	status,r2
  
  return context;
 182b6cc:	e0bff817 	ldw	r2,-32(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 182b6d0:	e0bff515 	stw	r2,-44(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 182b6d4:	e0bffb17 	ldw	r2,-20(fp)
 182b6d8:	10800117 	ldw	r2,4(r2)
 182b6dc:	10c11014 	ori	r3,r2,1088
 182b6e0:	e0bffb17 	ldw	r2,-20(fp)
 182b6e4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 182b6e8:	e0bffb17 	ldw	r2,-20(fp)
 182b6ec:	10800017 	ldw	r2,0(r2)
 182b6f0:	10800304 	addi	r2,r2,12
 182b6f4:	e0fffb17 	ldw	r3,-20(fp)
 182b6f8:	18c00117 	ldw	r3,4(r3)
 182b6fc:	10c00035 	stwio	r3,0(r2)
 182b700:	e0bff517 	ldw	r2,-44(fp)
 182b704:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182b708:	e0bff717 	ldw	r2,-36(fp)
 182b70c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 182b710:	e0fffd17 	ldw	r3,-12(fp)
 182b714:	e0bff117 	ldw	r2,-60(fp)
 182b718:	1885c83a 	sub	r2,r3,r2
}
 182b71c:	e037883a 	mov	sp,fp
 182b720:	dfc00117 	ldw	ra,4(sp)
 182b724:	df000017 	ldw	fp,0(sp)
 182b728:	dec00204 	addi	sp,sp,8
 182b72c:	f800283a 	ret

0182b730 <__env_lock>:
xSemaphoreHandle alt_envsem;

/* __env_lock needs to provide recursive mutex locking */

void __env_lock ( struct _reent *_r )
{
 182b730:	defffd04 	addi	sp,sp,-12
 182b734:	dfc00215 	stw	ra,8(sp)
 182b738:	df000115 	stw	fp,4(sp)
 182b73c:	df000104 	addi	fp,sp,4
 182b740:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 182b744:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182b748:	10000b26 	beq	r2,zero,182b778 <__env_lock+0x48>
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_envsem, 10) != pdTRUE)
 182b74c:	00000206 	br	182b758 <__env_lock+0x28>
		vTaskDelay(1);
 182b750:	01000044 	movi	r4,1
 182b754:	180f1d80 	call	180f1d8 <vTaskDelay>
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_envsem, 10) != pdTRUE)
 182b758:	d0a7ff17 	ldw	r2,-24580(gp)
 182b75c:	01400284 	movi	r5,10
 182b760:	1009883a 	mov	r4,r2
 182b764:	180d8940 	call	180d894 <xQueueTakeMutexRecursive>
 182b768:	10800058 	cmpnei	r2,r2,1
 182b76c:	103ff81e 	bne	r2,zero,182b750 <__ram_exceptions_end+0xff81b460>
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
 182b770:	0001883a 	nop
 182b774:	00000106 	br	182b77c <__env_lock+0x4c>

void __env_lock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 182b778:	0001883a 	nop
	while (xSemaphoreTakeRecursive(alt_envsem, 10) != pdTRUE)
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
}
 182b77c:	e037883a 	mov	sp,fp
 182b780:	dfc00117 	ldw	ra,4(sp)
 182b784:	df000017 	ldw	fp,0(sp)
 182b788:	dec00204 	addi	sp,sp,8
 182b78c:	f800283a 	ret

0182b790 <__env_unlock>:

/* __env_unlock needs to provide recursive mutex unlocking */

void __env_unlock ( struct _reent *_r )
{
 182b790:	defffd04 	addi	sp,sp,-12
 182b794:	dfc00215 	stw	ra,8(sp)
 182b798:	df000115 	stw	fp,4(sp)
 182b79c:	df000104 	addi	fp,sp,4
 182b7a0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 182b7a4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182b7a8:	10000426 	beq	r2,zero,182b7bc <__env_unlock+0x2c>
		return;
	  
	xSemaphoreGiveRecursive(alt_envsem);
 182b7ac:	d0a7ff17 	ldw	r2,-24580(gp)
 182b7b0:	1009883a 	mov	r4,r2
 182b7b4:	180d8040 	call	180d804 <xQueueGiveMutexRecursive>
 182b7b8:	00000106 	br	182b7c0 <__env_unlock+0x30>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 182b7bc:	0001883a 	nop
	  
	xSemaphoreGiveRecursive(alt_envsem);
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 182b7c0:	e037883a 	mov	sp,fp
 182b7c4:	dfc00117 	ldw	ra,4(sp)
 182b7c8:	df000017 	ldw	fp,0(sp)
 182b7cc:	dec00204 	addi	sp,sp,8
 182b7d0:	f800283a 	ret

0182b7d4 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 182b7d4:	defffc04 	addi	sp,sp,-16
 182b7d8:	dfc00315 	stw	ra,12(sp)
 182b7dc:	df000215 	stw	fp,8(sp)
 182b7e0:	df000204 	addi	fp,sp,8
 182b7e4:	e13fff15 	stw	r4,-4(fp)
void *pvReturn;

	vTaskSuspendAll();
 182b7e8:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 182b7ec:	e13fff17 	ldw	r4,-4(fp)
 182b7f0:	183c5000 	call	183c500 <malloc>
 182b7f4:	e0bffe15 	stw	r2,-8(fp)
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 182b7f8:	180f9f00 	call	180f9f0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 182b7fc:	e0bffe17 	ldw	r2,-8(fp)
 182b800:	1000011e 	bne	r2,zero,182b808 <pvPortMalloc+0x34>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 182b804:	180031c0 	call	180031c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 182b808:	e0bffe17 	ldw	r2,-8(fp)
}
 182b80c:	e037883a 	mov	sp,fp
 182b810:	dfc00117 	ldw	ra,4(sp)
 182b814:	df000017 	ldw	fp,0(sp)
 182b818:	dec00204 	addi	sp,sp,8
 182b81c:	f800283a 	ret

0182b820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 182b820:	defffd04 	addi	sp,sp,-12
 182b824:	dfc00215 	stw	ra,8(sp)
 182b828:	df000115 	stw	fp,4(sp)
 182b82c:	df000104 	addi	fp,sp,4
 182b830:	e13fff15 	stw	r4,-4(fp)
	if( pv )
 182b834:	e0bfff17 	ldw	r2,-4(fp)
 182b838:	10000426 	beq	r2,zero,182b84c <vPortFree+0x2c>
	{
		vTaskSuspendAll();
 182b83c:	180f9c40 	call	180f9c4 <vTaskSuspendAll>
		{
			free( pv );
 182b840:	e13fff17 	ldw	r4,-4(fp)
 182b844:	183c5140 	call	183c514 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 182b848:	180f9f00 	call	180f9f0 <xTaskResumeAll>
	}
}
 182b84c:	0001883a 	nop
 182b850:	e037883a 	mov	sp,fp
 182b854:	dfc00117 	ldw	ra,4(sp)
 182b858:	df000017 	ldw	fp,0(sp)
 182b85c:	dec00204 	addi	sp,sp,8
 182b860:	f800283a 	ret

0182b864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 182b864:	defffe04 	addi	sp,sp,-8
 182b868:	df000115 	stw	fp,4(sp)
 182b86c:	df000104 	addi	fp,sp,4
 182b870:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 182b874:	e0bfff17 	ldw	r2,-4(fp)
 182b878:	10c00204 	addi	r3,r2,8
 182b87c:	e0bfff17 	ldw	r2,-4(fp)
 182b880:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 182b884:	e0bfff17 	ldw	r2,-4(fp)
 182b888:	00ffffc4 	movi	r3,-1
 182b88c:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 182b890:	e0bfff17 	ldw	r2,-4(fp)
 182b894:	10c00204 	addi	r3,r2,8
 182b898:	e0bfff17 	ldw	r2,-4(fp)
 182b89c:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 182b8a0:	e0bfff17 	ldw	r2,-4(fp)
 182b8a4:	10c00204 	addi	r3,r2,8
 182b8a8:	e0bfff17 	ldw	r2,-4(fp)
 182b8ac:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 182b8b0:	e0bfff17 	ldw	r2,-4(fp)
 182b8b4:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 182b8b8:	0001883a 	nop
 182b8bc:	e037883a 	mov	sp,fp
 182b8c0:	df000017 	ldw	fp,0(sp)
 182b8c4:	dec00104 	addi	sp,sp,4
 182b8c8:	f800283a 	ret

0182b8cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 182b8cc:	defffe04 	addi	sp,sp,-8
 182b8d0:	df000115 	stw	fp,4(sp)
 182b8d4:	df000104 	addi	fp,sp,4
 182b8d8:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 182b8dc:	e0bfff17 	ldw	r2,-4(fp)
 182b8e0:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 182b8e4:	0001883a 	nop
 182b8e8:	e037883a 	mov	sp,fp
 182b8ec:	df000017 	ldw	fp,0(sp)
 182b8f0:	dec00104 	addi	sp,sp,4
 182b8f4:	f800283a 	ret

0182b8f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 182b8f8:	defffc04 	addi	sp,sp,-16
 182b8fc:	df000315 	stw	fp,12(sp)
 182b900:	df000304 	addi	fp,sp,12
 182b904:	e13ffe15 	stw	r4,-8(fp)
 182b908:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 182b90c:	e0bffe17 	ldw	r2,-8(fp)
 182b910:	10800117 	ldw	r2,4(r2)
 182b914:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 182b918:	e0bfff17 	ldw	r2,-4(fp)
 182b91c:	e0fffd17 	ldw	r3,-12(fp)
 182b920:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 182b924:	e0bffd17 	ldw	r2,-12(fp)
 182b928:	10c00217 	ldw	r3,8(r2)
 182b92c:	e0bfff17 	ldw	r2,-4(fp)
 182b930:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 182b934:	e0bffd17 	ldw	r2,-12(fp)
 182b938:	10800217 	ldw	r2,8(r2)
 182b93c:	e0ffff17 	ldw	r3,-4(fp)
 182b940:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 182b944:	e0bffd17 	ldw	r2,-12(fp)
 182b948:	e0ffff17 	ldw	r3,-4(fp)
 182b94c:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 182b950:	e0bfff17 	ldw	r2,-4(fp)
 182b954:	e0fffe17 	ldw	r3,-8(fp)
 182b958:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 182b95c:	e0bffe17 	ldw	r2,-8(fp)
 182b960:	10800017 	ldw	r2,0(r2)
 182b964:	10c00044 	addi	r3,r2,1
 182b968:	e0bffe17 	ldw	r2,-8(fp)
 182b96c:	10c00015 	stw	r3,0(r2)
}
 182b970:	0001883a 	nop
 182b974:	e037883a 	mov	sp,fp
 182b978:	df000017 	ldw	fp,0(sp)
 182b97c:	dec00104 	addi	sp,sp,4
 182b980:	f800283a 	ret

0182b984 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 182b984:	defffb04 	addi	sp,sp,-20
 182b988:	df000415 	stw	fp,16(sp)
 182b98c:	df000404 	addi	fp,sp,16
 182b990:	e13ffe15 	stw	r4,-8(fp)
 182b994:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 182b998:	e0bfff17 	ldw	r2,-4(fp)
 182b99c:	10800017 	ldw	r2,0(r2)
 182b9a0:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 182b9a4:	e0bffd17 	ldw	r2,-12(fp)
 182b9a8:	10bfffd8 	cmpnei	r2,r2,-1
 182b9ac:	1000041e 	bne	r2,zero,182b9c0 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 182b9b0:	e0bffe17 	ldw	r2,-8(fp)
 182b9b4:	10800417 	ldw	r2,16(r2)
 182b9b8:	e0bffc15 	stw	r2,-16(fp)
 182b9bc:	00000c06 	br	182b9f0 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 182b9c0:	e0bffe17 	ldw	r2,-8(fp)
 182b9c4:	10800204 	addi	r2,r2,8
 182b9c8:	e0bffc15 	stw	r2,-16(fp)
 182b9cc:	00000306 	br	182b9dc <vListInsert+0x58>
 182b9d0:	e0bffc17 	ldw	r2,-16(fp)
 182b9d4:	10800117 	ldw	r2,4(r2)
 182b9d8:	e0bffc15 	stw	r2,-16(fp)
 182b9dc:	e0bffc17 	ldw	r2,-16(fp)
 182b9e0:	10800117 	ldw	r2,4(r2)
 182b9e4:	10800017 	ldw	r2,0(r2)
 182b9e8:	e0fffd17 	ldw	r3,-12(fp)
 182b9ec:	18bff82e 	bgeu	r3,r2,182b9d0 <__ram_exceptions_end+0xff81b6e0>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 182b9f0:	e0bffc17 	ldw	r2,-16(fp)
 182b9f4:	10c00117 	ldw	r3,4(r2)
 182b9f8:	e0bfff17 	ldw	r2,-4(fp)
 182b9fc:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 182ba00:	e0bfff17 	ldw	r2,-4(fp)
 182ba04:	10800117 	ldw	r2,4(r2)
 182ba08:	e0ffff17 	ldw	r3,-4(fp)
 182ba0c:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 182ba10:	e0bfff17 	ldw	r2,-4(fp)
 182ba14:	e0fffc17 	ldw	r3,-16(fp)
 182ba18:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 182ba1c:	e0bffc17 	ldw	r2,-16(fp)
 182ba20:	e0ffff17 	ldw	r3,-4(fp)
 182ba24:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 182ba28:	e0bfff17 	ldw	r2,-4(fp)
 182ba2c:	e0fffe17 	ldw	r3,-8(fp)
 182ba30:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 182ba34:	e0bffe17 	ldw	r2,-8(fp)
 182ba38:	10800017 	ldw	r2,0(r2)
 182ba3c:	10c00044 	addi	r3,r2,1
 182ba40:	e0bffe17 	ldw	r2,-8(fp)
 182ba44:	10c00015 	stw	r3,0(r2)
}
 182ba48:	0001883a 	nop
 182ba4c:	e037883a 	mov	sp,fp
 182ba50:	df000017 	ldw	fp,0(sp)
 182ba54:	dec00104 	addi	sp,sp,4
 182ba58:	f800283a 	ret

0182ba5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 182ba5c:	defffd04 	addi	sp,sp,-12
 182ba60:	df000215 	stw	fp,8(sp)
 182ba64:	df000204 	addi	fp,sp,8
 182ba68:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 182ba6c:	e0bfff17 	ldw	r2,-4(fp)
 182ba70:	10800417 	ldw	r2,16(r2)
 182ba74:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 182ba78:	e0bfff17 	ldw	r2,-4(fp)
 182ba7c:	10800117 	ldw	r2,4(r2)
 182ba80:	e0ffff17 	ldw	r3,-4(fp)
 182ba84:	18c00217 	ldw	r3,8(r3)
 182ba88:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 182ba8c:	e0bfff17 	ldw	r2,-4(fp)
 182ba90:	10800217 	ldw	r2,8(r2)
 182ba94:	e0ffff17 	ldw	r3,-4(fp)
 182ba98:	18c00117 	ldw	r3,4(r3)
 182ba9c:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 182baa0:	e0bffe17 	ldw	r2,-8(fp)
 182baa4:	10c00117 	ldw	r3,4(r2)
 182baa8:	e0bfff17 	ldw	r2,-4(fp)
 182baac:	1880041e 	bne	r3,r2,182bac0 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 182bab0:	e0bfff17 	ldw	r2,-4(fp)
 182bab4:	10c00217 	ldw	r3,8(r2)
 182bab8:	e0bffe17 	ldw	r2,-8(fp)
 182babc:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 182bac0:	e0bfff17 	ldw	r2,-4(fp)
 182bac4:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 182bac8:	e0bffe17 	ldw	r2,-8(fp)
 182bacc:	10800017 	ldw	r2,0(r2)
 182bad0:	10ffffc4 	addi	r3,r2,-1
 182bad4:	e0bffe17 	ldw	r2,-8(fp)
 182bad8:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 182badc:	e0bffe17 	ldw	r2,-8(fp)
 182bae0:	10800017 	ldw	r2,0(r2)
}
 182bae4:	e037883a 	mov	sp,fp
 182bae8:	df000017 	ldw	fp,0(sp)
 182baec:	dec00104 	addi	sp,sp,4
 182baf0:	f800283a 	ret

0182baf4 <prvReadGp>:
#define portINITIAL_ESTATUS     ( portSTACK_TYPE ) 0x01 

/*-----------------------------------------------------------*/

static inline void prvReadGp( unsigned long *ulValue )
{
 182baf4:	defffe04 	addi	sp,sp,-8
 182baf8:	df000115 	stw	fp,4(sp)
 182bafc:	df000104 	addi	fp,sp,4
 182bb00:	e13fff15 	stw	r4,-4(fp)
	asm volatile ( "stw gp, (%0)" : : "r"(ulValue) );
 182bb04:	e0bfff17 	ldw	r2,-4(fp)
 182bb08:	16800015 	stw	gp,0(r2)
}
 182bb0c:	0001883a 	nop
 182bb10:	e037883a 	mov	sp,fp
 182bb14:	df000017 	ldw	fp,0(sp)
 182bb18:	dec00104 	addi	sp,sp,4
 182bb1c:	f800283a 	ret

0182bb20 <enh_alt_irq_disable_all>:
/*-----------------------------------------------------------*/

static volatile alt_irq_context lastContext;

void enh_alt_irq_disable_all()
{
 182bb20:	defffd04 	addi	sp,sp,-12
 182bb24:	df000215 	stw	fp,8(sp)
 182bb28:	df000204 	addi	fp,sp,8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182bb2c:	0005303a 	rdctl	r2,status
 182bb30:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182bb34:	e0ffff17 	ldw	r3,-4(fp)
 182bb38:	00bfff84 	movi	r2,-2
 182bb3c:	1884703a 	and	r2,r3,r2
 182bb40:	1001703a 	wrctl	status,r2
  
  return context;
 182bb44:	e0bfff17 	ldw	r2,-4(fp)
	alt_irq_context ctxt = alt_irq_disable_all();
 182bb48:	e0bffe15 	stw	r2,-8(fp)
	lastContext |= ctxt;
 182bb4c:	d0e80017 	ldw	r3,-24576(gp)
 182bb50:	e0bffe17 	ldw	r2,-8(fp)
 182bb54:	1884b03a 	or	r2,r3,r2
 182bb58:	d0a80015 	stw	r2,-24576(gp)
}
 182bb5c:	0001883a 	nop
 182bb60:	e037883a 	mov	sp,fp
 182bb64:	df000017 	ldw	fp,0(sp)
 182bb68:	dec00104 	addi	sp,sp,4
 182bb6c:	f800283a 	ret

0182bb70 <enh_alt_irq_enable_all>:

void enh_alt_irq_enable_all()
{
 182bb70:	defffd04 	addi	sp,sp,-12
 182bb74:	df000215 	stw	fp,8(sp)
 182bb78:	df000204 	addi	fp,sp,8
	alt_irq_context restore = lastContext;
 182bb7c:	d0a80017 	ldw	r2,-24576(gp)
 182bb80:	e0bffe15 	stw	r2,-8(fp)
	lastContext = 0;
 182bb84:	d0280015 	stw	zero,-24576(gp)
 182bb88:	e0bffe17 	ldw	r2,-8(fp)
 182bb8c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182bb90:	e0bfff17 	ldw	r2,-4(fp)
 182bb94:	1001703a 	wrctl	status,r2
	alt_irq_enable_all(restore);
}
 182bb98:	0001883a 	nop
 182bb9c:	e037883a 	mov	sp,fp
 182bba0:	df000017 	ldw	fp,0(sp)
 182bba4:	dec00104 	addi	sp,sp,4
 182bba8:	f800283a 	ret

0182bbac <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{    
 182bbac:	defff904 	addi	sp,sp,-28
 182bbb0:	dfc00615 	stw	ra,24(sp)
 182bbb4:	df000515 	stw	fp,20(sp)
 182bbb8:	df000504 	addi	fp,sp,20
 182bbbc:	e13ffd15 	stw	r4,-12(fp)
 182bbc0:	e17ffe15 	stw	r5,-8(fp)
 182bbc4:	e1bfff15 	stw	r6,-4(fp)
portSTACK_TYPE *pxFramePointer = pxTopOfStack - 1;
 182bbc8:	e0bffd17 	ldw	r2,-12(fp)
 182bbcc:	10bfff04 	addi	r2,r2,-4
 182bbd0:	e0bffb15 	stw	r2,-20(fp)
portSTACK_TYPE xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
 182bbd4:	e0bffc04 	addi	r2,fp,-16
 182bbd8:	1009883a 	mov	r4,r2
 182bbdc:	182baf40 	call	182baf4 <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
 182bbe0:	e0fffd17 	ldw	r3,-12(fp)
 182bbe4:	00b7abb4 	movhi	r2,57006
 182bbe8:	10afbbc4 	addi	r2,r2,-16657
 182bbec:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
 182bbf0:	e0bffd17 	ldw	r2,-12(fp)
 182bbf4:	10bfff04 	addi	r2,r2,-4
 182bbf8:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( portSTACK_TYPE ) pxFramePointer;
 182bbfc:	e0fffb17 	ldw	r3,-20(fp)
 182bc00:	e0bffd17 	ldw	r2,-12(fp)
 182bc04:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 182bc08:	e0bffd17 	ldw	r2,-12(fp)
 182bc0c:	10bfff04 	addi	r2,r2,-4
 182bc10:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
 182bc14:	e0fffc17 	ldw	r3,-16(fp)
 182bc18:	e0bffd17 	ldw	r2,-12(fp)
 182bc1c:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
 182bc20:	e0bffd17 	ldw	r2,-12(fp)
 182bc24:	10bff704 	addi	r2,r2,-36
 182bc28:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( portSTACK_TYPE ) pxCode;
 182bc2c:	e0fffe17 	ldw	r3,-8(fp)
 182bc30:	e0bffd17 	ldw	r2,-12(fp)
 182bc34:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 182bc38:	e0bffd17 	ldw	r2,-12(fp)
 182bc3c:	10bfff04 	addi	r2,r2,-4
 182bc40:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS;
 182bc44:	e0bffd17 	ldw	r2,-12(fp)
 182bc48:	00c00044 	movi	r3,1
 182bc4c:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */
    pxTopOfStack -= 12;
 182bc50:	e0bffd17 	ldw	r2,-12(fp)
 182bc54:	10bff404 	addi	r2,r2,-48
 182bc58:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( portSTACK_TYPE ) pvParameters;
 182bc5c:	e0ffff17 	ldw	r3,-4(fp)
 182bc60:	e0bffd17 	ldw	r2,-12(fp)
 182bc64:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
 182bc68:	e0bffd17 	ldw	r2,-12(fp)
 182bc6c:	10bffb04 	addi	r2,r2,-20
 182bc70:	e0bffd15 	stw	r2,-12(fp)

    /* Initialize stack pointer to prevent debugger crash. */
    *pxTopOfStack = ( portSTACK_TYPE ) xPortStartScheduler;
 182bc74:	008060f4 	movhi	r2,387
 182bc78:	10af2704 	addi	r2,r2,-17252
 182bc7c:	e0fffd17 	ldw	r3,-12(fp)
 182bc80:	18800015 	stw	r2,0(r3)

    return pxTopOfStack;
 182bc84:	e0bffd17 	ldw	r2,-12(fp)
}
 182bc88:	e037883a 	mov	sp,fp
 182bc8c:	dfc00117 	ldw	ra,4(sp)
 182bc90:	df000017 	ldw	fp,0(sp)
 182bc94:	dec00204 	addi	sp,sp,8
 182bc98:	f800283a 	ret

0182bc9c <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
portBASE_TYPE xPortStartScheduler( void )
{
 182bc9c:	deffff04 	addi	sp,sp,-4
 182bca0:	df000015 	stw	fp,0(sp)
 182bca4:	d839883a 	mov	fp,sp
 182bca8:	00808074 	movhi	r2,513
	// Just load the task which is currently revered to by TCB
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
 182bcac:	10803604 	addi	r2,r2,216
 182bcb0:	1000683a 	jmp	r2
                    " jmp r2                                          " );

    // This should never be reached
    return 0;
 182bcb4:	0005883a 	mov	r2,zero
}
 182bcb8:	e037883a 	mov	sp,fp
 182bcbc:	df000017 	ldw	fp,0(sp)
 182bcc0:	dec00104 	addi	sp,sp,4
 182bcc4:	f800283a 	ret

0182bcc8 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 182bcc8:	deffff04 	addi	sp,sp,-4
 182bccc:	df000015 	stw	fp,0(sp)
 182bcd0:	d839883a 	mov	fp,sp
	// It is unlikely that the NIOS2 port will require this function as there is nothing to return to.
}
 182bcd4:	0001883a 	nop
 182bcd8:	e037883a 	mov	sp,fp
 182bcdc:	df000017 	ldw	fp,0(sp)
 182bce0:	dec00104 	addi	sp,sp,4
 182bce4:	f800283a 	ret

0182bce8 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
 182bce8:	defffe04 	addi	sp,sp,-8
 182bcec:	dfc00115 	stw	ra,4(sp)
 182bcf0:	df000015 	stw	fp,0(sp)
 182bcf4:	d839883a 	mov	fp,sp
	// only make ticks if the scheduler has been started.
	if ( xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED )
 182bcf8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182bcfc:	10800060 	cmpeqi	r2,r2,1
 182bd00:	1000021e 	bne	r2,zero,182bd0c <vPortSysTickHandler+0x24>
	{
		// Increment the Kernel Tick.
		xTaskIncrementTick();
 182bd04:	180fe000 	call	180fe00 <xTaskIncrementTick>

		// If using preemption, also force a context switch.
#if configUSE_PREEMPTION == 1
		vTaskSwitchContext();
 182bd08:	180ffb00 	call	180ffb0 <vTaskSwitchContext>
#endif
	}
}
 182bd0c:	0001883a 	nop
 182bd10:	e037883a 	mov	sp,fp
 182bd14:	dfc00117 	ldw	ra,4(sp)
 182bd18:	df000017 	ldw	fp,0(sp)
 182bd1c:	dec00204 	addi	sp,sp,8
 182bd20:	f800283a 	ret

0182bd24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 182bd24:	defff504 	addi	sp,sp,-44
 182bd28:	df000a15 	stw	fp,40(sp)
 182bd2c:	df000a04 	addi	fp,sp,40
 182bd30:	e13ffc15 	stw	r4,-16(fp)
 182bd34:	e17ffd15 	stw	r5,-12(fp)
 182bd38:	e1bffe15 	stw	r6,-8(fp)
 182bd3c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 182bd40:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 182bd44:	d0a80717 	ldw	r2,-24548(gp)
  
  if (alt_ticks_per_second ())
 182bd48:	10003c26 	beq	r2,zero,182be3c <alt_alarm_start+0x118>
  {
    if (alarm)
 182bd4c:	e0bffc17 	ldw	r2,-16(fp)
 182bd50:	10003826 	beq	r2,zero,182be34 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 182bd54:	e0bffc17 	ldw	r2,-16(fp)
 182bd58:	e0fffe17 	ldw	r3,-8(fp)
 182bd5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 182bd60:	e0bffc17 	ldw	r2,-16(fp)
 182bd64:	e0ffff17 	ldw	r3,-4(fp)
 182bd68:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182bd6c:	0005303a 	rdctl	r2,status
 182bd70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182bd74:	e0fff917 	ldw	r3,-28(fp)
 182bd78:	00bfff84 	movi	r2,-2
 182bd7c:	1884703a 	and	r2,r3,r2
 182bd80:	1001703a 	wrctl	status,r2
  
  return context;
 182bd84:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 182bd88:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 182bd8c:	d0a80817 	ldw	r2,-24544(gp)
      
      current_nticks = alt_nticks();
 182bd90:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 182bd94:	e0fffd17 	ldw	r3,-12(fp)
 182bd98:	e0bff617 	ldw	r2,-40(fp)
 182bd9c:	1885883a 	add	r2,r3,r2
 182bda0:	10c00044 	addi	r3,r2,1
 182bda4:	e0bffc17 	ldw	r2,-16(fp)
 182bda8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 182bdac:	e0bffc17 	ldw	r2,-16(fp)
 182bdb0:	10c00217 	ldw	r3,8(r2)
 182bdb4:	e0bff617 	ldw	r2,-40(fp)
 182bdb8:	1880042e 	bgeu	r3,r2,182bdcc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 182bdbc:	e0bffc17 	ldw	r2,-16(fp)
 182bdc0:	00c00044 	movi	r3,1
 182bdc4:	10c00405 	stb	r3,16(r2)
 182bdc8:	00000206 	br	182bdd4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 182bdcc:	e0bffc17 	ldw	r2,-16(fp)
 182bdd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 182bdd4:	e0bffc17 	ldw	r2,-16(fp)
 182bdd8:	d0e01c04 	addi	r3,gp,-32656
 182bddc:	e0fffa15 	stw	r3,-24(fp)
 182bde0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 182bde4:	e0bffb17 	ldw	r2,-20(fp)
 182bde8:	e0fffa17 	ldw	r3,-24(fp)
 182bdec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 182bdf0:	e0bffa17 	ldw	r2,-24(fp)
 182bdf4:	10c00017 	ldw	r3,0(r2)
 182bdf8:	e0bffb17 	ldw	r2,-20(fp)
 182bdfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 182be00:	e0bffa17 	ldw	r2,-24(fp)
 182be04:	10800017 	ldw	r2,0(r2)
 182be08:	e0fffb17 	ldw	r3,-20(fp)
 182be0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 182be10:	e0bffa17 	ldw	r2,-24(fp)
 182be14:	e0fffb17 	ldw	r3,-20(fp)
 182be18:	10c00015 	stw	r3,0(r2)
 182be1c:	e0bff817 	ldw	r2,-32(fp)
 182be20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182be24:	e0bff717 	ldw	r2,-36(fp)
 182be28:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 182be2c:	0005883a 	mov	r2,zero
 182be30:	00000306 	br	182be40 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 182be34:	00bffa84 	movi	r2,-22
 182be38:	00000106 	br	182be40 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 182be3c:	00bfde84 	movi	r2,-134
  }
}
 182be40:	e037883a 	mov	sp,fp
 182be44:	df000017 	ldw	fp,0(sp)
 182be48:	dec00104 	addi	sp,sp,4
 182be4c:	f800283a 	ret

0182be50 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 182be50:	defffa04 	addi	sp,sp,-24
 182be54:	dfc00515 	stw	ra,20(sp)
 182be58:	df000415 	stw	fp,16(sp)
 182be5c:	df000404 	addi	fp,sp,16
 182be60:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 182be64:	008000c4 	movi	r2,3
 182be68:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 182be6c:	e0fffd17 	ldw	r3,-12(fp)
 182be70:	008003f4 	movhi	r2,15
 182be74:	10909004 	addi	r2,r2,16960
 182be78:	1885383a 	mul	r2,r3,r2
 182be7c:	100b883a 	mov	r5,r2
 182be80:	0100bef4 	movhi	r4,763
 182be84:	213c2004 	addi	r4,r4,-3968
 182be88:	180ac1c0 	call	180ac1c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 182be8c:	100b883a 	mov	r5,r2
 182be90:	01200034 	movhi	r4,32768
 182be94:	213fffc4 	addi	r4,r4,-1
 182be98:	180ac1c0 	call	180ac1c <__udivsi3>
 182be9c:	100b883a 	mov	r5,r2
 182bea0:	e13fff17 	ldw	r4,-4(fp)
 182bea4:	180ac1c0 	call	180ac1c <__udivsi3>
 182bea8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 182beac:	e0bffe17 	ldw	r2,-8(fp)
 182beb0:	10002a26 	beq	r2,zero,182bf5c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 182beb4:	e03ffc15 	stw	zero,-16(fp)
 182beb8:	00001706 	br	182bf18 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 182bebc:	00a00034 	movhi	r2,32768
 182bec0:	10bfffc4 	addi	r2,r2,-1
 182bec4:	10bfffc4 	addi	r2,r2,-1
 182bec8:	103ffe1e 	bne	r2,zero,182bec4 <__ram_exceptions_end+0xff81bbd4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 182becc:	e0fffd17 	ldw	r3,-12(fp)
 182bed0:	008003f4 	movhi	r2,15
 182bed4:	10909004 	addi	r2,r2,16960
 182bed8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 182bedc:	100b883a 	mov	r5,r2
 182bee0:	0100bef4 	movhi	r4,763
 182bee4:	213c2004 	addi	r4,r4,-3968
 182bee8:	180ac1c0 	call	180ac1c <__udivsi3>
 182beec:	100b883a 	mov	r5,r2
 182bef0:	01200034 	movhi	r4,32768
 182bef4:	213fffc4 	addi	r4,r4,-1
 182bef8:	180ac1c0 	call	180ac1c <__udivsi3>
 182befc:	1007883a 	mov	r3,r2
 182bf00:	e0bfff17 	ldw	r2,-4(fp)
 182bf04:	10c5c83a 	sub	r2,r2,r3
 182bf08:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 182bf0c:	e0bffc17 	ldw	r2,-16(fp)
 182bf10:	10800044 	addi	r2,r2,1
 182bf14:	e0bffc15 	stw	r2,-16(fp)
 182bf18:	e0fffc17 	ldw	r3,-16(fp)
 182bf1c:	e0bffe17 	ldw	r2,-8(fp)
 182bf20:	18bfe616 	blt	r3,r2,182bebc <__ram_exceptions_end+0xff81bbcc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 182bf24:	e0fffd17 	ldw	r3,-12(fp)
 182bf28:	008003f4 	movhi	r2,15
 182bf2c:	10909004 	addi	r2,r2,16960
 182bf30:	1885383a 	mul	r2,r3,r2
 182bf34:	100b883a 	mov	r5,r2
 182bf38:	0100bef4 	movhi	r4,763
 182bf3c:	213c2004 	addi	r4,r4,-3968
 182bf40:	180ac1c0 	call	180ac1c <__udivsi3>
 182bf44:	1007883a 	mov	r3,r2
 182bf48:	e0bfff17 	ldw	r2,-4(fp)
 182bf4c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 182bf50:	10bfffc4 	addi	r2,r2,-1
 182bf54:	103ffe1e 	bne	r2,zero,182bf50 <__ram_exceptions_end+0xff81bc60>
 182bf58:	00000d06 	br	182bf90 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 182bf5c:	e0fffd17 	ldw	r3,-12(fp)
 182bf60:	008003f4 	movhi	r2,15
 182bf64:	10909004 	addi	r2,r2,16960
 182bf68:	1885383a 	mul	r2,r3,r2
 182bf6c:	100b883a 	mov	r5,r2
 182bf70:	0100bef4 	movhi	r4,763
 182bf74:	213c2004 	addi	r4,r4,-3968
 182bf78:	180ac1c0 	call	180ac1c <__udivsi3>
 182bf7c:	1007883a 	mov	r3,r2
 182bf80:	e0bfff17 	ldw	r2,-4(fp)
 182bf84:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 182bf88:	10bfffc4 	addi	r2,r2,-1
 182bf8c:	00bffe16 	blt	zero,r2,182bf88 <__ram_exceptions_end+0xff81bc98>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 182bf90:	0005883a 	mov	r2,zero
}
 182bf94:	e037883a 	mov	sp,fp
 182bf98:	dfc00117 	ldw	ra,4(sp)
 182bf9c:	df000017 	ldw	fp,0(sp)
 182bfa0:	dec00204 	addi	sp,sp,8
 182bfa4:	f800283a 	ret

0182bfa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 182bfa8:	defffe04 	addi	sp,sp,-8
 182bfac:	dfc00115 	stw	ra,4(sp)
 182bfb0:	df000015 	stw	fp,0(sp)
 182bfb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 182bfb8:	d0a01a17 	ldw	r2,-32664(gp)
 182bfbc:	10000326 	beq	r2,zero,182bfcc <alt_get_errno+0x24>
 182bfc0:	d0a01a17 	ldw	r2,-32664(gp)
 182bfc4:	103ee83a 	callr	r2
 182bfc8:	00000106 	br	182bfd0 <alt_get_errno+0x28>
 182bfcc:	d0a7ce04 	addi	r2,gp,-24776
}
 182bfd0:	e037883a 	mov	sp,fp
 182bfd4:	dfc00117 	ldw	ra,4(sp)
 182bfd8:	df000017 	ldw	fp,0(sp)
 182bfdc:	dec00204 	addi	sp,sp,8
 182bfe0:	f800283a 	ret

0182bfe4 <alt_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 182bfe4:	defffb04 	addi	sp,sp,-20
 182bfe8:	dfc00415 	stw	ra,16(sp)
 182bfec:	df000315 	stw	fp,12(sp)
 182bff0:	df000304 	addi	fp,sp,12
 182bff4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 182bff8:	e0bfff17 	ldw	r2,-4(fp)
 182bffc:	10000616 	blt	r2,zero,182c018 <alt_close+0x34>
 182c000:	e0bfff17 	ldw	r2,-4(fp)
 182c004:	10c00324 	muli	r3,r2,12
 182c008:	00806134 	movhi	r2,388
 182c00c:	108f1304 	addi	r2,r2,15436
 182c010:	1885883a 	add	r2,r3,r2
 182c014:	00000106 	br	182c01c <alt_close+0x38>
 182c018:	0005883a 	mov	r2,zero
 182c01c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 182c020:	e0bffd17 	ldw	r2,-12(fp)
 182c024:	10001926 	beq	r2,zero,182c08c <alt_close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 182c028:	e0bffd17 	ldw	r2,-12(fp)
 182c02c:	10800017 	ldw	r2,0(r2)
 182c030:	10800417 	ldw	r2,16(r2)
 182c034:	10000626 	beq	r2,zero,182c050 <alt_close+0x6c>
 182c038:	e0bffd17 	ldw	r2,-12(fp)
 182c03c:	10800017 	ldw	r2,0(r2)
 182c040:	10800417 	ldw	r2,16(r2)
 182c044:	e13ffd17 	ldw	r4,-12(fp)
 182c048:	103ee83a 	callr	r2
 182c04c:	00000106 	br	182c054 <alt_close+0x70>
 182c050:	0005883a 	mov	r2,zero
 182c054:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 182c058:	e13fff17 	ldw	r4,-4(fp)
 182c05c:	18130880 	call	1813088 <alt_release_fd>
    if (rval < 0)
 182c060:	e0bffe17 	ldw	r2,-8(fp)
 182c064:	1000070e 	bge	r2,zero,182c084 <alt_close+0xa0>
    {
      ALT_ERRNO = -rval;
 182c068:	182bfa80 	call	182bfa8 <alt_get_errno>
 182c06c:	1007883a 	mov	r3,r2
 182c070:	e0bffe17 	ldw	r2,-8(fp)
 182c074:	0085c83a 	sub	r2,zero,r2
 182c078:	18800015 	stw	r2,0(r3)
      return -1;
 182c07c:	00bfffc4 	movi	r2,-1
 182c080:	00000706 	br	182c0a0 <alt_close+0xbc>
    }
    return 0;
 182c084:	0005883a 	mov	r2,zero
 182c088:	00000506 	br	182c0a0 <alt_close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 182c08c:	182bfa80 	call	182bfa8 <alt_get_errno>
 182c090:	1007883a 	mov	r3,r2
 182c094:	00801444 	movi	r2,81
 182c098:	18800015 	stw	r2,0(r3)
    return -1;
 182c09c:	00bfffc4 	movi	r2,-1
  }
}
 182c0a0:	e037883a 	mov	sp,fp
 182c0a4:	dfc00117 	ldw	ra,4(sp)
 182c0a8:	df000017 	ldw	fp,0(sp)
 182c0ac:	dec00204 	addi	sp,sp,8
 182c0b0:	f800283a 	ret

0182c0b4 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 182c0b4:	defffb04 	addi	sp,sp,-20
 182c0b8:	df000415 	stw	fp,16(sp)
 182c0bc:	df000404 	addi	fp,sp,16
 182c0c0:	e13ffe15 	stw	r4,-8(fp)
 182c0c4:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
 182c0c8:	e0fffe17 	ldw	r3,-8(fp)
 182c0cc:	e0bfff17 	ldw	r2,-4(fp)
 182c0d0:	1885883a 	add	r2,r3,r2
 182c0d4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 182c0d8:	e0bffe17 	ldw	r2,-8(fp)
 182c0dc:	e0bffc15 	stw	r2,-16(fp)
 182c0e0:	00000506 	br	182c0f8 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 182c0e4:	e0bffc17 	ldw	r2,-16(fp)
 182c0e8:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 182c0ec:	e0bffc17 	ldw	r2,-16(fp)
 182c0f0:	10800804 	addi	r2,r2,32
 182c0f4:	e0bffc15 	stw	r2,-16(fp)
 182c0f8:	e0fffc17 	ldw	r3,-16(fp)
 182c0fc:	e0bffd17 	ldw	r2,-12(fp)
 182c100:	18bff836 	bltu	r3,r2,182c0e4 <__ram_exceptions_end+0xff81bdf4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 182c104:	e0bffe17 	ldw	r2,-8(fp)
 182c108:	108007cc 	andi	r2,r2,31
 182c10c:	10000226 	beq	r2,zero,182c118 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
 182c110:	e0bffc17 	ldw	r2,-16(fp)
 182c114:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 182c118:	0001883a 	nop
 182c11c:	e037883a 	mov	sp,fp
 182c120:	df000017 	ldw	fp,0(sp)
 182c124:	dec00104 	addi	sp,sp,4
 182c128:	f800283a 	ret

0182c12c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 182c12c:	defffe04 	addi	sp,sp,-8
 182c130:	df000115 	stw	fp,4(sp)
 182c134:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 182c138:	e03fff15 	stw	zero,-4(fp)
 182c13c:	00000506 	br	182c154 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 182c140:	e0bfff17 	ldw	r2,-4(fp)
 182c144:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 182c148:	e0bfff17 	ldw	r2,-4(fp)
 182c14c:	10800804 	addi	r2,r2,32
 182c150:	e0bfff15 	stw	r2,-4(fp)
 182c154:	e0bfff17 	ldw	r2,-4(fp)
 182c158:	10810030 	cmpltui	r2,r2,1024
 182c15c:	103ff81e 	bne	r2,zero,182c140 <__ram_exceptions_end+0xff81be50>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 182c160:	0001883a 	nop
 182c164:	e037883a 	mov	sp,fp
 182c168:	df000017 	ldw	fp,0(sp)
 182c16c:	dec00104 	addi	sp,sp,4
 182c170:	f800283a 	ret

0182c174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 182c174:	defffe04 	addi	sp,sp,-8
 182c178:	dfc00115 	stw	ra,4(sp)
 182c17c:	df000015 	stw	fp,0(sp)
 182c180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 182c184:	d0a01a17 	ldw	r2,-32664(gp)
 182c188:	10000326 	beq	r2,zero,182c198 <alt_get_errno+0x24>
 182c18c:	d0a01a17 	ldw	r2,-32664(gp)
 182c190:	103ee83a 	callr	r2
 182c194:	00000106 	br	182c19c <alt_get_errno+0x28>
 182c198:	d0a7ce04 	addi	r2,gp,-24776
}
 182c19c:	e037883a 	mov	sp,fp
 182c1a0:	dfc00117 	ldw	ra,4(sp)
 182c1a4:	df000017 	ldw	fp,0(sp)
 182c1a8:	dec00204 	addi	sp,sp,8
 182c1ac:	f800283a 	ret

0182c1b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 182c1b0:	defffa04 	addi	sp,sp,-24
 182c1b4:	dfc00515 	stw	ra,20(sp)
 182c1b8:	df000415 	stw	fp,16(sp)
 182c1bc:	df000404 	addi	fp,sp,16
 182c1c0:	e13ffe15 	stw	r4,-8(fp)
 182c1c4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 182c1c8:	e0bffe17 	ldw	r2,-8(fp)
 182c1cc:	10000326 	beq	r2,zero,182c1dc <alt_dev_llist_insert+0x2c>
 182c1d0:	e0bffe17 	ldw	r2,-8(fp)
 182c1d4:	10800217 	ldw	r2,8(r2)
 182c1d8:	1000061e 	bne	r2,zero,182c1f4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 182c1dc:	182c1740 	call	182c174 <alt_get_errno>
 182c1e0:	1007883a 	mov	r3,r2
 182c1e4:	00800584 	movi	r2,22
 182c1e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 182c1ec:	00bffa84 	movi	r2,-22
 182c1f0:	00001306 	br	182c240 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 182c1f4:	e0bffe17 	ldw	r2,-8(fp)
 182c1f8:	e0ffff17 	ldw	r3,-4(fp)
 182c1fc:	e0fffc15 	stw	r3,-16(fp)
 182c200:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 182c204:	e0bffd17 	ldw	r2,-12(fp)
 182c208:	e0fffc17 	ldw	r3,-16(fp)
 182c20c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 182c210:	e0bffc17 	ldw	r2,-16(fp)
 182c214:	10c00017 	ldw	r3,0(r2)
 182c218:	e0bffd17 	ldw	r2,-12(fp)
 182c21c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 182c220:	e0bffc17 	ldw	r2,-16(fp)
 182c224:	10800017 	ldw	r2,0(r2)
 182c228:	e0fffd17 	ldw	r3,-12(fp)
 182c22c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 182c230:	e0bffc17 	ldw	r2,-16(fp)
 182c234:	e0fffd17 	ldw	r3,-12(fp)
 182c238:	10c00015 	stw	r3,0(r2)

  return 0;  
 182c23c:	0005883a 	mov	r2,zero
}
 182c240:	e037883a 	mov	sp,fp
 182c244:	dfc00117 	ldw	ra,4(sp)
 182c248:	df000017 	ldw	fp,0(sp)
 182c24c:	dec00204 	addi	sp,sp,8
 182c250:	f800283a 	ret

0182c254 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 182c254:	defffa04 	addi	sp,sp,-24
 182c258:	dfc00515 	stw	ra,20(sp)
 182c25c:	df000415 	stw	fp,16(sp)
 182c260:	df000404 	addi	fp,sp,16
 182c264:	e13ffe15 	stw	r4,-8(fp)
 182c268:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 182c26c:	e0bfff17 	ldw	r2,-4(fp)
 182c270:	10800017 	ldw	r2,0(r2)
 182c274:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 182c278:	e13ffe17 	ldw	r4,-8(fp)
 182c27c:	18074e40 	call	18074e4 <strlen>
 182c280:	10800044 	addi	r2,r2,1
 182c284:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 182c288:	00000d06 	br	182c2c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 182c28c:	e0bffc17 	ldw	r2,-16(fp)
 182c290:	10800217 	ldw	r2,8(r2)
 182c294:	e0fffd17 	ldw	r3,-12(fp)
 182c298:	180d883a 	mov	r6,r3
 182c29c:	e17ffe17 	ldw	r5,-8(fp)
 182c2a0:	1009883a 	mov	r4,r2
 182c2a4:	183c5280 	call	183c528 <memcmp>
 182c2a8:	1000021e 	bne	r2,zero,182c2b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 182c2ac:	e0bffc17 	ldw	r2,-16(fp)
 182c2b0:	00000706 	br	182c2d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 182c2b4:	e0bffc17 	ldw	r2,-16(fp)
 182c2b8:	10800017 	ldw	r2,0(r2)
 182c2bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 182c2c0:	e0fffc17 	ldw	r3,-16(fp)
 182c2c4:	e0bfff17 	ldw	r2,-4(fp)
 182c2c8:	18bff01e 	bne	r3,r2,182c28c <__ram_exceptions_end+0xff81bf9c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 182c2cc:	0005883a 	mov	r2,zero
}
 182c2d0:	e037883a 	mov	sp,fp
 182c2d4:	dfc00117 	ldw	ra,4(sp)
 182c2d8:	df000017 	ldw	fp,0(sp)
 182c2dc:	dec00204 	addi	sp,sp,8
 182c2e0:	f800283a 	ret

0182c2e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 182c2e4:	defffb04 	addi	sp,sp,-20
 182c2e8:	dfc00415 	stw	ra,16(sp)
 182c2ec:	df000315 	stw	fp,12(sp)
 182c2f0:	df000304 	addi	fp,sp,12
 182c2f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 182c2f8:	d0a00617 	ldw	r2,-32744(gp)
 182c2fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 182c300:	00003106 	br	182c3c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 182c304:	e0bffd17 	ldw	r2,-12(fp)
 182c308:	10800217 	ldw	r2,8(r2)
 182c30c:	1009883a 	mov	r4,r2
 182c310:	18074e40 	call	18074e4 <strlen>
 182c314:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 182c318:	e0bffd17 	ldw	r2,-12(fp)
 182c31c:	10c00217 	ldw	r3,8(r2)
 182c320:	e0bffe17 	ldw	r2,-8(fp)
 182c324:	10bfffc4 	addi	r2,r2,-1
 182c328:	1885883a 	add	r2,r3,r2
 182c32c:	10800003 	ldbu	r2,0(r2)
 182c330:	10803fcc 	andi	r2,r2,255
 182c334:	1080201c 	xori	r2,r2,128
 182c338:	10bfe004 	addi	r2,r2,-128
 182c33c:	10800bd8 	cmpnei	r2,r2,47
 182c340:	1000031e 	bne	r2,zero,182c350 <alt_find_file+0x6c>
    {
      len -= 1;
 182c344:	e0bffe17 	ldw	r2,-8(fp)
 182c348:	10bfffc4 	addi	r2,r2,-1
 182c34c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 182c350:	e0bffe17 	ldw	r2,-8(fp)
 182c354:	e0ffff17 	ldw	r3,-4(fp)
 182c358:	1885883a 	add	r2,r3,r2
 182c35c:	10800003 	ldbu	r2,0(r2)
 182c360:	10803fcc 	andi	r2,r2,255
 182c364:	1080201c 	xori	r2,r2,128
 182c368:	10bfe004 	addi	r2,r2,-128
 182c36c:	10800be0 	cmpeqi	r2,r2,47
 182c370:	1000081e 	bne	r2,zero,182c394 <alt_find_file+0xb0>
 182c374:	e0bffe17 	ldw	r2,-8(fp)
 182c378:	e0ffff17 	ldw	r3,-4(fp)
 182c37c:	1885883a 	add	r2,r3,r2
 182c380:	10800003 	ldbu	r2,0(r2)
 182c384:	10803fcc 	andi	r2,r2,255
 182c388:	1080201c 	xori	r2,r2,128
 182c38c:	10bfe004 	addi	r2,r2,-128
 182c390:	10000a1e 	bne	r2,zero,182c3bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 182c394:	e0bffd17 	ldw	r2,-12(fp)
 182c398:	10800217 	ldw	r2,8(r2)
 182c39c:	e0fffe17 	ldw	r3,-8(fp)
 182c3a0:	180d883a 	mov	r6,r3
 182c3a4:	e17fff17 	ldw	r5,-4(fp)
 182c3a8:	1009883a 	mov	r4,r2
 182c3ac:	183c5280 	call	183c528 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 182c3b0:	1000021e 	bne	r2,zero,182c3bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 182c3b4:	e0bffd17 	ldw	r2,-12(fp)
 182c3b8:	00000706 	br	182c3d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 182c3bc:	e0bffd17 	ldw	r2,-12(fp)
 182c3c0:	10800017 	ldw	r2,0(r2)
 182c3c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 182c3c8:	e0fffd17 	ldw	r3,-12(fp)
 182c3cc:	d0a00604 	addi	r2,gp,-32744
 182c3d0:	18bfcc1e 	bne	r3,r2,182c304 <__ram_exceptions_end+0xff81c014>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 182c3d4:	0005883a 	mov	r2,zero
}
 182c3d8:	e037883a 	mov	sp,fp
 182c3dc:	dfc00117 	ldw	ra,4(sp)
 182c3e0:	df000017 	ldw	fp,0(sp)
 182c3e4:	dec00204 	addi	sp,sp,8
 182c3e8:	f800283a 	ret

0182c3ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 182c3ec:	defff804 	addi	sp,sp,-32
 182c3f0:	dfc00715 	stw	ra,28(sp)
 182c3f4:	df000615 	stw	fp,24(sp)
 182c3f8:	df000604 	addi	fp,sp,24
 182c3fc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 182c400:	00bffa04 	movi	r2,-24
 182c404:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 182c408:	d0a7e717 	ldw	r2,-24676(gp)
 182c40c:	e0bffc15 	stw	r2,-16(fp)
 182c410:	e03ffd0d 	sth	zero,-12(fp)
 182c414:	e0bffd0b 	ldhu	r2,-12(fp)
 182c418:	100b883a 	mov	r5,r2
 182c41c:	e13ffc17 	ldw	r4,-16(fp)
 182c420:	180df140 	call	180df14 <xQueueSemaphoreTake>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 182c424:	e03ffa15 	stw	zero,-24(fp)
 182c428:	00001906 	br	182c490 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
 182c42c:	00806134 	movhi	r2,388
 182c430:	108f1304 	addi	r2,r2,15436
 182c434:	e0fffa17 	ldw	r3,-24(fp)
 182c438:	18c00324 	muli	r3,r3,12
 182c43c:	10c5883a 	add	r2,r2,r3
 182c440:	10800017 	ldw	r2,0(r2)
 182c444:	10000f1e 	bne	r2,zero,182c484 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
 182c448:	00806134 	movhi	r2,388
 182c44c:	108f1304 	addi	r2,r2,15436
 182c450:	e0fffa17 	ldw	r3,-24(fp)
 182c454:	18c00324 	muli	r3,r3,12
 182c458:	10c5883a 	add	r2,r2,r3
 182c45c:	e0fffe17 	ldw	r3,-8(fp)
 182c460:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 182c464:	d0e00a17 	ldw	r3,-32728(gp)
 182c468:	e0bffa17 	ldw	r2,-24(fp)
 182c46c:	1880020e 	bge	r3,r2,182c478 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
 182c470:	e0bffa17 	ldw	r2,-24(fp)
 182c474:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 182c478:	e0bffa17 	ldw	r2,-24(fp)
 182c47c:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
 182c480:	00000606 	br	182c49c <alt_get_fd+0xb0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 182c484:	e0bffa17 	ldw	r2,-24(fp)
 182c488:	10800044 	addi	r2,r2,1
 182c48c:	e0bffa15 	stw	r2,-24(fp)
 182c490:	e0bffa17 	ldw	r2,-24(fp)
 182c494:	10800810 	cmplti	r2,r2,32
 182c498:	103fe41e 	bne	r2,zero,182c42c <__ram_exceptions_end+0xff81c13c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 182c49c:	d0a7e717 	ldw	r2,-24676(gp)
 182c4a0:	000f883a 	mov	r7,zero
 182c4a4:	000d883a 	mov	r6,zero
 182c4a8:	000b883a 	mov	r5,zero
 182c4ac:	1009883a 	mov	r4,r2
 182c4b0:	180d9880 	call	180d988 <xQueueGenericSend>

  return rc;
 182c4b4:	e0bffb17 	ldw	r2,-20(fp)
}
 182c4b8:	e037883a 	mov	sp,fp
 182c4bc:	dfc00117 	ldw	ra,4(sp)
 182c4c0:	df000017 	ldw	fp,0(sp)
 182c4c4:	dec00204 	addi	sp,sp,8
 182c4c8:	f800283a 	ret

0182c4cc <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 182c4cc:	defff404 	addi	sp,sp,-48
 182c4d0:	dfc00b15 	stw	ra,44(sp)
 182c4d4:	df000a15 	stw	fp,40(sp)
 182c4d8:	dd000915 	stw	r20,36(sp)
 182c4dc:	dcc00815 	stw	r19,32(sp)
 182c4e0:	dc800715 	stw	r18,28(sp)
 182c4e4:	dc400615 	stw	r17,24(sp)
 182c4e8:	dc000515 	stw	r16,20(sp)
 182c4ec:	df000a04 	addi	fp,sp,40
 182c4f0:	e13ff915 	stw	r4,-28(fp)
 182c4f4:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 182c4f8:	e0bffa17 	ldw	r2,-24(fp)
 182c4fc:	e0bff615 	stw	r2,-40(fp)
 182c500:	d0a80817 	ldw	r2,-24544(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 182c504:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 182c508:	d0a80717 	ldw	r2,-24548(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 182c50c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 182c510:	e0bff817 	ldw	r2,-32(fp)
 182c514:	10005f26 	beq	r2,zero,182c694 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 182c518:	d0a80317 	ldw	r2,-24564(gp)
 182c51c:	1029883a 	mov	r20,r2
 182c520:	e17ff817 	ldw	r5,-32(fp)
 182c524:	e13ff717 	ldw	r4,-36(fp)
 182c528:	180ac1c0 	call	180ac1c <__udivsi3>
 182c52c:	a085883a 	add	r2,r20,r2
 182c530:	1007883a 	mov	r3,r2
 182c534:	e0bff917 	ldw	r2,-28(fp)
 182c538:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 182c53c:	d0a80417 	ldw	r2,-24560(gp)
 182c540:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 182c544:	e0bff717 	ldw	r2,-36(fp)
 182c548:	1021883a 	mov	r16,r2
 182c54c:	0023883a 	mov	r17,zero
 182c550:	e17ff817 	ldw	r5,-32(fp)
 182c554:	010003f4 	movhi	r4,15
 182c558:	21109004 	addi	r4,r4,16960
 182c55c:	180ac1c0 	call	180ac1c <__udivsi3>
 182c560:	1025883a 	mov	r18,r2
 182c564:	0027883a 	mov	r19,zero
 182c568:	900d883a 	mov	r6,r18
 182c56c:	980f883a 	mov	r7,r19
 182c570:	8009883a 	mov	r4,r16
 182c574:	880b883a 	mov	r5,r17
 182c578:	18402a80 	call	18402a8 <__muldi3>
 182c57c:	1009883a 	mov	r4,r2
 182c580:	180b883a 	mov	r5,r3
 182c584:	2005883a 	mov	r2,r4
 182c588:	2807883a 	mov	r3,r5
 182c58c:	018003f4 	movhi	r6,15
 182c590:	31909004 	addi	r6,r6,16960
 182c594:	000f883a 	mov	r7,zero
 182c598:	1009883a 	mov	r4,r2
 182c59c:	180b883a 	mov	r5,r3
 182c5a0:	180a5ec0 	call	180a5ec <__umoddi3>
 182c5a4:	1009883a 	mov	r4,r2
 182c5a8:	180b883a 	mov	r5,r3
 182c5ac:	2005883a 	mov	r2,r4
 182c5b0:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 182c5b4:	a085883a 	add	r2,r20,r2
 182c5b8:	1007883a 	mov	r3,r2
 182c5bc:	e0bff917 	ldw	r2,-28(fp)
 182c5c0:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 182c5c4:	00001406 	br	182c618 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 182c5c8:	e0bff917 	ldw	r2,-28(fp)
 182c5cc:	10800017 	ldw	r2,0(r2)
 182c5d0:	00800516 	blt	zero,r2,182c5e8 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 182c5d4:	e0bff917 	ldw	r2,-28(fp)
 182c5d8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 182c5dc:	e0bff917 	ldw	r2,-28(fp)
 182c5e0:	10000115 	stw	zero,4(r2)
          break;
 182c5e4:	00000f06 	br	182c624 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 182c5e8:	e0bff917 	ldw	r2,-28(fp)
 182c5ec:	10800017 	ldw	r2,0(r2)
 182c5f0:	10ffffc4 	addi	r3,r2,-1
 182c5f4:	e0bff917 	ldw	r2,-28(fp)
 182c5f8:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 182c5fc:	e0bff917 	ldw	r2,-28(fp)
 182c600:	10c00117 	ldw	r3,4(r2)
 182c604:	008003f4 	movhi	r2,15
 182c608:	10909004 	addi	r2,r2,16960
 182c60c:	1887883a 	add	r3,r3,r2
 182c610:	e0bff917 	ldw	r2,-28(fp)
 182c614:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 182c618:	e0bff917 	ldw	r2,-28(fp)
 182c61c:	10800117 	ldw	r2,4(r2)
 182c620:	103fe916 	blt	r2,zero,182c5c8 <__ram_exceptions_end+0xff81c2d8>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 182c624:	00000c06 	br	182c658 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 182c628:	e0bff917 	ldw	r2,-28(fp)
 182c62c:	10800017 	ldw	r2,0(r2)
 182c630:	10c00044 	addi	r3,r2,1
 182c634:	e0bff917 	ldw	r2,-28(fp)
 182c638:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 182c63c:	e0bff917 	ldw	r2,-28(fp)
 182c640:	10c00117 	ldw	r3,4(r2)
 182c644:	00bffc74 	movhi	r2,65521
 182c648:	10af7004 	addi	r2,r2,-16960
 182c64c:	1887883a 	add	r3,r3,r2
 182c650:	e0bff917 	ldw	r2,-28(fp)
 182c654:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 182c658:	e0bff917 	ldw	r2,-28(fp)
 182c65c:	10c00117 	ldw	r3,4(r2)
 182c660:	008003f4 	movhi	r2,15
 182c664:	10908fc4 	addi	r2,r2,16959
 182c668:	10ffef16 	blt	r2,r3,182c628 <__ram_exceptions_end+0xff81c338>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 182c66c:	e0bff617 	ldw	r2,-40(fp)
 182c670:	10000626 	beq	r2,zero,182c68c <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 182c674:	d0e80117 	ldw	r3,-24572(gp)
 182c678:	e0bff617 	ldw	r2,-40(fp)
 182c67c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 182c680:	d0e80217 	ldw	r3,-24568(gp)
 182c684:	e0bff617 	ldw	r2,-40(fp)
 182c688:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 182c68c:	0005883a 	mov	r2,zero
 182c690:	00000106 	br	182c698 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 182c694:	00bfde84 	movi	r2,-134
}
 182c698:	e6fffb04 	addi	sp,fp,-20
 182c69c:	dfc00617 	ldw	ra,24(sp)
 182c6a0:	df000517 	ldw	fp,20(sp)
 182c6a4:	dd000417 	ldw	r20,16(sp)
 182c6a8:	dcc00317 	ldw	r19,12(sp)
 182c6ac:	dc800217 	ldw	r18,8(sp)
 182c6b0:	dc400117 	ldw	r17,4(sp)
 182c6b4:	dc000017 	ldw	r16,0(sp)
 182c6b8:	dec00704 	addi	sp,sp,28
 182c6bc:	f800283a 	ret

0182c6c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 182c6c0:	defffe04 	addi	sp,sp,-8
 182c6c4:	dfc00115 	stw	ra,4(sp)
 182c6c8:	df000015 	stw	fp,0(sp)
 182c6cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 182c6d0:	01410004 	movi	r5,1024
 182c6d4:	0009883a 	mov	r4,zero
 182c6d8:	183865c0 	call	183865c <alt_icache_flush>
#endif
}
 182c6dc:	0001883a 	nop
 182c6e0:	e037883a 	mov	sp,fp
 182c6e4:	dfc00117 	ldw	ra,4(sp)
 182c6e8:	df000017 	ldw	fp,0(sp)
 182c6ec:	dec00204 	addi	sp,sp,8
 182c6f0:	f800283a 	ret

0182c6f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 182c6f4:	defff904 	addi	sp,sp,-28
 182c6f8:	dfc00615 	stw	ra,24(sp)
 182c6fc:	df000515 	stw	fp,20(sp)
 182c700:	df000504 	addi	fp,sp,20
 182c704:	e13ffc15 	stw	r4,-16(fp)
 182c708:	e17ffd15 	stw	r5,-12(fp)
 182c70c:	e1bffe15 	stw	r6,-8(fp)
 182c710:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 182c714:	e0800217 	ldw	r2,8(fp)
 182c718:	d8800015 	stw	r2,0(sp)
 182c71c:	e1ffff17 	ldw	r7,-4(fp)
 182c720:	e1bffe17 	ldw	r6,-8(fp)
 182c724:	e17ffd17 	ldw	r5,-12(fp)
 182c728:	e13ffc17 	ldw	r4,-16(fp)
 182c72c:	182c8a40 	call	182c8a4 <alt_iic_isr_register>
}  
 182c730:	e037883a 	mov	sp,fp
 182c734:	dfc00117 	ldw	ra,4(sp)
 182c738:	df000017 	ldw	fp,0(sp)
 182c73c:	dec00204 	addi	sp,sp,8
 182c740:	f800283a 	ret

0182c744 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 182c744:	defff904 	addi	sp,sp,-28
 182c748:	df000615 	stw	fp,24(sp)
 182c74c:	df000604 	addi	fp,sp,24
 182c750:	e13ffe15 	stw	r4,-8(fp)
 182c754:	e17fff15 	stw	r5,-4(fp)
 182c758:	e0bfff17 	ldw	r2,-4(fp)
 182c75c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182c760:	0005303a 	rdctl	r2,status
 182c764:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182c768:	e0fffb17 	ldw	r3,-20(fp)
 182c76c:	00bfff84 	movi	r2,-2
 182c770:	1884703a 	and	r2,r3,r2
 182c774:	1001703a 	wrctl	status,r2
  
  return context;
 182c778:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 182c77c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 182c780:	00c00044 	movi	r3,1
 182c784:	e0bffa17 	ldw	r2,-24(fp)
 182c788:	1884983a 	sll	r2,r3,r2
 182c78c:	1007883a 	mov	r3,r2
 182c790:	d0a80617 	ldw	r2,-24552(gp)
 182c794:	1884b03a 	or	r2,r3,r2
 182c798:	d0a80615 	stw	r2,-24552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 182c79c:	d0a80617 	ldw	r2,-24552(gp)
 182c7a0:	100170fa 	wrctl	ienable,r2
 182c7a4:	e0bffc17 	ldw	r2,-16(fp)
 182c7a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182c7ac:	e0bffd17 	ldw	r2,-12(fp)
 182c7b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 182c7b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 182c7b8:	0001883a 	nop
}
 182c7bc:	e037883a 	mov	sp,fp
 182c7c0:	df000017 	ldw	fp,0(sp)
 182c7c4:	dec00104 	addi	sp,sp,4
 182c7c8:	f800283a 	ret

0182c7cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 182c7cc:	defff904 	addi	sp,sp,-28
 182c7d0:	df000615 	stw	fp,24(sp)
 182c7d4:	df000604 	addi	fp,sp,24
 182c7d8:	e13ffe15 	stw	r4,-8(fp)
 182c7dc:	e17fff15 	stw	r5,-4(fp)
 182c7e0:	e0bfff17 	ldw	r2,-4(fp)
 182c7e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182c7e8:	0005303a 	rdctl	r2,status
 182c7ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182c7f0:	e0fffb17 	ldw	r3,-20(fp)
 182c7f4:	00bfff84 	movi	r2,-2
 182c7f8:	1884703a 	and	r2,r3,r2
 182c7fc:	1001703a 	wrctl	status,r2
  
  return context;
 182c800:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 182c804:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 182c808:	00c00044 	movi	r3,1
 182c80c:	e0bffa17 	ldw	r2,-24(fp)
 182c810:	1884983a 	sll	r2,r3,r2
 182c814:	0084303a 	nor	r2,zero,r2
 182c818:	1007883a 	mov	r3,r2
 182c81c:	d0a80617 	ldw	r2,-24552(gp)
 182c820:	1884703a 	and	r2,r3,r2
 182c824:	d0a80615 	stw	r2,-24552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 182c828:	d0a80617 	ldw	r2,-24552(gp)
 182c82c:	100170fa 	wrctl	ienable,r2
 182c830:	e0bffc17 	ldw	r2,-16(fp)
 182c834:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182c838:	e0bffd17 	ldw	r2,-12(fp)
 182c83c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 182c840:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 182c844:	0001883a 	nop
}
 182c848:	e037883a 	mov	sp,fp
 182c84c:	df000017 	ldw	fp,0(sp)
 182c850:	dec00104 	addi	sp,sp,4
 182c854:	f800283a 	ret

0182c858 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 182c858:	defffc04 	addi	sp,sp,-16
 182c85c:	df000315 	stw	fp,12(sp)
 182c860:	df000304 	addi	fp,sp,12
 182c864:	e13ffe15 	stw	r4,-8(fp)
 182c868:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 182c86c:	000530fa 	rdctl	r2,ienable
 182c870:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 182c874:	00c00044 	movi	r3,1
 182c878:	e0bfff17 	ldw	r2,-4(fp)
 182c87c:	1884983a 	sll	r2,r3,r2
 182c880:	1007883a 	mov	r3,r2
 182c884:	e0bffd17 	ldw	r2,-12(fp)
 182c888:	1884703a 	and	r2,r3,r2
 182c88c:	1004c03a 	cmpne	r2,r2,zero
 182c890:	10803fcc 	andi	r2,r2,255
}
 182c894:	e037883a 	mov	sp,fp
 182c898:	df000017 	ldw	fp,0(sp)
 182c89c:	dec00104 	addi	sp,sp,4
 182c8a0:	f800283a 	ret

0182c8a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 182c8a4:	defff504 	addi	sp,sp,-44
 182c8a8:	dfc00a15 	stw	ra,40(sp)
 182c8ac:	df000915 	stw	fp,36(sp)
 182c8b0:	df000904 	addi	fp,sp,36
 182c8b4:	e13ffc15 	stw	r4,-16(fp)
 182c8b8:	e17ffd15 	stw	r5,-12(fp)
 182c8bc:	e1bffe15 	stw	r6,-8(fp)
 182c8c0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 182c8c4:	00bffa84 	movi	r2,-22
 182c8c8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 182c8cc:	e0bffd17 	ldw	r2,-12(fp)
 182c8d0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 182c8d4:	e0bff817 	ldw	r2,-32(fp)
 182c8d8:	10800808 	cmpgei	r2,r2,32
 182c8dc:	1000271e 	bne	r2,zero,182c97c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182c8e0:	0005303a 	rdctl	r2,status
 182c8e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182c8e8:	e0fffb17 	ldw	r3,-20(fp)
 182c8ec:	00bfff84 	movi	r2,-2
 182c8f0:	1884703a 	and	r2,r3,r2
 182c8f4:	1001703a 	wrctl	status,r2
  
  return context;
 182c8f8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 182c8fc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 182c900:	00806134 	movhi	r2,388
 182c904:	109ee204 	addi	r2,r2,31624
 182c908:	e0fff817 	ldw	r3,-32(fp)
 182c90c:	180690fa 	slli	r3,r3,3
 182c910:	10c5883a 	add	r2,r2,r3
 182c914:	e0fffe17 	ldw	r3,-8(fp)
 182c918:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 182c91c:	00806134 	movhi	r2,388
 182c920:	109ee204 	addi	r2,r2,31624
 182c924:	e0fff817 	ldw	r3,-32(fp)
 182c928:	180690fa 	slli	r3,r3,3
 182c92c:	10c5883a 	add	r2,r2,r3
 182c930:	10800104 	addi	r2,r2,4
 182c934:	e0ffff17 	ldw	r3,-4(fp)
 182c938:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 182c93c:	e0bffe17 	ldw	r2,-8(fp)
 182c940:	10000526 	beq	r2,zero,182c958 <alt_iic_isr_register+0xb4>
 182c944:	e0bff817 	ldw	r2,-32(fp)
 182c948:	100b883a 	mov	r5,r2
 182c94c:	e13ffc17 	ldw	r4,-16(fp)
 182c950:	182c7440 	call	182c744 <alt_ic_irq_enable>
 182c954:	00000406 	br	182c968 <alt_iic_isr_register+0xc4>
 182c958:	e0bff817 	ldw	r2,-32(fp)
 182c95c:	100b883a 	mov	r5,r2
 182c960:	e13ffc17 	ldw	r4,-16(fp)
 182c964:	182c7cc0 	call	182c7cc <alt_ic_irq_disable>
 182c968:	e0bff715 	stw	r2,-36(fp)
 182c96c:	e0bffa17 	ldw	r2,-24(fp)
 182c970:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182c974:	e0bff917 	ldw	r2,-28(fp)
 182c978:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 182c97c:	e0bff717 	ldw	r2,-36(fp)
}
 182c980:	e037883a 	mov	sp,fp
 182c984:	dfc00117 	ldw	ra,4(sp)
 182c988:	df000017 	ldw	fp,0(sp)
 182c98c:	dec00204 	addi	sp,sp,8
 182c990:	f800283a 	ret

0182c994 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 182c994:	defffe04 	addi	sp,sp,-8
 182c998:	df000115 	stw	fp,4(sp)
 182c99c:	df000104 	addi	fp,sp,4
 182c9a0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 182c9a4:	e0bfff17 	ldw	r2,-4(fp)
 182c9a8:	10bffe84 	addi	r2,r2,-6
 182c9ac:	10c00428 	cmpgeui	r3,r2,16
 182c9b0:	18001a1e 	bne	r3,zero,182ca1c <alt_exception_cause_generated_bad_addr+0x88>
 182c9b4:	100690ba 	slli	r3,r2,2
 182c9b8:	008060f4 	movhi	r2,387
 182c9bc:	10b27304 	addi	r2,r2,-13876
 182c9c0:	1885883a 	add	r2,r3,r2
 182c9c4:	10800017 	ldw	r2,0(r2)
 182c9c8:	1000683a 	jmp	r2
 182c9cc:	0182ca0c 	andi	r6,zero,2856
 182c9d0:	0182ca0c 	andi	r6,zero,2856
 182c9d4:	0182ca1c 	xori	r6,zero,2856
 182c9d8:	0182ca1c 	xori	r6,zero,2856
 182c9dc:	0182ca1c 	xori	r6,zero,2856
 182c9e0:	0182ca0c 	andi	r6,zero,2856
 182c9e4:	0182ca14 	movui	r6,2856
 182c9e8:	0182ca1c 	xori	r6,zero,2856
 182c9ec:	0182ca0c 	andi	r6,zero,2856
 182c9f0:	0182ca0c 	andi	r6,zero,2856
 182c9f4:	0182ca1c 	xori	r6,zero,2856
 182c9f8:	0182ca0c 	andi	r6,zero,2856
 182c9fc:	0182ca14 	movui	r6,2856
 182ca00:	0182ca1c 	xori	r6,zero,2856
 182ca04:	0182ca1c 	xori	r6,zero,2856
 182ca08:	0182ca0c 	andi	r6,zero,2856
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 182ca0c:	00800044 	movi	r2,1
 182ca10:	00000306 	br	182ca20 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 182ca14:	0005883a 	mov	r2,zero
 182ca18:	00000106 	br	182ca20 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 182ca1c:	0005883a 	mov	r2,zero
  }
}
 182ca20:	e037883a 	mov	sp,fp
 182ca24:	df000017 	ldw	fp,0(sp)
 182ca28:	dec00104 	addi	sp,sp,4
 182ca2c:	f800283a 	ret

0182ca30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 182ca30:	defffe04 	addi	sp,sp,-8
 182ca34:	dfc00115 	stw	ra,4(sp)
 182ca38:	df000015 	stw	fp,0(sp)
 182ca3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 182ca40:	d0a01a17 	ldw	r2,-32664(gp)
 182ca44:	10000326 	beq	r2,zero,182ca54 <alt_get_errno+0x24>
 182ca48:	d0a01a17 	ldw	r2,-32664(gp)
 182ca4c:	103ee83a 	callr	r2
 182ca50:	00000106 	br	182ca58 <alt_get_errno+0x28>
 182ca54:	d0a7ce04 	addi	r2,gp,-24776
}
 182ca58:	e037883a 	mov	sp,fp
 182ca5c:	dfc00117 	ldw	ra,4(sp)
 182ca60:	df000017 	ldw	fp,0(sp)
 182ca64:	dec00204 	addi	sp,sp,8
 182ca68:	f800283a 	ret

0182ca6c <alt_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 182ca6c:	defff904 	addi	sp,sp,-28
 182ca70:	dfc00615 	stw	ra,24(sp)
 182ca74:	df000515 	stw	fp,20(sp)
 182ca78:	df000504 	addi	fp,sp,20
 182ca7c:	e13ffd15 	stw	r4,-12(fp)
 182ca80:	e17ffe15 	stw	r5,-8(fp)
 182ca84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 182ca88:	e0bffd17 	ldw	r2,-12(fp)
 182ca8c:	10000616 	blt	r2,zero,182caa8 <alt_read+0x3c>
 182ca90:	e0bffd17 	ldw	r2,-12(fp)
 182ca94:	10c00324 	muli	r3,r2,12
 182ca98:	00806134 	movhi	r2,388
 182ca9c:	108f1304 	addi	r2,r2,15436
 182caa0:	1885883a 	add	r2,r3,r2
 182caa4:	00000106 	br	182caac <alt_read+0x40>
 182caa8:	0005883a 	mov	r2,zero
 182caac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 182cab0:	e0bffb17 	ldw	r2,-20(fp)
 182cab4:	10002226 	beq	r2,zero,182cb40 <alt_read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 182cab8:	e0bffb17 	ldw	r2,-20(fp)
 182cabc:	10800217 	ldw	r2,8(r2)
 182cac0:	108000cc 	andi	r2,r2,3
 182cac4:	10800060 	cmpeqi	r2,r2,1
 182cac8:	1000181e 	bne	r2,zero,182cb2c <alt_read+0xc0>
        (fd->dev->read))
 182cacc:	e0bffb17 	ldw	r2,-20(fp)
 182cad0:	10800017 	ldw	r2,0(r2)
 182cad4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 182cad8:	10001426 	beq	r2,zero,182cb2c <alt_read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 182cadc:	e0bffb17 	ldw	r2,-20(fp)
 182cae0:	10800017 	ldw	r2,0(r2)
 182cae4:	10800517 	ldw	r2,20(r2)
 182cae8:	e0ffff17 	ldw	r3,-4(fp)
 182caec:	180d883a 	mov	r6,r3
 182caf0:	e17ffe17 	ldw	r5,-8(fp)
 182caf4:	e13ffb17 	ldw	r4,-20(fp)
 182caf8:	103ee83a 	callr	r2
 182cafc:	e0bffc15 	stw	r2,-16(fp)
 182cb00:	e0bffc17 	ldw	r2,-16(fp)
 182cb04:	1000070e 	bge	r2,zero,182cb24 <alt_read+0xb8>
        {
          ALT_ERRNO = -rval;
 182cb08:	182ca300 	call	182ca30 <alt_get_errno>
 182cb0c:	1007883a 	mov	r3,r2
 182cb10:	e0bffc17 	ldw	r2,-16(fp)
 182cb14:	0085c83a 	sub	r2,zero,r2
 182cb18:	18800015 	stw	r2,0(r3)
          return -1;
 182cb1c:	00bfffc4 	movi	r2,-1
 182cb20:	00000c06 	br	182cb54 <alt_read+0xe8>
        }
        return rval;
 182cb24:	e0bffc17 	ldw	r2,-16(fp)
 182cb28:	00000a06 	br	182cb54 <alt_read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 182cb2c:	182ca300 	call	182ca30 <alt_get_errno>
 182cb30:	1007883a 	mov	r3,r2
 182cb34:	00800344 	movi	r2,13
 182cb38:	18800015 	stw	r2,0(r3)
 182cb3c:	00000406 	br	182cb50 <alt_read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 182cb40:	182ca300 	call	182ca30 <alt_get_errno>
 182cb44:	1007883a 	mov	r3,r2
 182cb48:	00801444 	movi	r2,81
 182cb4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 182cb50:	00bfffc4 	movi	r2,-1
}
 182cb54:	e037883a 	mov	sp,fp
 182cb58:	dfc00117 	ldw	ra,4(sp)
 182cb5c:	df000017 	ldw	fp,0(sp)
 182cb60:	dec00204 	addi	sp,sp,8
 182cb64:	f800283a 	ret

0182cb68 <alt_remap_uncached>:
 * function so it fails with a link error.
 */

volatile void* 
alt_remap_uncached(void* ptr, alt_u32 len)
{
 182cb68:	defffd04 	addi	sp,sp,-12
 182cb6c:	df000215 	stw	fp,8(sp)
 182cb70:	df000204 	addi	fp,sp,8
 182cb74:	e13ffe15 	stw	r4,-8(fp)
 182cb78:	e17fff15 	stw	r5,-4(fp)
  /* Generate a link time error, should this function ever be called. */
  //ALT_LINK_ERROR("alt_remap_uncached() is not available because Nios II Gen2 cores with data caches don't support mixing cacheable and uncacheable data on the same line.");
  return NULL;
 182cb7c:	0005883a 	mov	r2,zero
}
 182cb80:	e037883a 	mov	sp,fp
 182cb84:	df000017 	ldw	fp,0(sp)
 182cb88:	dec00104 	addi	sp,sp,4
 182cb8c:	f800283a 	ret

0182cb90 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 182cb90:	defffa04 	addi	sp,sp,-24
 182cb94:	df000515 	stw	fp,20(sp)
 182cb98:	df000504 	addi	fp,sp,20
 182cb9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182cba0:	0005303a 	rdctl	r2,status
 182cba4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 182cba8:	e0fffc17 	ldw	r3,-16(fp)
 182cbac:	00bfff84 	movi	r2,-2
 182cbb0:	1884703a 	and	r2,r3,r2
 182cbb4:	1001703a 	wrctl	status,r2
  
  return context;
 182cbb8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 182cbbc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 182cbc0:	e0bfff17 	ldw	r2,-4(fp)
 182cbc4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 182cbc8:	e0bffd17 	ldw	r2,-12(fp)
 182cbcc:	10800017 	ldw	r2,0(r2)
 182cbd0:	e0fffd17 	ldw	r3,-12(fp)
 182cbd4:	18c00117 	ldw	r3,4(r3)
 182cbd8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 182cbdc:	e0bffd17 	ldw	r2,-12(fp)
 182cbe0:	10800117 	ldw	r2,4(r2)
 182cbe4:	e0fffd17 	ldw	r3,-12(fp)
 182cbe8:	18c00017 	ldw	r3,0(r3)
 182cbec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 182cbf0:	e0bffd17 	ldw	r2,-12(fp)
 182cbf4:	e0fffd17 	ldw	r3,-12(fp)
 182cbf8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 182cbfc:	e0bffd17 	ldw	r2,-12(fp)
 182cc00:	e0fffd17 	ldw	r3,-12(fp)
 182cc04:	10c00015 	stw	r3,0(r2)
 182cc08:	e0bffb17 	ldw	r2,-20(fp)
 182cc0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182cc10:	e0bffe17 	ldw	r2,-8(fp)
 182cc14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 182cc18:	0001883a 	nop
 182cc1c:	e037883a 	mov	sp,fp
 182cc20:	df000017 	ldw	fp,0(sp)
 182cc24:	dec00104 	addi	sp,sp,4
 182cc28:	f800283a 	ret

0182cc2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 182cc2c:	defffb04 	addi	sp,sp,-20
 182cc30:	dfc00415 	stw	ra,16(sp)
 182cc34:	df000315 	stw	fp,12(sp)
 182cc38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 182cc3c:	d0a01c17 	ldw	r2,-32656(gp)
 182cc40:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 182cc44:	d0a80817 	ldw	r2,-24544(gp)
 182cc48:	10800044 	addi	r2,r2,1
 182cc4c:	d0a80815 	stw	r2,-24544(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 182cc50:	00002e06 	br	182cd0c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 182cc54:	e0bffd17 	ldw	r2,-12(fp)
 182cc58:	10800017 	ldw	r2,0(r2)
 182cc5c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 182cc60:	e0bffd17 	ldw	r2,-12(fp)
 182cc64:	10800403 	ldbu	r2,16(r2)
 182cc68:	10803fcc 	andi	r2,r2,255
 182cc6c:	10000426 	beq	r2,zero,182cc80 <alt_tick+0x54>
 182cc70:	d0a80817 	ldw	r2,-24544(gp)
 182cc74:	1000021e 	bne	r2,zero,182cc80 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 182cc78:	e0bffd17 	ldw	r2,-12(fp)
 182cc7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 182cc80:	e0bffd17 	ldw	r2,-12(fp)
 182cc84:	10800217 	ldw	r2,8(r2)
 182cc88:	d0e80817 	ldw	r3,-24544(gp)
 182cc8c:	18801d36 	bltu	r3,r2,182cd04 <alt_tick+0xd8>
 182cc90:	e0bffd17 	ldw	r2,-12(fp)
 182cc94:	10800403 	ldbu	r2,16(r2)
 182cc98:	10803fcc 	andi	r2,r2,255
 182cc9c:	1000191e 	bne	r2,zero,182cd04 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 182cca0:	e0bffd17 	ldw	r2,-12(fp)
 182cca4:	10800317 	ldw	r2,12(r2)
 182cca8:	e0fffd17 	ldw	r3,-12(fp)
 182ccac:	18c00517 	ldw	r3,20(r3)
 182ccb0:	1809883a 	mov	r4,r3
 182ccb4:	103ee83a 	callr	r2
 182ccb8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 182ccbc:	e0bfff17 	ldw	r2,-4(fp)
 182ccc0:	1000031e 	bne	r2,zero,182ccd0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 182ccc4:	e13ffd17 	ldw	r4,-12(fp)
 182ccc8:	182cb900 	call	182cb90 <alt_alarm_stop>
 182cccc:	00000d06 	br	182cd04 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 182ccd0:	e0bffd17 	ldw	r2,-12(fp)
 182ccd4:	10c00217 	ldw	r3,8(r2)
 182ccd8:	e0bfff17 	ldw	r2,-4(fp)
 182ccdc:	1887883a 	add	r3,r3,r2
 182cce0:	e0bffd17 	ldw	r2,-12(fp)
 182cce4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 182cce8:	e0bffd17 	ldw	r2,-12(fp)
 182ccec:	10c00217 	ldw	r3,8(r2)
 182ccf0:	d0a80817 	ldw	r2,-24544(gp)
 182ccf4:	1880032e 	bgeu	r3,r2,182cd04 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 182ccf8:	e0bffd17 	ldw	r2,-12(fp)
 182ccfc:	00c00044 	movi	r3,1
 182cd00:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 182cd04:	e0bffe17 	ldw	r2,-8(fp)
 182cd08:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 182cd0c:	e0fffd17 	ldw	r3,-12(fp)
 182cd10:	d0a01c04 	addi	r2,gp,-32656
 182cd14:	18bfcf1e 	bne	r3,r2,182cc54 <__ram_exceptions_end+0xff81c964>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 182cd18:	182bce80 	call	182bce8 <vPortSysTickHandler>
}
 182cd1c:	0001883a 	nop
 182cd20:	e037883a 	mov	sp,fp
 182cd24:	dfc00117 	ldw	ra,4(sp)
 182cd28:	df000017 	ldw	fp,0(sp)
 182cd2c:	dec00204 	addi	sp,sp,8
 182cd30:	f800283a 	ret

0182cd34 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
 182cd34:	defffa04 	addi	sp,sp,-24
 182cd38:	dfc00515 	stw	ra,20(sp)
 182cd3c:	df000415 	stw	fp,16(sp)
 182cd40:	df000404 	addi	fp,sp,16
 182cd44:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
 182cd48:	e0bfff17 	ldw	r2,-4(fp)
 182cd4c:	108007c4 	addi	r2,r2,31
 182cd50:	1004d17a 	srli	r2,r2,5
 182cd54:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
 182cd58:	e0bffc17 	ldw	r2,-16(fp)
 182cd5c:	1004917a 	slli	r2,r2,5
 182cd60:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
 182cd64:	e17ffd17 	ldw	r5,-12(fp)
 182cd68:	01000804 	movi	r4,32
 182cd6c:	183c3500 	call	183c350 <memalign>
 182cd70:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
 182cd74:	e0bffe17 	ldw	r2,-8(fp)
 182cd78:	1000021e 	bne	r2,zero,182cd84 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
 182cd7c:	0005883a 	mov	r2,zero
 182cd80:	00000506 	br	182cd98 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
 182cd84:	e17ffd17 	ldw	r5,-12(fp)
 182cd88:	e13ffe17 	ldw	r4,-8(fp)
 182cd8c:	182c0b40 	call	182c0b4 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
 182cd90:	e0bffe17 	ldw	r2,-8(fp)
 182cd94:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
 182cd98:	e037883a 	mov	sp,fp
 182cd9c:	dfc00117 	ldw	ra,4(sp)
 182cda0:	df000017 	ldw	fp,0(sp)
 182cda4:	dec00204 	addi	sp,sp,8
 182cda8:	f800283a 	ret

0182cdac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 182cdac:	defffe04 	addi	sp,sp,-8
 182cdb0:	dfc00115 	stw	ra,4(sp)
 182cdb4:	df000015 	stw	fp,0(sp)
 182cdb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 182cdbc:	d0a01a17 	ldw	r2,-32664(gp)
 182cdc0:	10000326 	beq	r2,zero,182cdd0 <alt_get_errno+0x24>
 182cdc4:	d0a01a17 	ldw	r2,-32664(gp)
 182cdc8:	103ee83a 	callr	r2
 182cdcc:	00000106 	br	182cdd4 <alt_get_errno+0x28>
 182cdd0:	d0a7ce04 	addi	r2,gp,-24776
}
 182cdd4:	e037883a 	mov	sp,fp
 182cdd8:	dfc00117 	ldw	ra,4(sp)
 182cddc:	df000017 	ldw	fp,0(sp)
 182cde0:	dec00204 	addi	sp,sp,8
 182cde4:	f800283a 	ret

0182cde8 <alt_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 182cde8:	defff904 	addi	sp,sp,-28
 182cdec:	dfc00615 	stw	ra,24(sp)
 182cdf0:	df000515 	stw	fp,20(sp)
 182cdf4:	df000504 	addi	fp,sp,20
 182cdf8:	e13ffd15 	stw	r4,-12(fp)
 182cdfc:	e17ffe15 	stw	r5,-8(fp)
 182ce00:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 182ce04:	e0bffd17 	ldw	r2,-12(fp)
 182ce08:	10000616 	blt	r2,zero,182ce24 <alt_write+0x3c>
 182ce0c:	e0bffd17 	ldw	r2,-12(fp)
 182ce10:	10c00324 	muli	r3,r2,12
 182ce14:	00806134 	movhi	r2,388
 182ce18:	108f1304 	addi	r2,r2,15436
 182ce1c:	1885883a 	add	r2,r3,r2
 182ce20:	00000106 	br	182ce28 <alt_write+0x40>
 182ce24:	0005883a 	mov	r2,zero
 182ce28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 182ce2c:	e0bffb17 	ldw	r2,-20(fp)
 182ce30:	10002126 	beq	r2,zero,182ceb8 <alt_write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 182ce34:	e0bffb17 	ldw	r2,-20(fp)
 182ce38:	10800217 	ldw	r2,8(r2)
 182ce3c:	108000cc 	andi	r2,r2,3
 182ce40:	10001826 	beq	r2,zero,182cea4 <alt_write+0xbc>
 182ce44:	e0bffb17 	ldw	r2,-20(fp)
 182ce48:	10800017 	ldw	r2,0(r2)
 182ce4c:	10800617 	ldw	r2,24(r2)
 182ce50:	10001426 	beq	r2,zero,182cea4 <alt_write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 182ce54:	e0bffb17 	ldw	r2,-20(fp)
 182ce58:	10800017 	ldw	r2,0(r2)
 182ce5c:	10800617 	ldw	r2,24(r2)
 182ce60:	e0ffff17 	ldw	r3,-4(fp)
 182ce64:	180d883a 	mov	r6,r3
 182ce68:	e17ffe17 	ldw	r5,-8(fp)
 182ce6c:	e13ffb17 	ldw	r4,-20(fp)
 182ce70:	103ee83a 	callr	r2
 182ce74:	e0bffc15 	stw	r2,-16(fp)
 182ce78:	e0bffc17 	ldw	r2,-16(fp)
 182ce7c:	1000070e 	bge	r2,zero,182ce9c <alt_write+0xb4>
      {
        ALT_ERRNO = -rval;
 182ce80:	182cdac0 	call	182cdac <alt_get_errno>
 182ce84:	1007883a 	mov	r3,r2
 182ce88:	e0bffc17 	ldw	r2,-16(fp)
 182ce8c:	0085c83a 	sub	r2,zero,r2
 182ce90:	18800015 	stw	r2,0(r3)
        return -1;
 182ce94:	00bfffc4 	movi	r2,-1
 182ce98:	00000c06 	br	182cecc <alt_write+0xe4>
      }
      return rval;
 182ce9c:	e0bffc17 	ldw	r2,-16(fp)
 182cea0:	00000a06 	br	182cecc <alt_write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 182cea4:	182cdac0 	call	182cdac <alt_get_errno>
 182cea8:	1007883a 	mov	r3,r2
 182ceac:	00800344 	movi	r2,13
 182ceb0:	18800015 	stw	r2,0(r3)
 182ceb4:	00000406 	br	182cec8 <alt_write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 182ceb8:	182cdac0 	call	182cdac <alt_get_errno>
 182cebc:	1007883a 	mov	r3,r2
 182cec0:	00801444 	movi	r2,81
 182cec4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 182cec8:	00bfffc4 	movi	r2,-1
}
 182cecc:	e037883a 	mov	sp,fp
 182ced0:	dfc00117 	ldw	ra,4(sp)
 182ced4:	df000017 	ldw	fp,0(sp)
 182ced8:	dec00204 	addi	sp,sp,8
 182cedc:	f800283a 	ret

0182cee0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 182cee0:	deffff04 	addi	sp,sp,-4
 182cee4:	df000015 	stw	fp,0(sp)
 182cee8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 182ceec:	000170fa 	wrctl	ienable,zero
}
 182cef0:	0001883a 	nop
 182cef4:	e037883a 	mov	sp,fp
 182cef8:	df000017 	ldw	fp,0(sp)
 182cefc:	dec00104 	addi	sp,sp,4
 182cf00:	f800283a 	ret

0182cf04 <lwip_socket_init>:
 * Initialize this module. This function has to be called before any other
 * functions in this module!
 */
void
lwip_socket_init(void)
{
 182cf04:	deffff04 	addi	sp,sp,-4
 182cf08:	df000015 	stw	fp,0(sp)
 182cf0c:	d839883a 	mov	fp,sp
}
 182cf10:	0001883a 	nop
 182cf14:	e037883a 	mov	sp,fp
 182cf18:	df000017 	ldw	fp,0(sp)
 182cf1c:	dec00104 	addi	sp,sp,4
 182cf20:	f800283a 	ret

0182cf24 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 182cf24:	defffd04 	addi	sp,sp,-12
 182cf28:	df000215 	stw	fp,8(sp)
 182cf2c:	df000204 	addi	fp,sp,8
 182cf30:	e13fff15 	stw	r4,-4(fp)
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;
 182cf34:	e0bfff17 	ldw	r2,-4(fp)
 182cf38:	10bff804 	addi	r2,r2,-32
 182cf3c:	e0bfff15 	stw	r2,-4(fp)

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 182cf40:	e0bfff17 	ldw	r2,-4(fp)
 182cf44:	10000316 	blt	r2,zero,182cf54 <get_socket+0x30>
 182cf48:	e0bfff17 	ldw	r2,-4(fp)
 182cf4c:	10800a90 	cmplti	r2,r2,42
 182cf50:	1000021e 	bne	r2,zero,182cf5c <get_socket+0x38>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s));
    set_errno(EBADF);
    return NULL;
 182cf54:	0005883a 	mov	r2,zero
 182cf58:	00000c06 	br	182cf8c <get_socket+0x68>
  }

  sock = &sockets[s];
 182cf5c:	e0bfff17 	ldw	r2,-4(fp)
 182cf60:	10c00624 	muli	r3,r2,24
 182cf64:	00806134 	movhi	r2,388
 182cf68:	109d4d04 	addi	r2,r2,30004
 182cf6c:	1885883a 	add	r2,r3,r2
 182cf70:	e0bffe15 	stw	r2,-8(fp)

  if (!sock->conn) {
 182cf74:	e0bffe17 	ldw	r2,-8(fp)
 182cf78:	10800017 	ldw	r2,0(r2)
 182cf7c:	1000021e 	bne	r2,zero,182cf88 <get_socket+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s));
    set_errno(EBADF);
    return NULL;
 182cf80:	0005883a 	mov	r2,zero
 182cf84:	00000106 	br	182cf8c <get_socket+0x68>
  }

  return sock;
 182cf88:	e0bffe17 	ldw	r2,-8(fp)
}
 182cf8c:	e037883a 	mov	sp,fp
 182cf90:	df000017 	ldw	fp,0(sp)
 182cf94:	dec00104 	addi	sp,sp,4
 182cf98:	f800283a 	ret

0182cf9c <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
 182cf9c:	defffe04 	addi	sp,sp,-8
 182cfa0:	df000115 	stw	fp,4(sp)
 182cfa4:	df000104 	addi	fp,sp,4
 182cfa8:	e13fff15 	stw	r4,-4(fp)
	s -= LWIP_SOCKET_OFFSET;
 182cfac:	e0bfff17 	ldw	r2,-4(fp)
 182cfb0:	10bff804 	addi	r2,r2,-32
 182cfb4:	e0bfff15 	stw	r2,-4(fp)

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 182cfb8:	e0bfff17 	ldw	r2,-4(fp)
 182cfbc:	10000316 	blt	r2,zero,182cfcc <tryget_socket+0x30>
 182cfc0:	e0bfff17 	ldw	r2,-4(fp)
 182cfc4:	10800a90 	cmplti	r2,r2,42
 182cfc8:	1000021e 	bne	r2,zero,182cfd4 <tryget_socket+0x38>
    return NULL;
 182cfcc:	0005883a 	mov	r2,zero
 182cfd0:	00000e06 	br	182d00c <tryget_socket+0x70>
  }
  if (!sockets[s].conn) {
 182cfd4:	00806134 	movhi	r2,388
 182cfd8:	109d4d04 	addi	r2,r2,30004
 182cfdc:	e0ffff17 	ldw	r3,-4(fp)
 182cfe0:	18c00624 	muli	r3,r3,24
 182cfe4:	10c5883a 	add	r2,r2,r3
 182cfe8:	10800017 	ldw	r2,0(r2)
 182cfec:	1000021e 	bne	r2,zero,182cff8 <tryget_socket+0x5c>
    return NULL;
 182cff0:	0005883a 	mov	r2,zero
 182cff4:	00000506 	br	182d00c <tryget_socket+0x70>
  }
  return &sockets[s];
 182cff8:	e0bfff17 	ldw	r2,-4(fp)
 182cffc:	10c00624 	muli	r3,r2,24
 182d000:	00806134 	movhi	r2,388
 182d004:	109d4d04 	addi	r2,r2,30004
 182d008:	1885883a 	add	r2,r3,r2
}
 182d00c:	e037883a 	mov	sp,fp
 182d010:	df000017 	ldw	fp,0(sp)
 182d014:	dec00104 	addi	sp,sp,4
 182d018:	f800283a 	ret

0182d01c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 182d01c:	defffb04 	addi	sp,sp,-20
 182d020:	dfc00415 	stw	ra,16(sp)
 182d024:	df000315 	stw	fp,12(sp)
 182d028:	df000304 	addi	fp,sp,12
 182d02c:	e13ffe15 	stw	r4,-8(fp)
 182d030:	e17fff15 	stw	r5,-4(fp)
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 182d034:	e03ffd15 	stw	zero,-12(fp)
 182d038:	00005706 	br	182d198 <alloc_socket+0x17c>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 182d03c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182d040:	10000126 	beq	r2,zero,182d048 <alloc_socket+0x2c>
 182d044:	1810f480 	call	1810f48 <vTaskEnterCritical>
    if (!sockets[i].conn) {
 182d048:	00806134 	movhi	r2,388
 182d04c:	109d4d04 	addi	r2,r2,30004
 182d050:	e0fffd17 	ldw	r3,-12(fp)
 182d054:	18c00624 	muli	r3,r3,24
 182d058:	10c5883a 	add	r2,r2,r3
 182d05c:	10800017 	ldw	r2,0(r2)
 182d060:	1000471e 	bne	r2,zero,182d180 <alloc_socket+0x164>
      sockets[i].conn       = newconn;
 182d064:	00806134 	movhi	r2,388
 182d068:	109d4d04 	addi	r2,r2,30004
 182d06c:	e0fffd17 	ldw	r3,-12(fp)
 182d070:	18c00624 	muli	r3,r3,24
 182d074:	10c5883a 	add	r2,r2,r3
 182d078:	e0fffe17 	ldw	r3,-8(fp)
 182d07c:	10c00015 	stw	r3,0(r2)
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 182d080:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182d084:	10000126 	beq	r2,zero,182d08c <alloc_socket+0x70>
 182d088:	1810f900 	call	1810f90 <vTaskExitCritical>
      sockets[i].lastdata   = NULL;
 182d08c:	00806134 	movhi	r2,388
 182d090:	109d4d04 	addi	r2,r2,30004
 182d094:	e0fffd17 	ldw	r3,-12(fp)
 182d098:	18c00624 	muli	r3,r3,24
 182d09c:	10c5883a 	add	r2,r2,r3
 182d0a0:	10800104 	addi	r2,r2,4
 182d0a4:	10000015 	stw	zero,0(r2)
      sockets[i].lastoffset = 0;
 182d0a8:	00806134 	movhi	r2,388
 182d0ac:	109d4d04 	addi	r2,r2,30004
 182d0b0:	e0fffd17 	ldw	r3,-12(fp)
 182d0b4:	18c00624 	muli	r3,r3,24
 182d0b8:	10c5883a 	add	r2,r2,r3
 182d0bc:	10800204 	addi	r2,r2,8
 182d0c0:	1000000d 	sth	zero,0(r2)
      sockets[i].rcvevent   = 0;
 182d0c4:	00806134 	movhi	r2,388
 182d0c8:	109d4d04 	addi	r2,r2,30004
 182d0cc:	e0fffd17 	ldw	r3,-12(fp)
 182d0d0:	18c00624 	muli	r3,r3,24
 182d0d4:	10c5883a 	add	r2,r2,r3
 182d0d8:	10800284 	addi	r2,r2,10
 182d0dc:	1000000d 	sth	zero,0(r2)
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (newconn->type == NETCONN_TCP ? (accepted != 0) : 1);
 182d0e0:	e0bffe17 	ldw	r2,-8(fp)
 182d0e4:	10800017 	ldw	r2,0(r2)
 182d0e8:	10800418 	cmpnei	r2,r2,16
 182d0ec:	1000021e 	bne	r2,zero,182d0f8 <alloc_socket+0xdc>
 182d0f0:	e0bfff17 	ldw	r2,-4(fp)
 182d0f4:	10000226 	beq	r2,zero,182d100 <alloc_socket+0xe4>
 182d0f8:	00800044 	movi	r2,1
 182d0fc:	00000106 	br	182d104 <alloc_socket+0xe8>
 182d100:	0005883a 	mov	r2,zero
 182d104:	1009883a 	mov	r4,r2
 182d108:	00806134 	movhi	r2,388
 182d10c:	109d4d04 	addi	r2,r2,30004
 182d110:	e0fffd17 	ldw	r3,-12(fp)
 182d114:	18c00624 	muli	r3,r3,24
 182d118:	10c5883a 	add	r2,r2,r3
 182d11c:	10800304 	addi	r2,r2,12
 182d120:	1100000d 	sth	r4,0(r2)
      sockets[i].errevent   = 0;
 182d124:	00806134 	movhi	r2,388
 182d128:	109d4d04 	addi	r2,r2,30004
 182d12c:	e0fffd17 	ldw	r3,-12(fp)
 182d130:	18c00624 	muli	r3,r3,24
 182d134:	10c5883a 	add	r2,r2,r3
 182d138:	10800384 	addi	r2,r2,14
 182d13c:	1000000d 	sth	zero,0(r2)
      sockets[i].err        = 0;
 182d140:	00806134 	movhi	r2,388
 182d144:	109d4d04 	addi	r2,r2,30004
 182d148:	e0fffd17 	ldw	r3,-12(fp)
 182d14c:	18c00624 	muli	r3,r3,24
 182d150:	10c5883a 	add	r2,r2,r3
 182d154:	10800404 	addi	r2,r2,16
 182d158:	10000015 	stw	zero,0(r2)
      sockets[i].select_waiting = 0;
 182d15c:	00806134 	movhi	r2,388
 182d160:	109d4d04 	addi	r2,r2,30004
 182d164:	e0fffd17 	ldw	r3,-12(fp)
 182d168:	18c00624 	muli	r3,r3,24
 182d16c:	10c5883a 	add	r2,r2,r3
 182d170:	10800504 	addi	r2,r2,20
 182d174:	10000015 	stw	zero,0(r2)
      return i;
 182d178:	e0bffd17 	ldw	r2,-12(fp)
 182d17c:	00000a06 	br	182d1a8 <alloc_socket+0x18c>
    }
    SYS_ARCH_UNPROTECT(lev);
 182d180:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182d184:	10000126 	beq	r2,zero,182d18c <alloc_socket+0x170>
 182d188:	1810f900 	call	1810f90 <vTaskExitCritical>
{
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 182d18c:	e0bffd17 	ldw	r2,-12(fp)
 182d190:	10800044 	addi	r2,r2,1
 182d194:	e0bffd15 	stw	r2,-12(fp)
 182d198:	e0bffd17 	ldw	r2,-12(fp)
 182d19c:	10800a90 	cmplti	r2,r2,42
 182d1a0:	103fa61e 	bne	r2,zero,182d03c <__ram_exceptions_end+0xff81cd4c>
      sockets[i].select_waiting = 0;
      return i;
    }
    SYS_ARCH_UNPROTECT(lev);
  }
  return -1;
 182d1a4:	00bfffc4 	movi	r2,-1
}
 182d1a8:	e037883a 	mov	sp,fp
 182d1ac:	dfc00117 	ldw	ra,4(sp)
 182d1b0:	df000017 	ldw	fp,0(sp)
 182d1b4:	dec00204 	addi	sp,sp,8
 182d1b8:	f800283a 	ret

0182d1bc <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 182d1bc:	defffb04 	addi	sp,sp,-20
 182d1c0:	dfc00415 	stw	ra,16(sp)
 182d1c4:	df000315 	stw	fp,12(sp)
 182d1c8:	df000304 	addi	fp,sp,12
 182d1cc:	e13ffe15 	stw	r4,-8(fp)
 182d1d0:	e17fff15 	stw	r5,-4(fp)
  void *lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  lastdata         = sock->lastdata;
 182d1d4:	e0bffe17 	ldw	r2,-8(fp)
 182d1d8:	10800117 	ldw	r2,4(r2)
 182d1dc:	e0bffd15 	stw	r2,-12(fp)
  sock->lastdata   = NULL;
 182d1e0:	e0bffe17 	ldw	r2,-8(fp)
 182d1e4:	10000115 	stw	zero,4(r2)
  sock->lastoffset = 0;
 182d1e8:	e0bffe17 	ldw	r2,-8(fp)
 182d1ec:	1000020d 	sth	zero,8(r2)
  sock->err        = 0;
 182d1f0:	e0bffe17 	ldw	r2,-8(fp)
 182d1f4:	10000415 	stw	zero,16(r2)

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 182d1f8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182d1fc:	10000126 	beq	r2,zero,182d204 <free_socket+0x48>
 182d200:	1810f480 	call	1810f48 <vTaskEnterCritical>
  sock->conn       = NULL;
 182d204:	e0bffe17 	ldw	r2,-8(fp)
 182d208:	10000015 	stw	zero,0(r2)
  SYS_ARCH_UNPROTECT(lev);
 182d20c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182d210:	10000126 	beq	r2,zero,182d218 <free_socket+0x5c>
 182d214:	1810f900 	call	1810f90 <vTaskExitCritical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
 182d218:	e0bffd17 	ldw	r2,-12(fp)
 182d21c:	10000726 	beq	r2,zero,182d23c <free_socket+0x80>
    if (is_tcp) {
 182d220:	e0bfff17 	ldw	r2,-4(fp)
 182d224:	10000326 	beq	r2,zero,182d234 <free_socket+0x78>
      pbuf_free((struct pbuf *)lastdata);
 182d228:	e13ffd17 	ldw	r4,-12(fp)
 182d22c:	181a22c0 	call	181a22c <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
 182d230:	00000206 	br	182d23c <free_socket+0x80>

  if (lastdata != NULL) {
    if (is_tcp) {
      pbuf_free((struct pbuf *)lastdata);
    } else {
      netbuf_delete((struct netbuf *)lastdata);
 182d234:	e13ffd17 	ldw	r4,-12(fp)
 182d238:	183bd840 	call	183bd84 <netbuf_delete>
    }
  }
}
 182d23c:	0001883a 	nop
 182d240:	e037883a 	mov	sp,fp
 182d244:	dfc00117 	ldw	ra,4(sp)
 182d248:	df000017 	ldw	fp,0(sp)
 182d24c:	dec00204 	addi	sp,sp,8
 182d250:	f800283a 	ret

0182d254 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 182d254:	defff004 	addi	sp,sp,-64
 182d258:	dfc00f15 	stw	ra,60(sp)
 182d25c:	df000e15 	stw	fp,56(sp)
 182d260:	df000e04 	addi	fp,sp,56
 182d264:	e13ffd15 	stw	r4,-12(fp)
 182d268:	e17ffe15 	stw	r5,-8(fp)
 182d26c:	e1bfff15 	stw	r6,-4(fp)
  struct sockaddr_in sin;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 182d270:	e13ffd17 	ldw	r4,-12(fp)
 182d274:	182cf240 	call	182cf24 <get_socket>
 182d278:	e0bff215 	stw	r2,-56(fp)
  if (!sock) {
 182d27c:	e0bff217 	ldw	r2,-56(fp)
 182d280:	1000021e 	bne	r2,zero,182d28c <lwip_accept+0x38>
    return -1;
 182d284:	00bfffc4 	movi	r2,-1
 182d288:	0000ae06 	br	182d544 <lwip_accept+0x2f0>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
 182d28c:	e0bff217 	ldw	r2,-56(fp)
 182d290:	10800017 	ldw	r2,0(r2)
 182d294:	10800903 	ldbu	r2,36(r2)
 182d298:	10803fcc 	andi	r2,r2,255
 182d29c:	1080008c 	andi	r2,r2,2
 182d2a0:	10000b26 	beq	r2,zero,182d2d0 <lwip_accept+0x7c>
 182d2a4:	e0bff217 	ldw	r2,-56(fp)
 182d2a8:	1080028b 	ldhu	r2,10(r2)
 182d2ac:	10bfffcc 	andi	r2,r2,65535
 182d2b0:	10a0001c 	xori	r2,r2,32768
 182d2b4:	10a00004 	addi	r2,r2,-32768
 182d2b8:	00800516 	blt	zero,r2,182d2d0 <lwip_accept+0x7c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    sock_set_errno(sock, EWOULDBLOCK);
 182d2bc:	e0bff217 	ldw	r2,-56(fp)
 182d2c0:	00c002c4 	movi	r3,11
 182d2c4:	10c00415 	stw	r3,16(r2)
    return -1;
 182d2c8:	00bfffc4 	movi	r2,-1
 182d2cc:	00009d06 	br	182d544 <lwip_accept+0x2f0>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 182d2d0:	e0bff217 	ldw	r2,-56(fp)
 182d2d4:	10800017 	ldw	r2,0(r2)
 182d2d8:	e0fff604 	addi	r3,fp,-40
 182d2dc:	180b883a 	mov	r5,r3
 182d2e0:	1009883a 	mov	r4,r2
 182d2e4:	1838c780 	call	1838c78 <netconn_accept>
 182d2e8:	e0bff305 	stb	r2,-52(fp)
  if (err != ERR_OK) {
 182d2ec:	e0bff307 	ldb	r2,-52(fp)
 182d2f0:	10001c26 	beq	r2,zero,182d364 <lwip_accept+0x110>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (netconn_type(sock->conn) != NETCONN_TCP) {
 182d2f4:	e0bff217 	ldw	r2,-56(fp)
 182d2f8:	10800017 	ldw	r2,0(r2)
 182d2fc:	10800017 	ldw	r2,0(r2)
 182d300:	10800420 	cmpeqi	r2,r2,16
 182d304:	1000051e 	bne	r2,zero,182d31c <lwip_accept+0xc8>
      sock_set_errno(sock, EOPNOTSUPP);
 182d308:	e0bff217 	ldw	r2,-56(fp)
 182d30c:	00c017c4 	movi	r3,95
 182d310:	10c00415 	stw	r3,16(r2)
      return EOPNOTSUPP;
 182d314:	008017c4 	movi	r2,95
 182d318:	00008a06 	br	182d544 <lwip_accept+0x2f0>
    }
    sock_set_errno(sock, err_to_errno(err));
 182d31c:	e0bff307 	ldb	r2,-52(fp)
 182d320:	0085c83a 	sub	r2,zero,r2
 182d324:	10800428 	cmpgeui	r2,r2,16
 182d328:	1000091e 	bne	r2,zero,182d350 <lwip_accept+0xfc>
 182d32c:	e0bff307 	ldb	r2,-52(fp)
 182d330:	0087c83a 	sub	r3,zero,r2
 182d334:	00806134 	movhi	r2,388
 182d338:	108b9004 	addi	r2,r2,11840
 182d33c:	18c7883a 	add	r3,r3,r3
 182d340:	18c7883a 	add	r3,r3,r3
 182d344:	10c5883a 	add	r2,r2,r3
 182d348:	10800017 	ldw	r2,0(r2)
 182d34c:	00000106 	br	182d354 <lwip_accept+0x100>
 182d350:	00800144 	movi	r2,5
 182d354:	e0fff217 	ldw	r3,-56(fp)
 182d358:	18800415 	stw	r2,16(r3)
    return -1;
 182d35c:	00bfffc4 	movi	r2,-1
 182d360:	00007806 	br	182d544 <lwip_accept+0x2f0>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  /* Prevent automatic window updates, we do this on our own! */
  netconn_set_noautorecved(newconn, 1);
 182d364:	e0bff617 	ldw	r2,-40(fp)
 182d368:	e0fff617 	ldw	r3,-40(fp)
 182d36c:	18c00903 	ldbu	r3,36(r3)
 182d370:	18c00214 	ori	r3,r3,8
 182d374:	10c00905 	stb	r3,36(r2)

  /* get the IP address and port of the remote host */
  err = netconn_peer(newconn, &naddr, &port);
 182d378:	e0bff617 	ldw	r2,-40(fp)
 182d37c:	e13ff804 	addi	r4,fp,-32
 182d380:	e0fff704 	addi	r3,fp,-36
 182d384:	000f883a 	mov	r7,zero
 182d388:	200d883a 	mov	r6,r4
 182d38c:	180b883a 	mov	r5,r3
 182d390:	1009883a 	mov	r4,r2
 182d394:	18388040 	call	1838804 <netconn_getaddr>
 182d398:	e0bff305 	stb	r2,-52(fp)
  if (err != ERR_OK) {
 182d39c:	e0bff307 	ldb	r2,-52(fp)
 182d3a0:	10001526 	beq	r2,zero,182d3f8 <lwip_accept+0x1a4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
    netconn_delete(newconn);
 182d3a4:	e0bff617 	ldw	r2,-40(fp)
 182d3a8:	1009883a 	mov	r4,r2
 182d3ac:	18387a40 	call	18387a4 <netconn_delete>
    sock_set_errno(sock, err_to_errno(err));
 182d3b0:	e0bff307 	ldb	r2,-52(fp)
 182d3b4:	0085c83a 	sub	r2,zero,r2
 182d3b8:	10800428 	cmpgeui	r2,r2,16
 182d3bc:	1000091e 	bne	r2,zero,182d3e4 <lwip_accept+0x190>
 182d3c0:	e0bff307 	ldb	r2,-52(fp)
 182d3c4:	0087c83a 	sub	r3,zero,r2
 182d3c8:	00806134 	movhi	r2,388
 182d3cc:	108b9004 	addi	r2,r2,11840
 182d3d0:	18c7883a 	add	r3,r3,r3
 182d3d4:	18c7883a 	add	r3,r3,r3
 182d3d8:	10c5883a 	add	r2,r2,r3
 182d3dc:	10800017 	ldw	r2,0(r2)
 182d3e0:	00000106 	br	182d3e8 <lwip_accept+0x194>
 182d3e4:	00800144 	movi	r2,5
 182d3e8:	e0fff217 	ldw	r3,-56(fp)
 182d3ec:	18800415 	stw	r2,16(r3)
    return -1;
 182d3f0:	00bfffc4 	movi	r2,-1
 182d3f4:	00005306 	br	182d544 <lwip_accept+0x2f0>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (NULL != addr) {
 182d3f8:	e0bffe17 	ldw	r2,-8(fp)
 182d3fc:	10002226 	beq	r2,zero,182d488 <lwip_accept+0x234>
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
    memset(&sin, 0, sizeof(sin));
 182d400:	e0bff904 	addi	r2,fp,-28
 182d404:	01800404 	movi	r6,16
 182d408:	000b883a 	mov	r5,zero
 182d40c:	1009883a 	mov	r4,r2
 182d410:	18060e00 	call	18060e0 <memset>
    sin.sin_len = sizeof(sin);
 182d414:	00800404 	movi	r2,16
 182d418:	e0bff905 	stb	r2,-28(fp)
    sin.sin_family = AF_INET;
 182d41c:	00800084 	movi	r2,2
 182d420:	e0bff945 	stb	r2,-27(fp)
    sin.sin_port = htons(port);
 182d424:	e0bff80b 	ldhu	r2,-32(fp)
 182d428:	10bfffcc 	andi	r2,r2,65535
 182d42c:	1004d23a 	srli	r2,r2,8
 182d430:	1007883a 	mov	r3,r2
 182d434:	e0bff80b 	ldhu	r2,-32(fp)
 182d438:	10bfffcc 	andi	r2,r2,65535
 182d43c:	1004923a 	slli	r2,r2,8
 182d440:	1884b03a 	or	r2,r3,r2
 182d444:	e0bff98d 	sth	r2,-26(fp)
    inet_addr_from_ipaddr(&sin.sin_addr, &naddr);
 182d448:	e0bff717 	ldw	r2,-36(fp)
 182d44c:	e0bffa15 	stw	r2,-24(fp)

    if (*addrlen > sizeof(sin))
 182d450:	e0bfff17 	ldw	r2,-4(fp)
 182d454:	10800017 	ldw	r2,0(r2)
 182d458:	10800470 	cmpltui	r2,r2,17
 182d45c:	1000031e 	bne	r2,zero,182d46c <lwip_accept+0x218>
      *addrlen = sizeof(sin);
 182d460:	e0bfff17 	ldw	r2,-4(fp)
 182d464:	00c00404 	movi	r3,16
 182d468:	10c00015 	stw	r3,0(r2)

    MEMCPY(addr, &sin, *addrlen);
 182d46c:	e0bfff17 	ldw	r2,-4(fp)
 182d470:	10c00017 	ldw	r3,0(r2)
 182d474:	e0bff904 	addi	r2,fp,-28
 182d478:	180d883a 	mov	r6,r3
 182d47c:	100b883a 	mov	r5,r2
 182d480:	e13ffe17 	ldw	r4,-8(fp)
 182d484:	1805f980 	call	1805f98 <memcpy>
  }

  newsock = alloc_socket(newconn, 1);
 182d488:	e0bff617 	ldw	r2,-40(fp)
 182d48c:	01400044 	movi	r5,1
 182d490:	1009883a 	mov	r4,r2
 182d494:	182d01c0 	call	182d01c <alloc_socket>
 182d498:	e0bff415 	stw	r2,-48(fp)
  if (newsock == -1) {
 182d49c:	e0bff417 	ldw	r2,-48(fp)
 182d4a0:	10bfffd8 	cmpnei	r2,r2,-1
 182d4a4:	1000081e 	bne	r2,zero,182d4c8 <lwip_accept+0x274>
    netconn_delete(newconn);
 182d4a8:	e0bff617 	ldw	r2,-40(fp)
 182d4ac:	1009883a 	mov	r4,r2
 182d4b0:	18387a40 	call	18387a4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 182d4b4:	e0bff217 	ldw	r2,-56(fp)
 182d4b8:	00c005c4 	movi	r3,23
 182d4bc:	10c00415 	stw	r3,16(r2)
    return -1;
 182d4c0:	00bfffc4 	movi	r2,-1
 182d4c4:	00001f06 	br	182d544 <lwip_accept+0x2f0>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= 0) && (newsock < NUM_SOCKETS));
  LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock];
 182d4c8:	e0bff417 	ldw	r2,-48(fp)
 182d4cc:	10c00624 	muli	r3,r2,24
 182d4d0:	00806134 	movhi	r2,388
 182d4d4:	109d4d04 	addi	r2,r2,30004
 182d4d8:	1885883a 	add	r2,r3,r2
 182d4dc:	e0bff515 	stw	r2,-44(fp)

  newsock += LWIP_SOCKET_OFFSET;
 182d4e0:	e0bff417 	ldw	r2,-48(fp)
 182d4e4:	10800804 	addi	r2,r2,32
 182d4e8:	e0bff415 	stw	r2,-48(fp)
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 182d4ec:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182d4f0:	10000126 	beq	r2,zero,182d4f8 <lwip_accept+0x2a4>
 182d4f4:	1810f480 	call	1810f48 <vTaskEnterCritical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
 182d4f8:	e0bff517 	ldw	r2,-44(fp)
 182d4fc:	1080028b 	ldhu	r2,10(r2)
 182d500:	1007883a 	mov	r3,r2
 182d504:	e0bff617 	ldw	r2,-40(fp)
 182d508:	10800717 	ldw	r2,28(r2)
 182d50c:	1885c83a 	sub	r2,r3,r2
 182d510:	10bfffc4 	addi	r2,r2,-1
 182d514:	1007883a 	mov	r3,r2
 182d518:	e0bff517 	ldw	r2,-44(fp)
 182d51c:	10c0028d 	sth	r3,10(r2)
  newconn->socket = newsock;
 182d520:	e0bff617 	ldw	r2,-40(fp)
 182d524:	e0fff417 	ldw	r3,-48(fp)
 182d528:	10c00715 	stw	r3,28(r2)
  SYS_ARCH_UNPROTECT(lev);
 182d52c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182d530:	10000126 	beq	r2,zero,182d538 <lwip_accept+0x2e4>
 182d534:	1810f900 	call	1810f90 <vTaskExitCritical>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d addr=", s, newsock));
  ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));

  sock_set_errno(sock, 0);
 182d538:	e0bff217 	ldw	r2,-56(fp)
 182d53c:	10000415 	stw	zero,16(r2)
  return newsock;
 182d540:	e0bff417 	ldw	r2,-48(fp)
}
 182d544:	e037883a 	mov	sp,fp
 182d548:	dfc00117 	ldw	ra,4(sp)
 182d54c:	df000017 	ldw	fp,0(sp)
 182d550:	dec00204 	addi	sp,sp,8
 182d554:	f800283a 	ret

0182d558 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 182d558:	defff704 	addi	sp,sp,-36
 182d55c:	dfc00815 	stw	ra,32(sp)
 182d560:	df000715 	stw	fp,28(sp)
 182d564:	df000704 	addi	fp,sp,28
 182d568:	e13ffd15 	stw	r4,-12(fp)
 182d56c:	e17ffe15 	stw	r5,-8(fp)
 182d570:	e1bfff15 	stw	r6,-4(fp)
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;
  const struct sockaddr_in *name_in;

  sock = get_socket(s);
 182d574:	e13ffd17 	ldw	r4,-12(fp)
 182d578:	182cf240 	call	182cf24 <get_socket>
 182d57c:	e0bff915 	stw	r2,-28(fp)
  if (!sock) {
 182d580:	e0bff917 	ldw	r2,-28(fp)
 182d584:	1000021e 	bne	r2,zero,182d590 <lwip_bind+0x38>
    return -1;
 182d588:	00bfffc4 	movi	r2,-1
 182d58c:	00004206 	br	182d698 <lwip_bind+0x140>
  }

  /* check size, familiy and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
 182d590:	e0bfff17 	ldw	r2,-4(fp)
 182d594:	10800418 	cmpnei	r2,r2,16
 182d598:	1000081e 	bne	r2,zero,182d5bc <lwip_bind+0x64>
 182d59c:	e0bffe17 	ldw	r2,-8(fp)
 182d5a0:	10800043 	ldbu	r2,1(r2)
 182d5a4:	10803fcc 	andi	r2,r2,255
 182d5a8:	10800098 	cmpnei	r2,r2,2
 182d5ac:	1000031e 	bne	r2,zero,182d5bc <lwip_bind+0x64>
 182d5b0:	e0bffe17 	ldw	r2,-8(fp)
 182d5b4:	108000cc 	andi	r2,r2,3
 182d5b8:	10000926 	beq	r2,zero,182d5e0 <lwip_bind+0x88>
 182d5bc:	01c06134 	movhi	r7,388
 182d5c0:	39cba004 	addi	r7,r7,11904
 182d5c4:	01806ac4 	movi	r6,427
 182d5c8:	01406134 	movhi	r5,388
 182d5cc:	294ba604 	addi	r5,r5,11928
 182d5d0:	01006134 	movhi	r4,388
 182d5d4:	210bad04 	addi	r4,r4,11956
 182d5d8:	1800b240 	call	1800b24 <printf>
 182d5dc:	003fff06 	br	182d5dc <__ram_exceptions_end+0xff81d2ec>
             ((name->sa_family) == AF_INET) && ((((mem_ptr_t)name) % 4) == 0)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  name_in = (const struct sockaddr_in *)(void*)name;
 182d5e0:	e0bffe17 	ldw	r2,-8(fp)
 182d5e4:	e0bffa15 	stw	r2,-24(fp)

  inet_addr_to_ipaddr(&local_addr, &name_in->sin_addr);
 182d5e8:	e0bffa17 	ldw	r2,-24(fp)
 182d5ec:	10800117 	ldw	r2,4(r2)
 182d5f0:	e0bffc15 	stw	r2,-16(fp)
  local_port = name_in->sin_port;
 182d5f4:	e0bffa17 	ldw	r2,-24(fp)
 182d5f8:	1080008b 	ldhu	r2,2(r2)
 182d5fc:	e0bffb0d 	sth	r2,-20(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d, addr=", s));
  ip_addr_debug_print(SOCKETS_DEBUG, &local_addr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", ntohs(local_port)));

  err = netconn_bind(sock->conn, &local_addr, ntohs(local_port));
 182d600:	e0bff917 	ldw	r2,-28(fp)
 182d604:	10c00017 	ldw	r3,0(r2)
 182d608:	e0bffb0b 	ldhu	r2,-20(fp)
 182d60c:	1004d23a 	srli	r2,r2,8
 182d610:	1009883a 	mov	r4,r2
 182d614:	e0bffb0b 	ldhu	r2,-20(fp)
 182d618:	1004923a 	slli	r2,r2,8
 182d61c:	2084b03a 	or	r2,r4,r2
 182d620:	113fffcc 	andi	r4,r2,65535
 182d624:	e0bffc04 	addi	r2,fp,-16
 182d628:	200d883a 	mov	r6,r4
 182d62c:	100b883a 	mov	r5,r2
 182d630:	1809883a 	mov	r4,r3
 182d634:	18389400 	call	1838940 <netconn_bind>
 182d638:	e0bffb85 	stb	r2,-18(fp)

  if (err != ERR_OK) {
 182d63c:	e0bffb87 	ldb	r2,-18(fp)
 182d640:	10001226 	beq	r2,zero,182d68c <lwip_bind+0x134>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 182d644:	e0bffb87 	ldb	r2,-18(fp)
 182d648:	0085c83a 	sub	r2,zero,r2
 182d64c:	10800428 	cmpgeui	r2,r2,16
 182d650:	1000091e 	bne	r2,zero,182d678 <lwip_bind+0x120>
 182d654:	e0bffb87 	ldb	r2,-18(fp)
 182d658:	0087c83a 	sub	r3,zero,r2
 182d65c:	00806134 	movhi	r2,388
 182d660:	108b9004 	addi	r2,r2,11840
 182d664:	18c7883a 	add	r3,r3,r3
 182d668:	18c7883a 	add	r3,r3,r3
 182d66c:	10c5883a 	add	r2,r2,r3
 182d670:	10800017 	ldw	r2,0(r2)
 182d674:	00000106 	br	182d67c <lwip_bind+0x124>
 182d678:	00800144 	movi	r2,5
 182d67c:	e0fff917 	ldw	r3,-28(fp)
 182d680:	18800415 	stw	r2,16(r3)
    return -1;
 182d684:	00bfffc4 	movi	r2,-1
 182d688:	00000306 	br	182d698 <lwip_bind+0x140>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 182d68c:	e0bff917 	ldw	r2,-28(fp)
 182d690:	10000415 	stw	zero,16(r2)
  return 0;
 182d694:	0005883a 	mov	r2,zero
}
 182d698:	e037883a 	mov	sp,fp
 182d69c:	dfc00117 	ldw	ra,4(sp)
 182d6a0:	df000017 	ldw	fp,0(sp)
 182d6a4:	dec00204 	addi	sp,sp,8
 182d6a8:	f800283a 	ret

0182d6ac <lwip_close>:

int
lwip_close(int s)
{
 182d6ac:	defffb04 	addi	sp,sp,-20
 182d6b0:	dfc00415 	stw	ra,16(sp)
 182d6b4:	df000315 	stw	fp,12(sp)
 182d6b8:	df000304 	addi	fp,sp,12
 182d6bc:	e13fff15 	stw	r4,-4(fp)
  struct lwip_sock *sock;
  int is_tcp = 0;
 182d6c0:	e03ffd15 	stw	zero,-12(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 182d6c4:	e13fff17 	ldw	r4,-4(fp)
 182d6c8:	182cf240 	call	182cf24 <get_socket>
 182d6cc:	e0bffe15 	stw	r2,-8(fp)
  if (!sock) {
 182d6d0:	e0bffe17 	ldw	r2,-8(fp)
 182d6d4:	1000021e 	bne	r2,zero,182d6e0 <lwip_close+0x34>
    return -1;
 182d6d8:	00bfffc4 	movi	r2,-1
 182d6dc:	00001106 	br	182d724 <lwip_close+0x78>
  }

  if(sock->conn != NULL) {
 182d6e0:	e0bffe17 	ldw	r2,-8(fp)
 182d6e4:	10800017 	ldw	r2,0(r2)
 182d6e8:	10000626 	beq	r2,zero,182d704 <lwip_close+0x58>
    is_tcp = netconn_type(sock->conn) == NETCONN_TCP;
 182d6ec:	e0bffe17 	ldw	r2,-8(fp)
 182d6f0:	10800017 	ldw	r2,0(r2)
 182d6f4:	10800017 	ldw	r2,0(r2)
 182d6f8:	10800420 	cmpeqi	r2,r2,16
 182d6fc:	10803fcc 	andi	r2,r2,255
 182d700:	e0bffd15 	stw	r2,-12(fp)
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  }

  netconn_delete(sock->conn);
 182d704:	e0bffe17 	ldw	r2,-8(fp)
 182d708:	10800017 	ldw	r2,0(r2)
 182d70c:	1009883a 	mov	r4,r2
 182d710:	18387a40 	call	18387a4 <netconn_delete>

  free_socket(sock, is_tcp);
 182d714:	e17ffd17 	ldw	r5,-12(fp)
 182d718:	e13ffe17 	ldw	r4,-8(fp)
 182d71c:	182d1bc0 	call	182d1bc <free_socket>
  set_errno(0);
  return 0;
 182d720:	0005883a 	mov	r2,zero
}
 182d724:	e037883a 	mov	sp,fp
 182d728:	dfc00117 	ldw	ra,4(sp)
 182d72c:	df000017 	ldw	fp,0(sp)
 182d730:	dec00204 	addi	sp,sp,8
 182d734:	f800283a 	ret

0182d738 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 182d738:	defff604 	addi	sp,sp,-40
 182d73c:	dfc00915 	stw	ra,36(sp)
 182d740:	df000815 	stw	fp,32(sp)
 182d744:	df000804 	addi	fp,sp,32
 182d748:	e13ffd15 	stw	r4,-12(fp)
 182d74c:	e17ffe15 	stw	r5,-8(fp)
 182d750:	e1bfff15 	stw	r6,-4(fp)
  struct lwip_sock *sock;
  err_t err;
  const struct sockaddr_in *name_in;

  sock = get_socket(s);
 182d754:	e13ffd17 	ldw	r4,-12(fp)
 182d758:	182cf240 	call	182cf24 <get_socket>
 182d75c:	e0bff915 	stw	r2,-28(fp)
  if (!sock) {
 182d760:	e0bff917 	ldw	r2,-28(fp)
 182d764:	1000021e 	bne	r2,zero,182d770 <lwip_connect+0x38>
    return -1;
 182d768:	00bfffc4 	movi	r2,-1
 182d76c:	00004c06 	br	182d8a0 <lwip_connect+0x168>
  }

  /* check size, familiy and alignment of 'name' */
  LWIP_ERROR("lwip_connect: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
 182d770:	e0bfff17 	ldw	r2,-4(fp)
 182d774:	10800418 	cmpnei	r2,r2,16
 182d778:	1000081e 	bne	r2,zero,182d79c <lwip_connect+0x64>
 182d77c:	e0bffe17 	ldw	r2,-8(fp)
 182d780:	10800043 	ldbu	r2,1(r2)
 182d784:	10803fcc 	andi	r2,r2,255
 182d788:	10800098 	cmpnei	r2,r2,2
 182d78c:	1000031e 	bne	r2,zero,182d79c <lwip_connect+0x64>
 182d790:	e0bffe17 	ldw	r2,-8(fp)
 182d794:	108000cc 	andi	r2,r2,3
 182d798:	10000926 	beq	r2,zero,182d7c0 <lwip_connect+0x88>
 182d79c:	01c06134 	movhi	r7,388
 182d7a0:	39cba004 	addi	r7,r7,11904
 182d7a4:	01807ac4 	movi	r6,491
 182d7a8:	01406134 	movhi	r5,388
 182d7ac:	294bb904 	addi	r5,r5,12004
 182d7b0:	01006134 	movhi	r4,388
 182d7b4:	210bad04 	addi	r4,r4,11956
 182d7b8:	1800b240 	call	1800b24 <printf>
 182d7bc:	003fff06 	br	182d7bc <__ram_exceptions_end+0xff81d4cc>
             ((name->sa_family) == AF_INET) && ((((mem_ptr_t)name) % 4) == 0)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  name_in = (const struct sockaddr_in *)(void*)name;
 182d7c0:	e0bffe17 	ldw	r2,-8(fp)
 182d7c4:	e0bffa15 	stw	r2,-24(fp)

  if (name_in->sin_family == AF_UNSPEC) {
 182d7c8:	e0bffa17 	ldw	r2,-24(fp)
 182d7cc:	10800043 	ldbu	r2,1(r2)
 182d7d0:	10803fcc 	andi	r2,r2,255
 182d7d4:	1000061e 	bne	r2,zero,182d7f0 <lwip_connect+0xb8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 182d7d8:	e0bff917 	ldw	r2,-28(fp)
 182d7dc:	10800017 	ldw	r2,0(r2)
 182d7e0:	1009883a 	mov	r4,r2
 182d7e4:	1838af00 	call	1838af0 <netconn_disconnect>
 182d7e8:	e0bff805 	stb	r2,-32(fp)
 182d7ec:	00001506 	br	182d844 <lwip_connect+0x10c>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    inet_addr_to_ipaddr(&remote_addr, &name_in->sin_addr);
 182d7f0:	e0bffa17 	ldw	r2,-24(fp)
 182d7f4:	10800117 	ldw	r2,4(r2)
 182d7f8:	e0bffc15 	stw	r2,-16(fp)
    remote_port = name_in->sin_port;
 182d7fc:	e0bffa17 	ldw	r2,-24(fp)
 182d800:	1080008b 	ldhu	r2,2(r2)
 182d804:	e0bffb0d 	sth	r2,-20(fp)

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, addr=", s));
    ip_addr_debug_print(SOCKETS_DEBUG, &remote_addr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", ntohs(remote_port)));

    err = netconn_connect(sock->conn, &remote_addr, ntohs(remote_port));
 182d808:	e0bff917 	ldw	r2,-28(fp)
 182d80c:	10c00017 	ldw	r3,0(r2)
 182d810:	e0bffb0b 	ldhu	r2,-20(fp)
 182d814:	1004d23a 	srli	r2,r2,8
 182d818:	1009883a 	mov	r4,r2
 182d81c:	e0bffb0b 	ldhu	r2,-20(fp)
 182d820:	1004923a 	slli	r2,r2,8
 182d824:	2084b03a 	or	r2,r4,r2
 182d828:	113fffcc 	andi	r4,r2,65535
 182d82c:	e0bffc04 	addi	r2,fp,-16
 182d830:	200d883a 	mov	r6,r4
 182d834:	100b883a 	mov	r5,r2
 182d838:	1809883a 	mov	r4,r3
 182d83c:	1838a180 	call	1838a18 <netconn_connect>
 182d840:	e0bff805 	stb	r2,-32(fp)
  }

  if (err != ERR_OK) {
 182d844:	e0bff807 	ldb	r2,-32(fp)
 182d848:	10001226 	beq	r2,zero,182d894 <lwip_connect+0x15c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 182d84c:	e0bff807 	ldb	r2,-32(fp)
 182d850:	0085c83a 	sub	r2,zero,r2
 182d854:	10800428 	cmpgeui	r2,r2,16
 182d858:	1000091e 	bne	r2,zero,182d880 <lwip_connect+0x148>
 182d85c:	e0bff807 	ldb	r2,-32(fp)
 182d860:	0087c83a 	sub	r3,zero,r2
 182d864:	00806134 	movhi	r2,388
 182d868:	108b9004 	addi	r2,r2,11840
 182d86c:	18c7883a 	add	r3,r3,r3
 182d870:	18c7883a 	add	r3,r3,r3
 182d874:	10c5883a 	add	r2,r2,r3
 182d878:	10800017 	ldw	r2,0(r2)
 182d87c:	00000106 	br	182d884 <lwip_connect+0x14c>
 182d880:	00800144 	movi	r2,5
 182d884:	e0fff917 	ldw	r3,-28(fp)
 182d888:	18800415 	stw	r2,16(r3)
    return -1;
 182d88c:	00bfffc4 	movi	r2,-1
 182d890:	00000306 	br	182d8a0 <lwip_connect+0x168>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 182d894:	e0bff917 	ldw	r2,-28(fp)
 182d898:	10000415 	stw	zero,16(r2)
  return 0;
 182d89c:	0005883a 	mov	r2,zero
}
 182d8a0:	e037883a 	mov	sp,fp
 182d8a4:	dfc00117 	ldw	ra,4(sp)
 182d8a8:	df000017 	ldw	fp,0(sp)
 182d8ac:	dec00204 	addi	sp,sp,8
 182d8b0:	f800283a 	ret

0182d8b4 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 182d8b4:	defffa04 	addi	sp,sp,-24
 182d8b8:	dfc00515 	stw	ra,20(sp)
 182d8bc:	df000415 	stw	fp,16(sp)
 182d8c0:	df000404 	addi	fp,sp,16
 182d8c4:	e13ffe15 	stw	r4,-8(fp)
 182d8c8:	e17fff15 	stw	r5,-4(fp)
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 182d8cc:	e13ffe17 	ldw	r4,-8(fp)
 182d8d0:	182cf240 	call	182cf24 <get_socket>
 182d8d4:	e0bffc15 	stw	r2,-16(fp)
  if (!sock) {
 182d8d8:	e0bffc17 	ldw	r2,-16(fp)
 182d8dc:	1000021e 	bne	r2,zero,182d8e8 <lwip_listen+0x34>
    return -1;
 182d8e0:	00bfffc4 	movi	r2,-1
 182d8e4:	00003206 	br	182d9b0 <lwip_listen+0xfc>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 182d8e8:	e0bfff17 	ldw	r2,-4(fp)
 182d8ec:	10803fc8 	cmpgei	r2,r2,255
 182d8f0:	1000041e 	bne	r2,zero,182d904 <lwip_listen+0x50>
 182d8f4:	e0bfff17 	ldw	r2,-4(fp)
 182d8f8:	1000030e 	bge	r2,zero,182d908 <lwip_listen+0x54>
 182d8fc:	0005883a 	mov	r2,zero
 182d900:	00000106 	br	182d908 <lwip_listen+0x54>
 182d904:	00803fc4 	movi	r2,255
 182d908:	e0bfff15 	stw	r2,-4(fp)

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 182d90c:	e0bffc17 	ldw	r2,-16(fp)
 182d910:	10c00017 	ldw	r3,0(r2)
 182d914:	e0bfff17 	ldw	r2,-4(fp)
 182d918:	10803fcc 	andi	r2,r2,255
 182d91c:	100b883a 	mov	r5,r2
 182d920:	1809883a 	mov	r4,r3
 182d924:	1838bac0 	call	1838bac <netconn_listen_with_backlog>
 182d928:	e0bffd05 	stb	r2,-12(fp)

  if (err != ERR_OK) {
 182d92c:	e0bffd07 	ldb	r2,-12(fp)
 182d930:	10001c26 	beq	r2,zero,182d9a4 <lwip_listen+0xf0>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (netconn_type(sock->conn) != NETCONN_TCP) {
 182d934:	e0bffc17 	ldw	r2,-16(fp)
 182d938:	10800017 	ldw	r2,0(r2)
 182d93c:	10800017 	ldw	r2,0(r2)
 182d940:	10800420 	cmpeqi	r2,r2,16
 182d944:	1000051e 	bne	r2,zero,182d95c <lwip_listen+0xa8>
      sock_set_errno(sock, EOPNOTSUPP);
 182d948:	e0bffc17 	ldw	r2,-16(fp)
 182d94c:	00c017c4 	movi	r3,95
 182d950:	10c00415 	stw	r3,16(r2)
      return EOPNOTSUPP;
 182d954:	008017c4 	movi	r2,95
 182d958:	00001506 	br	182d9b0 <lwip_listen+0xfc>
    }
    sock_set_errno(sock, err_to_errno(err));
 182d95c:	e0bffd07 	ldb	r2,-12(fp)
 182d960:	0085c83a 	sub	r2,zero,r2
 182d964:	10800428 	cmpgeui	r2,r2,16
 182d968:	1000091e 	bne	r2,zero,182d990 <lwip_listen+0xdc>
 182d96c:	e0bffd07 	ldb	r2,-12(fp)
 182d970:	0087c83a 	sub	r3,zero,r2
 182d974:	00806134 	movhi	r2,388
 182d978:	108b9004 	addi	r2,r2,11840
 182d97c:	18c7883a 	add	r3,r3,r3
 182d980:	18c7883a 	add	r3,r3,r3
 182d984:	10c5883a 	add	r2,r2,r3
 182d988:	10800017 	ldw	r2,0(r2)
 182d98c:	00000106 	br	182d994 <lwip_listen+0xe0>
 182d990:	00800144 	movi	r2,5
 182d994:	e0fffc17 	ldw	r3,-16(fp)
 182d998:	18800415 	stw	r2,16(r3)
    return -1;
 182d99c:	00bfffc4 	movi	r2,-1
 182d9a0:	00000306 	br	182d9b0 <lwip_listen+0xfc>
  }

  sock_set_errno(sock, 0);
 182d9a4:	e0bffc17 	ldw	r2,-16(fp)
 182d9a8:	10000415 	stw	zero,16(r2)
  return 0;
 182d9ac:	0005883a 	mov	r2,zero
}
 182d9b0:	e037883a 	mov	sp,fp
 182d9b4:	dfc00117 	ldw	ra,4(sp)
 182d9b8:	df000017 	ldw	fp,0(sp)
 182d9bc:	dec00204 	addi	sp,sp,8
 182d9c0:	f800283a 	ret

0182d9c4 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
        struct sockaddr *from, socklen_t *fromlen)
{
 182d9c4:	deffec04 	addi	sp,sp,-80
 182d9c8:	dfc01315 	stw	ra,76(sp)
 182d9cc:	df001215 	stw	fp,72(sp)
 182d9d0:	df001204 	addi	fp,sp,72
 182d9d4:	e13ffc15 	stw	r4,-16(fp)
 182d9d8:	e17ffd15 	stw	r5,-12(fp)
 182d9dc:	e1bffe15 	stw	r6,-8(fp)
 182d9e0:	e1ffff15 	stw	r7,-4(fp)
  struct lwip_sock *sock;
  void             *buf = NULL;
 182d9e4:	e03ff515 	stw	zero,-44(fp)
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
 182d9e8:	e03ff015 	stw	zero,-64(fp)
  ip_addr_t        *addr;
  u16_t            port;
  u8_t             done = 0;
 182d9ec:	e03ff205 	stb	zero,-56(fp)
  err_t            err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 182d9f0:	e13ffc17 	ldw	r4,-16(fp)
 182d9f4:	182cf240 	call	182cf24 <get_socket>
 182d9f8:	e0bff315 	stw	r2,-52(fp)
  if (!sock) {
 182d9fc:	e0bff317 	ldw	r2,-52(fp)
 182da00:	1000021e 	bne	r2,zero,182da0c <lwip_recvfrom+0x48>
    return -1;
 182da04:	00bfffc4 	movi	r2,-1
 182da08:	00011f06 	br	182de88 <lwip_recvfrom+0x4c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
 182da0c:	e0bff317 	ldw	r2,-52(fp)
 182da10:	10800117 	ldw	r2,4(r2)
 182da14:	10000426 	beq	r2,zero,182da28 <lwip_recvfrom+0x64>
      buf = sock->lastdata;
 182da18:	e0bff317 	ldw	r2,-52(fp)
 182da1c:	10800117 	ldw	r2,4(r2)
 182da20:	e0bff515 	stw	r2,-44(fp)
 182da24:	00005c06 	br	182db98 <lwip_recvfrom+0x1d4>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) && 
 182da28:	e0bfff17 	ldw	r2,-4(fp)
 182da2c:	1080020c 	andi	r2,r2,8
 182da30:	1000061e 	bne	r2,zero,182da4c <lwip_recvfrom+0x88>
 182da34:	e0bff317 	ldw	r2,-52(fp)
 182da38:	10800017 	ldw	r2,0(r2)
 182da3c:	10800903 	ldbu	r2,36(r2)
 182da40:	10803fcc 	andi	r2,r2,255
 182da44:	1080008c 	andi	r2,r2,2
 182da48:	10001726 	beq	r2,zero,182daa8 <lwip_recvfrom+0xe4>
          (sock->rcvevent <= 0)) {
 182da4c:	e0bff317 	ldw	r2,-52(fp)
 182da50:	1080028b 	ldhu	r2,10(r2)
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
      buf = sock->lastdata;
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) && 
 182da54:	10bfffcc 	andi	r2,r2,65535
 182da58:	10a0001c 	xori	r2,r2,32768
 182da5c:	10a00004 	addi	r2,r2,-32768
 182da60:	00801116 	blt	zero,r2,182daa8 <lwip_recvfrom+0xe4>
          (sock->rcvevent <= 0)) {
        if (off > 0) {
 182da64:	e0bff017 	ldw	r2,-64(fp)
 182da68:	00800a0e 	bge	zero,r2,182da94 <lwip_recvfrom+0xd0>
          /* update receive window */
          netconn_recved(sock->conn, (u32_t)off);
 182da6c:	e0bff317 	ldw	r2,-52(fp)
 182da70:	10800017 	ldw	r2,0(r2)
 182da74:	e0fff017 	ldw	r3,-64(fp)
 182da78:	180b883a 	mov	r5,r3
 182da7c:	1009883a 	mov	r4,r2
 182da80:	183932c0 	call	183932c <netconn_recved>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 182da84:	e0bff317 	ldw	r2,-52(fp)
 182da88:	10000415 	stw	zero,16(r2)
          return off;
 182da8c:	e0bff017 	ldw	r2,-64(fp)
 182da90:	0000fd06 	br	182de88 <lwip_recvfrom+0x4c4>
        }
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        sock_set_errno(sock, EWOULDBLOCK);
 182da94:	e0bff317 	ldw	r2,-52(fp)
 182da98:	00c002c4 	movi	r3,11
 182da9c:	10c00415 	stw	r3,16(r2)
        return -1;
 182daa0:	00bfffc4 	movi	r2,-1
 182daa4:	0000f806 	br	182de88 <lwip_recvfrom+0x4c4>
      }

      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (netconn_type(sock->conn) == NETCONN_TCP) {
 182daa8:	e0bff317 	ldw	r2,-52(fp)
 182daac:	10800017 	ldw	r2,0(r2)
 182dab0:	10800017 	ldw	r2,0(r2)
 182dab4:	10800418 	cmpnei	r2,r2,16
 182dab8:	1000081e 	bne	r2,zero,182dadc <lwip_recvfrom+0x118>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 182dabc:	e0bff317 	ldw	r2,-52(fp)
 182dac0:	10800017 	ldw	r2,0(r2)
 182dac4:	e0fff504 	addi	r3,fp,-44
 182dac8:	180b883a 	mov	r5,r3
 182dacc:	1009883a 	mov	r4,r2
 182dad0:	18391040 	call	1839104 <netconn_recv_tcp_pbuf>
 182dad4:	e0bff245 	stb	r2,-55(fp)
 182dad8:	00000706 	br	182daf8 <lwip_recvfrom+0x134>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 182dadc:	e0bff317 	ldw	r2,-52(fp)
 182dae0:	10800017 	ldw	r2,0(r2)
 182dae4:	e0fff504 	addi	r3,fp,-44
 182dae8:	180b883a 	mov	r5,r3
 182daec:	1009883a 	mov	r4,r2
 182daf0:	18391780 	call	1839178 <netconn_recv>
 182daf4:	e0bff245 	stb	r2,-55(fp)
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
 182daf8:	e0bff247 	ldb	r2,-55(fp)
 182dafc:	10002326 	beq	r2,zero,182db8c <lwip_recvfrom+0x1c8>
        if (off > 0) {
 182db00:	e0bff017 	ldw	r2,-64(fp)
 182db04:	00800a0e 	bge	zero,r2,182db30 <lwip_recvfrom+0x16c>
          /* update receive window */
          netconn_recved(sock->conn, (u32_t)off);
 182db08:	e0bff317 	ldw	r2,-52(fp)
 182db0c:	10800017 	ldw	r2,0(r2)
 182db10:	e0fff017 	ldw	r3,-64(fp)
 182db14:	180b883a 	mov	r5,r3
 182db18:	1009883a 	mov	r4,r2
 182db1c:	183932c0 	call	183932c <netconn_recved>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 182db20:	e0bff317 	ldw	r2,-52(fp)
 182db24:	10000415 	stw	zero,16(r2)
          return off;
 182db28:	e0bff017 	ldw	r2,-64(fp)
 182db2c:	0000d606 	br	182de88 <lwip_recvfrom+0x4c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 182db30:	e0bff247 	ldb	r2,-55(fp)
 182db34:	0085c83a 	sub	r2,zero,r2
 182db38:	10800428 	cmpgeui	r2,r2,16
 182db3c:	1000091e 	bne	r2,zero,182db64 <lwip_recvfrom+0x1a0>
 182db40:	e0bff247 	ldb	r2,-55(fp)
 182db44:	0087c83a 	sub	r3,zero,r2
 182db48:	00806134 	movhi	r2,388
 182db4c:	108b9004 	addi	r2,r2,11840
 182db50:	18c7883a 	add	r3,r3,r3
 182db54:	18c7883a 	add	r3,r3,r3
 182db58:	10c5883a 	add	r2,r2,r3
 182db5c:	10800017 	ldw	r2,0(r2)
 182db60:	00000106 	br	182db68 <lwip_recvfrom+0x1a4>
 182db64:	00800144 	movi	r2,5
 182db68:	e0fff317 	ldw	r3,-52(fp)
 182db6c:	18800415 	stw	r2,16(r3)
        if (err == ERR_CLSD) {
 182db70:	e0bff247 	ldb	r2,-55(fp)
 182db74:	10bffd18 	cmpnei	r2,r2,-12
 182db78:	1000021e 	bne	r2,zero,182db84 <lwip_recvfrom+0x1c0>
          return 0;
 182db7c:	0005883a 	mov	r2,zero
 182db80:	0000c106 	br	182de88 <lwip_recvfrom+0x4c4>
        } else {
          return -1;
 182db84:	00bfffc4 	movi	r2,-1
 182db88:	0000bf06 	br	182de88 <lwip_recvfrom+0x4c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
      sock->lastdata = buf;
 182db8c:	e0fff517 	ldw	r3,-44(fp)
 182db90:	e0bff317 	ldw	r2,-52(fp)
 182db94:	10c00115 	stw	r3,4(r2)
    }

    if (netconn_type(sock->conn) == NETCONN_TCP) {
 182db98:	e0bff317 	ldw	r2,-52(fp)
 182db9c:	10800017 	ldw	r2,0(r2)
 182dba0:	10800017 	ldw	r2,0(r2)
 182dba4:	10800418 	cmpnei	r2,r2,16
 182dba8:	1000031e 	bne	r2,zero,182dbb8 <lwip_recvfrom+0x1f4>
      p = (struct pbuf *)buf;
 182dbac:	e0bff517 	ldw	r2,-44(fp)
 182dbb0:	e0bfee15 	stw	r2,-72(fp)
 182dbb4:	00000306 	br	182dbc4 <lwip_recvfrom+0x200>
    } else {
      p = ((struct netbuf *)buf)->p;
 182dbb8:	e0bff517 	ldw	r2,-44(fp)
 182dbbc:	10800017 	ldw	r2,0(r2)
 182dbc0:	e0bfee15 	stw	r2,-72(fp)
    }
    buflen = p->tot_len;
 182dbc4:	e0bfee17 	ldw	r2,-72(fp)
 182dbc8:	1080020b 	ldhu	r2,8(r2)
 182dbcc:	e0bff40d 	sth	r2,-48(fp)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
 182dbd0:	e0bff317 	ldw	r2,-52(fp)
 182dbd4:	1080020b 	ldhu	r2,8(r2)
 182dbd8:	e0fff40b 	ldhu	r3,-48(fp)
 182dbdc:	1885c83a 	sub	r2,r3,r2
 182dbe0:	e0bff40d 	sth	r2,-48(fp)

    if (len > buflen) {
 182dbe4:	e0fff40b 	ldhu	r3,-48(fp)
 182dbe8:	e0bffe17 	ldw	r2,-8(fp)
 182dbec:	1880032e 	bgeu	r3,r2,182dbfc <lwip_recvfrom+0x238>
      copylen = buflen;
 182dbf0:	e0bff40b 	ldhu	r2,-48(fp)
 182dbf4:	e0bfef0d 	sth	r2,-68(fp)
 182dbf8:	00000206 	br	182dc04 <lwip_recvfrom+0x240>
    } else {
      copylen = (u16_t)len;
 182dbfc:	e0bffe17 	ldw	r2,-8(fp)
 182dc00:	e0bfef0d 	sth	r2,-68(fp)
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 182dc04:	e0bff017 	ldw	r2,-64(fp)
 182dc08:	e0fffd17 	ldw	r3,-12(fp)
 182dc0c:	1887883a 	add	r3,r3,r2
 182dc10:	e13fef0b 	ldhu	r4,-68(fp)
 182dc14:	e0bff317 	ldw	r2,-52(fp)
 182dc18:	1080020b 	ldhu	r2,8(r2)
 182dc1c:	10bfffcc 	andi	r2,r2,65535
 182dc20:	100f883a 	mov	r7,r2
 182dc24:	200d883a 	mov	r6,r4
 182dc28:	180b883a 	mov	r5,r3
 182dc2c:	e13fee17 	ldw	r4,-72(fp)
 182dc30:	181a8280 	call	181a828 <pbuf_copy_partial>

    off += copylen;
 182dc34:	e0bfef0b 	ldhu	r2,-68(fp)
 182dc38:	e0fff017 	ldw	r3,-64(fp)
 182dc3c:	1885883a 	add	r2,r3,r2
 182dc40:	e0bff015 	stw	r2,-64(fp)

    if (netconn_type(sock->conn) == NETCONN_TCP) {
 182dc44:	e0bff317 	ldw	r2,-52(fp)
 182dc48:	10800017 	ldw	r2,0(r2)
 182dc4c:	10800017 	ldw	r2,0(r2)
 182dc50:	10800418 	cmpnei	r2,r2,16
 182dc54:	1000171e 	bne	r2,zero,182dcb4 <lwip_recvfrom+0x2f0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
 182dc58:	e0bfef0b 	ldhu	r2,-68(fp)
 182dc5c:	e0fffe17 	ldw	r3,-8(fp)
 182dc60:	1885c83a 	sub	r2,r3,r2
 182dc64:	e0bffe15 	stw	r2,-8(fp)
      if ( (len <= 0) || 
 182dc68:	e0bffe17 	ldw	r2,-8(fp)
 182dc6c:	10000e26 	beq	r2,zero,182dca8 <lwip_recvfrom+0x2e4>
           (p->flags & PBUF_FLAG_PUSH) || 
 182dc70:	e0bfee17 	ldw	r2,-72(fp)
 182dc74:	10800343 	ldbu	r2,13(r2)
 182dc78:	10803fcc 	andi	r2,r2,255
 182dc7c:	1080004c 	andi	r2,r2,1
    off += copylen;

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
      if ( (len <= 0) || 
 182dc80:	1000091e 	bne	r2,zero,182dca8 <lwip_recvfrom+0x2e4>
           (p->flags & PBUF_FLAG_PUSH) || 
           (sock->rcvevent <= 0) || 
 182dc84:	e0bff317 	ldw	r2,-52(fp)
 182dc88:	1080028b 	ldhu	r2,10(r2)

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
      if ( (len <= 0) || 
           (p->flags & PBUF_FLAG_PUSH) || 
 182dc8c:	10bfffcc 	andi	r2,r2,65535
 182dc90:	10a0001c 	xori	r2,r2,32768
 182dc94:	10a00004 	addi	r2,r2,-32768
 182dc98:	0080030e 	bge	zero,r2,182dca8 <lwip_recvfrom+0x2e4>
           (sock->rcvevent <= 0) || 
           ((flags & MSG_PEEK)!=0)) {
 182dc9c:	e0bfff17 	ldw	r2,-4(fp)
 182dca0:	1080004c 	andi	r2,r2,1
    if (netconn_type(sock->conn) == NETCONN_TCP) {
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
      if ( (len <= 0) || 
           (p->flags & PBUF_FLAG_PUSH) || 
           (sock->rcvevent <= 0) || 
 182dca4:	10000526 	beq	r2,zero,182dcbc <lwip_recvfrom+0x2f8>
           ((flags & MSG_PEEK)!=0)) {
        done = 1;
 182dca8:	00800044 	movi	r2,1
 182dcac:	e0bff205 	stb	r2,-56(fp)
 182dcb0:	00000206 	br	182dcbc <lwip_recvfrom+0x2f8>
      }
    } else {
      done = 1;
 182dcb4:	00800044 	movi	r2,1
 182dcb8:	e0bff205 	stb	r2,-56(fp)
    }

    /* Check to see from where the data was.*/
    if (done) {
 182dcbc:	e0bff203 	ldbu	r2,-56(fp)
 182dcc0:	10003d26 	beq	r2,zero,182ddb8 <lwip_recvfrom+0x3f4>
      ip_addr_t fromaddr;
      if (from && fromlen) {
 182dcc4:	e0800217 	ldw	r2,8(fp)
 182dcc8:	10003b26 	beq	r2,zero,182ddb8 <lwip_recvfrom+0x3f4>
 182dccc:	e0800317 	ldw	r2,12(fp)
 182dcd0:	10003926 	beq	r2,zero,182ddb8 <lwip_recvfrom+0x3f4>
        struct sockaddr_in sin;

        if (netconn_type(sock->conn) == NETCONN_TCP) {
 182dcd4:	e0bff317 	ldw	r2,-52(fp)
 182dcd8:	10800017 	ldw	r2,0(r2)
 182dcdc:	10800017 	ldw	r2,0(r2)
 182dce0:	10800418 	cmpnei	r2,r2,16
 182dce4:	10000b1e 	bne	r2,zero,182dd14 <lwip_recvfrom+0x350>
          addr = &fromaddr;
 182dce8:	e0bff704 	addi	r2,fp,-36
 182dcec:	e0bff115 	stw	r2,-60(fp)
          netconn_getaddr(sock->conn, addr, &port, 0);
 182dcf0:	e0bff317 	ldw	r2,-52(fp)
 182dcf4:	10800017 	ldw	r2,0(r2)
 182dcf8:	e0fff604 	addi	r3,fp,-40
 182dcfc:	000f883a 	mov	r7,zero
 182dd00:	180d883a 	mov	r6,r3
 182dd04:	e17ff117 	ldw	r5,-60(fp)
 182dd08:	1009883a 	mov	r4,r2
 182dd0c:	18388040 	call	1838804 <netconn_getaddr>
 182dd10:	00000606 	br	182dd2c <lwip_recvfrom+0x368>
        } else {
          addr = netbuf_fromaddr((struct netbuf *)buf);
 182dd14:	e0bff517 	ldw	r2,-44(fp)
 182dd18:	10800204 	addi	r2,r2,8
 182dd1c:	e0bff115 	stw	r2,-60(fp)
          port = netbuf_fromport((struct netbuf *)buf);
 182dd20:	e0bff517 	ldw	r2,-44(fp)
 182dd24:	1080030b 	ldhu	r2,12(r2)
 182dd28:	e0bff60d 	sth	r2,-40(fp)
        }

        memset(&sin, 0, sizeof(sin));
 182dd2c:	e0bff804 	addi	r2,fp,-32
 182dd30:	01800404 	movi	r6,16
 182dd34:	000b883a 	mov	r5,zero
 182dd38:	1009883a 	mov	r4,r2
 182dd3c:	18060e00 	call	18060e0 <memset>
        sin.sin_len = sizeof(sin);
 182dd40:	00800404 	movi	r2,16
 182dd44:	e0bff805 	stb	r2,-32(fp)
        sin.sin_family = AF_INET;
 182dd48:	00800084 	movi	r2,2
 182dd4c:	e0bff845 	stb	r2,-31(fp)
        sin.sin_port = htons(port);
 182dd50:	e0bff60b 	ldhu	r2,-40(fp)
 182dd54:	10bfffcc 	andi	r2,r2,65535
 182dd58:	1004d23a 	srli	r2,r2,8
 182dd5c:	1007883a 	mov	r3,r2
 182dd60:	e0bff60b 	ldhu	r2,-40(fp)
 182dd64:	10bfffcc 	andi	r2,r2,65535
 182dd68:	1004923a 	slli	r2,r2,8
 182dd6c:	1884b03a 	or	r2,r3,r2
 182dd70:	e0bff88d 	sth	r2,-30(fp)
        inet_addr_from_ipaddr(&sin.sin_addr, addr);
 182dd74:	e0bff117 	ldw	r2,-60(fp)
 182dd78:	10800017 	ldw	r2,0(r2)
 182dd7c:	e0bff915 	stw	r2,-28(fp)

        if (*fromlen > sizeof(sin)) {
 182dd80:	e0800317 	ldw	r2,12(fp)
 182dd84:	10800017 	ldw	r2,0(r2)
 182dd88:	10800470 	cmpltui	r2,r2,17
 182dd8c:	1000031e 	bne	r2,zero,182dd9c <lwip_recvfrom+0x3d8>
          *fromlen = sizeof(sin);
 182dd90:	e0800317 	ldw	r2,12(fp)
 182dd94:	00c00404 	movi	r3,16
 182dd98:	10c00015 	stw	r3,0(r2)
        }

        MEMCPY(from, &sin, *fromlen);
 182dd9c:	e0800317 	ldw	r2,12(fp)
 182dda0:	10c00017 	ldw	r3,0(r2)
 182dda4:	e0bff804 	addi	r2,fp,-32
 182dda8:	180d883a 	mov	r6,r3
 182ddac:	100b883a 	mov	r5,r2
 182ddb0:	e1000217 	ldw	r4,8(fp)
 182ddb4:	1805f980 	call	1805f98 <memcpy>
#endif /*  SOCKETS_DEBUG */
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 182ddb8:	e0bfff17 	ldw	r2,-4(fp)
 182ddbc:	1080004c 	andi	r2,r2,1
 182ddc0:	1000241e 	bne	r2,zero,182de54 <lwip_recvfrom+0x490>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((netconn_type(sock->conn) == NETCONN_TCP) && (buflen - copylen > 0)) {
 182ddc4:	e0bff317 	ldw	r2,-52(fp)
 182ddc8:	10800017 	ldw	r2,0(r2)
 182ddcc:	10800017 	ldw	r2,0(r2)
 182ddd0:	10800418 	cmpnei	r2,r2,16
 182ddd4:	10000f1e 	bne	r2,zero,182de14 <lwip_recvfrom+0x450>
 182ddd8:	e0fff40b 	ldhu	r3,-48(fp)
 182dddc:	e0bfef0b 	ldhu	r2,-68(fp)
 182dde0:	1885c83a 	sub	r2,r3,r2
 182dde4:	00800b0e 	bge	zero,r2,182de14 <lwip_recvfrom+0x450>
        sock->lastdata = buf;
 182dde8:	e0fff517 	ldw	r3,-44(fp)
 182ddec:	e0bff317 	ldw	r2,-52(fp)
 182ddf0:	10c00115 	stw	r3,4(r2)
        sock->lastoffset += copylen;
 182ddf4:	e0bff317 	ldw	r2,-52(fp)
 182ddf8:	10c0020b 	ldhu	r3,8(r2)
 182ddfc:	e0bfef0b 	ldhu	r2,-68(fp)
 182de00:	1885883a 	add	r2,r3,r2
 182de04:	1007883a 	mov	r3,r2
 182de08:	e0bff317 	ldw	r2,-52(fp)
 182de0c:	10c0020d 	sth	r3,8(r2)
 182de10:	00001006 	br	182de54 <lwip_recvfrom+0x490>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
 182de14:	e0bff317 	ldw	r2,-52(fp)
 182de18:	10000115 	stw	zero,4(r2)
        sock->lastoffset = 0;
 182de1c:	e0bff317 	ldw	r2,-52(fp)
 182de20:	1000020d 	sth	zero,8(r2)
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (netconn_type(sock->conn) == NETCONN_TCP) {
 182de24:	e0bff317 	ldw	r2,-52(fp)
 182de28:	10800017 	ldw	r2,0(r2)
 182de2c:	10800017 	ldw	r2,0(r2)
 182de30:	10800418 	cmpnei	r2,r2,16
 182de34:	1000041e 	bne	r2,zero,182de48 <lwip_recvfrom+0x484>
          pbuf_free((struct pbuf *)buf);
 182de38:	e0bff517 	ldw	r2,-44(fp)
 182de3c:	1009883a 	mov	r4,r2
 182de40:	181a22c0 	call	181a22c <pbuf_free>
 182de44:	00000306 	br	182de54 <lwip_recvfrom+0x490>
        } else {
          netbuf_delete((struct netbuf *)buf);
 182de48:	e0bff517 	ldw	r2,-44(fp)
 182de4c:	1009883a 	mov	r4,r2
 182de50:	183bd840 	call	183bd84 <netbuf_delete>
        }
      }
    }
  } while (!done);
 182de54:	e0bff203 	ldbu	r2,-56(fp)
 182de58:	103eec26 	beq	r2,zero,182da0c <__ram_exceptions_end+0xff81d71c>

  if (off > 0) {
 182de5c:	e0bff017 	ldw	r2,-64(fp)
 182de60:	0080060e 	bge	zero,r2,182de7c <lwip_recvfrom+0x4b8>
    /* update receive window */
    netconn_recved(sock->conn, (u32_t)off);
 182de64:	e0bff317 	ldw	r2,-52(fp)
 182de68:	10800017 	ldw	r2,0(r2)
 182de6c:	e0fff017 	ldw	r3,-64(fp)
 182de70:	180b883a 	mov	r5,r3
 182de74:	1009883a 	mov	r4,r2
 182de78:	183932c0 	call	183932c <netconn_recved>
  }
  sock_set_errno(sock, 0);
 182de7c:	e0bff317 	ldw	r2,-52(fp)
 182de80:	10000415 	stw	zero,16(r2)
  return off;
 182de84:	e0bff017 	ldw	r2,-64(fp)
}
 182de88:	e037883a 	mov	sp,fp
 182de8c:	dfc00117 	ldw	ra,4(sp)
 182de90:	df000017 	ldw	fp,0(sp)
 182de94:	dec00204 	addi	sp,sp,8
 182de98:	f800283a 	ret

0182de9c <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
 182de9c:	defff904 	addi	sp,sp,-28
 182dea0:	dfc00615 	stw	ra,24(sp)
 182dea4:	df000515 	stw	fp,20(sp)
 182dea8:	df000504 	addi	fp,sp,20
 182deac:	e13ffd15 	stw	r4,-12(fp)
 182deb0:	e17ffe15 	stw	r5,-8(fp)
 182deb4:	e1bfff15 	stw	r6,-4(fp)
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 182deb8:	d8000115 	stw	zero,4(sp)
 182debc:	d8000015 	stw	zero,0(sp)
 182dec0:	000f883a 	mov	r7,zero
 182dec4:	e1bfff17 	ldw	r6,-4(fp)
 182dec8:	e17ffe17 	ldw	r5,-8(fp)
 182decc:	e13ffd17 	ldw	r4,-12(fp)
 182ded0:	182d9c40 	call	182d9c4 <lwip_recvfrom>
}
 182ded4:	e037883a 	mov	sp,fp
 182ded8:	dfc00117 	ldw	ra,4(sp)
 182dedc:	df000017 	ldw	fp,0(sp)
 182dee0:	dec00204 	addi	sp,sp,8
 182dee4:	f800283a 	ret

0182dee8 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
 182dee8:	defff804 	addi	sp,sp,-32
 182deec:	dfc00715 	stw	ra,28(sp)
 182def0:	df000615 	stw	fp,24(sp)
 182def4:	df000604 	addi	fp,sp,24
 182def8:	e13ffc15 	stw	r4,-16(fp)
 182defc:	e17ffd15 	stw	r5,-12(fp)
 182df00:	e1bffe15 	stw	r6,-8(fp)
 182df04:	e1ffff15 	stw	r7,-4(fp)
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 182df08:	d8000115 	stw	zero,4(sp)
 182df0c:	d8000015 	stw	zero,0(sp)
 182df10:	e1ffff17 	ldw	r7,-4(fp)
 182df14:	e1bffe17 	ldw	r6,-8(fp)
 182df18:	e17ffd17 	ldw	r5,-12(fp)
 182df1c:	e13ffc17 	ldw	r4,-16(fp)
 182df20:	182d9c40 	call	182d9c4 <lwip_recvfrom>
}
 182df24:	e037883a 	mov	sp,fp
 182df28:	dfc00117 	ldw	ra,4(sp)
 182df2c:	df000017 	ldw	fp,0(sp)
 182df30:	dec00204 	addi	sp,sp,8
 182df34:	f800283a 	ret

0182df38 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 182df38:	defff504 	addi	sp,sp,-44
 182df3c:	dfc00a15 	stw	ra,40(sp)
 182df40:	df000915 	stw	fp,36(sp)
 182df44:	df000904 	addi	fp,sp,36
 182df48:	e13ffc15 	stw	r4,-16(fp)
 182df4c:	e17ffd15 	stw	r5,-12(fp)
 182df50:	e1bffe15 	stw	r6,-8(fp)
 182df54:	e1ffff15 	stw	r7,-4(fp)
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 182df58:	e13ffc17 	ldw	r4,-16(fp)
 182df5c:	182cf240 	call	182cf24 <get_socket>
 182df60:	e0bff915 	stw	r2,-28(fp)
  if (!sock) {
 182df64:	e0bff917 	ldw	r2,-28(fp)
 182df68:	1000021e 	bne	r2,zero,182df74 <lwip_send+0x3c>
    return -1;
 182df6c:	00bfffc4 	movi	r2,-1
 182df70:	00003d06 	br	182e068 <lwip_send+0x130>
  }

  if (sock->conn->type != NETCONN_TCP) {
 182df74:	e0bff917 	ldw	r2,-28(fp)
 182df78:	10800017 	ldw	r2,0(r2)
 182df7c:	10800017 	ldw	r2,0(r2)
 182df80:	10800420 	cmpeqi	r2,r2,16
 182df84:	1000081e 	bne	r2,zero,182dfa8 <lwip_send+0x70>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 182df88:	d8000115 	stw	zero,4(sp)
 182df8c:	d8000015 	stw	zero,0(sp)
 182df90:	e1ffff17 	ldw	r7,-4(fp)
 182df94:	e1bffe17 	ldw	r6,-8(fp)
 182df98:	e17ffd17 	ldw	r5,-12(fp)
 182df9c:	e13ffc17 	ldw	r4,-16(fp)
 182dfa0:	182e07c0 	call	182e07c <lwip_sendto>
 182dfa4:	00003006 	br	182e068 <lwip_send+0x130>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 182dfa8:	e0bfff17 	ldw	r2,-4(fp)
 182dfac:	1080040c 	andi	r2,r2,16
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
 182dfb0:	10000226 	beq	r2,zero,182dfbc <lwip_send+0x84>
 182dfb4:	008000c4 	movi	r2,3
 182dfb8:	00000106 	br	182dfc0 <lwip_send+0x88>
 182dfbc:	00800044 	movi	r2,1
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 182dfc0:	e0ffff17 	ldw	r3,-4(fp)
 182dfc4:	18c0020c 	andi	r3,r3,8
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
 182dfc8:	18000226 	beq	r3,zero,182dfd4 <lwip_send+0x9c>
 182dfcc:	00c00104 	movi	r3,4
 182dfd0:	00000106 	br	182dfd8 <lwip_send+0xa0>
 182dfd4:	0007883a 	mov	r3,zero
 182dfd8:	10c4b03a 	or	r2,r2,r3
 182dfdc:	e0bffa05 	stb	r2,-24(fp)
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  written = 0;
 182dfe0:	e03ffb15 	stw	zero,-20(fp)
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 182dfe4:	e0bff917 	ldw	r2,-28(fp)
 182dfe8:	10c00017 	ldw	r3,0(r2)
 182dfec:	e13ffa03 	ldbu	r4,-24(fp)
 182dff0:	e0bffb04 	addi	r2,fp,-20
 182dff4:	d8800015 	stw	r2,0(sp)
 182dff8:	200f883a 	mov	r7,r4
 182dffc:	e1bffe17 	ldw	r6,-8(fp)
 182e000:	e17ffd17 	ldw	r5,-12(fp)
 182e004:	1809883a 	mov	r4,r3
 182e008:	18394f40 	call	18394f4 <netconn_write_partly>
 182e00c:	e0bffa45 	stb	r2,-23(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 182e010:	e0bffa47 	ldb	r2,-23(fp)
 182e014:	0085c83a 	sub	r2,zero,r2
 182e018:	10800428 	cmpgeui	r2,r2,16
 182e01c:	1000091e 	bne	r2,zero,182e044 <lwip_send+0x10c>
 182e020:	e0bffa47 	ldb	r2,-23(fp)
 182e024:	0087c83a 	sub	r3,zero,r2
 182e028:	00806134 	movhi	r2,388
 182e02c:	108b9004 	addi	r2,r2,11840
 182e030:	18c7883a 	add	r3,r3,r3
 182e034:	18c7883a 	add	r3,r3,r3
 182e038:	10c5883a 	add	r2,r2,r3
 182e03c:	10800017 	ldw	r2,0(r2)
 182e040:	00000106 	br	182e048 <lwip_send+0x110>
 182e044:	00800144 	movi	r2,5
 182e048:	e0fff917 	ldw	r3,-28(fp)
 182e04c:	18800415 	stw	r2,16(r3)
  return (err == ERR_OK ? (int)written : -1);
 182e050:	e0bffa47 	ldb	r2,-23(fp)
 182e054:	1000021e 	bne	r2,zero,182e060 <lwip_send+0x128>
 182e058:	e0bffb17 	ldw	r2,-20(fp)
 182e05c:	00000206 	br	182e068 <lwip_send+0x130>
 182e060:	00bfffc4 	movi	r2,-1
 182e064:	0001883a 	nop
}
 182e068:	e037883a 	mov	sp,fp
 182e06c:	dfc00117 	ldw	ra,4(sp)
 182e070:	df000017 	ldw	fp,0(sp)
 182e074:	dec00204 	addi	sp,sp,8
 182e078:	f800283a 	ret

0182e07c <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 182e07c:	defff004 	addi	sp,sp,-64
 182e080:	dfc00f15 	stw	ra,60(sp)
 182e084:	df000e15 	stw	fp,56(sp)
 182e088:	df000e04 	addi	fp,sp,56
 182e08c:	e13ffc15 	stw	r4,-16(fp)
 182e090:	e17ffd15 	stw	r5,-12(fp)
 182e094:	e1bffe15 	stw	r6,-8(fp)
 182e098:	e1ffff15 	stw	r7,-4(fp)
  u16_t remote_port;
#if !LWIP_TCPIP_CORE_LOCKING
  struct netbuf buf;
#endif

  sock = get_socket(s);
 182e09c:	e13ffc17 	ldw	r4,-16(fp)
 182e0a0:	182cf240 	call	182cf24 <get_socket>
 182e0a4:	e0bff315 	stw	r2,-52(fp)
  if (!sock) {
 182e0a8:	e0bff317 	ldw	r2,-52(fp)
 182e0ac:	1000021e 	bne	r2,zero,182e0b8 <lwip_sendto+0x3c>
    return -1;
 182e0b0:	00bfffc4 	movi	r2,-1
 182e0b4:	00006a06 	br	182e260 <lwip_sendto+0x1e4>
  }

  if (sock->conn->type == NETCONN_TCP) {
 182e0b8:	e0bff317 	ldw	r2,-52(fp)
 182e0bc:	10800017 	ldw	r2,0(r2)
 182e0c0:	10800017 	ldw	r2,0(r2)
 182e0c4:	10800418 	cmpnei	r2,r2,16
 182e0c8:	1000061e 	bne	r2,zero,182e0e4 <lwip_sendto+0x68>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 182e0cc:	e1ffff17 	ldw	r7,-4(fp)
 182e0d0:	e1bffe17 	ldw	r6,-8(fp)
 182e0d4:	e17ffd17 	ldw	r5,-12(fp)
 182e0d8:	e13ffc17 	ldw	r4,-16(fp)
 182e0dc:	182df380 	call	182df38 <lwip_send>
 182e0e0:	00005f06 	br	182e260 <lwip_sendto+0x1e4>
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  short_size = (u16_t)size;
 182e0e4:	e0bffe17 	ldw	r2,-8(fp)
 182e0e8:	e0bff40d 	sth	r2,-48(fp)
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 182e0ec:	e0800217 	ldw	r2,8(fp)
 182e0f0:	1000021e 	bne	r2,zero,182e0fc <lwip_sendto+0x80>
 182e0f4:	e0800317 	ldw	r2,12(fp)
 182e0f8:	10001426 	beq	r2,zero,182e14c <lwip_sendto+0xd0>
 182e0fc:	e0800317 	ldw	r2,12(fp)
 182e100:	10800418 	cmpnei	r2,r2,16
 182e104:	1000081e 	bne	r2,zero,182e128 <lwip_sendto+0xac>
 182e108:	e0800217 	ldw	r2,8(fp)
 182e10c:	10800043 	ldbu	r2,1(r2)
 182e110:	10803fcc 	andi	r2,r2,255
 182e114:	10800098 	cmpnei	r2,r2,2
 182e118:	1000031e 	bne	r2,zero,182e128 <lwip_sendto+0xac>
 182e11c:	e0800217 	ldw	r2,8(fp)
 182e120:	108000cc 	andi	r2,r2,3
 182e124:	10000926 	beq	r2,zero,182e14c <lwip_sendto+0xd0>
 182e128:	01c06134 	movhi	r7,388
 182e12c:	39cba004 	addi	r7,r7,11904
 182e130:	0180cf44 	movi	r6,829
 182e134:	01406134 	movhi	r5,388
 182e138:	294bc104 	addi	r5,r5,12036
 182e13c:	01006134 	movhi	r4,388
 182e140:	210bad04 	addi	r4,r4,11956
 182e144:	1800b240 	call	1800b24 <printf>
 182e148:	003fff06 	br	182e148 <__ram_exceptions_end+0xff81de58>
             ((tolen == sizeof(struct sockaddr_in)) &&
             ((to->sa_family) == AF_INET) && ((((mem_ptr_t)to) % 4) == 0))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  to_in = (const struct sockaddr_in *)(void*)to;
 182e14c:	e0800217 	ldw	r2,8(fp)
 182e150:	e0bff515 	stw	r2,-44(fp)
      err = ERR_MEM;
    }
  }
#else /* LWIP_TCPIP_CORE_LOCKING */
  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 182e154:	e03ff815 	stw	zero,-32(fp)
 182e158:	e0bff817 	ldw	r2,-32(fp)
 182e15c:	e0bff715 	stw	r2,-36(fp)
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
 182e160:	e03ffa85 	stb	zero,-22(fp)
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 182e164:	e0800217 	ldw	r2,8(fp)
 182e168:	10001126 	beq	r2,zero,182e1b0 <lwip_sendto+0x134>
    inet_addr_to_ipaddr(&buf.addr, &to_in->sin_addr);
 182e16c:	e0bff517 	ldw	r2,-44(fp)
 182e170:	10800117 	ldw	r2,4(r2)
 182e174:	e0bff915 	stw	r2,-28(fp)
    remote_port           = ntohs(to_in->sin_port);
 182e178:	e0bff517 	ldw	r2,-44(fp)
 182e17c:	1080008b 	ldhu	r2,2(r2)
 182e180:	10bfffcc 	andi	r2,r2,65535
 182e184:	1004d23a 	srli	r2,r2,8
 182e188:	1007883a 	mov	r3,r2
 182e18c:	e0bff517 	ldw	r2,-44(fp)
 182e190:	1080008b 	ldhu	r2,2(r2)
 182e194:	10bfffcc 	andi	r2,r2,65535
 182e198:	1004923a 	slli	r2,r2,8
 182e19c:	1884b03a 	or	r2,r3,r2
 182e1a0:	e0bff60d 	sth	r2,-40(fp)
    netbuf_fromport(&buf) = remote_port;
 182e1a4:	e0bff60b 	ldhu	r2,-40(fp)
 182e1a8:	e0bffa0d 	sth	r2,-24(fp)
 182e1ac:	00000306 	br	182e1bc <lwip_sendto+0x140>
  } else {
    remote_port           = 0;
 182e1b0:	e03ff60d 	sth	zero,-40(fp)
    ip_addr_set_any(&buf.addr);
 182e1b4:	e03ff915 	stw	zero,-28(fp)
    netbuf_fromport(&buf) = 0;
 182e1b8:	e03ffa0d 	sth	zero,-24(fp)
    {
      err = netbuf_take(&buf, data, short_size);
    }
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 182e1bc:	e0fff40b 	ldhu	r3,-48(fp)
 182e1c0:	e0bff704 	addi	r2,fp,-36
 182e1c4:	180d883a 	mov	r6,r3
 182e1c8:	e17ffd17 	ldw	r5,-12(fp)
 182e1cc:	1009883a 	mov	r4,r2
 182e1d0:	183bf480 	call	183bf48 <netbuf_ref>
 182e1d4:	e0bff205 	stb	r2,-56(fp)
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 182e1d8:	e0bff207 	ldb	r2,-56(fp)
 182e1dc:	1000071e 	bne	r2,zero,182e1fc <lwip_sendto+0x180>
    /* send the data */
    err = netconn_send(sock->conn, &buf);
 182e1e0:	e0bff317 	ldw	r2,-52(fp)
 182e1e4:	10800017 	ldw	r2,0(r2)
 182e1e8:	e0fff704 	addi	r3,fp,-36
 182e1ec:	180b883a 	mov	r5,r3
 182e1f0:	1009883a 	mov	r4,r2
 182e1f4:	183942c0 	call	183942c <netconn_send>
 182e1f8:	e0bff205 	stb	r2,-56(fp)
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 182e1fc:	e0bff704 	addi	r2,fp,-36
 182e200:	1009883a 	mov	r4,r2
 182e204:	183bebc0 	call	183bebc <netbuf_free>
#endif /* LWIP_TCPIP_CORE_LOCKING */
  sock_set_errno(sock, err_to_errno(err));
 182e208:	e0bff207 	ldb	r2,-56(fp)
 182e20c:	0085c83a 	sub	r2,zero,r2
 182e210:	10800428 	cmpgeui	r2,r2,16
 182e214:	1000091e 	bne	r2,zero,182e23c <lwip_sendto+0x1c0>
 182e218:	e0bff207 	ldb	r2,-56(fp)
 182e21c:	0087c83a 	sub	r3,zero,r2
 182e220:	00806134 	movhi	r2,388
 182e224:	108b9004 	addi	r2,r2,11840
 182e228:	18c7883a 	add	r3,r3,r3
 182e22c:	18c7883a 	add	r3,r3,r3
 182e230:	10c5883a 	add	r2,r2,r3
 182e234:	10800017 	ldw	r2,0(r2)
 182e238:	00000106 	br	182e240 <lwip_sendto+0x1c4>
 182e23c:	00800144 	movi	r2,5
 182e240:	e0fff317 	ldw	r3,-52(fp)
 182e244:	18800415 	stw	r2,16(r3)
  return (err == ERR_OK ? short_size : -1);
 182e248:	e0bff207 	ldb	r2,-56(fp)
 182e24c:	1000021e 	bne	r2,zero,182e258 <lwip_sendto+0x1dc>
 182e250:	e0bff40b 	ldhu	r2,-48(fp)
 182e254:	00000206 	br	182e260 <lwip_sendto+0x1e4>
 182e258:	00bfffc4 	movi	r2,-1
 182e25c:	0001883a 	nop
}
 182e260:	e037883a 	mov	sp,fp
 182e264:	dfc00117 	ldw	ra,4(sp)
 182e268:	df000017 	ldw	fp,0(sp)
 182e26c:	dec00204 	addi	sp,sp,8
 182e270:	f800283a 	ret

0182e274 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 182e274:	defff904 	addi	sp,sp,-28
 182e278:	dfc00615 	stw	ra,24(sp)
 182e27c:	df000515 	stw	fp,20(sp)
 182e280:	df000504 	addi	fp,sp,20
 182e284:	e13ffd15 	stw	r4,-12(fp)
 182e288:	e17ffe15 	stw	r5,-8(fp)
 182e28c:	e1bfff15 	stw	r6,-4(fp)
  int i;

  LWIP_UNUSED_ARG(domain);

  /* create a netconn */
  switch (type) {
 182e290:	e0bffe17 	ldw	r2,-8(fp)
 182e294:	10c000a0 	cmpeqi	r3,r2,2
 182e298:	18000e1e 	bne	r3,zero,182e2d4 <lwip_socket+0x60>
 182e29c:	10c000e0 	cmpeqi	r3,r2,3
 182e2a0:	1800031e 	bne	r3,zero,182e2b0 <lwip_socket+0x3c>
 182e2a4:	10800060 	cmpeqi	r2,r2,1
 182e2a8:	1000171e 	bne	r2,zero,182e308 <lwip_socket+0x94>
 182e2ac:	00002506 	br	182e344 <lwip_socket+0xd0>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(NETCONN_RAW, (u8_t)protocol, event_callback);
 182e2b0:	e0bfff17 	ldw	r2,-4(fp)
 182e2b4:	10803fcc 	andi	r2,r2,255
 182e2b8:	018060f4 	movhi	r6,387
 182e2bc:	31bb1804 	addi	r6,r6,-5024
 182e2c0:	100b883a 	mov	r5,r2
 182e2c4:	01001004 	movi	r4,64
 182e2c8:	18386ec0 	call	18386ec <netconn_new_with_proto_and_callback>
 182e2cc:	e0bffb15 	stw	r2,-20(fp)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 182e2d0:	00001f06 	br	182e350 <lwip_socket+0xdc>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback( (protocol == IPPROTO_UDPLITE) ?
 182e2d4:	e0bfff17 	ldw	r2,-4(fp)
 182e2d8:	10802218 	cmpnei	r2,r2,136
 182e2dc:	1000021e 	bne	r2,zero,182e2e8 <lwip_socket+0x74>
 182e2e0:	00800844 	movi	r2,33
 182e2e4:	00000106 	br	182e2ec <lwip_socket+0x78>
 182e2e8:	00800804 	movi	r2,32
 182e2ec:	018060f4 	movhi	r6,387
 182e2f0:	31bb1804 	addi	r6,r6,-5024
 182e2f4:	000b883a 	mov	r5,zero
 182e2f8:	1009883a 	mov	r4,r2
 182e2fc:	18386ec0 	call	18386ec <netconn_new_with_proto_and_callback>
 182e300:	e0bffb15 	stw	r2,-20(fp)
                 NETCONN_UDPLITE : NETCONN_UDP, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 182e304:	00001206 	br	182e350 <lwip_socket+0xdc>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(NETCONN_TCP, event_callback);
 182e308:	018060f4 	movhi	r6,387
 182e30c:	31bb1804 	addi	r6,r6,-5024
 182e310:	000b883a 	mov	r5,zero
 182e314:	01000404 	movi	r4,16
 182e318:	18386ec0 	call	18386ec <netconn_new_with_proto_and_callback>
 182e31c:	e0bffb15 	stw	r2,-20(fp)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    if (conn != NULL) {
 182e320:	e0bffb17 	ldw	r2,-20(fp)
 182e324:	10000926 	beq	r2,zero,182e34c <lwip_socket+0xd8>
      /* Prevent automatic window updates, we do this on our own! */
      netconn_set_noautorecved(conn, 1);
 182e328:	e0bffb17 	ldw	r2,-20(fp)
 182e32c:	10800903 	ldbu	r2,36(r2)
 182e330:	10800214 	ori	r2,r2,8
 182e334:	1007883a 	mov	r3,r2
 182e338:	e0bffb17 	ldw	r2,-20(fp)
 182e33c:	10c00905 	stb	r3,36(r2)
    }
    break;
 182e340:	00000206 	br	182e34c <lwip_socket+0xd8>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
    return -1;
 182e344:	00bfffc4 	movi	r2,-1
 182e348:	00001706 	br	182e3a8 <lwip_socket+0x134>
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    if (conn != NULL) {
      /* Prevent automatic window updates, we do this on our own! */
      netconn_set_noautorecved(conn, 1);
    }
    break;
 182e34c:	0001883a 	nop
                                 domain, type, protocol));
    set_errno(EINVAL);
    return -1;
  }

  if (!conn) {
 182e350:	e0bffb17 	ldw	r2,-20(fp)
 182e354:	1000021e 	bne	r2,zero,182e360 <lwip_socket+0xec>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
    return -1;
 182e358:	00bfffc4 	movi	r2,-1
 182e35c:	00001206 	br	182e3a8 <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
 182e360:	000b883a 	mov	r5,zero
 182e364:	e13ffb17 	ldw	r4,-20(fp)
 182e368:	182d01c0 	call	182d01c <alloc_socket>
 182e36c:	e0bffc15 	stw	r2,-16(fp)

  if (i == -1) {
 182e370:	e0bffc17 	ldw	r2,-16(fp)
 182e374:	10bfffd8 	cmpnei	r2,r2,-1
 182e378:	1000041e 	bne	r2,zero,182e38c <lwip_socket+0x118>
    netconn_delete(conn);
 182e37c:	e13ffb17 	ldw	r4,-20(fp)
 182e380:	18387a40 	call	18387a4 <netconn_delete>
    set_errno(ENFILE);
    return -1;
 182e384:	00bfffc4 	movi	r2,-1
 182e388:	00000706 	br	182e3a8 <lwip_socket+0x134>
  }

  i += LWIP_SOCKET_OFFSET;
 182e38c:	e0bffc17 	ldw	r2,-16(fp)
 182e390:	10800804 	addi	r2,r2,32
 182e394:	e0bffc15 	stw	r2,-16(fp)

  conn->socket = i;
 182e398:	e0bffb17 	ldw	r2,-20(fp)
 182e39c:	e0fffc17 	ldw	r3,-16(fp)
 182e3a0:	10c00715 	stw	r3,28(r2)
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 182e3a4:	e0bffc17 	ldw	r2,-16(fp)
}
 182e3a8:	e037883a 	mov	sp,fp
 182e3ac:	dfc00117 	ldw	ra,4(sp)
 182e3b0:	df000017 	ldw	fp,0(sp)
 182e3b4:	dec00204 	addi	sp,sp,8
 182e3b8:	f800283a 	ret

0182e3bc <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
 182e3bc:	defffb04 	addi	sp,sp,-20
 182e3c0:	dfc00415 	stw	ra,16(sp)
 182e3c4:	df000315 	stw	fp,12(sp)
 182e3c8:	df000304 	addi	fp,sp,12
 182e3cc:	e13ffd15 	stw	r4,-12(fp)
 182e3d0:	e17ffe15 	stw	r5,-8(fp)
 182e3d4:	e1bfff15 	stw	r6,-4(fp)
  return lwip_send(s, data, size, 0);
 182e3d8:	000f883a 	mov	r7,zero
 182e3dc:	e1bfff17 	ldw	r6,-4(fp)
 182e3e0:	e17ffe17 	ldw	r5,-8(fp)
 182e3e4:	e13ffd17 	ldw	r4,-12(fp)
 182e3e8:	182df380 	call	182df38 <lwip_send>
}
 182e3ec:	e037883a 	mov	sp,fp
 182e3f0:	dfc00117 	ldw	ra,4(sp)
 182e3f4:	df000017 	ldw	fp,0(sp)
 182e3f8:	dec00204 	addi	sp,sp,8
 182e3fc:	f800283a 	ret

0182e400 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 182e400:	deffe804 	addi	sp,sp,-96
 182e404:	dfc01715 	stw	ra,92(sp)
 182e408:	df001615 	stw	fp,88(sp)
 182e40c:	df001604 	addi	fp,sp,88
 182e410:	e13ffc15 	stw	r4,-16(fp)
 182e414:	e17ffd15 	stw	r5,-12(fp)
 182e418:	e1bffe15 	stw	r6,-8(fp)
 182e41c:	e1ffff15 	stw	r7,-4(fp)
  int i, nready = 0;
 182e420:	e03feb15 	stw	zero,-84(fp)
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 182e424:	e0bff604 	addi	r2,fp,-40
 182e428:	e0bfed15 	stw	r2,-76(fp)
 182e42c:	e03fec15 	stw	zero,-80(fp)
 182e430:	00000706 	br	182e450 <lwip_selscan+0x50>
 182e434:	e0bfed17 	ldw	r2,-76(fp)
 182e438:	10c00044 	addi	r3,r2,1
 182e43c:	e0ffed15 	stw	r3,-76(fp)
 182e440:	10000005 	stb	zero,0(r2)
 182e444:	e0bfec17 	ldw	r2,-80(fp)
 182e448:	10800044 	addi	r2,r2,1
 182e44c:	e0bfec15 	stw	r2,-80(fp)
 182e450:	e0bfec17 	ldw	r2,-80(fp)
 182e454:	10800230 	cmpltui	r2,r2,8
 182e458:	103ff61e 	bne	r2,zero,182e434 <__ram_exceptions_end+0xff81e144>
  FD_ZERO(&lwriteset);
 182e45c:	e0bff804 	addi	r2,fp,-32
 182e460:	e0bfef15 	stw	r2,-68(fp)
 182e464:	e03fee15 	stw	zero,-72(fp)
 182e468:	00000706 	br	182e488 <lwip_selscan+0x88>
 182e46c:	e0bfef17 	ldw	r2,-68(fp)
 182e470:	10c00044 	addi	r3,r2,1
 182e474:	e0ffef15 	stw	r3,-68(fp)
 182e478:	10000005 	stb	zero,0(r2)
 182e47c:	e0bfee17 	ldw	r2,-72(fp)
 182e480:	10800044 	addi	r2,r2,1
 182e484:	e0bfee15 	stw	r2,-72(fp)
 182e488:	e0bfee17 	ldw	r2,-72(fp)
 182e48c:	10800230 	cmpltui	r2,r2,8
 182e490:	103ff61e 	bne	r2,zero,182e46c <__ram_exceptions_end+0xff81e17c>
  FD_ZERO(&lexceptset);
 182e494:	e0bffa04 	addi	r2,fp,-24
 182e498:	e0bff115 	stw	r2,-60(fp)
 182e49c:	e03ff015 	stw	zero,-64(fp)
 182e4a0:	00000706 	br	182e4c0 <lwip_selscan+0xc0>
 182e4a4:	e0bff117 	ldw	r2,-60(fp)
 182e4a8:	10c00044 	addi	r3,r2,1
 182e4ac:	e0fff115 	stw	r3,-60(fp)
 182e4b0:	10000005 	stb	zero,0(r2)
 182e4b4:	e0bff017 	ldw	r2,-64(fp)
 182e4b8:	10800044 	addi	r2,r2,1
 182e4bc:	e0bff015 	stw	r2,-64(fp)
 182e4c0:	e0bff017 	ldw	r2,-64(fp)
 182e4c4:	10800230 	cmpltui	r2,r2,8
 182e4c8:	103ff61e 	bne	r2,zero,182e4a4 <__ram_exceptions_end+0xff81e1b4>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 182e4cc:	00800804 	movi	r2,32
 182e4d0:	e0bfea15 	stw	r2,-88(fp)
 182e4d4:	00009206 	br	182e720 <lwip_selscan+0x320>
    void* lastdata = NULL;
 182e4d8:	e03ff215 	stw	zero,-56(fp)
    s16_t rcvevent = 0;
 182e4dc:	e03ff30d 	sth	zero,-52(fp)
    u16_t sendevent = 0;
 182e4e0:	e03ff38d 	sth	zero,-50(fp)
    u16_t errevent = 0;
 182e4e4:	e03ff40d 	sth	zero,-48(fp)
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 182e4e8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182e4ec:	10000126 	beq	r2,zero,182e4f4 <lwip_selscan+0xf4>
 182e4f0:	1810f480 	call	1810f48 <vTaskEnterCritical>
    sock = tryget_socket(i);
 182e4f4:	e13fea17 	ldw	r4,-88(fp)
 182e4f8:	182cf9c0 	call	182cf9c <tryget_socket>
 182e4fc:	e0bff515 	stw	r2,-44(fp)
    if (sock != NULL) {
 182e500:	e0bff517 	ldw	r2,-44(fp)
 182e504:	10000c26 	beq	r2,zero,182e538 <lwip_selscan+0x138>
      lastdata = sock->lastdata;
 182e508:	e0bff517 	ldw	r2,-44(fp)
 182e50c:	10800117 	ldw	r2,4(r2)
 182e510:	e0bff215 	stw	r2,-56(fp)
      rcvevent = sock->rcvevent;
 182e514:	e0bff517 	ldw	r2,-44(fp)
 182e518:	1080028b 	ldhu	r2,10(r2)
 182e51c:	e0bff30d 	sth	r2,-52(fp)
      sendevent = sock->sendevent;
 182e520:	e0bff517 	ldw	r2,-44(fp)
 182e524:	1080030b 	ldhu	r2,12(r2)
 182e528:	e0bff38d 	sth	r2,-50(fp)
      errevent = sock->errevent;
 182e52c:	e0bff517 	ldw	r2,-44(fp)
 182e530:	1080038b 	ldhu	r2,14(r2)
 182e534:	e0bff40d 	sth	r2,-48(fp)
    }
    SYS_ARCH_UNPROTECT(lev);
 182e538:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182e53c:	10000126 	beq	r2,zero,182e544 <lwip_selscan+0x144>
 182e540:	1810f900 	call	1810f90 <vTaskExitCritical>
    /* ... then examine it: */
    /* See if netconn of this socket is ready for read */
    if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 182e544:	e0bffd17 	ldw	r2,-12(fp)
 182e548:	10002626 	beq	r2,zero,182e5e4 <lwip_selscan+0x1e4>
 182e54c:	e0bfea17 	ldw	r2,-88(fp)
 182e550:	1004d17a 	srli	r2,r2,5
 182e554:	e0fffd17 	ldw	r3,-12(fp)
 182e558:	1085883a 	add	r2,r2,r2
 182e55c:	1085883a 	add	r2,r2,r2
 182e560:	1885883a 	add	r2,r3,r2
 182e564:	10c00017 	ldw	r3,0(r2)
 182e568:	e0bfea17 	ldw	r2,-88(fp)
 182e56c:	108007cc 	andi	r2,r2,31
 182e570:	1885d83a 	sra	r2,r3,r2
 182e574:	1080004c 	andi	r2,r2,1
 182e578:	10001a26 	beq	r2,zero,182e5e4 <lwip_selscan+0x1e4>
 182e57c:	e0bff217 	ldw	r2,-56(fp)
 182e580:	1000021e 	bne	r2,zero,182e58c <lwip_selscan+0x18c>
 182e584:	e0bff30f 	ldh	r2,-52(fp)
 182e588:	0080160e 	bge	zero,r2,182e5e4 <lwip_selscan+0x1e4>
      FD_SET(i, &lreadset);
 182e58c:	e0bfea17 	ldw	r2,-88(fp)
 182e590:	1004d17a 	srli	r2,r2,5
 182e594:	1087883a 	add	r3,r2,r2
 182e598:	18c7883a 	add	r3,r3,r3
 182e59c:	e13fea04 	addi	r4,fp,-88
 182e5a0:	20c7883a 	add	r3,r4,r3
 182e5a4:	18c00c04 	addi	r3,r3,48
 182e5a8:	19000017 	ldw	r4,0(r3)
 182e5ac:	e0ffea17 	ldw	r3,-88(fp)
 182e5b0:	18c007cc 	andi	r3,r3,31
 182e5b4:	01400044 	movi	r5,1
 182e5b8:	28c6983a 	sll	r3,r5,r3
 182e5bc:	20c6b03a 	or	r3,r4,r3
 182e5c0:	1085883a 	add	r2,r2,r2
 182e5c4:	1085883a 	add	r2,r2,r2
 182e5c8:	e13fea04 	addi	r4,fp,-88
 182e5cc:	2085883a 	add	r2,r4,r2
 182e5d0:	10800c04 	addi	r2,r2,48
 182e5d4:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
      nready++;
 182e5d8:	e0bfeb17 	ldw	r2,-84(fp)
 182e5dc:	10800044 	addi	r2,r2,1
 182e5e0:	e0bfeb15 	stw	r2,-84(fp)
    }
    /* See if netconn of this socket is ready for write */
    if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 182e5e4:	e0bffe17 	ldw	r2,-8(fp)
 182e5e8:	10002426 	beq	r2,zero,182e67c <lwip_selscan+0x27c>
 182e5ec:	e0bfea17 	ldw	r2,-88(fp)
 182e5f0:	1004d17a 	srli	r2,r2,5
 182e5f4:	e0fffe17 	ldw	r3,-8(fp)
 182e5f8:	1085883a 	add	r2,r2,r2
 182e5fc:	1085883a 	add	r2,r2,r2
 182e600:	1885883a 	add	r2,r3,r2
 182e604:	10c00017 	ldw	r3,0(r2)
 182e608:	e0bfea17 	ldw	r2,-88(fp)
 182e60c:	108007cc 	andi	r2,r2,31
 182e610:	1885d83a 	sra	r2,r3,r2
 182e614:	1080004c 	andi	r2,r2,1
 182e618:	10001826 	beq	r2,zero,182e67c <lwip_selscan+0x27c>
 182e61c:	e0bff38b 	ldhu	r2,-50(fp)
 182e620:	10001626 	beq	r2,zero,182e67c <lwip_selscan+0x27c>
      FD_SET(i, &lwriteset);
 182e624:	e0bfea17 	ldw	r2,-88(fp)
 182e628:	1004d17a 	srli	r2,r2,5
 182e62c:	1087883a 	add	r3,r2,r2
 182e630:	18c7883a 	add	r3,r3,r3
 182e634:	e13fea04 	addi	r4,fp,-88
 182e638:	20c7883a 	add	r3,r4,r3
 182e63c:	18c00e04 	addi	r3,r3,56
 182e640:	19000017 	ldw	r4,0(r3)
 182e644:	e0ffea17 	ldw	r3,-88(fp)
 182e648:	18c007cc 	andi	r3,r3,31
 182e64c:	01400044 	movi	r5,1
 182e650:	28c6983a 	sll	r3,r5,r3
 182e654:	20c6b03a 	or	r3,r4,r3
 182e658:	1085883a 	add	r2,r2,r2
 182e65c:	1085883a 	add	r2,r2,r2
 182e660:	e13fea04 	addi	r4,fp,-88
 182e664:	2085883a 	add	r2,r4,r2
 182e668:	10800e04 	addi	r2,r2,56
 182e66c:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
      nready++;
 182e670:	e0bfeb17 	ldw	r2,-84(fp)
 182e674:	10800044 	addi	r2,r2,1
 182e678:	e0bfeb15 	stw	r2,-84(fp)
    }
    /* See if netconn of this socket had an error */
    if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 182e67c:	e0bfff17 	ldw	r2,-4(fp)
 182e680:	10002426 	beq	r2,zero,182e714 <lwip_selscan+0x314>
 182e684:	e0bfea17 	ldw	r2,-88(fp)
 182e688:	1004d17a 	srli	r2,r2,5
 182e68c:	e0ffff17 	ldw	r3,-4(fp)
 182e690:	1085883a 	add	r2,r2,r2
 182e694:	1085883a 	add	r2,r2,r2
 182e698:	1885883a 	add	r2,r3,r2
 182e69c:	10c00017 	ldw	r3,0(r2)
 182e6a0:	e0bfea17 	ldw	r2,-88(fp)
 182e6a4:	108007cc 	andi	r2,r2,31
 182e6a8:	1885d83a 	sra	r2,r3,r2
 182e6ac:	1080004c 	andi	r2,r2,1
 182e6b0:	10001826 	beq	r2,zero,182e714 <lwip_selscan+0x314>
 182e6b4:	e0bff40b 	ldhu	r2,-48(fp)
 182e6b8:	10001626 	beq	r2,zero,182e714 <lwip_selscan+0x314>
      FD_SET(i, &lexceptset);
 182e6bc:	e0bfea17 	ldw	r2,-88(fp)
 182e6c0:	1004d17a 	srli	r2,r2,5
 182e6c4:	1087883a 	add	r3,r2,r2
 182e6c8:	18c7883a 	add	r3,r3,r3
 182e6cc:	e13fea04 	addi	r4,fp,-88
 182e6d0:	20c7883a 	add	r3,r4,r3
 182e6d4:	18c01004 	addi	r3,r3,64
 182e6d8:	19000017 	ldw	r4,0(r3)
 182e6dc:	e0ffea17 	ldw	r3,-88(fp)
 182e6e0:	18c007cc 	andi	r3,r3,31
 182e6e4:	01400044 	movi	r5,1
 182e6e8:	28c6983a 	sll	r3,r5,r3
 182e6ec:	20c6b03a 	or	r3,r4,r3
 182e6f0:	1085883a 	add	r2,r2,r2
 182e6f4:	1085883a 	add	r2,r2,r2
 182e6f8:	e13fea04 	addi	r4,fp,-88
 182e6fc:	2085883a 	add	r2,r4,r2
 182e700:	10801004 	addi	r2,r2,64
 182e704:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
      nready++;
 182e708:	e0bfeb17 	ldw	r2,-84(fp)
 182e70c:	10800044 	addi	r2,r2,1
 182e710:	e0bfeb15 	stw	r2,-84(fp)
  FD_ZERO(&lwriteset);
  FD_ZERO(&lexceptset);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 182e714:	e0bfea17 	ldw	r2,-88(fp)
 182e718:	10800044 	addi	r2,r2,1
 182e71c:	e0bfea15 	stw	r2,-88(fp)
 182e720:	e0ffea17 	ldw	r3,-88(fp)
 182e724:	e0bffc17 	ldw	r2,-16(fp)
 182e728:	18bf6b16 	blt	r3,r2,182e4d8 <__ram_exceptions_end+0xff81e1e8>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
      nready++;
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 182e72c:	e0800217 	ldw	r2,8(fp)
 182e730:	e0fff617 	ldw	r3,-40(fp)
 182e734:	10c00015 	stw	r3,0(r2)
 182e738:	e0fff717 	ldw	r3,-36(fp)
 182e73c:	10c00115 	stw	r3,4(r2)
  *writeset_out = lwriteset;
 182e740:	e0800317 	ldw	r2,12(fp)
 182e744:	e0fff817 	ldw	r3,-32(fp)
 182e748:	10c00015 	stw	r3,0(r2)
 182e74c:	e0fff917 	ldw	r3,-28(fp)
 182e750:	10c00115 	stw	r3,4(r2)
  *exceptset_out = lexceptset;
 182e754:	e0800417 	ldw	r2,16(fp)
 182e758:	e0fffa17 	ldw	r3,-24(fp)
 182e75c:	10c00015 	stw	r3,0(r2)
 182e760:	e0fffb17 	ldw	r3,-20(fp)
 182e764:	10c00115 	stw	r3,4(r2)

  LWIP_ASSERT("nready >= 0", nready >= 0);
  return nready;
 182e768:	e0bfeb17 	ldw	r2,-84(fp)
}
 182e76c:	e037883a 	mov	sp,fp
 182e770:	dfc00117 	ldw	ra,4(sp)
 182e774:	df000017 	ldw	fp,0(sp)
 182e778:	dec00204 	addi	sp,sp,8
 182e77c:	f800283a 	ret

0182e780 <lwip_select>:
 * Processing exceptset is not yet implemented.
 */
int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 182e780:	deffe204 	addi	sp,sp,-120
 182e784:	dfc01d15 	stw	ra,116(sp)
 182e788:	df001c15 	stw	fp,112(sp)
 182e78c:	dc001b15 	stw	r16,108(sp)
 182e790:	df001c04 	addi	fp,sp,112
 182e794:	e13ffb15 	stw	r4,-20(fp)
 182e798:	e17ffc15 	stw	r5,-16(fp)
 182e79c:	e1bffd15 	stw	r6,-12(fp)
 182e7a0:	e1fffe15 	stw	r7,-8(fp)
  u32_t waitres = 0;
 182e7a4:	e03fe715 	stw	zero,-100(fp)
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 182e7a8:	e0bff204 	addi	r2,fp,-56
 182e7ac:	d8800215 	stw	r2,8(sp)
 182e7b0:	e0bff004 	addi	r2,fp,-64
 182e7b4:	d8800115 	stw	r2,4(sp)
 182e7b8:	e0bfee04 	addi	r2,fp,-72
 182e7bc:	d8800015 	stw	r2,0(sp)
 182e7c0:	e1fffe17 	ldw	r7,-8(fp)
 182e7c4:	e1bffd17 	ldw	r6,-12(fp)
 182e7c8:	e17ffc17 	ldw	r5,-16(fp)
 182e7cc:	e13ffb17 	ldw	r4,-20(fp)
 182e7d0:	182e4000 	call	182e400 <lwip_selscan>
 182e7d4:	e0bfe815 	stw	r2,-96(fp)

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
 182e7d8:	e0bfe817 	ldw	r2,-96(fp)
 182e7dc:	1001041e 	bne	r2,zero,182ebf0 <lwip_select+0x470>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 182e7e0:	e0800217 	ldw	r2,8(fp)
 182e7e4:	10000626 	beq	r2,zero,182e800 <lwip_select+0x80>
 182e7e8:	e0800217 	ldw	r2,8(fp)
 182e7ec:	10800017 	ldw	r2,0(r2)
 182e7f0:	1000031e 	bne	r2,zero,182e800 <lwip_select+0x80>
 182e7f4:	e0800217 	ldw	r2,8(fp)
 182e7f8:	10800117 	ldw	r2,4(r2)
 182e7fc:	1000f926 	beq	r2,zero,182ebe4 <lwip_select+0x464>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
 182e800:	e03ff415 	stw	zero,-48(fp)
    select_cb.prev = NULL;
 182e804:	e03ff515 	stw	zero,-44(fp)
    select_cb.readset = readset;
 182e808:	e0bffc17 	ldw	r2,-16(fp)
 182e80c:	e0bff615 	stw	r2,-40(fp)
    select_cb.writeset = writeset;
 182e810:	e0bffd17 	ldw	r2,-12(fp)
 182e814:	e0bff715 	stw	r2,-36(fp)
    select_cb.exceptset = exceptset;
 182e818:	e0bffe17 	ldw	r2,-8(fp)
 182e81c:	e0bff815 	stw	r2,-32(fp)
    select_cb.sem_signalled = 0;
 182e820:	e03ff915 	stw	zero,-28(fp)
    err = sys_sem_new(&select_cb.sem, 0);
 182e824:	e0bff404 	addi	r2,fp,-48
 182e828:	10800604 	addi	r2,r2,24
 182e82c:	000b883a 	mov	r5,zero
 182e830:	1009883a 	mov	r4,r2
 182e834:	1814e900 	call	1814e90 <sys_sem_new>
 182e838:	e0bfeb05 	stb	r2,-84(fp)
    if (err != ERR_OK) {
 182e83c:	e0bfeb07 	ldb	r2,-84(fp)
 182e840:	10000226 	beq	r2,zero,182e84c <lwip_select+0xcc>
      /* failed to create semaphore */
      set_errno(ENOMEM);
      return -1;
 182e844:	00bfffc4 	movi	r2,-1
 182e848:	0000ff06 	br	182ec48 <lwip_select+0x4c8>
    }

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
 182e84c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182e850:	10000126 	beq	r2,zero,182e858 <lwip_select+0xd8>
 182e854:	1810f480 	call	1810f48 <vTaskEnterCritical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
 182e858:	d0a80917 	ldw	r2,-24540(gp)
 182e85c:	e0bff415 	stw	r2,-48(fp)
    if (select_cb_list != NULL) {
 182e860:	d0a80917 	ldw	r2,-24540(gp)
 182e864:	10000326 	beq	r2,zero,182e874 <lwip_select+0xf4>
      select_cb_list->prev = &select_cb;
 182e868:	d0a80917 	ldw	r2,-24540(gp)
 182e86c:	e0fff404 	addi	r3,fp,-48
 182e870:	10c00115 	stw	r3,4(r2)
    }
    select_cb_list = &select_cb;
 182e874:	e0bff404 	addi	r2,fp,-48
 182e878:	d0a80915 	stw	r2,-24540(gp)
    /* Increasing this counter tells even_callback that the list has changed. */
    select_cb_ctr++;
 182e87c:	d0a80a17 	ldw	r2,-24536(gp)
 182e880:	10800044 	addi	r2,r2,1
 182e884:	d0a80a15 	stw	r2,-24536(gp)

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
 182e888:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182e88c:	10000126 	beq	r2,zero,182e894 <lwip_select+0x114>
 182e890:	1810f900 	call	1810f90 <vTaskExitCritical>

    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 182e894:	00800804 	movi	r2,32
 182e898:	e0bfea15 	stw	r2,-88(fp)
 182e89c:	00003b06 	br	182e98c <lwip_select+0x20c>
      if ((readset && FD_ISSET(i, readset)) ||
 182e8a0:	e0bffc17 	ldw	r2,-16(fp)
 182e8a4:	10000c26 	beq	r2,zero,182e8d8 <lwip_select+0x158>
 182e8a8:	e0bfea17 	ldw	r2,-88(fp)
 182e8ac:	1004d17a 	srli	r2,r2,5
 182e8b0:	e0fffc17 	ldw	r3,-16(fp)
 182e8b4:	1085883a 	add	r2,r2,r2
 182e8b8:	1085883a 	add	r2,r2,r2
 182e8bc:	1885883a 	add	r2,r3,r2
 182e8c0:	10c00017 	ldw	r3,0(r2)
 182e8c4:	e0bfea17 	ldw	r2,-88(fp)
 182e8c8:	108007cc 	andi	r2,r2,31
 182e8cc:	1885d83a 	sra	r2,r3,r2
 182e8d0:	1080004c 	andi	r2,r2,1
 182e8d4:	10001c1e 	bne	r2,zero,182e948 <lwip_select+0x1c8>
 182e8d8:	e0bffd17 	ldw	r2,-12(fp)
 182e8dc:	10000c26 	beq	r2,zero,182e910 <lwip_select+0x190>
          (writeset && FD_ISSET(i, writeset)) ||
 182e8e0:	e0bfea17 	ldw	r2,-88(fp)
 182e8e4:	1004d17a 	srli	r2,r2,5
 182e8e8:	e0fffd17 	ldw	r3,-12(fp)
 182e8ec:	1085883a 	add	r2,r2,r2
 182e8f0:	1085883a 	add	r2,r2,r2
 182e8f4:	1885883a 	add	r2,r3,r2
 182e8f8:	10c00017 	ldw	r3,0(r2)
 182e8fc:	e0bfea17 	ldw	r2,-88(fp)
 182e900:	108007cc 	andi	r2,r2,31
 182e904:	1885d83a 	sra	r2,r3,r2
 182e908:	1080004c 	andi	r2,r2,1
 182e90c:	10000e1e 	bne	r2,zero,182e948 <lwip_select+0x1c8>
 182e910:	e0bffe17 	ldw	r2,-8(fp)
 182e914:	10001a26 	beq	r2,zero,182e980 <lwip_select+0x200>
          (exceptset && FD_ISSET(i, exceptset))) {
 182e918:	e0bfea17 	ldw	r2,-88(fp)
 182e91c:	1004d17a 	srli	r2,r2,5
 182e920:	e0fffe17 	ldw	r3,-8(fp)
 182e924:	1085883a 	add	r2,r2,r2
 182e928:	1085883a 	add	r2,r2,r2
 182e92c:	1885883a 	add	r2,r3,r2
 182e930:	10c00017 	ldw	r3,0(r2)
 182e934:	e0bfea17 	ldw	r2,-88(fp)
 182e938:	108007cc 	andi	r2,r2,31
 182e93c:	1885d83a 	sra	r2,r3,r2
 182e940:	1080004c 	andi	r2,r2,1
 182e944:	10000e26 	beq	r2,zero,182e980 <lwip_select+0x200>
        struct lwip_sock *sock = tryget_socket(i);
 182e948:	e13fea17 	ldw	r4,-88(fp)
 182e94c:	182cf9c0 	call	182cf9c <tryget_socket>
 182e950:	e0bfec15 	stw	r2,-80(fp)
        LWIP_ASSERT("sock != NULL", sock != NULL);
        SYS_ARCH_PROTECT(lev);
 182e954:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182e958:	10000126 	beq	r2,zero,182e960 <lwip_select+0x1e0>
 182e95c:	1810f480 	call	1810f48 <vTaskEnterCritical>
        sock->select_waiting++;
 182e960:	e0bfec17 	ldw	r2,-80(fp)
 182e964:	10800517 	ldw	r2,20(r2)
 182e968:	10c00044 	addi	r3,r2,1
 182e96c:	e0bfec17 	ldw	r2,-80(fp)
 182e970:	10c00515 	stw	r3,20(r2)
        LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
        SYS_ARCH_UNPROTECT(lev);
 182e974:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182e978:	10000126 	beq	r2,zero,182e980 <lwip_select+0x200>
 182e97c:	1810f900 	call	1810f90 <vTaskExitCritical>

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);

    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 182e980:	e0bfea17 	ldw	r2,-88(fp)
 182e984:	10800044 	addi	r2,r2,1
 182e988:	e0bfea15 	stw	r2,-88(fp)
 182e98c:	e0ffea17 	ldw	r3,-88(fp)
 182e990:	e0bffb17 	ldw	r2,-20(fp)
 182e994:	18bfc216 	blt	r3,r2,182e8a0 <__ram_exceptions_end+0xff81e5b0>
      }
    }

    /* Call lwip_selscan again: there could have been events between
       the last scan (whithout us on the list) and putting us on the list! */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 182e998:	e0bff204 	addi	r2,fp,-56
 182e99c:	d8800215 	stw	r2,8(sp)
 182e9a0:	e0bff004 	addi	r2,fp,-64
 182e9a4:	d8800115 	stw	r2,4(sp)
 182e9a8:	e0bfee04 	addi	r2,fp,-72
 182e9ac:	d8800015 	stw	r2,0(sp)
 182e9b0:	e1fffe17 	ldw	r7,-8(fp)
 182e9b4:	e1bffd17 	ldw	r6,-12(fp)
 182e9b8:	e17ffc17 	ldw	r5,-16(fp)
 182e9bc:	e13ffb17 	ldw	r4,-20(fp)
 182e9c0:	182e4000 	call	182e400 <lwip_selscan>
 182e9c4:	e0bfe815 	stw	r2,-96(fp)
    if (!nready) {
 182e9c8:	e0bfe817 	ldw	r2,-96(fp)
 182e9cc:	1000191e 	bne	r2,zero,182ea34 <lwip_select+0x2b4>
      /* Still none ready, just wait to be woken */
      if (timeout == 0) {
 182e9d0:	e0800217 	ldw	r2,8(fp)
 182e9d4:	1000021e 	bne	r2,zero,182e9e0 <lwip_select+0x260>
        /* Wait forever */
        msectimeout = 0;
 182e9d8:	e03fe915 	stw	zero,-92(fp)
 182e9dc:	00000f06 	br	182ea1c <lwip_select+0x29c>
      } else {
        msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
 182e9e0:	e0800217 	ldw	r2,8(fp)
 182e9e4:	10800017 	ldw	r2,0(r2)
 182e9e8:	1400fa24 	muli	r16,r2,1000
 182e9ec:	e0800217 	ldw	r2,8(fp)
 182e9f0:	10800117 	ldw	r2,4(r2)
 182e9f4:	10807d04 	addi	r2,r2,500
 182e9f8:	0140fa04 	movi	r5,1000
 182e9fc:	1009883a 	mov	r4,r2
 182ea00:	180ab240 	call	180ab24 <__divsi3>
 182ea04:	8085883a 	add	r2,r16,r2
 182ea08:	e0bfe915 	stw	r2,-92(fp)
        if (msectimeout == 0) {
 182ea0c:	e0bfe917 	ldw	r2,-92(fp)
 182ea10:	1000021e 	bne	r2,zero,182ea1c <lwip_select+0x29c>
          /* Wait 1ms at least (0 means wait forever) */
          msectimeout = 1;
 182ea14:	00800044 	movi	r2,1
 182ea18:	e0bfe915 	stw	r2,-92(fp)
        }
      }

      waitres = sys_arch_sem_wait(&select_cb.sem, msectimeout);
 182ea1c:	e0bff404 	addi	r2,fp,-48
 182ea20:	10800604 	addi	r2,r2,24
 182ea24:	e17fe917 	ldw	r5,-92(fp)
 182ea28:	1009883a 	mov	r4,r2
 182ea2c:	18150140 	call	1815014 <sys_arch_sem_wait>
 182ea30:	e0bfe715 	stw	r2,-100(fp)
    }
    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 182ea34:	00800804 	movi	r2,32
 182ea38:	e0bfea15 	stw	r2,-88(fp)
 182ea3c:	00003b06 	br	182eb2c <lwip_select+0x3ac>
      if ((readset && FD_ISSET(i, readset)) ||
 182ea40:	e0bffc17 	ldw	r2,-16(fp)
 182ea44:	10000c26 	beq	r2,zero,182ea78 <lwip_select+0x2f8>
 182ea48:	e0bfea17 	ldw	r2,-88(fp)
 182ea4c:	1004d17a 	srli	r2,r2,5
 182ea50:	e0fffc17 	ldw	r3,-16(fp)
 182ea54:	1085883a 	add	r2,r2,r2
 182ea58:	1085883a 	add	r2,r2,r2
 182ea5c:	1885883a 	add	r2,r3,r2
 182ea60:	10c00017 	ldw	r3,0(r2)
 182ea64:	e0bfea17 	ldw	r2,-88(fp)
 182ea68:	108007cc 	andi	r2,r2,31
 182ea6c:	1885d83a 	sra	r2,r3,r2
 182ea70:	1080004c 	andi	r2,r2,1
 182ea74:	10001c1e 	bne	r2,zero,182eae8 <lwip_select+0x368>
 182ea78:	e0bffd17 	ldw	r2,-12(fp)
 182ea7c:	10000c26 	beq	r2,zero,182eab0 <lwip_select+0x330>
          (writeset && FD_ISSET(i, writeset)) ||
 182ea80:	e0bfea17 	ldw	r2,-88(fp)
 182ea84:	1004d17a 	srli	r2,r2,5
 182ea88:	e0fffd17 	ldw	r3,-12(fp)
 182ea8c:	1085883a 	add	r2,r2,r2
 182ea90:	1085883a 	add	r2,r2,r2
 182ea94:	1885883a 	add	r2,r3,r2
 182ea98:	10c00017 	ldw	r3,0(r2)
 182ea9c:	e0bfea17 	ldw	r2,-88(fp)
 182eaa0:	108007cc 	andi	r2,r2,31
 182eaa4:	1885d83a 	sra	r2,r3,r2
 182eaa8:	1080004c 	andi	r2,r2,1
 182eaac:	10000e1e 	bne	r2,zero,182eae8 <lwip_select+0x368>
 182eab0:	e0bffe17 	ldw	r2,-8(fp)
 182eab4:	10001a26 	beq	r2,zero,182eb20 <lwip_select+0x3a0>
          (exceptset && FD_ISSET(i, exceptset))) {
 182eab8:	e0bfea17 	ldw	r2,-88(fp)
 182eabc:	1004d17a 	srli	r2,r2,5
 182eac0:	e0fffe17 	ldw	r3,-8(fp)
 182eac4:	1085883a 	add	r2,r2,r2
 182eac8:	1085883a 	add	r2,r2,r2
 182eacc:	1885883a 	add	r2,r3,r2
 182ead0:	10c00017 	ldw	r3,0(r2)
 182ead4:	e0bfea17 	ldw	r2,-88(fp)
 182ead8:	108007cc 	andi	r2,r2,31
 182eadc:	1885d83a 	sra	r2,r3,r2
 182eae0:	1080004c 	andi	r2,r2,1
 182eae4:	10000e26 	beq	r2,zero,182eb20 <lwip_select+0x3a0>
        struct lwip_sock *sock = tryget_socket(i);
 182eae8:	e13fea17 	ldw	r4,-88(fp)
 182eaec:	182cf9c0 	call	182cf9c <tryget_socket>
 182eaf0:	e0bfed15 	stw	r2,-76(fp)
        LWIP_ASSERT("sock != NULL", sock != NULL);
        SYS_ARCH_PROTECT(lev);
 182eaf4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182eaf8:	10000126 	beq	r2,zero,182eb00 <lwip_select+0x380>
 182eafc:	1810f480 	call	1810f48 <vTaskEnterCritical>
        sock->select_waiting--;
 182eb00:	e0bfed17 	ldw	r2,-76(fp)
 182eb04:	10800517 	ldw	r2,20(r2)
 182eb08:	10ffffc4 	addi	r3,r2,-1
 182eb0c:	e0bfed17 	ldw	r2,-76(fp)
 182eb10:	10c00515 	stw	r3,20(r2)
        LWIP_ASSERT("sock->select_waiting >= 0", sock->select_waiting >= 0);
        SYS_ARCH_UNPROTECT(lev);
 182eb14:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182eb18:	10000126 	beq	r2,zero,182eb20 <lwip_select+0x3a0>
 182eb1c:	1810f900 	call	1810f90 <vTaskExitCritical>
      }

      waitres = sys_arch_sem_wait(&select_cb.sem, msectimeout);
    }
    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 182eb20:	e0bfea17 	ldw	r2,-88(fp)
 182eb24:	10800044 	addi	r2,r2,1
 182eb28:	e0bfea15 	stw	r2,-88(fp)
 182eb2c:	e0ffea17 	ldw	r3,-88(fp)
 182eb30:	e0bffb17 	ldw	r2,-20(fp)
 182eb34:	18bfc216 	blt	r3,r2,182ea40 <__ram_exceptions_end+0xff81e750>
        LWIP_ASSERT("sock->select_waiting >= 0", sock->select_waiting >= 0);
        SYS_ARCH_UNPROTECT(lev);
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
 182eb38:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182eb3c:	10000126 	beq	r2,zero,182eb44 <lwip_select+0x3c4>
 182eb40:	1810f480 	call	1810f48 <vTaskEnterCritical>
    if (select_cb.next != NULL) {
 182eb44:	e0bff417 	ldw	r2,-48(fp)
 182eb48:	10000326 	beq	r2,zero,182eb58 <lwip_select+0x3d8>
      select_cb.next->prev = select_cb.prev;
 182eb4c:	e0bff417 	ldw	r2,-48(fp)
 182eb50:	e0fff517 	ldw	r3,-44(fp)
 182eb54:	10c00115 	stw	r3,4(r2)
    }
    if (select_cb_list == &select_cb) {
 182eb58:	d0e80917 	ldw	r3,-24540(gp)
 182eb5c:	e0bff404 	addi	r2,fp,-48
 182eb60:	1880031e 	bne	r3,r2,182eb70 <lwip_select+0x3f0>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
      select_cb_list = select_cb.next;
 182eb64:	e0bff417 	ldw	r2,-48(fp)
 182eb68:	d0a80915 	stw	r2,-24540(gp)
 182eb6c:	00000306 	br	182eb7c <lwip_select+0x3fc>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
      select_cb.prev->next = select_cb.next;
 182eb70:	e0bff517 	ldw	r2,-44(fp)
 182eb74:	e0fff417 	ldw	r3,-48(fp)
 182eb78:	10c00015 	stw	r3,0(r2)
    }
    /* Increasing this counter tells even_callback that the list has changed. */
    select_cb_ctr++;
 182eb7c:	d0a80a17 	ldw	r2,-24536(gp)
 182eb80:	10800044 	addi	r2,r2,1
 182eb84:	d0a80a15 	stw	r2,-24536(gp)
    SYS_ARCH_UNPROTECT(lev);
 182eb88:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182eb8c:	10000126 	beq	r2,zero,182eb94 <lwip_select+0x414>
 182eb90:	1810f900 	call	1810f90 <vTaskExitCritical>

    sys_sem_free(&select_cb.sem);
 182eb94:	e0bff404 	addi	r2,fp,-48
 182eb98:	10800604 	addi	r2,r2,24
 182eb9c:	1009883a 	mov	r4,r2
 182eba0:	1814f740 	call	1814f74 <sys_sem_free>
    if (waitres == SYS_ARCH_TIMEOUT)  {
 182eba4:	e0bfe717 	ldw	r2,-100(fp)
 182eba8:	10bfffd8 	cmpnei	r2,r2,-1
 182ebac:	10000f26 	beq	r2,zero,182ebec <lwip_select+0x46c>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 182ebb0:	e0bff204 	addi	r2,fp,-56
 182ebb4:	d8800215 	stw	r2,8(sp)
 182ebb8:	e0bff004 	addi	r2,fp,-64
 182ebbc:	d8800115 	stw	r2,4(sp)
 182ebc0:	e0bfee04 	addi	r2,fp,-72
 182ebc4:	d8800015 	stw	r2,0(sp)
 182ebc8:	e1fffe17 	ldw	r7,-8(fp)
 182ebcc:	e1bffd17 	ldw	r6,-12(fp)
 182ebd0:	e17ffc17 	ldw	r5,-16(fp)
 182ebd4:	e13ffb17 	ldw	r4,-20(fp)
 182ebd8:	182e4000 	call	182e400 <lwip_selscan>
 182ebdc:	e0bfe815 	stw	r2,-96(fp)
 182ebe0:	00000306 	br	182ebf0 <lwip_select+0x470>
  if (!nready) {
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
      /* This is OK as the local fdsets are empty and nready is zero,
         or we would have returned earlier. */
      goto return_copy_fdsets;
 182ebe4:	0001883a 	nop
 182ebe8:	00000106 	br	182ebf0 <lwip_select+0x470>
    if (waitres == SYS_ARCH_TIMEOUT)  {
      /* Timeout */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
      /* This is OK as the local fdsets are empty and nready is zero,
         or we would have returned earlier. */
      goto return_copy_fdsets;
 182ebec:	0001883a 	nop
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  set_errno(0);
  if (readset) {
 182ebf0:	e0bffc17 	ldw	r2,-16(fp)
 182ebf4:	10000526 	beq	r2,zero,182ec0c <lwip_select+0x48c>
    *readset = lreadset;
 182ebf8:	e0bffc17 	ldw	r2,-16(fp)
 182ebfc:	e0ffee17 	ldw	r3,-72(fp)
 182ec00:	10c00015 	stw	r3,0(r2)
 182ec04:	e0ffef17 	ldw	r3,-68(fp)
 182ec08:	10c00115 	stw	r3,4(r2)
  }
  if (writeset) {
 182ec0c:	e0bffd17 	ldw	r2,-12(fp)
 182ec10:	10000526 	beq	r2,zero,182ec28 <lwip_select+0x4a8>
    *writeset = lwriteset;
 182ec14:	e0bffd17 	ldw	r2,-12(fp)
 182ec18:	e0fff017 	ldw	r3,-64(fp)
 182ec1c:	10c00015 	stw	r3,0(r2)
 182ec20:	e0fff117 	ldw	r3,-60(fp)
 182ec24:	10c00115 	stw	r3,4(r2)
  }
  if (exceptset) {
 182ec28:	e0bffe17 	ldw	r2,-8(fp)
 182ec2c:	10000526 	beq	r2,zero,182ec44 <lwip_select+0x4c4>
    *exceptset = lexceptset;
 182ec30:	e0bffe17 	ldw	r2,-8(fp)
 182ec34:	e0fff217 	ldw	r3,-56(fp)
 182ec38:	10c00015 	stw	r3,0(r2)
 182ec3c:	e0fff317 	ldw	r3,-52(fp)
 182ec40:	10c00115 	stw	r3,4(r2)
  }


  return nready;
 182ec44:	e0bfe817 	ldw	r2,-96(fp)
}
 182ec48:	e6ffff04 	addi	sp,fp,-4
 182ec4c:	dfc00217 	ldw	ra,8(sp)
 182ec50:	df000117 	ldw	fp,4(sp)
 182ec54:	dc000017 	ldw	r16,0(sp)
 182ec58:	dec00304 	addi	sp,sp,12
 182ec5c:	f800283a 	ret

0182ec60 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 182ec60:	defff604 	addi	sp,sp,-40
 182ec64:	dfc00915 	stw	ra,36(sp)
 182ec68:	df000815 	stw	fp,32(sp)
 182ec6c:	df000804 	addi	fp,sp,32
 182ec70:	e13ffd15 	stw	r4,-12(fp)
 182ec74:	e17ffe15 	stw	r5,-8(fp)
 182ec78:	3005883a 	mov	r2,r6
 182ec7c:	e0bfff0d 	sth	r2,-4(fp)
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 182ec80:	e0bffd17 	ldw	r2,-12(fp)
 182ec84:	1000d526 	beq	r2,zero,182efdc <event_callback+0x37c>
    s = conn->socket;
 182ec88:	e0bffd17 	ldw	r2,-12(fp)
 182ec8c:	10800717 	ldw	r2,28(r2)
 182ec90:	e0bff815 	stw	r2,-32(fp)
    if (s < 0) {
 182ec94:	e0bff817 	ldw	r2,-32(fp)
 182ec98:	1000170e 	bge	r2,zero,182ecf8 <event_callback+0x98>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 182ec9c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182eca0:	10000126 	beq	r2,zero,182eca8 <event_callback+0x48>
 182eca4:	1810f480 	call	1810f48 <vTaskEnterCritical>
      if (conn->socket < 0) {
 182eca8:	e0bffd17 	ldw	r2,-12(fp)
 182ecac:	10800717 	ldw	r2,28(r2)
 182ecb0:	10000b0e 	bge	r2,zero,182ece0 <event_callback+0x80>
        if (evt == NETCONN_EVT_RCVPLUS) {
 182ecb4:	e0bffe17 	ldw	r2,-8(fp)
 182ecb8:	1000051e 	bne	r2,zero,182ecd0 <event_callback+0x70>
          conn->socket--;
 182ecbc:	e0bffd17 	ldw	r2,-12(fp)
 182ecc0:	10800717 	ldw	r2,28(r2)
 182ecc4:	10ffffc4 	addi	r3,r2,-1
 182ecc8:	e0bffd17 	ldw	r2,-12(fp)
 182eccc:	10c00715 	stw	r3,28(r2)
        }
        SYS_ARCH_UNPROTECT(lev);
 182ecd0:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182ecd4:	1000c326 	beq	r2,zero,182efe4 <event_callback+0x384>
 182ecd8:	1810f900 	call	1810f90 <vTaskExitCritical>
        return;
 182ecdc:	0000c106 	br	182efe4 <event_callback+0x384>
      }
      s = conn->socket;
 182ece0:	e0bffd17 	ldw	r2,-12(fp)
 182ece4:	10800717 	ldw	r2,28(r2)
 182ece8:	e0bff815 	stw	r2,-32(fp)
      SYS_ARCH_UNPROTECT(lev);
 182ecec:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182ecf0:	10000126 	beq	r2,zero,182ecf8 <event_callback+0x98>
 182ecf4:	1810f900 	call	1810f90 <vTaskExitCritical>
    }

    sock = get_socket(s);
 182ecf8:	e13ff817 	ldw	r4,-32(fp)
 182ecfc:	182cf240 	call	182cf24 <get_socket>
 182ed00:	e0bffb15 	stw	r2,-20(fp)
    if (!sock) {
 182ed04:	e0bffb17 	ldw	r2,-20(fp)
 182ed08:	1000b826 	beq	r2,zero,182efec <event_callback+0x38c>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 182ed0c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182ed10:	10000126 	beq	r2,zero,182ed18 <event_callback+0xb8>
 182ed14:	1810f480 	call	1810f48 <vTaskEnterCritical>
  /* Set event as required */
  switch (evt) {
 182ed18:	e0bffe17 	ldw	r2,-8(fp)
 182ed1c:	10800168 	cmpgeui	r2,r2,5
 182ed20:	1000251e 	bne	r2,zero,182edb8 <event_callback+0x158>
 182ed24:	e0bffe17 	ldw	r2,-8(fp)
 182ed28:	100690ba 	slli	r3,r2,2
 182ed2c:	008060f4 	movhi	r2,387
 182ed30:	10bb5004 	addi	r2,r2,-4800
 182ed34:	1885883a 	add	r2,r3,r2
 182ed38:	10800017 	ldw	r2,0(r2)
 182ed3c:	1000683a 	jmp	r2
 182ed40:	0182ed54 	movui	r6,2997
 182ed44:	0182ed70 	cmpltui	r6,zero,2997
 182ed48:	0182ed8c 	andi	r6,zero,2998
 182ed4c:	0182ed9c 	xori	r6,zero,2998
 182ed50:	0182eda8 	cmpgeui	r6,zero,2998
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 182ed54:	e0bffb17 	ldw	r2,-20(fp)
 182ed58:	1080028b 	ldhu	r2,10(r2)
 182ed5c:	10800044 	addi	r2,r2,1
 182ed60:	1007883a 	mov	r3,r2
 182ed64:	e0bffb17 	ldw	r2,-20(fp)
 182ed68:	10c0028d 	sth	r3,10(r2)
      break;
 182ed6c:	00001306 	br	182edbc <event_callback+0x15c>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 182ed70:	e0bffb17 	ldw	r2,-20(fp)
 182ed74:	1080028b 	ldhu	r2,10(r2)
 182ed78:	10bfffc4 	addi	r2,r2,-1
 182ed7c:	1007883a 	mov	r3,r2
 182ed80:	e0bffb17 	ldw	r2,-20(fp)
 182ed84:	10c0028d 	sth	r3,10(r2)
      break;
 182ed88:	00000c06 	br	182edbc <event_callback+0x15c>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 182ed8c:	e0bffb17 	ldw	r2,-20(fp)
 182ed90:	00c00044 	movi	r3,1
 182ed94:	10c0030d 	sth	r3,12(r2)
      break;
 182ed98:	00000806 	br	182edbc <event_callback+0x15c>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 182ed9c:	e0bffb17 	ldw	r2,-20(fp)
 182eda0:	1000030d 	sth	zero,12(r2)
      break;
 182eda4:	00000506 	br	182edbc <event_callback+0x15c>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 182eda8:	e0bffb17 	ldw	r2,-20(fp)
 182edac:	00c00044 	movi	r3,1
 182edb0:	10c0038d 	sth	r3,14(r2)
      break;
 182edb4:	00000106 	br	182edbc <event_callback+0x15c>
    default:
      LWIP_ASSERT("unknown event", 0);
      break;
 182edb8:	0001883a 	nop
  }

  if (sock->select_waiting == 0) {
 182edbc:	e0bffb17 	ldw	r2,-20(fp)
 182edc0:	10800517 	ldw	r2,20(r2)
 182edc4:	1000041e 	bne	r2,zero,182edd8 <event_callback+0x178>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
 182edc8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182edcc:	10008926 	beq	r2,zero,182eff4 <event_callback+0x394>
 182edd0:	1810f900 	call	1810f90 <vTaskExitCritical>
    return;
 182edd4:	00008706 	br	182eff4 <event_callback+0x394>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 182edd8:	d0a80917 	ldw	r2,-24540(gp)
 182eddc:	e0bff915 	stw	r2,-28(fp)
 182ede0:	00007806 	br	182efc4 <event_callback+0x364>
    if (scb->sem_signalled == 0) {
 182ede4:	e0bff917 	ldw	r2,-28(fp)
 182ede8:	10800517 	ldw	r2,20(r2)
 182edec:	1000521e 	bne	r2,zero,182ef38 <event_callback+0x2d8>
      /* semaphore not signalled yet */
      int do_signal = 0;
 182edf0:	e03ffa15 	stw	zero,-24(fp)
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 182edf4:	e0bffb17 	ldw	r2,-20(fp)
 182edf8:	1080028b 	ldhu	r2,10(r2)
 182edfc:	10bfffcc 	andi	r2,r2,65535
 182ee00:	10a0001c 	xori	r2,r2,32768
 182ee04:	10a00004 	addi	r2,r2,-32768
 182ee08:	0080120e 	bge	zero,r2,182ee54 <event_callback+0x1f4>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 182ee0c:	e0bff917 	ldw	r2,-28(fp)
 182ee10:	10800217 	ldw	r2,8(r2)
 182ee14:	10000f26 	beq	r2,zero,182ee54 <event_callback+0x1f4>
 182ee18:	e0bff917 	ldw	r2,-28(fp)
 182ee1c:	10c00217 	ldw	r3,8(r2)
 182ee20:	e0bff817 	ldw	r2,-32(fp)
 182ee24:	1004d17a 	srli	r2,r2,5
 182ee28:	1085883a 	add	r2,r2,r2
 182ee2c:	1085883a 	add	r2,r2,r2
 182ee30:	1885883a 	add	r2,r3,r2
 182ee34:	10c00017 	ldw	r3,0(r2)
 182ee38:	e0bff817 	ldw	r2,-32(fp)
 182ee3c:	108007cc 	andi	r2,r2,31
 182ee40:	1885d83a 	sra	r2,r3,r2
 182ee44:	1080004c 	andi	r2,r2,1
 182ee48:	10000226 	beq	r2,zero,182ee54 <event_callback+0x1f4>
          do_signal = 1;
 182ee4c:	00800044 	movi	r2,1
 182ee50:	e0bffa15 	stw	r2,-24(fp)
        }
      }
      if (sock->sendevent != 0) {
 182ee54:	e0bffb17 	ldw	r2,-20(fp)
 182ee58:	1080030b 	ldhu	r2,12(r2)
 182ee5c:	10bfffcc 	andi	r2,r2,65535
 182ee60:	10001426 	beq	r2,zero,182eeb4 <event_callback+0x254>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 182ee64:	e0bffa17 	ldw	r2,-24(fp)
 182ee68:	1000121e 	bne	r2,zero,182eeb4 <event_callback+0x254>
 182ee6c:	e0bff917 	ldw	r2,-28(fp)
 182ee70:	10800317 	ldw	r2,12(r2)
 182ee74:	10000f26 	beq	r2,zero,182eeb4 <event_callback+0x254>
 182ee78:	e0bff917 	ldw	r2,-28(fp)
 182ee7c:	10c00317 	ldw	r3,12(r2)
 182ee80:	e0bff817 	ldw	r2,-32(fp)
 182ee84:	1004d17a 	srli	r2,r2,5
 182ee88:	1085883a 	add	r2,r2,r2
 182ee8c:	1085883a 	add	r2,r2,r2
 182ee90:	1885883a 	add	r2,r3,r2
 182ee94:	10c00017 	ldw	r3,0(r2)
 182ee98:	e0bff817 	ldw	r2,-32(fp)
 182ee9c:	108007cc 	andi	r2,r2,31
 182eea0:	1885d83a 	sra	r2,r3,r2
 182eea4:	1080004c 	andi	r2,r2,1
 182eea8:	10000226 	beq	r2,zero,182eeb4 <event_callback+0x254>
          do_signal = 1;
 182eeac:	00800044 	movi	r2,1
 182eeb0:	e0bffa15 	stw	r2,-24(fp)
        }
      }
      if (sock->errevent != 0) {
 182eeb4:	e0bffb17 	ldw	r2,-20(fp)
 182eeb8:	1080038b 	ldhu	r2,14(r2)
 182eebc:	10bfffcc 	andi	r2,r2,65535
 182eec0:	10001426 	beq	r2,zero,182ef14 <event_callback+0x2b4>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 182eec4:	e0bffa17 	ldw	r2,-24(fp)
 182eec8:	1000121e 	bne	r2,zero,182ef14 <event_callback+0x2b4>
 182eecc:	e0bff917 	ldw	r2,-28(fp)
 182eed0:	10800417 	ldw	r2,16(r2)
 182eed4:	10000f26 	beq	r2,zero,182ef14 <event_callback+0x2b4>
 182eed8:	e0bff917 	ldw	r2,-28(fp)
 182eedc:	10c00417 	ldw	r3,16(r2)
 182eee0:	e0bff817 	ldw	r2,-32(fp)
 182eee4:	1004d17a 	srli	r2,r2,5
 182eee8:	1085883a 	add	r2,r2,r2
 182eeec:	1085883a 	add	r2,r2,r2
 182eef0:	1885883a 	add	r2,r3,r2
 182eef4:	10c00017 	ldw	r3,0(r2)
 182eef8:	e0bff817 	ldw	r2,-32(fp)
 182eefc:	108007cc 	andi	r2,r2,31
 182ef00:	1885d83a 	sra	r2,r3,r2
 182ef04:	1080004c 	andi	r2,r2,1
 182ef08:	10000226 	beq	r2,zero,182ef14 <event_callback+0x2b4>
          do_signal = 1;
 182ef0c:	00800044 	movi	r2,1
 182ef10:	e0bffa15 	stw	r2,-24(fp)
        }
      }
      if (do_signal) {
 182ef14:	e0bffa17 	ldw	r2,-24(fp)
 182ef18:	10000726 	beq	r2,zero,182ef38 <event_callback+0x2d8>
        scb->sem_signalled = 1;
 182ef1c:	e0bff917 	ldw	r2,-28(fp)
 182ef20:	00c00044 	movi	r3,1
 182ef24:	10c00515 	stw	r3,20(r2)
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidagin the semaphore. */
        sys_sem_signal(&scb->sem);
 182ef28:	e0bff917 	ldw	r2,-28(fp)
 182ef2c:	10800604 	addi	r2,r2,24
 182ef30:	1009883a 	mov	r4,r2
 182ef34:	1814fcc0 	call	1814fcc <sys_sem_signal>
      }
    }

    if ((scb->next) && (scb->next < 0x00800000 || scb->next > 0x00ffffff))
 182ef38:	e0bff917 	ldw	r2,-28(fp)
 182ef3c:	10800017 	ldw	r2,0(r2)
 182ef40:	10000a26 	beq	r2,zero,182ef6c <event_callback+0x30c>
 182ef44:	e0bff917 	ldw	r2,-28(fp)
 182ef48:	10c00017 	ldw	r3,0(r2)
 182ef4c:	00802034 	movhi	r2,128
 182ef50:	18800436 	bltu	r3,r2,182ef64 <event_callback+0x304>
 182ef54:	e0bff917 	ldw	r2,-28(fp)
 182ef58:	10c00017 	ldw	r3,0(r2)
 182ef5c:	00804034 	movhi	r2,256
 182ef60:	18800236 	bltu	r3,r2,182ef6c <event_callback+0x30c>
    {
    	NIOS2_BREAK();
 182ef64:	003da03a 	break	0
 182ef68:	00000706 	br	182ef88 <event_callback+0x328>
    }
    else if (scb < 0x00800000 || scb > 0x00ffffff)
 182ef6c:	e0fff917 	ldw	r3,-28(fp)
 182ef70:	00802034 	movhi	r2,128
 182ef74:	18800336 	bltu	r3,r2,182ef84 <event_callback+0x324>
 182ef78:	e0fff917 	ldw	r3,-28(fp)
 182ef7c:	00804034 	movhi	r2,256
 182ef80:	18800136 	bltu	r3,r2,182ef88 <event_callback+0x328>
    {
    	NIOS2_BREAK();
 182ef84:	003da03a 	break	0
    }

    /* unlock interrupts with each step */
    last_select_cb_ctr = select_cb_ctr;
 182ef88:	d0a80a17 	ldw	r2,-24536(gp)
 182ef8c:	e0bffc15 	stw	r2,-16(fp)
    SYS_ARCH_UNPROTECT(lev);
 182ef90:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182ef94:	10000126 	beq	r2,zero,182ef9c <event_callback+0x33c>
 182ef98:	1810f900 	call	1810f90 <vTaskExitCritical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 182ef9c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182efa0:	10000126 	beq	r2,zero,182efa8 <event_callback+0x348>
 182efa4:	1810f480 	call	1810f48 <vTaskEnterCritical>
    if (last_select_cb_ctr != select_cb_ctr) {
 182efa8:	d0a80a17 	ldw	r2,-24536(gp)
 182efac:	e0fffc17 	ldw	r3,-16(fp)
 182efb0:	18800126 	beq	r3,r2,182efb8 <event_callback+0x358>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 182efb4:	003f8806 	br	182edd8 <__ram_exceptions_end+0xff81eae8>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 182efb8:	e0bff917 	ldw	r2,-28(fp)
 182efbc:	10800017 	ldw	r2,0(r2)
 182efc0:	e0bff915 	stw	r2,-28(fp)
 182efc4:	e0bff917 	ldw	r2,-28(fp)
 182efc8:	103f861e 	bne	r2,zero,182ede4 <__ram_exceptions_end+0xff81eaf4>
    if (last_select_cb_ctr != select_cb_ctr) {
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 182efcc:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 182efd0:	10000926 	beq	r2,zero,182eff8 <event_callback+0x398>
 182efd4:	1810f900 	call	1810f90 <vTaskExitCritical>
 182efd8:	00000706 	br	182eff8 <event_callback+0x398>
    sock = get_socket(s);
    if (!sock) {
      return;
    }
  } else {
    return;
 182efdc:	0001883a 	nop
 182efe0:	00000506 	br	182eff8 <event_callback+0x398>
      if (conn->socket < 0) {
        if (evt == NETCONN_EVT_RCVPLUS) {
          conn->socket--;
        }
        SYS_ARCH_UNPROTECT(lev);
        return;
 182efe4:	0001883a 	nop
 182efe8:	00000306 	br	182eff8 <event_callback+0x398>
      SYS_ARCH_UNPROTECT(lev);
    }

    sock = get_socket(s);
    if (!sock) {
      return;
 182efec:	0001883a 	nop
 182eff0:	00000106 	br	182eff8 <event_callback+0x398>
  }

  if (sock->select_waiting == 0) {
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
    return;
 182eff4:	0001883a 	nop
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
}
 182eff8:	e037883a 	mov	sp,fp
 182effc:	dfc00117 	ldw	ra,4(sp)
 182f000:	df000017 	ldw	fp,0(sp)
 182f004:	dec00204 	addi	sp,sp,8
 182f008:	f800283a 	ret

0182f00c <lwip_shutdown>:
 * Unimplemented: Close one end of a full-duplex connection.
 * Currently, the full connection is closed.
 */
int
lwip_shutdown(int s, int how)
{
 182f00c:	defff904 	addi	sp,sp,-28
 182f010:	dfc00615 	stw	ra,24(sp)
 182f014:	df000515 	stw	fp,20(sp)
 182f018:	df000504 	addi	fp,sp,20
 182f01c:	e13ffe15 	stw	r4,-8(fp)
 182f020:	e17fff15 	stw	r5,-4(fp)
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
 182f024:	e03ffb05 	stb	zero,-20(fp)
 182f028:	e03ffb45 	stb	zero,-19(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
 182f02c:	e13ffe17 	ldw	r4,-8(fp)
 182f030:	182cf240 	call	182cf24 <get_socket>
 182f034:	e0bffc15 	stw	r2,-16(fp)
  if (!sock) {
 182f038:	e0bffc17 	ldw	r2,-16(fp)
 182f03c:	1000021e 	bne	r2,zero,182f048 <lwip_shutdown+0x3c>
    return -1;
 182f040:	00bfffc4 	movi	r2,-1
 182f044:	00004906 	br	182f16c <lwip_shutdown+0x160>
  }

  if (sock->conn != NULL) {
 182f048:	e0bffc17 	ldw	r2,-16(fp)
 182f04c:	10800017 	ldw	r2,0(r2)
 182f050:	10000a26 	beq	r2,zero,182f07c <lwip_shutdown+0x70>
    if (netconn_type(sock->conn) != NETCONN_TCP) {
 182f054:	e0bffc17 	ldw	r2,-16(fp)
 182f058:	10800017 	ldw	r2,0(r2)
 182f05c:	10800017 	ldw	r2,0(r2)
 182f060:	10800420 	cmpeqi	r2,r2,16
 182f064:	10000a1e 	bne	r2,zero,182f090 <lwip_shutdown+0x84>
      sock_set_errno(sock, EOPNOTSUPP);
 182f068:	e0bffc17 	ldw	r2,-16(fp)
 182f06c:	00c017c4 	movi	r3,95
 182f070:	10c00415 	stw	r3,16(r2)
      return EOPNOTSUPP;
 182f074:	008017c4 	movi	r2,95
 182f078:	00003c06 	br	182f16c <lwip_shutdown+0x160>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
 182f07c:	e0bffc17 	ldw	r2,-16(fp)
 182f080:	00c02004 	movi	r3,128
 182f084:	10c00415 	stw	r3,16(r2)
    return ENOTCONN;
 182f088:	00802004 	movi	r2,128
 182f08c:	00003706 	br	182f16c <lwip_shutdown+0x160>
  }

  if (how == SHUT_RD) {
 182f090:	e0bfff17 	ldw	r2,-4(fp)
 182f094:	1000031e 	bne	r2,zero,182f0a4 <lwip_shutdown+0x98>
    shut_rx = 1;
 182f098:	00800044 	movi	r2,1
 182f09c:	e0bffb05 	stb	r2,-20(fp)
 182f0a0:	00001306 	br	182f0f0 <lwip_shutdown+0xe4>
  } else if (how == SHUT_WR) {
 182f0a4:	e0bfff17 	ldw	r2,-4(fp)
 182f0a8:	10800058 	cmpnei	r2,r2,1
 182f0ac:	1000031e 	bne	r2,zero,182f0bc <lwip_shutdown+0xb0>
    shut_tx = 1;
 182f0b0:	00800044 	movi	r2,1
 182f0b4:	e0bffb45 	stb	r2,-19(fp)
 182f0b8:	00000d06 	br	182f0f0 <lwip_shutdown+0xe4>
  } else if(how == SHUT_RDWR) {
 182f0bc:	e0bfff17 	ldw	r2,-4(fp)
 182f0c0:	10800098 	cmpnei	r2,r2,2
 182f0c4:	1000051e 	bne	r2,zero,182f0dc <lwip_shutdown+0xd0>
    shut_rx = 1;
 182f0c8:	00800044 	movi	r2,1
 182f0cc:	e0bffb05 	stb	r2,-20(fp)
    shut_tx = 1;
 182f0d0:	00800044 	movi	r2,1
 182f0d4:	e0bffb45 	stb	r2,-19(fp)
 182f0d8:	00000506 	br	182f0f0 <lwip_shutdown+0xe4>
  } else {
    sock_set_errno(sock, EINVAL);
 182f0dc:	e0bffc17 	ldw	r2,-16(fp)
 182f0e0:	00c00584 	movi	r3,22
 182f0e4:	10c00415 	stw	r3,16(r2)
    return EINVAL;
 182f0e8:	00800584 	movi	r2,22
 182f0ec:	00001f06 	br	182f16c <lwip_shutdown+0x160>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
 182f0f0:	e0bffc17 	ldw	r2,-16(fp)
 182f0f4:	10800017 	ldw	r2,0(r2)
 182f0f8:	e0fffb03 	ldbu	r3,-20(fp)
 182f0fc:	e13ffb43 	ldbu	r4,-19(fp)
 182f100:	200d883a 	mov	r6,r4
 182f104:	180b883a 	mov	r5,r3
 182f108:	1009883a 	mov	r4,r2
 182f10c:	18397980 	call	1839798 <netconn_shutdown>
 182f110:	e0bffd05 	stb	r2,-12(fp)

  sock_set_errno(sock, err_to_errno(err));
 182f114:	e0bffd07 	ldb	r2,-12(fp)
 182f118:	0085c83a 	sub	r2,zero,r2
 182f11c:	10800428 	cmpgeui	r2,r2,16
 182f120:	1000091e 	bne	r2,zero,182f148 <lwip_shutdown+0x13c>
 182f124:	e0bffd07 	ldb	r2,-12(fp)
 182f128:	0087c83a 	sub	r3,zero,r2
 182f12c:	00806134 	movhi	r2,388
 182f130:	108b9004 	addi	r2,r2,11840
 182f134:	18c7883a 	add	r3,r3,r3
 182f138:	18c7883a 	add	r3,r3,r3
 182f13c:	10c5883a 	add	r2,r2,r3
 182f140:	10800017 	ldw	r2,0(r2)
 182f144:	00000106 	br	182f14c <lwip_shutdown+0x140>
 182f148:	00800144 	movi	r2,5
 182f14c:	e0fffc17 	ldw	r3,-16(fp)
 182f150:	18800415 	stw	r2,16(r3)
  return (err == ERR_OK ? 0 : -1);
 182f154:	e0bffd07 	ldb	r2,-12(fp)
 182f158:	1000021e 	bne	r2,zero,182f164 <lwip_shutdown+0x158>
 182f15c:	0005883a 	mov	r2,zero
 182f160:	00000106 	br	182f168 <lwip_shutdown+0x15c>
 182f164:	00bfffc4 	movi	r2,-1
 182f168:	0001883a 	nop
}
 182f16c:	e037883a 	mov	sp,fp
 182f170:	dfc00117 	ldw	ra,4(sp)
 182f174:	df000017 	ldw	fp,0(sp)
 182f178:	dec00204 	addi	sp,sp,8
 182f17c:	f800283a 	ret

0182f180 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
 182f180:	defff404 	addi	sp,sp,-48
 182f184:	dfc00b15 	stw	ra,44(sp)
 182f188:	df000a15 	stw	fp,40(sp)
 182f18c:	df000a04 	addi	fp,sp,40
 182f190:	e13ffc15 	stw	r4,-16(fp)
 182f194:	e17ffd15 	stw	r5,-12(fp)
 182f198:	e1bffe15 	stw	r6,-8(fp)
 182f19c:	3805883a 	mov	r2,r7
 182f1a0:	e0bfff05 	stb	r2,-4(fp)
  struct lwip_sock *sock;
  struct sockaddr_in sin;
  ip_addr_t naddr;

  sock = get_socket(s);
 182f1a4:	e13ffc17 	ldw	r4,-16(fp)
 182f1a8:	182cf240 	call	182cf24 <get_socket>
 182f1ac:	e0bff615 	stw	r2,-40(fp)
  if (!sock) {
 182f1b0:	e0bff617 	ldw	r2,-40(fp)
 182f1b4:	1000021e 	bne	r2,zero,182f1c0 <lwip_getaddrname+0x40>
    return -1;
 182f1b8:	00bfffc4 	movi	r2,-1
 182f1bc:	00003006 	br	182f280 <lwip_getaddrname+0x100>
  }

  memset(&sin, 0, sizeof(sin));
 182f1c0:	e0bff704 	addi	r2,fp,-36
 182f1c4:	01800404 	movi	r6,16
 182f1c8:	000b883a 	mov	r5,zero
 182f1cc:	1009883a 	mov	r4,r2
 182f1d0:	18060e00 	call	18060e0 <memset>
  sin.sin_len = sizeof(sin);
 182f1d4:	00800404 	movi	r2,16
 182f1d8:	e0bff705 	stb	r2,-36(fp)
  sin.sin_family = AF_INET;
 182f1dc:	00800084 	movi	r2,2
 182f1e0:	e0bff745 	stb	r2,-35(fp)

  /* get the IP address and port */
  netconn_getaddr(sock->conn, &naddr, &sin.sin_port, local);
 182f1e4:	e0bff617 	ldw	r2,-40(fp)
 182f1e8:	10c00017 	ldw	r3,0(r2)
 182f1ec:	e17fff03 	ldbu	r5,-4(fp)
 182f1f0:	e0bff704 	addi	r2,fp,-36
 182f1f4:	11000084 	addi	r4,r2,2
 182f1f8:	e0bffb04 	addi	r2,fp,-20
 182f1fc:	280f883a 	mov	r7,r5
 182f200:	200d883a 	mov	r6,r4
 182f204:	100b883a 	mov	r5,r2
 182f208:	1809883a 	mov	r4,r3
 182f20c:	18388040 	call	1838804 <netconn_getaddr>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", sin.sin_port));

  sin.sin_port = htons(sin.sin_port);
 182f210:	e0bff78b 	ldhu	r2,-34(fp)
 182f214:	10bfffcc 	andi	r2,r2,65535
 182f218:	1004d23a 	srli	r2,r2,8
 182f21c:	1007883a 	mov	r3,r2
 182f220:	e0bff78b 	ldhu	r2,-34(fp)
 182f224:	10bfffcc 	andi	r2,r2,65535
 182f228:	1004923a 	slli	r2,r2,8
 182f22c:	1884b03a 	or	r2,r3,r2
 182f230:	e0bff78d 	sth	r2,-34(fp)
  inet_addr_from_ipaddr(&sin.sin_addr, &naddr);
 182f234:	e0bffb17 	ldw	r2,-20(fp)
 182f238:	e0bff815 	stw	r2,-32(fp)

  if (*namelen > sizeof(sin)) {
 182f23c:	e0bffe17 	ldw	r2,-8(fp)
 182f240:	10800017 	ldw	r2,0(r2)
 182f244:	10800470 	cmpltui	r2,r2,17
 182f248:	1000031e 	bne	r2,zero,182f258 <lwip_getaddrname+0xd8>
    *namelen = sizeof(sin);
 182f24c:	e0bffe17 	ldw	r2,-8(fp)
 182f250:	00c00404 	movi	r3,16
 182f254:	10c00015 	stw	r3,0(r2)
  }

  MEMCPY(name, &sin, *namelen);
 182f258:	e0bffe17 	ldw	r2,-8(fp)
 182f25c:	10c00017 	ldw	r3,0(r2)
 182f260:	e0bff704 	addi	r2,fp,-36
 182f264:	180d883a 	mov	r6,r3
 182f268:	100b883a 	mov	r5,r2
 182f26c:	e13ffd17 	ldw	r4,-12(fp)
 182f270:	1805f980 	call	1805f98 <memcpy>
  sock_set_errno(sock, 0);
 182f274:	e0bff617 	ldw	r2,-40(fp)
 182f278:	10000415 	stw	zero,16(r2)
  return 0;
 182f27c:	0005883a 	mov	r2,zero
}
 182f280:	e037883a 	mov	sp,fp
 182f284:	dfc00117 	ldw	ra,4(sp)
 182f288:	df000017 	ldw	fp,0(sp)
 182f28c:	dec00204 	addi	sp,sp,8
 182f290:	f800283a 	ret

0182f294 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
 182f294:	defffb04 	addi	sp,sp,-20
 182f298:	dfc00415 	stw	ra,16(sp)
 182f29c:	df000315 	stw	fp,12(sp)
 182f2a0:	df000304 	addi	fp,sp,12
 182f2a4:	e13ffd15 	stw	r4,-12(fp)
 182f2a8:	e17ffe15 	stw	r5,-8(fp)
 182f2ac:	e1bfff15 	stw	r6,-4(fp)
  return lwip_getaddrname(s, name, namelen, 0);
 182f2b0:	000f883a 	mov	r7,zero
 182f2b4:	e1bfff17 	ldw	r6,-4(fp)
 182f2b8:	e17ffe17 	ldw	r5,-8(fp)
 182f2bc:	e13ffd17 	ldw	r4,-12(fp)
 182f2c0:	182f1800 	call	182f180 <lwip_getaddrname>
}
 182f2c4:	e037883a 	mov	sp,fp
 182f2c8:	dfc00117 	ldw	ra,4(sp)
 182f2cc:	df000017 	ldw	fp,0(sp)
 182f2d0:	dec00204 	addi	sp,sp,8
 182f2d4:	f800283a 	ret

0182f2d8 <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
 182f2d8:	defffb04 	addi	sp,sp,-20
 182f2dc:	dfc00415 	stw	ra,16(sp)
 182f2e0:	df000315 	stw	fp,12(sp)
 182f2e4:	df000304 	addi	fp,sp,12
 182f2e8:	e13ffd15 	stw	r4,-12(fp)
 182f2ec:	e17ffe15 	stw	r5,-8(fp)
 182f2f0:	e1bfff15 	stw	r6,-4(fp)
  return lwip_getaddrname(s, name, namelen, 1);
 182f2f4:	01c00044 	movi	r7,1
 182f2f8:	e1bfff17 	ldw	r6,-4(fp)
 182f2fc:	e17ffe17 	ldw	r5,-8(fp)
 182f300:	e13ffd17 	ldw	r4,-12(fp)
 182f304:	182f1800 	call	182f180 <lwip_getaddrname>
}
 182f308:	e037883a 	mov	sp,fp
 182f30c:	dfc00117 	ldw	ra,4(sp)
 182f310:	df000017 	ldw	fp,0(sp)
 182f314:	dec00204 	addi	sp,sp,8
 182f318:	f800283a 	ret

0182f31c <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
 182f31c:	defff204 	addi	sp,sp,-56
 182f320:	dfc00d15 	stw	ra,52(sp)
 182f324:	df000c15 	stw	fp,48(sp)
 182f328:	df000c04 	addi	fp,sp,48
 182f32c:	e13ffc15 	stw	r4,-16(fp)
 182f330:	e17ffd15 	stw	r5,-12(fp)
 182f334:	e1bffe15 	stw	r6,-8(fp)
 182f338:	e1ffff15 	stw	r7,-4(fp)
  err_t err = ERR_OK;
 182f33c:	e03ff405 	stb	zero,-48(fp)
  struct lwip_sock *sock = get_socket(s);
 182f340:	e13ffc17 	ldw	r4,-16(fp)
 182f344:	182cf240 	call	182cf24 <get_socket>
 182f348:	e0bff515 	stw	r2,-44(fp)
  struct lwip_setgetsockopt_data data;

  if (!sock) {
 182f34c:	e0bff517 	ldw	r2,-44(fp)
 182f350:	1000021e 	bne	r2,zero,182f35c <lwip_getsockopt+0x40>
    return -1;
 182f354:	00bfffc4 	movi	r2,-1
 182f358:	00009c06 	br	182f5cc <lwip_getsockopt+0x2b0>
  }

  if ((NULL == optval) || (NULL == optlen)) {
 182f35c:	e0bfff17 	ldw	r2,-4(fp)
 182f360:	10000226 	beq	r2,zero,182f36c <lwip_getsockopt+0x50>
 182f364:	e0800217 	ldw	r2,8(fp)
 182f368:	1000051e 	bne	r2,zero,182f380 <lwip_getsockopt+0x64>
    sock_set_errno(sock, EFAULT);
 182f36c:	e0bff517 	ldw	r2,-44(fp)
 182f370:	00c00384 	movi	r3,14
 182f374:	10c00415 	stw	r3,16(r2)
    return -1;
 182f378:	00bfffc4 	movi	r2,-1
 182f37c:	00009306 	br	182f5cc <lwip_getsockopt+0x2b0>
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
 182f380:	e0bffd17 	ldw	r2,-12(fp)
 182f384:	10c001a0 	cmpeqi	r3,r2,6
 182f388:	18004d1e 	bne	r3,zero,182f4c0 <lwip_getsockopt+0x1a4>
 182f38c:	10c3ffe0 	cmpeqi	r3,r2,4095
 182f390:	1800021e 	bne	r3,zero,182f39c <lwip_getsockopt+0x80>
 182f394:	10003a26 	beq	r2,zero,182f480 <lwip_getsockopt+0x164>
 182f398:	00006006 	br	182f51c <lwip_getsockopt+0x200>
   
/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182f39c:	e0bffe17 	ldw	r2,-8(fp)
 182f3a0:	10c00820 	cmpeqi	r3,r2,32
 182f3a4:	1800131e 	bne	r3,zero,182f3f4 <lwip_getsockopt+0xd8>
 182f3a8:	10c00848 	cmpgei	r3,r2,33
 182f3ac:	1800071e 	bne	r3,zero,182f3cc <lwip_getsockopt+0xb0>
 182f3b0:	10c00120 	cmpeqi	r3,r2,4
 182f3b4:	18000f1e 	bne	r3,zero,182f3f4 <lwip_getsockopt+0xd8>
 182f3b8:	10c00220 	cmpeqi	r3,r2,8
 182f3bc:	18000d1e 	bne	r3,zero,182f3f4 <lwip_getsockopt+0xd8>
 182f3c0:	108000a0 	cmpeqi	r2,r2,2
 182f3c4:	10000b1e 	bne	r2,zero,182f3f4 <lwip_getsockopt+0xd8>
 182f3c8:	00002606 	br	182f464 <lwip_getsockopt+0x148>
 182f3cc:	10c40248 	cmpgei	r3,r2,4105
 182f3d0:	1800051e 	bne	r3,zero,182f3e8 <lwip_getsockopt+0xcc>
 182f3d4:	10c40188 	cmpgei	r3,r2,4102
 182f3d8:	1800061e 	bne	r3,zero,182f3f4 <lwip_getsockopt+0xd8>
 182f3dc:	10808020 	cmpeqi	r2,r2,512
 182f3e0:	1000041e 	bne	r2,zero,182f3f4 <lwip_getsockopt+0xd8>
 182f3e4:	00001f06 	br	182f464 <lwip_getsockopt+0x148>
 182f3e8:	108402a0 	cmpeqi	r2,r2,4106
 182f3ec:	1000081e 	bne	r2,zero,182f410 <lwip_getsockopt+0xf4>
 182f3f0:	00001c06 	br	182f464 <lwip_getsockopt+0x148>
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    case SO_TYPE:
    /* UNIMPL case SO_USELOOPBACK: */
      if (*optlen < sizeof(int)) {
 182f3f4:	e0800217 	ldw	r2,8(fp)
 182f3f8:	10800017 	ldw	r2,0(r2)
 182f3fc:	10800128 	cmpgeui	r2,r2,4
 182f400:	10001b1e 	bne	r2,zero,182f470 <lwip_getsockopt+0x154>
        err = EINVAL;
 182f404:	00800584 	movi	r2,22
 182f408:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 182f40c:	00001806 	br	182f470 <lwip_getsockopt+0x154>

    case SO_NO_CHECK:
      if (*optlen < sizeof(int)) {
 182f410:	e0800217 	ldw	r2,8(fp)
 182f414:	10800017 	ldw	r2,0(r2)
 182f418:	10800128 	cmpgeui	r2,r2,4
 182f41c:	1000021e 	bne	r2,zero,182f428 <lwip_getsockopt+0x10c>
        err = EINVAL;
 182f420:	00800584 	movi	r2,22
 182f424:	e0bff405 	stb	r2,-48(fp)
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 182f428:	e0bff517 	ldw	r2,-44(fp)
 182f42c:	10800017 	ldw	r2,0(r2)
 182f430:	10800017 	ldw	r2,0(r2)
 182f434:	10800818 	cmpnei	r2,r2,32
 182f438:	1000071e 	bne	r2,zero,182f458 <lwip_getsockopt+0x13c>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
 182f43c:	e0bff517 	ldw	r2,-44(fp)
 182f440:	10800017 	ldw	r2,0(r2)
 182f444:	10800217 	ldw	r2,8(r2)
 182f448:	10800403 	ldbu	r2,16(r2)
 182f44c:	10803fcc 	andi	r2,r2,255
 182f450:	1080008c 	andi	r2,r2,2
    case SO_NO_CHECK:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 182f454:	10000826 	beq	r2,zero,182f478 <lwip_getsockopt+0x15c>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
 182f458:	00801a84 	movi	r2,106
 182f45c:	e0bff405 	stb	r2,-48(fp)
      }
#endif /* LWIP_UDP */
      break;
 182f460:	00000506 	br	182f478 <lwip_getsockopt+0x15c>

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 182f464:	00801b44 	movi	r2,109
 182f468:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182f46c:	00002d06 	br	182f524 <lwip_getsockopt+0x208>
    case SO_TYPE:
    /* UNIMPL case SO_USELOOPBACK: */
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 182f470:	0001883a 	nop
 182f474:	00002b06 	br	182f524 <lwip_getsockopt+0x208>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
      }
#endif /* LWIP_UDP */
      break;
 182f478:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182f47c:	00002906 	br	182f524 <lwip_getsockopt+0x208>
                     
/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 182f480:	e0bffe17 	ldw	r2,-8(fp)
 182f484:	10bfffc4 	addi	r2,r2,-1
 182f488:	108000a8 	cmpgeui	r2,r2,2
 182f48c:	1000071e 	bne	r2,zero,182f4ac <lwip_getsockopt+0x190>
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (*optlen < sizeof(int)) {
 182f490:	e0800217 	ldw	r2,8(fp)
 182f494:	10800017 	ldw	r2,0(r2)
 182f498:	10800128 	cmpgeui	r2,r2,4
 182f49c:	1000061e 	bne	r2,zero,182f4b8 <lwip_getsockopt+0x19c>
        err = EINVAL;
 182f4a0:	00800584 	movi	r2,22
 182f4a4:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 182f4a8:	00000306 	br	182f4b8 <lwip_getsockopt+0x19c>
#endif /* LWIP_IGMP */

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 182f4ac:	00801b44 	movi	r2,109
 182f4b0:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182f4b4:	00001b06 	br	182f524 <lwip_getsockopt+0x208>
    case IP_TTL:
    case IP_TOS:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 182f4b8:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182f4bc:	00001906 	br	182f524 <lwip_getsockopt+0x208>
         
#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (*optlen < sizeof(int)) {
 182f4c0:	e0800217 	ldw	r2,8(fp)
 182f4c4:	10800017 	ldw	r2,0(r2)
 182f4c8:	10800128 	cmpgeui	r2,r2,4
 182f4cc:	1000031e 	bne	r2,zero,182f4dc <lwip_getsockopt+0x1c0>
      err = EINVAL;
 182f4d0:	00800584 	movi	r2,22
 182f4d4:	e0bff405 	stb	r2,-48(fp)
      break;
 182f4d8:	00001206 	br	182f524 <lwip_getsockopt+0x208>
    }
    
    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
 182f4dc:	e0bff517 	ldw	r2,-44(fp)
 182f4e0:	10800017 	ldw	r2,0(r2)
 182f4e4:	10800017 	ldw	r2,0(r2)
 182f4e8:	10800420 	cmpeqi	r2,r2,16
 182f4ec:	1000021e 	bne	r2,zero,182f4f8 <lwip_getsockopt+0x1dc>
      return 0;
 182f4f0:	0005883a 	mov	r2,zero
 182f4f4:	00003506 	br	182f5cc <lwip_getsockopt+0x2b0>

    switch (optname) {
 182f4f8:	e0bffe17 	ldw	r2,-8(fp)
 182f4fc:	10bfffc4 	addi	r2,r2,-1
 182f500:	10800168 	cmpgeui	r2,r2,5
 182f504:	10000326 	beq	r2,zero,182f514 <lwip_getsockopt+0x1f8>
      break;
       
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 182f508:	00801b44 	movi	r2,109
 182f50c:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182f510:	00000406 	br	182f524 <lwip_getsockopt+0x208>
#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
    case TCP_KEEPINTVL:
    case TCP_KEEPCNT:
#endif /* LWIP_TCP_KEEPALIVE */
      break;
 182f514:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182f518:	00000206 	br	182f524 <lwip_getsockopt+0x208>
#endif /* LWIP_UDP && LWIP_UDPLITE*/
/* UNDEFINED LEVEL */
  default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 182f51c:	00801b44 	movi	r2,109
 182f520:	e0bff405 	stb	r2,-48(fp)
  }  /* switch */

   
  if (err != ERR_OK) {
 182f524:	e0bff407 	ldb	r2,-48(fp)
 182f528:	10000526 	beq	r2,zero,182f540 <lwip_getsockopt+0x224>
    sock_set_errno(sock, err);
 182f52c:	e0fff407 	ldb	r3,-48(fp)
 182f530:	e0bff517 	ldw	r2,-44(fp)
 182f534:	10c00415 	stw	r3,16(r2)
    return -1;
 182f538:	00bfffc4 	movi	r2,-1
 182f53c:	00002306 	br	182f5cc <lwip_getsockopt+0x2b0>
  }

  /* Now do the actual option processing */
  data.sock = sock;
 182f540:	e0bff517 	ldw	r2,-44(fp)
 182f544:	e0bff615 	stw	r2,-40(fp)
#ifdef LWIP_DEBUG
  data.s = s;
#endif /* LWIP_DEBUG */
  data.level = level;
 182f548:	e0bffd17 	ldw	r2,-12(fp)
 182f54c:	e0bff715 	stw	r2,-36(fp)
  data.optname = optname;
 182f550:	e0bffe17 	ldw	r2,-8(fp)
 182f554:	e0bff815 	stw	r2,-32(fp)
  data.optval = optval;
 182f558:	e0bfff17 	ldw	r2,-4(fp)
 182f55c:	e0bff915 	stw	r2,-28(fp)
  data.optlen = optlen;
 182f560:	e0800217 	ldw	r2,8(fp)
 182f564:	e0bffa15 	stw	r2,-24(fp)
  data.err = err;
 182f568:	e0bff403 	ldbu	r2,-48(fp)
 182f56c:	e0bffb05 	stb	r2,-20(fp)
  tcpip_callback(lwip_getsockopt_internal, &data);
 182f570:	e0bff604 	addi	r2,fp,-40
 182f574:	01800044 	movi	r6,1
 182f578:	100b883a 	mov	r5,r2
 182f57c:	010060f4 	movhi	r4,387
 182f580:	213d7804 	addi	r4,r4,-2592
 182f584:	18303fc0 	call	18303fc <tcpip_callback_with_block>
  sys_arch_sem_wait(&sock->conn->op_completed, 0);
 182f588:	e0bff517 	ldw	r2,-44(fp)
 182f58c:	10800017 	ldw	r2,0(r2)
 182f590:	10800404 	addi	r2,r2,16
 182f594:	000b883a 	mov	r5,zero
 182f598:	1009883a 	mov	r4,r2
 182f59c:	18150140 	call	1815014 <sys_arch_sem_wait>
  /* maybe lwip_getsockopt_internal has changed err */
  err = data.err;
 182f5a0:	e0bffb03 	ldbu	r2,-20(fp)
 182f5a4:	e0bff405 	stb	r2,-48(fp)

  sock_set_errno(sock, err);
 182f5a8:	e0fff407 	ldb	r3,-48(fp)
 182f5ac:	e0bff517 	ldw	r2,-44(fp)
 182f5b0:	10c00415 	stw	r3,16(r2)
  return err ? -1 : 0;
 182f5b4:	e0bff407 	ldb	r2,-48(fp)
 182f5b8:	10000226 	beq	r2,zero,182f5c4 <lwip_getsockopt+0x2a8>
 182f5bc:	00bfffc4 	movi	r2,-1
 182f5c0:	00000206 	br	182f5cc <lwip_getsockopt+0x2b0>
 182f5c4:	0005883a 	mov	r2,zero
 182f5c8:	0001883a 	nop
}
 182f5cc:	e037883a 	mov	sp,fp
 182f5d0:	dfc00117 	ldw	ra,4(sp)
 182f5d4:	df000017 	ldw	fp,0(sp)
 182f5d8:	dec00204 	addi	sp,sp,8
 182f5dc:	f800283a 	ret

0182f5e0 <lwip_getsockopt_internal>:

static void
lwip_getsockopt_internal(void *arg)
{
 182f5e0:	defff804 	addi	sp,sp,-32
 182f5e4:	dfc00715 	stw	ra,28(sp)
 182f5e8:	df000615 	stw	fp,24(sp)
 182f5ec:	df000604 	addi	fp,sp,24
 182f5f0:	e13fff15 	stw	r4,-4(fp)
  void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);

  data = (struct lwip_setgetsockopt_data*)arg;
 182f5f4:	e0bfff17 	ldw	r2,-4(fp)
 182f5f8:	e0bffa15 	stw	r2,-24(fp)
  sock = data->sock;
 182f5fc:	e0bffa17 	ldw	r2,-24(fp)
 182f600:	10800017 	ldw	r2,0(r2)
 182f604:	e0bffb15 	stw	r2,-20(fp)
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
 182f608:	e0bffa17 	ldw	r2,-24(fp)
 182f60c:	10800117 	ldw	r2,4(r2)
 182f610:	e0bffc15 	stw	r2,-16(fp)
  optname = data->optname;
 182f614:	e0bffa17 	ldw	r2,-24(fp)
 182f618:	10800217 	ldw	r2,8(r2)
 182f61c:	e0bffd15 	stw	r2,-12(fp)
  optval = data->optval;
 182f620:	e0bffa17 	ldw	r2,-24(fp)
 182f624:	10800317 	ldw	r2,12(r2)
 182f628:	e0bffe15 	stw	r2,-8(fp)

  switch (level) {
 182f62c:	e0bffc17 	ldw	r2,-16(fp)
 182f630:	10c001a0 	cmpeqi	r3,r2,6
 182f634:	18009b1e 	bne	r3,zero,182f8a4 <lwip_getsockopt_internal+0x2c4>
 182f638:	10c3ffe0 	cmpeqi	r3,r2,4095
 182f63c:	1800021e 	bne	r3,zero,182f648 <lwip_getsockopt_internal+0x68>
 182f640:	10008126 	beq	r2,zero,182f848 <lwip_getsockopt_internal+0x268>
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
 182f644:	0000da06 	br	182f9b0 <lwip_getsockopt_internal+0x3d0>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182f648:	e0bffd17 	ldw	r2,-12(fp)
 182f64c:	10c08020 	cmpeqi	r3,r2,512
 182f650:	18001a1e 	bne	r3,zero,182f6bc <lwip_getsockopt_internal+0xdc>
 182f654:	10c08048 	cmpgei	r3,r2,513
 182f658:	18000c1e 	bne	r3,zero,182f68c <lwip_getsockopt_internal+0xac>
 182f65c:	10c00120 	cmpeqi	r3,r2,4
 182f660:	1800161e 	bne	r3,zero,182f6bc <lwip_getsockopt_internal+0xdc>
 182f664:	10c00148 	cmpgei	r3,r2,5
 182f668:	1800031e 	bne	r3,zero,182f678 <lwip_getsockopt_internal+0x98>
 182f66c:	108000a0 	cmpeqi	r2,r2,2
 182f670:	1000121e 	bne	r2,zero,182f6bc <lwip_getsockopt_internal+0xdc>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182f674:	00007306 	br	182f844 <lwip_getsockopt_internal+0x264>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182f678:	10c00220 	cmpeqi	r3,r2,8
 182f67c:	18000f1e 	bne	r3,zero,182f6bc <lwip_getsockopt_internal+0xdc>
 182f680:	10800820 	cmpeqi	r2,r2,32
 182f684:	10000d1e 	bne	r2,zero,182f6bc <lwip_getsockopt_internal+0xdc>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182f688:	00006e06 	br	182f844 <lwip_getsockopt_internal+0x264>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182f68c:	10c401e0 	cmpeqi	r3,r2,4103
 182f690:	1800331e 	bne	r3,zero,182f760 <lwip_getsockopt_internal+0x180>
 182f694:	10c40208 	cmpgei	r3,r2,4104
 182f698:	1800031e 	bne	r3,zero,182f6a8 <lwip_getsockopt_internal+0xc8>
 182f69c:	108401a0 	cmpeqi	r2,r2,4102
 182f6a0:	1000571e 	bne	r2,zero,182f800 <lwip_getsockopt_internal+0x220>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182f6a4:	00006706 	br	182f844 <lwip_getsockopt_internal+0x264>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182f6a8:	10c40220 	cmpeqi	r3,r2,4104
 182f6ac:	18000d1e 	bne	r3,zero,182f6e4 <lwip_getsockopt_internal+0x104>
 182f6b0:	108402a0 	cmpeqi	r2,r2,4106
 182f6b4:	1000581e 	bne	r2,zero,182f818 <lwip_getsockopt_internal+0x238>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182f6b8:	00006206 	br	182f844 <lwip_getsockopt_internal+0x264>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /*case SO_USELOOPBACK: UNIMPL */
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
 182f6bc:	e0bffb17 	ldw	r2,-20(fp)
 182f6c0:	10800017 	ldw	r2,0(r2)
 182f6c4:	10800217 	ldw	r2,8(r2)
 182f6c8:	10800203 	ldbu	r2,8(r2)
 182f6cc:	10c03fcc 	andi	r3,r2,255
 182f6d0:	e0bffd17 	ldw	r2,-12(fp)
 182f6d4:	1886703a 	and	r3,r3,r2
 182f6d8:	e0bffe17 	ldw	r2,-8(fp)
 182f6dc:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
 182f6e0:	00005806 	br	182f844 <lwip_getsockopt_internal+0x264>

    case SO_TYPE:
      switch (NETCONNTYPE_GROUP(sock->conn->type)) {
 182f6e4:	e0bffb17 	ldw	r2,-20(fp)
 182f6e8:	10800017 	ldw	r2,0(r2)
 182f6ec:	10800017 	ldw	r2,0(r2)
 182f6f0:	10803c0c 	andi	r2,r2,240
 182f6f4:	10c00820 	cmpeqi	r3,r2,32
 182f6f8:	18000d1e 	bne	r3,zero,182f730 <lwip_getsockopt_internal+0x150>
 182f6fc:	10c01020 	cmpeqi	r3,r2,64
 182f700:	1800031e 	bne	r3,zero,182f710 <lwip_getsockopt_internal+0x130>
 182f704:	10800420 	cmpeqi	r2,r2,16
 182f708:	1000051e 	bne	r2,zero,182f720 <lwip_getsockopt_internal+0x140>
 182f70c:	00000c06 	br	182f740 <lwip_getsockopt_internal+0x160>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
 182f710:	e0bffe17 	ldw	r2,-8(fp)
 182f714:	00c000c4 	movi	r3,3
 182f718:	10c00015 	stw	r3,0(r2)
        break;
 182f71c:	00000f06 	br	182f75c <lwip_getsockopt_internal+0x17c>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
 182f720:	e0bffe17 	ldw	r2,-8(fp)
 182f724:	00c00044 	movi	r3,1
 182f728:	10c00015 	stw	r3,0(r2)
        break;
 182f72c:	00000b06 	br	182f75c <lwip_getsockopt_internal+0x17c>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
 182f730:	e0bffe17 	ldw	r2,-8(fp)
 182f734:	00c00084 	movi	r3,2
 182f738:	10c00015 	stw	r3,0(r2)
        break;
 182f73c:	00000706 	br	182f75c <lwip_getsockopt_internal+0x17c>
      default: /* unrecognized socket type */
        *(int*)optval = sock->conn->type;
 182f740:	e0bffb17 	ldw	r2,-20(fp)
 182f744:	10800017 	ldw	r2,0(r2)
 182f748:	10800017 	ldw	r2,0(r2)
 182f74c:	1007883a 	mov	r3,r2
 182f750:	e0bffe17 	ldw	r2,-8(fp)
 182f754:	10c00015 	stw	r3,0(r2)
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (sock->conn->type) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
 182f758:	00003a06 	br	182f844 <lwip_getsockopt_internal+0x264>
 182f75c:	00003906 	br	182f844 <lwip_getsockopt_internal+0x264>

    case SO_ERROR:
      /* only overwrite ERR_OK or tempoary errors */
      if ((sock->err == 0) || (sock->err == EINPROGRESS)) {
 182f760:	e0bffb17 	ldw	r2,-20(fp)
 182f764:	10800417 	ldw	r2,16(r2)
 182f768:	10000426 	beq	r2,zero,182f77c <lwip_getsockopt_internal+0x19c>
 182f76c:	e0bffb17 	ldw	r2,-20(fp)
 182f770:	10800417 	ldw	r2,16(r2)
 182f774:	10801dd8 	cmpnei	r2,r2,119
 182f778:	10001a1e 	bne	r2,zero,182f7e4 <lwip_getsockopt_internal+0x204>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
 182f77c:	e0bffb17 	ldw	r2,-20(fp)
 182f780:	10800017 	ldw	r2,0(r2)
 182f784:	10800303 	ldbu	r2,12(r2)
 182f788:	10803fcc 	andi	r2,r2,255
 182f78c:	1080201c 	xori	r2,r2,128
 182f790:	10bfe004 	addi	r2,r2,-128
 182f794:	0085c83a 	sub	r2,zero,r2
 182f798:	10800428 	cmpgeui	r2,r2,16
 182f79c:	10000e1e 	bne	r2,zero,182f7d8 <lwip_getsockopt_internal+0x1f8>
 182f7a0:	e0bffb17 	ldw	r2,-20(fp)
 182f7a4:	10800017 	ldw	r2,0(r2)
 182f7a8:	10800303 	ldbu	r2,12(r2)
 182f7ac:	10803fcc 	andi	r2,r2,255
 182f7b0:	1080201c 	xori	r2,r2,128
 182f7b4:	10bfe004 	addi	r2,r2,-128
 182f7b8:	0087c83a 	sub	r3,zero,r2
 182f7bc:	00806134 	movhi	r2,388
 182f7c0:	108b9004 	addi	r2,r2,11840
 182f7c4:	18c7883a 	add	r3,r3,r3
 182f7c8:	18c7883a 	add	r3,r3,r3
 182f7cc:	10c5883a 	add	r2,r2,r3
 182f7d0:	10800017 	ldw	r2,0(r2)
 182f7d4:	00000106 	br	182f7dc <lwip_getsockopt_internal+0x1fc>
 182f7d8:	00800144 	movi	r2,5
 182f7dc:	e0fffb17 	ldw	r3,-20(fp)
 182f7e0:	18800415 	stw	r2,16(r3)
      } 
      *(int *)optval = sock->err;
 182f7e4:	e0bffb17 	ldw	r2,-20(fp)
 182f7e8:	10c00417 	ldw	r3,16(r2)
 182f7ec:	e0bffe17 	ldw	r2,-8(fp)
 182f7f0:	10c00015 	stw	r3,0(r2)
      sock->err = 0;
 182f7f4:	e0bffb17 	ldw	r2,-20(fp)
 182f7f8:	10000415 	stw	zero,16(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
 182f7fc:	00001106 	br	182f844 <lwip_getsockopt_internal+0x264>
      *(int *)optval = netconn_get_sendtimeout(sock->conn);
      break;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      *(int *)optval = netconn_get_recvtimeout(sock->conn);
 182f800:	e0bffb17 	ldw	r2,-20(fp)
 182f804:	10800017 	ldw	r2,0(r2)
 182f808:	10c00817 	ldw	r3,32(r2)
 182f80c:	e0bffe17 	ldw	r2,-8(fp)
 182f810:	10c00015 	stw	r3,0(r2)
      break;
 182f814:	00000b06 	br	182f844 <lwip_getsockopt_internal+0x264>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
 182f818:	e0bffb17 	ldw	r2,-20(fp)
 182f81c:	10800017 	ldw	r2,0(r2)
 182f820:	10800217 	ldw	r2,8(r2)
 182f824:	10800403 	ldbu	r2,16(r2)
 182f828:	10803fcc 	andi	r2,r2,255
 182f82c:	1080004c 	andi	r2,r2,1
 182f830:	1004c03a 	cmpne	r2,r2,zero
 182f834:	10c03fcc 	andi	r3,r2,255
 182f838:	e0bffe17 	ldw	r2,-8(fp)
 182f83c:	10c00015 	stw	r3,0(r2)
      break;
 182f840:	0001883a 	nop
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 182f844:	00005a06 	br	182f9b0 <lwip_getsockopt_internal+0x3d0>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 182f848:	e0bffd17 	ldw	r2,-12(fp)
 182f84c:	10c00060 	cmpeqi	r3,r2,1
 182f850:	18000b1e 	bne	r3,zero,182f880 <lwip_getsockopt_internal+0x2a0>
 182f854:	108000a0 	cmpeqi	r2,r2,2
 182f858:	1000011e 	bne	r2,zero,182f860 <lwip_getsockopt_internal+0x280>
                  s, *(int *)optval));
      break;
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182f85c:	00001006 	br	182f8a0 <lwip_getsockopt_internal+0x2c0>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    case IP_TTL:
      *(int*)optval = sock->conn->pcb.ip->ttl;
 182f860:	e0bffb17 	ldw	r2,-20(fp)
 182f864:	10800017 	ldw	r2,0(r2)
 182f868:	10800217 	ldw	r2,8(r2)
 182f86c:	10800283 	ldbu	r2,10(r2)
 182f870:	10c03fcc 	andi	r3,r2,255
 182f874:	e0bffe17 	ldw	r2,-8(fp)
 182f878:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
 182f87c:	00000806 	br	182f8a0 <lwip_getsockopt_internal+0x2c0>
    case IP_TOS:
      *(int*)optval = sock->conn->pcb.ip->tos;
 182f880:	e0bffb17 	ldw	r2,-20(fp)
 182f884:	10800017 	ldw	r2,0(r2)
 182f888:	10800217 	ldw	r2,8(r2)
 182f88c:	10800243 	ldbu	r2,9(r2)
 182f890:	10c03fcc 	andi	r3,r2,255
 182f894:	e0bffe17 	ldw	r2,-8(fp)
 182f898:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
 182f89c:	0001883a 	nop
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 182f8a0:	00004306 	br	182f9b0 <lwip_getsockopt_internal+0x3d0>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
 182f8a4:	e0bffd17 	ldw	r2,-12(fp)
 182f8a8:	108001a8 	cmpgeui	r2,r2,6
 182f8ac:	10003e1e 	bne	r2,zero,182f9a8 <lwip_getsockopt_internal+0x3c8>
 182f8b0:	e0bffd17 	ldw	r2,-12(fp)
 182f8b4:	100690ba 	slli	r3,r2,2
 182f8b8:	008060f4 	movhi	r2,387
 182f8bc:	10be3304 	addi	r2,r2,-1844
 182f8c0:	1885883a 	add	r2,r3,r2
 182f8c4:	10800017 	ldw	r2,0(r2)
 182f8c8:	1000683a 	jmp	r2
 182f8cc:	0182f9a8 	cmpgeui	r6,zero,3046
 182f8d0:	0182f8e4 	muli	r6,zero,3043
 182f8d4:	0182f910 	cmplti	r6,zero,3044
 182f8d8:	0182f930 	cmpltui	r6,zero,3044
 182f8dc:	0182f95c 	xori	r6,zero,3045
 182f8e0:	0182f988 	cmpgei	r6,zero,3046
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
 182f8e4:	e0bffb17 	ldw	r2,-20(fp)
 182f8e8:	10800017 	ldw	r2,0(r2)
 182f8ec:	10800217 	ldw	r2,8(r2)
 182f8f0:	10800883 	ldbu	r2,34(r2)
 182f8f4:	10803fcc 	andi	r2,r2,255
 182f8f8:	1080100c 	andi	r2,r2,64
 182f8fc:	1004c03a 	cmpne	r2,r2,zero
 182f900:	10c03fcc 	andi	r3,r2,255
 182f904:	e0bffe17 	ldw	r2,-8(fp)
 182f908:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
 182f90c:	00002706 	br	182f9ac <lwip_getsockopt_internal+0x3cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
 182f910:	e0bffb17 	ldw	r2,-20(fp)
 182f914:	10800017 	ldw	r2,0(r2)
 182f918:	10800217 	ldw	r2,8(r2)
 182f91c:	10802517 	ldw	r2,148(r2)
 182f920:	1007883a 	mov	r3,r2
 182f924:	e0bffe17 	ldw	r2,-8(fp)
 182f928:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
 182f92c:	00001f06 	br	182f9ac <lwip_getsockopt_internal+0x3cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
 182f930:	e0bffb17 	ldw	r2,-20(fp)
 182f934:	10800017 	ldw	r2,0(r2)
 182f938:	10800217 	ldw	r2,8(r2)
 182f93c:	10802517 	ldw	r2,148(r2)
 182f940:	0140fa04 	movi	r5,1000
 182f944:	1009883a 	mov	r4,r2
 182f948:	180ac1c0 	call	180ac1c <__udivsi3>
 182f94c:	1007883a 	mov	r3,r2
 182f950:	e0bffe17 	ldw	r2,-8(fp)
 182f954:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
 182f958:	00001406 	br	182f9ac <lwip_getsockopt_internal+0x3cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
 182f95c:	e0bffb17 	ldw	r2,-20(fp)
 182f960:	10800017 	ldw	r2,0(r2)
 182f964:	10800217 	ldw	r2,8(r2)
 182f968:	10802617 	ldw	r2,152(r2)
 182f96c:	0140fa04 	movi	r5,1000
 182f970:	1009883a 	mov	r4,r2
 182f974:	180ac1c0 	call	180ac1c <__udivsi3>
 182f978:	1007883a 	mov	r3,r2
 182f97c:	e0bffe17 	ldw	r2,-8(fp)
 182f980:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
 182f984:	00000906 	br	182f9ac <lwip_getsockopt_internal+0x3cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
 182f988:	e0bffb17 	ldw	r2,-20(fp)
 182f98c:	10800017 	ldw	r2,0(r2)
 182f990:	10800217 	ldw	r2,8(r2)
 182f994:	10802717 	ldw	r2,156(r2)
 182f998:	1007883a 	mov	r3,r2
 182f99c:	e0bffe17 	ldw	r2,-8(fp)
 182f9a0:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
 182f9a4:	00000106 	br	182f9ac <lwip_getsockopt_internal+0x3cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182f9a8:	0001883a 	nop
    }  /* switch (optname) */
    break;
 182f9ac:	0001883a 	nop
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
  } /* switch (level) */
  sys_sem_signal(&sock->conn->op_completed);
 182f9b0:	e0bffb17 	ldw	r2,-20(fp)
 182f9b4:	10800017 	ldw	r2,0(r2)
 182f9b8:	10800404 	addi	r2,r2,16
 182f9bc:	1009883a 	mov	r4,r2
 182f9c0:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 182f9c4:	0001883a 	nop
 182f9c8:	e037883a 	mov	sp,fp
 182f9cc:	dfc00117 	ldw	ra,4(sp)
 182f9d0:	df000017 	ldw	fp,0(sp)
 182f9d4:	dec00204 	addi	sp,sp,8
 182f9d8:	f800283a 	ret

0182f9dc <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 182f9dc:	defff204 	addi	sp,sp,-56
 182f9e0:	dfc00d15 	stw	ra,52(sp)
 182f9e4:	df000c15 	stw	fp,48(sp)
 182f9e8:	df000c04 	addi	fp,sp,48
 182f9ec:	e13ffc15 	stw	r4,-16(fp)
 182f9f0:	e17ffd15 	stw	r5,-12(fp)
 182f9f4:	e1bffe15 	stw	r6,-8(fp)
 182f9f8:	e1ffff15 	stw	r7,-4(fp)
  struct lwip_sock *sock = get_socket(s);
 182f9fc:	e13ffc17 	ldw	r4,-16(fp)
 182fa00:	182cf240 	call	182cf24 <get_socket>
 182fa04:	e0bff515 	stw	r2,-44(fp)
  err_t err = ERR_OK;
 182fa08:	e03ff405 	stb	zero,-48(fp)
  struct lwip_setgetsockopt_data data;

  if (!sock) {
 182fa0c:	e0bff517 	ldw	r2,-44(fp)
 182fa10:	1000021e 	bne	r2,zero,182fa1c <lwip_setsockopt+0x40>
    return -1;
 182fa14:	00bfffc4 	movi	r2,-1
 182fa18:	00009006 	br	182fc5c <lwip_setsockopt+0x280>
  }

  if (NULL == optval) {
 182fa1c:	e0bfff17 	ldw	r2,-4(fp)
 182fa20:	1000051e 	bne	r2,zero,182fa38 <lwip_setsockopt+0x5c>
    sock_set_errno(sock, EFAULT);
 182fa24:	e0bff517 	ldw	r2,-44(fp)
 182fa28:	00c00384 	movi	r3,14
 182fa2c:	10c00415 	stw	r3,16(r2)
    return -1;
 182fa30:	00bfffc4 	movi	r2,-1
 182fa34:	00008906 	br	182fc5c <lwip_setsockopt+0x280>
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
 182fa38:	e0bffd17 	ldw	r2,-12(fp)
 182fa3c:	10c001a0 	cmpeqi	r3,r2,6
 182fa40:	1800441e 	bne	r3,zero,182fb54 <lwip_setsockopt+0x178>
 182fa44:	10c3ffe0 	cmpeqi	r3,r2,4095
 182fa48:	1800021e 	bne	r3,zero,182fa54 <lwip_setsockopt+0x78>
 182fa4c:	10003226 	beq	r2,zero,182fb18 <lwip_setsockopt+0x13c>
 182fa50:	00005606 	br	182fbac <lwip_setsockopt+0x1d0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182fa54:	e0bffe17 	ldw	r2,-8(fp)
 182fa58:	10c00820 	cmpeqi	r3,r2,32
 182fa5c:	18000d1e 	bne	r3,zero,182fa94 <lwip_setsockopt+0xb8>
 182fa60:	10c00848 	cmpgei	r3,r2,33
 182fa64:	1800051e 	bne	r3,zero,182fa7c <lwip_setsockopt+0xa0>
 182fa68:	10c00120 	cmpeqi	r3,r2,4
 182fa6c:	1800091e 	bne	r3,zero,182fa94 <lwip_setsockopt+0xb8>
 182fa70:	10800220 	cmpeqi	r2,r2,8
 182fa74:	1000071e 	bne	r2,zero,182fa94 <lwip_setsockopt+0xb8>
 182fa78:	00002006 	br	182fafc <lwip_setsockopt+0x120>
 182fa7c:	10c401a0 	cmpeqi	r3,r2,4102
 182fa80:	1800041e 	bne	r3,zero,182fa94 <lwip_setsockopt+0xb8>
 182fa84:	10c402a0 	cmpeqi	r3,r2,4106
 182fa88:	1800081e 	bne	r3,zero,182faac <lwip_setsockopt+0xd0>
 182fa8c:	10808020 	cmpeqi	r2,r2,512
 182fa90:	10001a26 	beq	r2,zero,182fafc <lwip_setsockopt+0x120>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (optlen < sizeof(int)) {
 182fa94:	e0800217 	ldw	r2,8(fp)
 182fa98:	10800128 	cmpgeui	r2,r2,4
 182fa9c:	10001a1e 	bne	r2,zero,182fb08 <lwip_setsockopt+0x12c>
        err = EINVAL;
 182faa0:	00800584 	movi	r2,22
 182faa4:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 182faa8:	00001706 	br	182fb08 <lwip_setsockopt+0x12c>
    case SO_NO_CHECK:
      if (optlen < sizeof(int)) {
 182faac:	e0800217 	ldw	r2,8(fp)
 182fab0:	10800128 	cmpgeui	r2,r2,4
 182fab4:	1000021e 	bne	r2,zero,182fac0 <lwip_setsockopt+0xe4>
        err = EINVAL;
 182fab8:	00800584 	movi	r2,22
 182fabc:	e0bff405 	stb	r2,-48(fp)
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 182fac0:	e0bff517 	ldw	r2,-44(fp)
 182fac4:	10800017 	ldw	r2,0(r2)
 182fac8:	10800017 	ldw	r2,0(r2)
 182facc:	10800818 	cmpnei	r2,r2,32
 182fad0:	1000071e 	bne	r2,zero,182faf0 <lwip_setsockopt+0x114>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
 182fad4:	e0bff517 	ldw	r2,-44(fp)
 182fad8:	10800017 	ldw	r2,0(r2)
 182fadc:	10800217 	ldw	r2,8(r2)
 182fae0:	10800403 	ldbu	r2,16(r2)
 182fae4:	10803fcc 	andi	r2,r2,255
 182fae8:	1080008c 	andi	r2,r2,2
    case SO_NO_CHECK:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 182faec:	10000826 	beq	r2,zero,182fb10 <lwip_setsockopt+0x134>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
 182faf0:	00801a84 	movi	r2,106
 182faf4:	e0bff405 	stb	r2,-48(fp)
      }
#endif /* LWIP_UDP */
      break;
 182faf8:	00000506 	br	182fb10 <lwip_setsockopt+0x134>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
 182fafc:	00801b44 	movi	r2,109
 182fb00:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182fb04:	00002b06 	br	182fbb4 <lwip_setsockopt+0x1d8>
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 182fb08:	0001883a 	nop
 182fb0c:	00002906 	br	182fbb4 <lwip_setsockopt+0x1d8>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
      }
#endif /* LWIP_UDP */
      break;
 182fb10:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182fb14:	00002706 	br	182fbb4 <lwip_setsockopt+0x1d8>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 182fb18:	e0bffe17 	ldw	r2,-8(fp)
 182fb1c:	10bfffc4 	addi	r2,r2,-1
 182fb20:	108000a8 	cmpgeui	r2,r2,2
 182fb24:	1000061e 	bne	r2,zero,182fb40 <lwip_setsockopt+0x164>
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (optlen < sizeof(int)) {
 182fb28:	e0800217 	ldw	r2,8(fp)
 182fb2c:	10800128 	cmpgeui	r2,r2,4
 182fb30:	1000061e 	bne	r2,zero,182fb4c <lwip_setsockopt+0x170>
        err = EINVAL;
 182fb34:	00800584 	movi	r2,22
 182fb38:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 182fb3c:	00000306 	br	182fb4c <lwip_setsockopt+0x170>
      break;
#endif /* LWIP_IGMP */
      default:
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                    s, optname));
        err = ENOPROTOOPT;
 182fb40:	00801b44 	movi	r2,109
 182fb44:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182fb48:	00001a06 	br	182fbb4 <lwip_setsockopt+0x1d8>
    case IP_TTL:
    case IP_TOS:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 182fb4c:	0001883a 	nop
      default:
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                    s, optname));
        err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182fb50:	00001806 	br	182fbb4 <lwip_setsockopt+0x1d8>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (optlen < sizeof(int)) {
 182fb54:	e0800217 	ldw	r2,8(fp)
 182fb58:	10800128 	cmpgeui	r2,r2,4
 182fb5c:	1000031e 	bne	r2,zero,182fb6c <lwip_setsockopt+0x190>
      err = EINVAL;
 182fb60:	00800584 	movi	r2,22
 182fb64:	e0bff405 	stb	r2,-48(fp)
      break;
 182fb68:	00001206 	br	182fbb4 <lwip_setsockopt+0x1d8>
    }

    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
 182fb6c:	e0bff517 	ldw	r2,-44(fp)
 182fb70:	10800017 	ldw	r2,0(r2)
 182fb74:	10800017 	ldw	r2,0(r2)
 182fb78:	10800420 	cmpeqi	r2,r2,16
 182fb7c:	1000021e 	bne	r2,zero,182fb88 <lwip_setsockopt+0x1ac>
      return 0;
 182fb80:	0005883a 	mov	r2,zero
 182fb84:	00003506 	br	182fc5c <lwip_setsockopt+0x280>

    switch (optname) {
 182fb88:	e0bffe17 	ldw	r2,-8(fp)
 182fb8c:	10bfffc4 	addi	r2,r2,-1
 182fb90:	10800168 	cmpgeui	r2,r2,5
 182fb94:	10000326 	beq	r2,zero,182fba4 <lwip_setsockopt+0x1c8>
      break;

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
 182fb98:	00801b44 	movi	r2,109
 182fb9c:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182fba0:	00000406 	br	182fbb4 <lwip_setsockopt+0x1d8>
#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
    case TCP_KEEPINTVL:
    case TCP_KEEPCNT:
#endif /* LWIP_TCP_KEEPALIVE */
      break;
 182fba4:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182fba8:	00000206 	br	182fbb4 <lwip_setsockopt+0x1d8>
#endif /* LWIP_UDP && LWIP_UDPLITE */
/* UNDEFINED LEVEL */
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
 182fbac:	00801b44 	movi	r2,109
 182fbb0:	e0bff405 	stb	r2,-48(fp)
  }  /* switch (level) */


  if (err != ERR_OK) {
 182fbb4:	e0bff407 	ldb	r2,-48(fp)
 182fbb8:	10000526 	beq	r2,zero,182fbd0 <lwip_setsockopt+0x1f4>
    sock_set_errno(sock, err);
 182fbbc:	e0fff407 	ldb	r3,-48(fp)
 182fbc0:	e0bff517 	ldw	r2,-44(fp)
 182fbc4:	10c00415 	stw	r3,16(r2)
    return -1;
 182fbc8:	00bfffc4 	movi	r2,-1
 182fbcc:	00002306 	br	182fc5c <lwip_setsockopt+0x280>
  }


  /* Now do the actual option processing */
  data.sock = sock;
 182fbd0:	e0bff517 	ldw	r2,-44(fp)
 182fbd4:	e0bff615 	stw	r2,-40(fp)
#ifdef LWIP_DEBUG
  data.s = s;
#endif /* LWIP_DEBUG */
  data.level = level;
 182fbd8:	e0bffd17 	ldw	r2,-12(fp)
 182fbdc:	e0bff715 	stw	r2,-36(fp)
  data.optname = optname;
 182fbe0:	e0bffe17 	ldw	r2,-8(fp)
 182fbe4:	e0bff815 	stw	r2,-32(fp)
  data.optval = (void*)optval;
 182fbe8:	e0bfff17 	ldw	r2,-4(fp)
 182fbec:	e0bff915 	stw	r2,-28(fp)
  data.optlen = &optlen;
 182fbf0:	e0800204 	addi	r2,fp,8
 182fbf4:	e0bffa15 	stw	r2,-24(fp)
  data.err = err;
 182fbf8:	e0bff403 	ldbu	r2,-48(fp)
 182fbfc:	e0bffb05 	stb	r2,-20(fp)
  tcpip_callback(lwip_setsockopt_internal, &data);
 182fc00:	e0bff604 	addi	r2,fp,-40
 182fc04:	01800044 	movi	r6,1
 182fc08:	100b883a 	mov	r5,r2
 182fc0c:	010060f4 	movhi	r4,387
 182fc10:	213f1c04 	addi	r4,r4,-912
 182fc14:	18303fc0 	call	18303fc <tcpip_callback_with_block>
  sys_arch_sem_wait(&sock->conn->op_completed, 0);
 182fc18:	e0bff517 	ldw	r2,-44(fp)
 182fc1c:	10800017 	ldw	r2,0(r2)
 182fc20:	10800404 	addi	r2,r2,16
 182fc24:	000b883a 	mov	r5,zero
 182fc28:	1009883a 	mov	r4,r2
 182fc2c:	18150140 	call	1815014 <sys_arch_sem_wait>
  /* maybe lwip_setsockopt_internal has changed err */
  err = data.err;
 182fc30:	e0bffb03 	ldbu	r2,-20(fp)
 182fc34:	e0bff405 	stb	r2,-48(fp)

  sock_set_errno(sock, err);
 182fc38:	e0fff407 	ldb	r3,-48(fp)
 182fc3c:	e0bff517 	ldw	r2,-44(fp)
 182fc40:	10c00415 	stw	r3,16(r2)
  return err ? -1 : 0;
 182fc44:	e0bff407 	ldb	r2,-48(fp)
 182fc48:	10000226 	beq	r2,zero,182fc54 <lwip_setsockopt+0x278>
 182fc4c:	00bfffc4 	movi	r2,-1
 182fc50:	00000206 	br	182fc5c <lwip_setsockopt+0x280>
 182fc54:	0005883a 	mov	r2,zero
 182fc58:	0001883a 	nop
}
 182fc5c:	e037883a 	mov	sp,fp
 182fc60:	dfc00117 	ldw	ra,4(sp)
 182fc64:	df000017 	ldw	fp,0(sp)
 182fc68:	dec00204 	addi	sp,sp,8
 182fc6c:	f800283a 	ret

0182fc70 <lwip_setsockopt_internal>:

static void
lwip_setsockopt_internal(void *arg)
{
 182fc70:	defff804 	addi	sp,sp,-32
 182fc74:	dfc00715 	stw	ra,28(sp)
 182fc78:	df000615 	stw	fp,24(sp)
 182fc7c:	df000604 	addi	fp,sp,24
 182fc80:	e13fff15 	stw	r4,-4(fp)
  const void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);

  data = (struct lwip_setgetsockopt_data*)arg;
 182fc84:	e0bfff17 	ldw	r2,-4(fp)
 182fc88:	e0bffa15 	stw	r2,-24(fp)
  sock = data->sock;
 182fc8c:	e0bffa17 	ldw	r2,-24(fp)
 182fc90:	10800017 	ldw	r2,0(r2)
 182fc94:	e0bffb15 	stw	r2,-20(fp)
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
 182fc98:	e0bffa17 	ldw	r2,-24(fp)
 182fc9c:	10800117 	ldw	r2,4(r2)
 182fca0:	e0bffc15 	stw	r2,-16(fp)
  optname = data->optname;
 182fca4:	e0bffa17 	ldw	r2,-24(fp)
 182fca8:	10800217 	ldw	r2,8(r2)
 182fcac:	e0bffd15 	stw	r2,-12(fp)
  optval = data->optval;
 182fcb0:	e0bffa17 	ldw	r2,-24(fp)
 182fcb4:	10800317 	ldw	r2,12(r2)
 182fcb8:	e0bffe15 	stw	r2,-8(fp)

  switch (level) {
 182fcbc:	e0bffc17 	ldw	r2,-16(fp)
 182fcc0:	10c001a0 	cmpeqi	r3,r2,6
 182fcc4:	1800651e 	bne	r3,zero,182fe5c <lwip_setsockopt_internal+0x1ec>
 182fcc8:	10c3ffe0 	cmpeqi	r3,r2,4095
 182fccc:	1800021e 	bne	r3,zero,182fcd8 <lwip_setsockopt_internal+0x68>
 182fcd0:	10004d26 	beq	r2,zero,182fe08 <lwip_setsockopt_internal+0x198>
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
 182fcd4:	0000a906 	br	182ff7c <lwip_setsockopt_internal+0x30c>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182fcd8:	e0bffd17 	ldw	r2,-12(fp)
 182fcdc:	10c00820 	cmpeqi	r3,r2,32
 182fce0:	18000e1e 	bne	r3,zero,182fd1c <lwip_setsockopt_internal+0xac>
 182fce4:	10c00848 	cmpgei	r3,r2,33
 182fce8:	1800051e 	bne	r3,zero,182fd00 <lwip_setsockopt_internal+0x90>
 182fcec:	10c00120 	cmpeqi	r3,r2,4
 182fcf0:	18000a1e 	bne	r3,zero,182fd1c <lwip_setsockopt_internal+0xac>
 182fcf4:	10800220 	cmpeqi	r2,r2,8
 182fcf8:	1000081e 	bne	r2,zero,182fd1c <lwip_setsockopt_internal+0xac>
      }
      break;
#endif /* LWIP_UDP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182fcfc:	00004106 	br	182fe04 <lwip_setsockopt_internal+0x194>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182fd00:	10c401a0 	cmpeqi	r3,r2,4102
 182fd04:	1800211e 	bne	r3,zero,182fd8c <lwip_setsockopt_internal+0x11c>
 182fd08:	10c402a0 	cmpeqi	r3,r2,4106
 182fd0c:	1800251e 	bne	r3,zero,182fda4 <lwip_setsockopt_internal+0x134>
 182fd10:	10808020 	cmpeqi	r2,r2,512
 182fd14:	1000011e 	bne	r2,zero,182fd1c <lwip_setsockopt_internal+0xac>
      }
      break;
#endif /* LWIP_UDP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182fd18:	00003a06 	br	182fe04 <lwip_setsockopt_internal+0x194>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (*(int*)optval) {
 182fd1c:	e0bffe17 	ldw	r2,-8(fp)
 182fd20:	10800017 	ldw	r2,0(r2)
 182fd24:	10000c26 	beq	r2,zero,182fd58 <lwip_setsockopt_internal+0xe8>
        ip_set_option(sock->conn->pcb.ip, optname);
 182fd28:	e0bffb17 	ldw	r2,-20(fp)
 182fd2c:	10800017 	ldw	r2,0(r2)
 182fd30:	10800217 	ldw	r2,8(r2)
 182fd34:	e0fffb17 	ldw	r3,-20(fp)
 182fd38:	18c00017 	ldw	r3,0(r3)
 182fd3c:	18c00217 	ldw	r3,8(r3)
 182fd40:	18c00203 	ldbu	r3,8(r3)
 182fd44:	1809883a 	mov	r4,r3
 182fd48:	e0fffd17 	ldw	r3,-12(fp)
 182fd4c:	20c6b03a 	or	r3,r4,r3
 182fd50:	10c00205 	stb	r3,8(r2)
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(int*)optval?"on":"off")));
      break;
 182fd54:	00002b06 	br	182fe04 <lwip_setsockopt_internal+0x194>
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (*(int*)optval) {
        ip_set_option(sock->conn->pcb.ip, optname);
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
 182fd58:	e0bffb17 	ldw	r2,-20(fp)
 182fd5c:	10800017 	ldw	r2,0(r2)
 182fd60:	10800217 	ldw	r2,8(r2)
 182fd64:	e0fffb17 	ldw	r3,-20(fp)
 182fd68:	18c00017 	ldw	r3,0(r3)
 182fd6c:	18c00217 	ldw	r3,8(r3)
 182fd70:	18c00203 	ldbu	r3,8(r3)
 182fd74:	1809883a 	mov	r4,r3
 182fd78:	e0fffd17 	ldw	r3,-12(fp)
 182fd7c:	00c6303a 	nor	r3,zero,r3
 182fd80:	20c6703a 	and	r3,r4,r3
 182fd84:	10c00205 	stb	r3,8(r2)
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(int*)optval?"on":"off")));
      break;
 182fd88:	00001e06 	br	182fe04 <lwip_setsockopt_internal+0x194>
      netconn_set_sendtimeout(sock->conn, (s32_t)*(int*)optval);
      break;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      netconn_set_recvtimeout(sock->conn, *(int*)optval);
 182fd8c:	e0bffb17 	ldw	r2,-20(fp)
 182fd90:	10800017 	ldw	r2,0(r2)
 182fd94:	e0fffe17 	ldw	r3,-8(fp)
 182fd98:	18c00017 	ldw	r3,0(r3)
 182fd9c:	10c00815 	stw	r3,32(r2)
      break;
 182fda0:	00001806 	br	182fe04 <lwip_setsockopt_internal+0x194>
      netconn_set_recvbufsize(sock->conn, *(int*)optval);
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      if (*(int*)optval) {
 182fda4:	e0bffe17 	ldw	r2,-8(fp)
 182fda8:	10800017 	ldw	r2,0(r2)
 182fdac:	10000a26 	beq	r2,zero,182fdd8 <lwip_setsockopt_internal+0x168>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
 182fdb0:	e0bffb17 	ldw	r2,-20(fp)
 182fdb4:	10800017 	ldw	r2,0(r2)
 182fdb8:	10800217 	ldw	r2,8(r2)
 182fdbc:	e0fffb17 	ldw	r3,-20(fp)
 182fdc0:	18c00017 	ldw	r3,0(r3)
 182fdc4:	18c00217 	ldw	r3,8(r3)
 182fdc8:	18c00403 	ldbu	r3,16(r3)
 182fdcc:	18c00054 	ori	r3,r3,1
 182fdd0:	10c00405 	stb	r3,16(r2)
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
 182fdd4:	00000a06 	br	182fe00 <lwip_setsockopt_internal+0x190>
#if LWIP_UDP
    case SO_NO_CHECK:
      if (*(int*)optval) {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
 182fdd8:	e0bffb17 	ldw	r2,-20(fp)
 182fddc:	10800017 	ldw	r2,0(r2)
 182fde0:	10800217 	ldw	r2,8(r2)
 182fde4:	e0fffb17 	ldw	r3,-20(fp)
 182fde8:	18c00017 	ldw	r3,0(r3)
 182fdec:	18c00217 	ldw	r3,8(r3)
 182fdf0:	19000403 	ldbu	r4,16(r3)
 182fdf4:	00ffff84 	movi	r3,-2
 182fdf8:	20c6703a 	and	r3,r4,r3
 182fdfc:	10c00405 	stb	r3,16(r2)
      }
      break;
 182fe00:	0001883a 	nop
#endif /* LWIP_UDP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 182fe04:	00005d06 	br	182ff7c <lwip_setsockopt_internal+0x30c>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 182fe08:	e0bffd17 	ldw	r2,-12(fp)
 182fe0c:	10c00060 	cmpeqi	r3,r2,1
 182fe10:	18000a1e 	bne	r3,zero,182fe3c <lwip_setsockopt_internal+0x1cc>
 182fe14:	108000a0 	cmpeqi	r2,r2,2
 182fe18:	1000011e 	bne	r2,zero,182fe20 <lwip_setsockopt_internal+0x1b0>
      }
      break;
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182fe1c:	00000e06 	br	182fe58 <lwip_setsockopt_internal+0x1e8>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    case IP_TTL:
      sock->conn->pcb.ip->ttl = (u8_t)(*(int*)optval);
 182fe20:	e0bffb17 	ldw	r2,-20(fp)
 182fe24:	10800017 	ldw	r2,0(r2)
 182fe28:	10800217 	ldw	r2,8(r2)
 182fe2c:	e0fffe17 	ldw	r3,-8(fp)
 182fe30:	18c00017 	ldw	r3,0(r3)
 182fe34:	10c00285 	stb	r3,10(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
 182fe38:	00000706 	br	182fe58 <lwip_setsockopt_internal+0x1e8>
    case IP_TOS:
      sock->conn->pcb.ip->tos = (u8_t)(*(int*)optval);
 182fe3c:	e0bffb17 	ldw	r2,-20(fp)
 182fe40:	10800017 	ldw	r2,0(r2)
 182fe44:	10800217 	ldw	r2,8(r2)
 182fe48:	e0fffe17 	ldw	r3,-8(fp)
 182fe4c:	18c00017 	ldw	r3,0(r3)
 182fe50:	10c00245 	stb	r3,9(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
 182fe54:	0001883a 	nop
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 182fe58:	00004806 	br	182ff7c <lwip_setsockopt_internal+0x30c>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
 182fe5c:	e0bffd17 	ldw	r2,-12(fp)
 182fe60:	108001a8 	cmpgeui	r2,r2,6
 182fe64:	1000431e 	bne	r2,zero,182ff74 <lwip_setsockopt_internal+0x304>
 182fe68:	e0bffd17 	ldw	r2,-12(fp)
 182fe6c:	100690ba 	slli	r3,r2,2
 182fe70:	008060f4 	movhi	r2,387
 182fe74:	10bfa104 	addi	r2,r2,-380
 182fe78:	1885883a 	add	r2,r3,r2
 182fe7c:	10800017 	ldw	r2,0(r2)
 182fe80:	1000683a 	jmp	r2
 182fe84:	0182ff74 	movhi	r6,3069
 182fe88:	0182fe9c 	xori	r6,zero,3066
 182fe8c:	0182fefc 	xorhi	r6,zero,3067
 182fe90:	0182ff18 	cmpnei	r6,zero,3068
 182fe94:	0182ff38 	rdprs	r6,zero,3068
 182fe98:	0182ff58 	cmpnei	r6,zero,3069
    case TCP_NODELAY:
      if (*(int*)optval) {
 182fe9c:	e0bffe17 	ldw	r2,-8(fp)
 182fea0:	10800017 	ldw	r2,0(r2)
 182fea4:	10000a26 	beq	r2,zero,182fed0 <lwip_setsockopt_internal+0x260>
        tcp_nagle_disable(sock->conn->pcb.tcp);
 182fea8:	e0bffb17 	ldw	r2,-20(fp)
 182feac:	10800017 	ldw	r2,0(r2)
 182feb0:	10800217 	ldw	r2,8(r2)
 182feb4:	e0fffb17 	ldw	r3,-20(fp)
 182feb8:	18c00017 	ldw	r3,0(r3)
 182febc:	18c00217 	ldw	r3,8(r3)
 182fec0:	18c00883 	ldbu	r3,34(r3)
 182fec4:	18c01014 	ori	r3,r3,64
 182fec8:	10c00885 	stb	r3,34(r2)
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(int *)optval)?"on":"off") );
      break;
 182fecc:	00002a06 	br	182ff78 <lwip_setsockopt_internal+0x308>
    switch (optname) {
    case TCP_NODELAY:
      if (*(int*)optval) {
        tcp_nagle_disable(sock->conn->pcb.tcp);
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
 182fed0:	e0bffb17 	ldw	r2,-20(fp)
 182fed4:	10800017 	ldw	r2,0(r2)
 182fed8:	10800217 	ldw	r2,8(r2)
 182fedc:	e0fffb17 	ldw	r3,-20(fp)
 182fee0:	18c00017 	ldw	r3,0(r3)
 182fee4:	18c00217 	ldw	r3,8(r3)
 182fee8:	19000883 	ldbu	r4,34(r3)
 182feec:	00ffefc4 	movi	r3,-65
 182fef0:	20c6703a 	and	r3,r4,r3
 182fef4:	10c00885 	stb	r3,34(r2)
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(int *)optval)?"on":"off") );
      break;
 182fef8:	00001f06 	br	182ff78 <lwip_setsockopt_internal+0x308>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(int*)optval);
 182fefc:	e0bffb17 	ldw	r2,-20(fp)
 182ff00:	10800017 	ldw	r2,0(r2)
 182ff04:	10800217 	ldw	r2,8(r2)
 182ff08:	e0fffe17 	ldw	r3,-8(fp)
 182ff0c:	18c00017 	ldw	r3,0(r3)
 182ff10:	10c02515 	stw	r3,148(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
 182ff14:	00001806 	br	182ff78 <lwip_setsockopt_internal+0x308>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(int*)optval);
 182ff18:	e0bffb17 	ldw	r2,-20(fp)
 182ff1c:	10800017 	ldw	r2,0(r2)
 182ff20:	10800217 	ldw	r2,8(r2)
 182ff24:	e0fffe17 	ldw	r3,-8(fp)
 182ff28:	18c00017 	ldw	r3,0(r3)
 182ff2c:	18c0fa24 	muli	r3,r3,1000
 182ff30:	10c02515 	stw	r3,148(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
 182ff34:	00001006 	br	182ff78 <lwip_setsockopt_internal+0x308>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(int*)optval);
 182ff38:	e0bffb17 	ldw	r2,-20(fp)
 182ff3c:	10800017 	ldw	r2,0(r2)
 182ff40:	10800217 	ldw	r2,8(r2)
 182ff44:	e0fffe17 	ldw	r3,-8(fp)
 182ff48:	18c00017 	ldw	r3,0(r3)
 182ff4c:	18c0fa24 	muli	r3,r3,1000
 182ff50:	10c02615 	stw	r3,152(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
 182ff54:	00000806 	br	182ff78 <lwip_setsockopt_internal+0x308>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(int*)optval);
 182ff58:	e0bffb17 	ldw	r2,-20(fp)
 182ff5c:	10800017 	ldw	r2,0(r2)
 182ff60:	10800217 	ldw	r2,8(r2)
 182ff64:	e0fffe17 	ldw	r3,-8(fp)
 182ff68:	18c00017 	ldw	r3,0(r3)
 182ff6c:	10c02715 	stw	r3,156(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
 182ff70:	00000106 	br	182ff78 <lwip_setsockopt_internal+0x308>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182ff74:	0001883a 	nop
    }  /* switch (optname) */
    break;
 182ff78:	0001883a 	nop
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
  }  /* switch (level) */
  sys_sem_signal(&sock->conn->op_completed);
 182ff7c:	e0bffb17 	ldw	r2,-20(fp)
 182ff80:	10800017 	ldw	r2,0(r2)
 182ff84:	10800404 	addi	r2,r2,16
 182ff88:	1009883a 	mov	r4,r2
 182ff8c:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 182ff90:	0001883a 	nop
 182ff94:	e037883a 	mov	sp,fp
 182ff98:	dfc00117 	ldw	ra,4(sp)
 182ff9c:	df000017 	ldw	fp,0(sp)
 182ffa0:	dec00204 	addi	sp,sp,8
 182ffa4:	f800283a 	ret

0182ffa8 <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
 182ffa8:	defff904 	addi	sp,sp,-28
 182ffac:	dfc00615 	stw	ra,24(sp)
 182ffb0:	df000515 	stw	fp,20(sp)
 182ffb4:	df000504 	addi	fp,sp,20
 182ffb8:	e13ffd15 	stw	r4,-12(fp)
 182ffbc:	e17ffe15 	stw	r5,-8(fp)
 182ffc0:	e1bfff15 	stw	r6,-4(fp)
  struct lwip_sock *sock = get_socket(s);
 182ffc4:	e13ffd17 	ldw	r4,-12(fp)
 182ffc8:	182cf240 	call	182cf24 <get_socket>
 182ffcc:	e0bffc15 	stw	r2,-16(fp)
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  s16_t recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
 182ffd0:	e0bffc17 	ldw	r2,-16(fp)
 182ffd4:	1000021e 	bne	r2,zero,182ffe0 <lwip_ioctl+0x38>
    return -1;
 182ffd8:	00bfffc4 	movi	r2,-1
 182ffdc:	00002606 	br	1830078 <lwip_ioctl+0xd0>
  }

  switch (cmd) {
 182ffe0:	e0fffe17 	ldw	r3,-8(fp)
 182ffe4:	00a00134 	movhi	r2,32772
 182ffe8:	10999f84 	addi	r2,r2,26238
 182ffec:	18801e1e 	bne	r3,r2,1830068 <lwip_ioctl+0xc0>
    sock_set_errno(sock, 0);
    return 0;
#endif /* LWIP_SO_RCVBUF */

  case FIONBIO:
    val = 0;
 182fff0:	e03ffb05 	stb	zero,-20(fp)
    if (argp && *(u32_t*)argp) {
 182fff4:	e0bfff17 	ldw	r2,-4(fp)
 182fff8:	10000526 	beq	r2,zero,1830010 <lwip_ioctl+0x68>
 182fffc:	e0bfff17 	ldw	r2,-4(fp)
 1830000:	10800017 	ldw	r2,0(r2)
 1830004:	10000226 	beq	r2,zero,1830010 <lwip_ioctl+0x68>
      val = 1;
 1830008:	00800044 	movi	r2,1
 183000c:	e0bffb05 	stb	r2,-20(fp)
    }
    netconn_set_nonblocking(sock->conn, val);
 1830010:	e0bffb03 	ldbu	r2,-20(fp)
 1830014:	10000826 	beq	r2,zero,1830038 <lwip_ioctl+0x90>
 1830018:	e0bffc17 	ldw	r2,-16(fp)
 183001c:	10800017 	ldw	r2,0(r2)
 1830020:	e0fffc17 	ldw	r3,-16(fp)
 1830024:	18c00017 	ldw	r3,0(r3)
 1830028:	18c00903 	ldbu	r3,36(r3)
 183002c:	18c00094 	ori	r3,r3,2
 1830030:	10c00905 	stb	r3,36(r2)
 1830034:	00000806 	br	1830058 <lwip_ioctl+0xb0>
 1830038:	e0bffc17 	ldw	r2,-16(fp)
 183003c:	10800017 	ldw	r2,0(r2)
 1830040:	e0fffc17 	ldw	r3,-16(fp)
 1830044:	18c00017 	ldw	r3,0(r3)
 1830048:	19000903 	ldbu	r4,36(r3)
 183004c:	00ffff44 	movi	r3,-3
 1830050:	20c6703a 	and	r3,r4,r3
 1830054:	10c00905 	stb	r3,36(r2)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
 1830058:	e0bffc17 	ldw	r2,-16(fp)
 183005c:	10000415 	stw	zero,16(r2)
    return 0;
 1830060:	0005883a 	mov	r2,zero
 1830064:	00000406 	br	1830078 <lwip_ioctl+0xd0>

  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
 1830068:	e0bffc17 	ldw	r2,-16(fp)
 183006c:	00c01604 	movi	r3,88
 1830070:	10c00415 	stw	r3,16(r2)
    return -1;
 1830074:	00bfffc4 	movi	r2,-1
  } /* switch (cmd) */
}
 1830078:	e037883a 	mov	sp,fp
 183007c:	dfc00117 	ldw	ra,4(sp)
 1830080:	df000017 	ldw	fp,0(sp)
 1830084:	dec00204 	addi	sp,sp,8
 1830088:	f800283a 	ret

0183008c <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 183008c:	defff904 	addi	sp,sp,-28
 1830090:	dfc00615 	stw	ra,24(sp)
 1830094:	df000515 	stw	fp,20(sp)
 1830098:	df000504 	addi	fp,sp,20
 183009c:	e13ffd15 	stw	r4,-12(fp)
 18300a0:	e17ffe15 	stw	r5,-8(fp)
 18300a4:	e1bfff15 	stw	r6,-4(fp)
  struct lwip_sock *sock = get_socket(s);
 18300a8:	e13ffd17 	ldw	r4,-12(fp)
 18300ac:	182cf240 	call	182cf24 <get_socket>
 18300b0:	e0bffc15 	stw	r2,-16(fp)
  int ret = -1;
 18300b4:	00bfffc4 	movi	r2,-1
 18300b8:	e0bffb15 	stw	r2,-20(fp)

  if (!sock || !sock->conn) {
 18300bc:	e0bffc17 	ldw	r2,-16(fp)
 18300c0:	10000326 	beq	r2,zero,18300d0 <lwip_fcntl+0x44>
 18300c4:	e0bffc17 	ldw	r2,-16(fp)
 18300c8:	10800017 	ldw	r2,0(r2)
 18300cc:	1000021e 	bne	r2,zero,18300d8 <lwip_fcntl+0x4c>
    return -1;
 18300d0:	00bfffc4 	movi	r2,-1
 18300d4:	00002906 	br	183017c <lwip_fcntl+0xf0>
  }

  switch (cmd) {
 18300d8:	e0bffe17 	ldw	r2,-8(fp)
 18300dc:	10c000e0 	cmpeqi	r3,r2,3
 18300e0:	1800031e 	bne	r3,zero,18300f0 <lwip_fcntl+0x64>
 18300e4:	10800120 	cmpeqi	r2,r2,4
 18300e8:	10000a1e 	bne	r2,zero,1830114 <lwip_fcntl+0x88>
      ret = 0;
    }
    break;
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    break;
 18300ec:	00002206 	br	1830178 <lwip_fcntl+0xec>
    return -1;
  }

  switch (cmd) {
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 18300f0:	e0bffc17 	ldw	r2,-16(fp)
 18300f4:	10800017 	ldw	r2,0(r2)
 18300f8:	10800903 	ldbu	r2,36(r2)
 18300fc:	10803fcc 	andi	r2,r2,255
 1830100:	1080008c 	andi	r2,r2,2
 1830104:	1004c03a 	cmpne	r2,r2,zero
 1830108:	10803fcc 	andi	r2,r2,255
 183010c:	e0bffb15 	stw	r2,-20(fp)
    break;
 1830110:	00001906 	br	1830178 <lwip_fcntl+0xec>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
 1830114:	e0ffff17 	ldw	r3,-4(fp)
 1830118:	00bfff84 	movi	r2,-2
 183011c:	1884703a 	and	r2,r3,r2
 1830120:	1000141e 	bne	r2,zero,1830174 <lwip_fcntl+0xe8>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 1830124:	e0bfff17 	ldw	r2,-4(fp)
 1830128:	1080004c 	andi	r2,r2,1
 183012c:	10000826 	beq	r2,zero,1830150 <lwip_fcntl+0xc4>
 1830130:	e0bffc17 	ldw	r2,-16(fp)
 1830134:	10800017 	ldw	r2,0(r2)
 1830138:	e0fffc17 	ldw	r3,-16(fp)
 183013c:	18c00017 	ldw	r3,0(r3)
 1830140:	18c00903 	ldbu	r3,36(r3)
 1830144:	18c00094 	ori	r3,r3,2
 1830148:	10c00905 	stb	r3,36(r2)
 183014c:	00000806 	br	1830170 <lwip_fcntl+0xe4>
 1830150:	e0bffc17 	ldw	r2,-16(fp)
 1830154:	10800017 	ldw	r2,0(r2)
 1830158:	e0fffc17 	ldw	r3,-16(fp)
 183015c:	18c00017 	ldw	r3,0(r3)
 1830160:	19000903 	ldbu	r4,36(r3)
 1830164:	00ffff44 	movi	r3,-3
 1830168:	20c6703a 	and	r3,r4,r3
 183016c:	10c00905 	stb	r3,36(r2)
      ret = 0;
 1830170:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1830174:	0001883a 	nop
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    break;
  }
  return ret;
 1830178:	e0bffb17 	ldw	r2,-20(fp)
}
 183017c:	e037883a 	mov	sp,fp
 1830180:	dfc00117 	ldw	ra,4(sp)
 1830184:	df000017 	ldw	fp,0(sp)
 1830188:	dec00204 	addi	sp,sp,8
 183018c:	f800283a 	ret

01830190 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 1830190:	defffc04 	addi	sp,sp,-16
 1830194:	dfc00315 	stw	ra,12(sp)
 1830198:	df000215 	stw	fp,8(sp)
 183019c:	df000204 	addi	fp,sp,8
 18301a0:	e13fff15 	stw	r4,-4(fp)
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 18301a4:	d0a80b17 	ldw	r2,-24532(gp)
 18301a8:	10000426 	beq	r2,zero,18301bc <tcpip_thread+0x2c>
    tcpip_init_done(tcpip_init_done_arg);
 18301ac:	d0a80b17 	ldw	r2,-24532(gp)
 18301b0:	d0e80c17 	ldw	r3,-24528(gp)
 18301b4:	1809883a 	mov	r4,r3
 18301b8:	103ee83a 	callr	r2
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
 18301bc:	e17ffe04 	addi	r5,fp,-8
 18301c0:	d1280d04 	addi	r4,gp,-24524
 18301c4:	18210600 	call	1821060 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
    switch (msg->type) {
 18301c8:	e0bffe17 	ldw	r2,-8(fp)
 18301cc:	10800017 	ldw	r2,0(r2)
 18301d0:	10c001a8 	cmpgeui	r3,r2,6
 18301d4:	1800581e 	bne	r3,zero,1830338 <tcpip_thread+0x1a8>
 18301d8:	100690ba 	slli	r3,r2,2
 18301dc:	008060f4 	movhi	r2,387
 18301e0:	10807c04 	addi	r2,r2,496
 18301e4:	1885883a 	add	r2,r3,r2
 18301e8:	10800017 	ldw	r2,0(r2)
 18301ec:	1000683a 	jmp	r2
 18301f0:	01830208 	cmpgei	r6,zero,3080
 18301f4:	0183022c 	andhi	r6,zero,3080
 18301f8:	01830290 	cmplti	r6,zero,3082
 18301fc:	018302c8 	cmpgei	r6,zero,3083
 1830200:	018302f4 	movhi	r6,3083
 1830204:	0183031c 	xori	r6,zero,3084
#if LWIP_NETCONN
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
 1830208:	e0bffe17 	ldw	r2,-8(fp)
 183020c:	10800217 	ldw	r2,8(r2)
 1830210:	10800017 	ldw	r2,0(r2)
 1830214:	e0fffe17 	ldw	r3,-8(fp)
 1830218:	18c00217 	ldw	r3,8(r3)
 183021c:	18c00104 	addi	r3,r3,4
 1830220:	1809883a 	mov	r4,r3
 1830224:	103ee83a 	callr	r2
      break;
 1830228:	00004406 	br	183033c <tcpip_thread+0x1ac>

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
      if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 183022c:	e0bffe17 	ldw	r2,-8(fp)
 1830230:	10800317 	ldw	r2,12(r2)
 1830234:	10800e43 	ldbu	r2,57(r2)
 1830238:	10803fcc 	andi	r2,r2,255
 183023c:	1080180c 	andi	r2,r2,96
 1830240:	10000826 	beq	r2,zero,1830264 <tcpip_thread+0xd4>
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
 1830244:	e0bffe17 	ldw	r2,-8(fp)
 1830248:	10c00217 	ldw	r3,8(r2)
 183024c:	e0bffe17 	ldw	r2,-8(fp)
 1830250:	10800317 	ldw	r2,12(r2)
 1830254:	100b883a 	mov	r5,r2
 1830258:	1809883a 	mov	r4,r3
 183025c:	1823a840 	call	1823a84 <ethernet_input>
 1830260:	00000706 	br	1830280 <tcpip_thread+0xf0>
      } else
#endif /* LWIP_ETHERNET */
      {
        ip_input(msg->msg.inp.p, msg->msg.inp.netif);
 1830264:	e0bffe17 	ldw	r2,-8(fp)
 1830268:	10c00217 	ldw	r3,8(r2)
 183026c:	e0bffe17 	ldw	r2,-8(fp)
 1830270:	10800317 	ldw	r2,12(r2)
 1830274:	100b883a 	mov	r5,r2
 1830278:	1809883a 	mov	r4,r3
 183027c:	1831a640 	call	1831a64 <ip_input>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 1830280:	e0bffe17 	ldw	r2,-8(fp)
 1830284:	1009883a 	mov	r4,r2
 1830288:	183c5140 	call	183c514 <free>
      break;
 183028c:	00002b06 	br	183033c <tcpip_thread+0x1ac>
#endif /* LWIP_NETIF_API */

#if LWIP_TCPIP_TIMEOUT
    case TCPIP_MSG_TIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 1830290:	e0bffe17 	ldw	r2,-8(fp)
 1830294:	10c00217 	ldw	r3,8(r2)
 1830298:	e0bffe17 	ldw	r2,-8(fp)
 183029c:	11000317 	ldw	r4,12(r2)
 18302a0:	e0bffe17 	ldw	r2,-8(fp)
 18302a4:	10800417 	ldw	r2,16(r2)
 18302a8:	100d883a 	mov	r6,r2
 18302ac:	200b883a 	mov	r5,r4
 18302b0:	1809883a 	mov	r4,r3
 18302b4:	1820de40 	call	1820de4 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 18302b8:	e0bffe17 	ldw	r2,-8(fp)
 18302bc:	1009883a 	mov	r4,r2
 18302c0:	183c5140 	call	183c514 <free>
      break;
 18302c4:	00001d06 	br	183033c <tcpip_thread+0x1ac>
    case TCPIP_MSG_UNTIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 18302c8:	e0bffe17 	ldw	r2,-8(fp)
 18302cc:	10c00317 	ldw	r3,12(r2)
 18302d0:	e0bffe17 	ldw	r2,-8(fp)
 18302d4:	10800417 	ldw	r2,16(r2)
 18302d8:	100b883a 	mov	r5,r2
 18302dc:	1809883a 	mov	r4,r3
 18302e0:	1820f700 	call	1820f70 <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 18302e4:	e0bffe17 	ldw	r2,-8(fp)
 18302e8:	1009883a 	mov	r4,r2
 18302ec:	183c5140 	call	183c514 <free>
      break;
 18302f0:	00001206 	br	183033c <tcpip_thread+0x1ac>
#endif /* LWIP_TCPIP_TIMEOUT */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 18302f4:	e0bffe17 	ldw	r2,-8(fp)
 18302f8:	10800217 	ldw	r2,8(r2)
 18302fc:	e0fffe17 	ldw	r3,-8(fp)
 1830300:	18c00317 	ldw	r3,12(r3)
 1830304:	1809883a 	mov	r4,r3
 1830308:	103ee83a 	callr	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 183030c:	e0bffe17 	ldw	r2,-8(fp)
 1830310:	1009883a 	mov	r4,r2
 1830314:	183c5140 	call	183c514 <free>
      break;
 1830318:	00000806 	br	183033c <tcpip_thread+0x1ac>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 183031c:	e0bffe17 	ldw	r2,-8(fp)
 1830320:	10800217 	ldw	r2,8(r2)
 1830324:	e0fffe17 	ldw	r3,-8(fp)
 1830328:	18c00317 	ldw	r3,12(r3)
 183032c:	1809883a 	mov	r4,r3
 1830330:	103ee83a 	callr	r2
      break;
 1830334:	00000106 	br	183033c <tcpip_thread+0x1ac>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
      break;
 1830338:	0001883a 	nop
    }
  }
 183033c:	003f9f06 	br	18301bc <__ram_exceptions_end+0xff81fecc>

01830340 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 1830340:	defffb04 	addi	sp,sp,-20
 1830344:	dfc00415 	stw	ra,16(sp)
 1830348:	df000315 	stw	fp,12(sp)
 183034c:	df000304 	addi	fp,sp,12
 1830350:	e13ffe15 	stw	r4,-8(fp)
 1830354:	e17fff15 	stw	r5,-4(fp)
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  if (!sys_mbox_valid(&mbox)) {
 1830358:	d0a80d17 	ldw	r2,-24524(gp)
 183035c:	1000021e 	bne	r2,zero,1830368 <tcpip_input+0x28>
    return ERR_VAL;
 1830360:	00bffe84 	movi	r2,-6
 1830364:	00002006 	br	18303e8 <tcpip_input+0xa8>
  }
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 1830368:	00806134 	movhi	r2,388
 183036c:	108bcc84 	addi	r2,r2,12082
 1830370:	1080050b 	ldhu	r2,20(r2)
 1830374:	10bfffcc 	andi	r2,r2,65535
 1830378:	1009883a 	mov	r4,r2
 183037c:	183c5000 	call	183c500 <malloc>
 1830380:	e0bffd15 	stw	r2,-12(fp)
  if (msg == NULL) {
 1830384:	e0bffd17 	ldw	r2,-12(fp)
 1830388:	1000021e 	bne	r2,zero,1830394 <tcpip_input+0x54>
    return ERR_MEM;
 183038c:	00bfffc4 	movi	r2,-1
 1830390:	00001506 	br	18303e8 <tcpip_input+0xa8>
  }

  msg->type = TCPIP_MSG_INPKT;
 1830394:	e0bffd17 	ldw	r2,-12(fp)
 1830398:	00c00044 	movi	r3,1
 183039c:	10c00015 	stw	r3,0(r2)
  msg->msg.inp.p = p;
 18303a0:	e0bffd17 	ldw	r2,-12(fp)
 18303a4:	e0fffe17 	ldw	r3,-8(fp)
 18303a8:	10c00215 	stw	r3,8(r2)
  msg->msg.inp.netif = inp;
 18303ac:	e0bffd17 	ldw	r2,-12(fp)
 18303b0:	e0ffff17 	ldw	r3,-4(fp)
 18303b4:	10c00315 	stw	r3,12(r2)
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 18303b8:	e17ffd17 	ldw	r5,-12(fp)
 18303bc:	d1280d04 	addi	r4,gp,-24524
 18303c0:	181542c0 	call	181542c <sys_mbox_trypost>
 18303c4:	10803fcc 	andi	r2,r2,255
 18303c8:	1080201c 	xori	r2,r2,128
 18303cc:	10bfe004 	addi	r2,r2,-128
 18303d0:	10000426 	beq	r2,zero,18303e4 <tcpip_input+0xa4>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 18303d4:	e13ffd17 	ldw	r4,-12(fp)
 18303d8:	183c5140 	call	183c514 <free>
    return ERR_MEM;
 18303dc:	00bfffc4 	movi	r2,-1
 18303e0:	00000106 	br	18303e8 <tcpip_input+0xa8>
  }
  return ERR_OK;
 18303e4:	0005883a 	mov	r2,zero
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 18303e8:	e037883a 	mov	sp,fp
 18303ec:	dfc00117 	ldw	ra,4(sp)
 18303f0:	df000017 	ldw	fp,0(sp)
 18303f4:	dec00204 	addi	sp,sp,8
 18303f8:	f800283a 	ret

018303fc <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 18303fc:	defffa04 	addi	sp,sp,-24
 1830400:	dfc00515 	stw	ra,20(sp)
 1830404:	df000415 	stw	fp,16(sp)
 1830408:	df000404 	addi	fp,sp,16
 183040c:	e13ffd15 	stw	r4,-12(fp)
 1830410:	e17ffe15 	stw	r5,-8(fp)
 1830414:	3005883a 	mov	r2,r6
 1830418:	e0bfff05 	stb	r2,-4(fp)
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
 183041c:	d0a80d17 	ldw	r2,-24524(gp)
 1830420:	10002726 	beq	r2,zero,18304c0 <tcpip_callback_with_block+0xc4>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 1830424:	00806134 	movhi	r2,388
 1830428:	108bcc84 	addi	r2,r2,12082
 183042c:	1080048b 	ldhu	r2,18(r2)
 1830430:	10bfffcc 	andi	r2,r2,65535
 1830434:	1009883a 	mov	r4,r2
 1830438:	183c5000 	call	183c500 <malloc>
 183043c:	e0bffc15 	stw	r2,-16(fp)
    if (msg == NULL) {
 1830440:	e0bffc17 	ldw	r2,-16(fp)
 1830444:	1000021e 	bne	r2,zero,1830450 <tcpip_callback_with_block+0x54>
      return ERR_MEM;
 1830448:	00bfffc4 	movi	r2,-1
 183044c:	00001d06 	br	18304c4 <tcpip_callback_with_block+0xc8>
    }

    msg->type = TCPIP_MSG_CALLBACK;
 1830450:	e0bffc17 	ldw	r2,-16(fp)
 1830454:	00c00104 	movi	r3,4
 1830458:	10c00015 	stw	r3,0(r2)
    msg->msg.cb.function = function;
 183045c:	e0bffc17 	ldw	r2,-16(fp)
 1830460:	e0fffd17 	ldw	r3,-12(fp)
 1830464:	10c00215 	stw	r3,8(r2)
    msg->msg.cb.ctx = ctx;
 1830468:	e0bffc17 	ldw	r2,-16(fp)
 183046c:	e0fffe17 	ldw	r3,-8(fp)
 1830470:	10c00315 	stw	r3,12(r2)
    if (block) {
 1830474:	e0bfff03 	ldbu	r2,-4(fp)
 1830478:	10000426 	beq	r2,zero,183048c <tcpip_callback_with_block+0x90>
      sys_mbox_post(&mbox, msg);
 183047c:	e17ffc17 	ldw	r5,-16(fp)
 1830480:	d1280d04 	addi	r4,gp,-24524
 1830484:	18153dc0 	call	18153dc <sys_mbox_post>
 1830488:	00000b06 	br	18304b8 <tcpip_callback_with_block+0xbc>
    } else {
      if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 183048c:	e17ffc17 	ldw	r5,-16(fp)
 1830490:	d1280d04 	addi	r4,gp,-24524
 1830494:	181542c0 	call	181542c <sys_mbox_trypost>
 1830498:	10803fcc 	andi	r2,r2,255
 183049c:	1080201c 	xori	r2,r2,128
 18304a0:	10bfe004 	addi	r2,r2,-128
 18304a4:	10000426 	beq	r2,zero,18304b8 <tcpip_callback_with_block+0xbc>
        memp_free(MEMP_TCPIP_MSG_API, msg);
 18304a8:	e13ffc17 	ldw	r4,-16(fp)
 18304ac:	183c5140 	call	183c514 <free>
        return ERR_MEM;
 18304b0:	00bfffc4 	movi	r2,-1
 18304b4:	00000306 	br	18304c4 <tcpip_callback_with_block+0xc8>
      }
    }
    return ERR_OK;
 18304b8:	0005883a 	mov	r2,zero
 18304bc:	00000106 	br	18304c4 <tcpip_callback_with_block+0xc8>
  }
  return ERR_VAL;
 18304c0:	00bffe84 	movi	r2,-6
}
 18304c4:	e037883a 	mov	sp,fp
 18304c8:	dfc00117 	ldw	ra,4(sp)
 18304cc:	df000017 	ldw	fp,0(sp)
 18304d0:	dec00204 	addi	sp,sp,8
 18304d4:	f800283a 	ret

018304d8 <tcpip_timeout>:
 * @param arg argument to pass to timeout function h
 * @return ERR_MEM on memory error, ERR_OK otherwise
 */
err_t
tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)
{
 18304d8:	defffa04 	addi	sp,sp,-24
 18304dc:	dfc00515 	stw	ra,20(sp)
 18304e0:	df000415 	stw	fp,16(sp)
 18304e4:	df000404 	addi	fp,sp,16
 18304e8:	e13ffd15 	stw	r4,-12(fp)
 18304ec:	e17ffe15 	stw	r5,-8(fp)
 18304f0:	e1bfff15 	stw	r6,-4(fp)
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
 18304f4:	d0a80d17 	ldw	r2,-24524(gp)
 18304f8:	10001c26 	beq	r2,zero,183056c <tcpip_timeout+0x94>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 18304fc:	00806134 	movhi	r2,388
 1830500:	108bcc84 	addi	r2,r2,12082
 1830504:	1080048b 	ldhu	r2,18(r2)
 1830508:	10bfffcc 	andi	r2,r2,65535
 183050c:	1009883a 	mov	r4,r2
 1830510:	183c5000 	call	183c500 <malloc>
 1830514:	e0bffc15 	stw	r2,-16(fp)
    if (msg == NULL) {
 1830518:	e0bffc17 	ldw	r2,-16(fp)
 183051c:	1000021e 	bne	r2,zero,1830528 <tcpip_timeout+0x50>
      return ERR_MEM;
 1830520:	00bfffc4 	movi	r2,-1
 1830524:	00001206 	br	1830570 <tcpip_timeout+0x98>
    }

    msg->type = TCPIP_MSG_TIMEOUT;
 1830528:	e0bffc17 	ldw	r2,-16(fp)
 183052c:	00c00084 	movi	r3,2
 1830530:	10c00015 	stw	r3,0(r2)
    msg->msg.tmo.msecs = msecs;
 1830534:	e0bffc17 	ldw	r2,-16(fp)
 1830538:	e0fffd17 	ldw	r3,-12(fp)
 183053c:	10c00215 	stw	r3,8(r2)
    msg->msg.tmo.h = h;
 1830540:	e0bffc17 	ldw	r2,-16(fp)
 1830544:	e0fffe17 	ldw	r3,-8(fp)
 1830548:	10c00315 	stw	r3,12(r2)
    msg->msg.tmo.arg = arg;
 183054c:	e0bffc17 	ldw	r2,-16(fp)
 1830550:	e0ffff17 	ldw	r3,-4(fp)
 1830554:	10c00415 	stw	r3,16(r2)
    sys_mbox_post(&mbox, msg);
 1830558:	e17ffc17 	ldw	r5,-16(fp)
 183055c:	d1280d04 	addi	r4,gp,-24524
 1830560:	18153dc0 	call	18153dc <sys_mbox_post>
    return ERR_OK;
 1830564:	0005883a 	mov	r2,zero
 1830568:	00000106 	br	1830570 <tcpip_timeout+0x98>
  }
  return ERR_VAL;
 183056c:	00bffe84 	movi	r2,-6
}
 1830570:	e037883a 	mov	sp,fp
 1830574:	dfc00117 	ldw	ra,4(sp)
 1830578:	df000017 	ldw	fp,0(sp)
 183057c:	dec00204 	addi	sp,sp,8
 1830580:	f800283a 	ret

01830584 <tcpip_untimeout>:
 * @param arg argument to pass to timeout function h
 * @return ERR_MEM on memory error, ERR_OK otherwise
 */
err_t
tcpip_untimeout(sys_timeout_handler h, void *arg)
{
 1830584:	defffb04 	addi	sp,sp,-20
 1830588:	dfc00415 	stw	ra,16(sp)
 183058c:	df000315 	stw	fp,12(sp)
 1830590:	df000304 	addi	fp,sp,12
 1830594:	e13ffe15 	stw	r4,-8(fp)
 1830598:	e17fff15 	stw	r5,-4(fp)
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
 183059c:	d0a80d17 	ldw	r2,-24524(gp)
 18305a0:	10001926 	beq	r2,zero,1830608 <tcpip_untimeout+0x84>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 18305a4:	00806134 	movhi	r2,388
 18305a8:	108bcc84 	addi	r2,r2,12082
 18305ac:	1080048b 	ldhu	r2,18(r2)
 18305b0:	10bfffcc 	andi	r2,r2,65535
 18305b4:	1009883a 	mov	r4,r2
 18305b8:	183c5000 	call	183c500 <malloc>
 18305bc:	e0bffd15 	stw	r2,-12(fp)
    if (msg == NULL) {
 18305c0:	e0bffd17 	ldw	r2,-12(fp)
 18305c4:	1000021e 	bne	r2,zero,18305d0 <tcpip_untimeout+0x4c>
      return ERR_MEM;
 18305c8:	00bfffc4 	movi	r2,-1
 18305cc:	00000f06 	br	183060c <tcpip_untimeout+0x88>
    }

    msg->type = TCPIP_MSG_UNTIMEOUT;
 18305d0:	e0bffd17 	ldw	r2,-12(fp)
 18305d4:	00c000c4 	movi	r3,3
 18305d8:	10c00015 	stw	r3,0(r2)
    msg->msg.tmo.h = h;
 18305dc:	e0bffd17 	ldw	r2,-12(fp)
 18305e0:	e0fffe17 	ldw	r3,-8(fp)
 18305e4:	10c00315 	stw	r3,12(r2)
    msg->msg.tmo.arg = arg;
 18305e8:	e0bffd17 	ldw	r2,-12(fp)
 18305ec:	e0ffff17 	ldw	r3,-4(fp)
 18305f0:	10c00415 	stw	r3,16(r2)
    sys_mbox_post(&mbox, msg);
 18305f4:	e17ffd17 	ldw	r5,-12(fp)
 18305f8:	d1280d04 	addi	r4,gp,-24524
 18305fc:	18153dc0 	call	18153dc <sys_mbox_post>
    return ERR_OK;
 1830600:	0005883a 	mov	r2,zero
 1830604:	00000106 	br	183060c <tcpip_untimeout+0x88>
  }
  return ERR_VAL;
 1830608:	00bffe84 	movi	r2,-6
}
 183060c:	e037883a 	mov	sp,fp
 1830610:	dfc00117 	ldw	ra,4(sp)
 1830614:	df000017 	ldw	fp,0(sp)
 1830618:	dec00204 	addi	sp,sp,8
 183061c:	f800283a 	ret

01830620 <tcpip_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_apimsg(struct api_msg *apimsg)
{
 1830620:	defff804 	addi	sp,sp,-32
 1830624:	dfc00715 	stw	ra,28(sp)
 1830628:	df000615 	stw	fp,24(sp)
 183062c:	df000604 	addi	fp,sp,24
 1830630:	e13fff15 	stw	r4,-4(fp)
#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->msg.err = ERR_VAL;
#endif
  
  if (sys_mbox_valid(&mbox)) {
 1830634:	d0a80d17 	ldw	r2,-24524(gp)
 1830638:	10000f26 	beq	r2,zero,1830678 <tcpip_apimsg+0x58>
    msg.type = TCPIP_MSG_API;
 183063c:	e03ffa15 	stw	zero,-24(fp)
    msg.msg.apimsg = apimsg;
 1830640:	e0bfff17 	ldw	r2,-4(fp)
 1830644:	e0bffc15 	stw	r2,-16(fp)
    sys_mbox_post(&mbox, &msg);
 1830648:	e17ffa04 	addi	r5,fp,-24
 183064c:	d1280d04 	addi	r4,gp,-24524
 1830650:	18153dc0 	call	18153dc <sys_mbox_post>
    sys_arch_sem_wait(&apimsg->msg.conn->op_completed, 0);
 1830654:	e0bfff17 	ldw	r2,-4(fp)
 1830658:	10800117 	ldw	r2,4(r2)
 183065c:	10800404 	addi	r2,r2,16
 1830660:	000b883a 	mov	r5,zero
 1830664:	1009883a 	mov	r4,r2
 1830668:	18150140 	call	1815014 <sys_arch_sem_wait>
    return apimsg->msg.err;
 183066c:	e0bfff17 	ldw	r2,-4(fp)
 1830670:	10800203 	ldbu	r2,8(r2)
 1830674:	00000106 	br	183067c <tcpip_apimsg+0x5c>
  }
  return ERR_VAL;
 1830678:	00bffe84 	movi	r2,-6
}
 183067c:	e037883a 	mov	sp,fp
 1830680:	dfc00117 	ldw	ra,4(sp)
 1830684:	df000017 	ldw	fp,0(sp)
 1830688:	dec00204 	addi	sp,sp,8
 183068c:	f800283a 	ret

01830690 <tcpip_callbackmsg_new>:
 * @param function the function to call
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg* tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
 1830690:	defffb04 	addi	sp,sp,-20
 1830694:	dfc00415 	stw	ra,16(sp)
 1830698:	df000315 	stw	fp,12(sp)
 183069c:	df000304 	addi	fp,sp,12
 18306a0:	e13ffe15 	stw	r4,-8(fp)
 18306a4:	e17fff15 	stw	r5,-4(fp)
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 18306a8:	00806134 	movhi	r2,388
 18306ac:	108bcc84 	addi	r2,r2,12082
 18306b0:	1080048b 	ldhu	r2,18(r2)
 18306b4:	10bfffcc 	andi	r2,r2,65535
 18306b8:	1009883a 	mov	r4,r2
 18306bc:	183c5000 	call	183c500 <malloc>
 18306c0:	e0bffd15 	stw	r2,-12(fp)
  if (msg == NULL) {
 18306c4:	e0bffd17 	ldw	r2,-12(fp)
 18306c8:	1000021e 	bne	r2,zero,18306d4 <tcpip_callbackmsg_new+0x44>
    return NULL;
 18306cc:	0005883a 	mov	r2,zero
 18306d0:	00000a06 	br	18306fc <tcpip_callbackmsg_new+0x6c>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
 18306d4:	e0bffd17 	ldw	r2,-12(fp)
 18306d8:	00c00144 	movi	r3,5
 18306dc:	10c00015 	stw	r3,0(r2)
  msg->msg.cb.function = function;
 18306e0:	e0bffd17 	ldw	r2,-12(fp)
 18306e4:	e0fffe17 	ldw	r3,-8(fp)
 18306e8:	10c00215 	stw	r3,8(r2)
  msg->msg.cb.ctx = ctx;
 18306ec:	e0bffd17 	ldw	r2,-12(fp)
 18306f0:	e0ffff17 	ldw	r3,-4(fp)
 18306f4:	10c00315 	stw	r3,12(r2)
  return (struct tcpip_callback_msg*)msg;
 18306f8:	e0bffd17 	ldw	r2,-12(fp)
}
 18306fc:	e037883a 	mov	sp,fp
 1830700:	dfc00117 	ldw	ra,4(sp)
 1830704:	df000017 	ldw	fp,0(sp)
 1830708:	dec00204 	addi	sp,sp,8
 183070c:	f800283a 	ret

01830710 <tcpip_callbackmsg_delete>:
 * Free a callback message allocated by tcpip_callbackmsg_new().
 *
 * @param msg the message to free
 */
void tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
 1830710:	defffd04 	addi	sp,sp,-12
 1830714:	dfc00215 	stw	ra,8(sp)
 1830718:	df000115 	stw	fp,4(sp)
 183071c:	df000104 	addi	fp,sp,4
 1830720:	e13fff15 	stw	r4,-4(fp)
  memp_free(MEMP_TCPIP_MSG_API, msg);
 1830724:	e13fff17 	ldw	r4,-4(fp)
 1830728:	183c5140 	call	183c514 <free>
}
 183072c:	0001883a 	nop
 1830730:	e037883a 	mov	sp,fp
 1830734:	dfc00117 	ldw	ra,4(sp)
 1830738:	df000017 	ldw	fp,0(sp)
 183073c:	dec00204 	addi	sp,sp,8
 1830740:	f800283a 	ret

01830744 <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
 1830744:	defffd04 	addi	sp,sp,-12
 1830748:	dfc00215 	stw	ra,8(sp)
 183074c:	df000115 	stw	fp,4(sp)
 1830750:	df000104 	addi	fp,sp,4
 1830754:	e13fff15 	stw	r4,-4(fp)
  if (!sys_mbox_valid(&mbox)) {
 1830758:	d0a80d17 	ldw	r2,-24524(gp)
 183075c:	1000021e 	bne	r2,zero,1830768 <tcpip_trycallback+0x24>
    return ERR_VAL;
 1830760:	00bffe84 	movi	r2,-6
 1830764:	00000306 	br	1830774 <tcpip_trycallback+0x30>
  }
  return sys_mbox_trypost(&mbox, msg);
 1830768:	e17fff17 	ldw	r5,-4(fp)
 183076c:	d1280d04 	addi	r4,gp,-24524
 1830770:	181542c0 	call	181542c <sys_mbox_trypost>
}
 1830774:	e037883a 	mov	sp,fp
 1830778:	dfc00117 	ldw	ra,4(sp)
 183077c:	df000017 	ldw	fp,0(sp)
 1830780:	dec00204 	addi	sp,sp,8
 1830784:	f800283a 	ret

01830788 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 1830788:	defffb04 	addi	sp,sp,-20
 183078c:	dfc00415 	stw	ra,16(sp)
 1830790:	df000315 	stw	fp,12(sp)
 1830794:	df000304 	addi	fp,sp,12
 1830798:	e13ffe15 	stw	r4,-8(fp)
 183079c:	e17fff15 	stw	r5,-4(fp)
  lwip_init();
 18307a0:	18308b00 	call	18308b0 <lwip_init>

  tcpip_init_done = initfunc;
 18307a4:	e0bffe17 	ldw	r2,-8(fp)
 18307a8:	d0a80b15 	stw	r2,-24532(gp)
  tcpip_init_done_arg = arg;
 18307ac:	e0bfff17 	ldw	r2,-4(fp)
 18307b0:	d0a80c15 	stw	r2,-24528(gp)
  if(sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 18307b4:	01440004 	movi	r5,4096
 18307b8:	d1280d04 	addi	r4,gp,-24524
 18307bc:	181529c0 	call	181529c <sys_mbox_new>
  if(sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 18307c0:	008000c4 	movi	r2,3
 18307c4:	d8800015 	stw	r2,0(sp)
 18307c8:	01c80004 	movi	r7,8192
 18307cc:	000d883a 	mov	r6,zero
 18307d0:	014060f4 	movhi	r5,387
 18307d4:	29406404 	addi	r5,r5,400
 18307d8:	01006134 	movhi	r4,388
 18307dc:	210bc904 	addi	r4,r4,12068
 18307e0:	18155f40 	call	18155f4 <sys_thread_new>
}
 18307e4:	0001883a 	nop
 18307e8:	e037883a 	mov	sp,fp
 18307ec:	dfc00117 	ldw	ra,4(sp)
 18307f0:	df000017 	ldw	fp,0(sp)
 18307f4:	dec00204 	addi	sp,sp,8
 18307f8:	f800283a 	ret

018307fc <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
 18307fc:	defffc04 	addi	sp,sp,-16
 1830800:	dfc00315 	stw	ra,12(sp)
 1830804:	df000215 	stw	fp,8(sp)
 1830808:	df000204 	addi	fp,sp,8
 183080c:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *q = (struct pbuf *)p;
 1830810:	e0bfff17 	ldw	r2,-4(fp)
 1830814:	e0bffe15 	stw	r2,-8(fp)
  pbuf_free(q);
 1830818:	e13ffe17 	ldw	r4,-8(fp)
 183081c:	181a22c0 	call	181a22c <pbuf_free>
}
 1830820:	0001883a 	nop
 1830824:	e037883a 	mov	sp,fp
 1830828:	dfc00117 	ldw	ra,4(sp)
 183082c:	df000017 	ldw	fp,0(sp)
 1830830:	dec00204 	addi	sp,sp,8
 1830834:	f800283a 	ret

01830838 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 1830838:	defffd04 	addi	sp,sp,-12
 183083c:	dfc00215 	stw	ra,8(sp)
 1830840:	df000115 	stw	fp,4(sp)
 1830844:	df000104 	addi	fp,sp,4
 1830848:	e13fff15 	stw	r4,-4(fp)
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
 183084c:	000d883a 	mov	r6,zero
 1830850:	e17fff17 	ldw	r5,-4(fp)
 1830854:	010060f4 	movhi	r4,387
 1830858:	2101ff04 	addi	r4,r4,2044
 183085c:	18303fc0 	call	18303fc <tcpip_callback_with_block>
}
 1830860:	e037883a 	mov	sp,fp
 1830864:	dfc00117 	ldw	ra,4(sp)
 1830868:	df000017 	ldw	fp,0(sp)
 183086c:	dec00204 	addi	sp,sp,8
 1830870:	f800283a 	ret

01830874 <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
 1830874:	defffd04 	addi	sp,sp,-12
 1830878:	dfc00215 	stw	ra,8(sp)
 183087c:	df000115 	stw	fp,4(sp)
 1830880:	df000104 	addi	fp,sp,4
 1830884:	e13fff15 	stw	r4,-4(fp)
  return tcpip_callback_with_block(mem_free, m, 0);
 1830888:	000d883a 	mov	r6,zero
 183088c:	e17fff17 	ldw	r5,-4(fp)
 1830890:	01006134 	movhi	r4,388
 1830894:	21314504 	addi	r4,r4,-15084
 1830898:	18303fc0 	call	18303fc <tcpip_callback_with_block>
}
 183089c:	e037883a 	mov	sp,fp
 18308a0:	dfc00117 	ldw	ra,4(sp)
 18308a4:	df000017 	ldw	fp,0(sp)
 18308a8:	dec00204 	addi	sp,sp,8
 18308ac:	f800283a 	ret

018308b0 <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
 18308b0:	defffe04 	addi	sp,sp,-8
 18308b4:	dfc00115 	stw	ra,4(sp)
 18308b8:	df000015 	stw	fp,0(sp)
 18308bc:	d839883a 	mov	fp,sp
  /* Modules initialization */
  stats_init();
 18308c0:	181afec0 	call	181afec <stats_init>
#if !NO_SYS
  sys_init();
 18308c4:	1814e1c0 	call	1814e1c <sys_init>
#endif /* !NO_SYS */
  mem_init();
  memp_init();
  pbuf_init();
  netif_init();
 18308c8:	18191540 	call	1819154 <netif_init>
#if LWIP_SOCKET
  lwip_socket_init();
 18308cc:	182cf040 	call	182cf04 <lwip_socket_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 18308d0:	18211700 	call	1821170 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 18308d4:	181b00c0 	call	181b00c <tcp_init>
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
 18308d8:	1820d6c0 	call	1820d6c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 18308dc:	0001883a 	nop
 18308e0:	e037883a 	mov	sp,fp
 18308e4:	dfc00117 	ldw	ra,4(sp)
 18308e8:	df000017 	ldw	fp,0(sp)
 18308ec:	dec00204 	addi	sp,sp,8
 18308f0:	f800283a 	ret

018308f4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 18308f4:	defff304 	addi	sp,sp,-52
 18308f8:	dfc00c15 	stw	ra,48(sp)
 18308fc:	df000b15 	stw	fp,44(sp)
 1830900:	df000b04 	addi	fp,sp,44
 1830904:	e13ffe15 	stw	r4,-8(fp)
 1830908:	e17fff15 	stw	r5,-4(fp)
#endif /* LWIP_DEBUG */
  struct icmp_echo_hdr *iecho;
  struct ip_hdr *iphdr;
  s16_t hlen;

  ICMP_STATS_INC(icmp.recv);
 183090c:	00806134 	movhi	r2,388
 1830910:	109e7504 	addi	r2,r2,31188
 1830914:	10803117 	ldw	r2,196(r2)
 1830918:	10c00044 	addi	r3,r2,1
 183091c:	00806134 	movhi	r2,388
 1830920:	109e7504 	addi	r2,r2,31188
 1830924:	10c03115 	stw	r3,196(r2)
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
 1830928:	e0bffe17 	ldw	r2,-8(fp)
 183092c:	10800117 	ldw	r2,4(r2)
 1830930:	e0bff815 	stw	r2,-32(fp)
  hlen = IPH_HL(iphdr) * 4;
 1830934:	e0bff817 	ldw	r2,-32(fp)
 1830938:	10800003 	ldbu	r2,0(r2)
 183093c:	10803fcc 	andi	r2,r2,255
 1830940:	108003cc 	andi	r2,r2,15
 1830944:	1085883a 	add	r2,r2,r2
 1830948:	1085883a 	add	r2,r2,r2
 183094c:	e0bffa0d 	sth	r2,-24(fp)
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 1830950:	e0bffa0b 	ldhu	r2,-24(fp)
 1830954:	0085c83a 	sub	r2,zero,r2
 1830958:	10bfffcc 	andi	r2,r2,65535
 183095c:	10a0001c 	xori	r2,r2,32768
 1830960:	10a00004 	addi	r2,r2,-32768
 1830964:	100b883a 	mov	r5,r2
 1830968:	e13ffe17 	ldw	r4,-8(fp)
 183096c:	181a07c0 	call	181a07c <pbuf_header>
 1830970:	10803fcc 	andi	r2,r2,255
 1830974:	10013c1e 	bne	r2,zero,1830e68 <icmp_input+0x574>
 1830978:	e0bffe17 	ldw	r2,-8(fp)
 183097c:	1080020b 	ldhu	r2,8(r2)
 1830980:	10bfffcc 	andi	r2,r2,65535
 1830984:	10800130 	cmpltui	r2,r2,4
 1830988:	1001371e 	bne	r2,zero,1830e68 <icmp_input+0x574>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 183098c:	e0bffe17 	ldw	r2,-8(fp)
 1830990:	10800117 	ldw	r2,4(r2)
 1830994:	10800003 	ldbu	r2,0(r2)
 1830998:	e0bffa85 	stb	r2,-22(fp)
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 183099c:	e0bffa83 	ldbu	r2,-22(fp)
 18309a0:	10012a26 	beq	r2,zero,1830e4c <icmp_input+0x558>
 18309a4:	10800220 	cmpeqi	r2,r2,8
 18309a8:	10011926 	beq	r2,zero,1830e10 <icmp_input+0x51c>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
 18309ac:	00800044 	movi	r2,1
 18309b0:	e0bff915 	stw	r2,-28(fp)
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 18309b4:	d0a81117 	ldw	r2,-24508(gp)
 18309b8:	10803c0c 	andi	r2,r2,240
 18309bc:	10803818 	cmpnei	r2,r2,224
 18309c0:	1000011e 	bne	r2,zero,18309c8 <icmp_input+0xd4>
        accepted = 0;
 18309c4:	e03ff915 	stw	zero,-28(fp)
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 18309c8:	d0a81117 	ldw	r2,-24508(gp)
 18309cc:	e17fff17 	ldw	r5,-4(fp)
 18309d0:	1009883a 	mov	r4,r2
 18309d4:	18189b80 	call	18189b8 <ip4_addr_isbroadcast>
 18309d8:	10803fcc 	andi	r2,r2,255
 18309dc:	10000126 	beq	r2,zero,18309e4 <icmp_input+0xf0>
        accepted = 0;
 18309e0:	e03ff915 	stw	zero,-28(fp)
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
 18309e4:	e0bff917 	ldw	r2,-28(fp)
 18309e8:	10000a1e 	bne	r2,zero,1830a14 <icmp_input+0x120>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
 18309ec:	00806134 	movhi	r2,388
 18309f0:	109e7504 	addi	r2,r2,31188
 18309f4:	10803a17 	ldw	r2,232(r2)
 18309f8:	10c00044 	addi	r3,r2,1
 18309fc:	00806134 	movhi	r2,388
 1830a00:	109e7504 	addi	r2,r2,31188
 1830a04:	10c03a15 	stw	r3,232(r2)
        pbuf_free(p);
 1830a08:	e13ffe17 	ldw	r4,-8(fp)
 1830a0c:	181a22c0 	call	181a22c <pbuf_free>
        return;
 1830a10:	00013206 	br	1830edc <icmp_input+0x5e8>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 1830a14:	e0bffe17 	ldw	r2,-8(fp)
 1830a18:	1080020b 	ldhu	r2,8(r2)
 1830a1c:	10bfffcc 	andi	r2,r2,65535
 1830a20:	10800228 	cmpgeui	r2,r2,8
 1830a24:	10010f26 	beq	r2,zero,1830e64 <icmp_input+0x570>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
 1830a28:	e13ffe17 	ldw	r4,-8(fp)
 1830a2c:	18318100 	call	1831810 <inet_chksum_pbuf>
 1830a30:	10bfffcc 	andi	r2,r2,65535
 1830a34:	10000a26 	beq	r2,zero,1830a60 <icmp_input+0x16c>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
 1830a38:	e13ffe17 	ldw	r4,-8(fp)
 1830a3c:	181a22c0 	call	181a22c <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
 1830a40:	00806134 	movhi	r2,388
 1830a44:	109e7504 	addi	r2,r2,31188
 1830a48:	10803417 	ldw	r2,208(r2)
 1830a4c:	10c00044 	addi	r3,r2,1
 1830a50:	00806134 	movhi	r2,388
 1830a54:	109e7504 	addi	r2,r2,31188
 1830a58:	10c03415 	stw	r3,208(r2)
      snmp_inc_icmpinerrors();
      return;
 1830a5c:	00011f06 	br	1830edc <icmp_input+0x5e8>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 1830a60:	01400904 	movi	r5,36
 1830a64:	e13ffe17 	ldw	r4,-8(fp)
 1830a68:	181a07c0 	call	181a07c <pbuf_header>
 1830a6c:	10803fcc 	andi	r2,r2,255
 1830a70:	10002926 	beq	r2,zero,1830b18 <icmp_input+0x224>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
 1830a74:	e0bffa0f 	ldh	r2,-24(fp)
 1830a78:	100b883a 	mov	r5,r2
 1830a7c:	e13ffe17 	ldw	r4,-8(fp)
 1830a80:	181a07c0 	call	181a07c <pbuf_header>
 1830a84:	10803fcc 	andi	r2,r2,255
 1830a88:	1001011e 	bne	r2,zero,1830e90 <icmp_input+0x59c>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 1830a8c:	e0bffe17 	ldw	r2,-8(fp)
 1830a90:	1080020b 	ldhu	r2,8(r2)
 1830a94:	10bfffcc 	andi	r2,r2,65535
 1830a98:	000d883a 	mov	r6,zero
 1830a9c:	100b883a 	mov	r5,r2
 1830aa0:	01000084 	movi	r4,2
 1830aa4:	1819aa40 	call	1819aa4 <pbuf_alloc>
 1830aa8:	e0bffb15 	stw	r2,-20(fp)
      if (r == NULL) {
 1830aac:	e0bffb17 	ldw	r2,-20(fp)
 1830ab0:	1000f926 	beq	r2,zero,1830e98 <icmp_input+0x5a4>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 1830ab4:	e17ffe17 	ldw	r5,-8(fp)
 1830ab8:	e13ffb17 	ldw	r4,-20(fp)
 1830abc:	181a5cc0 	call	181a5cc <pbuf_copy>
 1830ac0:	10803fcc 	andi	r2,r2,255
 1830ac4:	1080201c 	xori	r2,r2,128
 1830ac8:	10bfe004 	addi	r2,r2,-128
 1830acc:	1000f41e 	bne	r2,zero,1830ea0 <icmp_input+0x5ac>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
 1830ad0:	e0bffb17 	ldw	r2,-20(fp)
 1830ad4:	10800117 	ldw	r2,4(r2)
 1830ad8:	e0bff815 	stw	r2,-32(fp)
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 1830adc:	e0bffa0b 	ldhu	r2,-24(fp)
 1830ae0:	0085c83a 	sub	r2,zero,r2
 1830ae4:	10bfffcc 	andi	r2,r2,65535
 1830ae8:	10a0001c 	xori	r2,r2,32768
 1830aec:	10a00004 	addi	r2,r2,-32768
 1830af0:	100b883a 	mov	r5,r2
 1830af4:	e13ffb17 	ldw	r4,-20(fp)
 1830af8:	181a07c0 	call	181a07c <pbuf_header>
 1830afc:	10803fcc 	andi	r2,r2,255
 1830b00:	1000e91e 	bne	r2,zero,1830ea8 <icmp_input+0x5b4>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
 1830b04:	e13ffe17 	ldw	r4,-8(fp)
 1830b08:	181a22c0 	call	181a22c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 1830b0c:	e0bffb17 	ldw	r2,-20(fp)
 1830b10:	e0bffe15 	stw	r2,-8(fp)
 1830b14:	00000506 	br	1830b2c <icmp_input+0x238>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 1830b18:	017ff704 	movi	r5,-36
 1830b1c:	e13ffe17 	ldw	r4,-8(fp)
 1830b20:	181a07c0 	call	181a07c <pbuf_header>
 1830b24:	10803fcc 	andi	r2,r2,255
 1830b28:	1000e11e 	bne	r2,zero,1830eb0 <icmp_input+0x5bc>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 1830b2c:	e0bffe17 	ldw	r2,-8(fp)
 1830b30:	10800117 	ldw	r2,4(r2)
 1830b34:	e0bffc15 	stw	r2,-16(fp)
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 1830b38:	d0e81117 	ldw	r3,-24508(gp)
 1830b3c:	e0bff817 	ldw	r2,-32(fp)
 1830b40:	19803fcc 	andi	r6,r3,255
 1830b44:	11000303 	ldbu	r4,12(r2)
 1830b48:	2008703a 	and	r4,r4,zero
 1830b4c:	200b883a 	mov	r5,r4
 1830b50:	3009883a 	mov	r4,r6
 1830b54:	2908b03a 	or	r4,r5,r4
 1830b58:	11000305 	stb	r4,12(r2)
 1830b5c:	1808d23a 	srli	r4,r3,8
 1830b60:	21803fcc 	andi	r6,r4,255
 1830b64:	11000343 	ldbu	r4,13(r2)
 1830b68:	2008703a 	and	r4,r4,zero
 1830b6c:	200b883a 	mov	r5,r4
 1830b70:	3009883a 	mov	r4,r6
 1830b74:	2908b03a 	or	r4,r5,r4
 1830b78:	11000345 	stb	r4,13(r2)
 1830b7c:	1808d43a 	srli	r4,r3,16
 1830b80:	21803fcc 	andi	r6,r4,255
 1830b84:	11000383 	ldbu	r4,14(r2)
 1830b88:	2008703a 	and	r4,r4,zero
 1830b8c:	200b883a 	mov	r5,r4
 1830b90:	3009883a 	mov	r4,r6
 1830b94:	2908b03a 	or	r4,r5,r4
 1830b98:	11000385 	stb	r4,14(r2)
 1830b9c:	180ad63a 	srli	r5,r3,24
 1830ba0:	10c003c3 	ldbu	r3,15(r2)
 1830ba4:	1806703a 	and	r3,r3,zero
 1830ba8:	1809883a 	mov	r4,r3
 1830bac:	2807883a 	mov	r3,r5
 1830bb0:	20c6b03a 	or	r3,r4,r3
 1830bb4:	10c003c5 	stb	r3,15(r2)
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 1830bb8:	d0e80f17 	ldw	r3,-24516(gp)
 1830bbc:	e0bff817 	ldw	r2,-32(fp)
 1830bc0:	19803fcc 	andi	r6,r3,255
 1830bc4:	11000403 	ldbu	r4,16(r2)
 1830bc8:	2008703a 	and	r4,r4,zero
 1830bcc:	200b883a 	mov	r5,r4
 1830bd0:	3009883a 	mov	r4,r6
 1830bd4:	2908b03a 	or	r4,r5,r4
 1830bd8:	11000405 	stb	r4,16(r2)
 1830bdc:	1808d23a 	srli	r4,r3,8
 1830be0:	21803fcc 	andi	r6,r4,255
 1830be4:	11000443 	ldbu	r4,17(r2)
 1830be8:	2008703a 	and	r4,r4,zero
 1830bec:	200b883a 	mov	r5,r4
 1830bf0:	3009883a 	mov	r4,r6
 1830bf4:	2908b03a 	or	r4,r5,r4
 1830bf8:	11000445 	stb	r4,17(r2)
 1830bfc:	1808d43a 	srli	r4,r3,16
 1830c00:	21803fcc 	andi	r6,r4,255
 1830c04:	11000483 	ldbu	r4,18(r2)
 1830c08:	2008703a 	and	r4,r4,zero
 1830c0c:	200b883a 	mov	r5,r4
 1830c10:	3009883a 	mov	r4,r6
 1830c14:	2908b03a 	or	r4,r5,r4
 1830c18:	11000485 	stb	r4,18(r2)
 1830c1c:	180ad63a 	srli	r5,r3,24
 1830c20:	10c004c3 	ldbu	r3,19(r2)
 1830c24:	1806703a 	and	r3,r3,zero
 1830c28:	1809883a 	mov	r4,r3
 1830c2c:	2807883a 	mov	r3,r5
 1830c30:	20c6b03a 	or	r3,r4,r3
 1830c34:	10c004c5 	stb	r3,19(r2)
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 1830c38:	e0bffc17 	ldw	r2,-16(fp)
 1830c3c:	10000005 	stb	zero,0(r2)
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 1830c40:	e0bffc17 	ldw	r2,-16(fp)
 1830c44:	10c00083 	ldbu	r3,2(r2)
 1830c48:	108000c3 	ldbu	r2,3(r2)
 1830c4c:	1004923a 	slli	r2,r2,8
 1830c50:	10c4b03a 	or	r2,r2,r3
 1830c54:	10bfffcc 	andi	r2,r2,65535
 1830c58:	10bffdf0 	cmpltui	r2,r2,65527
 1830c5c:	10001a1e 	bne	r2,zero,1830cc8 <icmp_input+0x3d4>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 1830c60:	e0bffc17 	ldw	r2,-16(fp)
 1830c64:	10c00083 	ldbu	r3,2(r2)
 1830c68:	108000c3 	ldbu	r2,3(r2)
 1830c6c:	1004923a 	slli	r2,r2,8
 1830c70:	10c4b03a 	or	r2,r2,r3
 1830c74:	10800244 	addi	r2,r2,9
 1830c78:	100d883a 	mov	r6,r2
 1830c7c:	e0bffc17 	ldw	r2,-16(fp)
 1830c80:	30ffffcc 	andi	r3,r6,65535
 1830c84:	19403fcc 	andi	r5,r3,255
 1830c88:	10c00083 	ldbu	r3,2(r2)
 1830c8c:	1806703a 	and	r3,r3,zero
 1830c90:	1809883a 	mov	r4,r3
 1830c94:	2807883a 	mov	r3,r5
 1830c98:	20c6b03a 	or	r3,r4,r3
 1830c9c:	10c00085 	stb	r3,2(r2)
 1830ca0:	30ffffcc 	andi	r3,r6,65535
 1830ca4:	1806d23a 	srli	r3,r3,8
 1830ca8:	197fffcc 	andi	r5,r3,65535
 1830cac:	10c000c3 	ldbu	r3,3(r2)
 1830cb0:	1806703a 	and	r3,r3,zero
 1830cb4:	1809883a 	mov	r4,r3
 1830cb8:	2807883a 	mov	r3,r5
 1830cbc:	20c6b03a 	or	r3,r4,r3
 1830cc0:	10c000c5 	stb	r3,3(r2)
 1830cc4:	00001906 	br	1830d2c <icmp_input+0x438>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 1830cc8:	e0bffc17 	ldw	r2,-16(fp)
 1830ccc:	10c00083 	ldbu	r3,2(r2)
 1830cd0:	108000c3 	ldbu	r2,3(r2)
 1830cd4:	1004923a 	slli	r2,r2,8
 1830cd8:	10c4b03a 	or	r2,r2,r3
 1830cdc:	10800204 	addi	r2,r2,8
 1830ce0:	100d883a 	mov	r6,r2
 1830ce4:	e0bffc17 	ldw	r2,-16(fp)
 1830ce8:	30ffffcc 	andi	r3,r6,65535
 1830cec:	19403fcc 	andi	r5,r3,255
 1830cf0:	10c00083 	ldbu	r3,2(r2)
 1830cf4:	1806703a 	and	r3,r3,zero
 1830cf8:	1809883a 	mov	r4,r3
 1830cfc:	2807883a 	mov	r3,r5
 1830d00:	20c6b03a 	or	r3,r4,r3
 1830d04:	10c00085 	stb	r3,2(r2)
 1830d08:	30ffffcc 	andi	r3,r6,65535
 1830d0c:	1806d23a 	srli	r3,r3,8
 1830d10:	197fffcc 	andi	r5,r3,65535
 1830d14:	10c000c3 	ldbu	r3,3(r2)
 1830d18:	1806703a 	and	r3,r3,zero
 1830d1c:	1809883a 	mov	r4,r3
 1830d20:	2807883a 	mov	r3,r5
 1830d24:	20c6b03a 	or	r3,r4,r3
 1830d28:	10c000c5 	stb	r3,3(r2)
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 1830d2c:	e0bff817 	ldw	r2,-32(fp)
 1830d30:	00c01004 	movi	r3,64
 1830d34:	10c00205 	stb	r3,8(r2)
    IPH_CHKSUM_SET(iphdr, 0);
 1830d38:	e0bff817 	ldw	r2,-32(fp)
 1830d3c:	10c00283 	ldbu	r3,10(r2)
 1830d40:	1806703a 	and	r3,r3,zero
 1830d44:	10c00285 	stb	r3,10(r2)
 1830d48:	10c002c3 	ldbu	r3,11(r2)
 1830d4c:	1806703a 	and	r3,r3,zero
 1830d50:	10c002c5 	stb	r3,11(r2)
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 1830d54:	01400504 	movi	r5,20
 1830d58:	e13ff817 	ldw	r4,-32(fp)
 1830d5c:	18317cc0 	call	18317cc <inet_chksum>
 1830d60:	100d883a 	mov	r6,r2
 1830d64:	e0bff817 	ldw	r2,-32(fp)
 1830d68:	30ffffcc 	andi	r3,r6,65535
 1830d6c:	19403fcc 	andi	r5,r3,255
 1830d70:	10c00283 	ldbu	r3,10(r2)
 1830d74:	1806703a 	and	r3,r3,zero
 1830d78:	1809883a 	mov	r4,r3
 1830d7c:	2807883a 	mov	r3,r5
 1830d80:	20c6b03a 	or	r3,r4,r3
 1830d84:	10c00285 	stb	r3,10(r2)
 1830d88:	30ffffcc 	andi	r3,r6,65535
 1830d8c:	1806d23a 	srli	r3,r3,8
 1830d90:	197fffcc 	andi	r5,r3,65535
 1830d94:	10c002c3 	ldbu	r3,11(r2)
 1830d98:	1806703a 	and	r3,r3,zero
 1830d9c:	1809883a 	mov	r4,r3
 1830da0:	2807883a 	mov	r3,r5
 1830da4:	20c6b03a 	or	r3,r4,r3
 1830da8:	10c002c5 	stb	r3,11(r2)
#endif /* CHECKSUM_GEN_IP */

    ICMP_STATS_INC(icmp.xmit);
 1830dac:	00806134 	movhi	r2,388
 1830db0:	109e7504 	addi	r2,r2,31188
 1830db4:	10803017 	ldw	r2,192(r2)
 1830db8:	10c00044 	addi	r3,r2,1
 1830dbc:	00806134 	movhi	r2,388
 1830dc0:	109e7504 	addi	r2,r2,31188
 1830dc4:	10c03015 	stw	r3,192(r2)
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 1830dc8:	e0bffa0f 	ldh	r2,-24(fp)
 1830dcc:	100b883a 	mov	r5,r2
 1830dd0:	e13ffe17 	ldw	r4,-8(fp)
 1830dd4:	181a07c0 	call	181a07c <pbuf_header>
 1830dd8:	10803fcc 	andi	r2,r2,255
 1830ddc:	10001d1e 	bne	r2,zero,1830e54 <icmp_input+0x560>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 1830de0:	e0bfff17 	ldw	r2,-4(fp)
 1830de4:	d8800215 	stw	r2,8(sp)
 1830de8:	00800044 	movi	r2,1
 1830dec:	d8800115 	stw	r2,4(sp)
 1830df0:	d8000015 	stw	zero,0(sp)
 1830df4:	01c01004 	movi	r7,64
 1830df8:	000d883a 	mov	r6,zero
 1830dfc:	d1681104 	addi	r5,gp,-24508
 1830e00:	e13ffe17 	ldw	r4,-8(fp)
 1830e04:	1831fa00 	call	1831fa0 <ip_output_if>
 1830e08:	e0bffd05 	stb	r2,-12(fp)
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 1830e0c:	00001106 	br	1830e54 <icmp_input+0x560>
  default:
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 1830e10:	00806134 	movhi	r2,388
 1830e14:	109e7504 	addi	r2,r2,31188
 1830e18:	10803817 	ldw	r2,224(r2)
 1830e1c:	10c00044 	addi	r3,r2,1
 1830e20:	00806134 	movhi	r2,388
 1830e24:	109e7504 	addi	r2,r2,31188
 1830e28:	10c03815 	stw	r3,224(r2)
    ICMP_STATS_INC(icmp.drop);
 1830e2c:	00806134 	movhi	r2,388
 1830e30:	109e7504 	addi	r2,r2,31188
 1830e34:	10803317 	ldw	r2,204(r2)
 1830e38:	10c00044 	addi	r3,r2,1
 1830e3c:	00806134 	movhi	r2,388
 1830e40:	109e7504 	addi	r2,r2,31188
 1830e44:	10c03315 	stw	r3,204(r2)
 1830e48:	00000306 	br	1830e58 <icmp_input+0x564>
#endif /* LWIP_DEBUG */
  switch (type) {
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    break; 
 1830e4c:	0001883a 	nop
 1830e50:	00000106 	br	1830e58 <icmp_input+0x564>
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 1830e54:	0001883a 	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 1830e58:	e13ffe17 	ldw	r4,-8(fp)
 1830e5c:	181a22c0 	call	181a22c <pbuf_free>
  return;
 1830e60:	00001e06 	br	1830edc <icmp_input+0x5e8>
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
 1830e64:	0001883a 	nop
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  return;
lenerr:
  pbuf_free(p);
 1830e68:	e13ffe17 	ldw	r4,-8(fp)
 1830e6c:	181a22c0 	call	181a22c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 1830e70:	00806134 	movhi	r2,388
 1830e74:	109e7504 	addi	r2,r2,31188
 1830e78:	10803517 	ldw	r2,212(r2)
 1830e7c:	10c00044 	addi	r3,r2,1
 1830e80:	00806134 	movhi	r2,388
 1830e84:	109e7504 	addi	r2,r2,31188
 1830e88:	10c03515 	stw	r3,212(r2)
  snmp_inc_icmpinerrors();
  return;
 1830e8c:	00001306 	br	1830edc <icmp_input+0x5e8>
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
 1830e90:	0001883a 	nop
 1830e94:	00000706 	br	1830eb4 <icmp_input+0x5c0>
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
      if (r == NULL) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
 1830e98:	0001883a 	nop
 1830e9c:	00000506 	br	1830eb4 <icmp_input+0x5c0>
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
 1830ea0:	0001883a 	nop
 1830ea4:	00000306 	br	1830eb4 <icmp_input+0x5c0>
      }
      iphdr = (struct ip_hdr *)r->payload;
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 1830ea8:	0001883a 	nop
 1830eac:	00000106 	br	1830eb4 <icmp_input+0x5c0>
      p = r;
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 1830eb0:	0001883a 	nop
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 1830eb4:	e13ffe17 	ldw	r4,-8(fp)
 1830eb8:	181a22c0 	call	181a22c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 1830ebc:	00806134 	movhi	r2,388
 1830ec0:	109e7504 	addi	r2,r2,31188
 1830ec4:	10803a17 	ldw	r2,232(r2)
 1830ec8:	10c00044 	addi	r3,r2,1
 1830ecc:	00806134 	movhi	r2,388
 1830ed0:	109e7504 	addi	r2,r2,31188
 1830ed4:	10c03a15 	stw	r3,232(r2)
  snmp_inc_icmpinerrors();
  return;
 1830ed8:	0001883a 	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
 1830edc:	e037883a 	mov	sp,fp
 1830ee0:	dfc00117 	ldw	ra,4(sp)
 1830ee4:	df000017 	ldw	fp,0(sp)
 1830ee8:	dec00204 	addi	sp,sp,8
 1830eec:	f800283a 	ret

01830ef0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 1830ef0:	defffc04 	addi	sp,sp,-16
 1830ef4:	dfc00315 	stw	ra,12(sp)
 1830ef8:	df000215 	stw	fp,8(sp)
 1830efc:	df000204 	addi	fp,sp,8
 1830f00:	e13ffe15 	stw	r4,-8(fp)
 1830f04:	e17fff15 	stw	r5,-4(fp)
  icmp_send_response(p, ICMP_DUR, t);
 1830f08:	e0bfff17 	ldw	r2,-4(fp)
 1830f0c:	10803fcc 	andi	r2,r2,255
 1830f10:	100d883a 	mov	r6,r2
 1830f14:	014000c4 	movi	r5,3
 1830f18:	e13ffe17 	ldw	r4,-8(fp)
 1830f1c:	1830f800 	call	1830f80 <icmp_send_response>
}
 1830f20:	0001883a 	nop
 1830f24:	e037883a 	mov	sp,fp
 1830f28:	dfc00117 	ldw	ra,4(sp)
 1830f2c:	df000017 	ldw	fp,0(sp)
 1830f30:	dec00204 	addi	sp,sp,8
 1830f34:	f800283a 	ret

01830f38 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 1830f38:	defffc04 	addi	sp,sp,-16
 1830f3c:	dfc00315 	stw	ra,12(sp)
 1830f40:	df000215 	stw	fp,8(sp)
 1830f44:	df000204 	addi	fp,sp,8
 1830f48:	e13ffe15 	stw	r4,-8(fp)
 1830f4c:	e17fff15 	stw	r5,-4(fp)
  icmp_send_response(p, ICMP_TE, t);
 1830f50:	e0bfff17 	ldw	r2,-4(fp)
 1830f54:	10803fcc 	andi	r2,r2,255
 1830f58:	100d883a 	mov	r6,r2
 1830f5c:	014002c4 	movi	r5,11
 1830f60:	e13ffe17 	ldw	r4,-8(fp)
 1830f64:	1830f800 	call	1830f80 <icmp_send_response>
}
 1830f68:	0001883a 	nop
 1830f6c:	e037883a 	mov	sp,fp
 1830f70:	dfc00117 	ldw	ra,4(sp)
 1830f74:	df000017 	ldw	fp,0(sp)
 1830f78:	dec00204 	addi	sp,sp,8
 1830f7c:	f800283a 	ret

01830f80 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 1830f80:	defff504 	addi	sp,sp,-44
 1830f84:	dfc00a15 	stw	ra,40(sp)
 1830f88:	df000915 	stw	fp,36(sp)
 1830f8c:	df000904 	addi	fp,sp,36
 1830f90:	e13ffd15 	stw	r4,-12(fp)
 1830f94:	2807883a 	mov	r3,r5
 1830f98:	3005883a 	mov	r2,r6
 1830f9c:	e0fffe05 	stb	r3,-8(fp)
 1830fa0:	e0bfff05 	stb	r2,-4(fp)
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 1830fa4:	000d883a 	mov	r6,zero
 1830fa8:	01400904 	movi	r5,36
 1830fac:	01000044 	movi	r4,1
 1830fb0:	1819aa40 	call	1819aa4 <pbuf_alloc>
 1830fb4:	e0bff915 	stw	r2,-28(fp)
                 PBUF_RAM);
  if (q == NULL) {
 1830fb8:	e0bff917 	ldw	r2,-28(fp)
 1830fbc:	10006226 	beq	r2,zero,1831148 <icmp_send_response+0x1c8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 1830fc0:	e0bffd17 	ldw	r2,-12(fp)
 1830fc4:	10800117 	ldw	r2,4(r2)
 1830fc8:	e0bffa15 	stw	r2,-24(fp)
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 1830fcc:	e0bff917 	ldw	r2,-28(fp)
 1830fd0:	10800117 	ldw	r2,4(r2)
 1830fd4:	e0bffb15 	stw	r2,-20(fp)
  icmphdr->type = type;
 1830fd8:	e0bffb17 	ldw	r2,-20(fp)
 1830fdc:	e0fffe03 	ldbu	r3,-8(fp)
 1830fe0:	10c00005 	stb	r3,0(r2)
  icmphdr->code = code;
 1830fe4:	e0bffb17 	ldw	r2,-20(fp)
 1830fe8:	e0ffff03 	ldbu	r3,-4(fp)
 1830fec:	10c00045 	stb	r3,1(r2)
  icmphdr->id = 0;
 1830ff0:	e0bffb17 	ldw	r2,-20(fp)
 1830ff4:	10c00103 	ldbu	r3,4(r2)
 1830ff8:	1806703a 	and	r3,r3,zero
 1830ffc:	10c00105 	stb	r3,4(r2)
 1831000:	10c00143 	ldbu	r3,5(r2)
 1831004:	1806703a 	and	r3,r3,zero
 1831008:	10c00145 	stb	r3,5(r2)
  icmphdr->seqno = 0;
 183100c:	e0bffb17 	ldw	r2,-20(fp)
 1831010:	10c00183 	ldbu	r3,6(r2)
 1831014:	1806703a 	and	r3,r3,zero
 1831018:	10c00185 	stb	r3,6(r2)
 183101c:	10c001c3 	ldbu	r3,7(r2)
 1831020:	1806703a 	and	r3,r3,zero
 1831024:	10c001c5 	stb	r3,7(r2)

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 1831028:	e0bff917 	ldw	r2,-28(fp)
 183102c:	10800117 	ldw	r2,4(r2)
 1831030:	10c00204 	addi	r3,r2,8
 1831034:	e0bffd17 	ldw	r2,-12(fp)
 1831038:	10800117 	ldw	r2,4(r2)
 183103c:	01800704 	movi	r6,28
 1831040:	100b883a 	mov	r5,r2
 1831044:	1809883a 	mov	r4,r3
 1831048:	1805f980 	call	1805f98 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 183104c:	e0bffb17 	ldw	r2,-20(fp)
 1831050:	10c00083 	ldbu	r3,2(r2)
 1831054:	1806703a 	and	r3,r3,zero
 1831058:	10c00085 	stb	r3,2(r2)
 183105c:	10c000c3 	ldbu	r3,3(r2)
 1831060:	1806703a 	and	r3,r3,zero
 1831064:	10c000c5 	stb	r3,3(r2)
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 1831068:	e0bff917 	ldw	r2,-28(fp)
 183106c:	1080028b 	ldhu	r2,10(r2)
 1831070:	10bfffcc 	andi	r2,r2,65535
 1831074:	100b883a 	mov	r5,r2
 1831078:	e13ffb17 	ldw	r4,-20(fp)
 183107c:	18317cc0 	call	18317cc <inet_chksum>
 1831080:	100d883a 	mov	r6,r2
 1831084:	e0bffb17 	ldw	r2,-20(fp)
 1831088:	30ffffcc 	andi	r3,r6,65535
 183108c:	19403fcc 	andi	r5,r3,255
 1831090:	10c00083 	ldbu	r3,2(r2)
 1831094:	1806703a 	and	r3,r3,zero
 1831098:	1809883a 	mov	r4,r3
 183109c:	2807883a 	mov	r3,r5
 18310a0:	20c6b03a 	or	r3,r4,r3
 18310a4:	10c00085 	stb	r3,2(r2)
 18310a8:	30ffffcc 	andi	r3,r6,65535
 18310ac:	1806d23a 	srli	r3,r3,8
 18310b0:	197fffcc 	andi	r5,r3,65535
 18310b4:	10c000c3 	ldbu	r3,3(r2)
 18310b8:	1806703a 	and	r3,r3,zero
 18310bc:	1809883a 	mov	r4,r3
 18310c0:	2807883a 	mov	r3,r5
 18310c4:	20c6b03a 	or	r3,r4,r3
 18310c8:	10c000c5 	stb	r3,3(r2)
  ICMP_STATS_INC(icmp.xmit);
 18310cc:	00806134 	movhi	r2,388
 18310d0:	109e7504 	addi	r2,r2,31188
 18310d4:	10803017 	ldw	r2,192(r2)
 18310d8:	10c00044 	addi	r3,r2,1
 18310dc:	00806134 	movhi	r2,388
 18310e0:	109e7504 	addi	r2,r2,31188
 18310e4:	10c03015 	stw	r3,192(r2)
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 18310e8:	e0bffa17 	ldw	r2,-24(fp)
 18310ec:	10c00303 	ldbu	r3,12(r2)
 18310f0:	11000343 	ldbu	r4,13(r2)
 18310f4:	2008923a 	slli	r4,r4,8
 18310f8:	20c6b03a 	or	r3,r4,r3
 18310fc:	11000383 	ldbu	r4,14(r2)
 1831100:	2008943a 	slli	r4,r4,16
 1831104:	20c6b03a 	or	r3,r4,r3
 1831108:	108003c3 	ldbu	r2,15(r2)
 183110c:	1004963a 	slli	r2,r2,24
 1831110:	10c4b03a 	or	r2,r2,r3
 1831114:	e0bffc15 	stw	r2,-16(fp)
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 1831118:	e0fffc04 	addi	r3,fp,-16
 183111c:	00800044 	movi	r2,1
 1831120:	d8800115 	stw	r2,4(sp)
 1831124:	d8000015 	stw	zero,0(sp)
 1831128:	01c01004 	movi	r7,64
 183112c:	180d883a 	mov	r6,r3
 1831130:	000b883a 	mov	r5,zero
 1831134:	e13ff917 	ldw	r4,-28(fp)
 1831138:	18325ec0 	call	18325ec <ip_output>
  pbuf_free(q);
 183113c:	e13ff917 	ldw	r4,-28(fp)
 1831140:	181a22c0 	call	181a22c <pbuf_free>
 1831144:	00000106 	br	183114c <icmp_send_response+0x1cc>
  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
                 PBUF_RAM);
  if (q == NULL) {
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    return;
 1831148:	0001883a 	nop
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  pbuf_free(q);
}
 183114c:	e037883a 	mov	sp,fp
 1831150:	dfc00117 	ldw	ra,4(sp)
 1831154:	df000017 	ldw	fp,0(sp)
 1831158:	dec00204 	addi	sp,sp,8
 183115c:	f800283a 	ret

01831160 <lwip_standard_chksum>:
 * by Curt McDowell, Broadcom Corp. December 8th, 2005
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 1831160:	defff604 	addi	sp,sp,-40
 1831164:	df000915 	stw	fp,36(sp)
 1831168:	df000904 	addi	fp,sp,36
 183116c:	e13ffe15 	stw	r4,-8(fp)
 1831170:	e17fff15 	stw	r5,-4(fp)
  u8_t *pb = (u8_t *)dataptr;
 1831174:	e0bffe17 	ldw	r2,-8(fp)
 1831178:	e0bff715 	stw	r2,-36(fp)
  u16_t *ps, t = 0;
 183117c:	e03ffd0d 	sth	zero,-12(fp)
  u32_t *pl;
  u32_t sum = 0, tmp;
 1831180:	e03ffa15 	stw	zero,-24(fp)
  /* starts at odd byte address? */
  int odd = ((mem_ptr_t)pb & 1);
 1831184:	e0bff717 	ldw	r2,-36(fp)
 1831188:	1080004c 	andi	r2,r2,1
 183118c:	e0bffc15 	stw	r2,-16(fp)

  if (odd && len > 0) {
 1831190:	e0bffc17 	ldw	r2,-16(fp)
 1831194:	10000c26 	beq	r2,zero,18311c8 <lwip_standard_chksum+0x68>
 1831198:	e0bfff17 	ldw	r2,-4(fp)
 183119c:	00800a0e 	bge	zero,r2,18311c8 <lwip_standard_chksum+0x68>
    ((u8_t *)&t)[1] = *pb++;
 18311a0:	e0bffd04 	addi	r2,fp,-12
 18311a4:	10800044 	addi	r2,r2,1
 18311a8:	e0fff717 	ldw	r3,-36(fp)
 18311ac:	19000044 	addi	r4,r3,1
 18311b0:	e13ff715 	stw	r4,-36(fp)
 18311b4:	18c00003 	ldbu	r3,0(r3)
 18311b8:	10c00005 	stb	r3,0(r2)
    len--;
 18311bc:	e0bfff17 	ldw	r2,-4(fp)
 18311c0:	10bfffc4 	addi	r2,r2,-1
 18311c4:	e0bfff15 	stw	r2,-4(fp)
  }

  ps = (u16_t *)pb;
 18311c8:	e0bff717 	ldw	r2,-36(fp)
 18311cc:	e0bff815 	stw	r2,-32(fp)

  if (((mem_ptr_t)ps & 3) && len > 1) {
 18311d0:	e0bff817 	ldw	r2,-32(fp)
 18311d4:	108000cc 	andi	r2,r2,3
 18311d8:	10000e26 	beq	r2,zero,1831214 <lwip_standard_chksum+0xb4>
 18311dc:	e0bfff17 	ldw	r2,-4(fp)
 18311e0:	10800090 	cmplti	r2,r2,2
 18311e4:	10000b1e 	bne	r2,zero,1831214 <lwip_standard_chksum+0xb4>
    sum += *ps++;
 18311e8:	e0bff817 	ldw	r2,-32(fp)
 18311ec:	10c00084 	addi	r3,r2,2
 18311f0:	e0fff815 	stw	r3,-32(fp)
 18311f4:	1080000b 	ldhu	r2,0(r2)
 18311f8:	10bfffcc 	andi	r2,r2,65535
 18311fc:	e0fffa17 	ldw	r3,-24(fp)
 1831200:	1885883a 	add	r2,r3,r2
 1831204:	e0bffa15 	stw	r2,-24(fp)
    len -= 2;
 1831208:	e0bfff17 	ldw	r2,-4(fp)
 183120c:	10bfff84 	addi	r2,r2,-2
 1831210:	e0bfff15 	stw	r2,-4(fp)
  }

  pl = (u32_t *)ps;
 1831214:	e0bff817 	ldw	r2,-32(fp)
 1831218:	e0bff915 	stw	r2,-28(fp)

  while (len > 7)  {
 183121c:	00001d06 	br	1831294 <lwip_standard_chksum+0x134>
    tmp = sum + *pl++;          /* ping */
 1831220:	e0bff917 	ldw	r2,-28(fp)
 1831224:	10c00104 	addi	r3,r2,4
 1831228:	e0fff915 	stw	r3,-28(fp)
 183122c:	10c00017 	ldw	r3,0(r2)
 1831230:	e0bffa17 	ldw	r2,-24(fp)
 1831234:	1885883a 	add	r2,r3,r2
 1831238:	e0bffb15 	stw	r2,-20(fp)
    if (tmp < sum) {
 183123c:	e0fffb17 	ldw	r3,-20(fp)
 1831240:	e0bffa17 	ldw	r2,-24(fp)
 1831244:	1880032e 	bgeu	r3,r2,1831254 <lwip_standard_chksum+0xf4>
      tmp++;                    /* add back carry */
 1831248:	e0bffb17 	ldw	r2,-20(fp)
 183124c:	10800044 	addi	r2,r2,1
 1831250:	e0bffb15 	stw	r2,-20(fp)
    }

    sum = tmp + *pl++;          /* pong */
 1831254:	e0bff917 	ldw	r2,-28(fp)
 1831258:	10c00104 	addi	r3,r2,4
 183125c:	e0fff915 	stw	r3,-28(fp)
 1831260:	10c00017 	ldw	r3,0(r2)
 1831264:	e0bffb17 	ldw	r2,-20(fp)
 1831268:	1885883a 	add	r2,r3,r2
 183126c:	e0bffa15 	stw	r2,-24(fp)
    if (sum < tmp) {
 1831270:	e0fffa17 	ldw	r3,-24(fp)
 1831274:	e0bffb17 	ldw	r2,-20(fp)
 1831278:	1880032e 	bgeu	r3,r2,1831288 <lwip_standard_chksum+0x128>
      sum++;                    /* add back carry */
 183127c:	e0bffa17 	ldw	r2,-24(fp)
 1831280:	10800044 	addi	r2,r2,1
 1831284:	e0bffa15 	stw	r2,-24(fp)
    }

    len -= 8;
 1831288:	e0bfff17 	ldw	r2,-4(fp)
 183128c:	10bffe04 	addi	r2,r2,-8
 1831290:	e0bfff15 	stw	r2,-4(fp)
    len -= 2;
  }

  pl = (u32_t *)ps;

  while (len > 7)  {
 1831294:	e0bfff17 	ldw	r2,-4(fp)
 1831298:	10800208 	cmpgei	r2,r2,8
 183129c:	103fe01e 	bne	r2,zero,1831220 <__ram_exceptions_end+0xff820f30>

    len -= 8;
  }

  /* make room in upper bits */
  sum = FOLD_U32T(sum);
 18312a0:	e0bffa17 	ldw	r2,-24(fp)
 18312a4:	1006d43a 	srli	r3,r2,16
 18312a8:	e0bffa17 	ldw	r2,-24(fp)
 18312ac:	10bfffcc 	andi	r2,r2,65535
 18312b0:	1885883a 	add	r2,r3,r2
 18312b4:	e0bffa15 	stw	r2,-24(fp)

  ps = (u16_t *)pl;
 18312b8:	e0bff917 	ldw	r2,-28(fp)
 18312bc:	e0bff815 	stw	r2,-32(fp)

  /* 16-bit aligned word remaining? */
  while (len > 1) {
 18312c0:	00000b06 	br	18312f0 <lwip_standard_chksum+0x190>
    sum += *ps++;
 18312c4:	e0bff817 	ldw	r2,-32(fp)
 18312c8:	10c00084 	addi	r3,r2,2
 18312cc:	e0fff815 	stw	r3,-32(fp)
 18312d0:	1080000b 	ldhu	r2,0(r2)
 18312d4:	10bfffcc 	andi	r2,r2,65535
 18312d8:	e0fffa17 	ldw	r3,-24(fp)
 18312dc:	1885883a 	add	r2,r3,r2
 18312e0:	e0bffa15 	stw	r2,-24(fp)
    len -= 2;
 18312e4:	e0bfff17 	ldw	r2,-4(fp)
 18312e8:	10bfff84 	addi	r2,r2,-2
 18312ec:	e0bfff15 	stw	r2,-4(fp)
  sum = FOLD_U32T(sum);

  ps = (u16_t *)pl;

  /* 16-bit aligned word remaining? */
  while (len > 1) {
 18312f0:	e0bfff17 	ldw	r2,-4(fp)
 18312f4:	10800088 	cmpgei	r2,r2,2
 18312f8:	103ff21e 	bne	r2,zero,18312c4 <__ram_exceptions_end+0xff820fd4>
    sum += *ps++;
    len -= 2;
  }

  /* dangling tail byte remaining? */
  if (len > 0) {                /* include odd byte */
 18312fc:	e0bfff17 	ldw	r2,-4(fp)
 1831300:	0080040e 	bge	zero,r2,1831314 <lwip_standard_chksum+0x1b4>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 1831304:	e0bffd04 	addi	r2,fp,-12
 1831308:	e0fff817 	ldw	r3,-32(fp)
 183130c:	18c00003 	ldbu	r3,0(r3)
 1831310:	10c00005 	stb	r3,0(r2)
  }

  sum += t;                     /* add end bytes */
 1831314:	e0bffd0b 	ldhu	r2,-12(fp)
 1831318:	10bfffcc 	andi	r2,r2,65535
 183131c:	e0fffa17 	ldw	r3,-24(fp)
 1831320:	1885883a 	add	r2,r3,r2
 1831324:	e0bffa15 	stw	r2,-24(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 1831328:	e0bffa17 	ldw	r2,-24(fp)
 183132c:	1006d43a 	srli	r3,r2,16
 1831330:	e0bffa17 	ldw	r2,-24(fp)
 1831334:	10bfffcc 	andi	r2,r2,65535
 1831338:	1885883a 	add	r2,r3,r2
 183133c:	e0bffa15 	stw	r2,-24(fp)
  sum = FOLD_U32T(sum);
 1831340:	e0bffa17 	ldw	r2,-24(fp)
 1831344:	1006d43a 	srli	r3,r2,16
 1831348:	e0bffa17 	ldw	r2,-24(fp)
 183134c:	10bfffcc 	andi	r2,r2,65535
 1831350:	1885883a 	add	r2,r3,r2
 1831354:	e0bffa15 	stw	r2,-24(fp)

  if (odd) {
 1831358:	e0bffc17 	ldw	r2,-16(fp)
 183135c:	10000826 	beq	r2,zero,1831380 <lwip_standard_chksum+0x220>
    sum = SWAP_BYTES_IN_WORD(sum);
 1831360:	e0bffa17 	ldw	r2,-24(fp)
 1831364:	10bfc00c 	andi	r2,r2,65280
 1831368:	1006d23a 	srli	r3,r2,8
 183136c:	e0bffa17 	ldw	r2,-24(fp)
 1831370:	1004923a 	slli	r2,r2,8
 1831374:	10bfffcc 	andi	r2,r2,65535
 1831378:	1884b03a 	or	r2,r3,r2
 183137c:	e0bffa15 	stw	r2,-24(fp)
  }

  return (u16_t)sum;
 1831380:	e0bffa17 	ldw	r2,-24(fp)
}
 1831384:	e037883a 	mov	sp,fp
 1831388:	df000017 	ldw	fp,0(sp)
 183138c:	dec00104 	addi	sp,sp,4
 1831390:	f800283a 	ret

01831394 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
 1831394:	defff504 	addi	sp,sp,-44
 1831398:	dfc00a15 	stw	ra,40(sp)
 183139c:	df000915 	stw	fp,36(sp)
 18313a0:	df000904 	addi	fp,sp,36
 18313a4:	e13ffb15 	stw	r4,-20(fp)
 18313a8:	e17ffc15 	stw	r5,-16(fp)
 18313ac:	e1bffd15 	stw	r6,-12(fp)
 18313b0:	3807883a 	mov	r3,r7
 18313b4:	e0800217 	ldw	r2,8(fp)
 18313b8:	e0fffe05 	stb	r3,-8(fp)
 18313bc:	e0bfff0d 	sth	r2,-4(fp)
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 18313c0:	e03ff715 	stw	zero,-36(fp)
  swapped = 0;
 18313c4:	e03ff905 	stb	zero,-28(fp)
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
 18313c8:	e0bffb17 	ldw	r2,-20(fp)
 18313cc:	e0bff815 	stw	r2,-32(fp)
 18313d0:	00002606 	br	183146c <inet_chksum_pseudo+0xd8>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 18313d4:	e0bff817 	ldw	r2,-32(fp)
 18313d8:	10c00117 	ldw	r3,4(r2)
 18313dc:	e0bff817 	ldw	r2,-32(fp)
 18313e0:	1080028b 	ldhu	r2,10(r2)
 18313e4:	10bfffcc 	andi	r2,r2,65535
 18313e8:	100b883a 	mov	r5,r2
 18313ec:	1809883a 	mov	r4,r3
 18313f0:	18311600 	call	1831160 <lwip_standard_chksum>
 18313f4:	10bfffcc 	andi	r2,r2,65535
 18313f8:	e0fff717 	ldw	r3,-36(fp)
 18313fc:	1885883a 	add	r2,r3,r2
 1831400:	e0bff715 	stw	r2,-36(fp)
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 1831404:	e0bff717 	ldw	r2,-36(fp)
 1831408:	1006d43a 	srli	r3,r2,16
 183140c:	e0bff717 	ldw	r2,-36(fp)
 1831410:	10bfffcc 	andi	r2,r2,65535
 1831414:	1885883a 	add	r2,r3,r2
 1831418:	e0bff715 	stw	r2,-36(fp)
    if (q->len % 2 != 0) {
 183141c:	e0bff817 	ldw	r2,-32(fp)
 1831420:	1080028b 	ldhu	r2,10(r2)
 1831424:	1080004c 	andi	r2,r2,1
 1831428:	10bfffcc 	andi	r2,r2,65535
 183142c:	10000c26 	beq	r2,zero,1831460 <inet_chksum_pseudo+0xcc>
      swapped = 1 - swapped;
 1831430:	e0bff903 	ldbu	r2,-28(fp)
 1831434:	00c00044 	movi	r3,1
 1831438:	1885c83a 	sub	r2,r3,r2
 183143c:	e0bff905 	stb	r2,-28(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
 1831440:	e0bff717 	ldw	r2,-36(fp)
 1831444:	10bfc00c 	andi	r2,r2,65280
 1831448:	1006d23a 	srli	r3,r2,8
 183144c:	e0bff717 	ldw	r2,-36(fp)
 1831450:	1004923a 	slli	r2,r2,8
 1831454:	10bfffcc 	andi	r2,r2,65535
 1831458:	1884b03a 	or	r2,r3,r2
 183145c:	e0bff715 	stw	r2,-36(fp)
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
 1831460:	e0bff817 	ldw	r2,-32(fp)
 1831464:	10800017 	ldw	r2,0(r2)
 1831468:	e0bff815 	stw	r2,-32(fp)
 183146c:	e0bff817 	ldw	r2,-32(fp)
 1831470:	103fd81e 	bne	r2,zero,18313d4 <__ram_exceptions_end+0xff8210e4>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 1831474:	e0bff903 	ldbu	r2,-28(fp)
 1831478:	10000826 	beq	r2,zero,183149c <inet_chksum_pseudo+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
 183147c:	e0bff717 	ldw	r2,-36(fp)
 1831480:	10bfc00c 	andi	r2,r2,65280
 1831484:	1006d23a 	srli	r3,r2,8
 1831488:	e0bff717 	ldw	r2,-36(fp)
 183148c:	1004923a 	slli	r2,r2,8
 1831490:	10bfffcc 	andi	r2,r2,65535
 1831494:	1884b03a 	or	r2,r3,r2
 1831498:	e0bff715 	stw	r2,-36(fp)
  }
  addr = ip4_addr_get_u32(src);
 183149c:	e0bffc17 	ldw	r2,-16(fp)
 18314a0:	10800017 	ldw	r2,0(r2)
 18314a4:	e0bffa15 	stw	r2,-24(fp)
  acc += (addr & 0xffffUL);
 18314a8:	e0bffa17 	ldw	r2,-24(fp)
 18314ac:	10bfffcc 	andi	r2,r2,65535
 18314b0:	e0fff717 	ldw	r3,-36(fp)
 18314b4:	1885883a 	add	r2,r3,r2
 18314b8:	e0bff715 	stw	r2,-36(fp)
  acc += ((addr >> 16) & 0xffffUL);
 18314bc:	e0bffa17 	ldw	r2,-24(fp)
 18314c0:	1004d43a 	srli	r2,r2,16
 18314c4:	e0fff717 	ldw	r3,-36(fp)
 18314c8:	1885883a 	add	r2,r3,r2
 18314cc:	e0bff715 	stw	r2,-36(fp)
  addr = ip4_addr_get_u32(dest);
 18314d0:	e0bffd17 	ldw	r2,-12(fp)
 18314d4:	10800017 	ldw	r2,0(r2)
 18314d8:	e0bffa15 	stw	r2,-24(fp)
  acc += (addr & 0xffffUL);
 18314dc:	e0bffa17 	ldw	r2,-24(fp)
 18314e0:	10bfffcc 	andi	r2,r2,65535
 18314e4:	e0fff717 	ldw	r3,-36(fp)
 18314e8:	1885883a 	add	r2,r3,r2
 18314ec:	e0bff715 	stw	r2,-36(fp)
  acc += ((addr >> 16) & 0xffffUL);
 18314f0:	e0bffa17 	ldw	r2,-24(fp)
 18314f4:	1004d43a 	srli	r2,r2,16
 18314f8:	e0fff717 	ldw	r3,-36(fp)
 18314fc:	1885883a 	add	r2,r3,r2
 1831500:	e0bff715 	stw	r2,-36(fp)
  acc += (u32_t)htons((u16_t)proto);
 1831504:	e0bffe03 	ldbu	r2,-8(fp)
 1831508:	1004923a 	slli	r2,r2,8
 183150c:	1007883a 	mov	r3,r2
 1831510:	e0bff717 	ldw	r2,-36(fp)
 1831514:	10c5883a 	add	r2,r2,r3
 1831518:	e0bff715 	stw	r2,-36(fp)
  acc += (u32_t)htons(proto_len);
 183151c:	e0bfff0b 	ldhu	r2,-4(fp)
 1831520:	1004d23a 	srli	r2,r2,8
 1831524:	10ffffcc 	andi	r3,r2,65535
 1831528:	e0bfff0b 	ldhu	r2,-4(fp)
 183152c:	1004923a 	slli	r2,r2,8
 1831530:	10bfffcc 	andi	r2,r2,65535
 1831534:	1884b03a 	or	r2,r3,r2
 1831538:	1007883a 	mov	r3,r2
 183153c:	e0bff717 	ldw	r2,-36(fp)
 1831540:	10c5883a 	add	r2,r2,r3
 1831544:	e0bff715 	stw	r2,-36(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
 1831548:	e0bff717 	ldw	r2,-36(fp)
 183154c:	1006d43a 	srli	r3,r2,16
 1831550:	e0bff717 	ldw	r2,-36(fp)
 1831554:	10bfffcc 	andi	r2,r2,65535
 1831558:	1885883a 	add	r2,r3,r2
 183155c:	e0bff715 	stw	r2,-36(fp)
  acc = FOLD_U32T(acc);
 1831560:	e0bff717 	ldw	r2,-36(fp)
 1831564:	1006d43a 	srli	r3,r2,16
 1831568:	e0bff717 	ldw	r2,-36(fp)
 183156c:	10bfffcc 	andi	r2,r2,65535
 1831570:	1885883a 	add	r2,r3,r2
 1831574:	e0bff715 	stw	r2,-36(fp)
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 1831578:	e0bff717 	ldw	r2,-36(fp)
 183157c:	0084303a 	nor	r2,zero,r2
}
 1831580:	e037883a 	mov	sp,fp
 1831584:	dfc00117 	ldw	ra,4(sp)
 1831588:	df000017 	ldw	fp,0(sp)
 183158c:	dec00204 	addi	sp,sp,8
 1831590:	f800283a 	ret

01831594 <inet_chksum_pseudo_partial>:
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len, u16_t chksum_len)
{
 1831594:	defff404 	addi	sp,sp,-48
 1831598:	dfc00b15 	stw	ra,44(sp)
 183159c:	df000a15 	stw	fp,40(sp)
 18315a0:	df000a04 	addi	fp,sp,40
 18315a4:	e13ffa15 	stw	r4,-24(fp)
 18315a8:	e17ffb15 	stw	r5,-20(fp)
 18315ac:	e1bffc15 	stw	r6,-16(fp)
 18315b0:	3809883a 	mov	r4,r7
 18315b4:	e0c00217 	ldw	r3,8(fp)
 18315b8:	e0800317 	ldw	r2,12(fp)
 18315bc:	e13ffd05 	stb	r4,-12(fp)
 18315c0:	e0fffe0d 	sth	r3,-8(fp)
 18315c4:	e0bfff0d 	sth	r2,-4(fp)
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;
  u16_t chklen;

  acc = 0;
 18315c8:	e03ff615 	stw	zero,-40(fp)
  swapped = 0;
 18315cc:	e03ff805 	stb	zero,-32(fp)
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 18315d0:	e0bffa17 	ldw	r2,-24(fp)
 18315d4:	e0bff715 	stw	r2,-36(fp)
 18315d8:	00003006 	br	183169c <inet_chksum_pseudo_partial+0x108>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
 18315dc:	e0bff717 	ldw	r2,-36(fp)
 18315e0:	1080028b 	ldhu	r2,10(r2)
 18315e4:	e0bff88d 	sth	r2,-30(fp)
    if (chklen > chksum_len) {
 18315e8:	e0bff88b 	ldhu	r2,-30(fp)
 18315ec:	e0ffff0b 	ldhu	r3,-4(fp)
 18315f0:	1880022e 	bgeu	r3,r2,18315fc <inet_chksum_pseudo_partial+0x68>
      chklen = chksum_len;
 18315f4:	e0bfff0b 	ldhu	r2,-4(fp)
 18315f8:	e0bff88d 	sth	r2,-30(fp)
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
 18315fc:	e0bff717 	ldw	r2,-36(fp)
 1831600:	10800117 	ldw	r2,4(r2)
 1831604:	e0fff88b 	ldhu	r3,-30(fp)
 1831608:	180b883a 	mov	r5,r3
 183160c:	1009883a 	mov	r4,r2
 1831610:	18311600 	call	1831160 <lwip_standard_chksum>
 1831614:	10bfffcc 	andi	r2,r2,65535
 1831618:	e0fff617 	ldw	r3,-40(fp)
 183161c:	1885883a 	add	r2,r3,r2
 1831620:	e0bff615 	stw	r2,-40(fp)
    chksum_len -= chklen;
 1831624:	e0ffff0b 	ldhu	r3,-4(fp)
 1831628:	e0bff88b 	ldhu	r2,-30(fp)
 183162c:	1885c83a 	sub	r2,r3,r2
 1831630:	e0bfff0d 	sth	r2,-4(fp)
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
 1831634:	e0bff617 	ldw	r2,-40(fp)
 1831638:	1006d43a 	srli	r3,r2,16
 183163c:	e0bff617 	ldw	r2,-40(fp)
 1831640:	10bfffcc 	andi	r2,r2,65535
 1831644:	1885883a 	add	r2,r3,r2
 1831648:	e0bff615 	stw	r2,-40(fp)
    if (q->len % 2 != 0) {
 183164c:	e0bff717 	ldw	r2,-36(fp)
 1831650:	1080028b 	ldhu	r2,10(r2)
 1831654:	1080004c 	andi	r2,r2,1
 1831658:	10bfffcc 	andi	r2,r2,65535
 183165c:	10000c26 	beq	r2,zero,1831690 <inet_chksum_pseudo_partial+0xfc>
      swapped = 1 - swapped;
 1831660:	e0bff803 	ldbu	r2,-32(fp)
 1831664:	00c00044 	movi	r3,1
 1831668:	1885c83a 	sub	r2,r3,r2
 183166c:	e0bff805 	stb	r2,-32(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
 1831670:	e0bff617 	ldw	r2,-40(fp)
 1831674:	10bfc00c 	andi	r2,r2,65280
 1831678:	1006d23a 	srli	r3,r2,8
 183167c:	e0bff617 	ldw	r2,-40(fp)
 1831680:	1004923a 	slli	r2,r2,8
 1831684:	10bfffcc 	andi	r2,r2,65535
 1831688:	1884b03a 	or	r2,r3,r2
 183168c:	e0bff615 	stw	r2,-40(fp)
  u16_t chklen;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 1831690:	e0bff717 	ldw	r2,-36(fp)
 1831694:	10800017 	ldw	r2,0(r2)
 1831698:	e0bff715 	stw	r2,-36(fp)
 183169c:	e0bff717 	ldw	r2,-36(fp)
 18316a0:	10000226 	beq	r2,zero,18316ac <inet_chksum_pseudo_partial+0x118>
 18316a4:	e0bfff0b 	ldhu	r2,-4(fp)
 18316a8:	103fcc1e 	bne	r2,zero,18315dc <__ram_exceptions_end+0xff8212ec>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 18316ac:	e0bff803 	ldbu	r2,-32(fp)
 18316b0:	10000826 	beq	r2,zero,18316d4 <inet_chksum_pseudo_partial+0x140>
    acc = SWAP_BYTES_IN_WORD(acc);
 18316b4:	e0bff617 	ldw	r2,-40(fp)
 18316b8:	10bfc00c 	andi	r2,r2,65280
 18316bc:	1006d23a 	srli	r3,r2,8
 18316c0:	e0bff617 	ldw	r2,-40(fp)
 18316c4:	1004923a 	slli	r2,r2,8
 18316c8:	10bfffcc 	andi	r2,r2,65535
 18316cc:	1884b03a 	or	r2,r3,r2
 18316d0:	e0bff615 	stw	r2,-40(fp)
  }
  addr = ip4_addr_get_u32(src);
 18316d4:	e0bffb17 	ldw	r2,-20(fp)
 18316d8:	10800017 	ldw	r2,0(r2)
 18316dc:	e0bff915 	stw	r2,-28(fp)
  acc += (addr & 0xffffUL);
 18316e0:	e0bff917 	ldw	r2,-28(fp)
 18316e4:	10bfffcc 	andi	r2,r2,65535
 18316e8:	e0fff617 	ldw	r3,-40(fp)
 18316ec:	1885883a 	add	r2,r3,r2
 18316f0:	e0bff615 	stw	r2,-40(fp)
  acc += ((addr >> 16) & 0xffffUL);
 18316f4:	e0bff917 	ldw	r2,-28(fp)
 18316f8:	1004d43a 	srli	r2,r2,16
 18316fc:	e0fff617 	ldw	r3,-40(fp)
 1831700:	1885883a 	add	r2,r3,r2
 1831704:	e0bff615 	stw	r2,-40(fp)
  addr = ip4_addr_get_u32(dest);
 1831708:	e0bffc17 	ldw	r2,-16(fp)
 183170c:	10800017 	ldw	r2,0(r2)
 1831710:	e0bff915 	stw	r2,-28(fp)
  acc += (addr & 0xffffUL);
 1831714:	e0bff917 	ldw	r2,-28(fp)
 1831718:	10bfffcc 	andi	r2,r2,65535
 183171c:	e0fff617 	ldw	r3,-40(fp)
 1831720:	1885883a 	add	r2,r3,r2
 1831724:	e0bff615 	stw	r2,-40(fp)
  acc += ((addr >> 16) & 0xffffUL);
 1831728:	e0bff917 	ldw	r2,-28(fp)
 183172c:	1004d43a 	srli	r2,r2,16
 1831730:	e0fff617 	ldw	r3,-40(fp)
 1831734:	1885883a 	add	r2,r3,r2
 1831738:	e0bff615 	stw	r2,-40(fp)
  acc += (u32_t)htons((u16_t)proto);
 183173c:	e0bffd03 	ldbu	r2,-12(fp)
 1831740:	1004923a 	slli	r2,r2,8
 1831744:	1007883a 	mov	r3,r2
 1831748:	e0bff617 	ldw	r2,-40(fp)
 183174c:	10c5883a 	add	r2,r2,r3
 1831750:	e0bff615 	stw	r2,-40(fp)
  acc += (u32_t)htons(proto_len);
 1831754:	e0bffe0b 	ldhu	r2,-8(fp)
 1831758:	1004d23a 	srli	r2,r2,8
 183175c:	10ffffcc 	andi	r3,r2,65535
 1831760:	e0bffe0b 	ldhu	r2,-8(fp)
 1831764:	1004923a 	slli	r2,r2,8
 1831768:	10bfffcc 	andi	r2,r2,65535
 183176c:	1884b03a 	or	r2,r3,r2
 1831770:	1007883a 	mov	r3,r2
 1831774:	e0bff617 	ldw	r2,-40(fp)
 1831778:	10c5883a 	add	r2,r2,r3
 183177c:	e0bff615 	stw	r2,-40(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
 1831780:	e0bff617 	ldw	r2,-40(fp)
 1831784:	1006d43a 	srli	r3,r2,16
 1831788:	e0bff617 	ldw	r2,-40(fp)
 183178c:	10bfffcc 	andi	r2,r2,65535
 1831790:	1885883a 	add	r2,r3,r2
 1831794:	e0bff615 	stw	r2,-40(fp)
  acc = FOLD_U32T(acc);
 1831798:	e0bff617 	ldw	r2,-40(fp)
 183179c:	1006d43a 	srli	r3,r2,16
 18317a0:	e0bff617 	ldw	r2,-40(fp)
 18317a4:	10bfffcc 	andi	r2,r2,65535
 18317a8:	1885883a 	add	r2,r3,r2
 18317ac:	e0bff615 	stw	r2,-40(fp)
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 18317b0:	e0bff617 	ldw	r2,-40(fp)
 18317b4:	0084303a 	nor	r2,zero,r2
}
 18317b8:	e037883a 	mov	sp,fp
 18317bc:	dfc00117 	ldw	ra,4(sp)
 18317c0:	df000017 	ldw	fp,0(sp)
 18317c4:	dec00204 	addi	sp,sp,8
 18317c8:	f800283a 	ret

018317cc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 18317cc:	defffc04 	addi	sp,sp,-16
 18317d0:	dfc00315 	stw	ra,12(sp)
 18317d4:	df000215 	stw	fp,8(sp)
 18317d8:	df000204 	addi	fp,sp,8
 18317dc:	e13ffe15 	stw	r4,-8(fp)
 18317e0:	2805883a 	mov	r2,r5
 18317e4:	e0bfff0d 	sth	r2,-4(fp)
  return ~LWIP_CHKSUM(dataptr, len);
 18317e8:	e0bfff0b 	ldhu	r2,-4(fp)
 18317ec:	100b883a 	mov	r5,r2
 18317f0:	e13ffe17 	ldw	r4,-8(fp)
 18317f4:	18311600 	call	1831160 <lwip_standard_chksum>
 18317f8:	0084303a 	nor	r2,zero,r2
}
 18317fc:	e037883a 	mov	sp,fp
 1831800:	dfc00117 	ldw	ra,4(sp)
 1831804:	df000017 	ldw	fp,0(sp)
 1831808:	dec00204 	addi	sp,sp,8
 183180c:	f800283a 	ret

01831810 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 1831810:	defffa04 	addi	sp,sp,-24
 1831814:	dfc00515 	stw	ra,20(sp)
 1831818:	df000415 	stw	fp,16(sp)
 183181c:	df000404 	addi	fp,sp,16
 1831820:	e13fff15 	stw	r4,-4(fp)
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 1831824:	e03ffc15 	stw	zero,-16(fp)
  swapped = 0;
 1831828:	e03ffe05 	stb	zero,-8(fp)
  for(q = p; q != NULL; q = q->next) {
 183182c:	e0bfff17 	ldw	r2,-4(fp)
 1831830:	e0bffd15 	stw	r2,-12(fp)
 1831834:	00002606 	br	18318d0 <inet_chksum_pbuf+0xc0>
    acc += LWIP_CHKSUM(q->payload, q->len);
 1831838:	e0bffd17 	ldw	r2,-12(fp)
 183183c:	10c00117 	ldw	r3,4(r2)
 1831840:	e0bffd17 	ldw	r2,-12(fp)
 1831844:	1080028b 	ldhu	r2,10(r2)
 1831848:	10bfffcc 	andi	r2,r2,65535
 183184c:	100b883a 	mov	r5,r2
 1831850:	1809883a 	mov	r4,r3
 1831854:	18311600 	call	1831160 <lwip_standard_chksum>
 1831858:	10bfffcc 	andi	r2,r2,65535
 183185c:	e0fffc17 	ldw	r3,-16(fp)
 1831860:	1885883a 	add	r2,r3,r2
 1831864:	e0bffc15 	stw	r2,-16(fp)
    acc = FOLD_U32T(acc);
 1831868:	e0bffc17 	ldw	r2,-16(fp)
 183186c:	1006d43a 	srli	r3,r2,16
 1831870:	e0bffc17 	ldw	r2,-16(fp)
 1831874:	10bfffcc 	andi	r2,r2,65535
 1831878:	1885883a 	add	r2,r3,r2
 183187c:	e0bffc15 	stw	r2,-16(fp)
    if (q->len % 2 != 0) {
 1831880:	e0bffd17 	ldw	r2,-12(fp)
 1831884:	1080028b 	ldhu	r2,10(r2)
 1831888:	1080004c 	andi	r2,r2,1
 183188c:	10bfffcc 	andi	r2,r2,65535
 1831890:	10000c26 	beq	r2,zero,18318c4 <inet_chksum_pbuf+0xb4>
      swapped = 1 - swapped;
 1831894:	e0bffe03 	ldbu	r2,-8(fp)
 1831898:	00c00044 	movi	r3,1
 183189c:	1885c83a 	sub	r2,r3,r2
 18318a0:	e0bffe05 	stb	r2,-8(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
 18318a4:	e0bffc17 	ldw	r2,-16(fp)
 18318a8:	10bfc00c 	andi	r2,r2,65280
 18318ac:	1006d23a 	srli	r3,r2,8
 18318b0:	e0bffc17 	ldw	r2,-16(fp)
 18318b4:	1004923a 	slli	r2,r2,8
 18318b8:	10bfffcc 	andi	r2,r2,65535
 18318bc:	1884b03a 	or	r2,r3,r2
 18318c0:	e0bffc15 	stw	r2,-16(fp)
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
 18318c4:	e0bffd17 	ldw	r2,-12(fp)
 18318c8:	10800017 	ldw	r2,0(r2)
 18318cc:	e0bffd15 	stw	r2,-12(fp)
 18318d0:	e0bffd17 	ldw	r2,-12(fp)
 18318d4:	103fd81e 	bne	r2,zero,1831838 <__ram_exceptions_end+0xff821548>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 18318d8:	e0bffe03 	ldbu	r2,-8(fp)
 18318dc:	10000826 	beq	r2,zero,1831900 <inet_chksum_pbuf+0xf0>
    acc = SWAP_BYTES_IN_WORD(acc);
 18318e0:	e0bffc17 	ldw	r2,-16(fp)
 18318e4:	10bfc00c 	andi	r2,r2,65280
 18318e8:	1006d23a 	srli	r3,r2,8
 18318ec:	e0bffc17 	ldw	r2,-16(fp)
 18318f0:	1004923a 	slli	r2,r2,8
 18318f4:	10bfffcc 	andi	r2,r2,65535
 18318f8:	1884b03a 	or	r2,r3,r2
 18318fc:	e0bffc15 	stw	r2,-16(fp)
  }
  return (u16_t)~(acc & 0xffffUL);
 1831900:	e0bffc17 	ldw	r2,-16(fp)
 1831904:	0084303a 	nor	r2,zero,r2
}
 1831908:	e037883a 	mov	sp,fp
 183190c:	dfc00117 	ldw	ra,4(sp)
 1831910:	df000017 	ldw	fp,0(sp)
 1831914:	dec00204 	addi	sp,sp,8
 1831918:	f800283a 	ret

0183191c <lwip_chksum_copy>:
 * For architectures with big caches, data might still be in cache when
 * generating the checksum after copying.
 */
u16_t
lwip_chksum_copy(void *dst, const void *src, u16_t len)
{
 183191c:	defffb04 	addi	sp,sp,-20
 1831920:	dfc00415 	stw	ra,16(sp)
 1831924:	df000315 	stw	fp,12(sp)
 1831928:	df000304 	addi	fp,sp,12
 183192c:	e13ffd15 	stw	r4,-12(fp)
 1831930:	e17ffe15 	stw	r5,-8(fp)
 1831934:	3005883a 	mov	r2,r6
 1831938:	e0bfff0d 	sth	r2,-4(fp)
  MEMCPY(dst, src, len);
 183193c:	e0bfff0b 	ldhu	r2,-4(fp)
 1831940:	100d883a 	mov	r6,r2
 1831944:	e17ffe17 	ldw	r5,-8(fp)
 1831948:	e13ffd17 	ldw	r4,-12(fp)
 183194c:	1805f980 	call	1805f98 <memcpy>
  return LWIP_CHKSUM(dst, len);
 1831950:	e0bfff0b 	ldhu	r2,-4(fp)
 1831954:	100b883a 	mov	r5,r2
 1831958:	e13ffd17 	ldw	r4,-12(fp)
 183195c:	18311600 	call	1831160 <lwip_standard_chksum>
}
 1831960:	e037883a 	mov	sp,fp
 1831964:	dfc00117 	ldw	ra,4(sp)
 1831968:	df000017 	ldw	fp,0(sp)
 183196c:	dec00204 	addi	sp,sp,8
 1831970:	f800283a 	ret

01831974 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *src, ip_addr_t *dest)
{
 1831974:	defffc04 	addi	sp,sp,-16
 1831978:	df000315 	stw	fp,12(sp)
 183197c:	df000304 	addi	fp,sp,12
 1831980:	e13ffe15 	stw	r4,-8(fp)
 1831984:	e17fff15 	stw	r5,-4(fp)
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 1831988:	d0a7ef17 	ldw	r2,-24644(gp)
 183198c:	e0bffd15 	stw	r2,-12(fp)
 1831990:	00001d06 	br	1831a08 <ip_route+0x94>
    /* network mask matches? */
    if (netif_is_up(netif)) {
 1831994:	e0bffd17 	ldw	r2,-12(fp)
 1831998:	10800e43 	ldbu	r2,57(r2)
 183199c:	10803fcc 	andi	r2,r2,255
 18319a0:	1080004c 	andi	r2,r2,1
 18319a4:	10001526 	beq	r2,zero,18319fc <ip_route+0x88>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 18319a8:	e0bfff17 	ldw	r2,-4(fp)
 18319ac:	10c00017 	ldw	r3,0(r2)
 18319b0:	e0bffd17 	ldw	r2,-12(fp)
 18319b4:	10800117 	ldw	r2,4(r2)
 18319b8:	1886f03a 	xor	r3,r3,r2
 18319bc:	e0bffd17 	ldw	r2,-12(fp)
 18319c0:	10800217 	ldw	r2,8(r2)
 18319c4:	1884703a 	and	r2,r3,r2
 18319c8:	10000c1e 	bne	r2,zero,18319fc <ip_route+0x88>
        if (!src || !src->addr || ip_addr_cmp(src, &(netif->ip_addr))) {
 18319cc:	e0bffe17 	ldw	r2,-8(fp)
 18319d0:	10000826 	beq	r2,zero,18319f4 <ip_route+0x80>
 18319d4:	e0bffe17 	ldw	r2,-8(fp)
 18319d8:	10800017 	ldw	r2,0(r2)
 18319dc:	10000526 	beq	r2,zero,18319f4 <ip_route+0x80>
 18319e0:	e0bffe17 	ldw	r2,-8(fp)
 18319e4:	10c00017 	ldw	r3,0(r2)
 18319e8:	e0bffd17 	ldw	r2,-12(fp)
 18319ec:	10800117 	ldw	r2,4(r2)
 18319f0:	1880021e 	bne	r3,r2,18319fc <ip_route+0x88>
        /* return netif on which to forward IP packet */
        return netif;
 18319f4:	e0bffd17 	ldw	r2,-12(fp)
 18319f8:	00001606 	br	1831a54 <ip_route+0xe0>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 18319fc:	e0bffd17 	ldw	r2,-12(fp)
 1831a00:	10800017 	ldw	r2,0(r2)
 1831a04:	e0bffd15 	stw	r2,-12(fp)
 1831a08:	e0bffd17 	ldw	r2,-12(fp)
 1831a0c:	103fe11e 	bne	r2,zero,1831994 <__ram_exceptions_end+0xff8216a4>
        return netif;
      }
    }
  }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 1831a10:	d0a7f017 	ldw	r2,-24640(gp)
 1831a14:	10000526 	beq	r2,zero,1831a2c <ip_route+0xb8>
 1831a18:	d0a7f017 	ldw	r2,-24640(gp)
 1831a1c:	10800e43 	ldbu	r2,57(r2)
 1831a20:	10803fcc 	andi	r2,r2,255
 1831a24:	1080004c 	andi	r2,r2,1
 1831a28:	1000091e 	bne	r2,zero,1831a50 <ip_route+0xdc>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 1831a2c:	00806134 	movhi	r2,388
 1831a30:	109e7504 	addi	r2,r2,31188
 1831a34:	10802b17 	ldw	r2,172(r2)
 1831a38:	10c00044 	addi	r3,r2,1
 1831a3c:	00806134 	movhi	r2,388
 1831a40:	109e7504 	addi	r2,r2,31188
 1831a44:	10c02b15 	stw	r3,172(r2)
    snmp_inc_ipoutnoroutes();
    return NULL;
 1831a48:	0005883a 	mov	r2,zero
 1831a4c:	00000106 	br	1831a54 <ip_route+0xe0>
  }
  /* no matching netif found, use default netif */
  return netif_default;
 1831a50:	d0a7f017 	ldw	r2,-24640(gp)
}
 1831a54:	e037883a 	mov	sp,fp
 1831a58:	df000017 	ldw	fp,0(sp)
 1831a5c:	dec00104 	addi	sp,sp,4
 1831a60:	f800283a 	ret

01831a64 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 1831a64:	defff604 	addi	sp,sp,-40
 1831a68:	dfc00915 	stw	ra,36(sp)
 1831a6c:	df000815 	stw	fp,32(sp)
 1831a70:	df000804 	addi	fp,sp,32
 1831a74:	e13ffe15 	stw	r4,-8(fp)
 1831a78:	e17fff15 	stw	r5,-4(fp)
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
 1831a7c:	00800044 	movi	r2,1
 1831a80:	e0bffa15 	stw	r2,-24(fp)
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  IP_STATS_INC(ip.recv);
 1831a84:	00806134 	movhi	r2,388
 1831a88:	109e7504 	addi	r2,r2,31188
 1831a8c:	10802517 	ldw	r2,148(r2)
 1831a90:	10c00044 	addi	r3,r2,1
 1831a94:	00806134 	movhi	r2,388
 1831a98:	109e7504 	addi	r2,r2,31188
 1831a9c:	10c02515 	stw	r3,148(r2)
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 1831aa0:	e0bffe17 	ldw	r2,-8(fp)
 1831aa4:	10800117 	ldw	r2,4(r2)
 1831aa8:	e0bff815 	stw	r2,-32(fp)
  if (IPH_V(iphdr) != 4) {
 1831aac:	e0bff817 	ldw	r2,-32(fp)
 1831ab0:	10800003 	ldbu	r2,0(r2)
 1831ab4:	10803fcc 	andi	r2,r2,255
 1831ab8:	1004d13a 	srli	r2,r2,4
 1831abc:	10803fcc 	andi	r2,r2,255
 1831ac0:	10800120 	cmpeqi	r2,r2,4
 1831ac4:	1000121e 	bne	r2,zero,1831b10 <ip_input+0xac>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 1831ac8:	e13ffe17 	ldw	r4,-8(fp)
 1831acc:	181a22c0 	call	181a22c <pbuf_free>
    IP_STATS_INC(ip.err);
 1831ad0:	00806134 	movhi	r2,388
 1831ad4:	109e7504 	addi	r2,r2,31188
 1831ad8:	10802e17 	ldw	r2,184(r2)
 1831adc:	10c00044 	addi	r3,r2,1
 1831ae0:	00806134 	movhi	r2,388
 1831ae4:	109e7504 	addi	r2,r2,31188
 1831ae8:	10c02e15 	stw	r3,184(r2)
    IP_STATS_INC(ip.drop);
 1831aec:	00806134 	movhi	r2,388
 1831af0:	109e7504 	addi	r2,r2,31188
 1831af4:	10802717 	ldw	r2,156(r2)
 1831af8:	10c00044 	addi	r3,r2,1
 1831afc:	00806134 	movhi	r2,388
 1831b00:	109e7504 	addi	r2,r2,31188
 1831b04:	10c02715 	stw	r3,156(r2)
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 1831b08:	0005883a 	mov	r2,zero
 1831b0c:	00011f06 	br	1831f8c <ip_input+0x528>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 1831b10:	e0bff817 	ldw	r2,-32(fp)
 1831b14:	10800003 	ldbu	r2,0(r2)
 1831b18:	10803fcc 	andi	r2,r2,255
 1831b1c:	108003cc 	andi	r2,r2,15
 1831b20:	e0bffc0d 	sth	r2,-16(fp)
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 1831b24:	e0bffc0b 	ldhu	r2,-16(fp)
 1831b28:	1085883a 	add	r2,r2,r2
 1831b2c:	1085883a 	add	r2,r2,r2
 1831b30:	e0bffc0d 	sth	r2,-16(fp)
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 1831b34:	e0bff817 	ldw	r2,-32(fp)
 1831b38:	10c00083 	ldbu	r3,2(r2)
 1831b3c:	108000c3 	ldbu	r2,3(r2)
 1831b40:	1004923a 	slli	r2,r2,8
 1831b44:	10c4b03a 	or	r2,r2,r3
 1831b48:	10bfffcc 	andi	r2,r2,65535
 1831b4c:	1004d23a 	srli	r2,r2,8
 1831b50:	1009883a 	mov	r4,r2
 1831b54:	e0bff817 	ldw	r2,-32(fp)
 1831b58:	10c00083 	ldbu	r3,2(r2)
 1831b5c:	108000c3 	ldbu	r2,3(r2)
 1831b60:	1004923a 	slli	r2,r2,8
 1831b64:	10c4b03a 	or	r2,r2,r3
 1831b68:	10bfffcc 	andi	r2,r2,65535
 1831b6c:	1004923a 	slli	r2,r2,8
 1831b70:	2084b03a 	or	r2,r4,r2
 1831b74:	e0bffc8d 	sth	r2,-14(fp)

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 1831b78:	e0bffe17 	ldw	r2,-8(fp)
 1831b7c:	1080028b 	ldhu	r2,10(r2)
 1831b80:	10ffffcc 	andi	r3,r2,65535
 1831b84:	e0bffc0b 	ldhu	r2,-16(fp)
 1831b88:	18800536 	bltu	r3,r2,1831ba0 <ip_input+0x13c>
 1831b8c:	e0bffe17 	ldw	r2,-8(fp)
 1831b90:	1080020b 	ldhu	r2,8(r2)
 1831b94:	10ffffcc 	andi	r3,r2,65535
 1831b98:	e0bffc8b 	ldhu	r2,-14(fp)
 1831b9c:	1880122e 	bgeu	r3,r2,1831be8 <ip_input+0x184>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 1831ba0:	e13ffe17 	ldw	r4,-8(fp)
 1831ba4:	181a22c0 	call	181a22c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 1831ba8:	00806134 	movhi	r2,388
 1831bac:	109e7504 	addi	r2,r2,31188
 1831bb0:	10802917 	ldw	r2,164(r2)
 1831bb4:	10c00044 	addi	r3,r2,1
 1831bb8:	00806134 	movhi	r2,388
 1831bbc:	109e7504 	addi	r2,r2,31188
 1831bc0:	10c02915 	stw	r3,164(r2)
    IP_STATS_INC(ip.drop);
 1831bc4:	00806134 	movhi	r2,388
 1831bc8:	109e7504 	addi	r2,r2,31188
 1831bcc:	10802717 	ldw	r2,156(r2)
 1831bd0:	10c00044 	addi	r3,r2,1
 1831bd4:	00806134 	movhi	r2,388
 1831bd8:	109e7504 	addi	r2,r2,31188
 1831bdc:	10c02715 	stw	r3,156(r2)
    snmp_inc_ipindiscards();
    return ERR_OK;
 1831be0:	0005883a 	mov	r2,zero
 1831be4:	0000e906 	br	1831f8c <ip_input+0x528>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 1831be8:	e0bffc0b 	ldhu	r2,-16(fp)
 1831bec:	100b883a 	mov	r5,r2
 1831bf0:	e13ff817 	ldw	r4,-32(fp)
 1831bf4:	18317cc0 	call	18317cc <inet_chksum>
 1831bf8:	10bfffcc 	andi	r2,r2,65535
 1831bfc:	10001226 	beq	r2,zero,1831c48 <ip_input+0x1e4>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
 1831c00:	e13ffe17 	ldw	r4,-8(fp)
 1831c04:	181a22c0 	call	181a22c <pbuf_free>
    IP_STATS_INC(ip.chkerr);
 1831c08:	00806134 	movhi	r2,388
 1831c0c:	109e7504 	addi	r2,r2,31188
 1831c10:	10802817 	ldw	r2,160(r2)
 1831c14:	10c00044 	addi	r3,r2,1
 1831c18:	00806134 	movhi	r2,388
 1831c1c:	109e7504 	addi	r2,r2,31188
 1831c20:	10c02815 	stw	r3,160(r2)
    IP_STATS_INC(ip.drop);
 1831c24:	00806134 	movhi	r2,388
 1831c28:	109e7504 	addi	r2,r2,31188
 1831c2c:	10802717 	ldw	r2,156(r2)
 1831c30:	10c00044 	addi	r3,r2,1
 1831c34:	00806134 	movhi	r2,388
 1831c38:	109e7504 	addi	r2,r2,31188
 1831c3c:	10c02715 	stw	r3,156(r2)
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 1831c40:	0005883a 	mov	r2,zero
 1831c44:	0000d106 	br	1831f8c <ip_input+0x528>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
 1831c48:	e0bffc8b 	ldhu	r2,-14(fp)
 1831c4c:	100b883a 	mov	r5,r2
 1831c50:	e13ffe17 	ldw	r4,-8(fp)
 1831c54:	1819f740 	call	1819f74 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 1831c58:	e0bff817 	ldw	r2,-32(fp)
 1831c5c:	10c00403 	ldbu	r3,16(r2)
 1831c60:	11000443 	ldbu	r4,17(r2)
 1831c64:	2008923a 	slli	r4,r4,8
 1831c68:	20c6b03a 	or	r3,r4,r3
 1831c6c:	11000483 	ldbu	r4,18(r2)
 1831c70:	2008943a 	slli	r4,r4,16
 1831c74:	20c6b03a 	or	r3,r4,r3
 1831c78:	108004c3 	ldbu	r2,19(r2)
 1831c7c:	1004963a 	slli	r2,r2,24
 1831c80:	10c4b03a 	or	r2,r2,r3
 1831c84:	d0a81115 	stw	r2,-24508(gp)
  ip_addr_copy(current_iphdr_src, iphdr->src);
 1831c88:	e0bff817 	ldw	r2,-32(fp)
 1831c8c:	10c00303 	ldbu	r3,12(r2)
 1831c90:	11000343 	ldbu	r4,13(r2)
 1831c94:	2008923a 	slli	r4,r4,8
 1831c98:	20c6b03a 	or	r3,r4,r3
 1831c9c:	11000383 	ldbu	r4,14(r2)
 1831ca0:	2008943a 	slli	r4,r4,16
 1831ca4:	20c6b03a 	or	r3,r4,r3
 1831ca8:	108003c3 	ldbu	r2,15(r2)
 1831cac:	1004963a 	slli	r2,r2,24
 1831cb0:	10c4b03a 	or	r2,r2,r3
 1831cb4:	d0a80f15 	stw	r2,-24516(gp)
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 1831cb8:	00800044 	movi	r2,1
 1831cbc:	e0bffb15 	stw	r2,-20(fp)
    netif = inp;
 1831cc0:	e0bfff17 	ldw	r2,-4(fp)
 1831cc4:	e0bff915 	stw	r2,-28(fp)
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 1831cc8:	e0bff917 	ldw	r2,-28(fp)
 1831ccc:	10800e43 	ldbu	r2,57(r2)
 1831cd0:	10803fcc 	andi	r2,r2,255
 1831cd4:	1080004c 	andi	r2,r2,1
 1831cd8:	10001026 	beq	r2,zero,1831d1c <ip_input+0x2b8>
 1831cdc:	e0bff917 	ldw	r2,-28(fp)
 1831ce0:	10800104 	addi	r2,r2,4
 1831ce4:	10000d26 	beq	r2,zero,1831d1c <ip_input+0x2b8>
 1831ce8:	e0bff917 	ldw	r2,-28(fp)
 1831cec:	10800117 	ldw	r2,4(r2)
 1831cf0:	10000a26 	beq	r2,zero,1831d1c <ip_input+0x2b8>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 1831cf4:	d0e81117 	ldw	r3,-24508(gp)
 1831cf8:	e0bff917 	ldw	r2,-28(fp)
 1831cfc:	10800117 	ldw	r2,4(r2)
 1831d00:	18801726 	beq	r3,r2,1831d60 <ip_input+0x2fc>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 1831d04:	d0a81117 	ldw	r2,-24508(gp)
 1831d08:	e17ff917 	ldw	r5,-28(fp)
 1831d0c:	1009883a 	mov	r4,r2
 1831d10:	18189b80 	call	18189b8 <ip4_addr_isbroadcast>
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 1831d14:	10803fcc 	andi	r2,r2,255
 1831d18:	1000111e 	bne	r2,zero,1831d60 <ip_input+0x2fc>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 1831d1c:	e0bffb17 	ldw	r2,-20(fp)
 1831d20:	10000426 	beq	r2,zero,1831d34 <ip_input+0x2d0>
        first = 0;
 1831d24:	e03ffb15 	stw	zero,-20(fp)
        netif = netif_list;
 1831d28:	d0a7ef17 	ldw	r2,-24644(gp)
 1831d2c:	e0bff915 	stw	r2,-28(fp)
 1831d30:	00000306 	br	1831d40 <ip_input+0x2dc>
      } else {
        netif = netif->next;
 1831d34:	e0bff917 	ldw	r2,-28(fp)
 1831d38:	10800017 	ldw	r2,0(r2)
 1831d3c:	e0bff915 	stw	r2,-28(fp)
      }
      if (netif == inp) {
 1831d40:	e0fff917 	ldw	r3,-28(fp)
 1831d44:	e0bfff17 	ldw	r2,-4(fp)
 1831d48:	1880031e 	bne	r3,r2,1831d58 <ip_input+0x2f4>
        netif = netif->next;
 1831d4c:	e0bff917 	ldw	r2,-28(fp)
 1831d50:	10800017 	ldw	r2,0(r2)
 1831d54:	e0bff915 	stw	r2,-28(fp)
      }
    } while(netif != NULL);
 1831d58:	e0bff917 	ldw	r2,-28(fp)
 1831d5c:	103fda1e 	bne	r2,zero,1831cc8 <__ram_exceptions_end+0xff8219d8>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 1831d60:	e0bff917 	ldw	r2,-28(fp)
 1831d64:	1000141e 	bne	r2,zero,1831db8 <ip_input+0x354>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 1831d68:	e0bff817 	ldw	r2,-32(fp)
 1831d6c:	10800243 	ldbu	r2,9(r2)
 1831d70:	10803fcc 	andi	r2,r2,255
 1831d74:	10800458 	cmpnei	r2,r2,17
 1831d78:	10000f1e 	bne	r2,zero,1831db8 <ip_input+0x354>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 1831d7c:	e0bffc0b 	ldhu	r2,-16(fp)
 1831d80:	e0fff817 	ldw	r3,-32(fp)
 1831d84:	1885883a 	add	r2,r3,r2
 1831d88:	e0bffd15 	stw	r2,-12(fp)
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 1831d8c:	e0bffd17 	ldw	r2,-12(fp)
 1831d90:	10c00083 	ldbu	r3,2(r2)
 1831d94:	108000c3 	ldbu	r2,3(r2)
 1831d98:	1004923a 	slli	r2,r2,8
 1831d9c:	10c4b03a 	or	r2,r2,r3
 1831da0:	10bfffcc 	andi	r2,r2,65535
 1831da4:	10910018 	cmpnei	r2,r2,17408
 1831da8:	1000031e 	bne	r2,zero,1831db8 <ip_input+0x354>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
 1831dac:	e0bfff17 	ldw	r2,-4(fp)
 1831db0:	e0bff915 	stw	r2,-28(fp)
        check_ip_src = 0;
 1831db4:	e03ffa15 	stw	zero,-24(fp)
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
 1831db8:	e0bffa17 	ldw	r2,-24(fp)
 1831dbc:	10001726 	beq	r2,zero,1831e1c <ip_input+0x3b8>
 1831dc0:	d0a80f17 	ldw	r2,-24516(gp)
 1831dc4:	10001526 	beq	r2,zero,1831e1c <ip_input+0x3b8>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 1831dc8:	d0a80f17 	ldw	r2,-24516(gp)
 1831dcc:	e17fff17 	ldw	r5,-4(fp)
 1831dd0:	1009883a 	mov	r4,r2
 1831dd4:	18189b80 	call	18189b8 <ip4_addr_isbroadcast>
 1831dd8:	10803fcc 	andi	r2,r2,255
 1831ddc:	1000041e 	bne	r2,zero,1831df0 <ip_input+0x38c>
         (ip_addr_ismulticast(&current_iphdr_src))) {
 1831de0:	d0a80f17 	ldw	r2,-24516(gp)
 1831de4:	10803c0c 	andi	r2,r2,240
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 1831de8:	10803818 	cmpnei	r2,r2,224
 1831dec:	10000b1e 	bne	r2,zero,1831e1c <ip_input+0x3b8>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 1831df0:	e13ffe17 	ldw	r4,-8(fp)
 1831df4:	181a22c0 	call	181a22c <pbuf_free>
      IP_STATS_INC(ip.drop);
 1831df8:	00806134 	movhi	r2,388
 1831dfc:	109e7504 	addi	r2,r2,31188
 1831e00:	10802717 	ldw	r2,156(r2)
 1831e04:	10c00044 	addi	r3,r2,1
 1831e08:	00806134 	movhi	r2,388
 1831e0c:	109e7504 	addi	r2,r2,31188
 1831e10:	10c02715 	stw	r3,156(r2)
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
 1831e14:	0005883a 	mov	r2,zero
 1831e18:	00005c06 	br	1831f8c <ip_input+0x528>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 1831e1c:	e0bff917 	ldw	r2,-28(fp)
 1831e20:	1000041e 	bne	r2,zero,1831e34 <ip_input+0x3d0>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
 1831e24:	e13ffe17 	ldw	r4,-8(fp)
 1831e28:	181a22c0 	call	181a22c <pbuf_free>
    return ERR_OK;
 1831e2c:	0005883a 	mov	r2,zero
 1831e30:	00005606 	br	1831f8c <ip_input+0x528>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 1831e34:	e0bff817 	ldw	r2,-32(fp)
 1831e38:	10c00183 	ldbu	r3,6(r2)
 1831e3c:	108001c3 	ldbu	r2,7(r2)
 1831e40:	1004923a 	slli	r2,r2,8
 1831e44:	10c4b03a 	or	r2,r2,r3
 1831e48:	10bfffcc 	andi	r2,r2,65535
 1831e4c:	10bfcfcc 	andi	r2,r2,65343
 1831e50:	10000a26 	beq	r2,zero,1831e7c <ip_input+0x418>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
 1831e54:	e13ffe17 	ldw	r4,-8(fp)
 1831e58:	18333900 	call	1833390 <ip_reass>
 1831e5c:	e0bffe15 	stw	r2,-8(fp)
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 1831e60:	e0bffe17 	ldw	r2,-8(fp)
 1831e64:	1000021e 	bne	r2,zero,1831e70 <ip_input+0x40c>
      return ERR_OK;
 1831e68:	0005883a 	mov	r2,zero
 1831e6c:	00004706 	br	1831f8c <ip_input+0x528>
    }
    iphdr = (struct ip_hdr *)p->payload;
 1831e70:	e0bffe17 	ldw	r2,-8(fp)
 1831e74:	10800117 	ldw	r2,4(r2)
 1831e78:	e0bff815 	stw	r2,-32(fp)
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 1831e7c:	e0bfff17 	ldw	r2,-4(fp)
 1831e80:	d0a81015 	stw	r2,-24512(gp)
  current_header = iphdr;
 1831e84:	e0bff817 	ldw	r2,-32(fp)
 1831e88:	d0a81215 	stw	r2,-24504(gp)

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 1831e8c:	e17fff17 	ldw	r5,-4(fp)
 1831e90:	e13ffe17 	ldw	r4,-8(fp)
 1831e94:	1833ef00 	call	1833ef0 <raw_input>
 1831e98:	10803fcc 	andi	r2,r2,255
 1831e9c:	1000361e 	bne	r2,zero,1831f78 <ip_input+0x514>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
 1831ea0:	e0bff817 	ldw	r2,-32(fp)
 1831ea4:	10800243 	ldbu	r2,9(r2)
 1831ea8:	10803fcc 	andi	r2,r2,255
 1831eac:	10c001a0 	cmpeqi	r3,r2,6
 1831eb0:	1800091e 	bne	r3,zero,1831ed8 <ip_input+0x474>
 1831eb4:	10c00460 	cmpeqi	r3,r2,17
 1831eb8:	1800031e 	bne	r3,zero,1831ec8 <ip_input+0x464>
 1831ebc:	10800060 	cmpeqi	r2,r2,1
 1831ec0:	1000091e 	bne	r2,zero,1831ee8 <ip_input+0x484>
 1831ec4:	00000c06 	br	1831ef8 <ip_input+0x494>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 1831ec8:	e17fff17 	ldw	r5,-4(fp)
 1831ecc:	e13ffe17 	ldw	r4,-8(fp)
 1831ed0:	182122c0 	call	182122c <udp_input>
      break;
 1831ed4:	00002806 	br	1831f78 <ip_input+0x514>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
 1831ed8:	e17fff17 	ldw	r5,-4(fp)
 1831edc:	e13ffe17 	ldw	r4,-8(fp)
 1831ee0:	18344540 	call	1834454 <tcp_input>
      break;
 1831ee4:	00002406 	br	1831f78 <ip_input+0x514>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 1831ee8:	e17fff17 	ldw	r5,-4(fp)
 1831eec:	e13ffe17 	ldw	r4,-8(fp)
 1831ef0:	18308f40 	call	18308f4 <icmp_input>
      break;
 1831ef4:	00002006 	br	1831f78 <ip_input+0x514>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 1831ef8:	d0a81117 	ldw	r2,-24508(gp)
 1831efc:	e17fff17 	ldw	r5,-4(fp)
 1831f00:	1009883a 	mov	r4,r2
 1831f04:	18189b80 	call	18189b8 <ip4_addr_isbroadcast>
 1831f08:	10803fcc 	andi	r2,r2,255
 1831f0c:	10000a1e 	bne	r2,zero,1831f38 <ip_input+0x4d4>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 1831f10:	d0a81117 	ldw	r2,-24508(gp)
 1831f14:	10803c0c 	andi	r2,r2,240
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 1831f18:	10803820 	cmpeqi	r2,r2,224
 1831f1c:	1000061e 	bne	r2,zero,1831f38 <ip_input+0x4d4>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
 1831f20:	e0bffe17 	ldw	r2,-8(fp)
 1831f24:	e0fff817 	ldw	r3,-32(fp)
 1831f28:	10c00115 	stw	r3,4(r2)
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 1831f2c:	01400084 	movi	r5,2
 1831f30:	e13ffe17 	ldw	r4,-8(fp)
 1831f34:	1830ef00 	call	1830ef0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 1831f38:	e13ffe17 	ldw	r4,-8(fp)
 1831f3c:	181a22c0 	call	181a22c <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 1831f40:	00806134 	movhi	r2,388
 1831f44:	109e7504 	addi	r2,r2,31188
 1831f48:	10802c17 	ldw	r2,176(r2)
 1831f4c:	10c00044 	addi	r3,r2,1
 1831f50:	00806134 	movhi	r2,388
 1831f54:	109e7504 	addi	r2,r2,31188
 1831f58:	10c02c15 	stw	r3,176(r2)
      IP_STATS_INC(ip.drop);
 1831f5c:	00806134 	movhi	r2,388
 1831f60:	109e7504 	addi	r2,r2,31188
 1831f64:	10802717 	ldw	r2,156(r2)
 1831f68:	10c00044 	addi	r3,r2,1
 1831f6c:	00806134 	movhi	r2,388
 1831f70:	109e7504 	addi	r2,r2,31188
 1831f74:	10c02715 	stw	r3,156(r2)
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
 1831f78:	d0281015 	stw	zero,-24512(gp)
  current_header = NULL;
 1831f7c:	d0281215 	stw	zero,-24504(gp)
  ip_addr_set_any(&current_iphdr_src);
 1831f80:	d0280f15 	stw	zero,-24516(gp)
  ip_addr_set_any(&current_iphdr_dest);
 1831f84:	d0281115 	stw	zero,-24508(gp)

  return ERR_OK;
 1831f88:	0005883a 	mov	r2,zero
}
 1831f8c:	e037883a 	mov	sp,fp
 1831f90:	dfc00117 	ldw	ra,4(sp)
 1831f94:	df000017 	ldw	fp,0(sp)
 1831f98:	dec00204 	addi	sp,sp,8
 1831f9c:	f800283a 	ret

01831fa0 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 1831fa0:	defff404 	addi	sp,sp,-48
 1831fa4:	dfc00b15 	stw	ra,44(sp)
 1831fa8:	df000a15 	stw	fp,40(sp)
 1831fac:	df000a04 	addi	fp,sp,40
 1831fb0:	e13ffa15 	stw	r4,-24(fp)
 1831fb4:	e17ffb15 	stw	r5,-20(fp)
 1831fb8:	e1bffc15 	stw	r6,-16(fp)
 1831fbc:	3809883a 	mov	r4,r7
 1831fc0:	e0c00217 	ldw	r3,8(fp)
 1831fc4:	e0800317 	ldw	r2,12(fp)
 1831fc8:	e13ffd05 	stb	r4,-12(fp)
 1831fcc:	e0fffe05 	stb	r3,-8(fp)
 1831fd0:	e0bfff05 	stb	r2,-4(fp)
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 1831fd4:	e03ff615 	stw	zero,-40(fp)
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 1831fd8:	e0bffc17 	ldw	r2,-16(fp)
 1831fdc:	10015026 	beq	r2,zero,1832520 <ip_output_if+0x580>
    u16_t ip_hlen = IP_HLEN;
 1831fe0:	00800504 	movi	r2,20
 1831fe4:	e0bff70d 	sth	r2,-36(fp)
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 1831fe8:	01400504 	movi	r5,20
 1831fec:	e13ffa17 	ldw	r4,-24(fp)
 1831ff0:	181a07c0 	call	181a07c <pbuf_header>
 1831ff4:	10803fcc 	andi	r2,r2,255
 1831ff8:	10000926 	beq	r2,zero,1832020 <ip_output_if+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 1831ffc:	00806134 	movhi	r2,388
 1832000:	109e7504 	addi	r2,r2,31188
 1832004:	10802e17 	ldw	r2,184(r2)
 1832008:	10c00044 	addi	r3,r2,1
 183200c:	00806134 	movhi	r2,388
 1832010:	109e7504 	addi	r2,r2,31188
 1832014:	10c02e15 	stw	r3,184(r2)
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 1832018:	00bfff84 	movi	r2,-2
 183201c:	00016e06 	br	18325d8 <ip_output_if+0x638>
    }

    iphdr = (struct ip_hdr *)p->payload;
 1832020:	e0bffa17 	ldw	r2,-24(fp)
 1832024:	10800117 	ldw	r2,4(r2)
 1832028:	e0bff815 	stw	r2,-32(fp)
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 183202c:	e0bff817 	ldw	r2,-32(fp)
 1832030:	e0fffd03 	ldbu	r3,-12(fp)
 1832034:	10c00205 	stb	r3,8(r2)
    IPH_PROTO_SET(iphdr, proto);
 1832038:	e0bff817 	ldw	r2,-32(fp)
 183203c:	e0ffff03 	ldbu	r3,-4(fp)
 1832040:	10c00245 	stb	r3,9(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
 1832044:	e0bfff03 	ldbu	r2,-4(fp)
 1832048:	1006923a 	slli	r3,r2,8
 183204c:	e0bffd03 	ldbu	r2,-12(fp)
 1832050:	1884b03a 	or	r2,r3,r2
 1832054:	1007883a 	mov	r3,r2
 1832058:	e0bff617 	ldw	r2,-40(fp)
 183205c:	10c5883a 	add	r2,r2,r3
 1832060:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
 1832064:	e0bffc17 	ldw	r2,-16(fp)
 1832068:	10c00017 	ldw	r3,0(r2)
 183206c:	e0bff817 	ldw	r2,-32(fp)
 1832070:	19803fcc 	andi	r6,r3,255
 1832074:	11000403 	ldbu	r4,16(r2)
 1832078:	2008703a 	and	r4,r4,zero
 183207c:	200b883a 	mov	r5,r4
 1832080:	3009883a 	mov	r4,r6
 1832084:	2908b03a 	or	r4,r5,r4
 1832088:	11000405 	stb	r4,16(r2)
 183208c:	1808d23a 	srli	r4,r3,8
 1832090:	21803fcc 	andi	r6,r4,255
 1832094:	11000443 	ldbu	r4,17(r2)
 1832098:	2008703a 	and	r4,r4,zero
 183209c:	200b883a 	mov	r5,r4
 18320a0:	3009883a 	mov	r4,r6
 18320a4:	2908b03a 	or	r4,r5,r4
 18320a8:	11000445 	stb	r4,17(r2)
 18320ac:	1808d43a 	srli	r4,r3,16
 18320b0:	21803fcc 	andi	r6,r4,255
 18320b4:	11000483 	ldbu	r4,18(r2)
 18320b8:	2008703a 	and	r4,r4,zero
 18320bc:	200b883a 	mov	r5,r4
 18320c0:	3009883a 	mov	r4,r6
 18320c4:	2908b03a 	or	r4,r5,r4
 18320c8:	11000485 	stb	r4,18(r2)
 18320cc:	180ad63a 	srli	r5,r3,24
 18320d0:	10c004c3 	ldbu	r3,19(r2)
 18320d4:	1806703a 	and	r3,r3,zero
 18320d8:	1809883a 	mov	r4,r3
 18320dc:	2807883a 	mov	r3,r5
 18320e0:	20c6b03a 	or	r3,r4,r3
 18320e4:	10c004c5 	stb	r3,19(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 18320e8:	e0bff817 	ldw	r2,-32(fp)
 18320ec:	10c00403 	ldbu	r3,16(r2)
 18320f0:	11000443 	ldbu	r4,17(r2)
 18320f4:	2008923a 	slli	r4,r4,8
 18320f8:	20c6b03a 	or	r3,r4,r3
 18320fc:	11000483 	ldbu	r4,18(r2)
 1832100:	2008943a 	slli	r4,r4,16
 1832104:	20c6b03a 	or	r3,r4,r3
 1832108:	108004c3 	ldbu	r2,19(r2)
 183210c:	1004963a 	slli	r2,r2,24
 1832110:	10c4b03a 	or	r2,r2,r3
 1832114:	10bfffcc 	andi	r2,r2,65535
 1832118:	e0fff617 	ldw	r3,-40(fp)
 183211c:	1885883a 	add	r2,r3,r2
 1832120:	e0bff615 	stw	r2,-40(fp)
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 1832124:	e0bff817 	ldw	r2,-32(fp)
 1832128:	10c00403 	ldbu	r3,16(r2)
 183212c:	11000443 	ldbu	r4,17(r2)
 1832130:	2008923a 	slli	r4,r4,8
 1832134:	20c6b03a 	or	r3,r4,r3
 1832138:	11000483 	ldbu	r4,18(r2)
 183213c:	2008943a 	slli	r4,r4,16
 1832140:	20c6b03a 	or	r3,r4,r3
 1832144:	108004c3 	ldbu	r2,19(r2)
 1832148:	1004963a 	slli	r2,r2,24
 183214c:	10c4b03a 	or	r2,r2,r3
 1832150:	1004d43a 	srli	r2,r2,16
 1832154:	e0fff617 	ldw	r3,-40(fp)
 1832158:	1885883a 	add	r2,r3,r2
 183215c:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 1832160:	e0bff70b 	ldhu	r2,-36(fp)
 1832164:	1004d0ba 	srli	r2,r2,2
 1832168:	10801014 	ori	r2,r2,64
 183216c:	1007883a 	mov	r3,r2
 1832170:	e0bff817 	ldw	r2,-32(fp)
 1832174:	10c00005 	stb	r3,0(r2)
    IPH_TOS_SET(iphdr, tos);
 1832178:	e0bff817 	ldw	r2,-32(fp)
 183217c:	e0fffe03 	ldbu	r3,-8(fp)
 1832180:	10c00045 	stb	r3,1(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
 1832184:	e0bffe03 	ldbu	r2,-8(fp)
 1832188:	1006923a 	slli	r3,r2,8
 183218c:	e0bff817 	ldw	r2,-32(fp)
 1832190:	10800003 	ldbu	r2,0(r2)
 1832194:	10803fcc 	andi	r2,r2,255
 1832198:	1884b03a 	or	r2,r3,r2
 183219c:	1007883a 	mov	r3,r2
 18321a0:	e0bff617 	ldw	r2,-40(fp)
 18321a4:	10c5883a 	add	r2,r2,r3
 18321a8:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 18321ac:	e0bffa17 	ldw	r2,-24(fp)
 18321b0:	1080020b 	ldhu	r2,8(r2)
 18321b4:	10bfffcc 	andi	r2,r2,65535
 18321b8:	1004d23a 	srli	r2,r2,8
 18321bc:	1007883a 	mov	r3,r2
 18321c0:	e0bffa17 	ldw	r2,-24(fp)
 18321c4:	1080020b 	ldhu	r2,8(r2)
 18321c8:	10bfffcc 	andi	r2,r2,65535
 18321cc:	1004923a 	slli	r2,r2,8
 18321d0:	1884b03a 	or	r2,r3,r2
 18321d4:	100d883a 	mov	r6,r2
 18321d8:	e0bff817 	ldw	r2,-32(fp)
 18321dc:	30ffffcc 	andi	r3,r6,65535
 18321e0:	19403fcc 	andi	r5,r3,255
 18321e4:	10c00083 	ldbu	r3,2(r2)
 18321e8:	1806703a 	and	r3,r3,zero
 18321ec:	1809883a 	mov	r4,r3
 18321f0:	2807883a 	mov	r3,r5
 18321f4:	20c6b03a 	or	r3,r4,r3
 18321f8:	10c00085 	stb	r3,2(r2)
 18321fc:	30ffffcc 	andi	r3,r6,65535
 1832200:	1806d23a 	srli	r3,r3,8
 1832204:	197fffcc 	andi	r5,r3,65535
 1832208:	10c000c3 	ldbu	r3,3(r2)
 183220c:	1806703a 	and	r3,r3,zero
 1832210:	1809883a 	mov	r4,r3
 1832214:	2807883a 	mov	r3,r5
 1832218:	20c6b03a 	or	r3,r4,r3
 183221c:	10c000c5 	stb	r3,3(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 1832220:	e0bff817 	ldw	r2,-32(fp)
 1832224:	10c00083 	ldbu	r3,2(r2)
 1832228:	108000c3 	ldbu	r2,3(r2)
 183222c:	1004923a 	slli	r2,r2,8
 1832230:	10c4b03a 	or	r2,r2,r3
 1832234:	10bfffcc 	andi	r2,r2,65535
 1832238:	e0fff617 	ldw	r3,-40(fp)
 183223c:	1885883a 	add	r2,r3,r2
 1832240:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 1832244:	e0bff817 	ldw	r2,-32(fp)
 1832248:	10c00183 	ldbu	r3,6(r2)
 183224c:	1806703a 	and	r3,r3,zero
 1832250:	10c00185 	stb	r3,6(r2)
 1832254:	10c001c3 	ldbu	r3,7(r2)
 1832258:	1806703a 	and	r3,r3,zero
 183225c:	10c001c5 	stb	r3,7(r2)
    IPH_ID_SET(iphdr, htons(ip_id));
 1832260:	d0a80e0b 	ldhu	r2,-24520(gp)
 1832264:	10bfffcc 	andi	r2,r2,65535
 1832268:	1004d23a 	srli	r2,r2,8
 183226c:	1007883a 	mov	r3,r2
 1832270:	d0a80e0b 	ldhu	r2,-24520(gp)
 1832274:	10bfffcc 	andi	r2,r2,65535
 1832278:	1004923a 	slli	r2,r2,8
 183227c:	1884b03a 	or	r2,r3,r2
 1832280:	100d883a 	mov	r6,r2
 1832284:	e0bff817 	ldw	r2,-32(fp)
 1832288:	30ffffcc 	andi	r3,r6,65535
 183228c:	19403fcc 	andi	r5,r3,255
 1832290:	10c00103 	ldbu	r3,4(r2)
 1832294:	1806703a 	and	r3,r3,zero
 1832298:	1809883a 	mov	r4,r3
 183229c:	2807883a 	mov	r3,r5
 18322a0:	20c6b03a 	or	r3,r4,r3
 18322a4:	10c00105 	stb	r3,4(r2)
 18322a8:	30ffffcc 	andi	r3,r6,65535
 18322ac:	1806d23a 	srli	r3,r3,8
 18322b0:	197fffcc 	andi	r5,r3,65535
 18322b4:	10c00143 	ldbu	r3,5(r2)
 18322b8:	1806703a 	and	r3,r3,zero
 18322bc:	1809883a 	mov	r4,r3
 18322c0:	2807883a 	mov	r3,r5
 18322c4:	20c6b03a 	or	r3,r4,r3
 18322c8:	10c00145 	stb	r3,5(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 18322cc:	e0bff817 	ldw	r2,-32(fp)
 18322d0:	10c00103 	ldbu	r3,4(r2)
 18322d4:	10800143 	ldbu	r2,5(r2)
 18322d8:	1004923a 	slli	r2,r2,8
 18322dc:	10c4b03a 	or	r2,r2,r3
 18322e0:	10bfffcc 	andi	r2,r2,65535
 18322e4:	e0fff617 	ldw	r3,-40(fp)
 18322e8:	1885883a 	add	r2,r3,r2
 18322ec:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 18322f0:	d0a80e0b 	ldhu	r2,-24520(gp)
 18322f4:	10800044 	addi	r2,r2,1
 18322f8:	d0a80e0d 	sth	r2,-24520(gp)

    if (ip_addr_isany(src)) {
 18322fc:	e0bffb17 	ldw	r2,-20(fp)
 1832300:	10000326 	beq	r2,zero,1832310 <ip_output_if+0x370>
 1832304:	e0bffb17 	ldw	r2,-20(fp)
 1832308:	10800017 	ldw	r2,0(r2)
 183230c:	1000221e 	bne	r2,zero,1832398 <ip_output_if+0x3f8>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 1832310:	e0800417 	ldw	r2,16(fp)
 1832314:	10c00117 	ldw	r3,4(r2)
 1832318:	e0bff817 	ldw	r2,-32(fp)
 183231c:	19803fcc 	andi	r6,r3,255
 1832320:	11000303 	ldbu	r4,12(r2)
 1832324:	2008703a 	and	r4,r4,zero
 1832328:	200b883a 	mov	r5,r4
 183232c:	3009883a 	mov	r4,r6
 1832330:	2908b03a 	or	r4,r5,r4
 1832334:	11000305 	stb	r4,12(r2)
 1832338:	1808d23a 	srli	r4,r3,8
 183233c:	21803fcc 	andi	r6,r4,255
 1832340:	11000343 	ldbu	r4,13(r2)
 1832344:	2008703a 	and	r4,r4,zero
 1832348:	200b883a 	mov	r5,r4
 183234c:	3009883a 	mov	r4,r6
 1832350:	2908b03a 	or	r4,r5,r4
 1832354:	11000345 	stb	r4,13(r2)
 1832358:	1808d43a 	srli	r4,r3,16
 183235c:	21803fcc 	andi	r6,r4,255
 1832360:	11000383 	ldbu	r4,14(r2)
 1832364:	2008703a 	and	r4,r4,zero
 1832368:	200b883a 	mov	r5,r4
 183236c:	3009883a 	mov	r4,r6
 1832370:	2908b03a 	or	r4,r5,r4
 1832374:	11000385 	stb	r4,14(r2)
 1832378:	180ad63a 	srli	r5,r3,24
 183237c:	10c003c3 	ldbu	r3,15(r2)
 1832380:	1806703a 	and	r3,r3,zero
 1832384:	1809883a 	mov	r4,r3
 1832388:	2807883a 	mov	r3,r5
 183238c:	20c6b03a 	or	r3,r4,r3
 1832390:	10c003c5 	stb	r3,15(r2)
 1832394:	00002106 	br	183241c <ip_output_if+0x47c>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
 1832398:	e0bffb17 	ldw	r2,-20(fp)
 183239c:	10c00017 	ldw	r3,0(r2)
 18323a0:	e0bff817 	ldw	r2,-32(fp)
 18323a4:	19803fcc 	andi	r6,r3,255
 18323a8:	11000303 	ldbu	r4,12(r2)
 18323ac:	2008703a 	and	r4,r4,zero
 18323b0:	200b883a 	mov	r5,r4
 18323b4:	3009883a 	mov	r4,r6
 18323b8:	2908b03a 	or	r4,r5,r4
 18323bc:	11000305 	stb	r4,12(r2)
 18323c0:	1808d23a 	srli	r4,r3,8
 18323c4:	21803fcc 	andi	r6,r4,255
 18323c8:	11000343 	ldbu	r4,13(r2)
 18323cc:	2008703a 	and	r4,r4,zero
 18323d0:	200b883a 	mov	r5,r4
 18323d4:	3009883a 	mov	r4,r6
 18323d8:	2908b03a 	or	r4,r5,r4
 18323dc:	11000345 	stb	r4,13(r2)
 18323e0:	1808d43a 	srli	r4,r3,16
 18323e4:	21803fcc 	andi	r6,r4,255
 18323e8:	11000383 	ldbu	r4,14(r2)
 18323ec:	2008703a 	and	r4,r4,zero
 18323f0:	200b883a 	mov	r5,r4
 18323f4:	3009883a 	mov	r4,r6
 18323f8:	2908b03a 	or	r4,r5,r4
 18323fc:	11000385 	stb	r4,14(r2)
 1832400:	180ad63a 	srli	r5,r3,24
 1832404:	10c003c3 	ldbu	r3,15(r2)
 1832408:	1806703a 	and	r3,r3,zero
 183240c:	1809883a 	mov	r4,r3
 1832410:	2807883a 	mov	r3,r5
 1832414:	20c6b03a 	or	r3,r4,r3
 1832418:	10c003c5 	stb	r3,15(r2)
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 183241c:	e0bff817 	ldw	r2,-32(fp)
 1832420:	10c00303 	ldbu	r3,12(r2)
 1832424:	11000343 	ldbu	r4,13(r2)
 1832428:	2008923a 	slli	r4,r4,8
 183242c:	20c6b03a 	or	r3,r4,r3
 1832430:	11000383 	ldbu	r4,14(r2)
 1832434:	2008943a 	slli	r4,r4,16
 1832438:	20c6b03a 	or	r3,r4,r3
 183243c:	108003c3 	ldbu	r2,15(r2)
 1832440:	1004963a 	slli	r2,r2,24
 1832444:	10c4b03a 	or	r2,r2,r3
 1832448:	10bfffcc 	andi	r2,r2,65535
 183244c:	e0fff617 	ldw	r3,-40(fp)
 1832450:	1885883a 	add	r2,r3,r2
 1832454:	e0bff615 	stw	r2,-40(fp)
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 1832458:	e0bff817 	ldw	r2,-32(fp)
 183245c:	10c00303 	ldbu	r3,12(r2)
 1832460:	11000343 	ldbu	r4,13(r2)
 1832464:	2008923a 	slli	r4,r4,8
 1832468:	20c6b03a 	or	r3,r4,r3
 183246c:	11000383 	ldbu	r4,14(r2)
 1832470:	2008943a 	slli	r4,r4,16
 1832474:	20c6b03a 	or	r3,r4,r3
 1832478:	108003c3 	ldbu	r2,15(r2)
 183247c:	1004963a 	slli	r2,r2,24
 1832480:	10c4b03a 	or	r2,r2,r3
 1832484:	1004d43a 	srli	r2,r2,16
 1832488:	e0fff617 	ldw	r3,-40(fp)
 183248c:	1885883a 	add	r2,r3,r2
 1832490:	e0bff615 	stw	r2,-40(fp)
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 1832494:	e0bff617 	ldw	r2,-40(fp)
 1832498:	1006d43a 	srli	r3,r2,16
 183249c:	e0bff617 	ldw	r2,-40(fp)
 18324a0:	10bfffcc 	andi	r2,r2,65535
 18324a4:	1885883a 	add	r2,r3,r2
 18324a8:	e0bff615 	stw	r2,-40(fp)
    chk_sum = (chk_sum >> 16) + chk_sum;
 18324ac:	e0bff617 	ldw	r2,-40(fp)
 18324b0:	1004d43a 	srli	r2,r2,16
 18324b4:	e0fff617 	ldw	r3,-40(fp)
 18324b8:	1885883a 	add	r2,r3,r2
 18324bc:	e0bff615 	stw	r2,-40(fp)
    chk_sum = ~chk_sum;
 18324c0:	e0bff617 	ldw	r2,-40(fp)
 18324c4:	0084303a 	nor	r2,zero,r2
 18324c8:	e0bff615 	stw	r2,-40(fp)
    iphdr->_chksum = chk_sum; /* network order */
 18324cc:	e0bff617 	ldw	r2,-40(fp)
 18324d0:	100d883a 	mov	r6,r2
 18324d4:	e0bff817 	ldw	r2,-32(fp)
 18324d8:	30ffffcc 	andi	r3,r6,65535
 18324dc:	19403fcc 	andi	r5,r3,255
 18324e0:	10c00283 	ldbu	r3,10(r2)
 18324e4:	1806703a 	and	r3,r3,zero
 18324e8:	1809883a 	mov	r4,r3
 18324ec:	2807883a 	mov	r3,r5
 18324f0:	20c6b03a 	or	r3,r4,r3
 18324f4:	10c00285 	stb	r3,10(r2)
 18324f8:	30ffffcc 	andi	r3,r6,65535
 18324fc:	1806d23a 	srli	r3,r3,8
 1832500:	197fffcc 	andi	r5,r3,65535
 1832504:	10c002c3 	ldbu	r3,11(r2)
 1832508:	1806703a 	and	r3,r3,zero
 183250c:	1809883a 	mov	r4,r3
 1832510:	2807883a 	mov	r3,r5
 1832514:	20c6b03a 	or	r3,r4,r3
 1832518:	10c002c5 	stb	r3,11(r2)
 183251c:	00001106 	br	1832564 <ip_output_if+0x5c4>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 1832520:	e0bffa17 	ldw	r2,-24(fp)
 1832524:	10800117 	ldw	r2,4(r2)
 1832528:	e0bff815 	stw	r2,-32(fp)
    ip_addr_copy(dest_addr, iphdr->dest);
 183252c:	e0bff817 	ldw	r2,-32(fp)
 1832530:	10c00403 	ldbu	r3,16(r2)
 1832534:	11000443 	ldbu	r4,17(r2)
 1832538:	2008923a 	slli	r4,r4,8
 183253c:	20c6b03a 	or	r3,r4,r3
 1832540:	11000483 	ldbu	r4,18(r2)
 1832544:	2008943a 	slli	r4,r4,16
 1832548:	20c6b03a 	or	r3,r4,r3
 183254c:	108004c3 	ldbu	r2,19(r2)
 1832550:	1004963a 	slli	r2,r2,24
 1832554:	10c4b03a 	or	r2,r2,r3
 1832558:	e0bff915 	stw	r2,-28(fp)
    dest = &dest_addr;
 183255c:	e0bff904 	addi	r2,fp,-28
 1832560:	e0bffc15 	stw	r2,-16(fp)
  }

  IP_STATS_INC(ip.xmit);
 1832564:	00806134 	movhi	r2,388
 1832568:	109e7504 	addi	r2,r2,31188
 183256c:	10802417 	ldw	r2,144(r2)
 1832570:	10c00044 	addi	r3,r2,1
 1832574:	00806134 	movhi	r2,388
 1832578:	109e7504 	addi	r2,r2,31188
 183257c:	10c02415 	stw	r3,144(r2)
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 1832580:	e0800417 	ldw	r2,16(fp)
 1832584:	10800c0b 	ldhu	r2,48(r2)
 1832588:	10bfffcc 	andi	r2,r2,65535
 183258c:	10000c26 	beq	r2,zero,18325c0 <ip_output_if+0x620>
 1832590:	e0bffa17 	ldw	r2,-24(fp)
 1832594:	1100020b 	ldhu	r4,8(r2)
 1832598:	e0800417 	ldw	r2,16(fp)
 183259c:	10c00c0b 	ldhu	r3,48(r2)
 18325a0:	20bfffcc 	andi	r2,r4,65535
 18325a4:	18ffffcc 	andi	r3,r3,65535
 18325a8:	1880052e 	bgeu	r3,r2,18325c0 <ip_output_if+0x620>
    return ip_frag(p, netif, dest);
 18325ac:	e1bffc17 	ldw	r6,-16(fp)
 18325b0:	e1400417 	ldw	r5,16(fp)
 18325b4:	e13ffa17 	ldw	r4,-24(fp)
 18325b8:	1833a640 	call	1833a64 <ip_frag>
 18325bc:	00000606 	br	18325d8 <ip_output_if+0x638>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 18325c0:	e0800417 	ldw	r2,16(fp)
 18325c4:	10800517 	ldw	r2,20(r2)
 18325c8:	e1bffc17 	ldw	r6,-16(fp)
 18325cc:	e17ffa17 	ldw	r5,-24(fp)
 18325d0:	e1000417 	ldw	r4,16(fp)
 18325d4:	103ee83a 	callr	r2
}
 18325d8:	e037883a 	mov	sp,fp
 18325dc:	dfc00117 	ldw	ra,4(sp)
 18325e0:	df000017 	ldw	fp,0(sp)
 18325e4:	dec00204 	addi	sp,sp,8
 18325e8:	f800283a 	ret

018325ec <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 18325ec:	defff404 	addi	sp,sp,-48
 18325f0:	dfc00b15 	stw	ra,44(sp)
 18325f4:	df000a15 	stw	fp,40(sp)
 18325f8:	df000a04 	addi	fp,sp,40
 18325fc:	e13ffa15 	stw	r4,-24(fp)
 1832600:	e17ffb15 	stw	r5,-20(fp)
 1832604:	e1bffc15 	stw	r6,-16(fp)
 1832608:	3809883a 	mov	r4,r7
 183260c:	e0c00217 	ldw	r3,8(fp)
 1832610:	e0800317 	ldw	r2,12(fp)
 1832614:	e13ffd05 	stb	r4,-12(fp)
 1832618:	e0fffe05 	stb	r3,-8(fp)
 183261c:	e0bfff05 	stb	r2,-4(fp)

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(src, dest)) == NULL) {
 1832620:	e17ffc17 	ldw	r5,-16(fp)
 1832624:	e13ffb17 	ldw	r4,-20(fp)
 1832628:	18319740 	call	1831974 <ip_route>
 183262c:	e0bff915 	stw	r2,-28(fp)
 1832630:	e0bff917 	ldw	r2,-28(fp)
 1832634:	1000091e 	bne	r2,zero,183265c <ip_output+0x70>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 1832638:	00806134 	movhi	r2,388
 183263c:	109e7504 	addi	r2,r2,31188
 1832640:	10802b17 	ldw	r2,172(r2)
 1832644:	10c00044 	addi	r3,r2,1
 1832648:	00806134 	movhi	r2,388
 183264c:	109e7504 	addi	r2,r2,31188
 1832650:	10c02b15 	stw	r3,172(r2)
    return ERR_RTE;
 1832654:	00bfff04 	movi	r2,-4
 1832658:	00000c06 	br	183268c <ip_output+0xa0>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 183265c:	e17ffd03 	ldbu	r5,-12(fp)
 1832660:	e0bffe03 	ldbu	r2,-8(fp)
 1832664:	e0ffff03 	ldbu	r3,-4(fp)
 1832668:	e13ff917 	ldw	r4,-28(fp)
 183266c:	d9000215 	stw	r4,8(sp)
 1832670:	d8c00115 	stw	r3,4(sp)
 1832674:	d8800015 	stw	r2,0(sp)
 1832678:	280f883a 	mov	r7,r5
 183267c:	e1bffc17 	ldw	r6,-16(fp)
 1832680:	e17ffb17 	ldw	r5,-20(fp)
 1832684:	e13ffa17 	ldw	r4,-24(fp)
 1832688:	1831fa00 	call	1831fa0 <ip_output_if>
}
 183268c:	e037883a 	mov	sp,fp
 1832690:	dfc00117 	ldw	ra,4(sp)
 1832694:	df000017 	ldw	fp,0(sp)
 1832698:	dec00204 	addi	sp,sp,8
 183269c:	f800283a 	ret

018326a0 <ip_output_hinted>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto, u8_t *addr_hint)
{
 18326a0:	defff304 	addi	sp,sp,-52
 18326a4:	dfc00c15 	stw	ra,48(sp)
 18326a8:	df000b15 	stw	fp,44(sp)
 18326ac:	df000b04 	addi	fp,sp,44
 18326b0:	e13ffa15 	stw	r4,-24(fp)
 18326b4:	e17ffb15 	stw	r5,-20(fp)
 18326b8:	e1bffc15 	stw	r6,-16(fp)
 18326bc:	3809883a 	mov	r4,r7
 18326c0:	e0c00217 	ldw	r3,8(fp)
 18326c4:	e0800317 	ldw	r2,12(fp)
 18326c8:	e13ffd05 	stb	r4,-12(fp)
 18326cc:	e0fffe05 	stb	r3,-8(fp)
 18326d0:	e0bfff05 	stb	r2,-4(fp)

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(src, dest)) == NULL) {
 18326d4:	e17ffc17 	ldw	r5,-16(fp)
 18326d8:	e13ffb17 	ldw	r4,-20(fp)
 18326dc:	18319740 	call	1831974 <ip_route>
 18326e0:	e0bff815 	stw	r2,-32(fp)
 18326e4:	e0bff817 	ldw	r2,-32(fp)
 18326e8:	1000091e 	bne	r2,zero,1832710 <ip_output_hinted+0x70>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 18326ec:	00806134 	movhi	r2,388
 18326f0:	109e7504 	addi	r2,r2,31188
 18326f4:	10802b17 	ldw	r2,172(r2)
 18326f8:	10c00044 	addi	r3,r2,1
 18326fc:	00806134 	movhi	r2,388
 1832700:	109e7504 	addi	r2,r2,31188
 1832704:	10c02b15 	stw	r3,172(r2)
    return ERR_RTE;
 1832708:	00bfff04 	movi	r2,-4
 183270c:	00001306 	br	183275c <ip_output_hinted+0xbc>
  }


  NETIF_SET_HWADDRHINT(netif, addr_hint);
 1832710:	e0bff817 	ldw	r2,-32(fp)
 1832714:	e0c00417 	ldw	r3,16(fp)
 1832718:	10c01015 	stw	r3,64(r2)
  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
 183271c:	e17ffd03 	ldbu	r5,-12(fp)
 1832720:	e0bffe03 	ldbu	r2,-8(fp)
 1832724:	e0ffff03 	ldbu	r3,-4(fp)
 1832728:	e13ff817 	ldw	r4,-32(fp)
 183272c:	d9000215 	stw	r4,8(sp)
 1832730:	d8c00115 	stw	r3,4(sp)
 1832734:	d8800015 	stw	r2,0(sp)
 1832738:	280f883a 	mov	r7,r5
 183273c:	e1bffc17 	ldw	r6,-16(fp)
 1832740:	e17ffb17 	ldw	r5,-20(fp)
 1832744:	e13ffa17 	ldw	r4,-24(fp)
 1832748:	1831fa00 	call	1831fa0 <ip_output_if>
 183274c:	e0bff905 	stb	r2,-28(fp)
  NETIF_SET_HWADDRHINT(netif, NULL);
 1832750:	e0bff817 	ldw	r2,-32(fp)
 1832754:	10001015 	stw	zero,64(r2)

  return err;
 1832758:	e0bff903 	ldbu	r2,-28(fp)
}
 183275c:	e037883a 	mov	sp,fp
 1832760:	dfc00117 	ldw	ra,4(sp)
 1832764:	df000017 	ldw	fp,0(sp)
 1832768:	dec00204 	addi	sp,sp,8
 183276c:	f800283a 	ret

01832770 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 1832770:	defffb04 	addi	sp,sp,-20
 1832774:	dfc00415 	stw	ra,16(sp)
 1832778:	df000315 	stw	fp,12(sp)
 183277c:	df000304 	addi	fp,sp,12
  struct ip_reassdata *r, *prev = NULL;
 1832780:	e03ffe15 	stw	zero,-8(fp)

  r = reassdatagrams;
 1832784:	d0a81317 	ldw	r2,-24500(gp)
 1832788:	e0bffd15 	stw	r2,-12(fp)
  while (r != NULL) {
 183278c:	00001806 	br	18327f0 <ip_reass_tmr+0x80>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 1832790:	e0bffd17 	ldw	r2,-12(fp)
 1832794:	108007c3 	ldbu	r2,31(r2)
 1832798:	10803fcc 	andi	r2,r2,255
 183279c:	10000c26 	beq	r2,zero,18327d0 <ip_reass_tmr+0x60>
      r->timer--;
 18327a0:	e0bffd17 	ldw	r2,-12(fp)
 18327a4:	108007c3 	ldbu	r2,31(r2)
 18327a8:	10bfffc4 	addi	r2,r2,-1
 18327ac:	1007883a 	mov	r3,r2
 18327b0:	e0bffd17 	ldw	r2,-12(fp)
 18327b4:	10c007c5 	stb	r3,31(r2)
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 18327b8:	e0bffd17 	ldw	r2,-12(fp)
 18327bc:	e0bffe15 	stw	r2,-8(fp)
      r = r->next;
 18327c0:	e0bffd17 	ldw	r2,-12(fp)
 18327c4:	10800017 	ldw	r2,0(r2)
 18327c8:	e0bffd15 	stw	r2,-12(fp)
 18327cc:	00000806 	br	18327f0 <ip_reass_tmr+0x80>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 18327d0:	e0bffd17 	ldw	r2,-12(fp)
 18327d4:	e0bfff15 	stw	r2,-4(fp)
      /* get the next pointer before freeing */
      r = r->next;
 18327d8:	e0bffd17 	ldw	r2,-12(fp)
 18327dc:	10800017 	ldw	r2,0(r2)
 18327e0:	e0bffd15 	stw	r2,-12(fp)
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 18327e4:	e17ffe17 	ldw	r5,-8(fp)
 18327e8:	e13fff17 	ldw	r4,-4(fp)
 18327ec:	18328100 	call	1832810 <ip_reass_free_complete_datagram>
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
 18327f0:	e0bffd17 	ldw	r2,-12(fp)
 18327f4:	103fe61e 	bne	r2,zero,1832790 <__ram_exceptions_end+0xff8224a0>
      r = r->next;
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
     }
   }
}
 18327f8:	0001883a 	nop
 18327fc:	e037883a 	mov	sp,fp
 1832800:	dfc00117 	ldw	ra,4(sp)
 1832804:	df000017 	ldw	fp,0(sp)
 1832808:	dec00204 	addi	sp,sp,8
 183280c:	f800283a 	ret

01832810 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 1832810:	defff704 	addi	sp,sp,-36
 1832814:	dfc00815 	stw	ra,32(sp)
 1832818:	df000715 	stw	fp,28(sp)
 183281c:	df000704 	addi	fp,sp,28
 1832820:	e13ffe15 	stw	r4,-8(fp)
 1832824:	e17fff15 	stw	r5,-4(fp)
  u16_t pbufs_freed = 0;
 1832828:	e03ff90d 	sth	zero,-28(fp)
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 183282c:	e0bffe17 	ldw	r2,-8(fp)
 1832830:	10800117 	ldw	r2,4(r2)
 1832834:	10800117 	ldw	r2,4(r2)
 1832838:	e0bffb15 	stw	r2,-20(fp)
  if (iprh->start == 0) {
 183283c:	e0bffb17 	ldw	r2,-20(fp)
 1832840:	10c00103 	ldbu	r3,4(r2)
 1832844:	10800143 	ldbu	r2,5(r2)
 1832848:	1004923a 	slli	r2,r2,8
 183284c:	10c4b03a 	or	r2,r2,r3
 1832850:	10bfffcc 	andi	r2,r2,65535
 1832854:	1000251e 	bne	r2,zero,18328ec <ip_reass_free_complete_datagram+0xdc>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 1832858:	e0bffe17 	ldw	r2,-8(fp)
 183285c:	10800117 	ldw	r2,4(r2)
 1832860:	e0bffa15 	stw	r2,-24(fp)
    ipr->p = iprh->next_pbuf;
 1832864:	e0bffb17 	ldw	r2,-20(fp)
 1832868:	10c00003 	ldbu	r3,0(r2)
 183286c:	11000043 	ldbu	r4,1(r2)
 1832870:	2008923a 	slli	r4,r4,8
 1832874:	20c6b03a 	or	r3,r4,r3
 1832878:	11000083 	ldbu	r4,2(r2)
 183287c:	2008943a 	slli	r4,r4,16
 1832880:	20c6b03a 	or	r3,r4,r3
 1832884:	108000c3 	ldbu	r2,3(r2)
 1832888:	1004963a 	slli	r2,r2,24
 183288c:	10c4b03a 	or	r2,r2,r3
 1832890:	1007883a 	mov	r3,r2
 1832894:	e0bffe17 	ldw	r2,-8(fp)
 1832898:	10c00115 	stw	r3,4(r2)
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 183289c:	e0bffa17 	ldw	r2,-24(fp)
 18328a0:	10c00117 	ldw	r3,4(r2)
 18328a4:	e0bffe17 	ldw	r2,-8(fp)
 18328a8:	10800204 	addi	r2,r2,8
 18328ac:	01800504 	movi	r6,20
 18328b0:	100b883a 	mov	r5,r2
 18328b4:	1809883a 	mov	r4,r3
 18328b8:	1805f980 	call	1805f98 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 18328bc:	01400044 	movi	r5,1
 18328c0:	e13ffa17 	ldw	r4,-24(fp)
 18328c4:	1830f380 	call	1830f38 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 18328c8:	e13ffa17 	ldw	r4,-24(fp)
 18328cc:	181a3680 	call	181a368 <pbuf_clen>
 18328d0:	e0bffc05 	stb	r2,-16(fp)
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 18328d4:	e0fffc03 	ldbu	r3,-16(fp)
 18328d8:	e0bff90b 	ldhu	r2,-28(fp)
 18328dc:	1885883a 	add	r2,r3,r2
 18328e0:	e0bff90d 	sth	r2,-28(fp)
    pbuf_free(p);
 18328e4:	e13ffa17 	ldw	r4,-24(fp)
 18328e8:	181a22c0 	call	181a22c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
 18328ec:	e0bffe17 	ldw	r2,-8(fp)
 18328f0:	10800117 	ldw	r2,4(r2)
 18328f4:	e0bffa15 	stw	r2,-24(fp)
  while (p != NULL) {
 18328f8:	00001a06 	br	1832964 <ip_reass_free_complete_datagram+0x154>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 18328fc:	e0bffa17 	ldw	r2,-24(fp)
 1832900:	10800117 	ldw	r2,4(r2)
 1832904:	e0bffb15 	stw	r2,-20(fp)
    pcur = p;
 1832908:	e0bffa17 	ldw	r2,-24(fp)
 183290c:	e0bffd15 	stw	r2,-12(fp)
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 1832910:	e0bffb17 	ldw	r2,-20(fp)
 1832914:	10c00003 	ldbu	r3,0(r2)
 1832918:	11000043 	ldbu	r4,1(r2)
 183291c:	2008923a 	slli	r4,r4,8
 1832920:	20c6b03a 	or	r3,r4,r3
 1832924:	11000083 	ldbu	r4,2(r2)
 1832928:	2008943a 	slli	r4,r4,16
 183292c:	20c6b03a 	or	r3,r4,r3
 1832930:	108000c3 	ldbu	r2,3(r2)
 1832934:	1004963a 	slli	r2,r2,24
 1832938:	10c4b03a 	or	r2,r2,r3
 183293c:	e0bffa15 	stw	r2,-24(fp)
    clen = pbuf_clen(pcur);
 1832940:	e13ffd17 	ldw	r4,-12(fp)
 1832944:	181a3680 	call	181a368 <pbuf_clen>
 1832948:	e0bffc05 	stb	r2,-16(fp)
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 183294c:	e0fffc03 	ldbu	r3,-16(fp)
 1832950:	e0bff90b 	ldhu	r2,-28(fp)
 1832954:	1885883a 	add	r2,r3,r2
 1832958:	e0bff90d 	sth	r2,-28(fp)
    pbuf_free(pcur);
 183295c:	e13ffd17 	ldw	r4,-12(fp)
 1832960:	181a22c0 	call	181a22c <pbuf_free>
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
 1832964:	e0bffa17 	ldw	r2,-24(fp)
 1832968:	103fe41e 	bne	r2,zero,18328fc <__ram_exceptions_end+0xff82260c>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 183296c:	e17fff17 	ldw	r5,-4(fp)
 1832970:	e13ffe17 	ldw	r4,-8(fp)
 1832974:	1832c2c0 	call	1832c2c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
 1832978:	d0e8140b 	ldhu	r3,-24496(gp)
 183297c:	e0bff90b 	ldhu	r2,-28(fp)
 1832980:	1885c83a 	sub	r2,r3,r2
 1832984:	d0a8140d 	sth	r2,-24496(gp)

  return pbufs_freed;
 1832988:	e0bff90b 	ldhu	r2,-28(fp)
}
 183298c:	e037883a 	mov	sp,fp
 1832990:	dfc00117 	ldw	ra,4(sp)
 1832994:	df000017 	ldw	fp,0(sp)
 1832998:	dec00204 	addi	sp,sp,8
 183299c:	f800283a 	ret

018329a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 18329a0:	defff604 	addi	sp,sp,-40
 18329a4:	dfc00915 	stw	ra,36(sp)
 18329a8:	df000815 	stw	fp,32(sp)
 18329ac:	df000804 	addi	fp,sp,32
 18329b0:	e13ffe15 	stw	r4,-8(fp)
 18329b4:	e17fff15 	stw	r5,-4(fp)
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
 18329b8:	e03ffb15 	stw	zero,-20(fp)
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 18329bc:	e03ff915 	stw	zero,-28(fp)
    prev = NULL;
 18329c0:	e03ffa15 	stw	zero,-24(fp)
    other_datagrams = 0;
 18329c4:	e03ffc15 	stw	zero,-16(fp)
    r = reassdatagrams;
 18329c8:	d0a81317 	ldw	r2,-24500(gp)
 18329cc:	e0bff815 	stw	r2,-32(fp)
    while (r != NULL) {
 18329d0:	00003f06 	br	1832ad0 <ip_reass_remove_oldest_datagram+0x130>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 18329d4:	e0bff817 	ldw	r2,-32(fp)
 18329d8:	10c00517 	ldw	r3,20(r2)
 18329dc:	e0bffe17 	ldw	r2,-8(fp)
 18329e0:	11000303 	ldbu	r4,12(r2)
 18329e4:	11400343 	ldbu	r5,13(r2)
 18329e8:	280a923a 	slli	r5,r5,8
 18329ec:	2908b03a 	or	r4,r5,r4
 18329f0:	11400383 	ldbu	r5,14(r2)
 18329f4:	280a943a 	slli	r5,r5,16
 18329f8:	2908b03a 	or	r4,r5,r4
 18329fc:	108003c3 	ldbu	r2,15(r2)
 1832a00:	1004963a 	slli	r2,r2,24
 1832a04:	1104b03a 	or	r2,r2,r4
 1832a08:	1880181e 	bne	r3,r2,1832a6c <ip_reass_remove_oldest_datagram+0xcc>
 1832a0c:	e0bff817 	ldw	r2,-32(fp)
 1832a10:	10c00617 	ldw	r3,24(r2)
 1832a14:	e0bffe17 	ldw	r2,-8(fp)
 1832a18:	11000403 	ldbu	r4,16(r2)
 1832a1c:	11400443 	ldbu	r5,17(r2)
 1832a20:	280a923a 	slli	r5,r5,8
 1832a24:	2908b03a 	or	r4,r5,r4
 1832a28:	11400483 	ldbu	r5,18(r2)
 1832a2c:	280a943a 	slli	r5,r5,16
 1832a30:	2908b03a 	or	r4,r5,r4
 1832a34:	108004c3 	ldbu	r2,19(r2)
 1832a38:	1004963a 	slli	r2,r2,24
 1832a3c:	1104b03a 	or	r2,r2,r4
 1832a40:	18800a1e 	bne	r3,r2,1832a6c <ip_reass_remove_oldest_datagram+0xcc>
 1832a44:	e0bff817 	ldw	r2,-32(fp)
 1832a48:	1100030b 	ldhu	r4,12(r2)
 1832a4c:	e0bffe17 	ldw	r2,-8(fp)
 1832a50:	10c00103 	ldbu	r3,4(r2)
 1832a54:	10800143 	ldbu	r2,5(r2)
 1832a58:	1004923a 	slli	r2,r2,8
 1832a5c:	10c4b03a 	or	r2,r2,r3
 1832a60:	20ffffcc 	andi	r3,r4,65535
 1832a64:	10bfffcc 	andi	r2,r2,65535
 1832a68:	18801126 	beq	r3,r2,1832ab0 <ip_reass_remove_oldest_datagram+0x110>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 1832a6c:	e0bffc17 	ldw	r2,-16(fp)
 1832a70:	10800044 	addi	r2,r2,1
 1832a74:	e0bffc15 	stw	r2,-16(fp)
        if (oldest == NULL) {
 1832a78:	e0bff917 	ldw	r2,-28(fp)
 1832a7c:	1000031e 	bne	r2,zero,1832a8c <ip_reass_remove_oldest_datagram+0xec>
          oldest = r;
 1832a80:	e0bff817 	ldw	r2,-32(fp)
 1832a84:	e0bff915 	stw	r2,-28(fp)
 1832a88:	00000906 	br	1832ab0 <ip_reass_remove_oldest_datagram+0x110>
        } else if (r->timer <= oldest->timer) {
 1832a8c:	e0bff817 	ldw	r2,-32(fp)
 1832a90:	110007c3 	ldbu	r4,31(r2)
 1832a94:	e0bff917 	ldw	r2,-28(fp)
 1832a98:	10c007c3 	ldbu	r3,31(r2)
 1832a9c:	20803fcc 	andi	r2,r4,255
 1832aa0:	18c03fcc 	andi	r3,r3,255
 1832aa4:	18800236 	bltu	r3,r2,1832ab0 <ip_reass_remove_oldest_datagram+0x110>
          /* older than the previous oldest */
          oldest = r;
 1832aa8:	e0bff817 	ldw	r2,-32(fp)
 1832aac:	e0bff915 	stw	r2,-28(fp)
        }
      }
      if (r->next != NULL) {
 1832ab0:	e0bff817 	ldw	r2,-32(fp)
 1832ab4:	10800017 	ldw	r2,0(r2)
 1832ab8:	10000226 	beq	r2,zero,1832ac4 <ip_reass_remove_oldest_datagram+0x124>
        prev = r;
 1832abc:	e0bff817 	ldw	r2,-32(fp)
 1832ac0:	e0bffa15 	stw	r2,-24(fp)
      }
      r = r->next;
 1832ac4:	e0bff817 	ldw	r2,-32(fp)
 1832ac8:	10800017 	ldw	r2,0(r2)
 1832acc:	e0bff815 	stw	r2,-32(fp)
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
 1832ad0:	e0bff817 	ldw	r2,-32(fp)
 1832ad4:	103fbf1e 	bne	r2,zero,18329d4 <__ram_exceptions_end+0xff8226e4>
      if (r->next != NULL) {
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
 1832ad8:	e0bff917 	ldw	r2,-28(fp)
 1832adc:	10000826 	beq	r2,zero,1832b00 <ip_reass_remove_oldest_datagram+0x160>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
 1832ae0:	e17ffa17 	ldw	r5,-24(fp)
 1832ae4:	e13ff917 	ldw	r4,-28(fp)
 1832ae8:	18328100 	call	1832810 <ip_reass_free_complete_datagram>
 1832aec:	e0bffd15 	stw	r2,-12(fp)
      pbufs_freed += pbufs_freed_current;
 1832af0:	e0fffb17 	ldw	r3,-20(fp)
 1832af4:	e0bffd17 	ldw	r2,-12(fp)
 1832af8:	1885883a 	add	r2,r3,r2
 1832afc:	e0bffb15 	stw	r2,-20(fp)
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 1832b00:	e0fffb17 	ldw	r3,-20(fp)
 1832b04:	e0bfff17 	ldw	r2,-4(fp)
 1832b08:	1880030e 	bge	r3,r2,1832b18 <ip_reass_remove_oldest_datagram+0x178>
 1832b0c:	e0bffc17 	ldw	r2,-16(fp)
 1832b10:	10800088 	cmpgei	r2,r2,2
 1832b14:	103fa91e 	bne	r2,zero,18329bc <__ram_exceptions_end+0xff8226cc>
  return pbufs_freed;
 1832b18:	e0bffb17 	ldw	r2,-20(fp)
}
 1832b1c:	e037883a 	mov	sp,fp
 1832b20:	dfc00117 	ldw	ra,4(sp)
 1832b24:	df000017 	ldw	fp,0(sp)
 1832b28:	dec00204 	addi	sp,sp,8
 1832b2c:	f800283a 	ret

01832b30 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 1832b30:	defffb04 	addi	sp,sp,-20
 1832b34:	dfc00415 	stw	ra,16(sp)
 1832b38:	df000315 	stw	fp,12(sp)
 1832b3c:	df000304 	addi	fp,sp,12
 1832b40:	e13ffe15 	stw	r4,-8(fp)
 1832b44:	e17fff15 	stw	r5,-4(fp)
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 1832b48:	00806134 	movhi	r2,388
 1832b4c:	108bcc84 	addi	r2,r2,12082
 1832b50:	1080028b 	ldhu	r2,10(r2)
 1832b54:	10bfffcc 	andi	r2,r2,65535
 1832b58:	1009883a 	mov	r4,r2
 1832b5c:	183c5000 	call	183c500 <malloc>
 1832b60:	e0bffd15 	stw	r2,-12(fp)
  if (ipr == NULL) {
 1832b64:	e0bffd17 	ldw	r2,-12(fp)
 1832b68:	1000181e 	bne	r2,zero,1832bcc <ip_reass_enqueue_new_datagram+0x9c>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 1832b6c:	e17fff17 	ldw	r5,-4(fp)
 1832b70:	e13ffe17 	ldw	r4,-8(fp)
 1832b74:	18329a00 	call	18329a0 <ip_reass_remove_oldest_datagram>
 1832b78:	1007883a 	mov	r3,r2
 1832b7c:	e0bfff17 	ldw	r2,-4(fp)
 1832b80:	18800716 	blt	r3,r2,1832ba0 <ip_reass_enqueue_new_datagram+0x70>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 1832b84:	00806134 	movhi	r2,388
 1832b88:	108bcc84 	addi	r2,r2,12082
 1832b8c:	1080028b 	ldhu	r2,10(r2)
 1832b90:	10bfffcc 	andi	r2,r2,65535
 1832b94:	1009883a 	mov	r4,r2
 1832b98:	183c5000 	call	183c500 <malloc>
 1832b9c:	e0bffd15 	stw	r2,-12(fp)
    }
    if (ipr == NULL)
 1832ba0:	e0bffd17 	ldw	r2,-12(fp)
 1832ba4:	1000091e 	bne	r2,zero,1832bcc <ip_reass_enqueue_new_datagram+0x9c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 1832ba8:	00806134 	movhi	r2,388
 1832bac:	109e7504 	addi	r2,r2,31188
 1832bb0:	10801e17 	ldw	r2,120(r2)
 1832bb4:	10c00044 	addi	r3,r2,1
 1832bb8:	00806134 	movhi	r2,388
 1832bbc:	109e7504 	addi	r2,r2,31188
 1832bc0:	10c01e15 	stw	r3,120(r2)
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 1832bc4:	0005883a 	mov	r2,zero
 1832bc8:	00001306 	br	1832c18 <ip_reass_enqueue_new_datagram+0xe8>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 1832bcc:	01800804 	movi	r6,32
 1832bd0:	000b883a 	mov	r5,zero
 1832bd4:	e13ffd17 	ldw	r4,-12(fp)
 1832bd8:	18060e00 	call	18060e0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 1832bdc:	e0bffd17 	ldw	r2,-12(fp)
 1832be0:	00c000c4 	movi	r3,3
 1832be4:	10c007c5 	stb	r3,31(r2)

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 1832be8:	d0e81317 	ldw	r3,-24500(gp)
 1832bec:	e0bffd17 	ldw	r2,-12(fp)
 1832bf0:	10c00015 	stw	r3,0(r2)
  reassdatagrams = ipr;
 1832bf4:	e0bffd17 	ldw	r2,-12(fp)
 1832bf8:	d0a81315 	stw	r2,-24500(gp)
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 1832bfc:	e0bffd17 	ldw	r2,-12(fp)
 1832c00:	10800204 	addi	r2,r2,8
 1832c04:	01800504 	movi	r6,20
 1832c08:	e17ffe17 	ldw	r5,-8(fp)
 1832c0c:	1009883a 	mov	r4,r2
 1832c10:	1805f980 	call	1805f98 <memcpy>
  return ipr;
 1832c14:	e0bffd17 	ldw	r2,-12(fp)
}
 1832c18:	e037883a 	mov	sp,fp
 1832c1c:	dfc00117 	ldw	ra,4(sp)
 1832c20:	df000017 	ldw	fp,0(sp)
 1832c24:	dec00204 	addi	sp,sp,8
 1832c28:	f800283a 	ret

01832c2c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 1832c2c:	defffc04 	addi	sp,sp,-16
 1832c30:	dfc00315 	stw	ra,12(sp)
 1832c34:	df000215 	stw	fp,8(sp)
 1832c38:	df000204 	addi	fp,sp,8
 1832c3c:	e13ffe15 	stw	r4,-8(fp)
 1832c40:	e17fff15 	stw	r5,-4(fp)
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 1832c44:	d0e81317 	ldw	r3,-24500(gp)
 1832c48:	e0bffe17 	ldw	r2,-8(fp)
 1832c4c:	1880041e 	bne	r3,r2,1832c60 <ip_reass_dequeue_datagram+0x34>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 1832c50:	e0bffe17 	ldw	r2,-8(fp)
 1832c54:	10800017 	ldw	r2,0(r2)
 1832c58:	d0a81315 	stw	r2,-24500(gp)
 1832c5c:	00000406 	br	1832c70 <ip_reass_dequeue_datagram+0x44>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 1832c60:	e0bffe17 	ldw	r2,-8(fp)
 1832c64:	10c00017 	ldw	r3,0(r2)
 1832c68:	e0bfff17 	ldw	r2,-4(fp)
 1832c6c:	10c00015 	stw	r3,0(r2)
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
 1832c70:	e13ffe17 	ldw	r4,-8(fp)
 1832c74:	183c5140 	call	183c514 <free>
}
 1832c78:	0001883a 	nop
 1832c7c:	e037883a 	mov	sp,fp
 1832c80:	dfc00117 	ldw	ra,4(sp)
 1832c84:	df000017 	ldw	fp,0(sp)
 1832c88:	dec00204 	addi	sp,sp,8
 1832c8c:	f800283a 	ret

01832c90 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
 1832c90:	defff504 	addi	sp,sp,-44
 1832c94:	dfc00a15 	stw	ra,40(sp)
 1832c98:	df000915 	stw	fp,36(sp)
 1832c9c:	df000904 	addi	fp,sp,36
 1832ca0:	e13ffe15 	stw	r4,-8(fp)
 1832ca4:	e17fff15 	stw	r5,-4(fp)
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 1832ca8:	e03ff715 	stw	zero,-36(fp)
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 1832cac:	00800044 	movi	r2,1
 1832cb0:	e0bff915 	stw	r2,-28(fp)

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
 1832cb4:	e0bfff17 	ldw	r2,-4(fp)
 1832cb8:	10800117 	ldw	r2,4(r2)
 1832cbc:	e0bffa15 	stw	r2,-24(fp)
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 1832cc0:	e0bffa17 	ldw	r2,-24(fp)
 1832cc4:	10c00083 	ldbu	r3,2(r2)
 1832cc8:	108000c3 	ldbu	r2,3(r2)
 1832ccc:	1004923a 	slli	r2,r2,8
 1832cd0:	10c4b03a 	or	r2,r2,r3
 1832cd4:	10bfffcc 	andi	r2,r2,65535
 1832cd8:	1004d23a 	srli	r2,r2,8
 1832cdc:	1009883a 	mov	r4,r2
 1832ce0:	e0bffa17 	ldw	r2,-24(fp)
 1832ce4:	10c00083 	ldbu	r3,2(r2)
 1832ce8:	108000c3 	ldbu	r2,3(r2)
 1832cec:	1004923a 	slli	r2,r2,8
 1832cf0:	10c4b03a 	or	r2,r2,r3
 1832cf4:	10bfffcc 	andi	r2,r2,65535
 1832cf8:	1004923a 	slli	r2,r2,8
 1832cfc:	2084b03a 	or	r2,r4,r2
 1832d00:	1007883a 	mov	r3,r2
 1832d04:	e0bffa17 	ldw	r2,-24(fp)
 1832d08:	10800003 	ldbu	r2,0(r2)
 1832d0c:	10803fcc 	andi	r2,r2,255
 1832d10:	108003cc 	andi	r2,r2,15
 1832d14:	1085883a 	add	r2,r2,r2
 1832d18:	1085883a 	add	r2,r2,r2
 1832d1c:	1885c83a 	sub	r2,r3,r2
 1832d20:	e0bffb0d 	sth	r2,-20(fp)
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 1832d24:	e0bffa17 	ldw	r2,-24(fp)
 1832d28:	10c00183 	ldbu	r3,6(r2)
 1832d2c:	108001c3 	ldbu	r2,7(r2)
 1832d30:	1004923a 	slli	r2,r2,8
 1832d34:	10c4b03a 	or	r2,r2,r3
 1832d38:	10bfffcc 	andi	r2,r2,65535
 1832d3c:	1004d23a 	srli	r2,r2,8
 1832d40:	10ffffcc 	andi	r3,r2,65535
 1832d44:	e0bffa17 	ldw	r2,-24(fp)
 1832d48:	11000183 	ldbu	r4,6(r2)
 1832d4c:	108001c3 	ldbu	r2,7(r2)
 1832d50:	1004923a 	slli	r2,r2,8
 1832d54:	1104b03a 	or	r2,r2,r4
 1832d58:	10bfffcc 	andi	r2,r2,65535
 1832d5c:	1004923a 	slli	r2,r2,8
 1832d60:	10bfffcc 	andi	r2,r2,65535
 1832d64:	1884b03a 	or	r2,r3,r2
 1832d68:	1087ffcc 	andi	r2,r2,8191
 1832d6c:	100490fa 	slli	r2,r2,3
 1832d70:	e0bffb8d 	sth	r2,-18(fp)
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 1832d74:	e0bfff17 	ldw	r2,-4(fp)
 1832d78:	10800117 	ldw	r2,4(r2)
 1832d7c:	e0bffc15 	stw	r2,-16(fp)
  iprh->next_pbuf = NULL;
 1832d80:	e0bffc17 	ldw	r2,-16(fp)
 1832d84:	10c00003 	ldbu	r3,0(r2)
 1832d88:	1806703a 	and	r3,r3,zero
 1832d8c:	10c00005 	stb	r3,0(r2)
 1832d90:	10c00043 	ldbu	r3,1(r2)
 1832d94:	1806703a 	and	r3,r3,zero
 1832d98:	10c00045 	stb	r3,1(r2)
 1832d9c:	10c00083 	ldbu	r3,2(r2)
 1832da0:	1806703a 	and	r3,r3,zero
 1832da4:	10c00085 	stb	r3,2(r2)
 1832da8:	10c000c3 	ldbu	r3,3(r2)
 1832dac:	1806703a 	and	r3,r3,zero
 1832db0:	10c000c5 	stb	r3,3(r2)
  iprh->start = offset;
 1832db4:	e0bffc17 	ldw	r2,-16(fp)
 1832db8:	e0fffb8b 	ldhu	r3,-18(fp)
 1832dbc:	19403fcc 	andi	r5,r3,255
 1832dc0:	10c00103 	ldbu	r3,4(r2)
 1832dc4:	1806703a 	and	r3,r3,zero
 1832dc8:	1809883a 	mov	r4,r3
 1832dcc:	2807883a 	mov	r3,r5
 1832dd0:	20c6b03a 	or	r3,r4,r3
 1832dd4:	10c00105 	stb	r3,4(r2)
 1832dd8:	e0fffb8b 	ldhu	r3,-18(fp)
 1832ddc:	1806d23a 	srli	r3,r3,8
 1832de0:	197fffcc 	andi	r5,r3,65535
 1832de4:	10c00143 	ldbu	r3,5(r2)
 1832de8:	1806703a 	and	r3,r3,zero
 1832dec:	1809883a 	mov	r4,r3
 1832df0:	2807883a 	mov	r3,r5
 1832df4:	20c6b03a 	or	r3,r4,r3
 1832df8:	10c00145 	stb	r3,5(r2)
  iprh->end = offset + len;
 1832dfc:	e0fffb8b 	ldhu	r3,-18(fp)
 1832e00:	e0bffb0b 	ldhu	r2,-20(fp)
 1832e04:	1885883a 	add	r2,r3,r2
 1832e08:	100d883a 	mov	r6,r2
 1832e0c:	e0bffc17 	ldw	r2,-16(fp)
 1832e10:	30ffffcc 	andi	r3,r6,65535
 1832e14:	19403fcc 	andi	r5,r3,255
 1832e18:	10c00183 	ldbu	r3,6(r2)
 1832e1c:	1806703a 	and	r3,r3,zero
 1832e20:	1809883a 	mov	r4,r3
 1832e24:	2807883a 	mov	r3,r5
 1832e28:	20c6b03a 	or	r3,r4,r3
 1832e2c:	10c00185 	stb	r3,6(r2)
 1832e30:	30ffffcc 	andi	r3,r6,65535
 1832e34:	1806d23a 	srli	r3,r3,8
 1832e38:	197fffcc 	andi	r5,r3,65535
 1832e3c:	10c001c3 	ldbu	r3,7(r2)
 1832e40:	1806703a 	and	r3,r3,zero
 1832e44:	1809883a 	mov	r4,r3
 1832e48:	2807883a 	mov	r3,r5
 1832e4c:	20c6b03a 	or	r3,r4,r3
 1832e50:	10c001c5 	stb	r3,7(r2)

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 1832e54:	e0bffe17 	ldw	r2,-8(fp)
 1832e58:	10800117 	ldw	r2,4(r2)
 1832e5c:	e0bff815 	stw	r2,-32(fp)
 1832e60:	0000b606 	br	183313c <ip_reass_chain_frag_into_datagram_and_validate+0x4ac>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 1832e64:	e0bff817 	ldw	r2,-32(fp)
 1832e68:	10800117 	ldw	r2,4(r2)
 1832e6c:	e0bffd15 	stw	r2,-12(fp)
    if (iprh->start < iprh_tmp->start) {
 1832e70:	e0bffc17 	ldw	r2,-16(fp)
 1832e74:	10c00103 	ldbu	r3,4(r2)
 1832e78:	10800143 	ldbu	r2,5(r2)
 1832e7c:	1004923a 	slli	r2,r2,8
 1832e80:	10c4b03a 	or	r2,r2,r3
 1832e84:	1009883a 	mov	r4,r2
 1832e88:	e0bffd17 	ldw	r2,-12(fp)
 1832e8c:	10c00103 	ldbu	r3,4(r2)
 1832e90:	10800143 	ldbu	r2,5(r2)
 1832e94:	1004923a 	slli	r2,r2,8
 1832e98:	10c4b03a 	or	r2,r2,r3
 1832e9c:	20ffffcc 	andi	r3,r4,65535
 1832ea0:	10bfffcc 	andi	r2,r2,65535
 1832ea4:	18806a2e 	bgeu	r3,r2,1833050 <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 1832ea8:	e0bffc17 	ldw	r2,-16(fp)
 1832eac:	e0fff817 	ldw	r3,-32(fp)
 1832eb0:	19403fcc 	andi	r5,r3,255
 1832eb4:	10c00003 	ldbu	r3,0(r2)
 1832eb8:	1806703a 	and	r3,r3,zero
 1832ebc:	1809883a 	mov	r4,r3
 1832ec0:	2807883a 	mov	r3,r5
 1832ec4:	20c6b03a 	or	r3,r4,r3
 1832ec8:	10c00005 	stb	r3,0(r2)
 1832ecc:	e0fff817 	ldw	r3,-32(fp)
 1832ed0:	1806d23a 	srli	r3,r3,8
 1832ed4:	19403fcc 	andi	r5,r3,255
 1832ed8:	10c00043 	ldbu	r3,1(r2)
 1832edc:	1806703a 	and	r3,r3,zero
 1832ee0:	1809883a 	mov	r4,r3
 1832ee4:	2807883a 	mov	r3,r5
 1832ee8:	20c6b03a 	or	r3,r4,r3
 1832eec:	10c00045 	stb	r3,1(r2)
 1832ef0:	e0fff817 	ldw	r3,-32(fp)
 1832ef4:	1806d43a 	srli	r3,r3,16
 1832ef8:	19403fcc 	andi	r5,r3,255
 1832efc:	10c00083 	ldbu	r3,2(r2)
 1832f00:	1806703a 	and	r3,r3,zero
 1832f04:	1809883a 	mov	r4,r3
 1832f08:	2807883a 	mov	r3,r5
 1832f0c:	20c6b03a 	or	r3,r4,r3
 1832f10:	10c00085 	stb	r3,2(r2)
 1832f14:	e0fff817 	ldw	r3,-32(fp)
 1832f18:	180ad63a 	srli	r5,r3,24
 1832f1c:	10c000c3 	ldbu	r3,3(r2)
 1832f20:	1806703a 	and	r3,r3,zero
 1832f24:	1809883a 	mov	r4,r3
 1832f28:	2807883a 	mov	r3,r5
 1832f2c:	20c6b03a 	or	r3,r4,r3
 1832f30:	10c000c5 	stb	r3,3(r2)
      if (iprh_prev != NULL) {
 1832f34:	e0bff717 	ldw	r2,-36(fp)
 1832f38:	10004126 	beq	r2,zero,1833040 <ip_reass_chain_frag_into_datagram_and_validate+0x3b0>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 1832f3c:	e0bffc17 	ldw	r2,-16(fp)
 1832f40:	10c00103 	ldbu	r3,4(r2)
 1832f44:	10800143 	ldbu	r2,5(r2)
 1832f48:	1004923a 	slli	r2,r2,8
 1832f4c:	10c4b03a 	or	r2,r2,r3
 1832f50:	1009883a 	mov	r4,r2
 1832f54:	e0bff717 	ldw	r2,-36(fp)
 1832f58:	10c00183 	ldbu	r3,6(r2)
 1832f5c:	108001c3 	ldbu	r2,7(r2)
 1832f60:	1004923a 	slli	r2,r2,8
 1832f64:	10c4b03a 	or	r2,r2,r3
 1832f68:	20ffffcc 	andi	r3,r4,65535
 1832f6c:	10bfffcc 	andi	r2,r2,65535
 1832f70:	1880f936 	bltu	r3,r2,1833358 <ip_reass_chain_frag_into_datagram_and_validate+0x6c8>
 1832f74:	e0bffc17 	ldw	r2,-16(fp)
 1832f78:	10c00183 	ldbu	r3,6(r2)
 1832f7c:	108001c3 	ldbu	r2,7(r2)
 1832f80:	1004923a 	slli	r2,r2,8
 1832f84:	10c4b03a 	or	r2,r2,r3
 1832f88:	1009883a 	mov	r4,r2
 1832f8c:	e0bffd17 	ldw	r2,-12(fp)
 1832f90:	10c00103 	ldbu	r3,4(r2)
 1832f94:	10800143 	ldbu	r2,5(r2)
 1832f98:	1004923a 	slli	r2,r2,8
 1832f9c:	10c4b03a 	or	r2,r2,r3
 1832fa0:	1007883a 	mov	r3,r2
 1832fa4:	20bfffcc 	andi	r2,r4,65535
 1832fa8:	18ffffcc 	andi	r3,r3,65535
 1832fac:	1880ea36 	bltu	r3,r2,1833358 <ip_reass_chain_frag_into_datagram_and_validate+0x6c8>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 1832fb0:	e0bff717 	ldw	r2,-36(fp)
 1832fb4:	e0ffff17 	ldw	r3,-4(fp)
 1832fb8:	19403fcc 	andi	r5,r3,255
 1832fbc:	10c00003 	ldbu	r3,0(r2)
 1832fc0:	1806703a 	and	r3,r3,zero
 1832fc4:	1809883a 	mov	r4,r3
 1832fc8:	2807883a 	mov	r3,r5
 1832fcc:	20c6b03a 	or	r3,r4,r3
 1832fd0:	10c00005 	stb	r3,0(r2)
 1832fd4:	e0ffff17 	ldw	r3,-4(fp)
 1832fd8:	1806d23a 	srli	r3,r3,8
 1832fdc:	19403fcc 	andi	r5,r3,255
 1832fe0:	10c00043 	ldbu	r3,1(r2)
 1832fe4:	1806703a 	and	r3,r3,zero
 1832fe8:	1809883a 	mov	r4,r3
 1832fec:	2807883a 	mov	r3,r5
 1832ff0:	20c6b03a 	or	r3,r4,r3
 1832ff4:	10c00045 	stb	r3,1(r2)
 1832ff8:	e0ffff17 	ldw	r3,-4(fp)
 1832ffc:	1806d43a 	srli	r3,r3,16
 1833000:	19403fcc 	andi	r5,r3,255
 1833004:	10c00083 	ldbu	r3,2(r2)
 1833008:	1806703a 	and	r3,r3,zero
 183300c:	1809883a 	mov	r4,r3
 1833010:	2807883a 	mov	r3,r5
 1833014:	20c6b03a 	or	r3,r4,r3
 1833018:	10c00085 	stb	r3,2(r2)
 183301c:	e0ffff17 	ldw	r3,-4(fp)
 1833020:	180ad63a 	srli	r5,r3,24
 1833024:	10c000c3 	ldbu	r3,3(r2)
 1833028:	1806703a 	and	r3,r3,zero
 183302c:	1809883a 	mov	r4,r3
 1833030:	2807883a 	mov	r3,r5
 1833034:	20c6b03a 	or	r3,r4,r3
 1833038:	10c000c5 	stb	r3,3(r2)
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 183303c:	00004106 	br	1833144 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
 1833040:	e0bffe17 	ldw	r2,-8(fp)
 1833044:	e0ffff17 	ldw	r3,-4(fp)
 1833048:	10c00115 	stw	r3,4(r2)
      }
      break;
 183304c:	00003d06 	br	1833144 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
    } else if(iprh->start == iprh_tmp->start) {
 1833050:	e0bffc17 	ldw	r2,-16(fp)
 1833054:	10c00103 	ldbu	r3,4(r2)
 1833058:	10800143 	ldbu	r2,5(r2)
 183305c:	1004923a 	slli	r2,r2,8
 1833060:	10c4b03a 	or	r2,r2,r3
 1833064:	1009883a 	mov	r4,r2
 1833068:	e0bffd17 	ldw	r2,-12(fp)
 183306c:	10c00103 	ldbu	r3,4(r2)
 1833070:	10800143 	ldbu	r2,5(r2)
 1833074:	1004923a 	slli	r2,r2,8
 1833078:	10c4b03a 	or	r2,r2,r3
 183307c:	20ffffcc 	andi	r3,r4,65535
 1833080:	10bfffcc 	andi	r2,r2,65535
 1833084:	1880b126 	beq	r3,r2,183334c <ip_reass_chain_frag_into_datagram_and_validate+0x6bc>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
 1833088:	e0bffc17 	ldw	r2,-16(fp)
 183308c:	10c00103 	ldbu	r3,4(r2)
 1833090:	10800143 	ldbu	r2,5(r2)
 1833094:	1004923a 	slli	r2,r2,8
 1833098:	10c4b03a 	or	r2,r2,r3
 183309c:	1009883a 	mov	r4,r2
 18330a0:	e0bffd17 	ldw	r2,-12(fp)
 18330a4:	10c00183 	ldbu	r3,6(r2)
 18330a8:	108001c3 	ldbu	r2,7(r2)
 18330ac:	1004923a 	slli	r2,r2,8
 18330b0:	10c4b03a 	or	r2,r2,r3
 18330b4:	20ffffcc 	andi	r3,r4,65535
 18330b8:	10bfffcc 	andi	r2,r2,65535
 18330bc:	1880a536 	bltu	r3,r2,1833354 <ip_reass_chain_frag_into_datagram_and_validate+0x6c4>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
 18330c0:	e0bff717 	ldw	r2,-36(fp)
 18330c4:	10000f26 	beq	r2,zero,1833104 <ip_reass_chain_frag_into_datagram_and_validate+0x474>
        if (iprh_prev->end != iprh_tmp->start) {
 18330c8:	e0bff717 	ldw	r2,-36(fp)
 18330cc:	10c00183 	ldbu	r3,6(r2)
 18330d0:	108001c3 	ldbu	r2,7(r2)
 18330d4:	1004923a 	slli	r2,r2,8
 18330d8:	10c4b03a 	or	r2,r2,r3
 18330dc:	1009883a 	mov	r4,r2
 18330e0:	e0bffd17 	ldw	r2,-12(fp)
 18330e4:	10c00103 	ldbu	r3,4(r2)
 18330e8:	10800143 	ldbu	r2,5(r2)
 18330ec:	1004923a 	slli	r2,r2,8
 18330f0:	10c4b03a 	or	r2,r2,r3
 18330f4:	20ffffcc 	andi	r3,r4,65535
 18330f8:	10bfffcc 	andi	r2,r2,65535
 18330fc:	18800126 	beq	r3,r2,1833104 <ip_reass_chain_frag_into_datagram_and_validate+0x474>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 1833100:	e03ff915 	stw	zero,-28(fp)
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 1833104:	e0bffd17 	ldw	r2,-12(fp)
 1833108:	10c00003 	ldbu	r3,0(r2)
 183310c:	11000043 	ldbu	r4,1(r2)
 1833110:	2008923a 	slli	r4,r4,8
 1833114:	20c6b03a 	or	r3,r4,r3
 1833118:	11000083 	ldbu	r4,2(r2)
 183311c:	2008943a 	slli	r4,r4,16
 1833120:	20c6b03a 	or	r3,r4,r3
 1833124:	108000c3 	ldbu	r2,3(r2)
 1833128:	1004963a 	slli	r2,r2,24
 183312c:	10c4b03a 	or	r2,r2,r3
 1833130:	e0bff815 	stw	r2,-32(fp)
    iprh_prev = iprh_tmp;
 1833134:	e0bffd17 	ldw	r2,-12(fp)
 1833138:	e0bff715 	stw	r2,-36(fp)
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 183313c:	e0bff817 	ldw	r2,-32(fp)
 1833140:	103f481e 	bne	r2,zero,1832e64 <__ram_exceptions_end+0xff822b74>
    q = iprh_tmp->next_pbuf;
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 1833144:	e0bff817 	ldw	r2,-32(fp)
 1833148:	1000381e 	bne	r2,zero,183322c <ip_reass_chain_frag_into_datagram_and_validate+0x59c>
    if (iprh_prev != NULL) {
 183314c:	e0bff717 	ldw	r2,-36(fp)
 1833150:	10003326 	beq	r2,zero,1833220 <ip_reass_chain_frag_into_datagram_and_validate+0x590>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 1833154:	e0bff717 	ldw	r2,-36(fp)
 1833158:	e0ffff17 	ldw	r3,-4(fp)
 183315c:	19403fcc 	andi	r5,r3,255
 1833160:	10c00003 	ldbu	r3,0(r2)
 1833164:	1806703a 	and	r3,r3,zero
 1833168:	1809883a 	mov	r4,r3
 183316c:	2807883a 	mov	r3,r5
 1833170:	20c6b03a 	or	r3,r4,r3
 1833174:	10c00005 	stb	r3,0(r2)
 1833178:	e0ffff17 	ldw	r3,-4(fp)
 183317c:	1806d23a 	srli	r3,r3,8
 1833180:	19403fcc 	andi	r5,r3,255
 1833184:	10c00043 	ldbu	r3,1(r2)
 1833188:	1806703a 	and	r3,r3,zero
 183318c:	1809883a 	mov	r4,r3
 1833190:	2807883a 	mov	r3,r5
 1833194:	20c6b03a 	or	r3,r4,r3
 1833198:	10c00045 	stb	r3,1(r2)
 183319c:	e0ffff17 	ldw	r3,-4(fp)
 18331a0:	1806d43a 	srli	r3,r3,16
 18331a4:	19403fcc 	andi	r5,r3,255
 18331a8:	10c00083 	ldbu	r3,2(r2)
 18331ac:	1806703a 	and	r3,r3,zero
 18331b0:	1809883a 	mov	r4,r3
 18331b4:	2807883a 	mov	r3,r5
 18331b8:	20c6b03a 	or	r3,r4,r3
 18331bc:	10c00085 	stb	r3,2(r2)
 18331c0:	e0ffff17 	ldw	r3,-4(fp)
 18331c4:	180ad63a 	srli	r5,r3,24
 18331c8:	10c000c3 	ldbu	r3,3(r2)
 18331cc:	1806703a 	and	r3,r3,zero
 18331d0:	1809883a 	mov	r4,r3
 18331d4:	2807883a 	mov	r3,r5
 18331d8:	20c6b03a 	or	r3,r4,r3
 18331dc:	10c000c5 	stb	r3,3(r2)
      if (iprh_prev->end != iprh->start) {
 18331e0:	e0bff717 	ldw	r2,-36(fp)
 18331e4:	10c00183 	ldbu	r3,6(r2)
 18331e8:	108001c3 	ldbu	r2,7(r2)
 18331ec:	1004923a 	slli	r2,r2,8
 18331f0:	10c4b03a 	or	r2,r2,r3
 18331f4:	1009883a 	mov	r4,r2
 18331f8:	e0bffc17 	ldw	r2,-16(fp)
 18331fc:	10c00103 	ldbu	r3,4(r2)
 1833200:	10800143 	ldbu	r2,5(r2)
 1833204:	1004923a 	slli	r2,r2,8
 1833208:	10c4b03a 	or	r2,r2,r3
 183320c:	20ffffcc 	andi	r3,r4,65535
 1833210:	10bfffcc 	andi	r2,r2,65535
 1833214:	18800526 	beq	r3,r2,183322c <ip_reass_chain_frag_into_datagram_and_validate+0x59c>
        valid = 0;
 1833218:	e03ff915 	stw	zero,-28(fp)
 183321c:	00000306 	br	183322c <ip_reass_chain_frag_into_datagram_and_validate+0x59c>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 1833220:	e0bffe17 	ldw	r2,-8(fp)
 1833224:	e0ffff17 	ldw	r3,-4(fp)
 1833228:	10c00115 	stw	r3,4(r2)
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 183322c:	e0bffe17 	ldw	r2,-8(fp)
 1833230:	10800783 	ldbu	r2,30(r2)
 1833234:	10803fcc 	andi	r2,r2,255
 1833238:	1080004c 	andi	r2,r2,1
 183323c:	10004126 	beq	r2,zero,1833344 <ip_reass_chain_frag_into_datagram_and_validate+0x6b4>
    /* and had no wholes so far */
    if (valid) {
 1833240:	e0bff917 	ldw	r2,-28(fp)
 1833244:	10003d26 	beq	r2,zero,183333c <ip_reass_chain_frag_into_datagram_and_validate+0x6ac>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
 1833248:	e0bffe17 	ldw	r2,-8(fp)
 183324c:	10800117 	ldw	r2,4(r2)
 1833250:	10800117 	ldw	r2,4(r2)
 1833254:	10c00103 	ldbu	r3,4(r2)
 1833258:	10800143 	ldbu	r2,5(r2)
 183325c:	1004923a 	slli	r2,r2,8
 1833260:	10c4b03a 	or	r2,r2,r3
 1833264:	10bfffcc 	andi	r2,r2,65535
 1833268:	10000226 	beq	r2,zero,1833274 <ip_reass_chain_frag_into_datagram_and_validate+0x5e4>
        valid = 0;
 183326c:	e03ff915 	stw	zero,-28(fp)
 1833270:	00003206 	br	183333c <ip_reass_chain_frag_into_datagram_and_validate+0x6ac>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
 1833274:	e0bffc17 	ldw	r2,-16(fp)
 1833278:	e0bff715 	stw	r2,-36(fp)
        q = iprh->next_pbuf;
 183327c:	e0bffc17 	ldw	r2,-16(fp)
 1833280:	10c00003 	ldbu	r3,0(r2)
 1833284:	11000043 	ldbu	r4,1(r2)
 1833288:	2008923a 	slli	r4,r4,8
 183328c:	20c6b03a 	or	r3,r4,r3
 1833290:	11000083 	ldbu	r4,2(r2)
 1833294:	2008943a 	slli	r4,r4,16
 1833298:	20c6b03a 	or	r3,r4,r3
 183329c:	108000c3 	ldbu	r2,3(r2)
 18332a0:	1004963a 	slli	r2,r2,24
 18332a4:	10c4b03a 	or	r2,r2,r3
 18332a8:	e0bff815 	stw	r2,-32(fp)
        while (q != NULL) {
 18332ac:	00002106 	br	1833334 <ip_reass_chain_frag_into_datagram_and_validate+0x6a4>
          iprh = (struct ip_reass_helper*)q->payload;
 18332b0:	e0bff817 	ldw	r2,-32(fp)
 18332b4:	10800117 	ldw	r2,4(r2)
 18332b8:	e0bffc15 	stw	r2,-16(fp)
          if (iprh_prev->end != iprh->start) {
 18332bc:	e0bff717 	ldw	r2,-36(fp)
 18332c0:	10c00183 	ldbu	r3,6(r2)
 18332c4:	108001c3 	ldbu	r2,7(r2)
 18332c8:	1004923a 	slli	r2,r2,8
 18332cc:	10c4b03a 	or	r2,r2,r3
 18332d0:	1009883a 	mov	r4,r2
 18332d4:	e0bffc17 	ldw	r2,-16(fp)
 18332d8:	10c00103 	ldbu	r3,4(r2)
 18332dc:	10800143 	ldbu	r2,5(r2)
 18332e0:	1004923a 	slli	r2,r2,8
 18332e4:	10c4b03a 	or	r2,r2,r3
 18332e8:	20ffffcc 	andi	r3,r4,65535
 18332ec:	10bfffcc 	andi	r2,r2,65535
 18332f0:	18800226 	beq	r3,r2,18332fc <ip_reass_chain_frag_into_datagram_and_validate+0x66c>
            valid = 0;
 18332f4:	e03ff915 	stw	zero,-28(fp)
            break;
 18332f8:	00001006 	br	183333c <ip_reass_chain_frag_into_datagram_and_validate+0x6ac>
          }
          iprh_prev = iprh;
 18332fc:	e0bffc17 	ldw	r2,-16(fp)
 1833300:	e0bff715 	stw	r2,-36(fp)
          q = iprh->next_pbuf;
 1833304:	e0bffc17 	ldw	r2,-16(fp)
 1833308:	10c00003 	ldbu	r3,0(r2)
 183330c:	11000043 	ldbu	r4,1(r2)
 1833310:	2008923a 	slli	r4,r4,8
 1833314:	20c6b03a 	or	r3,r4,r3
 1833318:	11000083 	ldbu	r4,2(r2)
 183331c:	2008943a 	slli	r4,r4,16
 1833320:	20c6b03a 	or	r3,r4,r3
 1833324:	108000c3 	ldbu	r2,3(r2)
 1833328:	1004963a 	slli	r2,r2,24
 183332c:	10c4b03a 	or	r2,r2,r3
 1833330:	e0bff815 	stw	r2,-32(fp)
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
 1833334:	e0bff817 	ldw	r2,-32(fp)
 1833338:	103fdd1e 	bne	r2,zero,18332b0 <__ram_exceptions_end+0xff822fc0>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
 183333c:	e0bff917 	ldw	r2,-28(fp)
 1833340:	00000e06 	br	183337c <ip_reass_chain_frag_into_datagram_and_validate+0x6ec>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
 1833344:	0005883a 	mov	r2,zero
 1833348:	00000c06 	br	183337c <ip_reass_chain_frag_into_datagram_and_validate+0x6ec>
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
 183334c:	0001883a 	nop
 1833350:	00000106 	br	1833358 <ip_reass_chain_frag_into_datagram_and_validate+0x6c8>
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
 1833354:	0001883a 	nop
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 1833358:	e13fff17 	ldw	r4,-4(fp)
 183335c:	181a3680 	call	181a368 <pbuf_clen>
 1833360:	d0e8140b 	ldhu	r3,-24496(gp)
 1833364:	10803fcc 	andi	r2,r2,255
 1833368:	1885c83a 	sub	r2,r3,r2
 183336c:	d0a8140d 	sth	r2,-24496(gp)
  pbuf_free(new_p);
 1833370:	e13fff17 	ldw	r4,-4(fp)
 1833374:	181a22c0 	call	181a22c <pbuf_free>
  return 0;
 1833378:	0005883a 	mov	r2,zero
#endif /* IP_REASS_CHECK_OVERLAP */
}
 183337c:	e037883a 	mov	sp,fp
 1833380:	dfc00117 	ldw	ra,4(sp)
 1833384:	df000017 	ldw	fp,0(sp)
 1833388:	dec00204 	addi	sp,sp,8
 183338c:	f800283a 	ret

01833390 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
 1833390:	defff604 	addi	sp,sp,-40
 1833394:	dfc00915 	stw	ra,36(sp)
 1833398:	df000815 	stw	fp,32(sp)
 183339c:	df000804 	addi	fp,sp,32
 18333a0:	e13fff15 	stw	r4,-4(fp)
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
 18333a4:	e03ffa15 	stw	zero,-24(fp)

  IPFRAG_STATS_INC(ip_frag.recv);
 18333a8:	00806134 	movhi	r2,388
 18333ac:	109e7504 	addi	r2,r2,31188
 18333b0:	10801917 	ldw	r2,100(r2)
 18333b4:	10c00044 	addi	r3,r2,1
 18333b8:	00806134 	movhi	r2,388
 18333bc:	109e7504 	addi	r2,r2,31188
 18333c0:	10c01915 	stw	r3,100(r2)
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
 18333c4:	e0bfff17 	ldw	r2,-4(fp)
 18333c8:	10800117 	ldw	r2,4(r2)
 18333cc:	e0bffb15 	stw	r2,-20(fp)

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 18333d0:	e0bffb17 	ldw	r2,-20(fp)
 18333d4:	10800003 	ldbu	r2,0(r2)
 18333d8:	10803fcc 	andi	r2,r2,255
 18333dc:	108003cc 	andi	r2,r2,15
 18333e0:	1085883a 	add	r2,r2,r2
 18333e4:	1085883a 	add	r2,r2,r2
 18333e8:	10800520 	cmpeqi	r2,r2,20
 18333ec:	1000081e 	bne	r2,zero,1833410 <ip_reass+0x80>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 18333f0:	00806134 	movhi	r2,388
 18333f4:	109e7504 	addi	r2,r2,31188
 18333f8:	10802217 	ldw	r2,136(r2)
 18333fc:	10c00044 	addi	r3,r2,1
 1833400:	00806134 	movhi	r2,388
 1833404:	109e7504 	addi	r2,r2,31188
 1833408:	10c02215 	stw	r3,136(r2)
    goto nullreturn;
 183340c:	00015406 	br	1833960 <ip_reass+0x5d0>
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 1833410:	e0bffb17 	ldw	r2,-20(fp)
 1833414:	10c00183 	ldbu	r3,6(r2)
 1833418:	108001c3 	ldbu	r2,7(r2)
 183341c:	1004923a 	slli	r2,r2,8
 1833420:	10c4b03a 	or	r2,r2,r3
 1833424:	10bfffcc 	andi	r2,r2,65535
 1833428:	1004d23a 	srli	r2,r2,8
 183342c:	10ffffcc 	andi	r3,r2,65535
 1833430:	e0bffb17 	ldw	r2,-20(fp)
 1833434:	11000183 	ldbu	r4,6(r2)
 1833438:	108001c3 	ldbu	r2,7(r2)
 183343c:	1004923a 	slli	r2,r2,8
 1833440:	1104b03a 	or	r2,r2,r4
 1833444:	10bfffcc 	andi	r2,r2,65535
 1833448:	1004923a 	slli	r2,r2,8
 183344c:	10bfffcc 	andi	r2,r2,65535
 1833450:	1884b03a 	or	r2,r3,r2
 1833454:	1087ffcc 	andi	r2,r2,8191
 1833458:	100490fa 	slli	r2,r2,3
 183345c:	e0bffc0d 	sth	r2,-16(fp)
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 1833460:	e0bffb17 	ldw	r2,-20(fp)
 1833464:	10c00083 	ldbu	r3,2(r2)
 1833468:	108000c3 	ldbu	r2,3(r2)
 183346c:	1004923a 	slli	r2,r2,8
 1833470:	10c4b03a 	or	r2,r2,r3
 1833474:	10bfffcc 	andi	r2,r2,65535
 1833478:	1004d23a 	srli	r2,r2,8
 183347c:	1009883a 	mov	r4,r2
 1833480:	e0bffb17 	ldw	r2,-20(fp)
 1833484:	10c00083 	ldbu	r3,2(r2)
 1833488:	108000c3 	ldbu	r2,3(r2)
 183348c:	1004923a 	slli	r2,r2,8
 1833490:	10c4b03a 	or	r2,r2,r3
 1833494:	10bfffcc 	andi	r2,r2,65535
 1833498:	1004923a 	slli	r2,r2,8
 183349c:	2084b03a 	or	r2,r4,r2
 18334a0:	1007883a 	mov	r3,r2
 18334a4:	e0bffb17 	ldw	r2,-20(fp)
 18334a8:	10800003 	ldbu	r2,0(r2)
 18334ac:	10803fcc 	andi	r2,r2,255
 18334b0:	108003cc 	andi	r2,r2,15
 18334b4:	1085883a 	add	r2,r2,r2
 18334b8:	1085883a 	add	r2,r2,r2
 18334bc:	1885c83a 	sub	r2,r3,r2
 18334c0:	e0bffc8d 	sth	r2,-14(fp)

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 18334c4:	e13fff17 	ldw	r4,-4(fp)
 18334c8:	181a3680 	call	181a368 <pbuf_clen>
 18334cc:	e0bffd05 	stb	r2,-12(fp)
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 18334d0:	d0a8140b 	ldhu	r2,-24496(gp)
 18334d4:	10ffffcc 	andi	r3,r2,65535
 18334d8:	e0bffd03 	ldbu	r2,-12(fp)
 18334dc:	1885883a 	add	r2,r3,r2
 18334e0:	108002d0 	cmplti	r2,r2,11
 18334e4:	1000131e 	bne	r2,zero,1833534 <ip_reass+0x1a4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 18334e8:	e0bffd03 	ldbu	r2,-12(fp)
 18334ec:	100b883a 	mov	r5,r2
 18334f0:	e13ffb17 	ldw	r4,-20(fp)
 18334f4:	18329a00 	call	18329a0 <ip_reass_remove_oldest_datagram>
 18334f8:	10000626 	beq	r2,zero,1833514 <ip_reass+0x184>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 18334fc:	d0a8140b 	ldhu	r2,-24496(gp)
 1833500:	10ffffcc 	andi	r3,r2,65535
 1833504:	e0bffd03 	ldbu	r2,-12(fp)
 1833508:	1885883a 	add	r2,r3,r2

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 183350c:	108002d0 	cmplti	r2,r2,11
 1833510:	1000081e 	bne	r2,zero,1833534 <ip_reass+0x1a4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 1833514:	00806134 	movhi	r2,388
 1833518:	109e7504 	addi	r2,r2,31188
 183351c:	10801e17 	ldw	r2,120(r2)
 1833520:	10c00044 	addi	r3,r2,1
 1833524:	00806134 	movhi	r2,388
 1833528:	109e7504 	addi	r2,r2,31188
 183352c:	10c01e15 	stw	r3,120(r2)
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 1833530:	00010b06 	br	1833960 <ip_reass+0x5d0>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 1833534:	d0a81317 	ldw	r2,-24500(gp)
 1833538:	e0bff915 	stw	r2,-28(fp)
 183353c:	00003306 	br	183360c <ip_reass+0x27c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 1833540:	e0bff917 	ldw	r2,-28(fp)
 1833544:	10c00517 	ldw	r3,20(r2)
 1833548:	e0bffb17 	ldw	r2,-20(fp)
 183354c:	11000303 	ldbu	r4,12(r2)
 1833550:	11400343 	ldbu	r5,13(r2)
 1833554:	280a923a 	slli	r5,r5,8
 1833558:	2908b03a 	or	r4,r5,r4
 183355c:	11400383 	ldbu	r5,14(r2)
 1833560:	280a943a 	slli	r5,r5,16
 1833564:	2908b03a 	or	r4,r5,r4
 1833568:	108003c3 	ldbu	r2,15(r2)
 183356c:	1004963a 	slli	r2,r2,24
 1833570:	1104b03a 	or	r2,r2,r4
 1833574:	1880201e 	bne	r3,r2,18335f8 <ip_reass+0x268>
 1833578:	e0bff917 	ldw	r2,-28(fp)
 183357c:	10c00617 	ldw	r3,24(r2)
 1833580:	e0bffb17 	ldw	r2,-20(fp)
 1833584:	11000403 	ldbu	r4,16(r2)
 1833588:	11400443 	ldbu	r5,17(r2)
 183358c:	280a923a 	slli	r5,r5,8
 1833590:	2908b03a 	or	r4,r5,r4
 1833594:	11400483 	ldbu	r5,18(r2)
 1833598:	280a943a 	slli	r5,r5,16
 183359c:	2908b03a 	or	r4,r5,r4
 18335a0:	108004c3 	ldbu	r2,19(r2)
 18335a4:	1004963a 	slli	r2,r2,24
 18335a8:	1104b03a 	or	r2,r2,r4
 18335ac:	1880121e 	bne	r3,r2,18335f8 <ip_reass+0x268>
 18335b0:	e0bff917 	ldw	r2,-28(fp)
 18335b4:	1100030b 	ldhu	r4,12(r2)
 18335b8:	e0bffb17 	ldw	r2,-20(fp)
 18335bc:	10c00103 	ldbu	r3,4(r2)
 18335c0:	10800143 	ldbu	r2,5(r2)
 18335c4:	1004923a 	slli	r2,r2,8
 18335c8:	10c4b03a 	or	r2,r2,r3
 18335cc:	20ffffcc 	andi	r3,r4,65535
 18335d0:	10bfffcc 	andi	r2,r2,65535
 18335d4:	1880081e 	bne	r3,r2,18335f8 <ip_reass+0x268>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 18335d8:	00806134 	movhi	r2,388
 18335dc:	109e7504 	addi	r2,r2,31188
 18335e0:	10802317 	ldw	r2,140(r2)
 18335e4:	10c00044 	addi	r3,r2,1
 18335e8:	00806134 	movhi	r2,388
 18335ec:	109e7504 	addi	r2,r2,31188
 18335f0:	10c02315 	stw	r3,140(r2)
      break;
 18335f4:	00000706 	br	1833614 <ip_reass+0x284>
    }
    ipr_prev = ipr;
 18335f8:	e0bff917 	ldw	r2,-28(fp)
 18335fc:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 1833600:	e0bff917 	ldw	r2,-28(fp)
 1833604:	10800017 	ldw	r2,0(r2)
 1833608:	e0bff915 	stw	r2,-28(fp)
 183360c:	e0bff917 	ldw	r2,-28(fp)
 1833610:	103fcb1e 	bne	r2,zero,1833540 <__ram_exceptions_end+0xff823250>
      break;
    }
    ipr_prev = ipr;
  }

  if (ipr == NULL) {
 1833614:	e0bff917 	ldw	r2,-28(fp)
 1833618:	1000081e 	bne	r2,zero,183363c <ip_reass+0x2ac>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 183361c:	e0bffd03 	ldbu	r2,-12(fp)
 1833620:	100b883a 	mov	r5,r2
 1833624:	e13ffb17 	ldw	r4,-20(fp)
 1833628:	1832b300 	call	1832b30 <ip_reass_enqueue_new_datagram>
 183362c:	e0bff915 	stw	r2,-28(fp)
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
 1833630:	e0bff917 	ldw	r2,-28(fp)
 1833634:	1000271e 	bne	r2,zero,18336d4 <ip_reass+0x344>
      goto nullreturn;
 1833638:	0000c906 	br	1833960 <ip_reass+0x5d0>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 183363c:	e0bffb17 	ldw	r2,-20(fp)
 1833640:	10c00183 	ldbu	r3,6(r2)
 1833644:	108001c3 	ldbu	r2,7(r2)
 1833648:	1004923a 	slli	r2,r2,8
 183364c:	10c4b03a 	or	r2,r2,r3
 1833650:	10bfffcc 	andi	r2,r2,65535
 1833654:	1004d23a 	srli	r2,r2,8
 1833658:	10ffffcc 	andi	r3,r2,65535
 183365c:	e0bffb17 	ldw	r2,-20(fp)
 1833660:	11000183 	ldbu	r4,6(r2)
 1833664:	108001c3 	ldbu	r2,7(r2)
 1833668:	1004923a 	slli	r2,r2,8
 183366c:	1104b03a 	or	r2,r2,r4
 1833670:	10bfffcc 	andi	r2,r2,65535
 1833674:	1004923a 	slli	r2,r2,8
 1833678:	10bfffcc 	andi	r2,r2,65535
 183367c:	1884b03a 	or	r2,r3,r2
 1833680:	1087ffcc 	andi	r2,r2,8191
 1833684:	1000131e 	bne	r2,zero,18336d4 <ip_reass+0x344>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 1833688:	e0bff917 	ldw	r2,-28(fp)
 183368c:	1080038b 	ldhu	r2,14(r2)
 1833690:	10bfffcc 	andi	r2,r2,65535
 1833694:	1004d23a 	srli	r2,r2,8
 1833698:	10ffffcc 	andi	r3,r2,65535
 183369c:	e0bff917 	ldw	r2,-28(fp)
 18336a0:	1080038b 	ldhu	r2,14(r2)
 18336a4:	10bfffcc 	andi	r2,r2,65535
 18336a8:	1004923a 	slli	r2,r2,8
 18336ac:	10bfffcc 	andi	r2,r2,65535
 18336b0:	1884b03a 	or	r2,r3,r2
 18336b4:	1087ffcc 	andi	r2,r2,8191
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 18336b8:	10000626 	beq	r2,zero,18336d4 <ip_reass+0x344>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 18336bc:	e0bff917 	ldw	r2,-28(fp)
 18336c0:	10800204 	addi	r2,r2,8
 18336c4:	01800504 	movi	r6,20
 18336c8:	e17ffb17 	ldw	r5,-20(fp)
 18336cc:	1009883a 	mov	r4,r2
 18336d0:	1805f980 	call	1805f98 <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
 18336d4:	e0fffd03 	ldbu	r3,-12(fp)
 18336d8:	d0a8140b 	ldhu	r2,-24496(gp)
 18336dc:	1885883a 	add	r2,r3,r2
 18336e0:	d0a8140d 	sth	r2,-24496(gp)

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 18336e4:	e0bffb17 	ldw	r2,-20(fp)
 18336e8:	10c00183 	ldbu	r3,6(r2)
 18336ec:	108001c3 	ldbu	r2,7(r2)
 18336f0:	1004923a 	slli	r2,r2,8
 18336f4:	10c4b03a 	or	r2,r2,r3
 18336f8:	10bfffcc 	andi	r2,r2,65535
 18336fc:	1080080c 	andi	r2,r2,32
 1833700:	10000c1e 	bne	r2,zero,1833734 <ip_reass+0x3a4>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 1833704:	e0bff917 	ldw	r2,-28(fp)
 1833708:	10800783 	ldbu	r2,30(r2)
 183370c:	10800054 	ori	r2,r2,1
 1833710:	1007883a 	mov	r3,r2
 1833714:	e0bff917 	ldw	r2,-28(fp)
 1833718:	10c00785 	stb	r3,30(r2)
    ipr->datagram_len = offset + len;
 183371c:	e0fffc0b 	ldhu	r3,-16(fp)
 1833720:	e0bffc8b 	ldhu	r2,-14(fp)
 1833724:	1885883a 	add	r2,r3,r2
 1833728:	1007883a 	mov	r3,r2
 183372c:	e0bff917 	ldw	r2,-28(fp)
 1833730:	10c0070d 	sth	r3,28(r2)
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
 1833734:	e17fff17 	ldw	r5,-4(fp)
 1833738:	e13ff917 	ldw	r4,-28(fp)
 183373c:	1832c900 	call	1832c90 <ip_reass_chain_frag_into_datagram_and_validate>
 1833740:	10008526 	beq	r2,zero,1833958 <ip_reass+0x5c8>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 1833744:	e0bff917 	ldw	r2,-28(fp)
 1833748:	1080070b 	ldhu	r2,28(r2)
 183374c:	10800504 	addi	r2,r2,20
 1833750:	1007883a 	mov	r3,r2
 1833754:	e0bff917 	ldw	r2,-28(fp)
 1833758:	10c0070d 	sth	r3,28(r2)

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 183375c:	e0bff917 	ldw	r2,-28(fp)
 1833760:	10800117 	ldw	r2,4(r2)
 1833764:	10800117 	ldw	r2,4(r2)
 1833768:	10c00003 	ldbu	r3,0(r2)
 183376c:	11000043 	ldbu	r4,1(r2)
 1833770:	2008923a 	slli	r4,r4,8
 1833774:	20c6b03a 	or	r3,r4,r3
 1833778:	11000083 	ldbu	r4,2(r2)
 183377c:	2008943a 	slli	r4,r4,16
 1833780:	20c6b03a 	or	r3,r4,r3
 1833784:	108000c3 	ldbu	r2,3(r2)
 1833788:	1004963a 	slli	r2,r2,24
 183378c:	10c4b03a 	or	r2,r2,r3
 1833790:	e0bff815 	stw	r2,-32(fp)

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 1833794:	e0bff917 	ldw	r2,-28(fp)
 1833798:	10800117 	ldw	r2,4(r2)
 183379c:	10800117 	ldw	r2,4(r2)
 18337a0:	e0bffb15 	stw	r2,-20(fp)
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 18337a4:	e0bff917 	ldw	r2,-28(fp)
 18337a8:	10800204 	addi	r2,r2,8
 18337ac:	01800504 	movi	r6,20
 18337b0:	100b883a 	mov	r5,r2
 18337b4:	e13ffb17 	ldw	r4,-20(fp)
 18337b8:	1805f980 	call	1805f98 <memcpy>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 18337bc:	e0bff917 	ldw	r2,-28(fp)
 18337c0:	1080070b 	ldhu	r2,28(r2)
 18337c4:	10bfffcc 	andi	r2,r2,65535
 18337c8:	1004d23a 	srli	r2,r2,8
 18337cc:	1007883a 	mov	r3,r2
 18337d0:	e0bff917 	ldw	r2,-28(fp)
 18337d4:	1080070b 	ldhu	r2,28(r2)
 18337d8:	10bfffcc 	andi	r2,r2,65535
 18337dc:	1004923a 	slli	r2,r2,8
 18337e0:	1884b03a 	or	r2,r3,r2
 18337e4:	100d883a 	mov	r6,r2
 18337e8:	e0bffb17 	ldw	r2,-20(fp)
 18337ec:	30ffffcc 	andi	r3,r6,65535
 18337f0:	19403fcc 	andi	r5,r3,255
 18337f4:	10c00083 	ldbu	r3,2(r2)
 18337f8:	1806703a 	and	r3,r3,zero
 18337fc:	1809883a 	mov	r4,r3
 1833800:	2807883a 	mov	r3,r5
 1833804:	20c6b03a 	or	r3,r4,r3
 1833808:	10c00085 	stb	r3,2(r2)
 183380c:	30ffffcc 	andi	r3,r6,65535
 1833810:	1806d23a 	srli	r3,r3,8
 1833814:	197fffcc 	andi	r5,r3,65535
 1833818:	10c000c3 	ldbu	r3,3(r2)
 183381c:	1806703a 	and	r3,r3,zero
 1833820:	1809883a 	mov	r4,r3
 1833824:	2807883a 	mov	r3,r5
 1833828:	20c6b03a 	or	r3,r4,r3
 183382c:	10c000c5 	stb	r3,3(r2)
    IPH_OFFSET_SET(fraghdr, 0);
 1833830:	e0bffb17 	ldw	r2,-20(fp)
 1833834:	10c00183 	ldbu	r3,6(r2)
 1833838:	1806703a 	and	r3,r3,zero
 183383c:	10c00185 	stb	r3,6(r2)
 1833840:	10c001c3 	ldbu	r3,7(r2)
 1833844:	1806703a 	and	r3,r3,zero
 1833848:	10c001c5 	stb	r3,7(r2)
    IPH_CHKSUM_SET(fraghdr, 0);
 183384c:	e0bffb17 	ldw	r2,-20(fp)
 1833850:	10c00283 	ldbu	r3,10(r2)
 1833854:	1806703a 	and	r3,r3,zero
 1833858:	10c00285 	stb	r3,10(r2)
 183385c:	10c002c3 	ldbu	r3,11(r2)
 1833860:	1806703a 	and	r3,r3,zero
 1833864:	10c002c5 	stb	r3,11(r2)
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 1833868:	01400504 	movi	r5,20
 183386c:	e13ffb17 	ldw	r4,-20(fp)
 1833870:	18317cc0 	call	18317cc <inet_chksum>
 1833874:	100d883a 	mov	r6,r2
 1833878:	e0bffb17 	ldw	r2,-20(fp)
 183387c:	30ffffcc 	andi	r3,r6,65535
 1833880:	19403fcc 	andi	r5,r3,255
 1833884:	10c00283 	ldbu	r3,10(r2)
 1833888:	1806703a 	and	r3,r3,zero
 183388c:	1809883a 	mov	r4,r3
 1833890:	2807883a 	mov	r3,r5
 1833894:	20c6b03a 	or	r3,r4,r3
 1833898:	10c00285 	stb	r3,10(r2)
 183389c:	30ffffcc 	andi	r3,r6,65535
 18338a0:	1806d23a 	srli	r3,r3,8
 18338a4:	197fffcc 	andi	r5,r3,65535
 18338a8:	10c002c3 	ldbu	r3,11(r2)
 18338ac:	1806703a 	and	r3,r3,zero
 18338b0:	1809883a 	mov	r4,r3
 18338b4:	2807883a 	mov	r3,r5
 18338b8:	20c6b03a 	or	r3,r4,r3
 18338bc:	10c002c5 	stb	r3,11(r2)

    p = ipr->p;
 18338c0:	e0bff917 	ldw	r2,-28(fp)
 18338c4:	10800117 	ldw	r2,4(r2)
 18338c8:	e0bfff15 	stw	r2,-4(fp)

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
 18338cc:	00001506 	br	1833924 <ip_reass+0x594>
      iprh = (struct ip_reass_helper*)r->payload;
 18338d0:	e0bff817 	ldw	r2,-32(fp)
 18338d4:	10800117 	ldw	r2,4(r2)
 18338d8:	e0bffe15 	stw	r2,-8(fp)

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
 18338dc:	017ffb04 	movi	r5,-20
 18338e0:	e13ff817 	ldw	r4,-32(fp)
 18338e4:	181a07c0 	call	181a07c <pbuf_header>
      pbuf_cat(p, r);
 18338e8:	e17ff817 	ldw	r5,-32(fp)
 18338ec:	e13fff17 	ldw	r4,-4(fp)
 18338f0:	181a4180 	call	181a418 <pbuf_cat>
      r = iprh->next_pbuf;
 18338f4:	e0bffe17 	ldw	r2,-8(fp)
 18338f8:	10c00003 	ldbu	r3,0(r2)
 18338fc:	11000043 	ldbu	r4,1(r2)
 1833900:	2008923a 	slli	r4,r4,8
 1833904:	20c6b03a 	or	r3,r4,r3
 1833908:	11000083 	ldbu	r4,2(r2)
 183390c:	2008943a 	slli	r4,r4,16
 1833910:	20c6b03a 	or	r3,r4,r3
 1833914:	108000c3 	ldbu	r2,3(r2)
 1833918:	1004963a 	slli	r2,r2,24
 183391c:	10c4b03a 	or	r2,r2,r3
 1833920:	e0bff815 	stw	r2,-32(fp)
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
 1833924:	e0bff817 	ldw	r2,-32(fp)
 1833928:	103fe91e 	bne	r2,zero,18338d0 <__ram_exceptions_end+0xff8235e0>
      pbuf_header(r, -IP_HLEN);
      pbuf_cat(p, r);
      r = iprh->next_pbuf;
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 183392c:	e17ffa17 	ldw	r5,-24(fp)
 1833930:	e13ff917 	ldw	r4,-28(fp)
 1833934:	1832c2c0 	call	1832c2c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 1833938:	e13fff17 	ldw	r4,-4(fp)
 183393c:	181a3680 	call	181a368 <pbuf_clen>
 1833940:	d0e8140b 	ldhu	r3,-24496(gp)
 1833944:	10803fcc 	andi	r2,r2,255
 1833948:	1885c83a 	sub	r2,r3,r2
 183394c:	d0a8140d 	sth	r2,-24496(gp)

    /* Return the pbuf chain */
    return p;
 1833950:	e0bfff17 	ldw	r2,-4(fp)
 1833954:	00000c06 	br	1833988 <ip_reass+0x5f8>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 1833958:	0005883a 	mov	r2,zero
 183395c:	00000a06 	br	1833988 <ip_reass+0x5f8>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 1833960:	00806134 	movhi	r2,388
 1833964:	109e7504 	addi	r2,r2,31188
 1833968:	10801b17 	ldw	r2,108(r2)
 183396c:	10c00044 	addi	r3,r2,1
 1833970:	00806134 	movhi	r2,388
 1833974:	109e7504 	addi	r2,r2,31188
 1833978:	10c01b15 	stw	r3,108(r2)
  pbuf_free(p);
 183397c:	e13fff17 	ldw	r4,-4(fp)
 1833980:	181a22c0 	call	181a22c <pbuf_free>
  return NULL;
 1833984:	0005883a 	mov	r2,zero
}
 1833988:	e037883a 	mov	sp,fp
 183398c:	dfc00117 	ldw	ra,4(sp)
 1833990:	df000017 	ldw	fp,0(sp)
 1833994:	dec00204 	addi	sp,sp,8
 1833998:	f800283a 	ret

0183399c <ip_frag_alloc_pbuf_custom_ref>:

#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 183399c:	defffe04 	addi	sp,sp,-8
 18339a0:	dfc00115 	stw	ra,4(sp)
 18339a4:	df000015 	stw	fp,0(sp)
 18339a8:	d839883a 	mov	fp,sp
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 18339ac:	00806134 	movhi	r2,388
 18339b0:	108bcc84 	addi	r2,r2,12082
 18339b4:	1080030b 	ldhu	r2,12(r2)
 18339b8:	10bfffcc 	andi	r2,r2,65535
 18339bc:	1009883a 	mov	r4,r2
 18339c0:	183c5000 	call	183c500 <malloc>
}
 18339c4:	e037883a 	mov	sp,fp
 18339c8:	dfc00117 	ldw	ra,4(sp)
 18339cc:	df000017 	ldw	fp,0(sp)
 18339d0:	dec00204 	addi	sp,sp,8
 18339d4:	f800283a 	ret

018339d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 18339d8:	defffd04 	addi	sp,sp,-12
 18339dc:	dfc00215 	stw	ra,8(sp)
 18339e0:	df000115 	stw	fp,4(sp)
 18339e4:	df000104 	addi	fp,sp,4
 18339e8:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 18339ec:	e13fff17 	ldw	r4,-4(fp)
 18339f0:	183c5140 	call	183c514 <free>
}
 18339f4:	0001883a 	nop
 18339f8:	e037883a 	mov	sp,fp
 18339fc:	dfc00117 	ldw	ra,4(sp)
 1833a00:	df000017 	ldw	fp,0(sp)
 1833a04:	dec00204 	addi	sp,sp,8
 1833a08:	f800283a 	ret

01833a0c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 1833a0c:	defffc04 	addi	sp,sp,-16
 1833a10:	dfc00315 	stw	ra,12(sp)
 1833a14:	df000215 	stw	fp,8(sp)
 1833a18:	df000204 	addi	fp,sp,8
 1833a1c:	e13fff15 	stw	r4,-4(fp)
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 1833a20:	e0bfff17 	ldw	r2,-4(fp)
 1833a24:	e0bffe15 	stw	r2,-8(fp)
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 1833a28:	e0bffe17 	ldw	r2,-8(fp)
 1833a2c:	10800517 	ldw	r2,20(r2)
 1833a30:	10000426 	beq	r2,zero,1833a44 <ipfrag_free_pbuf_custom+0x38>
    pbuf_free(pcr->original);
 1833a34:	e0bffe17 	ldw	r2,-8(fp)
 1833a38:	10800517 	ldw	r2,20(r2)
 1833a3c:	1009883a 	mov	r4,r2
 1833a40:	181a22c0 	call	181a22c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 1833a44:	e13ffe17 	ldw	r4,-8(fp)
 1833a48:	18339d80 	call	18339d8 <ip_frag_free_pbuf_custom_ref>
}
 1833a4c:	0001883a 	nop
 1833a50:	e037883a 	mov	sp,fp
 1833a54:	dfc00117 	ldw	ra,4(sp)
 1833a58:	df000017 	ldw	fp,0(sp)
 1833a5c:	dec00204 	addi	sp,sp,8
 1833a60:	f800283a 	ret

01833a64 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
 1833a64:	deffee04 	addi	sp,sp,-72
 1833a68:	dfc01115 	stw	ra,68(sp)
 1833a6c:	df001015 	stw	fp,64(sp)
 1833a70:	df001004 	addi	fp,sp,64
 1833a74:	e13ffd15 	stw	r4,-12(fp)
 1833a78:	e17ffe15 	stw	r5,-8(fp)
 1833a7c:	e1bfff15 	stw	r6,-4(fp)
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
 1833a80:	e0bffe17 	ldw	r2,-8(fp)
 1833a84:	10800c0b 	ldhu	r2,48(r2)
 1833a88:	e0bff50d 	sth	r2,-44(fp)
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
 1833a8c:	00800504 	movi	r2,20
 1833a90:	e0bff30d 	sth	r2,-52(fp)
  u16_t tmp;
#if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
 1833a94:	e03ff40d 	sth	zero,-48(fp)

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
 1833a98:	e0bffd17 	ldw	r2,-12(fp)
 1833a9c:	10800117 	ldw	r2,4(r2)
 1833aa0:	e0bff615 	stw	r2,-40(fp)
  iphdr = original_iphdr;
 1833aa4:	e0bff617 	ldw	r2,-40(fp)
 1833aa8:	e0bff715 	stw	r2,-36(fp)
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
 1833aac:	e0bff717 	ldw	r2,-36(fp)
 1833ab0:	10c00183 	ldbu	r3,6(r2)
 1833ab4:	108001c3 	ldbu	r2,7(r2)
 1833ab8:	1004923a 	slli	r2,r2,8
 1833abc:	10c4b03a 	or	r2,r2,r3
 1833ac0:	10bfffcc 	andi	r2,r2,65535
 1833ac4:	1004d23a 	srli	r2,r2,8
 1833ac8:	1009883a 	mov	r4,r2
 1833acc:	e0bff717 	ldw	r2,-36(fp)
 1833ad0:	10c00183 	ldbu	r3,6(r2)
 1833ad4:	108001c3 	ldbu	r2,7(r2)
 1833ad8:	1004923a 	slli	r2,r2,8
 1833adc:	10c4b03a 	or	r2,r2,r3
 1833ae0:	10bfffcc 	andi	r2,r2,65535
 1833ae4:	1004923a 	slli	r2,r2,8
 1833ae8:	2084b03a 	or	r2,r4,r2
 1833aec:	e0bff38d 	sth	r2,-50(fp)
  ofo = tmp & IP_OFFMASK;
 1833af0:	e0bff38b 	ldhu	r2,-50(fp)
 1833af4:	1087ffcc 	andi	r2,r2,8191
 1833af8:	e0bff28d 	sth	r2,-54(fp)
  omf = tmp & IP_MF;
 1833afc:	e0bff38b 	ldhu	r2,-50(fp)
 1833b00:	1088000c 	andi	r2,r2,8192
 1833b04:	e0bff80d 	sth	r2,-32(fp)

  left = p->tot_len - IP_HLEN;
 1833b08:	e0bffd17 	ldw	r2,-12(fp)
 1833b0c:	1080020b 	ldhu	r2,8(r2)
 1833b10:	10bffb04 	addi	r2,r2,-20
 1833b14:	e0bff20d 	sth	r2,-56(fp)

  nfb = (mtu - IP_HLEN) / 8;
 1833b18:	e0bff50b 	ldhu	r2,-44(fp)
 1833b1c:	10bffb04 	addi	r2,r2,-20
 1833b20:	1000010e 	bge	r2,zero,1833b28 <ip_frag+0xc4>
 1833b24:	108001c4 	addi	r2,r2,7
 1833b28:	1005d0fa 	srai	r2,r2,3
 1833b2c:	e0bff88d 	sth	r2,-30(fp)

  while (left) {
 1833b30:	0000e706 	br	1833ed0 <ip_frag+0x46c>
    last = (left <= mtu - IP_HLEN);
 1833b34:	e0bff20b 	ldhu	r2,-56(fp)
 1833b38:	e0fff50b 	ldhu	r3,-44(fp)
 1833b3c:	18fffb04 	addi	r3,r3,-20
 1833b40:	1884403a 	cmpge	r2,r3,r2
 1833b44:	10803fcc 	andi	r2,r2,255
 1833b48:	e0bff90d 	sth	r2,-28(fp)

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
 1833b4c:	e0bff28b 	ldhu	r2,-54(fp)
 1833b50:	1087ffcc 	andi	r2,r2,8191
 1833b54:	1007883a 	mov	r3,r2
 1833b58:	e0bff80b 	ldhu	r2,-32(fp)
 1833b5c:	1884b03a 	or	r2,r3,r2
 1833b60:	e0bff38d 	sth	r2,-50(fp)
    if (!last) {
 1833b64:	e0bff90b 	ldhu	r2,-28(fp)
 1833b68:	1000031e 	bne	r2,zero,1833b78 <ip_frag+0x114>
      tmp = tmp | IP_MF;
 1833b6c:	e0bff38b 	ldhu	r2,-50(fp)
 1833b70:	10880014 	ori	r2,r2,8192
 1833b74:	e0bff38d 	sth	r2,-50(fp)
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 1833b78:	e0bff90b 	ldhu	r2,-28(fp)
 1833b7c:	1000031e 	bne	r2,zero,1833b8c <ip_frag+0x128>
 1833b80:	e0bff88b 	ldhu	r2,-30(fp)
 1833b84:	100490fa 	slli	r2,r2,3
 1833b88:	00000106 	br	1833b90 <ip_frag+0x12c>
 1833b8c:	e0bff20b 	ldhu	r2,-56(fp)
 1833b90:	e0bff98d 	sth	r2,-26(fp)
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 1833b94:	000d883a 	mov	r6,zero
 1833b98:	01400504 	movi	r5,20
 1833b9c:	01000084 	movi	r4,2
 1833ba0:	1819aa40 	call	1819aa4 <pbuf_alloc>
 1833ba4:	e0bffa15 	stw	r2,-24(fp)
    if (rambuf == NULL) {
 1833ba8:	e0bffa17 	ldw	r2,-24(fp)
 1833bac:	1000021e 	bne	r2,zero,1833bb8 <ip_frag+0x154>
      return ERR_MEM;
 1833bb0:	00bfffc4 	movi	r2,-1
 1833bb4:	0000c906 	br	1833edc <ip_frag+0x478>
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 1833bb8:	e0bffa17 	ldw	r2,-24(fp)
 1833bbc:	10800117 	ldw	r2,4(r2)
 1833bc0:	01800504 	movi	r6,20
 1833bc4:	e17ff617 	ldw	r5,-40(fp)
 1833bc8:	1009883a 	mov	r4,r2
 1833bcc:	1805f980 	call	1805f98 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 1833bd0:	e0bffa17 	ldw	r2,-24(fp)
 1833bd4:	10800117 	ldw	r2,4(r2)
 1833bd8:	e0bff715 	stw	r2,-36(fp)

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 1833bdc:	e0bffd17 	ldw	r2,-12(fp)
 1833be0:	10c00117 	ldw	r3,4(r2)
 1833be4:	e0bff30b 	ldhu	r2,-52(fp)
 1833be8:	1887883a 	add	r3,r3,r2
 1833bec:	e0bffd17 	ldw	r2,-12(fp)
 1833bf0:	10c00115 	stw	r3,4(r2)
    p->len -= poff;
 1833bf4:	e0bffd17 	ldw	r2,-12(fp)
 1833bf8:	10c0028b 	ldhu	r3,10(r2)
 1833bfc:	e0bff30b 	ldhu	r2,-52(fp)
 1833c00:	1885c83a 	sub	r2,r3,r2
 1833c04:	1007883a 	mov	r3,r2
 1833c08:	e0bffd17 	ldw	r2,-12(fp)
 1833c0c:	10c0028d 	sth	r3,10(r2)

    left_to_copy = cop;
 1833c10:	e0bff98b 	ldhu	r2,-26(fp)
 1833c14:	e0bff48d 	sth	r2,-46(fp)
    while (left_to_copy) {
 1833c18:	00004006 	br	1833d1c <ip_frag+0x2b8>
      struct pbuf_custom_ref *pcr;
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 1833c1c:	e0bffd17 	ldw	r2,-12(fp)
 1833c20:	1080028b 	ldhu	r2,10(r2)
 1833c24:	e17ff48b 	ldhu	r5,-46(fp)
 1833c28:	10ffffcc 	andi	r3,r2,65535
 1833c2c:	293fffcc 	andi	r4,r5,65535
 1833c30:	20c0012e 	bgeu	r4,r3,1833c38 <ip_frag+0x1d4>
 1833c34:	2805883a 	mov	r2,r5
 1833c38:	e0bff40d 	sth	r2,-48(fp)
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 1833c3c:	e0bff40b 	ldhu	r2,-48(fp)
 1833c40:	1000041e 	bne	r2,zero,1833c54 <ip_frag+0x1f0>
        p = p->next;
 1833c44:	e0bffd17 	ldw	r2,-12(fp)
 1833c48:	10800017 	ldw	r2,0(r2)
 1833c4c:	e0bffd15 	stw	r2,-12(fp)
        continue;
 1833c50:	00003206 	br	1833d1c <ip_frag+0x2b8>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 1833c54:	183399c0 	call	183399c <ip_frag_alloc_pbuf_custom_ref>
 1833c58:	e0bffb15 	stw	r2,-20(fp)
      if (pcr == NULL) {
 1833c5c:	e0bffb17 	ldw	r2,-20(fp)
 1833c60:	1000041e 	bne	r2,zero,1833c74 <ip_frag+0x210>
        pbuf_free(rambuf);
 1833c64:	e13ffa17 	ldw	r4,-24(fp)
 1833c68:	181a22c0 	call	181a22c <pbuf_free>
        return ERR_MEM;
 1833c6c:	00bfffc4 	movi	r2,-1
 1833c70:	00009a06 	br	1833edc <ip_frag+0x478>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 1833c74:	e13ff40b 	ldhu	r4,-48(fp)
 1833c78:	e17ffb17 	ldw	r5,-20(fp)
 1833c7c:	e0bffd17 	ldw	r2,-12(fp)
 1833c80:	10800117 	ldw	r2,4(r2)
 1833c84:	e0fff40b 	ldhu	r3,-48(fp)
 1833c88:	d8c00115 	stw	r3,4(sp)
 1833c8c:	d8800015 	stw	r2,0(sp)
 1833c90:	280f883a 	mov	r7,r5
 1833c94:	01800084 	movi	r6,2
 1833c98:	200b883a 	mov	r5,r4
 1833c9c:	010000c4 	movi	r4,3
 1833ca0:	1819e340 	call	1819e34 <pbuf_alloced_custom>
 1833ca4:	e0bffc15 	stw	r2,-16(fp)
      if (newpbuf == NULL) {
 1833ca8:	e0bffc17 	ldw	r2,-16(fp)
 1833cac:	1000061e 	bne	r2,zero,1833cc8 <ip_frag+0x264>
        ip_frag_free_pbuf_custom_ref(pcr);
 1833cb0:	e13ffb17 	ldw	r4,-20(fp)
 1833cb4:	18339d80 	call	18339d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 1833cb8:	e13ffa17 	ldw	r4,-24(fp)
 1833cbc:	181a22c0 	call	181a22c <pbuf_free>
        return ERR_MEM;
 1833cc0:	00bfffc4 	movi	r2,-1
 1833cc4:	00008506 	br	1833edc <ip_frag+0x478>
      }
      pbuf_ref(p);
 1833cc8:	e13ffd17 	ldw	r4,-12(fp)
 1833ccc:	181a3b40 	call	181a3b4 <pbuf_ref>
      pcr->original = p;
 1833cd0:	e0bffb17 	ldw	r2,-20(fp)
 1833cd4:	e0fffd17 	ldw	r3,-12(fp)
 1833cd8:	10c00515 	stw	r3,20(r2)
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 1833cdc:	e0fffb17 	ldw	r3,-20(fp)
 1833ce0:	008060f4 	movhi	r2,387
 1833ce4:	108e8304 	addi	r2,r2,14860
 1833ce8:	18800415 	stw	r2,16(r3)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 1833cec:	e17ffc17 	ldw	r5,-16(fp)
 1833cf0:	e13ffa17 	ldw	r4,-24(fp)
 1833cf4:	181a4180 	call	181a418 <pbuf_cat>
      left_to_copy -= newpbuflen;
 1833cf8:	e0fff48b 	ldhu	r3,-46(fp)
 1833cfc:	e0bff40b 	ldhu	r2,-48(fp)
 1833d00:	1885c83a 	sub	r2,r3,r2
 1833d04:	e0bff48d 	sth	r2,-46(fp)
      if (left_to_copy) {
 1833d08:	e0bff48b 	ldhu	r2,-46(fp)
 1833d0c:	10000326 	beq	r2,zero,1833d1c <ip_frag+0x2b8>
        p = p->next;
 1833d10:	e0bffd17 	ldw	r2,-12(fp)
 1833d14:	10800017 	ldw	r2,0(r2)
 1833d18:	e0bffd15 	stw	r2,-12(fp)
    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
    p->len -= poff;

    left_to_copy = cop;
    while (left_to_copy) {
 1833d1c:	e0bff48b 	ldhu	r2,-46(fp)
 1833d20:	103fbe1e 	bne	r2,zero,1833c1c <__ram_exceptions_end+0xff82392c>
      left_to_copy -= newpbuflen;
      if (left_to_copy) {
        p = p->next;
      }
    }
    poff = newpbuflen;
 1833d24:	e0bff40b 	ldhu	r2,-48(fp)
 1833d28:	e0bff30d 	sth	r2,-52(fp)
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
 1833d2c:	e0bff38b 	ldhu	r2,-50(fp)
 1833d30:	1004d23a 	srli	r2,r2,8
 1833d34:	1007883a 	mov	r3,r2
 1833d38:	e0bff38b 	ldhu	r2,-50(fp)
 1833d3c:	1004923a 	slli	r2,r2,8
 1833d40:	1884b03a 	or	r2,r3,r2
 1833d44:	100d883a 	mov	r6,r2
 1833d48:	e0bff717 	ldw	r2,-36(fp)
 1833d4c:	30ffffcc 	andi	r3,r6,65535
 1833d50:	19403fcc 	andi	r5,r3,255
 1833d54:	10c00183 	ldbu	r3,6(r2)
 1833d58:	1806703a 	and	r3,r3,zero
 1833d5c:	1809883a 	mov	r4,r3
 1833d60:	2807883a 	mov	r3,r5
 1833d64:	20c6b03a 	or	r3,r4,r3
 1833d68:	10c00185 	stb	r3,6(r2)
 1833d6c:	30ffffcc 	andi	r3,r6,65535
 1833d70:	1806d23a 	srli	r3,r3,8
 1833d74:	197fffcc 	andi	r5,r3,65535
 1833d78:	10c001c3 	ldbu	r3,7(r2)
 1833d7c:	1806703a 	and	r3,r3,zero
 1833d80:	1809883a 	mov	r4,r3
 1833d84:	2807883a 	mov	r3,r5
 1833d88:	20c6b03a 	or	r3,r4,r3
 1833d8c:	10c001c5 	stb	r3,7(r2)
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 1833d90:	e0bff98b 	ldhu	r2,-26(fp)
 1833d94:	10800504 	addi	r2,r2,20
 1833d98:	10bfc00c 	andi	r2,r2,65280
 1833d9c:	1005d23a 	srai	r2,r2,8
 1833da0:	1007883a 	mov	r3,r2
 1833da4:	e0bff98b 	ldhu	r2,-26(fp)
 1833da8:	10800504 	addi	r2,r2,20
 1833dac:	1004923a 	slli	r2,r2,8
 1833db0:	1884b03a 	or	r2,r3,r2
 1833db4:	100d883a 	mov	r6,r2
 1833db8:	e0bff717 	ldw	r2,-36(fp)
 1833dbc:	30ffffcc 	andi	r3,r6,65535
 1833dc0:	19403fcc 	andi	r5,r3,255
 1833dc4:	10c00083 	ldbu	r3,2(r2)
 1833dc8:	1806703a 	and	r3,r3,zero
 1833dcc:	1809883a 	mov	r4,r3
 1833dd0:	2807883a 	mov	r3,r5
 1833dd4:	20c6b03a 	or	r3,r4,r3
 1833dd8:	10c00085 	stb	r3,2(r2)
 1833ddc:	30ffffcc 	andi	r3,r6,65535
 1833de0:	1806d23a 	srli	r3,r3,8
 1833de4:	197fffcc 	andi	r5,r3,65535
 1833de8:	10c000c3 	ldbu	r3,3(r2)
 1833dec:	1806703a 	and	r3,r3,zero
 1833df0:	1809883a 	mov	r4,r3
 1833df4:	2807883a 	mov	r3,r5
 1833df8:	20c6b03a 	or	r3,r4,r3
 1833dfc:	10c000c5 	stb	r3,3(r2)
    IPH_CHKSUM_SET(iphdr, 0);
 1833e00:	e0bff717 	ldw	r2,-36(fp)
 1833e04:	10c00283 	ldbu	r3,10(r2)
 1833e08:	1806703a 	and	r3,r3,zero
 1833e0c:	10c00285 	stb	r3,10(r2)
 1833e10:	10c002c3 	ldbu	r3,11(r2)
 1833e14:	1806703a 	and	r3,r3,zero
 1833e18:	10c002c5 	stb	r3,11(r2)
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 1833e1c:	01400504 	movi	r5,20
 1833e20:	e13ff717 	ldw	r4,-36(fp)
 1833e24:	18317cc0 	call	18317cc <inet_chksum>
 1833e28:	100d883a 	mov	r6,r2
 1833e2c:	e0bff717 	ldw	r2,-36(fp)
 1833e30:	30ffffcc 	andi	r3,r6,65535
 1833e34:	19403fcc 	andi	r5,r3,255
 1833e38:	10c00283 	ldbu	r3,10(r2)
 1833e3c:	1806703a 	and	r3,r3,zero
 1833e40:	1809883a 	mov	r4,r3
 1833e44:	2807883a 	mov	r3,r5
 1833e48:	20c6b03a 	or	r3,r4,r3
 1833e4c:	10c00285 	stb	r3,10(r2)
 1833e50:	30ffffcc 	andi	r3,r6,65535
 1833e54:	1806d23a 	srli	r3,r3,8
 1833e58:	197fffcc 	andi	r5,r3,65535
 1833e5c:	10c002c3 	ldbu	r3,11(r2)
 1833e60:	1806703a 	and	r3,r3,zero
 1833e64:	1809883a 	mov	r4,r3
 1833e68:	2807883a 	mov	r3,r5
 1833e6c:	20c6b03a 	or	r3,r4,r3
 1833e70:	10c002c5 	stb	r3,11(r2)
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 1833e74:	e0bffe17 	ldw	r2,-8(fp)
 1833e78:	10800517 	ldw	r2,20(r2)
 1833e7c:	e1bfff17 	ldw	r6,-4(fp)
 1833e80:	e17ffa17 	ldw	r5,-24(fp)
 1833e84:	e13ffe17 	ldw	r4,-8(fp)
 1833e88:	103ee83a 	callr	r2
    IPFRAG_STATS_INC(ip_frag.xmit);
 1833e8c:	00806134 	movhi	r2,388
 1833e90:	109e7504 	addi	r2,r2,31188
 1833e94:	10801817 	ldw	r2,96(r2)
 1833e98:	10c00044 	addi	r3,r2,1
 1833e9c:	00806134 	movhi	r2,388
 1833ea0:	109e7504 	addi	r2,r2,31188
 1833ea4:	10c01815 	stw	r3,96(r2)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
 1833ea8:	e13ffa17 	ldw	r4,-24(fp)
 1833eac:	181a22c0 	call	181a22c <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
 1833eb0:	e0fff20b 	ldhu	r3,-56(fp)
 1833eb4:	e0bff98b 	ldhu	r2,-26(fp)
 1833eb8:	1885c83a 	sub	r2,r3,r2
 1833ebc:	e0bff20d 	sth	r2,-56(fp)
    ofo += nfb;
 1833ec0:	e0fff28b 	ldhu	r3,-54(fp)
 1833ec4:	e0bff88b 	ldhu	r2,-30(fp)
 1833ec8:	1885883a 	add	r2,r3,r2
 1833ecc:	e0bff28d 	sth	r2,-54(fp)

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
 1833ed0:	e0bff20b 	ldhu	r2,-56(fp)
 1833ed4:	103f171e 	bne	r2,zero,1833b34 <__ram_exceptions_end+0xff823844>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
 1833ed8:	0005883a 	mov	r2,zero
}
 1833edc:	e037883a 	mov	sp,fp
 1833ee0:	dfc00117 	ldw	ra,4(sp)
 1833ee4:	df000017 	ldw	fp,0(sp)
 1833ee8:	dec00204 	addi	sp,sp,8
 1833eec:	f800283a 	ret

01833ef0 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 1833ef0:	defff704 	addi	sp,sp,-36
 1833ef4:	dfc00815 	stw	ra,32(sp)
 1833ef8:	df000715 	stw	fp,28(sp)
 1833efc:	df000704 	addi	fp,sp,28
 1833f00:	e13ffe15 	stw	r4,-8(fp)
 1833f04:	e17fff15 	stw	r5,-4(fp)
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
 1833f08:	e03ffb05 	stb	zero,-20(fp)

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
 1833f0c:	e0bffe17 	ldw	r2,-8(fp)
 1833f10:	10800117 	ldw	r2,4(r2)
 1833f14:	e0bffc15 	stw	r2,-16(fp)
  proto = IPH_PROTO(iphdr);
 1833f18:	e0bffc17 	ldw	r2,-16(fp)
 1833f1c:	10800243 	ldbu	r2,9(r2)
 1833f20:	10803fcc 	andi	r2,r2,255
 1833f24:	e0bffd0d 	sth	r2,-12(fp)

  prev = NULL;
 1833f28:	e03ffa15 	stw	zero,-24(fp)
  pcb = raw_pcbs;
 1833f2c:	d0a81517 	ldw	r2,-24492(gp)
 1833f30:	e0bff915 	stw	r2,-28(fp)
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 1833f34:	00002f06 	br	1833ff4 <raw_input+0x104>
    if ((pcb->protocol == proto) &&
 1833f38:	e0bff917 	ldw	r2,-28(fp)
 1833f3c:	10800403 	ldbu	r2,16(r2)
 1833f40:	10c03fcc 	andi	r3,r2,255
 1833f44:	e0bffd0f 	ldh	r2,-12(fp)
 1833f48:	1880251e 	bne	r3,r2,1833fe0 <raw_input+0xf0>
        (ip_addr_isany(&pcb->local_ip) ||
 1833f4c:	e0bff917 	ldw	r2,-28(fp)
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
 1833f50:	10000726 	beq	r2,zero,1833f70 <raw_input+0x80>
        (ip_addr_isany(&pcb->local_ip) ||
 1833f54:	e0bff917 	ldw	r2,-28(fp)
 1833f58:	10800017 	ldw	r2,0(r2)
 1833f5c:	10000426 	beq	r2,zero,1833f70 <raw_input+0x80>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 1833f60:	e0bff917 	ldw	r2,-28(fp)
 1833f64:	10c00017 	ldw	r3,0(r2)
 1833f68:	d0a81117 	ldw	r2,-24508(gp)
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
 1833f6c:	18801c1e 	bne	r3,r2,1833fe0 <raw_input+0xf0>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
 1833f70:	e0bff917 	ldw	r2,-28(fp)
 1833f74:	10800517 	ldw	r2,20(r2)
 1833f78:	10001926 	beq	r2,zero,1833fe0 <raw_input+0xf0>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 1833f7c:	e0bff917 	ldw	r2,-28(fp)
 1833f80:	10800517 	ldw	r2,20(r2)
 1833f84:	e0fff917 	ldw	r3,-28(fp)
 1833f88:	18c00617 	ldw	r3,24(r3)
 1833f8c:	d1e80f04 	addi	r7,gp,-24516
 1833f90:	e1bffe17 	ldw	r6,-8(fp)
 1833f94:	e17ff917 	ldw	r5,-28(fp)
 1833f98:	1809883a 	mov	r4,r3
 1833f9c:	103ee83a 	callr	r2
 1833fa0:	10803fcc 	andi	r2,r2,255
 1833fa4:	10000e26 	beq	r2,zero,1833fe0 <raw_input+0xf0>
            /* receive function ate the packet */
            p = NULL;
 1833fa8:	e03ffe15 	stw	zero,-8(fp)
            eaten = 1;
 1833fac:	00800044 	movi	r2,1
 1833fb0:	e0bffb05 	stb	r2,-20(fp)
            if (prev != NULL) {
 1833fb4:	e0bffa17 	ldw	r2,-24(fp)
 1833fb8:	10000926 	beq	r2,zero,1833fe0 <raw_input+0xf0>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
 1833fbc:	e0bff917 	ldw	r2,-28(fp)
 1833fc0:	10c00317 	ldw	r3,12(r2)
 1833fc4:	e0bffa17 	ldw	r2,-24(fp)
 1833fc8:	10c00315 	stw	r3,12(r2)
              pcb->next = raw_pcbs;
 1833fcc:	d0e81517 	ldw	r3,-24492(gp)
 1833fd0:	e0bff917 	ldw	r2,-28(fp)
 1833fd4:	10c00315 	stw	r3,12(r2)
              raw_pcbs = pcb;
 1833fd8:	e0bff917 	ldw	r2,-28(fp)
 1833fdc:	d0a81515 	stw	r2,-24492(gp)
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
 1833fe0:	e0bff917 	ldw	r2,-28(fp)
 1833fe4:	e0bffa15 	stw	r2,-24(fp)
    pcb = pcb->next;
 1833fe8:	e0bff917 	ldw	r2,-28(fp)
 1833fec:	10800317 	ldw	r2,12(r2)
 1833ff0:	e0bff915 	stw	r2,-28(fp)

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 1833ff4:	e0bffb03 	ldbu	r2,-20(fp)
 1833ff8:	1000021e 	bne	r2,zero,1834004 <raw_input+0x114>
 1833ffc:	e0bff917 	ldw	r2,-28(fp)
 1834000:	103fcd1e 	bne	r2,zero,1833f38 <__ram_exceptions_end+0xff823c48>
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
 1834004:	e0bffb03 	ldbu	r2,-20(fp)
}
 1834008:	e037883a 	mov	sp,fp
 183400c:	dfc00117 	ldw	ra,4(sp)
 1834010:	df000017 	ldw	fp,0(sp)
 1834014:	dec00204 	addi	sp,sp,8
 1834018:	f800283a 	ret

0183401c <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, ip_addr_t *ipaddr)
{
 183401c:	defffd04 	addi	sp,sp,-12
 1834020:	df000215 	stw	fp,8(sp)
 1834024:	df000204 	addi	fp,sp,8
 1834028:	e13ffe15 	stw	r4,-8(fp)
 183402c:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&pcb->local_ip, ipaddr);
 1834030:	e0bfff17 	ldw	r2,-4(fp)
 1834034:	10000326 	beq	r2,zero,1834044 <raw_bind+0x28>
 1834038:	e0bfff17 	ldw	r2,-4(fp)
 183403c:	10800017 	ldw	r2,0(r2)
 1834040:	00000106 	br	1834048 <raw_bind+0x2c>
 1834044:	0005883a 	mov	r2,zero
 1834048:	e0fffe17 	ldw	r3,-8(fp)
 183404c:	18800015 	stw	r2,0(r3)
  return ERR_OK;
 1834050:	0005883a 	mov	r2,zero
}
 1834054:	e037883a 	mov	sp,fp
 1834058:	df000017 	ldw	fp,0(sp)
 183405c:	dec00104 	addi	sp,sp,4
 1834060:	f800283a 	ret

01834064 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, ip_addr_t *ipaddr)
{
 1834064:	defffd04 	addi	sp,sp,-12
 1834068:	df000215 	stw	fp,8(sp)
 183406c:	df000204 	addi	fp,sp,8
 1834070:	e13ffe15 	stw	r4,-8(fp)
 1834074:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&pcb->remote_ip, ipaddr);
 1834078:	e0bfff17 	ldw	r2,-4(fp)
 183407c:	10000326 	beq	r2,zero,183408c <raw_connect+0x28>
 1834080:	e0bfff17 	ldw	r2,-4(fp)
 1834084:	10800017 	ldw	r2,0(r2)
 1834088:	00000106 	br	1834090 <raw_connect+0x2c>
 183408c:	0005883a 	mov	r2,zero
 1834090:	e0fffe17 	ldw	r3,-8(fp)
 1834094:	18800115 	stw	r2,4(r3)
  return ERR_OK;
 1834098:	0005883a 	mov	r2,zero
}
 183409c:	e037883a 	mov	sp,fp
 18340a0:	df000017 	ldw	fp,0(sp)
 18340a4:	dec00104 	addi	sp,sp,4
 18340a8:	f800283a 	ret

018340ac <raw_recv>:
 * @return non-zero if the packet was free()d, zero if the packet remains
 * available for others.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
 18340ac:	defffc04 	addi	sp,sp,-16
 18340b0:	df000315 	stw	fp,12(sp)
 18340b4:	df000304 	addi	fp,sp,12
 18340b8:	e13ffd15 	stw	r4,-12(fp)
 18340bc:	e17ffe15 	stw	r5,-8(fp)
 18340c0:	e1bfff15 	stw	r6,-4(fp)
  /* remember recv() callback and user data */
  pcb->recv = recv;
 18340c4:	e0bffd17 	ldw	r2,-12(fp)
 18340c8:	e0fffe17 	ldw	r3,-8(fp)
 18340cc:	10c00515 	stw	r3,20(r2)
  pcb->recv_arg = recv_arg;
 18340d0:	e0bffd17 	ldw	r2,-12(fp)
 18340d4:	e0ffff17 	ldw	r3,-4(fp)
 18340d8:	10c00615 	stw	r3,24(r2)
}
 18340dc:	0001883a 	nop
 18340e0:	e037883a 	mov	sp,fp
 18340e4:	df000017 	ldw	fp,0(sp)
 18340e8:	dec00104 	addi	sp,sp,4
 18340ec:	f800283a 	ret

018340f0 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, ip_addr_t *ipaddr)
{
 18340f0:	defff404 	addi	sp,sp,-48
 18340f4:	dfc00b15 	stw	ra,44(sp)
 18340f8:	df000a15 	stw	fp,40(sp)
 18340fc:	df000a04 	addi	fp,sp,40
 1834100:	e13ffd15 	stw	r4,-12(fp)
 1834104:	e17ffe15 	stw	r5,-8(fp)
 1834108:	e1bfff15 	stw	r6,-4(fp)
  struct pbuf *q; /* q will be sent down the stack */
  
  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));
  
  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, IP_HLEN)) {
 183410c:	01400504 	movi	r5,20
 1834110:	e13ffe17 	ldw	r4,-8(fp)
 1834114:	181a07c0 	call	181a07c <pbuf_header>
 1834118:	10803fcc 	andi	r2,r2,255
 183411c:	10001126 	beq	r2,zero,1834164 <raw_sendto+0x74>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
 1834120:	000d883a 	mov	r6,zero
 1834124:	000b883a 	mov	r5,zero
 1834128:	01000044 	movi	r4,1
 183412c:	1819aa40 	call	1819aa4 <pbuf_alloc>
 1834130:	e0bffa15 	stw	r2,-24(fp)
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 1834134:	e0bffa17 	ldw	r2,-24(fp)
 1834138:	1000021e 	bne	r2,zero,1834144 <raw_sendto+0x54>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
 183413c:	00bfffc4 	movi	r2,-1
 1834140:	00004806 	br	1834264 <raw_sendto+0x174>
    }
    if (p->tot_len != 0) {
 1834144:	e0bffe17 	ldw	r2,-8(fp)
 1834148:	1080020b 	ldhu	r2,8(r2)
 183414c:	10bfffcc 	andi	r2,r2,65535
 1834150:	10000d26 	beq	r2,zero,1834188 <raw_sendto+0x98>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
 1834154:	e17ffe17 	ldw	r5,-8(fp)
 1834158:	e13ffa17 	ldw	r4,-24(fp)
 183415c:	181a4ec0 	call	181a4ec <pbuf_chain>
 1834160:	00000906 	br	1834188 <raw_sendto+0x98>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  }  else {
    /* first pbuf q equals given pbuf */
    q = p;
 1834164:	e0bffe17 	ldw	r2,-8(fp)
 1834168:	e0bffa15 	stw	r2,-24(fp)
    if(pbuf_header(q, -IP_HLEN)) {
 183416c:	017ffb04 	movi	r5,-20
 1834170:	e13ffa17 	ldw	r4,-24(fp)
 1834174:	181a07c0 	call	181a07c <pbuf_header>
 1834178:	10803fcc 	andi	r2,r2,255
 183417c:	10000226 	beq	r2,zero,1834188 <raw_sendto+0x98>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
      return ERR_MEM;
 1834180:	00bfffc4 	movi	r2,-1
 1834184:	00003706 	br	1834264 <raw_sendto+0x174>
    }
  }

  if ((netif = ip_route((struct ip_pcb*)pcb, ipaddr)) == NULL) {
 1834188:	e17fff17 	ldw	r5,-4(fp)
 183418c:	e13ffd17 	ldw	r4,-12(fp)
 1834190:	18319740 	call	1831974 <ip_route>
 1834194:	e0bffb15 	stw	r2,-20(fp)
 1834198:	e0bffb17 	ldw	r2,-20(fp)
 183419c:	1000071e 	bne	r2,zero,18341bc <raw_sendto+0xcc>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr)));
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
 18341a0:	e0fffa17 	ldw	r3,-24(fp)
 18341a4:	e0bffe17 	ldw	r2,-8(fp)
 18341a8:	18800226 	beq	r3,r2,18341b4 <raw_sendto+0xc4>
      pbuf_free(q);
 18341ac:	e13ffa17 	ldw	r4,-24(fp)
 18341b0:	181a22c0 	call	181a22c <pbuf_free>
    }
    return ERR_RTE;
 18341b4:	00bfff04 	movi	r2,-4
 18341b8:	00002a06 	br	1834264 <raw_sendto+0x174>
    }
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
 18341bc:	e0bffd17 	ldw	r2,-12(fp)
 18341c0:	10000326 	beq	r2,zero,18341d0 <raw_sendto+0xe0>
 18341c4:	e0bffd17 	ldw	r2,-12(fp)
 18341c8:	10800017 	ldw	r2,0(r2)
 18341cc:	1000041e 	bne	r2,zero,18341e0 <raw_sendto+0xf0>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 18341d0:	e0bffb17 	ldw	r2,-20(fp)
 18341d4:	10800104 	addi	r2,r2,4
 18341d8:	e0bff915 	stw	r2,-28(fp)
 18341dc:	00000206 	br	18341e8 <raw_sendto+0xf8>
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 18341e0:	e0bffd17 	ldw	r2,-12(fp)
 18341e4:	e0bff915 	stw	r2,-28(fp)
  }

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
 18341e8:	e0bffd17 	ldw	r2,-12(fp)
 18341ec:	10c002c4 	addi	r3,r2,11
 18341f0:	e0bffb17 	ldw	r2,-20(fp)
 18341f4:	10c01015 	stw	r3,64(r2)
  err = ip_output_if (q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
 18341f8:	e0bffd17 	ldw	r2,-12(fp)
 18341fc:	10800283 	ldbu	r2,10(r2)
 1834200:	11403fcc 	andi	r5,r2,255
 1834204:	e0bffd17 	ldw	r2,-12(fp)
 1834208:	10800243 	ldbu	r2,9(r2)
 183420c:	10803fcc 	andi	r2,r2,255
 1834210:	e0fffd17 	ldw	r3,-12(fp)
 1834214:	18c00403 	ldbu	r3,16(r3)
 1834218:	18c03fcc 	andi	r3,r3,255
 183421c:	e13ffb17 	ldw	r4,-20(fp)
 1834220:	d9000215 	stw	r4,8(sp)
 1834224:	d8c00115 	stw	r3,4(sp)
 1834228:	d8800015 	stw	r2,0(sp)
 183422c:	280f883a 	mov	r7,r5
 1834230:	e1bfff17 	ldw	r6,-4(fp)
 1834234:	e17ff917 	ldw	r5,-28(fp)
 1834238:	e13ffa17 	ldw	r4,-24(fp)
 183423c:	1831fa00 	call	1831fa0 <ip_output_if>
 1834240:	e0bffc05 	stb	r2,-16(fp)
  NETIF_SET_HWADDRHINT(netif, NULL);
 1834244:	e0bffb17 	ldw	r2,-20(fp)
 1834248:	10001015 	stw	zero,64(r2)

  /* did we chain a header earlier? */
  if (q != p) {
 183424c:	e0fffa17 	ldw	r3,-24(fp)
 1834250:	e0bffe17 	ldw	r2,-8(fp)
 1834254:	18800226 	beq	r3,r2,1834260 <raw_sendto+0x170>
    /* free the header */
    pbuf_free(q);
 1834258:	e13ffa17 	ldw	r4,-24(fp)
 183425c:	181a22c0 	call	181a22c <pbuf_free>
  }
  return err;
 1834260:	e0bffc03 	ldbu	r2,-16(fp)
}
 1834264:	e037883a 	mov	sp,fp
 1834268:	dfc00117 	ldw	ra,4(sp)
 183426c:	df000017 	ldw	fp,0(sp)
 1834270:	dec00204 	addi	sp,sp,8
 1834274:	f800283a 	ret

01834278 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
 1834278:	defffc04 	addi	sp,sp,-16
 183427c:	dfc00315 	stw	ra,12(sp)
 1834280:	df000215 	stw	fp,8(sp)
 1834284:	df000204 	addi	fp,sp,8
 1834288:	e13ffe15 	stw	r4,-8(fp)
 183428c:	e17fff15 	stw	r5,-4(fp)
  return raw_sendto(pcb, p, &pcb->remote_ip);
 1834290:	e0bffe17 	ldw	r2,-8(fp)
 1834294:	10800104 	addi	r2,r2,4
 1834298:	100d883a 	mov	r6,r2
 183429c:	e17fff17 	ldw	r5,-4(fp)
 18342a0:	e13ffe17 	ldw	r4,-8(fp)
 18342a4:	18340f00 	call	18340f0 <raw_sendto>
}
 18342a8:	e037883a 	mov	sp,fp
 18342ac:	dfc00117 	ldw	ra,4(sp)
 18342b0:	df000017 	ldw	fp,0(sp)
 18342b4:	dec00204 	addi	sp,sp,8
 18342b8:	f800283a 	ret

018342bc <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
 18342bc:	defffc04 	addi	sp,sp,-16
 18342c0:	dfc00315 	stw	ra,12(sp)
 18342c4:	df000215 	stw	fp,8(sp)
 18342c8:	df000204 	addi	fp,sp,8
 18342cc:	e13fff15 	stw	r4,-4(fp)
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
 18342d0:	d0e81517 	ldw	r3,-24492(gp)
 18342d4:	e0bfff17 	ldw	r2,-4(fp)
 18342d8:	1880041e 	bne	r3,r2,18342ec <raw_remove+0x30>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
 18342dc:	d0a81517 	ldw	r2,-24492(gp)
 18342e0:	10800317 	ldw	r2,12(r2)
 18342e4:	d0a81515 	stw	r2,-24492(gp)
 18342e8:	00001306 	br	1834338 <raw_remove+0x7c>
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 18342ec:	d0a81517 	ldw	r2,-24492(gp)
 18342f0:	e0bffe15 	stw	r2,-8(fp)
 18342f4:	00000e06 	br	1834330 <raw_remove+0x74>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 18342f8:	e0bffe17 	ldw	r2,-8(fp)
 18342fc:	10800317 	ldw	r2,12(r2)
 1834300:	10000826 	beq	r2,zero,1834324 <raw_remove+0x68>
 1834304:	e0bffe17 	ldw	r2,-8(fp)
 1834308:	10c00317 	ldw	r3,12(r2)
 183430c:	e0bfff17 	ldw	r2,-4(fp)
 1834310:	1880041e 	bne	r3,r2,1834324 <raw_remove+0x68>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 1834314:	e0bfff17 	ldw	r2,-4(fp)
 1834318:	10c00317 	ldw	r3,12(r2)
 183431c:	e0bffe17 	ldw	r2,-8(fp)
 1834320:	10c00315 	stw	r3,12(r2)
  if (raw_pcbs == pcb) {
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 1834324:	e0bffe17 	ldw	r2,-8(fp)
 1834328:	10800317 	ldw	r2,12(r2)
 183432c:	e0bffe15 	stw	r2,-8(fp)
 1834330:	e0bffe17 	ldw	r2,-8(fp)
 1834334:	103ff01e 	bne	r2,zero,18342f8 <__ram_exceptions_end+0xff824008>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
 1834338:	e13fff17 	ldw	r4,-4(fp)
 183433c:	183c5140 	call	183c514 <free>
}
 1834340:	0001883a 	nop
 1834344:	e037883a 	mov	sp,fp
 1834348:	dfc00117 	ldw	ra,4(sp)
 183434c:	df000017 	ldw	fp,0(sp)
 1834350:	dec00204 	addi	sp,sp,8
 1834354:	f800283a 	ret

01834358 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
 1834358:	defffc04 	addi	sp,sp,-16
 183435c:	dfc00315 	stw	ra,12(sp)
 1834360:	df000215 	stw	fp,8(sp)
 1834364:	df000204 	addi	fp,sp,8
 1834368:	2005883a 	mov	r2,r4
 183436c:	e0bfff05 	stb	r2,-4(fp)
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
 1834370:	00806134 	movhi	r2,388
 1834374:	108bcc84 	addi	r2,r2,12082
 1834378:	1080000b 	ldhu	r2,0(r2)
 183437c:	10bfffcc 	andi	r2,r2,65535
 1834380:	1009883a 	mov	r4,r2
 1834384:	183c5000 	call	183c500 <malloc>
 1834388:	e0bffe15 	stw	r2,-8(fp)
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
 183438c:	e0bffe17 	ldw	r2,-8(fp)
 1834390:	10000f26 	beq	r2,zero,18343d0 <raw_new+0x78>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
 1834394:	01800704 	movi	r6,28
 1834398:	000b883a 	mov	r5,zero
 183439c:	e13ffe17 	ldw	r4,-8(fp)
 18343a0:	18060e00 	call	18060e0 <memset>
    pcb->protocol = proto;
 18343a4:	e0bffe17 	ldw	r2,-8(fp)
 18343a8:	e0ffff03 	ldbu	r3,-4(fp)
 18343ac:	10c00405 	stb	r3,16(r2)
    pcb->ttl = RAW_TTL;
 18343b0:	e0bffe17 	ldw	r2,-8(fp)
 18343b4:	00c01004 	movi	r3,64
 18343b8:	10c00285 	stb	r3,10(r2)
    pcb->next = raw_pcbs;
 18343bc:	d0e81517 	ldw	r3,-24492(gp)
 18343c0:	e0bffe17 	ldw	r2,-8(fp)
 18343c4:	10c00315 	stw	r3,12(r2)
    raw_pcbs = pcb;
 18343c8:	e0bffe17 	ldw	r2,-8(fp)
 18343cc:	d0a81515 	stw	r2,-24492(gp)
  }
  return pcb;
 18343d0:	e0bffe17 	ldw	r2,-8(fp)
}
 18343d4:	e037883a 	mov	sp,fp
 18343d8:	dfc00117 	ldw	ra,4(sp)
 18343dc:	df000017 	ldw	fp,0(sp)
 18343e0:	dec00204 	addi	sp,sp,8
 18343e4:	f800283a 	ret

018343e8 <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
 18343e8:	defffb04 	addi	sp,sp,-20
 18343ec:	dfc00415 	stw	ra,16(sp)
 18343f0:	df000315 	stw	fp,12(sp)
 18343f4:	df000304 	addi	fp,sp,12
 18343f8:	e13fff15 	stw	r4,-4(fp)
  if (ms > 0) {
 18343fc:	e0bfff17 	ldw	r2,-4(fp)
 1834400:	10000e26 	beq	r2,zero,183443c <sys_msleep+0x54>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
 1834404:	e0bffe04 	addi	r2,fp,-8
 1834408:	000b883a 	mov	r5,zero
 183440c:	1009883a 	mov	r4,r2
 1834410:	1814e900 	call	1814e90 <sys_sem_new>
 1834414:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 1834418:	e0bffd07 	ldb	r2,-12(fp)
 183441c:	1000071e 	bne	r2,zero,183443c <sys_msleep+0x54>
      sys_arch_sem_wait(&delaysem, ms);
 1834420:	e0bffe04 	addi	r2,fp,-8
 1834424:	e17fff17 	ldw	r5,-4(fp)
 1834428:	1009883a 	mov	r4,r2
 183442c:	18150140 	call	1815014 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
 1834430:	e0bffe04 	addi	r2,fp,-8
 1834434:	1009883a 	mov	r4,r2
 1834438:	1814f740 	call	1814f74 <sys_sem_free>
    }
  }
}
 183443c:	0001883a 	nop
 1834440:	e037883a 	mov	sp,fp
 1834444:	dfc00117 	ldw	ra,4(sp)
 1834448:	df000017 	ldw	fp,0(sp)
 183444c:	dec00204 	addi	sp,sp,8
 1834450:	f800283a 	ret

01834454 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 1834454:	defff404 	addi	sp,sp,-48
 1834458:	dfc00b15 	stw	ra,44(sp)
 183445c:	df000a15 	stw	fp,40(sp)
 1834460:	df000a04 	addi	fp,sp,40
 1834464:	e13ffe15 	stw	r4,-8(fp)
 1834468:	e17fff15 	stw	r5,-4(fp)
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 183446c:	e03ffb15 	stw	zero,-20(fp)
  struct tcp_pcb_listen *lpcb_any = NULL;
 1834470:	e03ffc15 	stw	zero,-16(fp)
  u8_t hdrlen;
  err_t err;

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 1834474:	00806134 	movhi	r2,388
 1834478:	109e7504 	addi	r2,r2,31188
 183447c:	10804917 	ldw	r2,292(r2)
 1834480:	10c00044 	addi	r3,r2,1
 1834484:	00806134 	movhi	r2,388
 1834488:	109e7504 	addi	r2,r2,31188
 183448c:	10c04915 	stw	r3,292(r2)
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
 1834490:	e0bffe17 	ldw	r2,-8(fp)
 1834494:	10800117 	ldw	r2,4(r2)
 1834498:	d0a81715 	stw	r2,-24484(gp)
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 183449c:	e0bffe17 	ldw	r2,-8(fp)
 18344a0:	10c00117 	ldw	r3,4(r2)
 18344a4:	d0a81717 	ldw	r2,-24484(gp)
 18344a8:	10800003 	ldbu	r2,0(r2)
 18344ac:	10803fcc 	andi	r2,r2,255
 18344b0:	108003cc 	andi	r2,r2,15
 18344b4:	1085883a 	add	r2,r2,r2
 18344b8:	1085883a 	add	r2,r2,r2
 18344bc:	1885883a 	add	r2,r3,r2
 18344c0:	d0a81615 	stw	r2,-24488(gp)
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 18344c4:	d0a81717 	ldw	r2,-24484(gp)
 18344c8:	10800003 	ldbu	r2,0(r2)
 18344cc:	10803fcc 	andi	r2,r2,255
 18344d0:	108003cc 	andi	r2,r2,15
 18344d4:	1085883a 	add	r2,r2,r2
 18344d8:	1085883a 	add	r2,r2,r2
 18344dc:	0085c83a 	sub	r2,zero,r2
 18344e0:	10bfffcc 	andi	r2,r2,65535
 18344e4:	10a0001c 	xori	r2,r2,32768
 18344e8:	10a00004 	addi	r2,r2,-32768
 18344ec:	100b883a 	mov	r5,r2
 18344f0:	e13ffe17 	ldw	r4,-8(fp)
 18344f4:	181a07c0 	call	181a07c <pbuf_header>
 18344f8:	10803fcc 	andi	r2,r2,255
 18344fc:	1000051e 	bne	r2,zero,1834514 <tcp_input+0xc0>
 1834500:	e0bffe17 	ldw	r2,-8(fp)
 1834504:	1080020b 	ldhu	r2,8(r2)
 1834508:	10bfffcc 	andi	r2,r2,65535
 183450c:	10800528 	cmpgeui	r2,r2,20
 1834510:	1000081e 	bne	r2,zero,1834534 <tcp_input+0xe0>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 1834514:	00806134 	movhi	r2,388
 1834518:	109e7504 	addi	r2,r2,31188
 183451c:	10804d17 	ldw	r2,308(r2)
 1834520:	10c00044 	addi	r3,r2,1
 1834524:	00806134 	movhi	r2,388
 1834528:	109e7504 	addi	r2,r2,31188
 183452c:	10c04d15 	stw	r3,308(r2)
    goto dropped;
 1834530:	00035506 	br	1835288 <tcp_input+0xe34>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 1834534:	d0a81117 	ldw	r2,-24508(gp)
 1834538:	e17fff17 	ldw	r5,-4(fp)
 183453c:	1009883a 	mov	r4,r2
 1834540:	18189b80 	call	18189b8 <ip4_addr_isbroadcast>
 1834544:	10803fcc 	andi	r2,r2,255
 1834548:	1000041e 	bne	r2,zero,183455c <tcp_input+0x108>
      ip_addr_ismulticast(&current_iphdr_dest)) {
 183454c:	d0a81117 	ldw	r2,-24508(gp)
 1834550:	10803c0c 	andi	r2,r2,240
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 1834554:	10803818 	cmpnei	r2,r2,224
 1834558:	1000081e 	bne	r2,zero,183457c <tcp_input+0x128>
      ip_addr_ismulticast(&current_iphdr_dest)) {
    TCP_STATS_INC(tcp.proterr);
 183455c:	00806134 	movhi	r2,388
 1834560:	109e7504 	addi	r2,r2,31188
 1834564:	10805017 	ldw	r2,320(r2)
 1834568:	10c00044 	addi	r3,r2,1
 183456c:	00806134 	movhi	r2,388
 1834570:	109e7504 	addi	r2,r2,31188
 1834574:	10c05015 	stw	r3,320(r2)
    goto dropped;
 1834578:	00034306 	br	1835288 <tcp_input+0xe34>
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len) != 0) {
 183457c:	e0bffe17 	ldw	r2,-8(fp)
 1834580:	1080020b 	ldhu	r2,8(r2)
    goto dropped;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 1834584:	10bfffcc 	andi	r2,r2,65535
 1834588:	d8800015 	stw	r2,0(sp)
 183458c:	01c00184 	movi	r7,6
 1834590:	d1a81104 	addi	r6,gp,-24508
 1834594:	d1680f04 	addi	r5,gp,-24516
 1834598:	e13ffe17 	ldw	r4,-8(fp)
 183459c:	18313940 	call	1831394 <inet_chksum_pseudo>
 18345a0:	10bfffcc 	andi	r2,r2,65535
 18345a4:	10000826 	beq	r2,zero,18345c8 <tcp_input+0x174>
        inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len)));
#if TCP_DEBUG
    tcp_debug_print(tcphdr);
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
 18345a8:	00806134 	movhi	r2,388
 18345ac:	109e7504 	addi	r2,r2,31188
 18345b0:	10804c17 	ldw	r2,304(r2)
 18345b4:	10c00044 	addi	r3,r2,1
 18345b8:	00806134 	movhi	r2,388
 18345bc:	109e7504 	addi	r2,r2,31188
 18345c0:	10c04c15 	stw	r3,304(r2)
    goto dropped;
 18345c4:	00033006 	br	1835288 <tcp_input+0xe34>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 18345c8:	d0a81617 	ldw	r2,-24488(gp)
 18345cc:	10c00303 	ldbu	r3,12(r2)
 18345d0:	10800343 	ldbu	r2,13(r2)
 18345d4:	1004923a 	slli	r2,r2,8
 18345d8:	10c4b03a 	or	r2,r2,r3
 18345dc:	10bfffcc 	andi	r2,r2,65535
 18345e0:	1004d23a 	srli	r2,r2,8
 18345e4:	10ffffcc 	andi	r3,r2,65535
 18345e8:	d0a81617 	ldw	r2,-24488(gp)
 18345ec:	11000303 	ldbu	r4,12(r2)
 18345f0:	10800343 	ldbu	r2,13(r2)
 18345f4:	1004923a 	slli	r2,r2,8
 18345f8:	1104b03a 	or	r2,r2,r4
 18345fc:	10bfffcc 	andi	r2,r2,65535
 1834600:	1004923a 	slli	r2,r2,8
 1834604:	10bfffcc 	andi	r2,r2,65535
 1834608:	1884b03a 	or	r2,r3,r2
 183460c:	1005d33a 	srai	r2,r2,12
 1834610:	e0bffd45 	stb	r2,-11(fp)
  if(pbuf_header(p, -(hdrlen * 4))){
 1834614:	e0bffd43 	ldbu	r2,-11(fp)
 1834618:	10bfff24 	muli	r2,r2,-4
 183461c:	10bfffcc 	andi	r2,r2,65535
 1834620:	10a0001c 	xori	r2,r2,32768
 1834624:	10a00004 	addi	r2,r2,-32768
 1834628:	100b883a 	mov	r5,r2
 183462c:	e13ffe17 	ldw	r4,-8(fp)
 1834630:	181a07c0 	call	181a07c <pbuf_header>
 1834634:	10803fcc 	andi	r2,r2,255
 1834638:	10000826 	beq	r2,zero,183465c <tcp_input+0x208>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
 183463c:	00806134 	movhi	r2,388
 1834640:	109e7504 	addi	r2,r2,31188
 1834644:	10804d17 	ldw	r2,308(r2)
 1834648:	10c00044 	addi	r3,r2,1
 183464c:	00806134 	movhi	r2,388
 1834650:	109e7504 	addi	r2,r2,31188
 1834654:	10c04d15 	stw	r3,308(r2)
    goto dropped;
 1834658:	00030b06 	br	1835288 <tcp_input+0xe34>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 183465c:	d0a81617 	ldw	r2,-24488(gp)
 1834660:	d0e81617 	ldw	r3,-24488(gp)
 1834664:	19000003 	ldbu	r4,0(r3)
 1834668:	18c00043 	ldbu	r3,1(r3)
 183466c:	1806923a 	slli	r3,r3,8
 1834670:	1906b03a 	or	r3,r3,r4
 1834674:	18ffffcc 	andi	r3,r3,65535
 1834678:	1806d23a 	srli	r3,r3,8
 183467c:	180b883a 	mov	r5,r3
 1834680:	d0e81617 	ldw	r3,-24488(gp)
 1834684:	19000003 	ldbu	r4,0(r3)
 1834688:	18c00043 	ldbu	r3,1(r3)
 183468c:	1806923a 	slli	r3,r3,8
 1834690:	1906b03a 	or	r3,r3,r4
 1834694:	18ffffcc 	andi	r3,r3,65535
 1834698:	1806923a 	slli	r3,r3,8
 183469c:	28c6b03a 	or	r3,r5,r3
 18346a0:	180d883a 	mov	r6,r3
 18346a4:	30ffffcc 	andi	r3,r6,65535
 18346a8:	19403fcc 	andi	r5,r3,255
 18346ac:	10c00003 	ldbu	r3,0(r2)
 18346b0:	1806703a 	and	r3,r3,zero
 18346b4:	1809883a 	mov	r4,r3
 18346b8:	2807883a 	mov	r3,r5
 18346bc:	20c6b03a 	or	r3,r4,r3
 18346c0:	10c00005 	stb	r3,0(r2)
 18346c4:	30ffffcc 	andi	r3,r6,65535
 18346c8:	1806d23a 	srli	r3,r3,8
 18346cc:	197fffcc 	andi	r5,r3,65535
 18346d0:	10c00043 	ldbu	r3,1(r2)
 18346d4:	1806703a 	and	r3,r3,zero
 18346d8:	1809883a 	mov	r4,r3
 18346dc:	2807883a 	mov	r3,r5
 18346e0:	20c6b03a 	or	r3,r4,r3
 18346e4:	10c00045 	stb	r3,1(r2)
  tcphdr->dest = ntohs(tcphdr->dest);
 18346e8:	d0a81617 	ldw	r2,-24488(gp)
 18346ec:	d0e81617 	ldw	r3,-24488(gp)
 18346f0:	19000083 	ldbu	r4,2(r3)
 18346f4:	18c000c3 	ldbu	r3,3(r3)
 18346f8:	1806923a 	slli	r3,r3,8
 18346fc:	1906b03a 	or	r3,r3,r4
 1834700:	18ffffcc 	andi	r3,r3,65535
 1834704:	1806d23a 	srli	r3,r3,8
 1834708:	180b883a 	mov	r5,r3
 183470c:	d0e81617 	ldw	r3,-24488(gp)
 1834710:	19000083 	ldbu	r4,2(r3)
 1834714:	18c000c3 	ldbu	r3,3(r3)
 1834718:	1806923a 	slli	r3,r3,8
 183471c:	1906b03a 	or	r3,r3,r4
 1834720:	18ffffcc 	andi	r3,r3,65535
 1834724:	1806923a 	slli	r3,r3,8
 1834728:	28c6b03a 	or	r3,r5,r3
 183472c:	180d883a 	mov	r6,r3
 1834730:	30ffffcc 	andi	r3,r6,65535
 1834734:	19403fcc 	andi	r5,r3,255
 1834738:	10c00083 	ldbu	r3,2(r2)
 183473c:	1806703a 	and	r3,r3,zero
 1834740:	1809883a 	mov	r4,r3
 1834744:	2807883a 	mov	r3,r5
 1834748:	20c6b03a 	or	r3,r4,r3
 183474c:	10c00085 	stb	r3,2(r2)
 1834750:	30ffffcc 	andi	r3,r6,65535
 1834754:	1806d23a 	srli	r3,r3,8
 1834758:	197fffcc 	andi	r5,r3,65535
 183475c:	10c000c3 	ldbu	r3,3(r2)
 1834760:	1806703a 	and	r3,r3,zero
 1834764:	1809883a 	mov	r4,r3
 1834768:	2807883a 	mov	r3,r5
 183476c:	20c6b03a 	or	r3,r4,r3
 1834770:	10c000c5 	stb	r3,3(r2)
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 1834774:	d0a81617 	ldw	r2,-24488(gp)
 1834778:	d0e81617 	ldw	r3,-24488(gp)
 183477c:	19000103 	ldbu	r4,4(r3)
 1834780:	19400143 	ldbu	r5,5(r3)
 1834784:	280a923a 	slli	r5,r5,8
 1834788:	2908b03a 	or	r4,r5,r4
 183478c:	19400183 	ldbu	r5,6(r3)
 1834790:	280a943a 	slli	r5,r5,16
 1834794:	2908b03a 	or	r4,r5,r4
 1834798:	18c001c3 	ldbu	r3,7(r3)
 183479c:	1806963a 	slli	r3,r3,24
 18347a0:	1906b03a 	or	r3,r3,r4
 18347a4:	1808d63a 	srli	r4,r3,24
 18347a8:	d0e81617 	ldw	r3,-24488(gp)
 18347ac:	19400103 	ldbu	r5,4(r3)
 18347b0:	19800143 	ldbu	r6,5(r3)
 18347b4:	300c923a 	slli	r6,r6,8
 18347b8:	314ab03a 	or	r5,r6,r5
 18347bc:	19800183 	ldbu	r6,6(r3)
 18347c0:	300c943a 	slli	r6,r6,16
 18347c4:	314ab03a 	or	r5,r6,r5
 18347c8:	18c001c3 	ldbu	r3,7(r3)
 18347cc:	1806963a 	slli	r3,r3,24
 18347d0:	1946b03a 	or	r3,r3,r5
 18347d4:	1806d23a 	srli	r3,r3,8
 18347d8:	18ffc00c 	andi	r3,r3,65280
 18347dc:	20c8b03a 	or	r4,r4,r3
 18347e0:	d0e81617 	ldw	r3,-24488(gp)
 18347e4:	19400103 	ldbu	r5,4(r3)
 18347e8:	19800143 	ldbu	r6,5(r3)
 18347ec:	300c923a 	slli	r6,r6,8
 18347f0:	314ab03a 	or	r5,r6,r5
 18347f4:	19800183 	ldbu	r6,6(r3)
 18347f8:	300c943a 	slli	r6,r6,16
 18347fc:	314ab03a 	or	r5,r6,r5
 1834800:	18c001c3 	ldbu	r3,7(r3)
 1834804:	1806963a 	slli	r3,r3,24
 1834808:	1946b03a 	or	r3,r3,r5
 183480c:	18ffc00c 	andi	r3,r3,65280
 1834810:	1806923a 	slli	r3,r3,8
 1834814:	20c8b03a 	or	r4,r4,r3
 1834818:	d0e81617 	ldw	r3,-24488(gp)
 183481c:	19400103 	ldbu	r5,4(r3)
 1834820:	19800143 	ldbu	r6,5(r3)
 1834824:	300c923a 	slli	r6,r6,8
 1834828:	314ab03a 	or	r5,r6,r5
 183482c:	19800183 	ldbu	r6,6(r3)
 1834830:	300c943a 	slli	r6,r6,16
 1834834:	314ab03a 	or	r5,r6,r5
 1834838:	18c001c3 	ldbu	r3,7(r3)
 183483c:	1806963a 	slli	r3,r3,24
 1834840:	1946b03a 	or	r3,r3,r5
 1834844:	1806963a 	slli	r3,r3,24
 1834848:	20c6b03a 	or	r3,r4,r3
 183484c:	19803fcc 	andi	r6,r3,255
 1834850:	11000103 	ldbu	r4,4(r2)
 1834854:	2008703a 	and	r4,r4,zero
 1834858:	200b883a 	mov	r5,r4
 183485c:	3009883a 	mov	r4,r6
 1834860:	2908b03a 	or	r4,r5,r4
 1834864:	11000105 	stb	r4,4(r2)
 1834868:	1808d23a 	srli	r4,r3,8
 183486c:	21803fcc 	andi	r6,r4,255
 1834870:	11000143 	ldbu	r4,5(r2)
 1834874:	2008703a 	and	r4,r4,zero
 1834878:	200b883a 	mov	r5,r4
 183487c:	3009883a 	mov	r4,r6
 1834880:	2908b03a 	or	r4,r5,r4
 1834884:	11000145 	stb	r4,5(r2)
 1834888:	1808d43a 	srli	r4,r3,16
 183488c:	21803fcc 	andi	r6,r4,255
 1834890:	11000183 	ldbu	r4,6(r2)
 1834894:	2008703a 	and	r4,r4,zero
 1834898:	200b883a 	mov	r5,r4
 183489c:	3009883a 	mov	r4,r6
 18348a0:	2908b03a 	or	r4,r5,r4
 18348a4:	11000185 	stb	r4,6(r2)
 18348a8:	180ad63a 	srli	r5,r3,24
 18348ac:	10c001c3 	ldbu	r3,7(r2)
 18348b0:	1806703a 	and	r3,r3,zero
 18348b4:	1809883a 	mov	r4,r3
 18348b8:	2807883a 	mov	r3,r5
 18348bc:	20c6b03a 	or	r3,r4,r3
 18348c0:	10c001c5 	stb	r3,7(r2)
 18348c4:	10c00103 	ldbu	r3,4(r2)
 18348c8:	11000143 	ldbu	r4,5(r2)
 18348cc:	2008923a 	slli	r4,r4,8
 18348d0:	20c6b03a 	or	r3,r4,r3
 18348d4:	11000183 	ldbu	r4,6(r2)
 18348d8:	2008943a 	slli	r4,r4,16
 18348dc:	20c6b03a 	or	r3,r4,r3
 18348e0:	108001c3 	ldbu	r2,7(r2)
 18348e4:	1004963a 	slli	r2,r2,24
 18348e8:	10c4b03a 	or	r2,r2,r3
 18348ec:	d0a81815 	stw	r2,-24480(gp)
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 18348f0:	d0a81617 	ldw	r2,-24488(gp)
 18348f4:	d0e81617 	ldw	r3,-24488(gp)
 18348f8:	19000203 	ldbu	r4,8(r3)
 18348fc:	19400243 	ldbu	r5,9(r3)
 1834900:	280a923a 	slli	r5,r5,8
 1834904:	2908b03a 	or	r4,r5,r4
 1834908:	19400283 	ldbu	r5,10(r3)
 183490c:	280a943a 	slli	r5,r5,16
 1834910:	2908b03a 	or	r4,r5,r4
 1834914:	18c002c3 	ldbu	r3,11(r3)
 1834918:	1806963a 	slli	r3,r3,24
 183491c:	1906b03a 	or	r3,r3,r4
 1834920:	1808d63a 	srli	r4,r3,24
 1834924:	d0e81617 	ldw	r3,-24488(gp)
 1834928:	19400203 	ldbu	r5,8(r3)
 183492c:	19800243 	ldbu	r6,9(r3)
 1834930:	300c923a 	slli	r6,r6,8
 1834934:	314ab03a 	or	r5,r6,r5
 1834938:	19800283 	ldbu	r6,10(r3)
 183493c:	300c943a 	slli	r6,r6,16
 1834940:	314ab03a 	or	r5,r6,r5
 1834944:	18c002c3 	ldbu	r3,11(r3)
 1834948:	1806963a 	slli	r3,r3,24
 183494c:	1946b03a 	or	r3,r3,r5
 1834950:	1806d23a 	srli	r3,r3,8
 1834954:	18ffc00c 	andi	r3,r3,65280
 1834958:	20c8b03a 	or	r4,r4,r3
 183495c:	d0e81617 	ldw	r3,-24488(gp)
 1834960:	19400203 	ldbu	r5,8(r3)
 1834964:	19800243 	ldbu	r6,9(r3)
 1834968:	300c923a 	slli	r6,r6,8
 183496c:	314ab03a 	or	r5,r6,r5
 1834970:	19800283 	ldbu	r6,10(r3)
 1834974:	300c943a 	slli	r6,r6,16
 1834978:	314ab03a 	or	r5,r6,r5
 183497c:	18c002c3 	ldbu	r3,11(r3)
 1834980:	1806963a 	slli	r3,r3,24
 1834984:	1946b03a 	or	r3,r3,r5
 1834988:	18ffc00c 	andi	r3,r3,65280
 183498c:	1806923a 	slli	r3,r3,8
 1834990:	20c8b03a 	or	r4,r4,r3
 1834994:	d0e81617 	ldw	r3,-24488(gp)
 1834998:	19400203 	ldbu	r5,8(r3)
 183499c:	19800243 	ldbu	r6,9(r3)
 18349a0:	300c923a 	slli	r6,r6,8
 18349a4:	314ab03a 	or	r5,r6,r5
 18349a8:	19800283 	ldbu	r6,10(r3)
 18349ac:	300c943a 	slli	r6,r6,16
 18349b0:	314ab03a 	or	r5,r6,r5
 18349b4:	18c002c3 	ldbu	r3,11(r3)
 18349b8:	1806963a 	slli	r3,r3,24
 18349bc:	1946b03a 	or	r3,r3,r5
 18349c0:	1806963a 	slli	r3,r3,24
 18349c4:	20c6b03a 	or	r3,r4,r3
 18349c8:	19803fcc 	andi	r6,r3,255
 18349cc:	11000203 	ldbu	r4,8(r2)
 18349d0:	2008703a 	and	r4,r4,zero
 18349d4:	200b883a 	mov	r5,r4
 18349d8:	3009883a 	mov	r4,r6
 18349dc:	2908b03a 	or	r4,r5,r4
 18349e0:	11000205 	stb	r4,8(r2)
 18349e4:	1808d23a 	srli	r4,r3,8
 18349e8:	21803fcc 	andi	r6,r4,255
 18349ec:	11000243 	ldbu	r4,9(r2)
 18349f0:	2008703a 	and	r4,r4,zero
 18349f4:	200b883a 	mov	r5,r4
 18349f8:	3009883a 	mov	r4,r6
 18349fc:	2908b03a 	or	r4,r5,r4
 1834a00:	11000245 	stb	r4,9(r2)
 1834a04:	1808d43a 	srli	r4,r3,16
 1834a08:	21803fcc 	andi	r6,r4,255
 1834a0c:	11000283 	ldbu	r4,10(r2)
 1834a10:	2008703a 	and	r4,r4,zero
 1834a14:	200b883a 	mov	r5,r4
 1834a18:	3009883a 	mov	r4,r6
 1834a1c:	2908b03a 	or	r4,r5,r4
 1834a20:	11000285 	stb	r4,10(r2)
 1834a24:	180ad63a 	srli	r5,r3,24
 1834a28:	10c002c3 	ldbu	r3,11(r2)
 1834a2c:	1806703a 	and	r3,r3,zero
 1834a30:	1809883a 	mov	r4,r3
 1834a34:	2807883a 	mov	r3,r5
 1834a38:	20c6b03a 	or	r3,r4,r3
 1834a3c:	10c002c5 	stb	r3,11(r2)
 1834a40:	10c00203 	ldbu	r3,8(r2)
 1834a44:	11000243 	ldbu	r4,9(r2)
 1834a48:	2008923a 	slli	r4,r4,8
 1834a4c:	20c6b03a 	or	r3,r4,r3
 1834a50:	11000283 	ldbu	r4,10(r2)
 1834a54:	2008943a 	slli	r4,r4,16
 1834a58:	20c6b03a 	or	r3,r4,r3
 1834a5c:	108002c3 	ldbu	r2,11(r2)
 1834a60:	1004963a 	slli	r2,r2,24
 1834a64:	10c4b03a 	or	r2,r2,r3
 1834a68:	d0a81915 	stw	r2,-24476(gp)
  tcphdr->wnd = ntohs(tcphdr->wnd);
 1834a6c:	d0a81617 	ldw	r2,-24488(gp)
 1834a70:	d0e81617 	ldw	r3,-24488(gp)
 1834a74:	19000383 	ldbu	r4,14(r3)
 1834a78:	18c003c3 	ldbu	r3,15(r3)
 1834a7c:	1806923a 	slli	r3,r3,8
 1834a80:	1906b03a 	or	r3,r3,r4
 1834a84:	18ffffcc 	andi	r3,r3,65535
 1834a88:	1806d23a 	srli	r3,r3,8
 1834a8c:	180b883a 	mov	r5,r3
 1834a90:	d0e81617 	ldw	r3,-24488(gp)
 1834a94:	19000383 	ldbu	r4,14(r3)
 1834a98:	18c003c3 	ldbu	r3,15(r3)
 1834a9c:	1806923a 	slli	r3,r3,8
 1834aa0:	1906b03a 	or	r3,r3,r4
 1834aa4:	18ffffcc 	andi	r3,r3,65535
 1834aa8:	1806923a 	slli	r3,r3,8
 1834aac:	28c6b03a 	or	r3,r5,r3
 1834ab0:	180d883a 	mov	r6,r3
 1834ab4:	30ffffcc 	andi	r3,r6,65535
 1834ab8:	19403fcc 	andi	r5,r3,255
 1834abc:	10c00383 	ldbu	r3,14(r2)
 1834ac0:	1806703a 	and	r3,r3,zero
 1834ac4:	1809883a 	mov	r4,r3
 1834ac8:	2807883a 	mov	r3,r5
 1834acc:	20c6b03a 	or	r3,r4,r3
 1834ad0:	10c00385 	stb	r3,14(r2)
 1834ad4:	30ffffcc 	andi	r3,r6,65535
 1834ad8:	1806d23a 	srli	r3,r3,8
 1834adc:	197fffcc 	andi	r5,r3,65535
 1834ae0:	10c003c3 	ldbu	r3,15(r2)
 1834ae4:	1806703a 	and	r3,r3,zero
 1834ae8:	1809883a 	mov	r4,r3
 1834aec:	2807883a 	mov	r3,r5
 1834af0:	20c6b03a 	or	r3,r4,r3
 1834af4:	10c003c5 	stb	r3,15(r2)

  flags = TCPH_FLAGS(tcphdr);
 1834af8:	d0a81617 	ldw	r2,-24488(gp)
 1834afc:	10c00303 	ldbu	r3,12(r2)
 1834b00:	10800343 	ldbu	r2,13(r2)
 1834b04:	1004923a 	slli	r2,r2,8
 1834b08:	10c4b03a 	or	r2,r2,r3
 1834b0c:	10bfffcc 	andi	r2,r2,65535
 1834b10:	1004d23a 	srli	r2,r2,8
 1834b14:	1009883a 	mov	r4,r2
 1834b18:	d0a81617 	ldw	r2,-24488(gp)
 1834b1c:	10c00303 	ldbu	r3,12(r2)
 1834b20:	10800343 	ldbu	r2,13(r2)
 1834b24:	1004923a 	slli	r2,r2,8
 1834b28:	10c4b03a 	or	r2,r2,r3
 1834b2c:	10bfffcc 	andi	r2,r2,65535
 1834b30:	1004923a 	slli	r2,r2,8
 1834b34:	2084b03a 	or	r2,r4,r2
 1834b38:	10800fcc 	andi	r2,r2,63
 1834b3c:	d0a81a05 	stb	r2,-24472(gp)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 1834b40:	e0bffe17 	ldw	r2,-8(fp)
 1834b44:	10c0020b 	ldhu	r3,8(r2)
 1834b48:	d0a81a03 	ldbu	r2,-24472(gp)
 1834b4c:	10803fcc 	andi	r2,r2,255
 1834b50:	108000cc 	andi	r2,r2,3
 1834b54:	1004c03a 	cmpne	r2,r2,zero
 1834b58:	10803fcc 	andi	r2,r2,255
 1834b5c:	1885883a 	add	r2,r3,r2
 1834b60:	d0a81a8d 	sth	r2,-24470(gp)

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 1834b64:	e03ff915 	stw	zero,-28(fp)

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 1834b68:	d0a7f317 	ldw	r2,-24628(gp)
 1834b6c:	e0bff815 	stw	r2,-32(fp)
 1834b70:	00002d06 	br	1834c28 <tcp_input+0x7d4>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 1834b74:	e0bff817 	ldw	r2,-32(fp)
 1834b78:	1100080b 	ldhu	r4,32(r2)
 1834b7c:	d0a81617 	ldw	r2,-24488(gp)
 1834b80:	10c00003 	ldbu	r3,0(r2)
 1834b84:	10800043 	ldbu	r2,1(r2)
 1834b88:	1004923a 	slli	r2,r2,8
 1834b8c:	10c4b03a 	or	r2,r2,r3
 1834b90:	20ffffcc 	andi	r3,r4,65535
 1834b94:	10bfffcc 	andi	r2,r2,65535
 1834b98:	18801e1e 	bne	r3,r2,1834c14 <tcp_input+0x7c0>
       pcb->local_port == tcphdr->dest &&
 1834b9c:	e0bff817 	ldw	r2,-32(fp)
 1834ba0:	1100078b 	ldhu	r4,30(r2)
 1834ba4:	d0a81617 	ldw	r2,-24488(gp)
 1834ba8:	10c00083 	ldbu	r3,2(r2)
 1834bac:	108000c3 	ldbu	r2,3(r2)
 1834bb0:	1004923a 	slli	r2,r2,8
 1834bb4:	10c4b03a 	or	r2,r2,r3
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 1834bb8:	20ffffcc 	andi	r3,r4,65535
 1834bbc:	10bfffcc 	andi	r2,r2,65535
 1834bc0:	1880141e 	bne	r3,r2,1834c14 <tcp_input+0x7c0>
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 1834bc4:	e0bff817 	ldw	r2,-32(fp)
 1834bc8:	10c00117 	ldw	r3,4(r2)
 1834bcc:	d0a80f17 	ldw	r2,-24516(gp)
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
 1834bd0:	1880101e 	bne	r3,r2,1834c14 <tcp_input+0x7c0>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 1834bd4:	e0bff817 	ldw	r2,-32(fp)
 1834bd8:	10c00017 	ldw	r3,0(r2)
 1834bdc:	d0a81117 	ldw	r2,-24508(gp)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 1834be0:	18800c1e 	bne	r3,r2,1834c14 <tcp_input+0x7c0>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 1834be4:	e0bff917 	ldw	r2,-28(fp)
 1834be8:	10001226 	beq	r2,zero,1834c34 <tcp_input+0x7e0>
        prev->next = pcb->next;
 1834bec:	e0bff817 	ldw	r2,-32(fp)
 1834bf0:	10c00317 	ldw	r3,12(r2)
 1834bf4:	e0bff917 	ldw	r2,-28(fp)
 1834bf8:	10c00315 	stw	r3,12(r2)
        pcb->next = tcp_active_pcbs;
 1834bfc:	d0e7f317 	ldw	r3,-24628(gp)
 1834c00:	e0bff817 	ldw	r2,-32(fp)
 1834c04:	10c00315 	stw	r3,12(r2)
        tcp_active_pcbs = pcb;
 1834c08:	e0bff817 	ldw	r2,-32(fp)
 1834c0c:	d0a7f315 	stw	r2,-24628(gp)
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 1834c10:	00000806 	br	1834c34 <tcp_input+0x7e0>
    }
    prev = pcb;
 1834c14:	e0bff817 	ldw	r2,-32(fp)
 1834c18:	e0bff915 	stw	r2,-28(fp)
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 1834c1c:	e0bff817 	ldw	r2,-32(fp)
 1834c20:	10800317 	ldw	r2,12(r2)
 1834c24:	e0bff815 	stw	r2,-32(fp)
 1834c28:	e0bff817 	ldw	r2,-32(fp)
 1834c2c:	103fd11e 	bne	r2,zero,1834b74 <__ram_exceptions_end+0xff824884>
 1834c30:	00000106 	br	1834c38 <tcp_input+0x7e4>
        prev->next = pcb->next;
        pcb->next = tcp_active_pcbs;
        tcp_active_pcbs = pcb;
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 1834c34:	0001883a 	nop
    }
    prev = pcb;
  }

  if (pcb == NULL) {
 1834c38:	e0bff817 	ldw	r2,-32(fp)
 1834c3c:	1000651e 	bne	r2,zero,1834dd4 <tcp_input+0x980>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 1834c40:	d0a7f817 	ldw	r2,-24608(gp)
 1834c44:	e0bff815 	stw	r2,-32(fp)
 1834c48:	00002406 	br	1834cdc <tcp_input+0x888>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 1834c4c:	e0bff817 	ldw	r2,-32(fp)
 1834c50:	1100080b 	ldhu	r4,32(r2)
 1834c54:	d0a81617 	ldw	r2,-24488(gp)
 1834c58:	10c00003 	ldbu	r3,0(r2)
 1834c5c:	10800043 	ldbu	r2,1(r2)
 1834c60:	1004923a 	slli	r2,r2,8
 1834c64:	10c4b03a 	or	r2,r2,r3
 1834c68:	20ffffcc 	andi	r3,r4,65535
 1834c6c:	10bfffcc 	andi	r2,r2,65535
 1834c70:	1880171e 	bne	r3,r2,1834cd0 <tcp_input+0x87c>
         pcb->local_port == tcphdr->dest &&
 1834c74:	e0bff817 	ldw	r2,-32(fp)
 1834c78:	1100078b 	ldhu	r4,30(r2)
 1834c7c:	d0a81617 	ldw	r2,-24488(gp)
 1834c80:	10c00083 	ldbu	r3,2(r2)
 1834c84:	108000c3 	ldbu	r2,3(r2)
 1834c88:	1004923a 	slli	r2,r2,8
 1834c8c:	10c4b03a 	or	r2,r2,r3
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 1834c90:	20ffffcc 	andi	r3,r4,65535
 1834c94:	10bfffcc 	andi	r2,r2,65535
 1834c98:	18800d1e 	bne	r3,r2,1834cd0 <tcp_input+0x87c>
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 1834c9c:	e0bff817 	ldw	r2,-32(fp)
 1834ca0:	10c00117 	ldw	r3,4(r2)
 1834ca4:	d0a80f17 	ldw	r2,-24516(gp)
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
 1834ca8:	1880091e 	bne	r3,r2,1834cd0 <tcp_input+0x87c>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 1834cac:	e0bff817 	ldw	r2,-32(fp)
 1834cb0:	10c00017 	ldw	r3,0(r2)
 1834cb4:	d0a81117 	ldw	r2,-24508(gp)
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 1834cb8:	1880051e 	bne	r3,r2,1834cd0 <tcp_input+0x87c>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 1834cbc:	e13ff817 	ldw	r4,-32(fp)
 1834cc0:	18355b00 	call	18355b0 <tcp_timewait_input>
        pbuf_free(p);
 1834cc4:	e13ffe17 	ldw	r4,-8(fp)
 1834cc8:	181a22c0 	call	181a22c <pbuf_free>
        return;
 1834ccc:	00017906 	br	18352b4 <tcp_input+0xe60>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 1834cd0:	e0bff817 	ldw	r2,-32(fp)
 1834cd4:	10800317 	ldw	r2,12(r2)
 1834cd8:	e0bff815 	stw	r2,-32(fp)
 1834cdc:	e0bff817 	ldw	r2,-32(fp)
 1834ce0:	103fda1e 	bne	r2,zero,1834c4c <__ram_exceptions_end+0xff82495c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 1834ce4:	e03ff915 	stw	zero,-28(fp)
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 1834ce8:	d0a7f517 	ldw	r2,-24620(gp)
 1834cec:	e0bffa15 	stw	r2,-24(fp)
 1834cf0:	00001c06 	br	1834d64 <tcp_input+0x910>
      if (lpcb->local_port == tcphdr->dest) {
 1834cf4:	e0bffa17 	ldw	r2,-24(fp)
 1834cf8:	1100078b 	ldhu	r4,30(r2)
 1834cfc:	d0a81617 	ldw	r2,-24488(gp)
 1834d00:	10c00083 	ldbu	r3,2(r2)
 1834d04:	108000c3 	ldbu	r2,3(r2)
 1834d08:	1004923a 	slli	r2,r2,8
 1834d0c:	10c4b03a 	or	r2,r2,r3
 1834d10:	20ffffcc 	andi	r3,r4,65535
 1834d14:	10bfffcc 	andi	r2,r2,65535
 1834d18:	18800d1e 	bne	r3,r2,1834d50 <tcp_input+0x8fc>
#if SO_REUSE
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest)) {
 1834d1c:	e0bffa17 	ldw	r2,-24(fp)
 1834d20:	10c00017 	ldw	r3,0(r2)
 1834d24:	d0a81117 	ldw	r2,-24508(gp)
 1834d28:	18801126 	beq	r3,r2,1834d70 <tcp_input+0x91c>
          /* found an exact match */
          break;
        } else if(ip_addr_isany(&(lpcb->local_ip))) {
 1834d2c:	e0bffa17 	ldw	r2,-24(fp)
 1834d30:	10000326 	beq	r2,zero,1834d40 <tcp_input+0x8ec>
 1834d34:	e0bffa17 	ldw	r2,-24(fp)
 1834d38:	10800017 	ldw	r2,0(r2)
 1834d3c:	1000041e 	bne	r2,zero,1834d50 <tcp_input+0x8fc>
          /* found an ANY-match */
          lpcb_any = lpcb;
 1834d40:	e0bffa17 	ldw	r2,-24(fp)
 1834d44:	e0bffc15 	stw	r2,-16(fp)
          lpcb_prev = prev;
 1834d48:	e0bff917 	ldw	r2,-28(fp)
 1834d4c:	e0bffb15 	stw	r2,-20(fp)
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
 1834d50:	e0bffa17 	ldw	r2,-24(fp)
 1834d54:	e0bff915 	stw	r2,-28(fp)
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 1834d58:	e0bffa17 	ldw	r2,-24(fp)
 1834d5c:	10800317 	ldw	r2,12(r2)
 1834d60:	e0bffa15 	stw	r2,-24(fp)
 1834d64:	e0bffa17 	ldw	r2,-24(fp)
 1834d68:	103fe21e 	bne	r2,zero,1834cf4 <__ram_exceptions_end+0xff824a04>
 1834d6c:	00000106 	br	1834d74 <tcp_input+0x920>
      if (lpcb->local_port == tcphdr->dest) {
#if SO_REUSE
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest)) {
          /* found an exact match */
          break;
 1834d70:	0001883a 	nop
      }
      prev = (struct tcp_pcb *)lpcb;
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 1834d74:	e0bffa17 	ldw	r2,-24(fp)
 1834d78:	1000041e 	bne	r2,zero,1834d8c <tcp_input+0x938>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 1834d7c:	e0bffc17 	ldw	r2,-16(fp)
 1834d80:	e0bffa15 	stw	r2,-24(fp)
      prev = lpcb_prev;
 1834d84:	e0bffb17 	ldw	r2,-20(fp)
 1834d88:	e0bff915 	stw	r2,-28(fp)
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 1834d8c:	e0bffa17 	ldw	r2,-24(fp)
 1834d90:	10001026 	beq	r2,zero,1834dd4 <tcp_input+0x980>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 1834d94:	e0bff917 	ldw	r2,-28(fp)
 1834d98:	10000926 	beq	r2,zero,1834dc0 <tcp_input+0x96c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 1834d9c:	e0bffa17 	ldw	r2,-24(fp)
 1834da0:	10c00317 	ldw	r3,12(r2)
 1834da4:	e0bff917 	ldw	r2,-28(fp)
 1834da8:	10c00315 	stw	r3,12(r2)
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 1834dac:	d0e7f517 	ldw	r3,-24620(gp)
 1834db0:	e0bffa17 	ldw	r2,-24(fp)
 1834db4:	10c00315 	stw	r3,12(r2)
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 1834db8:	e0bffa17 	ldw	r2,-24(fp)
 1834dbc:	d0a7f515 	stw	r2,-24620(gp)
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 1834dc0:	e13ffa17 	ldw	r4,-24(fp)
 1834dc4:	18352c80 	call	18352c8 <tcp_listen_input>
      pbuf_free(p);
 1834dc8:	e13ffe17 	ldw	r4,-8(fp)
 1834dcc:	181a22c0 	call	181a22c <pbuf_free>
      return;
 1834dd0:	00013806 	br	18352b4 <tcp_input+0xe60>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 1834dd4:	e0bff817 	ldw	r2,-32(fp)
 1834dd8:	1000f026 	beq	r2,zero,183519c <tcp_input+0xd48>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 1834ddc:	00806134 	movhi	r2,388
 1834de0:	109e4904 	addi	r2,r2,31012
 1834de4:	10000015 	stw	zero,0(r2)
    inseg.len = p->tot_len;
 1834de8:	e0bffe17 	ldw	r2,-8(fp)
 1834dec:	10c0020b 	ldhu	r3,8(r2)
 1834df0:	00806134 	movhi	r2,388
 1834df4:	109e4904 	addi	r2,r2,31012
 1834df8:	10c0020d 	sth	r3,8(r2)
    inseg.p = p;
 1834dfc:	00806134 	movhi	r2,388
 1834e00:	109e4904 	addi	r2,r2,31012
 1834e04:	e0fffe17 	ldw	r3,-8(fp)
 1834e08:	10c00115 	stw	r3,4(r2)
    inseg.tcphdr = tcphdr;
 1834e0c:	d0e81617 	ldw	r3,-24488(gp)
 1834e10:	00806134 	movhi	r2,388
 1834e14:	109e4904 	addi	r2,r2,31012
 1834e18:	10c00415 	stw	r3,16(r2)

    recv_data = NULL;
 1834e1c:	d0281c15 	stw	zero,-24464(gp)
    recv_flags = 0;
 1834e20:	d0281b05 	stb	zero,-24468(gp)

    if (flags & TCP_PSH) {
 1834e24:	d0a81a03 	ldbu	r2,-24472(gp)
 1834e28:	10803fcc 	andi	r2,r2,255
 1834e2c:	1080020c 	andi	r2,r2,8
 1834e30:	10000626 	beq	r2,zero,1834e4c <tcp_input+0x9f8>
      p->flags |= PBUF_FLAG_PUSH;
 1834e34:	e0bffe17 	ldw	r2,-8(fp)
 1834e38:	10800343 	ldbu	r2,13(r2)
 1834e3c:	10800054 	ori	r2,r2,1
 1834e40:	1007883a 	mov	r3,r2
 1834e44:	e0bffe17 	ldw	r2,-8(fp)
 1834e48:	10c00345 	stb	r3,13(r2)
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 1834e4c:	e0bff817 	ldw	r2,-32(fp)
 1834e50:	10801f17 	ldw	r2,124(r2)
 1834e54:	10001526 	beq	r2,zero,1834eac <tcp_input+0xa58>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 1834e58:	e13ff817 	ldw	r4,-32(fp)
 1834e5c:	181c9340 	call	181c934 <tcp_process_refused_data>
 1834e60:	10803fcc 	andi	r2,r2,255
 1834e64:	1080201c 	xori	r2,r2,128
 1834e68:	10bfe004 	addi	r2,r2,-128
 1834e6c:	10bffda0 	cmpeqi	r2,r2,-10
 1834e70:	1000061e 	bne	r2,zero,1834e8c <tcp_input+0xa38>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 1834e74:	e0bff817 	ldw	r2,-32(fp)
 1834e78:	10801f17 	ldw	r2,124(r2)
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 1834e7c:	10000b26 	beq	r2,zero,1834eac <tcp_input+0xa58>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 1834e80:	d0a81a8b 	ldhu	r2,-24470(gp)
 1834e84:	10bfffcc 	andi	r2,r2,65535
 1834e88:	10000826 	beq	r2,zero,1834eac <tcp_input+0xa58>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        TCP_STATS_INC(tcp.drop);
 1834e8c:	00806134 	movhi	r2,388
 1834e90:	109e7504 	addi	r2,r2,31188
 1834e94:	10804b17 	ldw	r2,300(r2)
 1834e98:	10c00044 	addi	r3,r2,1
 1834e9c:	00806134 	movhi	r2,388
 1834ea0:	109e7504 	addi	r2,r2,31188
 1834ea4:	10c04b15 	stw	r3,300(r2)
        snmp_inc_tcpinerrs();
        goto aborted;
 1834ea8:	0000ad06 	br	1835160 <tcp_input+0xd0c>
      }
    }
    tcp_input_pcb = pcb;
 1834eac:	e0bff817 	ldw	r2,-32(fp)
 1834eb0:	d0a81d15 	stw	r2,-24460(gp)
    err = tcp_process(pcb);
 1834eb4:	e13ff817 	ldw	r4,-32(fp)
 1834eb8:	18356ec0 	call	18356ec <tcp_process>
 1834ebc:	e0bffd05 	stb	r2,-12(fp)
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 1834ec0:	e0bffd07 	ldb	r2,-12(fp)
 1834ec4:	10bffda0 	cmpeqi	r2,r2,-10
 1834ec8:	1000a51e 	bne	r2,zero,1835160 <tcp_input+0xd0c>
      if (recv_flags & TF_RESET) {
 1834ecc:	d0a81b03 	ldbu	r2,-24468(gp)
 1834ed0:	10803fcc 	andi	r2,r2,255
 1834ed4:	1080020c 	andi	r2,r2,8
 1834ed8:	10001026 	beq	r2,zero,1834f1c <tcp_input+0xac8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 1834edc:	e0bff817 	ldw	r2,-32(fp)
 1834ee0:	10802417 	ldw	r2,144(r2)
 1834ee4:	10000726 	beq	r2,zero,1834f04 <tcp_input+0xab0>
 1834ee8:	e0bff817 	ldw	r2,-32(fp)
 1834eec:	10802417 	ldw	r2,144(r2)
 1834ef0:	e0fff817 	ldw	r3,-32(fp)
 1834ef4:	18c00417 	ldw	r3,16(r3)
 1834ef8:	017ffd44 	movi	r5,-11
 1834efc:	1809883a 	mov	r4,r3
 1834f00:	103ee83a 	callr	r2
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 1834f04:	e17ff817 	ldw	r5,-32(fp)
 1834f08:	d127f304 	addi	r4,gp,-24628
 1834f0c:	181d2980 	call	181d298 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 1834f10:	e13ff817 	ldw	r4,-32(fp)
 1834f14:	183c5140 	call	183c514 <free>
 1834f18:	00009106 	br	1835160 <tcp_input+0xd0c>
      } else if (recv_flags & TF_CLOSED) {
 1834f1c:	d0a81b03 	ldbu	r2,-24468(gp)
 1834f20:	10803fcc 	andi	r2,r2,255
 1834f24:	1080040c 	andi	r2,r2,16
 1834f28:	10001526 	beq	r2,zero,1834f80 <tcp_input+0xb2c>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
 1834f2c:	e0bff817 	ldw	r2,-32(fp)
 1834f30:	10800883 	ldbu	r2,34(r2)
 1834f34:	10803fcc 	andi	r2,r2,255
 1834f38:	1080040c 	andi	r2,r2,16
 1834f3c:	10000a1e 	bne	r2,zero,1834f68 <tcp_input+0xb14>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 1834f40:	e0bff817 	ldw	r2,-32(fp)
 1834f44:	10802417 	ldw	r2,144(r2)
 1834f48:	10000726 	beq	r2,zero,1834f68 <tcp_input+0xb14>
 1834f4c:	e0bff817 	ldw	r2,-32(fp)
 1834f50:	10802417 	ldw	r2,144(r2)
 1834f54:	e0fff817 	ldw	r3,-32(fp)
 1834f58:	18c00417 	ldw	r3,16(r3)
 1834f5c:	017ffd04 	movi	r5,-12
 1834f60:	1809883a 	mov	r4,r3
 1834f64:	103ee83a 	callr	r2
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 1834f68:	e17ff817 	ldw	r5,-32(fp)
 1834f6c:	d127f304 	addi	r4,gp,-24628
 1834f70:	181d2980 	call	181d298 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 1834f74:	e13ff817 	ldw	r4,-32(fp)
 1834f78:	183c5140 	call	183c514 <free>
 1834f7c:	00007806 	br	1835160 <tcp_input+0xd0c>
      } else {
        err = ERR_OK;
 1834f80:	e03ffd05 	stb	zero,-12(fp)
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
 1834f84:	e0bff817 	ldw	r2,-32(fp)
 1834f88:	10801a0b 	ldhu	r2,104(r2)
 1834f8c:	10bfffcc 	andi	r2,r2,65535
 1834f90:	10001326 	beq	r2,zero,1834fe0 <tcp_input+0xb8c>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
 1834f94:	e0bff817 	ldw	r2,-32(fp)
 1834f98:	10802017 	ldw	r2,128(r2)
 1834f9c:	10000c26 	beq	r2,zero,1834fd0 <tcp_input+0xb7c>
 1834fa0:	e0bff817 	ldw	r2,-32(fp)
 1834fa4:	10802017 	ldw	r2,128(r2)
 1834fa8:	e0fff817 	ldw	r3,-32(fp)
 1834fac:	19000417 	ldw	r4,16(r3)
 1834fb0:	e0fff817 	ldw	r3,-32(fp)
 1834fb4:	18c01a0b 	ldhu	r3,104(r3)
 1834fb8:	18ffffcc 	andi	r3,r3,65535
 1834fbc:	180d883a 	mov	r6,r3
 1834fc0:	e17ff817 	ldw	r5,-32(fp)
 1834fc4:	103ee83a 	callr	r2
 1834fc8:	e0bffd05 	stb	r2,-12(fp)
 1834fcc:	00000106 	br	1834fd4 <tcp_input+0xb80>
 1834fd0:	e03ffd05 	stb	zero,-12(fp)
          if (err == ERR_ABRT) {
 1834fd4:	e0bffd07 	ldb	r2,-12(fp)
 1834fd8:	10bffd98 	cmpnei	r2,r2,-10
 1834fdc:	10005b26 	beq	r2,zero,183514c <tcp_input+0xcf8>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
 1834fe0:	d0a81c17 	ldw	r2,-24464(gp)
 1834fe4:	10002926 	beq	r2,zero,183508c <tcp_input+0xc38>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 1834fe8:	e0bff817 	ldw	r2,-32(fp)
 1834fec:	10800883 	ldbu	r2,34(r2)
 1834ff0:	10803fcc 	andi	r2,r2,255
 1834ff4:	1080040c 	andi	r2,r2,16
 1834ff8:	10000626 	beq	r2,zero,1835014 <tcp_input+0xbc0>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 1834ffc:	d0a81c17 	ldw	r2,-24464(gp)
 1835000:	1009883a 	mov	r4,r2
 1835004:	181a22c0 	call	181a22c <pbuf_free>
            tcp_abort(pcb);
 1835008:	e13ff817 	ldw	r4,-32(fp)
 183500c:	181b6580 	call	181b658 <tcp_abort>
            goto aborted;
 1835010:	00005306 	br	1835160 <tcp_input+0xd0c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 1835014:	e0bff817 	ldw	r2,-32(fp)
 1835018:	10802117 	ldw	r2,132(r2)
 183501c:	10000c26 	beq	r2,zero,1835050 <tcp_input+0xbfc>
 1835020:	e0bff817 	ldw	r2,-32(fp)
 1835024:	10802117 	ldw	r2,132(r2)
 1835028:	e0fff817 	ldw	r3,-32(fp)
 183502c:	18c00417 	ldw	r3,16(r3)
 1835030:	d1281c17 	ldw	r4,-24464(gp)
 1835034:	000f883a 	mov	r7,zero
 1835038:	200d883a 	mov	r6,r4
 183503c:	e17ff817 	ldw	r5,-32(fp)
 1835040:	1809883a 	mov	r4,r3
 1835044:	103ee83a 	callr	r2
 1835048:	e0bffd05 	stb	r2,-12(fp)
 183504c:	00000706 	br	183506c <tcp_input+0xc18>
 1835050:	d0a81c17 	ldw	r2,-24464(gp)
 1835054:	000f883a 	mov	r7,zero
 1835058:	100d883a 	mov	r6,r2
 183505c:	e17ff817 	ldw	r5,-32(fp)
 1835060:	0009883a 	mov	r4,zero
 1835064:	181cbe00 	call	181cbe0 <tcp_recv_null>
 1835068:	e0bffd05 	stb	r2,-12(fp)
          if (err == ERR_ABRT) {
 183506c:	e0bffd07 	ldb	r2,-12(fp)
 1835070:	10bffd98 	cmpnei	r2,r2,-10
 1835074:	10003726 	beq	r2,zero,1835154 <tcp_input+0xd00>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 1835078:	e0bffd07 	ldb	r2,-12(fp)
 183507c:	10000326 	beq	r2,zero,183508c <tcp_input+0xc38>
            pcb->refused_data = recv_data;
 1835080:	d0e81c17 	ldw	r3,-24464(gp)
 1835084:	e0bff817 	ldw	r2,-32(fp)
 1835088:	10c01f15 	stw	r3,124(r2)
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 183508c:	d0a81b03 	ldbu	r2,-24468(gp)
 1835090:	10803fcc 	andi	r2,r2,255
 1835094:	1080080c 	andi	r2,r2,32
 1835098:	10002826 	beq	r2,zero,183513c <tcp_input+0xce8>
          if (pcb->refused_data != NULL) {
 183509c:	e0bff817 	ldw	r2,-32(fp)
 18350a0:	10801f17 	ldw	r2,124(r2)
 18350a4:	10000826 	beq	r2,zero,18350c8 <tcp_input+0xc74>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 18350a8:	e0bff817 	ldw	r2,-32(fp)
 18350ac:	10801f17 	ldw	r2,124(r2)
 18350b0:	e0fff817 	ldw	r3,-32(fp)
 18350b4:	18c01f17 	ldw	r3,124(r3)
 18350b8:	18c00343 	ldbu	r3,13(r3)
 18350bc:	18c00814 	ori	r3,r3,32
 18350c0:	10c00345 	stb	r3,13(r2)
 18350c4:	00001d06 	br	183513c <tcp_input+0xce8>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
 18350c8:	e0bff817 	ldw	r2,-32(fp)
 18350cc:	10800c0b 	ldhu	r2,48(r2)
 18350d0:	10bfffcc 	andi	r2,r2,65535
 18350d4:	10880020 	cmpeqi	r2,r2,8192
 18350d8:	1000061e 	bne	r2,zero,18350f4 <tcp_input+0xca0>
              pcb->rcv_wnd++;
 18350dc:	e0bff817 	ldw	r2,-32(fp)
 18350e0:	10800c0b 	ldhu	r2,48(r2)
 18350e4:	10800044 	addi	r2,r2,1
 18350e8:	1007883a 	mov	r3,r2
 18350ec:	e0bff817 	ldw	r2,-32(fp)
 18350f0:	10c00c0d 	sth	r3,48(r2)
            }
            TCP_EVENT_CLOSED(pcb, err);
 18350f4:	e0bff817 	ldw	r2,-32(fp)
 18350f8:	10802117 	ldw	r2,132(r2)
 18350fc:	10000b26 	beq	r2,zero,183512c <tcp_input+0xcd8>
 1835100:	e0bff817 	ldw	r2,-32(fp)
 1835104:	10802117 	ldw	r2,132(r2)
 1835108:	e0fff817 	ldw	r3,-32(fp)
 183510c:	18c00417 	ldw	r3,16(r3)
 1835110:	000f883a 	mov	r7,zero
 1835114:	000d883a 	mov	r6,zero
 1835118:	e17ff817 	ldw	r5,-32(fp)
 183511c:	1809883a 	mov	r4,r3
 1835120:	103ee83a 	callr	r2
 1835124:	e0bffd05 	stb	r2,-12(fp)
 1835128:	00000106 	br	1835130 <tcp_input+0xcdc>
 183512c:	e03ffd05 	stb	zero,-12(fp)
            if (err == ERR_ABRT) {
 1835130:	e0bffd07 	ldb	r2,-12(fp)
 1835134:	10bffd98 	cmpnei	r2,r2,-10
 1835138:	10000826 	beq	r2,zero,183515c <tcp_input+0xd08>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 183513c:	d0281d15 	stw	zero,-24460(gp)
        /* Try to send something out. */
        tcp_output(pcb);
 1835140:	e13ff817 	ldw	r4,-32(fp)
 1835144:	181ee2c0 	call	181ee2c <tcp_output>
 1835148:	00000506 	br	1835160 <tcp_input+0xd0c>
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
          TCP_EVENT_SENT(pcb, pcb->acked, err);
          if (err == ERR_ABRT) {
            goto aborted;
 183514c:	0001883a 	nop
 1835150:	00000306 	br	1835160 <tcp_input+0xd0c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
          if (err == ERR_ABRT) {
            goto aborted;
 1835154:	0001883a 	nop
 1835158:	00000106 	br	1835160 <tcp_input+0xd0c>
            if (pcb->rcv_wnd != TCP_WND) {
              pcb->rcv_wnd++;
            }
            TCP_EVENT_CLOSED(pcb, err);
            if (err == ERR_ABRT) {
              goto aborted;
 183515c:	0001883a 	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 1835160:	d0281d15 	stw	zero,-24460(gp)
    recv_data = NULL;
 1835164:	d0281c15 	stw	zero,-24464(gp)

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 1835168:	00806134 	movhi	r2,388
 183516c:	109e4904 	addi	r2,r2,31012
 1835170:	10800117 	ldw	r2,4(r2)
 1835174:	10004e26 	beq	r2,zero,18352b0 <tcp_input+0xe5c>
    {
      pbuf_free(inseg.p);
 1835178:	00806134 	movhi	r2,388
 183517c:	109e4904 	addi	r2,r2,31012
 1835180:	10800117 	ldw	r2,4(r2)
 1835184:	1009883a 	mov	r4,r2
 1835188:	181a22c0 	call	181a22c <pbuf_free>
      inseg.p = NULL;
 183518c:	00806134 	movhi	r2,388
 1835190:	109e4904 	addi	r2,r2,31012
 1835194:	10000115 	stw	zero,4(r2)
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 1835198:	00004506 	br	18352b0 <tcp_input+0xe5c>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 183519c:	d0a81617 	ldw	r2,-24488(gp)
 18351a0:	10c00303 	ldbu	r3,12(r2)
 18351a4:	10800343 	ldbu	r2,13(r2)
 18351a8:	1004923a 	slli	r2,r2,8
 18351ac:	10c4b03a 	or	r2,r2,r3
 18351b0:	10bfffcc 	andi	r2,r2,65535
 18351b4:	1004d23a 	srli	r2,r2,8
 18351b8:	10ffffcc 	andi	r3,r2,65535
 18351bc:	d0a81617 	ldw	r2,-24488(gp)
 18351c0:	11000303 	ldbu	r4,12(r2)
 18351c4:	10800343 	ldbu	r2,13(r2)
 18351c8:	1004923a 	slli	r2,r2,8
 18351cc:	1104b03a 	or	r2,r2,r4
 18351d0:	10bfffcc 	andi	r2,r2,65535
 18351d4:	1004923a 	slli	r2,r2,8
 18351d8:	10bfffcc 	andi	r2,r2,65535
 18351dc:	1884b03a 	or	r2,r3,r2
 18351e0:	1080010c 	andi	r2,r2,4
 18351e4:	1000251e 	bne	r2,zero,183527c <tcp_input+0xe28>
      TCP_STATS_INC(tcp.proterr);
 18351e8:	00806134 	movhi	r2,388
 18351ec:	109e7504 	addi	r2,r2,31188
 18351f0:	10805017 	ldw	r2,320(r2)
 18351f4:	10c00044 	addi	r3,r2,1
 18351f8:	00806134 	movhi	r2,388
 18351fc:	109e7504 	addi	r2,r2,31188
 1835200:	10c05015 	stw	r3,320(r2)
      TCP_STATS_INC(tcp.drop);
 1835204:	00806134 	movhi	r2,388
 1835208:	109e7504 	addi	r2,r2,31188
 183520c:	10804b17 	ldw	r2,300(r2)
 1835210:	10c00044 	addi	r3,r2,1
 1835214:	00806134 	movhi	r2,388
 1835218:	109e7504 	addi	r2,r2,31188
 183521c:	10c04b15 	stw	r3,300(r2)
      tcp_rst(ackno, seqno + tcplen,
 1835220:	d2281917 	ldw	r8,-24476(gp)
 1835224:	d0a81a8b 	ldhu	r2,-24470(gp)
 1835228:	10ffffcc 	andi	r3,r2,65535
 183522c:	d0a81817 	ldw	r2,-24480(gp)
 1835230:	188b883a 	add	r5,r3,r2
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
 1835234:	d0a81617 	ldw	r2,-24488(gp)
 1835238:	10c00083 	ldbu	r3,2(r2)
 183523c:	108000c3 	ldbu	r2,3(r2)
 1835240:	1004923a 	slli	r2,r2,8
 1835244:	10c4b03a 	or	r2,r2,r3
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
 1835248:	10ffffcc 	andi	r3,r2,65535
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
 183524c:	d0a81617 	ldw	r2,-24488(gp)
 1835250:	11000003 	ldbu	r4,0(r2)
 1835254:	10800043 	ldbu	r2,1(r2)
 1835258:	1004923a 	slli	r2,r2,8
 183525c:	1104b03a 	or	r2,r2,r4
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
 1835260:	10bfffcc 	andi	r2,r2,65535
 1835264:	d8800115 	stw	r2,4(sp)
 1835268:	d8c00015 	stw	r3,0(sp)
 183526c:	d1e80f04 	addi	r7,gp,-24516
 1835270:	d1a81104 	addi	r6,gp,-24508
 1835274:	4009883a 	mov	r4,r8
 1835278:	181fed80 	call	181fed8 <tcp_rst>
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
 183527c:	e13ffe17 	ldw	r4,-8(fp)
 1835280:	181a22c0 	call	181a22c <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 1835284:	00000a06 	br	18352b0 <tcp_input+0xe5c>
dropped:
  TCP_STATS_INC(tcp.drop);
 1835288:	00806134 	movhi	r2,388
 183528c:	109e7504 	addi	r2,r2,31188
 1835290:	10804b17 	ldw	r2,300(r2)
 1835294:	10c00044 	addi	r3,r2,1
 1835298:	00806134 	movhi	r2,388
 183529c:	109e7504 	addi	r2,r2,31188
 18352a0:	10c04b15 	stw	r3,300(r2)
  snmp_inc_tcpinerrs();
  pbuf_free(p);
 18352a4:	e13ffe17 	ldw	r4,-8(fp)
 18352a8:	181a22c0 	call	181a22c <pbuf_free>
 18352ac:	00000106 	br	18352b4 <tcp_input+0xe60>
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 18352b0:	0001883a 	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
}
 18352b4:	e037883a 	mov	sp,fp
 18352b8:	dfc00117 	ldw	ra,4(sp)
 18352bc:	df000017 	ldw	fp,0(sp)
 18352c0:	dec00204 	addi	sp,sp,8
 18352c4:	f800283a 	ret

018352c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 18352c8:	defff904 	addi	sp,sp,-28
 18352cc:	dfc00615 	stw	ra,24(sp)
 18352d0:	df000515 	stw	fp,20(sp)
 18352d4:	df000504 	addi	fp,sp,20
 18352d8:	e13fff15 	stw	r4,-4(fp)
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
 18352dc:	d0a81a03 	ldbu	r2,-24472(gp)
 18352e0:	10803fcc 	andi	r2,r2,255
 18352e4:	1080010c 	andi	r2,r2,4
 18352e8:	10000226 	beq	r2,zero,18352f4 <tcp_listen_input+0x2c>
    /* An incoming RST should be ignored. Return. */
    return ERR_OK;
 18352ec:	0005883a 	mov	r2,zero
 18352f0:	0000aa06 	br	183559c <tcp_listen_input+0x2d4>
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 18352f4:	d0a81a03 	ldbu	r2,-24472(gp)
 18352f8:	10803fcc 	andi	r2,r2,255
 18352fc:	1080040c 	andi	r2,r2,16
 1835300:	10001826 	beq	r2,zero,1835364 <tcp_listen_input+0x9c>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 1835304:	d2281917 	ldw	r8,-24476(gp)
 1835308:	d0a81a8b 	ldhu	r2,-24470(gp)
 183530c:	10ffffcc 	andi	r3,r2,65535
 1835310:	d0a81817 	ldw	r2,-24480(gp)
 1835314:	188b883a 	add	r5,r3,r2
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 1835318:	d0a81617 	ldw	r2,-24488(gp)
 183531c:	10c00083 	ldbu	r3,2(r2)
 1835320:	108000c3 	ldbu	r2,3(r2)
 1835324:	1004923a 	slli	r2,r2,8
 1835328:	10c4b03a 	or	r2,r2,r3
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 183532c:	10ffffcc 	andi	r3,r2,65535
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 1835330:	d0a81617 	ldw	r2,-24488(gp)
 1835334:	11000003 	ldbu	r4,0(r2)
 1835338:	10800043 	ldbu	r2,1(r2)
 183533c:	1004923a 	slli	r2,r2,8
 1835340:	1104b03a 	or	r2,r2,r4
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 1835344:	10bfffcc 	andi	r2,r2,65535
 1835348:	d8800115 	stw	r2,4(sp)
 183534c:	d8c00015 	stw	r3,0(sp)
 1835350:	d1e80f04 	addi	r7,gp,-24516
 1835354:	d1a81104 	addi	r6,gp,-24508
 1835358:	4009883a 	mov	r4,r8
 183535c:	181fed80 	call	181fed8 <tcp_rst>
 1835360:	00008d06 	br	1835598 <tcp_listen_input+0x2d0>
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
 1835364:	d0a81a03 	ldbu	r2,-24472(gp)
 1835368:	10803fcc 	andi	r2,r2,255
 183536c:	1080008c 	andi	r2,r2,2
 1835370:	10008926 	beq	r2,zero,1835598 <tcp_listen_input+0x2d0>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
#if TCP_LISTEN_BACKLOG
    if (pcb->accepts_pending >= pcb->backlog) {
 1835374:	e0bfff17 	ldw	r2,-4(fp)
 1835378:	10c00843 	ldbu	r3,33(r2)
 183537c:	e0bfff17 	ldw	r2,-4(fp)
 1835380:	10800803 	ldbu	r2,32(r2)
 1835384:	18c03fcc 	andi	r3,r3,255
 1835388:	10803fcc 	andi	r2,r2,255
 183538c:	18800236 	bltu	r3,r2,1835398 <tcp_listen_input+0xd0>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
 1835390:	00bffd84 	movi	r2,-10
 1835394:	00008106 	br	183559c <tcp_listen_input+0x2d4>
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 1835398:	e0bfff17 	ldw	r2,-4(fp)
 183539c:	10800703 	ldbu	r2,28(r2)
 18353a0:	10803fcc 	andi	r2,r2,255
 18353a4:	1009883a 	mov	r4,r2
 18353a8:	181cdc80 	call	181cdc8 <tcp_alloc>
 18353ac:	e0bffd15 	stw	r2,-12(fp)
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 18353b0:	e0bffd17 	ldw	r2,-12(fp)
 18353b4:	1000091e 	bne	r2,zero,18353dc <tcp_listen_input+0x114>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
 18353b8:	00806134 	movhi	r2,388
 18353bc:	109e7504 	addi	r2,r2,31188
 18353c0:	10804e17 	ldw	r2,312(r2)
 18353c4:	10c00044 	addi	r3,r2,1
 18353c8:	00806134 	movhi	r2,388
 18353cc:	109e7504 	addi	r2,r2,31188
 18353d0:	10c04e15 	stw	r3,312(r2)
      return ERR_MEM;
 18353d4:	00bfffc4 	movi	r2,-1
 18353d8:	00007006 	br	183559c <tcp_listen_input+0x2d4>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
 18353dc:	e0bfff17 	ldw	r2,-4(fp)
 18353e0:	10800843 	ldbu	r2,33(r2)
 18353e4:	10800044 	addi	r2,r2,1
 18353e8:	1007883a 	mov	r3,r2
 18353ec:	e0bfff17 	ldw	r2,-4(fp)
 18353f0:	10c00845 	stb	r3,33(r2)
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
 18353f4:	d0e81117 	ldw	r3,-24508(gp)
 18353f8:	e0bffd17 	ldw	r2,-12(fp)
 18353fc:	10c00015 	stw	r3,0(r2)
    npcb->local_port = pcb->local_port;
 1835400:	e0bfff17 	ldw	r2,-4(fp)
 1835404:	10c0078b 	ldhu	r3,30(r2)
 1835408:	e0bffd17 	ldw	r2,-12(fp)
 183540c:	10c0078d 	sth	r3,30(r2)
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 1835410:	d0e80f17 	ldw	r3,-24516(gp)
 1835414:	e0bffd17 	ldw	r2,-12(fp)
 1835418:	10c00115 	stw	r3,4(r2)
    npcb->remote_port = tcphdr->src;
 183541c:	d0a81617 	ldw	r2,-24488(gp)
 1835420:	10c00003 	ldbu	r3,0(r2)
 1835424:	10800043 	ldbu	r2,1(r2)
 1835428:	1004923a 	slli	r2,r2,8
 183542c:	10c4b03a 	or	r2,r2,r3
 1835430:	1007883a 	mov	r3,r2
 1835434:	e0bffd17 	ldw	r2,-12(fp)
 1835438:	10c0080d 	sth	r3,32(r2)
    npcb->state = SYN_RCVD;
 183543c:	e0bffd17 	ldw	r2,-12(fp)
 1835440:	00c000c4 	movi	r3,3
 1835444:	10c00615 	stw	r3,24(r2)
    npcb->rcv_nxt = seqno + 1;
 1835448:	d0a81817 	ldw	r2,-24480(gp)
 183544c:	10c00044 	addi	r3,r2,1
 1835450:	e0bffd17 	ldw	r2,-12(fp)
 1835454:	10c00b15 	stw	r3,44(r2)
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 1835458:	e0bffd17 	ldw	r2,-12(fp)
 183545c:	10c00b17 	ldw	r3,44(r2)
 1835460:	e0bffd17 	ldw	r2,-12(fp)
 1835464:	10c00d15 	stw	r3,52(r2)
    npcb->snd_wnd = tcphdr->wnd;
 1835468:	d0a81617 	ldw	r2,-24488(gp)
 183546c:	10c00383 	ldbu	r3,14(r2)
 1835470:	108003c3 	ldbu	r2,15(r2)
 1835474:	1004923a 	slli	r2,r2,8
 1835478:	10c4b03a 	or	r2,r2,r3
 183547c:	1007883a 	mov	r3,r2
 1835480:	e0bffd17 	ldw	r2,-12(fp)
 1835484:	10c0190d 	sth	r3,100(r2)
    npcb->snd_wnd_max = tcphdr->wnd;
 1835488:	d0a81617 	ldw	r2,-24488(gp)
 183548c:	10c00383 	ldbu	r3,14(r2)
 1835490:	108003c3 	ldbu	r2,15(r2)
 1835494:	1004923a 	slli	r2,r2,8
 1835498:	10c4b03a 	or	r2,r2,r3
 183549c:	1007883a 	mov	r3,r2
 18354a0:	e0bffd17 	ldw	r2,-12(fp)
 18354a4:	10c0198d 	sth	r3,102(r2)
    npcb->ssthresh = npcb->snd_wnd;
 18354a8:	e0bffd17 	ldw	r2,-12(fp)
 18354ac:	10c0190b 	ldhu	r3,100(r2)
 18354b0:	e0bffd17 	ldw	r2,-12(fp)
 18354b4:	10c0148d 	sth	r3,82(r2)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 18354b8:	d0a81817 	ldw	r2,-24480(gp)
 18354bc:	10ffffc4 	addi	r3,r2,-1
 18354c0:	e0bffd17 	ldw	r2,-12(fp)
 18354c4:	10c01615 	stw	r3,88(r2)
    npcb->callback_arg = pcb->callback_arg;
 18354c8:	e0bfff17 	ldw	r2,-4(fp)
 18354cc:	10c00417 	ldw	r3,16(r2)
 18354d0:	e0bffd17 	ldw	r2,-12(fp)
 18354d4:	10c00415 	stw	r3,16(r2)
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 18354d8:	e0bfff17 	ldw	r2,-4(fp)
 18354dc:	10c00517 	ldw	r3,20(r2)
 18354e0:	e0bffd17 	ldw	r2,-12(fp)
 18354e4:	10c00515 	stw	r3,20(r2)
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 18354e8:	e0bfff17 	ldw	r2,-4(fp)
 18354ec:	10c00203 	ldbu	r3,8(r2)
 18354f0:	00bfe304 	movi	r2,-116
 18354f4:	1884703a 	and	r2,r3,r2
 18354f8:	1007883a 	mov	r3,r2
 18354fc:	e0bffd17 	ldw	r2,-12(fp)
 1835500:	10c00205 	stb	r3,8(r2)
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 1835504:	d0e7f317 	ldw	r3,-24628(gp)
 1835508:	e0bffd17 	ldw	r2,-12(fp)
 183550c:	10c00315 	stw	r3,12(r2)
 1835510:	e0bffd17 	ldw	r2,-12(fp)
 1835514:	d0a7f315 	stw	r2,-24628(gp)
 1835518:	1820c000 	call	1820c00 <tcp_timer_needed>
 183551c:	00800044 	movi	r2,1
 1835520:	d0a7f285 	stb	r2,-24630(gp)

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 1835524:	e13ffd17 	ldw	r4,-12(fp)
 1835528:	18384340 	call	1838434 <tcp_parseopt>
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->local_ip), &(npcb->remote_ip));
 183552c:	e0bffd17 	ldw	r2,-12(fp)
 1835530:	10800e8b 	ldhu	r2,58(r2)
 1835534:	10ffffcc 	andi	r3,r2,65535
 1835538:	e13ffd17 	ldw	r4,-12(fp)
 183553c:	e0bffd17 	ldw	r2,-12(fp)
 1835540:	10800104 	addi	r2,r2,4
 1835544:	100d883a 	mov	r6,r2
 1835548:	200b883a 	mov	r5,r4
 183554c:	1809883a 	mov	r4,r3
 1835550:	181d3d40 	call	181d3d4 <tcp_eff_send_mss>
 1835554:	1007883a 	mov	r3,r2
 1835558:	e0bffd17 	ldw	r2,-12(fp)
 183555c:	10c00e8d 	sth	r3,58(r2)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 1835560:	01400484 	movi	r5,18
 1835564:	e13ffd17 	ldw	r4,-12(fp)
 1835568:	181e9a80 	call	181e9a8 <tcp_enqueue_flags>
 183556c:	e0bffe05 	stb	r2,-8(fp)
    if (rc != ERR_OK) {
 1835570:	e0bffe07 	ldb	r2,-8(fp)
 1835574:	10000526 	beq	r2,zero,183558c <tcp_listen_input+0x2c4>
      tcp_abandon(npcb, 0);
 1835578:	000b883a 	mov	r5,zero
 183557c:	e13ffd17 	ldw	r4,-12(fp)
 1835580:	181b5000 	call	181b500 <tcp_abandon>
      return rc;
 1835584:	e0bffe03 	ldbu	r2,-8(fp)
 1835588:	00000406 	br	183559c <tcp_listen_input+0x2d4>
    }
    return tcp_output(npcb);
 183558c:	e13ffd17 	ldw	r4,-12(fp)
 1835590:	181ee2c0 	call	181ee2c <tcp_output>
 1835594:	00000106 	br	183559c <tcp_listen_input+0x2d4>
  }
  return ERR_OK;
 1835598:	0005883a 	mov	r2,zero
}
 183559c:	e037883a 	mov	sp,fp
 18355a0:	dfc00117 	ldw	ra,4(sp)
 18355a4:	df000017 	ldw	fp,0(sp)
 18355a8:	dec00204 	addi	sp,sp,8
 18355ac:	f800283a 	ret

018355b0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
 18355b0:	defffb04 	addi	sp,sp,-20
 18355b4:	dfc00415 	stw	ra,16(sp)
 18355b8:	df000315 	stw	fp,12(sp)
 18355bc:	df000304 	addi	fp,sp,12
 18355c0:	e13fff15 	stw	r4,-4(fp)
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
 18355c4:	d0a81a03 	ldbu	r2,-24472(gp)
 18355c8:	10803fcc 	andi	r2,r2,255
 18355cc:	1080010c 	andi	r2,r2,4
 18355d0:	10000226 	beq	r2,zero,18355dc <tcp_timewait_input+0x2c>
    return ERR_OK;
 18355d4:	0005883a 	mov	r2,zero
 18355d8:	00003f06 	br	18356d8 <tcp_timewait_input+0x128>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 18355dc:	d0a81a03 	ldbu	r2,-24472(gp)
 18355e0:	10803fcc 	andi	r2,r2,255
 18355e4:	1080008c 	andi	r2,r2,2
 18355e8:	10002726 	beq	r2,zero,1835688 <tcp_timewait_input+0xd8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
 18355ec:	d0e81817 	ldw	r3,-24480(gp)
 18355f0:	e0bfff17 	ldw	r2,-4(fp)
 18355f4:	10800b17 	ldw	r2,44(r2)
 18355f8:	1885c83a 	sub	r2,r3,r2
 18355fc:	10002916 	blt	r2,zero,18356a4 <tcp_timewait_input+0xf4>
 1835600:	d0e81817 	ldw	r3,-24480(gp)
 1835604:	e0bfff17 	ldw	r2,-4(fp)
 1835608:	11000b17 	ldw	r4,44(r2)
 183560c:	e0bfff17 	ldw	r2,-4(fp)
 1835610:	10800c0b 	ldhu	r2,48(r2)
 1835614:	10bfffcc 	andi	r2,r2,65535
 1835618:	2085883a 	add	r2,r4,r2
 183561c:	1885c83a 	sub	r2,r3,r2
 1835620:	00802016 	blt	zero,r2,18356a4 <tcp_timewait_input+0xf4>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835624:	d2281917 	ldw	r8,-24476(gp)
 1835628:	d0a81a8b 	ldhu	r2,-24470(gp)
 183562c:	10ffffcc 	andi	r3,r2,65535
 1835630:	d0a81817 	ldw	r2,-24480(gp)
 1835634:	188b883a 	add	r5,r3,r2
        tcphdr->dest, tcphdr->src);
 1835638:	d0a81617 	ldw	r2,-24488(gp)
 183563c:	10c00083 	ldbu	r3,2(r2)
 1835640:	108000c3 	ldbu	r2,3(r2)
 1835644:	1004923a 	slli	r2,r2,8
 1835648:	10c4b03a 	or	r2,r2,r3
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 183564c:	10ffffcc 	andi	r3,r2,65535
        tcphdr->dest, tcphdr->src);
 1835650:	d0a81617 	ldw	r2,-24488(gp)
 1835654:	11000003 	ldbu	r4,0(r2)
 1835658:	10800043 	ldbu	r2,1(r2)
 183565c:	1004923a 	slli	r2,r2,8
 1835660:	1104b03a 	or	r2,r2,r4
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835664:	10bfffcc 	andi	r2,r2,65535
 1835668:	d8800115 	stw	r2,4(sp)
 183566c:	d8c00015 	stw	r3,0(sp)
 1835670:	d1e80f04 	addi	r7,gp,-24516
 1835674:	d1a81104 	addi	r6,gp,-24508
 1835678:	4009883a 	mov	r4,r8
 183567c:	181fed80 	call	181fed8 <tcp_rst>
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
 1835680:	0005883a 	mov	r2,zero
 1835684:	00001406 	br	18356d8 <tcp_timewait_input+0x128>
    }
  } else if (flags & TCP_FIN) {
 1835688:	d0a81a03 	ldbu	r2,-24472(gp)
 183568c:	10803fcc 	andi	r2,r2,255
 1835690:	1080004c 	andi	r2,r2,1
 1835694:	10000326 	beq	r2,zero,18356a4 <tcp_timewait_input+0xf4>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 1835698:	d0e7f417 	ldw	r3,-24624(gp)
 183569c:	e0bfff17 	ldw	r2,-4(fp)
 18356a0:	10c00a15 	stw	r3,40(r2)
  }

  if ((tcplen > 0))  {
 18356a4:	d0a81a8b 	ldhu	r2,-24470(gp)
 18356a8:	10bfffcc 	andi	r2,r2,65535
 18356ac:	10000926 	beq	r2,zero,18356d4 <tcp_timewait_input+0x124>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 18356b0:	e0bfff17 	ldw	r2,-4(fp)
 18356b4:	10800883 	ldbu	r2,34(r2)
 18356b8:	10800094 	ori	r2,r2,2
 18356bc:	1007883a 	mov	r3,r2
 18356c0:	e0bfff17 	ldw	r2,-4(fp)
 18356c4:	10c00885 	stb	r3,34(r2)
    return tcp_output(pcb);
 18356c8:	e13fff17 	ldw	r4,-4(fp)
 18356cc:	181ee2c0 	call	181ee2c <tcp_output>
 18356d0:	00000106 	br	18356d8 <tcp_timewait_input+0x128>
  }
  return ERR_OK;
 18356d4:	0005883a 	mov	r2,zero
}
 18356d8:	e037883a 	mov	sp,fp
 18356dc:	dfc00117 	ldw	ra,4(sp)
 18356e0:	df000017 	ldw	fp,0(sp)
 18356e4:	dec00204 	addi	sp,sp,8
 18356e8:	f800283a 	ret

018356ec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 18356ec:	defff804 	addi	sp,sp,-32
 18356f0:	dfc00715 	stw	ra,28(sp)
 18356f4:	df000615 	stw	fp,24(sp)
 18356f8:	df000604 	addi	fp,sp,24
 18356fc:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 1835700:	e03ffc05 	stb	zero,-16(fp)
  err_t err;

  err = ERR_OK;
 1835704:	e03ffc45 	stb	zero,-15(fp)

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 1835708:	d0a81a03 	ldbu	r2,-24472(gp)
 183570c:	10803fcc 	andi	r2,r2,255
 1835710:	1080010c 	andi	r2,r2,4
 1835714:	10002b26 	beq	r2,zero,18357c4 <tcp_process+0xd8>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 1835718:	e0bfff17 	ldw	r2,-4(fp)
 183571c:	10800617 	ldw	r2,24(r2)
 1835720:	10800098 	cmpnei	r2,r2,2
 1835724:	1000071e 	bne	r2,zero,1835744 <tcp_process+0x58>
      if (ackno == pcb->snd_nxt) {
 1835728:	e0bfff17 	ldw	r2,-4(fp)
 183572c:	10c01517 	ldw	r3,84(r2)
 1835730:	d0a81917 	ldw	r2,-24476(gp)
 1835734:	1880131e 	bne	r3,r2,1835784 <tcp_process+0x98>
        acceptable = 1;
 1835738:	00800044 	movi	r2,1
 183573c:	e0bffc05 	stb	r2,-16(fp)
 1835740:	00001006 	br	1835784 <tcp_process+0x98>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 1835744:	d0e81817 	ldw	r3,-24480(gp)
 1835748:	e0bfff17 	ldw	r2,-4(fp)
 183574c:	10800b17 	ldw	r2,44(r2)
 1835750:	1885c83a 	sub	r2,r3,r2
 1835754:	10000b16 	blt	r2,zero,1835784 <tcp_process+0x98>
 1835758:	d0e81817 	ldw	r3,-24480(gp)
 183575c:	e0bfff17 	ldw	r2,-4(fp)
 1835760:	11000b17 	ldw	r4,44(r2)
 1835764:	e0bfff17 	ldw	r2,-4(fp)
 1835768:	10800c0b 	ldhu	r2,48(r2)
 183576c:	10bfffcc 	andi	r2,r2,65535
 1835770:	2085883a 	add	r2,r4,r2
 1835774:	1885c83a 	sub	r2,r3,r2
 1835778:	00800216 	blt	zero,r2,1835784 <tcp_process+0x98>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
 183577c:	00800044 	movi	r2,1
 1835780:	e0bffc05 	stb	r2,-16(fp)
      }
    }

    if (acceptable) {
 1835784:	e0bffc03 	ldbu	r2,-16(fp)
 1835788:	10000c26 	beq	r2,zero,18357bc <tcp_process+0xd0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 183578c:	d0a81b03 	ldbu	r2,-24468(gp)
 1835790:	10800214 	ori	r2,r2,8
 1835794:	d0a81b05 	stb	r2,-24468(gp)
      pcb->flags &= ~TF_ACK_DELAY;
 1835798:	e0bfff17 	ldw	r2,-4(fp)
 183579c:	10c00883 	ldbu	r3,34(r2)
 18357a0:	00bfff84 	movi	r2,-2
 18357a4:	1884703a 	and	r2,r3,r2
 18357a8:	1007883a 	mov	r3,r2
 18357ac:	e0bfff17 	ldw	r2,-4(fp)
 18357b0:	10c00885 	stb	r3,34(r2)
      return ERR_RST;
 18357b4:	00bffd44 	movi	r2,-11
 18357b8:	00027406 	br	183618c <tcp_process+0xaa0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 18357bc:	0005883a 	mov	r2,zero
 18357c0:	00027206 	br	183618c <tcp_process+0xaa0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
 18357c4:	d0a81a03 	ldbu	r2,-24472(gp)
 18357c8:	10803fcc 	andi	r2,r2,255
 18357cc:	1080008c 	andi	r2,r2,2
 18357d0:	10001026 	beq	r2,zero,1835814 <tcp_process+0x128>
 18357d4:	e0bfff17 	ldw	r2,-4(fp)
 18357d8:	10800617 	ldw	r2,24(r2)
 18357dc:	108000a0 	cmpeqi	r2,r2,2
 18357e0:	10000c1e 	bne	r2,zero,1835814 <tcp_process+0x128>
 18357e4:	e0bfff17 	ldw	r2,-4(fp)
 18357e8:	10800617 	ldw	r2,24(r2)
 18357ec:	108000e0 	cmpeqi	r2,r2,3
 18357f0:	1000081e 	bne	r2,zero,1835814 <tcp_process+0x128>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 18357f4:	e0bfff17 	ldw	r2,-4(fp)
 18357f8:	10800883 	ldbu	r2,34(r2)
 18357fc:	10800094 	ori	r2,r2,2
 1835800:	1007883a 	mov	r3,r2
 1835804:	e0bfff17 	ldw	r2,-4(fp)
 1835808:	10c00885 	stb	r3,34(r2)
    return ERR_OK;
 183580c:	0005883a 	mov	r2,zero
 1835810:	00025e06 	br	183618c <tcp_process+0xaa0>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 1835814:	e0bfff17 	ldw	r2,-4(fp)
 1835818:	10800883 	ldbu	r2,34(r2)
 183581c:	10803fcc 	andi	r2,r2,255
 1835820:	1080040c 	andi	r2,r2,16
 1835824:	1000031e 	bne	r2,zero,1835834 <tcp_process+0x148>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 1835828:	d0e7f417 	ldw	r3,-24624(gp)
 183582c:	e0bfff17 	ldw	r2,-4(fp)
 1835830:	10c00a15 	stw	r3,40(r2)
  }
  pcb->keep_cnt_sent = 0;
 1835834:	e0bfff17 	ldw	r2,-4(fp)
 1835838:	10002885 	stb	zero,162(r2)

  tcp_parseopt(pcb);
 183583c:	e13fff17 	ldw	r4,-4(fp)
 1835840:	18384340 	call	1838434 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 1835844:	e0bfff17 	ldw	r2,-4(fp)
 1835848:	10800617 	ldw	r2,24(r2)
 183584c:	10c002a8 	cmpgeui	r3,r2,10
 1835850:	18023e1e 	bne	r3,zero,183614c <tcp_process+0xa60>
 1835854:	100690ba 	slli	r3,r2,2
 1835858:	008060f4 	movhi	r2,387
 183585c:	10961b04 	addi	r2,r2,22636
 1835860:	1885883a 	add	r2,r3,r2
 1835864:	10800017 	ldw	r2,0(r2)
 1835868:	1000683a 	jmp	r2
 183586c:	0183614c 	andi	r6,zero,3461
 1835870:	0183614c 	andi	r6,zero,3461
 1835874:	01835894 	movui	r6,3426
 1835878:	01835c14 	movui	r6,3440
 183587c:	01835df4 	movhi	r6,3447
 1835880:	01835e34 	movhi	r6,3448
 1835884:	01835f7c 	xorhi	r6,zero,3453
 1835888:	01835df4 	movhi	r6,3447
 183588c:	0183604c 	andi	r6,zero,3457
 1835890:	01836114 	movui	r6,3460
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 1835894:	d0a81a03 	ldbu	r2,-24472(gp)
 1835898:	10803fcc 	andi	r2,r2,255
 183589c:	1080040c 	andi	r2,r2,16
 18358a0:	1000c026 	beq	r2,zero,1835ba4 <tcp_process+0x4b8>
 18358a4:	d0a81a03 	ldbu	r2,-24472(gp)
 18358a8:	10803fcc 	andi	r2,r2,255
 18358ac:	1080008c 	andi	r2,r2,2
 18358b0:	1000bc26 	beq	r2,zero,1835ba4 <tcp_process+0x4b8>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 18358b4:	e0bfff17 	ldw	r2,-4(fp)
 18358b8:	10801d17 	ldw	r2,116(r2)
 18358bc:	10800417 	ldw	r2,16(r2)
 18358c0:	10c00103 	ldbu	r3,4(r2)
 18358c4:	11000143 	ldbu	r4,5(r2)
 18358c8:	2008923a 	slli	r4,r4,8
 18358cc:	20c6b03a 	or	r3,r4,r3
 18358d0:	11000183 	ldbu	r4,6(r2)
 18358d4:	2008943a 	slli	r4,r4,16
 18358d8:	20c6b03a 	or	r3,r4,r3
 18358dc:	108001c3 	ldbu	r2,7(r2)
 18358e0:	1004963a 	slli	r2,r2,24
 18358e4:	10c4b03a 	or	r2,r2,r3
 18358e8:	1006d63a 	srli	r3,r2,24
 18358ec:	e0bfff17 	ldw	r2,-4(fp)
 18358f0:	10801d17 	ldw	r2,116(r2)
 18358f4:	10800417 	ldw	r2,16(r2)
 18358f8:	11000103 	ldbu	r4,4(r2)
 18358fc:	11400143 	ldbu	r5,5(r2)
 1835900:	280a923a 	slli	r5,r5,8
 1835904:	2908b03a 	or	r4,r5,r4
 1835908:	11400183 	ldbu	r5,6(r2)
 183590c:	280a943a 	slli	r5,r5,16
 1835910:	2908b03a 	or	r4,r5,r4
 1835914:	108001c3 	ldbu	r2,7(r2)
 1835918:	1004963a 	slli	r2,r2,24
 183591c:	1104b03a 	or	r2,r2,r4
 1835920:	1004d23a 	srli	r2,r2,8
 1835924:	10bfc00c 	andi	r2,r2,65280
 1835928:	1886b03a 	or	r3,r3,r2
 183592c:	e0bfff17 	ldw	r2,-4(fp)
 1835930:	10801d17 	ldw	r2,116(r2)
 1835934:	10800417 	ldw	r2,16(r2)
 1835938:	11000103 	ldbu	r4,4(r2)
 183593c:	11400143 	ldbu	r5,5(r2)
 1835940:	280a923a 	slli	r5,r5,8
 1835944:	2908b03a 	or	r4,r5,r4
 1835948:	11400183 	ldbu	r5,6(r2)
 183594c:	280a943a 	slli	r5,r5,16
 1835950:	2908b03a 	or	r4,r5,r4
 1835954:	108001c3 	ldbu	r2,7(r2)
 1835958:	1004963a 	slli	r2,r2,24
 183595c:	1104b03a 	or	r2,r2,r4
 1835960:	10bfc00c 	andi	r2,r2,65280
 1835964:	1004923a 	slli	r2,r2,8
 1835968:	1886b03a 	or	r3,r3,r2
 183596c:	e0bfff17 	ldw	r2,-4(fp)
 1835970:	10801d17 	ldw	r2,116(r2)
 1835974:	10800417 	ldw	r2,16(r2)
 1835978:	11000103 	ldbu	r4,4(r2)
 183597c:	11400143 	ldbu	r5,5(r2)
 1835980:	280a923a 	slli	r5,r5,8
 1835984:	2908b03a 	or	r4,r5,r4
 1835988:	11400183 	ldbu	r5,6(r2)
 183598c:	280a943a 	slli	r5,r5,16
 1835990:	2908b03a 	or	r4,r5,r4
 1835994:	108001c3 	ldbu	r2,7(r2)
 1835998:	1004963a 	slli	r2,r2,24
 183599c:	1104b03a 	or	r2,r2,r4
 18359a0:	1004963a 	slli	r2,r2,24
 18359a4:	1884b03a 	or	r2,r3,r2
 18359a8:	10c00044 	addi	r3,r2,1
 18359ac:	d0a81917 	ldw	r2,-24476(gp)
 18359b0:	18807c1e 	bne	r3,r2,1835ba4 <tcp_process+0x4b8>
      pcb->snd_buf++;
 18359b4:	e0bfff17 	ldw	r2,-4(fp)
 18359b8:	10801a8b 	ldhu	r2,106(r2)
 18359bc:	10800044 	addi	r2,r2,1
 18359c0:	1007883a 	mov	r3,r2
 18359c4:	e0bfff17 	ldw	r2,-4(fp)
 18359c8:	10c01a8d 	sth	r3,106(r2)
      pcb->rcv_nxt = seqno + 1;
 18359cc:	d0a81817 	ldw	r2,-24480(gp)
 18359d0:	10c00044 	addi	r3,r2,1
 18359d4:	e0bfff17 	ldw	r2,-4(fp)
 18359d8:	10c00b15 	stw	r3,44(r2)
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 18359dc:	e0bfff17 	ldw	r2,-4(fp)
 18359e0:	10c00b17 	ldw	r3,44(r2)
 18359e4:	e0bfff17 	ldw	r2,-4(fp)
 18359e8:	10c00d15 	stw	r3,52(r2)
      pcb->lastack = ackno;
 18359ec:	d0e81917 	ldw	r3,-24476(gp)
 18359f0:	e0bfff17 	ldw	r2,-4(fp)
 18359f4:	10c01315 	stw	r3,76(r2)
      pcb->snd_wnd = tcphdr->wnd;
 18359f8:	d0a81617 	ldw	r2,-24488(gp)
 18359fc:	10c00383 	ldbu	r3,14(r2)
 1835a00:	108003c3 	ldbu	r2,15(r2)
 1835a04:	1004923a 	slli	r2,r2,8
 1835a08:	10c4b03a 	or	r2,r2,r3
 1835a0c:	1007883a 	mov	r3,r2
 1835a10:	e0bfff17 	ldw	r2,-4(fp)
 1835a14:	10c0190d 	sth	r3,100(r2)
      pcb->snd_wnd_max = tcphdr->wnd;
 1835a18:	d0a81617 	ldw	r2,-24488(gp)
 1835a1c:	10c00383 	ldbu	r3,14(r2)
 1835a20:	108003c3 	ldbu	r2,15(r2)
 1835a24:	1004923a 	slli	r2,r2,8
 1835a28:	10c4b03a 	or	r2,r2,r3
 1835a2c:	1007883a 	mov	r3,r2
 1835a30:	e0bfff17 	ldw	r2,-4(fp)
 1835a34:	10c0198d 	sth	r3,102(r2)
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 1835a38:	d0a81817 	ldw	r2,-24480(gp)
 1835a3c:	10ffffc4 	addi	r3,r2,-1
 1835a40:	e0bfff17 	ldw	r2,-4(fp)
 1835a44:	10c01615 	stw	r3,88(r2)
      pcb->state = ESTABLISHED;
 1835a48:	e0bfff17 	ldw	r2,-4(fp)
 1835a4c:	00c00104 	movi	r3,4
 1835a50:	10c00615 	stw	r3,24(r2)

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->local_ip), &(pcb->remote_ip));
 1835a54:	e0bfff17 	ldw	r2,-4(fp)
 1835a58:	10800e8b 	ldhu	r2,58(r2)
 1835a5c:	10ffffcc 	andi	r3,r2,65535
 1835a60:	e13fff17 	ldw	r4,-4(fp)
 1835a64:	e0bfff17 	ldw	r2,-4(fp)
 1835a68:	10800104 	addi	r2,r2,4
 1835a6c:	100d883a 	mov	r6,r2
 1835a70:	200b883a 	mov	r5,r4
 1835a74:	1809883a 	mov	r4,r3
 1835a78:	181d3d40 	call	181d3d4 <tcp_eff_send_mss>
 1835a7c:	1007883a 	mov	r3,r2
 1835a80:	e0bfff17 	ldw	r2,-4(fp)
 1835a84:	10c00e8d 	sth	r3,58(r2)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
 1835a88:	e0bfff17 	ldw	r2,-4(fp)
 1835a8c:	10800e8b 	ldhu	r2,58(r2)
 1835a90:	108002a4 	muli	r2,r2,10
 1835a94:	1007883a 	mov	r3,r2
 1835a98:	e0bfff17 	ldw	r2,-4(fp)
 1835a9c:	10c0148d 	sth	r3,82(r2)

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 1835aa0:	e0bfff17 	ldw	r2,-4(fp)
 1835aa4:	1080140b 	ldhu	r2,80(r2)
 1835aa8:	10bfffcc 	andi	r2,r2,65535
 1835aac:	10800058 	cmpnei	r2,r2,1
 1835ab0:	1000041e 	bne	r2,zero,1835ac4 <tcp_process+0x3d8>
 1835ab4:	e0bfff17 	ldw	r2,-4(fp)
 1835ab8:	10800e8b 	ldhu	r2,58(r2)
 1835abc:	1085883a 	add	r2,r2,r2
 1835ac0:	00000206 	br	1835acc <tcp_process+0x3e0>
 1835ac4:	e0bfff17 	ldw	r2,-4(fp)
 1835ac8:	10800e8b 	ldhu	r2,58(r2)
 1835acc:	e0ffff17 	ldw	r3,-4(fp)
 1835ad0:	1880140d 	sth	r2,80(r3)
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 1835ad4:	e0bfff17 	ldw	r2,-4(fp)
 1835ad8:	10801b0b 	ldhu	r2,108(r2)
 1835adc:	10bfffc4 	addi	r2,r2,-1
 1835ae0:	1007883a 	mov	r3,r2
 1835ae4:	e0bfff17 	ldw	r2,-4(fp)
 1835ae8:	10c01b0d 	sth	r3,108(r2)
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 1835aec:	e0bfff17 	ldw	r2,-4(fp)
 1835af0:	10801d17 	ldw	r2,116(r2)
 1835af4:	e0bffd15 	stw	r2,-12(fp)
      pcb->unacked = rseg->next;
 1835af8:	e0bffd17 	ldw	r2,-12(fp)
 1835afc:	10c00017 	ldw	r3,0(r2)
 1835b00:	e0bfff17 	ldw	r2,-4(fp)
 1835b04:	10c01d15 	stw	r3,116(r2)
      tcp_seg_free(rseg);
 1835b08:	e13ffd17 	ldw	r4,-12(fp)
 1835b0c:	181cad80 	call	181cad8 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 1835b10:	e0bfff17 	ldw	r2,-4(fp)
 1835b14:	10801d17 	ldw	r2,116(r2)
 1835b18:	1000041e 	bne	r2,zero,1835b2c <tcp_process+0x440>
        pcb->rtime = -1;
 1835b1c:	e0bfff17 	ldw	r2,-4(fp)
 1835b20:	00ffffc4 	movi	r3,-1
 1835b24:	10c00e0d 	sth	r3,56(r2)
 1835b28:	00000406 	br	1835b3c <tcp_process+0x450>
      else {
        pcb->rtime = 0;
 1835b2c:	e0bfff17 	ldw	r2,-4(fp)
 1835b30:	10000e0d 	sth	zero,56(r2)
        pcb->nrtx = 0;
 1835b34:	e0bfff17 	ldw	r2,-4(fp)
 1835b38:	10001285 	stb	zero,74(r2)
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 1835b3c:	e0bfff17 	ldw	r2,-4(fp)
 1835b40:	10802217 	ldw	r2,136(r2)
 1835b44:	10000a26 	beq	r2,zero,1835b70 <tcp_process+0x484>
 1835b48:	e0bfff17 	ldw	r2,-4(fp)
 1835b4c:	10802217 	ldw	r2,136(r2)
 1835b50:	e0ffff17 	ldw	r3,-4(fp)
 1835b54:	18c00417 	ldw	r3,16(r3)
 1835b58:	000d883a 	mov	r6,zero
 1835b5c:	e17fff17 	ldw	r5,-4(fp)
 1835b60:	1809883a 	mov	r4,r3
 1835b64:	103ee83a 	callr	r2
 1835b68:	e0bffc45 	stb	r2,-15(fp)
 1835b6c:	00000106 	br	1835b74 <tcp_process+0x488>
 1835b70:	e03ffc45 	stb	zero,-15(fp)
      if (err == ERR_ABRT) {
 1835b74:	e0bffc47 	ldb	r2,-15(fp)
 1835b78:	10bffd98 	cmpnei	r2,r2,-10
 1835b7c:	1000021e 	bne	r2,zero,1835b88 <tcp_process+0x49c>
        return ERR_ABRT;
 1835b80:	00bffd84 	movi	r2,-10
 1835b84:	00018106 	br	183618c <tcp_process+0xaa0>
      }
      tcp_ack_now(pcb);
 1835b88:	e0bfff17 	ldw	r2,-4(fp)
 1835b8c:	10800883 	ldbu	r2,34(r2)
 1835b90:	10800094 	ori	r2,r2,2
 1835b94:	1007883a 	mov	r3,r2
 1835b98:	e0bfff17 	ldw	r2,-4(fp)
 1835b9c:	10c00885 	stb	r3,34(r2)
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
 1835ba0:	00016c06 	br	1836154 <tcp_process+0xa68>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
 1835ba4:	d0a81a03 	ldbu	r2,-24472(gp)
 1835ba8:	10803fcc 	andi	r2,r2,255
 1835bac:	1080040c 	andi	r2,r2,16
 1835bb0:	10016826 	beq	r2,zero,1836154 <tcp_process+0xa68>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835bb4:	d2281917 	ldw	r8,-24476(gp)
 1835bb8:	d0a81a8b 	ldhu	r2,-24470(gp)
 1835bbc:	10ffffcc 	andi	r3,r2,65535
 1835bc0:	d0a81817 	ldw	r2,-24480(gp)
 1835bc4:	188b883a 	add	r5,r3,r2
        tcphdr->dest, tcphdr->src);
 1835bc8:	d0a81617 	ldw	r2,-24488(gp)
 1835bcc:	10c00083 	ldbu	r3,2(r2)
 1835bd0:	108000c3 	ldbu	r2,3(r2)
 1835bd4:	1004923a 	slli	r2,r2,8
 1835bd8:	10c4b03a 	or	r2,r2,r3
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835bdc:	10ffffcc 	andi	r3,r2,65535
        tcphdr->dest, tcphdr->src);
 1835be0:	d0a81617 	ldw	r2,-24488(gp)
 1835be4:	11000003 	ldbu	r4,0(r2)
 1835be8:	10800043 	ldbu	r2,1(r2)
 1835bec:	1004923a 	slli	r2,r2,8
 1835bf0:	1104b03a 	or	r2,r2,r4
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835bf4:	10bfffcc 	andi	r2,r2,65535
 1835bf8:	d8800115 	stw	r2,4(sp)
 1835bfc:	d8c00015 	stw	r3,0(sp)
 1835c00:	d1e80f04 	addi	r7,gp,-24516
 1835c04:	d1a81104 	addi	r6,gp,-24508
 1835c08:	4009883a 	mov	r4,r8
 1835c0c:	181fed80 	call	181fed8 <tcp_rst>
        tcphdr->dest, tcphdr->src);
    }
    break;
 1835c10:	00015006 	br	1836154 <tcp_process+0xa68>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 1835c14:	d0a81a03 	ldbu	r2,-24472(gp)
 1835c18:	10803fcc 	andi	r2,r2,255
 1835c1c:	1080040c 	andi	r2,r2,16
 1835c20:	10006626 	beq	r2,zero,1835dbc <tcp_process+0x6d0>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 1835c24:	d0e81917 	ldw	r3,-24476(gp)
 1835c28:	e0bfff17 	ldw	r2,-4(fp)
 1835c2c:	10801317 	ldw	r2,76(r2)
 1835c30:	1885c83a 	sub	r2,r3,r2
 1835c34:	10bfffc4 	addi	r2,r2,-1
 1835c38:	10004816 	blt	r2,zero,1835d5c <tcp_process+0x670>
 1835c3c:	d0e81917 	ldw	r3,-24476(gp)
 1835c40:	e0bfff17 	ldw	r2,-4(fp)
 1835c44:	10801517 	ldw	r2,84(r2)
 1835c48:	1885c83a 	sub	r2,r3,r2
 1835c4c:	00804316 	blt	zero,r2,1835d5c <tcp_process+0x670>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
 1835c50:	e0bfff17 	ldw	r2,-4(fp)
 1835c54:	00c00104 	movi	r3,4
 1835c58:	10c00615 	stw	r3,24(r2)
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 1835c5c:	e0bfff17 	ldw	r2,-4(fp)
 1835c60:	10800517 	ldw	r2,20(r2)
 1835c64:	10000a26 	beq	r2,zero,1835c90 <tcp_process+0x5a4>
 1835c68:	e0bfff17 	ldw	r2,-4(fp)
 1835c6c:	10800517 	ldw	r2,20(r2)
 1835c70:	e0ffff17 	ldw	r3,-4(fp)
 1835c74:	18c00417 	ldw	r3,16(r3)
 1835c78:	000d883a 	mov	r6,zero
 1835c7c:	e17fff17 	ldw	r5,-4(fp)
 1835c80:	1809883a 	mov	r4,r3
 1835c84:	103ee83a 	callr	r2
 1835c88:	e0bffc45 	stb	r2,-15(fp)
 1835c8c:	00000206 	br	1835c98 <tcp_process+0x5ac>
 1835c90:	00bffc84 	movi	r2,-14
 1835c94:	e0bffc45 	stb	r2,-15(fp)
        if (err != ERR_OK) {
 1835c98:	e0bffc47 	ldb	r2,-15(fp)
 1835c9c:	10000726 	beq	r2,zero,1835cbc <tcp_process+0x5d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 1835ca0:	e0bffc47 	ldb	r2,-15(fp)
 1835ca4:	10bffda0 	cmpeqi	r2,r2,-10
 1835ca8:	1000021e 	bne	r2,zero,1835cb4 <tcp_process+0x5c8>
            tcp_abort(pcb);
 1835cac:	e13fff17 	ldw	r4,-4(fp)
 1835cb0:	181b6580 	call	181b658 <tcp_abort>
          }
          return ERR_ABRT;
 1835cb4:	00bffd84 	movi	r2,-10
 1835cb8:	00013406 	br	183618c <tcp_process+0xaa0>
        }
        old_cwnd = pcb->cwnd;
 1835cbc:	e0bfff17 	ldw	r2,-4(fp)
 1835cc0:	1080140b 	ldhu	r2,80(r2)
 1835cc4:	e0bffe0d 	sth	r2,-8(fp)
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 1835cc8:	e13fff17 	ldw	r4,-4(fp)
 1835ccc:	18364400 	call	1836440 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
 1835cd0:	e0bfff17 	ldw	r2,-4(fp)
 1835cd4:	10801a0b 	ldhu	r2,104(r2)
 1835cd8:	10bfffcc 	andi	r2,r2,65535
 1835cdc:	10000626 	beq	r2,zero,1835cf8 <tcp_process+0x60c>
          pcb->acked--;
 1835ce0:	e0bfff17 	ldw	r2,-4(fp)
 1835ce4:	10801a0b 	ldhu	r2,104(r2)
 1835ce8:	10bfffc4 	addi	r2,r2,-1
 1835cec:	1007883a 	mov	r3,r2
 1835cf0:	e0bfff17 	ldw	r2,-4(fp)
 1835cf4:	10c01a0d 	sth	r3,104(r2)
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 1835cf8:	e0bffe0b 	ldhu	r2,-8(fp)
 1835cfc:	10800058 	cmpnei	r2,r2,1
 1835d00:	1000041e 	bne	r2,zero,1835d14 <tcp_process+0x628>
 1835d04:	e0bfff17 	ldw	r2,-4(fp)
 1835d08:	10800e8b 	ldhu	r2,58(r2)
 1835d0c:	1085883a 	add	r2,r2,r2
 1835d10:	00000206 	br	1835d1c <tcp_process+0x630>
 1835d14:	e0bfff17 	ldw	r2,-4(fp)
 1835d18:	10800e8b 	ldhu	r2,58(r2)
 1835d1c:	e0ffff17 	ldw	r3,-4(fp)
 1835d20:	1880140d 	sth	r2,80(r3)

        if (recv_flags & TF_GOT_FIN) {
 1835d24:	d0a81b03 	ldbu	r2,-24468(gp)
 1835d28:	10803fcc 	andi	r2,r2,255
 1835d2c:	1080080c 	andi	r2,r2,32
 1835d30:	10002e26 	beq	r2,zero,1835dec <tcp_process+0x700>
          tcp_ack_now(pcb);
 1835d34:	e0bfff17 	ldw	r2,-4(fp)
 1835d38:	10800883 	ldbu	r2,34(r2)
 1835d3c:	10800094 	ori	r2,r2,2
 1835d40:	1007883a 	mov	r3,r2
 1835d44:	e0bfff17 	ldw	r2,-4(fp)
 1835d48:	10c00885 	stb	r3,34(r2)
          pcb->state = CLOSE_WAIT;
 1835d4c:	e0bfff17 	ldw	r2,-4(fp)
 1835d50:	00c001c4 	movi	r3,7
 1835d54:	10c00615 	stw	r3,24(r2)
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 1835d58:	00002406 	br	1835dec <tcp_process+0x700>
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835d5c:	d2281917 	ldw	r8,-24476(gp)
 1835d60:	d0a81a8b 	ldhu	r2,-24470(gp)
 1835d64:	10ffffcc 	andi	r3,r2,65535
 1835d68:	d0a81817 	ldw	r2,-24480(gp)
 1835d6c:	188b883a 	add	r5,r3,r2
                tcphdr->dest, tcphdr->src);
 1835d70:	d0a81617 	ldw	r2,-24488(gp)
 1835d74:	10c00083 	ldbu	r3,2(r2)
 1835d78:	108000c3 	ldbu	r2,3(r2)
 1835d7c:	1004923a 	slli	r2,r2,8
 1835d80:	10c4b03a 	or	r2,r2,r3
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835d84:	10ffffcc 	andi	r3,r2,65535
                tcphdr->dest, tcphdr->src);
 1835d88:	d0a81617 	ldw	r2,-24488(gp)
 1835d8c:	11000003 	ldbu	r4,0(r2)
 1835d90:	10800043 	ldbu	r2,1(r2)
 1835d94:	1004923a 	slli	r2,r2,8
 1835d98:	1104b03a 	or	r2,r2,r4
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835d9c:	10bfffcc 	andi	r2,r2,65535
 1835da0:	d8800115 	stw	r2,4(sp)
 1835da4:	d8c00015 	stw	r3,0(sp)
 1835da8:	d1e80f04 	addi	r7,gp,-24516
 1835dac:	d1a81104 	addi	r6,gp,-24508
 1835db0:	4009883a 	mov	r4,r8
 1835db4:	181fed80 	call	181fed8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 1835db8:	0000e806 	br	183615c <tcp_process+0xa70>
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 1835dbc:	d0a81a03 	ldbu	r2,-24472(gp)
 1835dc0:	10803fcc 	andi	r2,r2,255
 1835dc4:	1080008c 	andi	r2,r2,2
 1835dc8:	1000e426 	beq	r2,zero,183615c <tcp_process+0xa70>
 1835dcc:	e0bfff17 	ldw	r2,-4(fp)
 1835dd0:	10800b17 	ldw	r2,44(r2)
 1835dd4:	10ffffc4 	addi	r3,r2,-1
 1835dd8:	d0a81817 	ldw	r2,-24480(gp)
 1835ddc:	1880df1e 	bne	r3,r2,183615c <tcp_process+0xa70>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
 1835de0:	e13fff17 	ldw	r4,-4(fp)
 1835de4:	18203580 	call	1820358 <tcp_rexmit>
    }
    break;
 1835de8:	0000dc06 	br	183615c <tcp_process+0xa70>
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 1835dec:	0001883a 	nop
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 1835df0:	0000da06 	br	183615c <tcp_process+0xa70>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 1835df4:	e13fff17 	ldw	r4,-4(fp)
 1835df8:	18364400 	call	1836440 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 1835dfc:	d0a81b03 	ldbu	r2,-24468(gp)
 1835e00:	10803fcc 	andi	r2,r2,255
 1835e04:	1080080c 	andi	r2,r2,32
 1835e08:	1000d626 	beq	r2,zero,1836164 <tcp_process+0xa78>
      tcp_ack_now(pcb);
 1835e0c:	e0bfff17 	ldw	r2,-4(fp)
 1835e10:	10800883 	ldbu	r2,34(r2)
 1835e14:	10800094 	ori	r2,r2,2
 1835e18:	1007883a 	mov	r3,r2
 1835e1c:	e0bfff17 	ldw	r2,-4(fp)
 1835e20:	10c00885 	stb	r3,34(r2)
      pcb->state = CLOSE_WAIT;
 1835e24:	e0bfff17 	ldw	r2,-4(fp)
 1835e28:	00c001c4 	movi	r3,7
 1835e2c:	10c00615 	stw	r3,24(r2)
    }
    break;
 1835e30:	0000cc06 	br	1836164 <tcp_process+0xa78>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 1835e34:	e13fff17 	ldw	r4,-4(fp)
 1835e38:	18364400 	call	1836440 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 1835e3c:	d0a81b03 	ldbu	r2,-24468(gp)
 1835e40:	10803fcc 	andi	r2,r2,255
 1835e44:	1080080c 	andi	r2,r2,32
 1835e48:	10004026 	beq	r2,zero,1835f4c <tcp_process+0x860>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 1835e4c:	d0a81a03 	ldbu	r2,-24472(gp)
 1835e50:	10803fcc 	andi	r2,r2,255
 1835e54:	1080040c 	andi	r2,r2,16
 1835e58:	10003226 	beq	r2,zero,1835f24 <tcp_process+0x838>
 1835e5c:	e0bfff17 	ldw	r2,-4(fp)
 1835e60:	10c01517 	ldw	r3,84(r2)
 1835e64:	d0a81917 	ldw	r2,-24476(gp)
 1835e68:	18802e1e 	bne	r3,r2,1835f24 <tcp_process+0x838>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 1835e6c:	e0bfff17 	ldw	r2,-4(fp)
 1835e70:	10800883 	ldbu	r2,34(r2)
 1835e74:	10800094 	ori	r2,r2,2
 1835e78:	1007883a 	mov	r3,r2
 1835e7c:	e0bfff17 	ldw	r2,-4(fp)
 1835e80:	10c00885 	stb	r3,34(r2)
        tcp_pcb_purge(pcb);
 1835e84:	e13fff17 	ldw	r4,-4(fp)
 1835e88:	181d1280 	call	181d128 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 1835e8c:	d0e7f317 	ldw	r3,-24628(gp)
 1835e90:	e0bfff17 	ldw	r2,-4(fp)
 1835e94:	1880041e 	bne	r3,r2,1835ea8 <tcp_process+0x7bc>
 1835e98:	d0a7f317 	ldw	r2,-24628(gp)
 1835e9c:	10800317 	ldw	r2,12(r2)
 1835ea0:	d0a7f315 	stw	r2,-24628(gp)
 1835ea4:	00001106 	br	1835eec <tcp_process+0x800>
 1835ea8:	d0a7f317 	ldw	r2,-24628(gp)
 1835eac:	d0a7f615 	stw	r2,-24616(gp)
 1835eb0:	00000c06 	br	1835ee4 <tcp_process+0x7f8>
 1835eb4:	d0a7f617 	ldw	r2,-24616(gp)
 1835eb8:	10c00317 	ldw	r3,12(r2)
 1835ebc:	e0bfff17 	ldw	r2,-4(fp)
 1835ec0:	1880051e 	bne	r3,r2,1835ed8 <tcp_process+0x7ec>
 1835ec4:	d0a7f617 	ldw	r2,-24616(gp)
 1835ec8:	e0ffff17 	ldw	r3,-4(fp)
 1835ecc:	18c00317 	ldw	r3,12(r3)
 1835ed0:	10c00315 	stw	r3,12(r2)
 1835ed4:	00000506 	br	1835eec <tcp_process+0x800>
 1835ed8:	d0a7f617 	ldw	r2,-24616(gp)
 1835edc:	10800317 	ldw	r2,12(r2)
 1835ee0:	d0a7f615 	stw	r2,-24616(gp)
 1835ee4:	d0a7f617 	ldw	r2,-24616(gp)
 1835ee8:	103ff21e 	bne	r2,zero,1835eb4 <__ram_exceptions_end+0xff825bc4>
 1835eec:	e0bfff17 	ldw	r2,-4(fp)
 1835ef0:	10000315 	stw	zero,12(r2)
 1835ef4:	00800044 	movi	r2,1
 1835ef8:	d0a7f285 	stb	r2,-24630(gp)
        pcb->state = TIME_WAIT;
 1835efc:	e0bfff17 	ldw	r2,-4(fp)
 1835f00:	00c00284 	movi	r3,10
 1835f04:	10c00615 	stw	r3,24(r2)
        TCP_REG(&tcp_tw_pcbs, pcb);
 1835f08:	d0e7f817 	ldw	r3,-24608(gp)
 1835f0c:	e0bfff17 	ldw	r2,-4(fp)
 1835f10:	10c00315 	stw	r3,12(r2)
 1835f14:	e0bfff17 	ldw	r2,-4(fp)
 1835f18:	d0a7f815 	stw	r2,-24608(gp)
 1835f1c:	1820c000 	call	1820c00 <tcp_timer_needed>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 1835f20:	00009206 	br	183616c <tcp_process+0xa80>
        tcp_pcb_purge(pcb);
        TCP_RMV_ACTIVE(pcb);
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
 1835f24:	e0bfff17 	ldw	r2,-4(fp)
 1835f28:	10800883 	ldbu	r2,34(r2)
 1835f2c:	10800094 	ori	r2,r2,2
 1835f30:	1007883a 	mov	r3,r2
 1835f34:	e0bfff17 	ldw	r2,-4(fp)
 1835f38:	10c00885 	stb	r3,34(r2)
        pcb->state = CLOSING;
 1835f3c:	e0bfff17 	ldw	r2,-4(fp)
 1835f40:	00c00204 	movi	r3,8
 1835f44:	10c00615 	stw	r3,24(r2)
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 1835f48:	00008806 	br	183616c <tcp_process+0xa80>
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 1835f4c:	d0a81a03 	ldbu	r2,-24472(gp)
 1835f50:	10803fcc 	andi	r2,r2,255
 1835f54:	1080040c 	andi	r2,r2,16
 1835f58:	10008426 	beq	r2,zero,183616c <tcp_process+0xa80>
 1835f5c:	e0bfff17 	ldw	r2,-4(fp)
 1835f60:	10c01517 	ldw	r3,84(r2)
 1835f64:	d0a81917 	ldw	r2,-24476(gp)
 1835f68:	1880801e 	bne	r3,r2,183616c <tcp_process+0xa80>
      pcb->state = FIN_WAIT_2;
 1835f6c:	e0bfff17 	ldw	r2,-4(fp)
 1835f70:	00c00184 	movi	r3,6
 1835f74:	10c00615 	stw	r3,24(r2)
    }
    break;
 1835f78:	00007c06 	br	183616c <tcp_process+0xa80>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 1835f7c:	e13fff17 	ldw	r4,-4(fp)
 1835f80:	18364400 	call	1836440 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 1835f84:	d0a81b03 	ldbu	r2,-24468(gp)
 1835f88:	10803fcc 	andi	r2,r2,255
 1835f8c:	1080080c 	andi	r2,r2,32
 1835f90:	10007826 	beq	r2,zero,1836174 <tcp_process+0xa88>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 1835f94:	e0bfff17 	ldw	r2,-4(fp)
 1835f98:	10800883 	ldbu	r2,34(r2)
 1835f9c:	10800094 	ori	r2,r2,2
 1835fa0:	1007883a 	mov	r3,r2
 1835fa4:	e0bfff17 	ldw	r2,-4(fp)
 1835fa8:	10c00885 	stb	r3,34(r2)
      tcp_pcb_purge(pcb);
 1835fac:	e13fff17 	ldw	r4,-4(fp)
 1835fb0:	181d1280 	call	181d128 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 1835fb4:	d0e7f317 	ldw	r3,-24628(gp)
 1835fb8:	e0bfff17 	ldw	r2,-4(fp)
 1835fbc:	1880041e 	bne	r3,r2,1835fd0 <tcp_process+0x8e4>
 1835fc0:	d0a7f317 	ldw	r2,-24628(gp)
 1835fc4:	10800317 	ldw	r2,12(r2)
 1835fc8:	d0a7f315 	stw	r2,-24628(gp)
 1835fcc:	00001106 	br	1836014 <tcp_process+0x928>
 1835fd0:	d0a7f317 	ldw	r2,-24628(gp)
 1835fd4:	d0a7f615 	stw	r2,-24616(gp)
 1835fd8:	00000c06 	br	183600c <tcp_process+0x920>
 1835fdc:	d0a7f617 	ldw	r2,-24616(gp)
 1835fe0:	10c00317 	ldw	r3,12(r2)
 1835fe4:	e0bfff17 	ldw	r2,-4(fp)
 1835fe8:	1880051e 	bne	r3,r2,1836000 <tcp_process+0x914>
 1835fec:	d0a7f617 	ldw	r2,-24616(gp)
 1835ff0:	e0ffff17 	ldw	r3,-4(fp)
 1835ff4:	18c00317 	ldw	r3,12(r3)
 1835ff8:	10c00315 	stw	r3,12(r2)
 1835ffc:	00000506 	br	1836014 <tcp_process+0x928>
 1836000:	d0a7f617 	ldw	r2,-24616(gp)
 1836004:	10800317 	ldw	r2,12(r2)
 1836008:	d0a7f615 	stw	r2,-24616(gp)
 183600c:	d0a7f617 	ldw	r2,-24616(gp)
 1836010:	103ff21e 	bne	r2,zero,1835fdc <__ram_exceptions_end+0xff825cec>
 1836014:	e0bfff17 	ldw	r2,-4(fp)
 1836018:	10000315 	stw	zero,12(r2)
 183601c:	00800044 	movi	r2,1
 1836020:	d0a7f285 	stb	r2,-24630(gp)
      pcb->state = TIME_WAIT;
 1836024:	e0bfff17 	ldw	r2,-4(fp)
 1836028:	00c00284 	movi	r3,10
 183602c:	10c00615 	stw	r3,24(r2)
      TCP_REG(&tcp_tw_pcbs, pcb);
 1836030:	d0e7f817 	ldw	r3,-24608(gp)
 1836034:	e0bfff17 	ldw	r2,-4(fp)
 1836038:	10c00315 	stw	r3,12(r2)
 183603c:	e0bfff17 	ldw	r2,-4(fp)
 1836040:	d0a7f815 	stw	r2,-24608(gp)
 1836044:	1820c000 	call	1820c00 <tcp_timer_needed>
    }
    break;
 1836048:	00004a06 	br	1836174 <tcp_process+0xa88>
  case CLOSING:
    tcp_receive(pcb);
 183604c:	e13fff17 	ldw	r4,-4(fp)
 1836050:	18364400 	call	1836440 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 1836054:	d0a81a03 	ldbu	r2,-24472(gp)
 1836058:	10803fcc 	andi	r2,r2,255
 183605c:	1080040c 	andi	r2,r2,16
 1836060:	10004626 	beq	r2,zero,183617c <tcp_process+0xa90>
 1836064:	e0bfff17 	ldw	r2,-4(fp)
 1836068:	10c01517 	ldw	r3,84(r2)
 183606c:	d0a81917 	ldw	r2,-24476(gp)
 1836070:	1880421e 	bne	r3,r2,183617c <tcp_process+0xa90>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 1836074:	e13fff17 	ldw	r4,-4(fp)
 1836078:	181d1280 	call	181d128 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 183607c:	d0e7f317 	ldw	r3,-24628(gp)
 1836080:	e0bfff17 	ldw	r2,-4(fp)
 1836084:	1880041e 	bne	r3,r2,1836098 <tcp_process+0x9ac>
 1836088:	d0a7f317 	ldw	r2,-24628(gp)
 183608c:	10800317 	ldw	r2,12(r2)
 1836090:	d0a7f315 	stw	r2,-24628(gp)
 1836094:	00001106 	br	18360dc <tcp_process+0x9f0>
 1836098:	d0a7f317 	ldw	r2,-24628(gp)
 183609c:	d0a7f615 	stw	r2,-24616(gp)
 18360a0:	00000c06 	br	18360d4 <tcp_process+0x9e8>
 18360a4:	d0a7f617 	ldw	r2,-24616(gp)
 18360a8:	10c00317 	ldw	r3,12(r2)
 18360ac:	e0bfff17 	ldw	r2,-4(fp)
 18360b0:	1880051e 	bne	r3,r2,18360c8 <tcp_process+0x9dc>
 18360b4:	d0a7f617 	ldw	r2,-24616(gp)
 18360b8:	e0ffff17 	ldw	r3,-4(fp)
 18360bc:	18c00317 	ldw	r3,12(r3)
 18360c0:	10c00315 	stw	r3,12(r2)
 18360c4:	00000506 	br	18360dc <tcp_process+0x9f0>
 18360c8:	d0a7f617 	ldw	r2,-24616(gp)
 18360cc:	10800317 	ldw	r2,12(r2)
 18360d0:	d0a7f615 	stw	r2,-24616(gp)
 18360d4:	d0a7f617 	ldw	r2,-24616(gp)
 18360d8:	103ff21e 	bne	r2,zero,18360a4 <__ram_exceptions_end+0xff825db4>
 18360dc:	e0bfff17 	ldw	r2,-4(fp)
 18360e0:	10000315 	stw	zero,12(r2)
 18360e4:	00800044 	movi	r2,1
 18360e8:	d0a7f285 	stb	r2,-24630(gp)
      pcb->state = TIME_WAIT;
 18360ec:	e0bfff17 	ldw	r2,-4(fp)
 18360f0:	00c00284 	movi	r3,10
 18360f4:	10c00615 	stw	r3,24(r2)
      TCP_REG(&tcp_tw_pcbs, pcb);
 18360f8:	d0e7f817 	ldw	r3,-24608(gp)
 18360fc:	e0bfff17 	ldw	r2,-4(fp)
 1836100:	10c00315 	stw	r3,12(r2)
 1836104:	e0bfff17 	ldw	r2,-4(fp)
 1836108:	d0a7f815 	stw	r2,-24608(gp)
 183610c:	1820c000 	call	1820c00 <tcp_timer_needed>
    }
    break;
 1836110:	00001a06 	br	183617c <tcp_process+0xa90>
  case LAST_ACK:
    tcp_receive(pcb);
 1836114:	e13fff17 	ldw	r4,-4(fp)
 1836118:	18364400 	call	1836440 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 183611c:	d0a81a03 	ldbu	r2,-24472(gp)
 1836120:	10803fcc 	andi	r2,r2,255
 1836124:	1080040c 	andi	r2,r2,16
 1836128:	10001626 	beq	r2,zero,1836184 <tcp_process+0xa98>
 183612c:	e0bfff17 	ldw	r2,-4(fp)
 1836130:	10c01517 	ldw	r3,84(r2)
 1836134:	d0a81917 	ldw	r2,-24476(gp)
 1836138:	1880121e 	bne	r3,r2,1836184 <tcp_process+0xa98>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 183613c:	d0a81b03 	ldbu	r2,-24468(gp)
 1836140:	10800414 	ori	r2,r2,16
 1836144:	d0a81b05 	stb	r2,-24468(gp)
    }
    break;
 1836148:	00000e06 	br	1836184 <tcp_process+0xa98>
  default:
    break;
 183614c:	0001883a 	nop
 1836150:	00000d06 	br	1836188 <tcp_process+0xa9c>
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
 1836154:	0001883a 	nop
 1836158:	00000b06 	br	1836188 <tcp_process+0xa9c>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 183615c:	0001883a 	nop
 1836160:	00000906 	br	1836188 <tcp_process+0xa9c>
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) { /* passive close */
      tcp_ack_now(pcb);
      pcb->state = CLOSE_WAIT;
    }
    break;
 1836164:	0001883a 	nop
 1836168:	00000706 	br	1836188 <tcp_process+0xa9c>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 183616c:	0001883a 	nop
 1836170:	00000506 	br	1836188 <tcp_process+0xa9c>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
 1836174:	0001883a 	nop
 1836178:	00000306 	br	1836188 <tcp_process+0xa9c>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
 183617c:	0001883a 	nop
 1836180:	00000106 	br	1836188 <tcp_process+0xa9c>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
    }
    break;
 1836184:	0001883a 	nop
  default:
    break;
  }
  return ERR_OK;
 1836188:	0005883a 	mov	r2,zero
}
 183618c:	e037883a 	mov	sp,fp
 1836190:	dfc00117 	ldw	ra,4(sp)
 1836194:	df000017 	ldw	fp,0(sp)
 1836198:	dec00204 	addi	sp,sp,8
 183619c:	f800283a 	ret

018361a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 18361a0:	defffb04 	addi	sp,sp,-20
 18361a4:	dfc00415 	stw	ra,16(sp)
 18361a8:	df000315 	stw	fp,12(sp)
 18361ac:	df000304 	addi	fp,sp,12
 18361b0:	e13ffe15 	stw	r4,-8(fp)
 18361b4:	e17fff15 	stw	r5,-4(fp)
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 18361b8:	e0bffe17 	ldw	r2,-8(fp)
 18361bc:	10800417 	ldw	r2,16(r2)
 18361c0:	10c00303 	ldbu	r3,12(r2)
 18361c4:	10800343 	ldbu	r2,13(r2)
 18361c8:	1004923a 	slli	r2,r2,8
 18361cc:	10c4b03a 	or	r2,r2,r3
 18361d0:	10bfffcc 	andi	r2,r2,65535
 18361d4:	1004d23a 	srli	r2,r2,8
 18361d8:	10ffffcc 	andi	r3,r2,65535
 18361dc:	e0bffe17 	ldw	r2,-8(fp)
 18361e0:	10800417 	ldw	r2,16(r2)
 18361e4:	11000303 	ldbu	r4,12(r2)
 18361e8:	10800343 	ldbu	r2,13(r2)
 18361ec:	1004923a 	slli	r2,r2,8
 18361f0:	1104b03a 	or	r2,r2,r4
 18361f4:	10bfffcc 	andi	r2,r2,65535
 18361f8:	1004923a 	slli	r2,r2,8
 18361fc:	10bfffcc 	andi	r2,r2,65535
 1836200:	1884b03a 	or	r2,r3,r2
 1836204:	1080004c 	andi	r2,r2,1
 1836208:	10003b26 	beq	r2,zero,18362f8 <tcp_oos_insert_segment+0x158>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 183620c:	e13fff17 	ldw	r4,-4(fp)
 1836210:	181ca840 	call	181ca84 <tcp_segs_free>
    next = NULL;
 1836214:	e03fff15 	stw	zero,-4(fp)
 1836218:	00008006 	br	183641c <tcp_oos_insert_segment+0x27c>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 183621c:	e0bfff17 	ldw	r2,-4(fp)
 1836220:	10800417 	ldw	r2,16(r2)
 1836224:	10c00303 	ldbu	r3,12(r2)
 1836228:	10800343 	ldbu	r2,13(r2)
 183622c:	1004923a 	slli	r2,r2,8
 1836230:	10c4b03a 	or	r2,r2,r3
 1836234:	10bfffcc 	andi	r2,r2,65535
 1836238:	1004d23a 	srli	r2,r2,8
 183623c:	10ffffcc 	andi	r3,r2,65535
 1836240:	e0bfff17 	ldw	r2,-4(fp)
 1836244:	10800417 	ldw	r2,16(r2)
 1836248:	11000303 	ldbu	r4,12(r2)
 183624c:	10800343 	ldbu	r2,13(r2)
 1836250:	1004923a 	slli	r2,r2,8
 1836254:	1104b03a 	or	r2,r2,r4
 1836258:	10bfffcc 	andi	r2,r2,65535
 183625c:	1004923a 	slli	r2,r2,8
 1836260:	10bfffcc 	andi	r2,r2,65535
 1836264:	1884b03a 	or	r2,r3,r2
 1836268:	1080004c 	andi	r2,r2,1
 183626c:	10001b26 	beq	r2,zero,18362dc <tcp_oos_insert_segment+0x13c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 1836270:	e0bffe17 	ldw	r2,-8(fp)
 1836274:	10800417 	ldw	r2,16(r2)
 1836278:	e0fffe17 	ldw	r3,-8(fp)
 183627c:	18c00417 	ldw	r3,16(r3)
 1836280:	19000303 	ldbu	r4,12(r3)
 1836284:	18c00343 	ldbu	r3,13(r3)
 1836288:	1806923a 	slli	r3,r3,8
 183628c:	1906b03a 	or	r3,r3,r4
 1836290:	18c04014 	ori	r3,r3,256
 1836294:	180d883a 	mov	r6,r3
 1836298:	30ffffcc 	andi	r3,r6,65535
 183629c:	19403fcc 	andi	r5,r3,255
 18362a0:	10c00303 	ldbu	r3,12(r2)
 18362a4:	1806703a 	and	r3,r3,zero
 18362a8:	1809883a 	mov	r4,r3
 18362ac:	2807883a 	mov	r3,r5
 18362b0:	20c6b03a 	or	r3,r4,r3
 18362b4:	10c00305 	stb	r3,12(r2)
 18362b8:	30ffffcc 	andi	r3,r6,65535
 18362bc:	1806d23a 	srli	r3,r3,8
 18362c0:	197fffcc 	andi	r5,r3,65535
 18362c4:	10c00343 	ldbu	r3,13(r2)
 18362c8:	1806703a 	and	r3,r3,zero
 18362cc:	1809883a 	mov	r4,r3
 18362d0:	2807883a 	mov	r3,r5
 18362d4:	20c6b03a 	or	r3,r4,r3
 18362d8:	10c00345 	stb	r3,13(r2)
      }
      old_seg = next;
 18362dc:	e0bfff17 	ldw	r2,-4(fp)
 18362e0:	e0bffd15 	stw	r2,-12(fp)
      next = next->next;
 18362e4:	e0bfff17 	ldw	r2,-4(fp)
 18362e8:	10800017 	ldw	r2,0(r2)
 18362ec:	e0bfff15 	stw	r2,-4(fp)
      tcp_seg_free(old_seg);
 18362f0:	e13ffd17 	ldw	r4,-12(fp)
 18362f4:	181cad80 	call	181cad8 <tcp_seg_free>
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 18362f8:	e0bfff17 	ldw	r2,-4(fp)
 18362fc:	10001826 	beq	r2,zero,1836360 <tcp_oos_insert_segment+0x1c0>
           TCP_SEQ_GEQ((seqno + cseg->len),
 1836300:	e0bffe17 	ldw	r2,-8(fp)
 1836304:	1080020b 	ldhu	r2,8(r2)
 1836308:	10ffffcc 	andi	r3,r2,65535
 183630c:	d0a81817 	ldw	r2,-24480(gp)
 1836310:	1887883a 	add	r3,r3,r2
 1836314:	e0bfff17 	ldw	r2,-4(fp)
 1836318:	10800417 	ldw	r2,16(r2)
 183631c:	11000103 	ldbu	r4,4(r2)
 1836320:	11400143 	ldbu	r5,5(r2)
 1836324:	280a923a 	slli	r5,r5,8
 1836328:	2908b03a 	or	r4,r5,r4
 183632c:	11400183 	ldbu	r5,6(r2)
 1836330:	280a943a 	slli	r5,r5,16
 1836334:	2908b03a 	or	r4,r5,r4
 1836338:	108001c3 	ldbu	r2,7(r2)
 183633c:	1004963a 	slli	r2,r2,24
 1836340:	1104b03a 	or	r2,r2,r4
 1836344:	1009883a 	mov	r4,r2
 1836348:	e0bfff17 	ldw	r2,-4(fp)
 183634c:	1080020b 	ldhu	r2,8(r2)
 1836350:	10bfffcc 	andi	r2,r2,65535
 1836354:	2085883a 	add	r2,r4,r2
 1836358:	1885c83a 	sub	r2,r3,r2
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 183635c:	103faf0e 	bge	r2,zero,183621c <__ram_exceptions_end+0xff825f2c>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 1836360:	e0bfff17 	ldw	r2,-4(fp)
 1836364:	10002d26 	beq	r2,zero,183641c <tcp_oos_insert_segment+0x27c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 1836368:	e0bffe17 	ldw	r2,-8(fp)
 183636c:	1080020b 	ldhu	r2,8(r2)
 1836370:	10ffffcc 	andi	r3,r2,65535
 1836374:	d0a81817 	ldw	r2,-24480(gp)
 1836378:	1887883a 	add	r3,r3,r2
 183637c:	e0bfff17 	ldw	r2,-4(fp)
 1836380:	10800417 	ldw	r2,16(r2)
 1836384:	11000103 	ldbu	r4,4(r2)
 1836388:	11400143 	ldbu	r5,5(r2)
 183638c:	280a923a 	slli	r5,r5,8
 1836390:	2908b03a 	or	r4,r5,r4
 1836394:	11400183 	ldbu	r5,6(r2)
 1836398:	280a943a 	slli	r5,r5,16
 183639c:	2908b03a 	or	r4,r5,r4
 18363a0:	108001c3 	ldbu	r2,7(r2)
 18363a4:	1004963a 	slli	r2,r2,24
 18363a8:	1104b03a 	or	r2,r2,r4
 18363ac:	1885c83a 	sub	r2,r3,r2
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 18363b0:	00801a0e 	bge	zero,r2,183641c <tcp_oos_insert_segment+0x27c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 18363b4:	e0bfff17 	ldw	r2,-4(fp)
 18363b8:	10800417 	ldw	r2,16(r2)
 18363bc:	10c00103 	ldbu	r3,4(r2)
 18363c0:	11000143 	ldbu	r4,5(r2)
 18363c4:	2008923a 	slli	r4,r4,8
 18363c8:	20c6b03a 	or	r3,r4,r3
 18363cc:	11000183 	ldbu	r4,6(r2)
 18363d0:	2008943a 	slli	r4,r4,16
 18363d4:	20c6b03a 	or	r3,r4,r3
 18363d8:	108001c3 	ldbu	r2,7(r2)
 18363dc:	1004963a 	slli	r2,r2,24
 18363e0:	10c4b03a 	or	r2,r2,r3
 18363e4:	1007883a 	mov	r3,r2
 18363e8:	d0a81817 	ldw	r2,-24480(gp)
 18363ec:	1885c83a 	sub	r2,r3,r2
 18363f0:	1007883a 	mov	r3,r2
 18363f4:	e0bffe17 	ldw	r2,-8(fp)
 18363f8:	10c0020d 	sth	r3,8(r2)
      pbuf_realloc(cseg->p, cseg->len);
 18363fc:	e0bffe17 	ldw	r2,-8(fp)
 1836400:	10c00117 	ldw	r3,4(r2)
 1836404:	e0bffe17 	ldw	r2,-8(fp)
 1836408:	1080020b 	ldhu	r2,8(r2)
 183640c:	10bfffcc 	andi	r2,r2,65535
 1836410:	100b883a 	mov	r5,r2
 1836414:	1809883a 	mov	r4,r3
 1836418:	1819f740 	call	1819f74 <pbuf_realloc>
    }
  }
  cseg->next = next;
 183641c:	e0bffe17 	ldw	r2,-8(fp)
 1836420:	e0ffff17 	ldw	r3,-4(fp)
 1836424:	10c00015 	stw	r3,0(r2)
}
 1836428:	0001883a 	nop
 183642c:	e037883a 	mov	sp,fp
 1836430:	dfc00117 	ldw	ra,4(sp)
 1836434:	df000017 	ldw	fp,0(sp)
 1836438:	dec00204 	addi	sp,sp,8
 183643c:	f800283a 	ret

01836440 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 1836440:	defff204 	addi	sp,sp,-56
 1836444:	dfc00d15 	stw	ra,52(sp)
 1836448:	df000c15 	stw	fp,48(sp)
 183644c:	dc000b15 	stw	r16,44(sp)
 1836450:	df000c04 	addi	fp,sp,48
 1836454:	e13ffe15 	stw	r4,-8(fp)
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 1836458:	e03ff915 	stw	zero,-28(fp)
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 183645c:	d0a81a03 	ldbu	r2,-24472(gp)
 1836460:	10803fcc 	andi	r2,r2,255
 1836464:	1080040c 	andi	r2,r2,16
 1836468:	1002ab26 	beq	r2,zero,1836f18 <tcp_receive+0xad8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 183646c:	e0bffe17 	ldw	r2,-8(fp)
 1836470:	1080190b 	ldhu	r2,100(r2)
 1836474:	10ffffcc 	andi	r3,r2,65535
 1836478:	e0bffe17 	ldw	r2,-8(fp)
 183647c:	10801717 	ldw	r2,92(r2)
 1836480:	1885883a 	add	r2,r3,r2
 1836484:	e0bffa15 	stw	r2,-24(fp)

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 1836488:	e0bffe17 	ldw	r2,-8(fp)
 183648c:	10c01617 	ldw	r3,88(r2)
 1836490:	d0a81817 	ldw	r2,-24480(gp)
 1836494:	1885c83a 	sub	r2,r3,r2
 1836498:	10001816 	blt	r2,zero,18364fc <tcp_receive+0xbc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 183649c:	e0bffe17 	ldw	r2,-8(fp)
 18364a0:	10c01617 	ldw	r3,88(r2)
 18364a4:	d0a81817 	ldw	r2,-24480(gp)

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 18364a8:	1880051e 	bne	r3,r2,18364c0 <tcp_receive+0x80>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 18364ac:	e0bffe17 	ldw	r2,-8(fp)
 18364b0:	10c01717 	ldw	r3,92(r2)
 18364b4:	d0a81917 	ldw	r2,-24476(gp)
 18364b8:	1885c83a 	sub	r2,r3,r2
 18364bc:	10000f16 	blt	r2,zero,18364fc <tcp_receive+0xbc>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 18364c0:	e0bffe17 	ldw	r2,-8(fp)
 18364c4:	10c01717 	ldw	r3,92(r2)
 18364c8:	d0a81917 	ldw	r2,-24476(gp)
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 18364cc:	18803f1e 	bne	r3,r2,18365cc <tcp_receive+0x18c>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 18364d0:	d0a81617 	ldw	r2,-24488(gp)
 18364d4:	10c00383 	ldbu	r3,14(r2)
 18364d8:	108003c3 	ldbu	r2,15(r2)
 18364dc:	1004923a 	slli	r2,r2,8
 18364e0:	10c4b03a 	or	r2,r2,r3
 18364e4:	1009883a 	mov	r4,r2
 18364e8:	e0bffe17 	ldw	r2,-8(fp)
 18364ec:	10c0190b 	ldhu	r3,100(r2)
 18364f0:	20bfffcc 	andi	r2,r4,65535
 18364f4:	18ffffcc 	andi	r3,r3,65535
 18364f8:	1880342e 	bgeu	r3,r2,18365cc <tcp_receive+0x18c>
      pcb->snd_wnd = tcphdr->wnd;
 18364fc:	d0a81617 	ldw	r2,-24488(gp)
 1836500:	10c00383 	ldbu	r3,14(r2)
 1836504:	108003c3 	ldbu	r2,15(r2)
 1836508:	1004923a 	slli	r2,r2,8
 183650c:	10c4b03a 	or	r2,r2,r3
 1836510:	1007883a 	mov	r3,r2
 1836514:	e0bffe17 	ldw	r2,-8(fp)
 1836518:	10c0190d 	sth	r3,100(r2)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
 183651c:	e0bffe17 	ldw	r2,-8(fp)
 1836520:	1100198b 	ldhu	r4,102(r2)
 1836524:	d0a81617 	ldw	r2,-24488(gp)
 1836528:	10c00383 	ldbu	r3,14(r2)
 183652c:	108003c3 	ldbu	r2,15(r2)
 1836530:	1004923a 	slli	r2,r2,8
 1836534:	10c4b03a 	or	r2,r2,r3
 1836538:	20ffffcc 	andi	r3,r4,65535
 183653c:	10bfffcc 	andi	r2,r2,65535
 1836540:	1880082e 	bgeu	r3,r2,1836564 <tcp_receive+0x124>
        pcb->snd_wnd_max = tcphdr->wnd;
 1836544:	d0a81617 	ldw	r2,-24488(gp)
 1836548:	10c00383 	ldbu	r3,14(r2)
 183654c:	108003c3 	ldbu	r2,15(r2)
 1836550:	1004923a 	slli	r2,r2,8
 1836554:	10c4b03a 	or	r2,r2,r3
 1836558:	1007883a 	mov	r3,r2
 183655c:	e0bffe17 	ldw	r2,-8(fp)
 1836560:	10c0198d 	sth	r3,102(r2)
      }
      pcb->snd_wl1 = seqno;
 1836564:	d0e81817 	ldw	r3,-24480(gp)
 1836568:	e0bffe17 	ldw	r2,-8(fp)
 183656c:	10c01615 	stw	r3,88(r2)
      pcb->snd_wl2 = ackno;
 1836570:	d0e81917 	ldw	r3,-24476(gp)
 1836574:	e0bffe17 	ldw	r2,-8(fp)
 1836578:	10c01715 	stw	r3,92(r2)
      if (pcb->snd_wnd == 0) {
 183657c:	e0bffe17 	ldw	r2,-8(fp)
 1836580:	1080190b 	ldhu	r2,100(r2)
 1836584:	10bfffcc 	andi	r2,r2,65535
 1836588:	10000a1e 	bne	r2,zero,18365b4 <tcp_receive+0x174>
        if (pcb->persist_backoff == 0) {
 183658c:	e0bffe17 	ldw	r2,-8(fp)
 1836590:	10802843 	ldbu	r2,161(r2)
 1836594:	10803fcc 	andi	r2,r2,255
 1836598:	10000c1e 	bne	r2,zero,18365cc <tcp_receive+0x18c>
          /* start persist timer */
          pcb->persist_cnt = 0;
 183659c:	e0bffe17 	ldw	r2,-8(fp)
 18365a0:	10002805 	stb	zero,160(r2)
          pcb->persist_backoff = 1;
 18365a4:	e0bffe17 	ldw	r2,-8(fp)
 18365a8:	00c00044 	movi	r3,1
 18365ac:	10c02845 	stb	r3,161(r2)
 18365b0:	00000606 	br	18365cc <tcp_receive+0x18c>
        }
      } else if (pcb->persist_backoff > 0) {
 18365b4:	e0bffe17 	ldw	r2,-8(fp)
 18365b8:	10802843 	ldbu	r2,161(r2)
 18365bc:	10803fcc 	andi	r2,r2,255
 18365c0:	10000226 	beq	r2,zero,18365cc <tcp_receive+0x18c>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 18365c4:	e0bffe17 	ldw	r2,-8(fp)
 18365c8:	10002845 	stb	zero,161(r2)
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 18365cc:	d0e81917 	ldw	r3,-24476(gp)
 18365d0:	e0bffe17 	ldw	r2,-8(fp)
 18365d4:	10801317 	ldw	r2,76(r2)
 18365d8:	1885c83a 	sub	r2,r3,r2
 18365dc:	00804d16 	blt	zero,r2,1836714 <tcp_receive+0x2d4>
      pcb->acked = 0;
 18365e0:	e0bffe17 	ldw	r2,-8(fp)
 18365e4:	10001a0d 	sth	zero,104(r2)
      /* Clause 2 */
      if (tcplen == 0) {
 18365e8:	d0a81a8b 	ldhu	r2,-24470(gp)
 18365ec:	10bfffcc 	andi	r2,r2,65535
 18365f0:	1000431e 	bne	r2,zero,1836700 <tcp_receive+0x2c0>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 18365f4:	e0bffe17 	ldw	r2,-8(fp)
 18365f8:	10c01717 	ldw	r3,92(r2)
 18365fc:	e0bffe17 	ldw	r2,-8(fp)
 1836600:	1080190b 	ldhu	r2,100(r2)
 1836604:	10bfffcc 	andi	r2,r2,65535
 1836608:	1887883a 	add	r3,r3,r2
 183660c:	e0bffa17 	ldw	r2,-24(fp)
 1836610:	18803b1e 	bne	r3,r2,1836700 <tcp_receive+0x2c0>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 1836614:	e0bffe17 	ldw	r2,-8(fp)
 1836618:	10800e0b 	ldhu	r2,56(r2)
 183661c:	10bfffcc 	andi	r2,r2,65535
 1836620:	10a0001c 	xori	r2,r2,32768
 1836624:	10a00004 	addi	r2,r2,-32768
 1836628:	10003516 	blt	r2,zero,1836700 <tcp_receive+0x2c0>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 183662c:	e0bffe17 	ldw	r2,-8(fp)
 1836630:	10c01317 	ldw	r3,76(r2)
 1836634:	d0a81917 	ldw	r2,-24476(gp)
 1836638:	1880311e 	bne	r3,r2,1836700 <tcp_receive+0x2c0>
              found_dupack = 1;
 183663c:	00800044 	movi	r2,1
 1836640:	e0bff915 	stw	r2,-28(fp)
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 1836644:	e0bffe17 	ldw	r2,-8(fp)
 1836648:	108012c3 	ldbu	r2,75(r2)
 183664c:	10800044 	addi	r2,r2,1
 1836650:	1009883a 	mov	r4,r2
 1836654:	e0bffe17 	ldw	r2,-8(fp)
 1836658:	10c012c3 	ldbu	r3,75(r2)
 183665c:	20803fcc 	andi	r2,r4,255
 1836660:	18c03fcc 	andi	r3,r3,255
 1836664:	1880062e 	bgeu	r3,r2,1836680 <tcp_receive+0x240>
                ++pcb->dupacks;
 1836668:	e0bffe17 	ldw	r2,-8(fp)
 183666c:	108012c3 	ldbu	r2,75(r2)
 1836670:	10800044 	addi	r2,r2,1
 1836674:	1007883a 	mov	r3,r2
 1836678:	e0bffe17 	ldw	r2,-8(fp)
 183667c:	10c012c5 	stb	r3,75(r2)
              }
              if (pcb->dupacks > 3) {
 1836680:	e0bffe17 	ldw	r2,-8(fp)
 1836684:	108012c3 	ldbu	r2,75(r2)
 1836688:	10803fcc 	andi	r2,r2,255
 183668c:	10800130 	cmpltui	r2,r2,4
 1836690:	1000141e 	bne	r2,zero,18366e4 <tcp_receive+0x2a4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 1836694:	e0bffe17 	ldw	r2,-8(fp)
 1836698:	10c0140b 	ldhu	r3,80(r2)
 183669c:	e0bffe17 	ldw	r2,-8(fp)
 18366a0:	10800e8b 	ldhu	r2,58(r2)
 18366a4:	1885883a 	add	r2,r3,r2
 18366a8:	1009883a 	mov	r4,r2
 18366ac:	e0bffe17 	ldw	r2,-8(fp)
 18366b0:	10c0140b 	ldhu	r3,80(r2)
 18366b4:	20bfffcc 	andi	r2,r4,65535
 18366b8:	18ffffcc 	andi	r3,r3,65535
 18366bc:	1880102e 	bgeu	r3,r2,1836700 <tcp_receive+0x2c0>
                  pcb->cwnd += pcb->mss;
 18366c0:	e0bffe17 	ldw	r2,-8(fp)
 18366c4:	10c0140b 	ldhu	r3,80(r2)
 18366c8:	e0bffe17 	ldw	r2,-8(fp)
 18366cc:	10800e8b 	ldhu	r2,58(r2)
 18366d0:	1885883a 	add	r2,r3,r2
 18366d4:	1007883a 	mov	r3,r2
 18366d8:	e0bffe17 	ldw	r2,-8(fp)
 18366dc:	10c0140d 	sth	r3,80(r2)
 18366e0:	00000706 	br	1836700 <tcp_receive+0x2c0>
                }
              } else if (pcb->dupacks == 3) {
 18366e4:	e0bffe17 	ldw	r2,-8(fp)
 18366e8:	108012c3 	ldbu	r2,75(r2)
 18366ec:	10803fcc 	andi	r2,r2,255
 18366f0:	108000d8 	cmpnei	r2,r2,3
 18366f4:	1000021e 	bne	r2,zero,1836700 <tcp_receive+0x2c0>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 18366f8:	e13ffe17 	ldw	r4,-8(fp)
 18366fc:	18206000 	call	1820600 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 1836700:	e0bff917 	ldw	r2,-28(fp)
 1836704:	10015a1e 	bne	r2,zero,1836c70 <tcp_receive+0x830>
        pcb->dupacks = 0;
 1836708:	e0bffe17 	ldw	r2,-8(fp)
 183670c:	100012c5 	stb	zero,75(r2)
 1836710:	00015706 	br	1836c70 <tcp_receive+0x830>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
 1836714:	d0e81917 	ldw	r3,-24476(gp)
 1836718:	e0bffe17 	ldw	r2,-8(fp)
 183671c:	10801317 	ldw	r2,76(r2)
 1836720:	1885c83a 	sub	r2,r3,r2
 1836724:	10bfffc4 	addi	r2,r2,-1
 1836728:	10011416 	blt	r2,zero,1836b7c <tcp_receive+0x73c>
 183672c:	d0e81917 	ldw	r3,-24476(gp)
 1836730:	e0bffe17 	ldw	r2,-8(fp)
 1836734:	10801517 	ldw	r2,84(r2)
 1836738:	1885c83a 	sub	r2,r3,r2
 183673c:	00810f16 	blt	zero,r2,1836b7c <tcp_receive+0x73c>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 1836740:	e0bffe17 	ldw	r2,-8(fp)
 1836744:	10800883 	ldbu	r2,34(r2)
 1836748:	10803fcc 	andi	r2,r2,255
 183674c:	1080010c 	andi	r2,r2,4
 1836750:	10000b26 	beq	r2,zero,1836780 <tcp_receive+0x340>
        pcb->flags &= ~TF_INFR;
 1836754:	e0bffe17 	ldw	r2,-8(fp)
 1836758:	10c00883 	ldbu	r3,34(r2)
 183675c:	00bffec4 	movi	r2,-5
 1836760:	1884703a 	and	r2,r3,r2
 1836764:	1007883a 	mov	r3,r2
 1836768:	e0bffe17 	ldw	r2,-8(fp)
 183676c:	10c00885 	stb	r3,34(r2)
        pcb->cwnd = pcb->ssthresh;
 1836770:	e0bffe17 	ldw	r2,-8(fp)
 1836774:	10c0148b 	ldhu	r3,82(r2)
 1836778:	e0bffe17 	ldw	r2,-8(fp)
 183677c:	10c0140d 	sth	r3,80(r2)
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 1836780:	e0bffe17 	ldw	r2,-8(fp)
 1836784:	10001285 	stb	zero,74(r2)

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 1836788:	e0bffe17 	ldw	r2,-8(fp)
 183678c:	1080110b 	ldhu	r2,68(r2)
 1836790:	10bfffcc 	andi	r2,r2,65535
 1836794:	10a0001c 	xori	r2,r2,32768
 1836798:	10a00004 	addi	r2,r2,-32768
 183679c:	1005d0fa 	srai	r2,r2,3
 18367a0:	1007883a 	mov	r3,r2
 18367a4:	e0bffe17 	ldw	r2,-8(fp)
 18367a8:	1080118b 	ldhu	r2,70(r2)
 18367ac:	1885883a 	add	r2,r3,r2
 18367b0:	1007883a 	mov	r3,r2
 18367b4:	e0bffe17 	ldw	r2,-8(fp)
 18367b8:	10c0120d 	sth	r3,72(r2)

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
 18367bc:	d0a81917 	ldw	r2,-24476(gp)
 18367c0:	1007883a 	mov	r3,r2
 18367c4:	e0bffe17 	ldw	r2,-8(fp)
 18367c8:	10801317 	ldw	r2,76(r2)
 18367cc:	1885c83a 	sub	r2,r3,r2
 18367d0:	1007883a 	mov	r3,r2
 18367d4:	e0bffe17 	ldw	r2,-8(fp)
 18367d8:	10c01a0d 	sth	r3,104(r2)

      pcb->snd_buf += pcb->acked;
 18367dc:	e0bffe17 	ldw	r2,-8(fp)
 18367e0:	10c01a8b 	ldhu	r3,106(r2)
 18367e4:	e0bffe17 	ldw	r2,-8(fp)
 18367e8:	10801a0b 	ldhu	r2,104(r2)
 18367ec:	1885883a 	add	r2,r3,r2
 18367f0:	1007883a 	mov	r3,r2
 18367f4:	e0bffe17 	ldw	r2,-8(fp)
 18367f8:	10c01a8d 	sth	r3,106(r2)

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 18367fc:	e0bffe17 	ldw	r2,-8(fp)
 1836800:	100012c5 	stb	zero,75(r2)
      pcb->lastack = ackno;
 1836804:	d0e81917 	ldw	r3,-24476(gp)
 1836808:	e0bffe17 	ldw	r2,-8(fp)
 183680c:	10c01315 	stw	r3,76(r2)

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 1836810:	e0bffe17 	ldw	r2,-8(fp)
 1836814:	10800617 	ldw	r2,24(r2)
 1836818:	10800130 	cmpltui	r2,r2,4
 183681c:	10006a1e 	bne	r2,zero,18369c8 <tcp_receive+0x588>
        if (pcb->cwnd < pcb->ssthresh) {
 1836820:	e0bffe17 	ldw	r2,-8(fp)
 1836824:	10c0140b 	ldhu	r3,80(r2)
 1836828:	e0bffe17 	ldw	r2,-8(fp)
 183682c:	1080148b 	ldhu	r2,82(r2)
 1836830:	18ffffcc 	andi	r3,r3,65535
 1836834:	10bfffcc 	andi	r2,r2,65535
 1836838:	1880142e 	bgeu	r3,r2,183688c <tcp_receive+0x44c>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 183683c:	e0bffe17 	ldw	r2,-8(fp)
 1836840:	10c0140b 	ldhu	r3,80(r2)
 1836844:	e0bffe17 	ldw	r2,-8(fp)
 1836848:	10800e8b 	ldhu	r2,58(r2)
 183684c:	1885883a 	add	r2,r3,r2
 1836850:	1009883a 	mov	r4,r2
 1836854:	e0bffe17 	ldw	r2,-8(fp)
 1836858:	10c0140b 	ldhu	r3,80(r2)
 183685c:	20bfffcc 	andi	r2,r4,65535
 1836860:	18ffffcc 	andi	r3,r3,65535
 1836864:	1880582e 	bgeu	r3,r2,18369c8 <tcp_receive+0x588>
            pcb->cwnd += pcb->mss;
 1836868:	e0bffe17 	ldw	r2,-8(fp)
 183686c:	10c0140b 	ldhu	r3,80(r2)
 1836870:	e0bffe17 	ldw	r2,-8(fp)
 1836874:	10800e8b 	ldhu	r2,58(r2)
 1836878:	1885883a 	add	r2,r3,r2
 183687c:	1007883a 	mov	r3,r2
 1836880:	e0bffe17 	ldw	r2,-8(fp)
 1836884:	10c0140d 	sth	r3,80(r2)
 1836888:	00004f06 	br	18369c8 <tcp_receive+0x588>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 183688c:	e0bffe17 	ldw	r2,-8(fp)
 1836890:	1400140b 	ldhu	r16,80(r2)
 1836894:	e0bffe17 	ldw	r2,-8(fp)
 1836898:	10800e8b 	ldhu	r2,58(r2)
 183689c:	10ffffcc 	andi	r3,r2,65535
 18368a0:	e0bffe17 	ldw	r2,-8(fp)
 18368a4:	10800e8b 	ldhu	r2,58(r2)
 18368a8:	10bfffcc 	andi	r2,r2,65535
 18368ac:	1887383a 	mul	r3,r3,r2
 18368b0:	e0bffe17 	ldw	r2,-8(fp)
 18368b4:	1080140b 	ldhu	r2,80(r2)
 18368b8:	10bfffcc 	andi	r2,r2,65535
 18368bc:	100b883a 	mov	r5,r2
 18368c0:	1809883a 	mov	r4,r3
 18368c4:	180ab240 	call	180ab24 <__divsi3>
 18368c8:	8085883a 	add	r2,r16,r2
 18368cc:	e0bffb0d 	sth	r2,-20(fp)
          if (new_cwnd > pcb->cwnd) {
 18368d0:	e0bffe17 	ldw	r2,-8(fp)
 18368d4:	1080140b 	ldhu	r2,80(r2)
 18368d8:	10ffffcc 	andi	r3,r2,65535
 18368dc:	e0bffb0b 	ldhu	r2,-20(fp)
 18368e0:	1880392e 	bgeu	r3,r2,18369c8 <tcp_receive+0x588>
            pcb->cwnd = new_cwnd;
 18368e4:	e0bffe17 	ldw	r2,-8(fp)
 18368e8:	e0fffb0b 	ldhu	r3,-20(fp)
 18368ec:	10c0140d 	sth	r3,80(r2)
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 18368f0:	00003506 	br	18369c8 <tcp_receive+0x588>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 18368f4:	e0bffe17 	ldw	r2,-8(fp)
 18368f8:	10801d17 	ldw	r2,116(r2)
 18368fc:	e0bff415 	stw	r2,-48(fp)
        pcb->unacked = pcb->unacked->next;
 1836900:	e0bffe17 	ldw	r2,-8(fp)
 1836904:	10801d17 	ldw	r2,116(r2)
 1836908:	10c00017 	ldw	r3,0(r2)
 183690c:	e0bffe17 	ldw	r2,-8(fp)
 1836910:	10c01d15 	stw	r3,116(r2)

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 1836914:	e0bffe17 	ldw	r2,-8(fp)
 1836918:	10801a0b 	ldhu	r2,104(r2)
 183691c:	10bfffcc 	andi	r2,r2,65535
 1836920:	10001b26 	beq	r2,zero,1836990 <tcp_receive+0x550>
 1836924:	e0bff417 	ldw	r2,-48(fp)
 1836928:	10800417 	ldw	r2,16(r2)
 183692c:	10c00303 	ldbu	r3,12(r2)
 1836930:	10800343 	ldbu	r2,13(r2)
 1836934:	1004923a 	slli	r2,r2,8
 1836938:	10c4b03a 	or	r2,r2,r3
 183693c:	10bfffcc 	andi	r2,r2,65535
 1836940:	1004d23a 	srli	r2,r2,8
 1836944:	10ffffcc 	andi	r3,r2,65535
 1836948:	e0bff417 	ldw	r2,-48(fp)
 183694c:	10800417 	ldw	r2,16(r2)
 1836950:	11000303 	ldbu	r4,12(r2)
 1836954:	10800343 	ldbu	r2,13(r2)
 1836958:	1004923a 	slli	r2,r2,8
 183695c:	1104b03a 	or	r2,r2,r4
 1836960:	10bfffcc 	andi	r2,r2,65535
 1836964:	1004923a 	slli	r2,r2,8
 1836968:	10bfffcc 	andi	r2,r2,65535
 183696c:	1884b03a 	or	r2,r3,r2
 1836970:	1080004c 	andi	r2,r2,1
 1836974:	10000626 	beq	r2,zero,1836990 <tcp_receive+0x550>
          pcb->acked--;
 1836978:	e0bffe17 	ldw	r2,-8(fp)
 183697c:	10801a0b 	ldhu	r2,104(r2)
 1836980:	10bfffc4 	addi	r2,r2,-1
 1836984:	1007883a 	mov	r3,r2
 1836988:	e0bffe17 	ldw	r2,-8(fp)
 183698c:	10c01a0d 	sth	r3,104(r2)
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
 1836990:	e0bff417 	ldw	r2,-48(fp)
 1836994:	10800117 	ldw	r2,4(r2)
 1836998:	1009883a 	mov	r4,r2
 183699c:	181a3680 	call	181a368 <pbuf_clen>
 18369a0:	1009883a 	mov	r4,r2
 18369a4:	e0bffe17 	ldw	r2,-8(fp)
 18369a8:	10c01b0b 	ldhu	r3,108(r2)
 18369ac:	20803fcc 	andi	r2,r4,255
 18369b0:	1885c83a 	sub	r2,r3,r2
 18369b4:	1007883a 	mov	r3,r2
 18369b8:	e0bffe17 	ldw	r2,-8(fp)
 18369bc:	10c01b0d 	sth	r3,108(r2)
        tcp_seg_free(next);
 18369c0:	e13ff417 	ldw	r4,-48(fp)
 18369c4:	181cad80 	call	181cad8 <tcp_seg_free>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 18369c8:	e0bffe17 	ldw	r2,-8(fp)
 18369cc:	10801d17 	ldw	r2,116(r2)
 18369d0:	10005e26 	beq	r2,zero,1836b4c <tcp_receive+0x70c>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 18369d4:	e0bffe17 	ldw	r2,-8(fp)
 18369d8:	10801d17 	ldw	r2,116(r2)
 18369dc:	10800417 	ldw	r2,16(r2)
 18369e0:	10c00103 	ldbu	r3,4(r2)
 18369e4:	11000143 	ldbu	r4,5(r2)
 18369e8:	2008923a 	slli	r4,r4,8
 18369ec:	20c6b03a 	or	r3,r4,r3
 18369f0:	11000183 	ldbu	r4,6(r2)
 18369f4:	2008943a 	slli	r4,r4,16
 18369f8:	20c6b03a 	or	r3,r4,r3
 18369fc:	108001c3 	ldbu	r2,7(r2)
 1836a00:	1004963a 	slli	r2,r2,24
 1836a04:	10c4b03a 	or	r2,r2,r3
 1836a08:	1006d63a 	srli	r3,r2,24
 1836a0c:	e0bffe17 	ldw	r2,-8(fp)
 1836a10:	10801d17 	ldw	r2,116(r2)
 1836a14:	10800417 	ldw	r2,16(r2)
 1836a18:	11000103 	ldbu	r4,4(r2)
 1836a1c:	11400143 	ldbu	r5,5(r2)
 1836a20:	280a923a 	slli	r5,r5,8
 1836a24:	2908b03a 	or	r4,r5,r4
 1836a28:	11400183 	ldbu	r5,6(r2)
 1836a2c:	280a943a 	slli	r5,r5,16
 1836a30:	2908b03a 	or	r4,r5,r4
 1836a34:	108001c3 	ldbu	r2,7(r2)
 1836a38:	1004963a 	slli	r2,r2,24
 1836a3c:	1104b03a 	or	r2,r2,r4
 1836a40:	1004d23a 	srli	r2,r2,8
 1836a44:	10bfc00c 	andi	r2,r2,65280
 1836a48:	1886b03a 	or	r3,r3,r2
 1836a4c:	e0bffe17 	ldw	r2,-8(fp)
 1836a50:	10801d17 	ldw	r2,116(r2)
 1836a54:	10800417 	ldw	r2,16(r2)
 1836a58:	11000103 	ldbu	r4,4(r2)
 1836a5c:	11400143 	ldbu	r5,5(r2)
 1836a60:	280a923a 	slli	r5,r5,8
 1836a64:	2908b03a 	or	r4,r5,r4
 1836a68:	11400183 	ldbu	r5,6(r2)
 1836a6c:	280a943a 	slli	r5,r5,16
 1836a70:	2908b03a 	or	r4,r5,r4
 1836a74:	108001c3 	ldbu	r2,7(r2)
 1836a78:	1004963a 	slli	r2,r2,24
 1836a7c:	1104b03a 	or	r2,r2,r4
 1836a80:	10bfc00c 	andi	r2,r2,65280
 1836a84:	1004923a 	slli	r2,r2,8
 1836a88:	1886b03a 	or	r3,r3,r2
 1836a8c:	e0bffe17 	ldw	r2,-8(fp)
 1836a90:	10801d17 	ldw	r2,116(r2)
 1836a94:	10800417 	ldw	r2,16(r2)
 1836a98:	11000103 	ldbu	r4,4(r2)
 1836a9c:	11400143 	ldbu	r5,5(r2)
 1836aa0:	280a923a 	slli	r5,r5,8
 1836aa4:	2908b03a 	or	r4,r5,r4
 1836aa8:	11400183 	ldbu	r5,6(r2)
 1836aac:	280a943a 	slli	r5,r5,16
 1836ab0:	2908b03a 	or	r4,r5,r4
 1836ab4:	108001c3 	ldbu	r2,7(r2)
 1836ab8:	1004963a 	slli	r2,r2,24
 1836abc:	1104b03a 	or	r2,r2,r4
 1836ac0:	1004963a 	slli	r2,r2,24
 1836ac4:	1886b03a 	or	r3,r3,r2
 1836ac8:	e0bffe17 	ldw	r2,-8(fp)
 1836acc:	10801d17 	ldw	r2,116(r2)
 1836ad0:	1080020b 	ldhu	r2,8(r2)
 1836ad4:	113fffcc 	andi	r4,r2,65535
 1836ad8:	e0bffe17 	ldw	r2,-8(fp)
 1836adc:	10801d17 	ldw	r2,116(r2)
 1836ae0:	10800417 	ldw	r2,16(r2)
 1836ae4:	11400303 	ldbu	r5,12(r2)
 1836ae8:	10800343 	ldbu	r2,13(r2)
 1836aec:	1004923a 	slli	r2,r2,8
 1836af0:	1144b03a 	or	r2,r2,r5
 1836af4:	10bfffcc 	andi	r2,r2,65535
 1836af8:	1004d23a 	srli	r2,r2,8
 1836afc:	117fffcc 	andi	r5,r2,65535
 1836b00:	e0bffe17 	ldw	r2,-8(fp)
 1836b04:	10801d17 	ldw	r2,116(r2)
 1836b08:	10800417 	ldw	r2,16(r2)
 1836b0c:	11800303 	ldbu	r6,12(r2)
 1836b10:	10800343 	ldbu	r2,13(r2)
 1836b14:	1004923a 	slli	r2,r2,8
 1836b18:	1184b03a 	or	r2,r2,r6
 1836b1c:	10bfffcc 	andi	r2,r2,65535
 1836b20:	1004923a 	slli	r2,r2,8
 1836b24:	10bfffcc 	andi	r2,r2,65535
 1836b28:	2884b03a 	or	r2,r5,r2
 1836b2c:	108000cc 	andi	r2,r2,3
 1836b30:	1004c03a 	cmpne	r2,r2,zero
 1836b34:	10803fcc 	andi	r2,r2,255
 1836b38:	2085883a 	add	r2,r4,r2
 1836b3c:	1887883a 	add	r3,r3,r2
 1836b40:	d0a81917 	ldw	r2,-24476(gp)
 1836b44:	1885c83a 	sub	r2,r3,r2
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 1836b48:	00bf6a0e 	bge	zero,r2,18368f4 <__ram_exceptions_end+0xff826604>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 1836b4c:	e0bffe17 	ldw	r2,-8(fp)
 1836b50:	10801d17 	ldw	r2,116(r2)
 1836b54:	1000041e 	bne	r2,zero,1836b68 <tcp_receive+0x728>
        pcb->rtime = -1;
 1836b58:	e0bffe17 	ldw	r2,-8(fp)
 1836b5c:	00ffffc4 	movi	r3,-1
 1836b60:	10c00e0d 	sth	r3,56(r2)
 1836b64:	00000206 	br	1836b70 <tcp_receive+0x730>
      else
        pcb->rtime = 0;
 1836b68:	e0bffe17 	ldw	r2,-8(fp)
 1836b6c:	10000e0d 	sth	zero,56(r2)

      pcb->polltmr = 0;
 1836b70:	e0bffe17 	ldw	r2,-8(fp)
 1836b74:	100008c5 	stb	zero,35(r2)
 1836b78:	00000206 	br	1836b84 <tcp_receive+0x744>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 1836b7c:	e0bffe17 	ldw	r2,-8(fp)
 1836b80:	10001a0d 	sth	zero,104(r2)
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 1836b84:	00003a06 	br	1836c70 <tcp_receive+0x830>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 1836b88:	e0bffe17 	ldw	r2,-8(fp)
 1836b8c:	10801c17 	ldw	r2,112(r2)
 1836b90:	e0bff415 	stw	r2,-48(fp)
      pcb->unsent = pcb->unsent->next;
 1836b94:	e0bffe17 	ldw	r2,-8(fp)
 1836b98:	10801c17 	ldw	r2,112(r2)
 1836b9c:	10c00017 	ldw	r3,0(r2)
 1836ba0:	e0bffe17 	ldw	r2,-8(fp)
 1836ba4:	10c01c15 	stw	r3,112(r2)
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 1836ba8:	e0bffe17 	ldw	r2,-8(fp)
 1836bac:	10801c17 	ldw	r2,112(r2)
 1836bb0:	1000021e 	bne	r2,zero,1836bbc <tcp_receive+0x77c>
        pcb->unsent_oversize = 0;
 1836bb4:	e0bffe17 	ldw	r2,-8(fp)
 1836bb8:	10001b8d 	sth	zero,110(r2)
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 1836bbc:	e0bffe17 	ldw	r2,-8(fp)
 1836bc0:	10801a0b 	ldhu	r2,104(r2)
 1836bc4:	10bfffcc 	andi	r2,r2,65535
 1836bc8:	10001b26 	beq	r2,zero,1836c38 <tcp_receive+0x7f8>
 1836bcc:	e0bff417 	ldw	r2,-48(fp)
 1836bd0:	10800417 	ldw	r2,16(r2)
 1836bd4:	10c00303 	ldbu	r3,12(r2)
 1836bd8:	10800343 	ldbu	r2,13(r2)
 1836bdc:	1004923a 	slli	r2,r2,8
 1836be0:	10c4b03a 	or	r2,r2,r3
 1836be4:	10bfffcc 	andi	r2,r2,65535
 1836be8:	1004d23a 	srli	r2,r2,8
 1836bec:	10ffffcc 	andi	r3,r2,65535
 1836bf0:	e0bff417 	ldw	r2,-48(fp)
 1836bf4:	10800417 	ldw	r2,16(r2)
 1836bf8:	11000303 	ldbu	r4,12(r2)
 1836bfc:	10800343 	ldbu	r2,13(r2)
 1836c00:	1004923a 	slli	r2,r2,8
 1836c04:	1104b03a 	or	r2,r2,r4
 1836c08:	10bfffcc 	andi	r2,r2,65535
 1836c0c:	1004923a 	slli	r2,r2,8
 1836c10:	10bfffcc 	andi	r2,r2,65535
 1836c14:	1884b03a 	or	r2,r3,r2
 1836c18:	1080004c 	andi	r2,r2,1
 1836c1c:	10000626 	beq	r2,zero,1836c38 <tcp_receive+0x7f8>
        pcb->acked--;
 1836c20:	e0bffe17 	ldw	r2,-8(fp)
 1836c24:	10801a0b 	ldhu	r2,104(r2)
 1836c28:	10bfffc4 	addi	r2,r2,-1
 1836c2c:	1007883a 	mov	r3,r2
 1836c30:	e0bffe17 	ldw	r2,-8(fp)
 1836c34:	10c01a0d 	sth	r3,104(r2)
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
 1836c38:	e0bff417 	ldw	r2,-48(fp)
 1836c3c:	10800117 	ldw	r2,4(r2)
 1836c40:	1009883a 	mov	r4,r2
 1836c44:	181a3680 	call	181a368 <pbuf_clen>
 1836c48:	1009883a 	mov	r4,r2
 1836c4c:	e0bffe17 	ldw	r2,-8(fp)
 1836c50:	10c01b0b 	ldhu	r3,108(r2)
 1836c54:	20803fcc 	andi	r2,r4,255
 1836c58:	1885c83a 	sub	r2,r3,r2
 1836c5c:	1007883a 	mov	r3,r2
 1836c60:	e0bffe17 	ldw	r2,-8(fp)
 1836c64:	10c01b0d 	sth	r3,108(r2)
      tcp_seg_free(next);
 1836c68:	e13ff417 	ldw	r4,-48(fp)
 1836c6c:	181cad80 	call	181cad8 <tcp_seg_free>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 1836c70:	e0bffe17 	ldw	r2,-8(fp)
 1836c74:	10801c17 	ldw	r2,112(r2)
 1836c78:	10006326 	beq	r2,zero,1836e08 <tcp_receive+0x9c8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 1836c7c:	d0e81917 	ldw	r3,-24476(gp)
 1836c80:	e0bffe17 	ldw	r2,-8(fp)
 1836c84:	10801c17 	ldw	r2,112(r2)
 1836c88:	10800417 	ldw	r2,16(r2)
 1836c8c:	11000103 	ldbu	r4,4(r2)
 1836c90:	11400143 	ldbu	r5,5(r2)
 1836c94:	280a923a 	slli	r5,r5,8
 1836c98:	2908b03a 	or	r4,r5,r4
 1836c9c:	11400183 	ldbu	r5,6(r2)
 1836ca0:	280a943a 	slli	r5,r5,16
 1836ca4:	2908b03a 	or	r4,r5,r4
 1836ca8:	108001c3 	ldbu	r2,7(r2)
 1836cac:	1004963a 	slli	r2,r2,24
 1836cb0:	1104b03a 	or	r2,r2,r4
 1836cb4:	1008d63a 	srli	r4,r2,24
 1836cb8:	e0bffe17 	ldw	r2,-8(fp)
 1836cbc:	10801c17 	ldw	r2,112(r2)
 1836cc0:	10800417 	ldw	r2,16(r2)
 1836cc4:	11400103 	ldbu	r5,4(r2)
 1836cc8:	11800143 	ldbu	r6,5(r2)
 1836ccc:	300c923a 	slli	r6,r6,8
 1836cd0:	314ab03a 	or	r5,r6,r5
 1836cd4:	11800183 	ldbu	r6,6(r2)
 1836cd8:	300c943a 	slli	r6,r6,16
 1836cdc:	314ab03a 	or	r5,r6,r5
 1836ce0:	108001c3 	ldbu	r2,7(r2)
 1836ce4:	1004963a 	slli	r2,r2,24
 1836ce8:	1144b03a 	or	r2,r2,r5
 1836cec:	1004d23a 	srli	r2,r2,8
 1836cf0:	10bfc00c 	andi	r2,r2,65280
 1836cf4:	2088b03a 	or	r4,r4,r2
 1836cf8:	e0bffe17 	ldw	r2,-8(fp)
 1836cfc:	10801c17 	ldw	r2,112(r2)
 1836d00:	10800417 	ldw	r2,16(r2)
 1836d04:	11400103 	ldbu	r5,4(r2)
 1836d08:	11800143 	ldbu	r6,5(r2)
 1836d0c:	300c923a 	slli	r6,r6,8
 1836d10:	314ab03a 	or	r5,r6,r5
 1836d14:	11800183 	ldbu	r6,6(r2)
 1836d18:	300c943a 	slli	r6,r6,16
 1836d1c:	314ab03a 	or	r5,r6,r5
 1836d20:	108001c3 	ldbu	r2,7(r2)
 1836d24:	1004963a 	slli	r2,r2,24
 1836d28:	1144b03a 	or	r2,r2,r5
 1836d2c:	10bfc00c 	andi	r2,r2,65280
 1836d30:	1004923a 	slli	r2,r2,8
 1836d34:	2088b03a 	or	r4,r4,r2
 1836d38:	e0bffe17 	ldw	r2,-8(fp)
 1836d3c:	10801c17 	ldw	r2,112(r2)
 1836d40:	10800417 	ldw	r2,16(r2)
 1836d44:	11400103 	ldbu	r5,4(r2)
 1836d48:	11800143 	ldbu	r6,5(r2)
 1836d4c:	300c923a 	slli	r6,r6,8
 1836d50:	314ab03a 	or	r5,r6,r5
 1836d54:	11800183 	ldbu	r6,6(r2)
 1836d58:	300c943a 	slli	r6,r6,16
 1836d5c:	314ab03a 	or	r5,r6,r5
 1836d60:	108001c3 	ldbu	r2,7(r2)
 1836d64:	1004963a 	slli	r2,r2,24
 1836d68:	1144b03a 	or	r2,r2,r5
 1836d6c:	1004963a 	slli	r2,r2,24
 1836d70:	2088b03a 	or	r4,r4,r2
 1836d74:	e0bffe17 	ldw	r2,-8(fp)
 1836d78:	10801c17 	ldw	r2,112(r2)
 1836d7c:	1080020b 	ldhu	r2,8(r2)
 1836d80:	117fffcc 	andi	r5,r2,65535
 1836d84:	e0bffe17 	ldw	r2,-8(fp)
 1836d88:	10801c17 	ldw	r2,112(r2)
 1836d8c:	10800417 	ldw	r2,16(r2)
 1836d90:	11800303 	ldbu	r6,12(r2)
 1836d94:	10800343 	ldbu	r2,13(r2)
 1836d98:	1004923a 	slli	r2,r2,8
 1836d9c:	1184b03a 	or	r2,r2,r6
 1836da0:	10bfffcc 	andi	r2,r2,65535
 1836da4:	1004d23a 	srli	r2,r2,8
 1836da8:	11bfffcc 	andi	r6,r2,65535
 1836dac:	e0bffe17 	ldw	r2,-8(fp)
 1836db0:	10801c17 	ldw	r2,112(r2)
 1836db4:	10800417 	ldw	r2,16(r2)
 1836db8:	11c00303 	ldbu	r7,12(r2)
 1836dbc:	10800343 	ldbu	r2,13(r2)
 1836dc0:	1004923a 	slli	r2,r2,8
 1836dc4:	11c4b03a 	or	r2,r2,r7
 1836dc8:	10bfffcc 	andi	r2,r2,65535
 1836dcc:	1004923a 	slli	r2,r2,8
 1836dd0:	10bfffcc 	andi	r2,r2,65535
 1836dd4:	3084b03a 	or	r2,r6,r2
 1836dd8:	108000cc 	andi	r2,r2,3
 1836ddc:	1004c03a 	cmpne	r2,r2,zero
 1836de0:	10803fcc 	andi	r2,r2,255
 1836de4:	2885883a 	add	r2,r5,r2
 1836de8:	2085883a 	add	r2,r4,r2
 1836dec:	1885c83a 	sub	r2,r3,r2
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 1836df0:	10000516 	blt	r2,zero,1836e08 <tcp_receive+0x9c8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 1836df4:	d0e81917 	ldw	r3,-24476(gp)
 1836df8:	e0bffe17 	ldw	r2,-8(fp)
 1836dfc:	10801517 	ldw	r2,84(r2)
 1836e00:	1885c83a 	sub	r2,r3,r2
 1836e04:	00bf600e 	bge	zero,r2,1836b88 <__ram_exceptions_end+0xff826898>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 1836e08:	e0bffe17 	ldw	r2,-8(fp)
 1836e0c:	10800f17 	ldw	r2,60(r2)
 1836e10:	10004126 	beq	r2,zero,1836f18 <tcp_receive+0xad8>
 1836e14:	e0bffe17 	ldw	r2,-8(fp)
 1836e18:	10c01017 	ldw	r3,64(r2)
 1836e1c:	d0a81917 	ldw	r2,-24476(gp)
 1836e20:	1885c83a 	sub	r2,r3,r2
 1836e24:	10003c0e 	bge	r2,zero,1836f18 <tcp_receive+0xad8>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 1836e28:	d0a7f417 	ldw	r2,-24624(gp)
 1836e2c:	1007883a 	mov	r3,r2
 1836e30:	e0bffe17 	ldw	r2,-8(fp)
 1836e34:	10800f17 	ldw	r2,60(r2)
 1836e38:	1885c83a 	sub	r2,r3,r2
 1836e3c:	e0bff80d 	sth	r2,-32(fp)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 1836e40:	e0bff80b 	ldhu	r2,-32(fp)
 1836e44:	e0fffe17 	ldw	r3,-8(fp)
 1836e48:	18c0110b 	ldhu	r3,68(r3)
 1836e4c:	18ffffcc 	andi	r3,r3,65535
 1836e50:	18e0001c 	xori	r3,r3,32768
 1836e54:	18e00004 	addi	r3,r3,-32768
 1836e58:	1807d0fa 	srai	r3,r3,3
 1836e5c:	10c5c83a 	sub	r2,r2,r3
 1836e60:	e0bff80d 	sth	r2,-32(fp)
      pcb->sa += m;
 1836e64:	e0bffe17 	ldw	r2,-8(fp)
 1836e68:	1080110b 	ldhu	r2,68(r2)
 1836e6c:	1007883a 	mov	r3,r2
 1836e70:	e0bff80b 	ldhu	r2,-32(fp)
 1836e74:	1885883a 	add	r2,r3,r2
 1836e78:	1007883a 	mov	r3,r2
 1836e7c:	e0bffe17 	ldw	r2,-8(fp)
 1836e80:	10c0110d 	sth	r3,68(r2)
      if (m < 0) {
 1836e84:	e0bff80f 	ldh	r2,-32(fp)
 1836e88:	1000030e 	bge	r2,zero,1836e98 <tcp_receive+0xa58>
        m = -m;
 1836e8c:	e0bff80b 	ldhu	r2,-32(fp)
 1836e90:	0085c83a 	sub	r2,zero,r2
 1836e94:	e0bff80d 	sth	r2,-32(fp)
      }
      m = m - (pcb->sv >> 2);
 1836e98:	e0bff80b 	ldhu	r2,-32(fp)
 1836e9c:	e0fffe17 	ldw	r3,-8(fp)
 1836ea0:	18c0118b 	ldhu	r3,70(r3)
 1836ea4:	18ffffcc 	andi	r3,r3,65535
 1836ea8:	18e0001c 	xori	r3,r3,32768
 1836eac:	18e00004 	addi	r3,r3,-32768
 1836eb0:	1807d0ba 	srai	r3,r3,2
 1836eb4:	10c5c83a 	sub	r2,r2,r3
 1836eb8:	e0bff80d 	sth	r2,-32(fp)
      pcb->sv += m;
 1836ebc:	e0bffe17 	ldw	r2,-8(fp)
 1836ec0:	1080118b 	ldhu	r2,70(r2)
 1836ec4:	1007883a 	mov	r3,r2
 1836ec8:	e0bff80b 	ldhu	r2,-32(fp)
 1836ecc:	1885883a 	add	r2,r3,r2
 1836ed0:	1007883a 	mov	r3,r2
 1836ed4:	e0bffe17 	ldw	r2,-8(fp)
 1836ed8:	10c0118d 	sth	r3,70(r2)
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 1836edc:	e0bffe17 	ldw	r2,-8(fp)
 1836ee0:	1080110b 	ldhu	r2,68(r2)
 1836ee4:	10bfffcc 	andi	r2,r2,65535
 1836ee8:	10a0001c 	xori	r2,r2,32768
 1836eec:	10a00004 	addi	r2,r2,-32768
 1836ef0:	1005d0fa 	srai	r2,r2,3
 1836ef4:	1007883a 	mov	r3,r2
 1836ef8:	e0bffe17 	ldw	r2,-8(fp)
 1836efc:	1080118b 	ldhu	r2,70(r2)
 1836f00:	1885883a 	add	r2,r3,r2
 1836f04:	1007883a 	mov	r3,r2
 1836f08:	e0bffe17 	ldw	r2,-8(fp)
 1836f0c:	10c0120d 	sth	r3,72(r2)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
 1836f10:	e0bffe17 	ldw	r2,-8(fp)
 1836f14:	10000f15 	stw	zero,60(r2)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 1836f18:	d0a81a8b 	ldhu	r2,-24470(gp)
 1836f1c:	10bfffcc 	andi	r2,r2,65535
 1836f20:	10052726 	beq	r2,zero,18383c0 <tcp_receive+0x1f80>
 1836f24:	e0bffe17 	ldw	r2,-8(fp)
 1836f28:	10800617 	ldw	r2,24(r2)
 1836f2c:	108001e8 	cmpgeui	r2,r2,7
 1836f30:	1005231e 	bne	r2,zero,18383c0 <tcp_receive+0x1f80>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
 1836f34:	e0bffe17 	ldw	r2,-8(fp)
 1836f38:	10c00b17 	ldw	r3,44(r2)
 1836f3c:	d0a81817 	ldw	r2,-24480(gp)
 1836f40:	1885c83a 	sub	r2,r3,r2
 1836f44:	10bfffc4 	addi	r2,r2,-1
 1836f48:	10007b16 	blt	r2,zero,1837138 <tcp_receive+0xcf8>
 1836f4c:	e0bffe17 	ldw	r2,-8(fp)
 1836f50:	10c00b17 	ldw	r3,44(r2)
 1836f54:	d0a81a8b 	ldhu	r2,-24470(gp)
 1836f58:	113fffcc 	andi	r4,r2,65535
 1836f5c:	d0a81817 	ldw	r2,-24480(gp)
 1836f60:	2085883a 	add	r2,r4,r2
 1836f64:	1885c83a 	sub	r2,r3,r2
 1836f68:	10800044 	addi	r2,r2,1
 1836f6c:	00807216 	blt	zero,r2,1837138 <tcp_receive+0xcf8>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
 1836f70:	e0bffe17 	ldw	r2,-8(fp)
 1836f74:	10c00b17 	ldw	r3,44(r2)
 1836f78:	d0a81817 	ldw	r2,-24480(gp)
 1836f7c:	1885c83a 	sub	r2,r3,r2
 1836f80:	e0bff715 	stw	r2,-36(fp)
      p = inseg.p;
 1836f84:	00806134 	movhi	r2,388
 1836f88:	109e4904 	addi	r2,r2,31012
 1836f8c:	10800117 	ldw	r2,4(r2)
 1836f90:	e0bff615 	stw	r2,-40(fp)
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 1836f94:	00806134 	movhi	r2,388
 1836f98:	109e4904 	addi	r2,r2,31012
 1836f9c:	10800117 	ldw	r2,4(r2)
 1836fa0:	1080028b 	ldhu	r2,10(r2)
 1836fa4:	10ffffcc 	andi	r3,r2,65535
 1836fa8:	e0bff717 	ldw	r2,-36(fp)
 1836fac:	1880240e 	bge	r3,r2,1837040 <tcp_receive+0xc00>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 1836fb0:	00806134 	movhi	r2,388
 1836fb4:	109e4904 	addi	r2,r2,31012
 1836fb8:	10800117 	ldw	r2,4(r2)
 1836fbc:	1080020b 	ldhu	r2,8(r2)
 1836fc0:	e0fff717 	ldw	r3,-36(fp)
 1836fc4:	10c5c83a 	sub	r2,r2,r3
 1836fc8:	e0bffb8d 	sth	r2,-18(fp)
        while (p->len < off) {
 1836fcc:	00000e06 	br	1837008 <tcp_receive+0xbc8>
          off -= p->len;
 1836fd0:	e0bff617 	ldw	r2,-40(fp)
 1836fd4:	1080028b 	ldhu	r2,10(r2)
 1836fd8:	10bfffcc 	andi	r2,r2,65535
 1836fdc:	e0fff717 	ldw	r3,-36(fp)
 1836fe0:	1885c83a 	sub	r2,r3,r2
 1836fe4:	e0bff715 	stw	r2,-36(fp)
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 1836fe8:	e0bff617 	ldw	r2,-40(fp)
 1836fec:	e0fffb8b 	ldhu	r3,-18(fp)
 1836ff0:	10c0020d 	sth	r3,8(r2)
          p->len = 0;
 1836ff4:	e0bff617 	ldw	r2,-40(fp)
 1836ff8:	1000028d 	sth	zero,10(r2)
          p = p->next;
 1836ffc:	e0bff617 	ldw	r2,-40(fp)
 1837000:	10800017 	ldw	r2,0(r2)
 1837004:	e0bff615 	stw	r2,-40(fp)
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
 1837008:	e0bff617 	ldw	r2,-40(fp)
 183700c:	1080028b 	ldhu	r2,10(r2)
 1837010:	10ffffcc 	andi	r3,r2,65535
 1837014:	e0bff717 	ldw	r2,-36(fp)
 1837018:	18bfed16 	blt	r3,r2,1836fd0 <__ram_exceptions_end+0xff826ce0>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
 183701c:	e0bff717 	ldw	r2,-36(fp)
 1837020:	0085c83a 	sub	r2,zero,r2
 1837024:	10bfffcc 	andi	r2,r2,65535
 1837028:	10a0001c 	xori	r2,r2,32768
 183702c:	10a00004 	addi	r2,r2,-32768
 1837030:	100b883a 	mov	r5,r2
 1837034:	e13ff617 	ldw	r4,-40(fp)
 1837038:	181a07c0 	call	181a07c <pbuf_header>
 183703c:	00000b06 	br	183706c <tcp_receive+0xc2c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
 1837040:	00806134 	movhi	r2,388
 1837044:	109e4904 	addi	r2,r2,31012
 1837048:	10800117 	ldw	r2,4(r2)
 183704c:	e0fff717 	ldw	r3,-36(fp)
 1837050:	00c7c83a 	sub	r3,zero,r3
 1837054:	18ffffcc 	andi	r3,r3,65535
 1837058:	18e0001c 	xori	r3,r3,32768
 183705c:	18e00004 	addi	r3,r3,-32768
 1837060:	180b883a 	mov	r5,r3
 1837064:	1009883a 	mov	r4,r2
 1837068:	181a07c0 	call	181a07c <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 183706c:	00806134 	movhi	r2,388
 1837070:	109e4904 	addi	r2,r2,31012
 1837074:	1080020b 	ldhu	r2,8(r2)
 1837078:	d0e81817 	ldw	r3,-24480(gp)
 183707c:	1809883a 	mov	r4,r3
 1837080:	e0fffe17 	ldw	r3,-8(fp)
 1837084:	18c00b17 	ldw	r3,44(r3)
 1837088:	20c7c83a 	sub	r3,r4,r3
 183708c:	10c5883a 	add	r2,r2,r3
 1837090:	1007883a 	mov	r3,r2
 1837094:	00806134 	movhi	r2,388
 1837098:	109e4904 	addi	r2,r2,31012
 183709c:	10c0020d 	sth	r3,8(r2)
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 18370a0:	00806134 	movhi	r2,388
 18370a4:	109e4904 	addi	r2,r2,31012
 18370a8:	10800417 	ldw	r2,16(r2)
 18370ac:	e0fffe17 	ldw	r3,-8(fp)
 18370b0:	18c00b17 	ldw	r3,44(r3)
 18370b4:	d0e81815 	stw	r3,-24480(gp)
 18370b8:	d0e81817 	ldw	r3,-24480(gp)
 18370bc:	19803fcc 	andi	r6,r3,255
 18370c0:	11000103 	ldbu	r4,4(r2)
 18370c4:	2008703a 	and	r4,r4,zero
 18370c8:	200b883a 	mov	r5,r4
 18370cc:	3009883a 	mov	r4,r6
 18370d0:	2908b03a 	or	r4,r5,r4
 18370d4:	11000105 	stb	r4,4(r2)
 18370d8:	1808d23a 	srli	r4,r3,8
 18370dc:	21803fcc 	andi	r6,r4,255
 18370e0:	11000143 	ldbu	r4,5(r2)
 18370e4:	2008703a 	and	r4,r4,zero
 18370e8:	200b883a 	mov	r5,r4
 18370ec:	3009883a 	mov	r4,r6
 18370f0:	2908b03a 	or	r4,r5,r4
 18370f4:	11000145 	stb	r4,5(r2)
 18370f8:	1808d43a 	srli	r4,r3,16
 18370fc:	21803fcc 	andi	r6,r4,255
 1837100:	11000183 	ldbu	r4,6(r2)
 1837104:	2008703a 	and	r4,r4,zero
 1837108:	200b883a 	mov	r5,r4
 183710c:	3009883a 	mov	r4,r6
 1837110:	2908b03a 	or	r4,r5,r4
 1837114:	11000185 	stb	r4,6(r2)
 1837118:	180ad63a 	srli	r5,r3,24
 183711c:	10c001c3 	ldbu	r3,7(r2)
 1837120:	1806703a 	and	r3,r3,zero
 1837124:	1809883a 	mov	r4,r3
 1837128:	2807883a 	mov	r3,r5
 183712c:	20c6b03a 	or	r3,r4,r3
 1837130:	10c001c5 	stb	r3,7(r2)
 1837134:	00000b06 	br	1837164 <tcp_receive+0xd24>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
 1837138:	d0e81817 	ldw	r3,-24480(gp)
 183713c:	e0bffe17 	ldw	r2,-8(fp)
 1837140:	10800b17 	ldw	r2,44(r2)
 1837144:	1885c83a 	sub	r2,r3,r2
 1837148:	1000060e 	bge	r2,zero,1837164 <tcp_receive+0xd24>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 183714c:	e0bffe17 	ldw	r2,-8(fp)
 1837150:	10800883 	ldbu	r2,34(r2)
 1837154:	10800094 	ori	r2,r2,2
 1837158:	1007883a 	mov	r3,r2
 183715c:	e0bffe17 	ldw	r2,-8(fp)
 1837160:	10c00885 	stb	r3,34(r2)
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 1837164:	d0e81817 	ldw	r3,-24480(gp)
 1837168:	e0bffe17 	ldw	r2,-8(fp)
 183716c:	10800b17 	ldw	r2,44(r2)
 1837170:	1885c83a 	sub	r2,r3,r2
 1837174:	10048e16 	blt	r2,zero,18383b0 <tcp_receive+0x1f70>
 1837178:	d0e81817 	ldw	r3,-24480(gp)
 183717c:	e0bffe17 	ldw	r2,-8(fp)
 1837180:	11000b17 	ldw	r4,44(r2)
 1837184:	e0bffe17 	ldw	r2,-8(fp)
 1837188:	10800c0b 	ldhu	r2,48(r2)
 183718c:	10bfffcc 	andi	r2,r2,65535
 1837190:	2085883a 	add	r2,r4,r2
 1837194:	1885c83a 	sub	r2,r3,r2
 1837198:	10800044 	addi	r2,r2,1
 183719c:	00848416 	blt	zero,r2,18383b0 <tcp_receive+0x1f70>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 18371a0:	e0bffe17 	ldw	r2,-8(fp)
 18371a4:	10c00b17 	ldw	r3,44(r2)
 18371a8:	d0a81817 	ldw	r2,-24480(gp)
 18371ac:	1882cd1e 	bne	r3,r2,1837ce4 <tcp_receive+0x18a4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 18371b0:	00806134 	movhi	r2,388
 18371b4:	109e4904 	addi	r2,r2,31012
 18371b8:	10c0020b 	ldhu	r3,8(r2)
 18371bc:	00806134 	movhi	r2,388
 18371c0:	109e4904 	addi	r2,r2,31012
 18371c4:	10800417 	ldw	r2,16(r2)
 18371c8:	11000303 	ldbu	r4,12(r2)
 18371cc:	10800343 	ldbu	r2,13(r2)
 18371d0:	1004923a 	slli	r2,r2,8
 18371d4:	1104b03a 	or	r2,r2,r4
 18371d8:	10bfffcc 	andi	r2,r2,65535
 18371dc:	1004d23a 	srli	r2,r2,8
 18371e0:	113fffcc 	andi	r4,r2,65535
 18371e4:	00806134 	movhi	r2,388
 18371e8:	109e4904 	addi	r2,r2,31012
 18371ec:	10800417 	ldw	r2,16(r2)
 18371f0:	11400303 	ldbu	r5,12(r2)
 18371f4:	10800343 	ldbu	r2,13(r2)
 18371f8:	1004923a 	slli	r2,r2,8
 18371fc:	1144b03a 	or	r2,r2,r5
 1837200:	10bfffcc 	andi	r2,r2,65535
 1837204:	1004923a 	slli	r2,r2,8
 1837208:	10bfffcc 	andi	r2,r2,65535
 183720c:	2084b03a 	or	r2,r4,r2
 1837210:	108000cc 	andi	r2,r2,3
 1837214:	1004c03a 	cmpne	r2,r2,zero
 1837218:	10803fcc 	andi	r2,r2,255
 183721c:	1885883a 	add	r2,r3,r2
 1837220:	d0a81a8d 	sth	r2,-24470(gp)

        if (tcplen > pcb->rcv_wnd) {
 1837224:	e0bffe17 	ldw	r2,-8(fp)
 1837228:	10c00c0b 	ldhu	r3,48(r2)
 183722c:	d0a81a8b 	ldhu	r2,-24470(gp)
 1837230:	18ffffcc 	andi	r3,r3,65535
 1837234:	10bfffcc 	andi	r2,r2,65535
 1837238:	1880992e 	bgeu	r3,r2,18374a0 <tcp_receive+0x1060>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 183723c:	00806134 	movhi	r2,388
 1837240:	109e4904 	addi	r2,r2,31012
 1837244:	10800417 	ldw	r2,16(r2)
 1837248:	10c00303 	ldbu	r3,12(r2)
 183724c:	10800343 	ldbu	r2,13(r2)
 1837250:	1004923a 	slli	r2,r2,8
 1837254:	10c4b03a 	or	r2,r2,r3
 1837258:	10bfffcc 	andi	r2,r2,65535
 183725c:	1004d23a 	srli	r2,r2,8
 1837260:	10ffffcc 	andi	r3,r2,65535
 1837264:	00806134 	movhi	r2,388
 1837268:	109e4904 	addi	r2,r2,31012
 183726c:	10800417 	ldw	r2,16(r2)
 1837270:	11000303 	ldbu	r4,12(r2)
 1837274:	10800343 	ldbu	r2,13(r2)
 1837278:	1004923a 	slli	r2,r2,8
 183727c:	1104b03a 	or	r2,r2,r4
 1837280:	10bfffcc 	andi	r2,r2,65535
 1837284:	1004923a 	slli	r2,r2,8
 1837288:	10bfffcc 	andi	r2,r2,65535
 183728c:	1884b03a 	or	r2,r3,r2
 1837290:	1080004c 	andi	r2,r2,1
 1837294:	10003726 	beq	r2,zero,1837374 <tcp_receive+0xf34>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
 1837298:	00806134 	movhi	r2,388
 183729c:	109e4904 	addi	r2,r2,31012
 18372a0:	10800417 	ldw	r2,16(r2)
 18372a4:	00c06134 	movhi	r3,388
 18372a8:	18de4904 	addi	r3,r3,31012
 18372ac:	18c00417 	ldw	r3,16(r3)
 18372b0:	19000303 	ldbu	r4,12(r3)
 18372b4:	18c00343 	ldbu	r3,13(r3)
 18372b8:	1806923a 	slli	r3,r3,8
 18372bc:	1906b03a 	or	r3,r3,r4
 18372c0:	1809883a 	mov	r4,r3
 18372c4:	00f03fc4 	movi	r3,-16129
 18372c8:	20c6703a 	and	r3,r4,r3
 18372cc:	180b883a 	mov	r5,r3
 18372d0:	00c06134 	movhi	r3,388
 18372d4:	18de4904 	addi	r3,r3,31012
 18372d8:	18c00417 	ldw	r3,16(r3)
 18372dc:	19000303 	ldbu	r4,12(r3)
 18372e0:	18c00343 	ldbu	r3,13(r3)
 18372e4:	1806923a 	slli	r3,r3,8
 18372e8:	1906b03a 	or	r3,r3,r4
 18372ec:	18ffffcc 	andi	r3,r3,65535
 18372f0:	1806d23a 	srli	r3,r3,8
 18372f4:	180d883a 	mov	r6,r3
 18372f8:	00c06134 	movhi	r3,388
 18372fc:	18de4904 	addi	r3,r3,31012
 1837300:	18c00417 	ldw	r3,16(r3)
 1837304:	19000303 	ldbu	r4,12(r3)
 1837308:	18c00343 	ldbu	r3,13(r3)
 183730c:	1806923a 	slli	r3,r3,8
 1837310:	1906b03a 	or	r3,r3,r4
 1837314:	18ffffcc 	andi	r3,r3,65535
 1837318:	1806923a 	slli	r3,r3,8
 183731c:	30c6b03a 	or	r3,r6,r3
 1837320:	18c00f8c 	andi	r3,r3,62
 1837324:	1806923a 	slli	r3,r3,8
 1837328:	28c6b03a 	or	r3,r5,r3
 183732c:	180d883a 	mov	r6,r3
 1837330:	30ffffcc 	andi	r3,r6,65535
 1837334:	19403fcc 	andi	r5,r3,255
 1837338:	10c00303 	ldbu	r3,12(r2)
 183733c:	1806703a 	and	r3,r3,zero
 1837340:	1809883a 	mov	r4,r3
 1837344:	2807883a 	mov	r3,r5
 1837348:	20c6b03a 	or	r3,r4,r3
 183734c:	10c00305 	stb	r3,12(r2)
 1837350:	30ffffcc 	andi	r3,r6,65535
 1837354:	1806d23a 	srli	r3,r3,8
 1837358:	197fffcc 	andi	r5,r3,65535
 183735c:	10c00343 	ldbu	r3,13(r2)
 1837360:	1806703a 	and	r3,r3,zero
 1837364:	1809883a 	mov	r4,r3
 1837368:	2807883a 	mov	r3,r5
 183736c:	20c6b03a 	or	r3,r4,r3
 1837370:	10c00345 	stb	r3,13(r2)
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
 1837374:	e0bffe17 	ldw	r2,-8(fp)
 1837378:	10c00c0b 	ldhu	r3,48(r2)
 183737c:	00806134 	movhi	r2,388
 1837380:	109e4904 	addi	r2,r2,31012
 1837384:	10c0020d 	sth	r3,8(r2)
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 1837388:	00806134 	movhi	r2,388
 183738c:	109e4904 	addi	r2,r2,31012
 1837390:	10800417 	ldw	r2,16(r2)
 1837394:	10c00303 	ldbu	r3,12(r2)
 1837398:	10800343 	ldbu	r2,13(r2)
 183739c:	1004923a 	slli	r2,r2,8
 18373a0:	10c4b03a 	or	r2,r2,r3
 18373a4:	10bfffcc 	andi	r2,r2,65535
 18373a8:	1004d23a 	srli	r2,r2,8
 18373ac:	10ffffcc 	andi	r3,r2,65535
 18373b0:	00806134 	movhi	r2,388
 18373b4:	109e4904 	addi	r2,r2,31012
 18373b8:	10800417 	ldw	r2,16(r2)
 18373bc:	11000303 	ldbu	r4,12(r2)
 18373c0:	10800343 	ldbu	r2,13(r2)
 18373c4:	1004923a 	slli	r2,r2,8
 18373c8:	1104b03a 	or	r2,r2,r4
 18373cc:	10bfffcc 	andi	r2,r2,65535
 18373d0:	1004923a 	slli	r2,r2,8
 18373d4:	10bfffcc 	andi	r2,r2,65535
 18373d8:	1884b03a 	or	r2,r3,r2
 18373dc:	1080008c 	andi	r2,r2,2
 18373e0:	10000826 	beq	r2,zero,1837404 <tcp_receive+0xfc4>
            inseg.len -= 1;
 18373e4:	00806134 	movhi	r2,388
 18373e8:	109e4904 	addi	r2,r2,31012
 18373ec:	1080020b 	ldhu	r2,8(r2)
 18373f0:	10bfffc4 	addi	r2,r2,-1
 18373f4:	1007883a 	mov	r3,r2
 18373f8:	00806134 	movhi	r2,388
 18373fc:	109e4904 	addi	r2,r2,31012
 1837400:	10c0020d 	sth	r3,8(r2)
          }
          pbuf_realloc(inseg.p, inseg.len);
 1837404:	00806134 	movhi	r2,388
 1837408:	109e4904 	addi	r2,r2,31012
 183740c:	10c00117 	ldw	r3,4(r2)
 1837410:	00806134 	movhi	r2,388
 1837414:	109e4904 	addi	r2,r2,31012
 1837418:	1080020b 	ldhu	r2,8(r2)
 183741c:	10bfffcc 	andi	r2,r2,65535
 1837420:	100b883a 	mov	r5,r2
 1837424:	1809883a 	mov	r4,r3
 1837428:	1819f740 	call	1819f74 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 183742c:	00806134 	movhi	r2,388
 1837430:	109e4904 	addi	r2,r2,31012
 1837434:	10c0020b 	ldhu	r3,8(r2)
 1837438:	00806134 	movhi	r2,388
 183743c:	109e4904 	addi	r2,r2,31012
 1837440:	10800417 	ldw	r2,16(r2)
 1837444:	11000303 	ldbu	r4,12(r2)
 1837448:	10800343 	ldbu	r2,13(r2)
 183744c:	1004923a 	slli	r2,r2,8
 1837450:	1104b03a 	or	r2,r2,r4
 1837454:	10bfffcc 	andi	r2,r2,65535
 1837458:	1004d23a 	srli	r2,r2,8
 183745c:	113fffcc 	andi	r4,r2,65535
 1837460:	00806134 	movhi	r2,388
 1837464:	109e4904 	addi	r2,r2,31012
 1837468:	10800417 	ldw	r2,16(r2)
 183746c:	11400303 	ldbu	r5,12(r2)
 1837470:	10800343 	ldbu	r2,13(r2)
 1837474:	1004923a 	slli	r2,r2,8
 1837478:	1144b03a 	or	r2,r2,r5
 183747c:	10bfffcc 	andi	r2,r2,65535
 1837480:	1004923a 	slli	r2,r2,8
 1837484:	10bfffcc 	andi	r2,r2,65535
 1837488:	2084b03a 	or	r2,r4,r2
 183748c:	108000cc 	andi	r2,r2,3
 1837490:	1004c03a 	cmpne	r2,r2,zero
 1837494:	10803fcc 	andi	r2,r2,255
 1837498:	1885883a 	add	r2,r3,r2
 183749c:	d0a81a8d 	sth	r2,-24470(gp)
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 18374a0:	e0bffe17 	ldw	r2,-8(fp)
 18374a4:	10801e17 	ldw	r2,120(r2)
 18374a8:	10012026 	beq	r2,zero,183792c <tcp_receive+0x14ec>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 18374ac:	00806134 	movhi	r2,388
 18374b0:	109e4904 	addi	r2,r2,31012
 18374b4:	10800417 	ldw	r2,16(r2)
 18374b8:	10c00303 	ldbu	r3,12(r2)
 18374bc:	10800343 	ldbu	r2,13(r2)
 18374c0:	1004923a 	slli	r2,r2,8
 18374c4:	10c4b03a 	or	r2,r2,r3
 18374c8:	10bfffcc 	andi	r2,r2,65535
 18374cc:	1004d23a 	srli	r2,r2,8
 18374d0:	10ffffcc 	andi	r3,r2,65535
 18374d4:	00806134 	movhi	r2,388
 18374d8:	109e4904 	addi	r2,r2,31012
 18374dc:	10800417 	ldw	r2,16(r2)
 18374e0:	11000303 	ldbu	r4,12(r2)
 18374e4:	10800343 	ldbu	r2,13(r2)
 18374e8:	1004923a 	slli	r2,r2,8
 18374ec:	1104b03a 	or	r2,r2,r4
 18374f0:	10bfffcc 	andi	r2,r2,65535
 18374f4:	1004923a 	slli	r2,r2,8
 18374f8:	10bfffcc 	andi	r2,r2,65535
 18374fc:	1884b03a 	or	r2,r3,r2
 1837500:	1080004c 	andi	r2,r2,1
 1837504:	10000f26 	beq	r2,zero,1837544 <tcp_receive+0x1104>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 1837508:	00000a06 	br	1837534 <tcp_receive+0x10f4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 183750c:	e0bffe17 	ldw	r2,-8(fp)
 1837510:	10801e17 	ldw	r2,120(r2)
 1837514:	e0bffc15 	stw	r2,-16(fp)
              pcb->ooseq = pcb->ooseq->next;
 1837518:	e0bffe17 	ldw	r2,-8(fp)
 183751c:	10801e17 	ldw	r2,120(r2)
 1837520:	10c00017 	ldw	r3,0(r2)
 1837524:	e0bffe17 	ldw	r2,-8(fp)
 1837528:	10c01e15 	stw	r3,120(r2)
              tcp_seg_free(old_ooseq);
 183752c:	e13ffc17 	ldw	r4,-16(fp)
 1837530:	181cad80 	call	181cad8 <tcp_seg_free>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 1837534:	e0bffe17 	ldw	r2,-8(fp)
 1837538:	10801e17 	ldw	r2,120(r2)
 183753c:	103ff31e 	bne	r2,zero,183750c <__ram_exceptions_end+0xff82721c>
 1837540:	0000fa06 	br	183792c <tcp_receive+0x14ec>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 1837544:	e0bffe17 	ldw	r2,-8(fp)
 1837548:	10801e17 	ldw	r2,120(r2)
 183754c:	e0bff415 	stw	r2,-48(fp)
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 1837550:	00006d06 	br	1837708 <tcp_receive+0x12c8>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 1837554:	e0bff417 	ldw	r2,-48(fp)
 1837558:	10800417 	ldw	r2,16(r2)
 183755c:	10c00303 	ldbu	r3,12(r2)
 1837560:	10800343 	ldbu	r2,13(r2)
 1837564:	1004923a 	slli	r2,r2,8
 1837568:	10c4b03a 	or	r2,r2,r3
 183756c:	10bfffcc 	andi	r2,r2,65535
 1837570:	1004d23a 	srli	r2,r2,8
 1837574:	10ffffcc 	andi	r3,r2,65535
 1837578:	e0bff417 	ldw	r2,-48(fp)
 183757c:	10800417 	ldw	r2,16(r2)
 1837580:	11000303 	ldbu	r4,12(r2)
 1837584:	10800343 	ldbu	r2,13(r2)
 1837588:	1004923a 	slli	r2,r2,8
 183758c:	1104b03a 	or	r2,r2,r4
 1837590:	10bfffcc 	andi	r2,r2,65535
 1837594:	1004923a 	slli	r2,r2,8
 1837598:	10bfffcc 	andi	r2,r2,65535
 183759c:	1884b03a 	or	r2,r3,r2
 18375a0:	1080004c 	andi	r2,r2,1
 18375a4:	10005126 	beq	r2,zero,18376ec <tcp_receive+0x12ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 18375a8:	00806134 	movhi	r2,388
 18375ac:	109e4904 	addi	r2,r2,31012
 18375b0:	10800417 	ldw	r2,16(r2)
 18375b4:	10c00303 	ldbu	r3,12(r2)
 18375b8:	10800343 	ldbu	r2,13(r2)
 18375bc:	1004923a 	slli	r2,r2,8
 18375c0:	10c4b03a 	or	r2,r2,r3
 18375c4:	10bfffcc 	andi	r2,r2,65535
 18375c8:	1004d23a 	srli	r2,r2,8
 18375cc:	10ffffcc 	andi	r3,r2,65535
 18375d0:	00806134 	movhi	r2,388
 18375d4:	109e4904 	addi	r2,r2,31012
 18375d8:	10800417 	ldw	r2,16(r2)
 18375dc:	11000303 	ldbu	r4,12(r2)
 18375e0:	10800343 	ldbu	r2,13(r2)
 18375e4:	1004923a 	slli	r2,r2,8
 18375e8:	1104b03a 	or	r2,r2,r4
 18375ec:	10bfffcc 	andi	r2,r2,65535
 18375f0:	1004923a 	slli	r2,r2,8
 18375f4:	10bfffcc 	andi	r2,r2,65535
 18375f8:	1884b03a 	or	r2,r3,r2
 18375fc:	1080008c 	andi	r2,r2,2
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 1837600:	10003a1e 	bne	r2,zero,18376ec <tcp_receive+0x12ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 1837604:	00806134 	movhi	r2,388
 1837608:	109e4904 	addi	r2,r2,31012
 183760c:	10800417 	ldw	r2,16(r2)
 1837610:	00c06134 	movhi	r3,388
 1837614:	18de4904 	addi	r3,r3,31012
 1837618:	18c00417 	ldw	r3,16(r3)
 183761c:	19000303 	ldbu	r4,12(r3)
 1837620:	18c00343 	ldbu	r3,13(r3)
 1837624:	1806923a 	slli	r3,r3,8
 1837628:	1906b03a 	or	r3,r3,r4
 183762c:	18c04014 	ori	r3,r3,256
 1837630:	180d883a 	mov	r6,r3
 1837634:	30ffffcc 	andi	r3,r6,65535
 1837638:	19403fcc 	andi	r5,r3,255
 183763c:	10c00303 	ldbu	r3,12(r2)
 1837640:	1806703a 	and	r3,r3,zero
 1837644:	1809883a 	mov	r4,r3
 1837648:	2807883a 	mov	r3,r5
 183764c:	20c6b03a 	or	r3,r4,r3
 1837650:	10c00305 	stb	r3,12(r2)
 1837654:	30ffffcc 	andi	r3,r6,65535
 1837658:	1806d23a 	srli	r3,r3,8
 183765c:	197fffcc 	andi	r5,r3,65535
 1837660:	10c00343 	ldbu	r3,13(r2)
 1837664:	1806703a 	and	r3,r3,zero
 1837668:	1809883a 	mov	r4,r3
 183766c:	2807883a 	mov	r3,r5
 1837670:	20c6b03a 	or	r3,r4,r3
 1837674:	10c00345 	stb	r3,13(r2)
                tcplen = TCP_TCPLEN(&inseg);
 1837678:	00806134 	movhi	r2,388
 183767c:	109e4904 	addi	r2,r2,31012
 1837680:	10c0020b 	ldhu	r3,8(r2)
 1837684:	00806134 	movhi	r2,388
 1837688:	109e4904 	addi	r2,r2,31012
 183768c:	10800417 	ldw	r2,16(r2)
 1837690:	11000303 	ldbu	r4,12(r2)
 1837694:	10800343 	ldbu	r2,13(r2)
 1837698:	1004923a 	slli	r2,r2,8
 183769c:	1104b03a 	or	r2,r2,r4
 18376a0:	10bfffcc 	andi	r2,r2,65535
 18376a4:	1004d23a 	srli	r2,r2,8
 18376a8:	113fffcc 	andi	r4,r2,65535
 18376ac:	00806134 	movhi	r2,388
 18376b0:	109e4904 	addi	r2,r2,31012
 18376b4:	10800417 	ldw	r2,16(r2)
 18376b8:	11400303 	ldbu	r5,12(r2)
 18376bc:	10800343 	ldbu	r2,13(r2)
 18376c0:	1004923a 	slli	r2,r2,8
 18376c4:	1144b03a 	or	r2,r2,r5
 18376c8:	10bfffcc 	andi	r2,r2,65535
 18376cc:	1004923a 	slli	r2,r2,8
 18376d0:	10bfffcc 	andi	r2,r2,65535
 18376d4:	2084b03a 	or	r2,r4,r2
 18376d8:	108000cc 	andi	r2,r2,3
 18376dc:	1004c03a 	cmpne	r2,r2,zero
 18376e0:	10803fcc 	andi	r2,r2,255
 18376e4:	1885883a 	add	r2,r3,r2
 18376e8:	d0a81a8d 	sth	r2,-24470(gp)
              }
              prev = next;
 18376ec:	e0bff417 	ldw	r2,-48(fp)
 18376f0:	e0bff515 	stw	r2,-44(fp)
              next = next->next;
 18376f4:	e0bff417 	ldw	r2,-48(fp)
 18376f8:	10800017 	ldw	r2,0(r2)
 18376fc:	e0bff415 	stw	r2,-48(fp)
              tcp_seg_free(prev);
 1837700:	e13ff517 	ldw	r4,-44(fp)
 1837704:	181cad80 	call	181cad8 <tcp_seg_free>
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 1837708:	e0bff417 	ldw	r2,-48(fp)
 183770c:	10001726 	beq	r2,zero,183776c <tcp_receive+0x132c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 1837710:	d0a81a8b 	ldhu	r2,-24470(gp)
 1837714:	10ffffcc 	andi	r3,r2,65535
 1837718:	d0a81817 	ldw	r2,-24480(gp)
 183771c:	1887883a 	add	r3,r3,r2
 1837720:	e0bff417 	ldw	r2,-48(fp)
 1837724:	10800417 	ldw	r2,16(r2)
 1837728:	11000103 	ldbu	r4,4(r2)
 183772c:	11400143 	ldbu	r5,5(r2)
 1837730:	280a923a 	slli	r5,r5,8
 1837734:	2908b03a 	or	r4,r5,r4
 1837738:	11400183 	ldbu	r5,6(r2)
 183773c:	280a943a 	slli	r5,r5,16
 1837740:	2908b03a 	or	r4,r5,r4
 1837744:	108001c3 	ldbu	r2,7(r2)
 1837748:	1004963a 	slli	r2,r2,24
 183774c:	1104b03a 	or	r2,r2,r4
 1837750:	1009883a 	mov	r4,r2
 1837754:	e0bff417 	ldw	r2,-48(fp)
 1837758:	1080020b 	ldhu	r2,8(r2)
 183775c:	10bfffcc 	andi	r2,r2,65535
 1837760:	2085883a 	add	r2,r4,r2
 1837764:	1885c83a 	sub	r2,r3,r2
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 1837768:	103f7a0e 	bge	r2,zero,1837554 <__ram_exceptions_end+0xff827264>
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 183776c:	e0bff417 	ldw	r2,-48(fp)
 1837770:	10006b26 	beq	r2,zero,1837920 <tcp_receive+0x14e0>
                TCP_SEQ_GT(seqno + tcplen,
 1837774:	d0a81a8b 	ldhu	r2,-24470(gp)
 1837778:	10ffffcc 	andi	r3,r2,65535
 183777c:	d0a81817 	ldw	r2,-24480(gp)
 1837780:	1887883a 	add	r3,r3,r2
 1837784:	e0bff417 	ldw	r2,-48(fp)
 1837788:	10800417 	ldw	r2,16(r2)
 183778c:	11000103 	ldbu	r4,4(r2)
 1837790:	11400143 	ldbu	r5,5(r2)
 1837794:	280a923a 	slli	r5,r5,8
 1837798:	2908b03a 	or	r4,r5,r4
 183779c:	11400183 	ldbu	r5,6(r2)
 18377a0:	280a943a 	slli	r5,r5,16
 18377a4:	2908b03a 	or	r4,r5,r4
 18377a8:	108001c3 	ldbu	r2,7(r2)
 18377ac:	1004963a 	slli	r2,r2,24
 18377b0:	1104b03a 	or	r2,r2,r4
 18377b4:	1885c83a 	sub	r2,r3,r2
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 18377b8:	0080590e 	bge	zero,r2,1837920 <tcp_receive+0x14e0>
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 18377bc:	e0bff417 	ldw	r2,-48(fp)
 18377c0:	10800417 	ldw	r2,16(r2)
 18377c4:	10c00103 	ldbu	r3,4(r2)
 18377c8:	11000143 	ldbu	r4,5(r2)
 18377cc:	2008923a 	slli	r4,r4,8
 18377d0:	20c6b03a 	or	r3,r4,r3
 18377d4:	11000183 	ldbu	r4,6(r2)
 18377d8:	2008943a 	slli	r4,r4,16
 18377dc:	20c6b03a 	or	r3,r4,r3
 18377e0:	108001c3 	ldbu	r2,7(r2)
 18377e4:	1004963a 	slli	r2,r2,24
 18377e8:	10c4b03a 	or	r2,r2,r3
 18377ec:	1007883a 	mov	r3,r2
 18377f0:	d0a81817 	ldw	r2,-24480(gp)
 18377f4:	1885c83a 	sub	r2,r3,r2
 18377f8:	1007883a 	mov	r3,r2
 18377fc:	00806134 	movhi	r2,388
 1837800:	109e4904 	addi	r2,r2,31012
 1837804:	10c0020d 	sth	r3,8(r2)
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 1837808:	00806134 	movhi	r2,388
 183780c:	109e4904 	addi	r2,r2,31012
 1837810:	10800417 	ldw	r2,16(r2)
 1837814:	10c00303 	ldbu	r3,12(r2)
 1837818:	10800343 	ldbu	r2,13(r2)
 183781c:	1004923a 	slli	r2,r2,8
 1837820:	10c4b03a 	or	r2,r2,r3
 1837824:	10bfffcc 	andi	r2,r2,65535
 1837828:	1004d23a 	srli	r2,r2,8
 183782c:	10ffffcc 	andi	r3,r2,65535
 1837830:	00806134 	movhi	r2,388
 1837834:	109e4904 	addi	r2,r2,31012
 1837838:	10800417 	ldw	r2,16(r2)
 183783c:	11000303 	ldbu	r4,12(r2)
 1837840:	10800343 	ldbu	r2,13(r2)
 1837844:	1004923a 	slli	r2,r2,8
 1837848:	1104b03a 	or	r2,r2,r4
 183784c:	10bfffcc 	andi	r2,r2,65535
 1837850:	1004923a 	slli	r2,r2,8
 1837854:	10bfffcc 	andi	r2,r2,65535
 1837858:	1884b03a 	or	r2,r3,r2
 183785c:	1080008c 	andi	r2,r2,2
 1837860:	10000826 	beq	r2,zero,1837884 <tcp_receive+0x1444>
                inseg.len -= 1;
 1837864:	00806134 	movhi	r2,388
 1837868:	109e4904 	addi	r2,r2,31012
 183786c:	1080020b 	ldhu	r2,8(r2)
 1837870:	10bfffc4 	addi	r2,r2,-1
 1837874:	1007883a 	mov	r3,r2
 1837878:	00806134 	movhi	r2,388
 183787c:	109e4904 	addi	r2,r2,31012
 1837880:	10c0020d 	sth	r3,8(r2)
              }
              pbuf_realloc(inseg.p, inseg.len);
 1837884:	00806134 	movhi	r2,388
 1837888:	109e4904 	addi	r2,r2,31012
 183788c:	10c00117 	ldw	r3,4(r2)
 1837890:	00806134 	movhi	r2,388
 1837894:	109e4904 	addi	r2,r2,31012
 1837898:	1080020b 	ldhu	r2,8(r2)
 183789c:	10bfffcc 	andi	r2,r2,65535
 18378a0:	100b883a 	mov	r5,r2
 18378a4:	1809883a 	mov	r4,r3
 18378a8:	1819f740 	call	1819f74 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 18378ac:	00806134 	movhi	r2,388
 18378b0:	109e4904 	addi	r2,r2,31012
 18378b4:	10c0020b 	ldhu	r3,8(r2)
 18378b8:	00806134 	movhi	r2,388
 18378bc:	109e4904 	addi	r2,r2,31012
 18378c0:	10800417 	ldw	r2,16(r2)
 18378c4:	11000303 	ldbu	r4,12(r2)
 18378c8:	10800343 	ldbu	r2,13(r2)
 18378cc:	1004923a 	slli	r2,r2,8
 18378d0:	1104b03a 	or	r2,r2,r4
 18378d4:	10bfffcc 	andi	r2,r2,65535
 18378d8:	1004d23a 	srli	r2,r2,8
 18378dc:	113fffcc 	andi	r4,r2,65535
 18378e0:	00806134 	movhi	r2,388
 18378e4:	109e4904 	addi	r2,r2,31012
 18378e8:	10800417 	ldw	r2,16(r2)
 18378ec:	11400303 	ldbu	r5,12(r2)
 18378f0:	10800343 	ldbu	r2,13(r2)
 18378f4:	1004923a 	slli	r2,r2,8
 18378f8:	1144b03a 	or	r2,r2,r5
 18378fc:	10bfffcc 	andi	r2,r2,65535
 1837900:	1004923a 	slli	r2,r2,8
 1837904:	10bfffcc 	andi	r2,r2,65535
 1837908:	2084b03a 	or	r2,r4,r2
 183790c:	108000cc 	andi	r2,r2,3
 1837910:	1004c03a 	cmpne	r2,r2,zero
 1837914:	10803fcc 	andi	r2,r2,255
 1837918:	1885883a 	add	r2,r3,r2
 183791c:	d0a81a8d 	sth	r2,-24470(gp)
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 1837920:	e0bffe17 	ldw	r2,-8(fp)
 1837924:	e0fff417 	ldw	r3,-48(fp)
 1837928:	10c01e15 	stw	r3,120(r2)
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 183792c:	d0a81a8b 	ldhu	r2,-24470(gp)
 1837930:	10ffffcc 	andi	r3,r2,65535
 1837934:	d0a81817 	ldw	r2,-24480(gp)
 1837938:	1887883a 	add	r3,r3,r2
 183793c:	e0bffe17 	ldw	r2,-8(fp)
 1837940:	10c00b15 	stw	r3,44(r2)

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 1837944:	e0bffe17 	ldw	r2,-8(fp)
 1837948:	10c00c0b 	ldhu	r3,48(r2)
 183794c:	d0a81a8b 	ldhu	r2,-24470(gp)
 1837950:	1885c83a 	sub	r2,r3,r2
 1837954:	1007883a 	mov	r3,r2
 1837958:	e0bffe17 	ldw	r2,-8(fp)
 183795c:	10c00c0d 	sth	r3,48(r2)

        tcp_update_rcv_ann_wnd(pcb);
 1837960:	e13ffe17 	ldw	r4,-8(fp)
 1837964:	181bb040 	call	181bb04 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 1837968:	00806134 	movhi	r2,388
 183796c:	109e4904 	addi	r2,r2,31012
 1837970:	10800117 	ldw	r2,4(r2)
 1837974:	1080020b 	ldhu	r2,8(r2)
 1837978:	10bfffcc 	andi	r2,r2,65535
 183797c:	10000726 	beq	r2,zero,183799c <tcp_receive+0x155c>
          recv_data = inseg.p;
 1837980:	00806134 	movhi	r2,388
 1837984:	109e4904 	addi	r2,r2,31012
 1837988:	10800117 	ldw	r2,4(r2)
 183798c:	d0a81c15 	stw	r2,-24464(gp)
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 1837990:	00806134 	movhi	r2,388
 1837994:	109e4904 	addi	r2,r2,31012
 1837998:	10000115 	stw	zero,4(r2)
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 183799c:	00806134 	movhi	r2,388
 18379a0:	109e4904 	addi	r2,r2,31012
 18379a4:	10800417 	ldw	r2,16(r2)
 18379a8:	10c00303 	ldbu	r3,12(r2)
 18379ac:	10800343 	ldbu	r2,13(r2)
 18379b0:	1004923a 	slli	r2,r2,8
 18379b4:	10c4b03a 	or	r2,r2,r3
 18379b8:	10bfffcc 	andi	r2,r2,65535
 18379bc:	1004d23a 	srli	r2,r2,8
 18379c0:	10ffffcc 	andi	r3,r2,65535
 18379c4:	00806134 	movhi	r2,388
 18379c8:	109e4904 	addi	r2,r2,31012
 18379cc:	10800417 	ldw	r2,16(r2)
 18379d0:	11000303 	ldbu	r4,12(r2)
 18379d4:	10800343 	ldbu	r2,13(r2)
 18379d8:	1004923a 	slli	r2,r2,8
 18379dc:	1104b03a 	or	r2,r2,r4
 18379e0:	10bfffcc 	andi	r2,r2,65535
 18379e4:	1004923a 	slli	r2,r2,8
 18379e8:	10bfffcc 	andi	r2,r2,65535
 18379ec:	1884b03a 	or	r2,r3,r2
 18379f0:	1080004c 	andi	r2,r2,1
 18379f4:	10008d26 	beq	r2,zero,1837c2c <tcp_receive+0x17ec>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 18379f8:	d0a81b03 	ldbu	r2,-24468(gp)
 18379fc:	10800814 	ori	r2,r2,32
 1837a00:	d0a81b05 	stb	r2,-24468(gp)
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 1837a04:	00008906 	br	1837c2c <tcp_receive+0x17ec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 1837a08:	e0bffe17 	ldw	r2,-8(fp)
 1837a0c:	10801e17 	ldw	r2,120(r2)
 1837a10:	e0bffd15 	stw	r2,-12(fp)
          seqno = pcb->ooseq->tcphdr->seqno;
 1837a14:	e0bffe17 	ldw	r2,-8(fp)
 1837a18:	10801e17 	ldw	r2,120(r2)
 1837a1c:	10800417 	ldw	r2,16(r2)
 1837a20:	10c00103 	ldbu	r3,4(r2)
 1837a24:	11000143 	ldbu	r4,5(r2)
 1837a28:	2008923a 	slli	r4,r4,8
 1837a2c:	20c6b03a 	or	r3,r4,r3
 1837a30:	11000183 	ldbu	r4,6(r2)
 1837a34:	2008943a 	slli	r4,r4,16
 1837a38:	20c6b03a 	or	r3,r4,r3
 1837a3c:	108001c3 	ldbu	r2,7(r2)
 1837a40:	1004963a 	slli	r2,r2,24
 1837a44:	10c4b03a 	or	r2,r2,r3
 1837a48:	d0a81815 	stw	r2,-24480(gp)

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 1837a4c:	e0bffe17 	ldw	r2,-8(fp)
 1837a50:	10c00b17 	ldw	r3,44(r2)
 1837a54:	e0bffd17 	ldw	r2,-12(fp)
 1837a58:	1080020b 	ldhu	r2,8(r2)
 1837a5c:	113fffcc 	andi	r4,r2,65535
 1837a60:	e0bffd17 	ldw	r2,-12(fp)
 1837a64:	10800417 	ldw	r2,16(r2)
 1837a68:	11400303 	ldbu	r5,12(r2)
 1837a6c:	10800343 	ldbu	r2,13(r2)
 1837a70:	1004923a 	slli	r2,r2,8
 1837a74:	1144b03a 	or	r2,r2,r5
 1837a78:	10bfffcc 	andi	r2,r2,65535
 1837a7c:	1004d23a 	srli	r2,r2,8
 1837a80:	117fffcc 	andi	r5,r2,65535
 1837a84:	e0bffd17 	ldw	r2,-12(fp)
 1837a88:	10800417 	ldw	r2,16(r2)
 1837a8c:	11800303 	ldbu	r6,12(r2)
 1837a90:	10800343 	ldbu	r2,13(r2)
 1837a94:	1004923a 	slli	r2,r2,8
 1837a98:	1184b03a 	or	r2,r2,r6
 1837a9c:	10bfffcc 	andi	r2,r2,65535
 1837aa0:	1004923a 	slli	r2,r2,8
 1837aa4:	10bfffcc 	andi	r2,r2,65535
 1837aa8:	2884b03a 	or	r2,r5,r2
 1837aac:	108000cc 	andi	r2,r2,3
 1837ab0:	1004c03a 	cmpne	r2,r2,zero
 1837ab4:	10803fcc 	andi	r2,r2,255
 1837ab8:	2085883a 	add	r2,r4,r2
 1837abc:	1887883a 	add	r3,r3,r2
 1837ac0:	e0bffe17 	ldw	r2,-8(fp)
 1837ac4:	10c00b15 	stw	r3,44(r2)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 1837ac8:	e0bffe17 	ldw	r2,-8(fp)
 1837acc:	10c00c0b 	ldhu	r3,48(r2)
 1837ad0:	e0bffd17 	ldw	r2,-12(fp)
 1837ad4:	1100020b 	ldhu	r4,8(r2)
 1837ad8:	e0bffd17 	ldw	r2,-12(fp)
 1837adc:	10800417 	ldw	r2,16(r2)
 1837ae0:	11400303 	ldbu	r5,12(r2)
 1837ae4:	10800343 	ldbu	r2,13(r2)
 1837ae8:	1004923a 	slli	r2,r2,8
 1837aec:	1144b03a 	or	r2,r2,r5
 1837af0:	10bfffcc 	andi	r2,r2,65535
 1837af4:	1004d23a 	srli	r2,r2,8
 1837af8:	117fffcc 	andi	r5,r2,65535
 1837afc:	e0bffd17 	ldw	r2,-12(fp)
 1837b00:	10800417 	ldw	r2,16(r2)
 1837b04:	11800303 	ldbu	r6,12(r2)
 1837b08:	10800343 	ldbu	r2,13(r2)
 1837b0c:	1004923a 	slli	r2,r2,8
 1837b10:	1184b03a 	or	r2,r2,r6
 1837b14:	10bfffcc 	andi	r2,r2,65535
 1837b18:	1004923a 	slli	r2,r2,8
 1837b1c:	10bfffcc 	andi	r2,r2,65535
 1837b20:	2884b03a 	or	r2,r5,r2
 1837b24:	108000cc 	andi	r2,r2,3
 1837b28:	1004c03a 	cmpne	r2,r2,zero
 1837b2c:	10803fcc 	andi	r2,r2,255
 1837b30:	2085883a 	add	r2,r4,r2
 1837b34:	1885c83a 	sub	r2,r3,r2
 1837b38:	1007883a 	mov	r3,r2
 1837b3c:	e0bffe17 	ldw	r2,-8(fp)
 1837b40:	10c00c0d 	sth	r3,48(r2)

          tcp_update_rcv_ann_wnd(pcb);
 1837b44:	e13ffe17 	ldw	r4,-8(fp)
 1837b48:	181bb040 	call	181bb04 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 1837b4c:	e0bffd17 	ldw	r2,-12(fp)
 1837b50:	10800117 	ldw	r2,4(r2)
 1837b54:	1080020b 	ldhu	r2,8(r2)
 1837b58:	10bfffcc 	andi	r2,r2,65535
 1837b5c:	10000e26 	beq	r2,zero,1837b98 <tcp_receive+0x1758>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
 1837b60:	d0a81c17 	ldw	r2,-24464(gp)
 1837b64:	10000726 	beq	r2,zero,1837b84 <tcp_receive+0x1744>
              pbuf_cat(recv_data, cseg->p);
 1837b68:	d0e81c17 	ldw	r3,-24464(gp)
 1837b6c:	e0bffd17 	ldw	r2,-12(fp)
 1837b70:	10800117 	ldw	r2,4(r2)
 1837b74:	100b883a 	mov	r5,r2
 1837b78:	1809883a 	mov	r4,r3
 1837b7c:	181a4180 	call	181a418 <pbuf_cat>
 1837b80:	00000306 	br	1837b90 <tcp_receive+0x1750>
            } else {
              recv_data = cseg->p;
 1837b84:	e0bffd17 	ldw	r2,-12(fp)
 1837b88:	10800117 	ldw	r2,4(r2)
 1837b8c:	d0a81c15 	stw	r2,-24464(gp)
            }
            cseg->p = NULL;
 1837b90:	e0bffd17 	ldw	r2,-12(fp)
 1837b94:	10000115 	stw	zero,4(r2)
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 1837b98:	e0bffd17 	ldw	r2,-12(fp)
 1837b9c:	10800417 	ldw	r2,16(r2)
 1837ba0:	10c00303 	ldbu	r3,12(r2)
 1837ba4:	10800343 	ldbu	r2,13(r2)
 1837ba8:	1004923a 	slli	r2,r2,8
 1837bac:	10c4b03a 	or	r2,r2,r3
 1837bb0:	10bfffcc 	andi	r2,r2,65535
 1837bb4:	1004d23a 	srli	r2,r2,8
 1837bb8:	10ffffcc 	andi	r3,r2,65535
 1837bbc:	e0bffd17 	ldw	r2,-12(fp)
 1837bc0:	10800417 	ldw	r2,16(r2)
 1837bc4:	11000303 	ldbu	r4,12(r2)
 1837bc8:	10800343 	ldbu	r2,13(r2)
 1837bcc:	1004923a 	slli	r2,r2,8
 1837bd0:	1104b03a 	or	r2,r2,r4
 1837bd4:	10bfffcc 	andi	r2,r2,65535
 1837bd8:	1004923a 	slli	r2,r2,8
 1837bdc:	10bfffcc 	andi	r2,r2,65535
 1837be0:	1884b03a 	or	r2,r3,r2
 1837be4:	1080004c 	andi	r2,r2,1
 1837be8:	10000a26 	beq	r2,zero,1837c14 <tcp_receive+0x17d4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 1837bec:	d0a81b03 	ldbu	r2,-24468(gp)
 1837bf0:	10800814 	ori	r2,r2,32
 1837bf4:	d0a81b05 	stb	r2,-24468(gp)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 1837bf8:	e0bffe17 	ldw	r2,-8(fp)
 1837bfc:	10800617 	ldw	r2,24(r2)
 1837c00:	10800118 	cmpnei	r2,r2,4
 1837c04:	1000031e 	bne	r2,zero,1837c14 <tcp_receive+0x17d4>
              pcb->state = CLOSE_WAIT;
 1837c08:	e0bffe17 	ldw	r2,-8(fp)
 1837c0c:	00c001c4 	movi	r3,7
 1837c10:	10c00615 	stw	r3,24(r2)
            } 
          }

          pcb->ooseq = cseg->next;
 1837c14:	e0bffd17 	ldw	r2,-12(fp)
 1837c18:	10c00017 	ldw	r3,0(r2)
 1837c1c:	e0bffe17 	ldw	r2,-8(fp)
 1837c20:	10c01e15 	stw	r3,120(r2)
          tcp_seg_free(cseg);
 1837c24:	e13ffd17 	ldw	r4,-12(fp)
 1837c28:	181cad80 	call	181cad8 <tcp_seg_free>
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 1837c2c:	e0bffe17 	ldw	r2,-8(fp)
 1837c30:	10801e17 	ldw	r2,120(r2)
 1837c34:	10001126 	beq	r2,zero,1837c7c <tcp_receive+0x183c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 1837c38:	e0bffe17 	ldw	r2,-8(fp)
 1837c3c:	10801e17 	ldw	r2,120(r2)
 1837c40:	10800417 	ldw	r2,16(r2)
 1837c44:	10c00103 	ldbu	r3,4(r2)
 1837c48:	11000143 	ldbu	r4,5(r2)
 1837c4c:	2008923a 	slli	r4,r4,8
 1837c50:	20c6b03a 	or	r3,r4,r3
 1837c54:	11000183 	ldbu	r4,6(r2)
 1837c58:	2008943a 	slli	r4,r4,16
 1837c5c:	20c6b03a 	or	r3,r4,r3
 1837c60:	108001c3 	ldbu	r2,7(r2)
 1837c64:	1004963a 	slli	r2,r2,24
 1837c68:	10c4b03a 	or	r2,r2,r3
 1837c6c:	1007883a 	mov	r3,r2
 1837c70:	e0bffe17 	ldw	r2,-8(fp)
 1837c74:	10800b17 	ldw	r2,44(r2)
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 1837c78:	18bf6326 	beq	r3,r2,1837a08 <__ram_exceptions_end+0xff827718>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 1837c7c:	e0bffe17 	ldw	r2,-8(fp)
 1837c80:	10800883 	ldbu	r2,34(r2)
 1837c84:	10803fcc 	andi	r2,r2,255
 1837c88:	1080004c 	andi	r2,r2,1
 1837c8c:	10000e26 	beq	r2,zero,1837cc8 <tcp_receive+0x1888>
 1837c90:	e0bffe17 	ldw	r2,-8(fp)
 1837c94:	10c00883 	ldbu	r3,34(r2)
 1837c98:	00bfff84 	movi	r2,-2
 1837c9c:	1884703a 	and	r2,r3,r2
 1837ca0:	1007883a 	mov	r3,r2
 1837ca4:	e0bffe17 	ldw	r2,-8(fp)
 1837ca8:	10c00885 	stb	r3,34(r2)
 1837cac:	e0bffe17 	ldw	r2,-8(fp)
 1837cb0:	10800883 	ldbu	r2,34(r2)
 1837cb4:	10800094 	ori	r2,r2,2
 1837cb8:	1007883a 	mov	r3,r2
 1837cbc:	e0bffe17 	ldw	r2,-8(fp)
 1837cc0:	10c00885 	stb	r3,34(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 1837cc4:	0001bd06 	br	18383bc <tcp_receive+0x1f7c>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 1837cc8:	e0bffe17 	ldw	r2,-8(fp)
 1837ccc:	10800883 	ldbu	r2,34(r2)
 1837cd0:	10800054 	ori	r2,r2,1
 1837cd4:	1007883a 	mov	r3,r2
 1837cd8:	e0bffe17 	ldw	r2,-8(fp)
 1837cdc:	10c00885 	stb	r3,34(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 1837ce0:	0001b606 	br	18383bc <tcp_receive+0x1f7c>
        /* Acknowledge the segment(s). */
        tcp_ack(pcb);

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 1837ce4:	e13ffe17 	ldw	r4,-8(fp)
 1837ce8:	181ec900 	call	181ec90 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 1837cec:	e0bffe17 	ldw	r2,-8(fp)
 1837cf0:	10801e17 	ldw	r2,120(r2)
 1837cf4:	1000071e 	bne	r2,zero,1837d14 <tcp_receive+0x18d4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 1837cf8:	01006134 	movhi	r4,388
 1837cfc:	211e4904 	addi	r4,r4,31012
 1837d00:	181cb680 	call	181cb68 <tcp_seg_copy>
 1837d04:	1007883a 	mov	r3,r2
 1837d08:	e0bffe17 	ldw	r2,-8(fp)
 1837d0c:	10c01e15 	stw	r3,120(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 1837d10:	0001aa06 	br	18383bc <tcp_receive+0x1f7c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 1837d14:	e03ff515 	stw	zero,-44(fp)
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 1837d18:	e0bffe17 	ldw	r2,-8(fp)
 1837d1c:	10801e17 	ldw	r2,120(r2)
 1837d20:	e0bff415 	stw	r2,-48(fp)
 1837d24:	00019306 	br	1838374 <tcp_receive+0x1f34>
            if (seqno == next->tcphdr->seqno) {
 1837d28:	e0bff417 	ldw	r2,-48(fp)
 1837d2c:	10800417 	ldw	r2,16(r2)
 1837d30:	10c00103 	ldbu	r3,4(r2)
 1837d34:	11000143 	ldbu	r4,5(r2)
 1837d38:	2008923a 	slli	r4,r4,8
 1837d3c:	20c6b03a 	or	r3,r4,r3
 1837d40:	11000183 	ldbu	r4,6(r2)
 1837d44:	2008943a 	slli	r4,r4,16
 1837d48:	20c6b03a 	or	r3,r4,r3
 1837d4c:	108001c3 	ldbu	r2,7(r2)
 1837d50:	1004963a 	slli	r2,r2,24
 1837d54:	10c4b03a 	or	r2,r2,r3
 1837d58:	1007883a 	mov	r3,r2
 1837d5c:	d0a81817 	ldw	r2,-24480(gp)
 1837d60:	18801b1e 	bne	r3,r2,1837dd0 <tcp_receive+0x1990>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 1837d64:	00806134 	movhi	r2,388
 1837d68:	109e4904 	addi	r2,r2,31012
 1837d6c:	1100020b 	ldhu	r4,8(r2)
 1837d70:	e0bff417 	ldw	r2,-48(fp)
 1837d74:	10c0020b 	ldhu	r3,8(r2)
 1837d78:	20bfffcc 	andi	r2,r4,65535
 1837d7c:	18ffffcc 	andi	r3,r3,65535
 1837d80:	18817f2e 	bgeu	r3,r2,1838380 <tcp_receive+0x1f40>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 1837d84:	01006134 	movhi	r4,388
 1837d88:	211e4904 	addi	r4,r4,31012
 1837d8c:	181cb680 	call	181cb68 <tcp_seg_copy>
 1837d90:	e0bffd15 	stw	r2,-12(fp)
                if (cseg != NULL) {
 1837d94:	e0bffd17 	ldw	r2,-12(fp)
 1837d98:	10017b26 	beq	r2,zero,1838388 <tcp_receive+0x1f48>
                  if (prev != NULL) {
 1837d9c:	e0bff517 	ldw	r2,-44(fp)
 1837da0:	10000426 	beq	r2,zero,1837db4 <tcp_receive+0x1974>
                    prev->next = cseg;
 1837da4:	e0bff517 	ldw	r2,-44(fp)
 1837da8:	e0fffd17 	ldw	r3,-12(fp)
 1837dac:	10c00015 	stw	r3,0(r2)
 1837db0:	00000306 	br	1837dc0 <tcp_receive+0x1980>
                  } else {
                    pcb->ooseq = cseg;
 1837db4:	e0bffe17 	ldw	r2,-8(fp)
 1837db8:	e0fffd17 	ldw	r3,-12(fp)
 1837dbc:	10c01e15 	stw	r3,120(r2)
                  }
                  tcp_oos_insert_segment(cseg, next);
 1837dc0:	e17ff417 	ldw	r5,-48(fp)
 1837dc4:	e13ffd17 	ldw	r4,-12(fp)
 1837dc8:	18361a00 	call	18361a0 <tcp_oos_insert_segment>
                }
                break;
 1837dcc:	00016e06 	br	1838388 <tcp_receive+0x1f48>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 1837dd0:	e0bff517 	ldw	r2,-44(fp)
 1837dd4:	10001c1e 	bne	r2,zero,1837e48 <tcp_receive+0x1a08>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 1837dd8:	d0e81817 	ldw	r3,-24480(gp)
 1837ddc:	e0bff417 	ldw	r2,-48(fp)
 1837de0:	10800417 	ldw	r2,16(r2)
 1837de4:	11000103 	ldbu	r4,4(r2)
 1837de8:	11400143 	ldbu	r5,5(r2)
 1837dec:	280a923a 	slli	r5,r5,8
 1837df0:	2908b03a 	or	r4,r5,r4
 1837df4:	11400183 	ldbu	r5,6(r2)
 1837df8:	280a943a 	slli	r5,r5,16
 1837dfc:	2908b03a 	or	r4,r5,r4
 1837e00:	108001c3 	ldbu	r2,7(r2)
 1837e04:	1004963a 	slli	r2,r2,24
 1837e08:	1104b03a 	or	r2,r2,r4
 1837e0c:	1885c83a 	sub	r2,r3,r2
 1837e10:	1000680e 	bge	r2,zero,1837fb4 <tcp_receive+0x1b74>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 1837e14:	01006134 	movhi	r4,388
 1837e18:	211e4904 	addi	r4,r4,31012
 1837e1c:	181cb680 	call	181cb68 <tcp_seg_copy>
 1837e20:	e0bffd15 	stw	r2,-12(fp)
                  if (cseg != NULL) {
 1837e24:	e0bffd17 	ldw	r2,-12(fp)
 1837e28:	10015926 	beq	r2,zero,1838390 <tcp_receive+0x1f50>
                    pcb->ooseq = cseg;
 1837e2c:	e0bffe17 	ldw	r2,-8(fp)
 1837e30:	e0fffd17 	ldw	r3,-12(fp)
 1837e34:	10c01e15 	stw	r3,120(r2)
                    tcp_oos_insert_segment(cseg, next);
 1837e38:	e17ff417 	ldw	r5,-48(fp)
 1837e3c:	e13ffd17 	ldw	r4,-12(fp)
 1837e40:	18361a00 	call	18361a0 <tcp_oos_insert_segment>
                  }
                  break;
 1837e44:	00015206 	br	1838390 <tcp_receive+0x1f50>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 1837e48:	d0e81817 	ldw	r3,-24480(gp)
 1837e4c:	e0bff517 	ldw	r2,-44(fp)
 1837e50:	10800417 	ldw	r2,16(r2)
 1837e54:	11000103 	ldbu	r4,4(r2)
 1837e58:	11400143 	ldbu	r5,5(r2)
 1837e5c:	280a923a 	slli	r5,r5,8
 1837e60:	2908b03a 	or	r4,r5,r4
 1837e64:	11400183 	ldbu	r5,6(r2)
 1837e68:	280a943a 	slli	r5,r5,16
 1837e6c:	2908b03a 	or	r4,r5,r4
 1837e70:	108001c3 	ldbu	r2,7(r2)
 1837e74:	1004963a 	slli	r2,r2,24
 1837e78:	1104b03a 	or	r2,r2,r4
 1837e7c:	1885c83a 	sub	r2,r3,r2
 1837e80:	10bfffc4 	addi	r2,r2,-1
 1837e84:	10004b16 	blt	r2,zero,1837fb4 <tcp_receive+0x1b74>
 1837e88:	d0e81817 	ldw	r3,-24480(gp)
 1837e8c:	e0bff417 	ldw	r2,-48(fp)
 1837e90:	10800417 	ldw	r2,16(r2)
 1837e94:	11000103 	ldbu	r4,4(r2)
 1837e98:	11400143 	ldbu	r5,5(r2)
 1837e9c:	280a923a 	slli	r5,r5,8
 1837ea0:	2908b03a 	or	r4,r5,r4
 1837ea4:	11400183 	ldbu	r5,6(r2)
 1837ea8:	280a943a 	slli	r5,r5,16
 1837eac:	2908b03a 	or	r4,r5,r4
 1837eb0:	108001c3 	ldbu	r2,7(r2)
 1837eb4:	1004963a 	slli	r2,r2,24
 1837eb8:	1104b03a 	or	r2,r2,r4
 1837ebc:	1885c83a 	sub	r2,r3,r2
 1837ec0:	10800044 	addi	r2,r2,1
 1837ec4:	00803b16 	blt	zero,r2,1837fb4 <tcp_receive+0x1b74>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 1837ec8:	01006134 	movhi	r4,388
 1837ecc:	211e4904 	addi	r4,r4,31012
 1837ed0:	181cb680 	call	181cb68 <tcp_seg_copy>
 1837ed4:	e0bffd15 	stw	r2,-12(fp)
                  if (cseg != NULL) {
 1837ed8:	e0bffd17 	ldw	r2,-12(fp)
 1837edc:	10012e26 	beq	r2,zero,1838398 <tcp_receive+0x1f58>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 1837ee0:	e0bff517 	ldw	r2,-44(fp)
 1837ee4:	10800417 	ldw	r2,16(r2)
 1837ee8:	10c00103 	ldbu	r3,4(r2)
 1837eec:	11000143 	ldbu	r4,5(r2)
 1837ef0:	2008923a 	slli	r4,r4,8
 1837ef4:	20c6b03a 	or	r3,r4,r3
 1837ef8:	11000183 	ldbu	r4,6(r2)
 1837efc:	2008943a 	slli	r4,r4,16
 1837f00:	20c6b03a 	or	r3,r4,r3
 1837f04:	108001c3 	ldbu	r2,7(r2)
 1837f08:	1004963a 	slli	r2,r2,24
 1837f0c:	10c4b03a 	or	r2,r2,r3
 1837f10:	1007883a 	mov	r3,r2
 1837f14:	e0bff517 	ldw	r2,-44(fp)
 1837f18:	1080020b 	ldhu	r2,8(r2)
 1837f1c:	10bfffcc 	andi	r2,r2,65535
 1837f20:	1887883a 	add	r3,r3,r2
 1837f24:	d0a81817 	ldw	r2,-24480(gp)
 1837f28:	1885c83a 	sub	r2,r3,r2
 1837f2c:	00801a0e 	bge	zero,r2,1837f98 <tcp_receive+0x1b58>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 1837f30:	d0a81817 	ldw	r2,-24480(gp)
 1837f34:	100b883a 	mov	r5,r2
 1837f38:	e0bff517 	ldw	r2,-44(fp)
 1837f3c:	10800417 	ldw	r2,16(r2)
 1837f40:	10c00103 	ldbu	r3,4(r2)
 1837f44:	11000143 	ldbu	r4,5(r2)
 1837f48:	2008923a 	slli	r4,r4,8
 1837f4c:	20c6b03a 	or	r3,r4,r3
 1837f50:	11000183 	ldbu	r4,6(r2)
 1837f54:	2008943a 	slli	r4,r4,16
 1837f58:	20c6b03a 	or	r3,r4,r3
 1837f5c:	108001c3 	ldbu	r2,7(r2)
 1837f60:	1004963a 	slli	r2,r2,24
 1837f64:	10c4b03a 	or	r2,r2,r3
 1837f68:	2885c83a 	sub	r2,r5,r2
 1837f6c:	1007883a 	mov	r3,r2
 1837f70:	e0bff517 	ldw	r2,-44(fp)
 1837f74:	10c0020d 	sth	r3,8(r2)
                      pbuf_realloc(prev->p, prev->len);
 1837f78:	e0bff517 	ldw	r2,-44(fp)
 1837f7c:	10c00117 	ldw	r3,4(r2)
 1837f80:	e0bff517 	ldw	r2,-44(fp)
 1837f84:	1080020b 	ldhu	r2,8(r2)
 1837f88:	10bfffcc 	andi	r2,r2,65535
 1837f8c:	100b883a 	mov	r5,r2
 1837f90:	1809883a 	mov	r4,r3
 1837f94:	1819f740 	call	1819f74 <pbuf_realloc>
                    }
                    prev->next = cseg;
 1837f98:	e0bff517 	ldw	r2,-44(fp)
 1837f9c:	e0fffd17 	ldw	r3,-12(fp)
 1837fa0:	10c00015 	stw	r3,0(r2)
                    tcp_oos_insert_segment(cseg, next);
 1837fa4:	e17ff417 	ldw	r5,-48(fp)
 1837fa8:	e13ffd17 	ldw	r4,-12(fp)
 1837fac:	18361a00 	call	18361a0 <tcp_oos_insert_segment>
                  }
                  break;
 1837fb0:	0000f906 	br	1838398 <tcp_receive+0x1f58>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 1837fb4:	e0bff417 	ldw	r2,-48(fp)
 1837fb8:	10800017 	ldw	r2,0(r2)
 1837fbc:	1000e81e 	bne	r2,zero,1838360 <tcp_receive+0x1f20>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 1837fc0:	d0e81817 	ldw	r3,-24480(gp)
 1837fc4:	e0bff417 	ldw	r2,-48(fp)
 1837fc8:	10800417 	ldw	r2,16(r2)
 1837fcc:	11000103 	ldbu	r4,4(r2)
 1837fd0:	11400143 	ldbu	r5,5(r2)
 1837fd4:	280a923a 	slli	r5,r5,8
 1837fd8:	2908b03a 	or	r4,r5,r4
 1837fdc:	11400183 	ldbu	r5,6(r2)
 1837fe0:	280a943a 	slli	r5,r5,16
 1837fe4:	2908b03a 	or	r4,r5,r4
 1837fe8:	108001c3 	ldbu	r2,7(r2)
 1837fec:	1004963a 	slli	r2,r2,24
 1837ff0:	1104b03a 	or	r2,r2,r4
 1837ff4:	1885c83a 	sub	r2,r3,r2
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 1837ff8:	0080d90e 	bge	zero,r2,1838360 <tcp_receive+0x1f20>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 1837ffc:	e0bff417 	ldw	r2,-48(fp)
 1838000:	10800417 	ldw	r2,16(r2)
 1838004:	10c00303 	ldbu	r3,12(r2)
 1838008:	10800343 	ldbu	r2,13(r2)
 183800c:	1004923a 	slli	r2,r2,8
 1838010:	10c4b03a 	or	r2,r2,r3
 1838014:	10bfffcc 	andi	r2,r2,65535
 1838018:	1004d23a 	srli	r2,r2,8
 183801c:	10ffffcc 	andi	r3,r2,65535
 1838020:	e0bff417 	ldw	r2,-48(fp)
 1838024:	10800417 	ldw	r2,16(r2)
 1838028:	11000303 	ldbu	r4,12(r2)
 183802c:	10800343 	ldbu	r2,13(r2)
 1838030:	1004923a 	slli	r2,r2,8
 1838034:	1104b03a 	or	r2,r2,r4
 1838038:	10bfffcc 	andi	r2,r2,65535
 183803c:	1004923a 	slli	r2,r2,8
 1838040:	10bfffcc 	andi	r2,r2,65535
 1838044:	1884b03a 	or	r2,r3,r2
 1838048:	1080004c 	andi	r2,r2,1
 183804c:	1000d41e 	bne	r2,zero,18383a0 <tcp_receive+0x1f60>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 1838050:	01006134 	movhi	r4,388
 1838054:	211e4904 	addi	r4,r4,31012
 1838058:	181cb680 	call	181cb68 <tcp_seg_copy>
 183805c:	1007883a 	mov	r3,r2
 1838060:	e0bff417 	ldw	r2,-48(fp)
 1838064:	10c00015 	stw	r3,0(r2)
                if (next->next != NULL) {
 1838068:	e0bff417 	ldw	r2,-48(fp)
 183806c:	10800017 	ldw	r2,0(r2)
 1838070:	1000cd26 	beq	r2,zero,18383a8 <tcp_receive+0x1f68>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 1838074:	e0bff417 	ldw	r2,-48(fp)
 1838078:	10800417 	ldw	r2,16(r2)
 183807c:	10c00103 	ldbu	r3,4(r2)
 1838080:	11000143 	ldbu	r4,5(r2)
 1838084:	2008923a 	slli	r4,r4,8
 1838088:	20c6b03a 	or	r3,r4,r3
 183808c:	11000183 	ldbu	r4,6(r2)
 1838090:	2008943a 	slli	r4,r4,16
 1838094:	20c6b03a 	or	r3,r4,r3
 1838098:	108001c3 	ldbu	r2,7(r2)
 183809c:	1004963a 	slli	r2,r2,24
 18380a0:	10c4b03a 	or	r2,r2,r3
 18380a4:	1007883a 	mov	r3,r2
 18380a8:	e0bff417 	ldw	r2,-48(fp)
 18380ac:	1080020b 	ldhu	r2,8(r2)
 18380b0:	10bfffcc 	andi	r2,r2,65535
 18380b4:	1887883a 	add	r3,r3,r2
 18380b8:	d0a81817 	ldw	r2,-24480(gp)
 18380bc:	1885c83a 	sub	r2,r3,r2
 18380c0:	00801a0e 	bge	zero,r2,183812c <tcp_receive+0x1cec>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 18380c4:	d0a81817 	ldw	r2,-24480(gp)
 18380c8:	100b883a 	mov	r5,r2
 18380cc:	e0bff417 	ldw	r2,-48(fp)
 18380d0:	10800417 	ldw	r2,16(r2)
 18380d4:	10c00103 	ldbu	r3,4(r2)
 18380d8:	11000143 	ldbu	r4,5(r2)
 18380dc:	2008923a 	slli	r4,r4,8
 18380e0:	20c6b03a 	or	r3,r4,r3
 18380e4:	11000183 	ldbu	r4,6(r2)
 18380e8:	2008943a 	slli	r4,r4,16
 18380ec:	20c6b03a 	or	r3,r4,r3
 18380f0:	108001c3 	ldbu	r2,7(r2)
 18380f4:	1004963a 	slli	r2,r2,24
 18380f8:	10c4b03a 	or	r2,r2,r3
 18380fc:	2885c83a 	sub	r2,r5,r2
 1838100:	1007883a 	mov	r3,r2
 1838104:	e0bff417 	ldw	r2,-48(fp)
 1838108:	10c0020d 	sth	r3,8(r2)
                    pbuf_realloc(next->p, next->len);
 183810c:	e0bff417 	ldw	r2,-48(fp)
 1838110:	10c00117 	ldw	r3,4(r2)
 1838114:	e0bff417 	ldw	r2,-48(fp)
 1838118:	1080020b 	ldhu	r2,8(r2)
 183811c:	10bfffcc 	andi	r2,r2,65535
 1838120:	100b883a 	mov	r5,r2
 1838124:	1809883a 	mov	r4,r3
 1838128:	1819f740 	call	1819f74 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
 183812c:	d0a81a8b 	ldhu	r2,-24470(gp)
 1838130:	10ffffcc 	andi	r3,r2,65535
 1838134:	d0a81817 	ldw	r2,-24480(gp)
 1838138:	1885883a 	add	r2,r3,r2
 183813c:	e0fffe17 	ldw	r3,-8(fp)
 1838140:	19000b17 	ldw	r4,44(r3)
 1838144:	e0fffe17 	ldw	r3,-8(fp)
 1838148:	18c00c0b 	ldhu	r3,48(r3)
 183814c:	18ffffcc 	andi	r3,r3,65535
 1838150:	20c7883a 	add	r3,r4,r3
 1838154:	1880942e 	bgeu	r3,r2,18383a8 <tcp_receive+0x1f68>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 1838158:	e0bff417 	ldw	r2,-48(fp)
 183815c:	10800017 	ldw	r2,0(r2)
 1838160:	10800417 	ldw	r2,16(r2)
 1838164:	10c00303 	ldbu	r3,12(r2)
 1838168:	10800343 	ldbu	r2,13(r2)
 183816c:	1004923a 	slli	r2,r2,8
 1838170:	10c4b03a 	or	r2,r2,r3
 1838174:	10bfffcc 	andi	r2,r2,65535
 1838178:	1004d23a 	srli	r2,r2,8
 183817c:	10ffffcc 	andi	r3,r2,65535
 1838180:	e0bff417 	ldw	r2,-48(fp)
 1838184:	10800017 	ldw	r2,0(r2)
 1838188:	10800417 	ldw	r2,16(r2)
 183818c:	11000303 	ldbu	r4,12(r2)
 1838190:	10800343 	ldbu	r2,13(r2)
 1838194:	1004923a 	slli	r2,r2,8
 1838198:	1104b03a 	or	r2,r2,r4
 183819c:	10bfffcc 	andi	r2,r2,65535
 18381a0:	1004923a 	slli	r2,r2,8
 18381a4:	10bfffcc 	andi	r2,r2,65535
 18381a8:	1884b03a 	or	r2,r3,r2
 18381ac:	1080004c 	andi	r2,r2,1
 18381b0:	10003726 	beq	r2,zero,1838290 <tcp_receive+0x1e50>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
 18381b4:	e0bff417 	ldw	r2,-48(fp)
 18381b8:	10800017 	ldw	r2,0(r2)
 18381bc:	10800417 	ldw	r2,16(r2)
 18381c0:	e0fff417 	ldw	r3,-48(fp)
 18381c4:	18c00017 	ldw	r3,0(r3)
 18381c8:	18c00417 	ldw	r3,16(r3)
 18381cc:	19000303 	ldbu	r4,12(r3)
 18381d0:	18c00343 	ldbu	r3,13(r3)
 18381d4:	1806923a 	slli	r3,r3,8
 18381d8:	1906b03a 	or	r3,r3,r4
 18381dc:	1809883a 	mov	r4,r3
 18381e0:	00f03fc4 	movi	r3,-16129
 18381e4:	20c6703a 	and	r3,r4,r3
 18381e8:	180b883a 	mov	r5,r3
 18381ec:	e0fff417 	ldw	r3,-48(fp)
 18381f0:	18c00017 	ldw	r3,0(r3)
 18381f4:	18c00417 	ldw	r3,16(r3)
 18381f8:	19000303 	ldbu	r4,12(r3)
 18381fc:	18c00343 	ldbu	r3,13(r3)
 1838200:	1806923a 	slli	r3,r3,8
 1838204:	1906b03a 	or	r3,r3,r4
 1838208:	18ffffcc 	andi	r3,r3,65535
 183820c:	1806d23a 	srli	r3,r3,8
 1838210:	180d883a 	mov	r6,r3
 1838214:	e0fff417 	ldw	r3,-48(fp)
 1838218:	18c00017 	ldw	r3,0(r3)
 183821c:	18c00417 	ldw	r3,16(r3)
 1838220:	19000303 	ldbu	r4,12(r3)
 1838224:	18c00343 	ldbu	r3,13(r3)
 1838228:	1806923a 	slli	r3,r3,8
 183822c:	1906b03a 	or	r3,r3,r4
 1838230:	18ffffcc 	andi	r3,r3,65535
 1838234:	1806923a 	slli	r3,r3,8
 1838238:	30c6b03a 	or	r3,r6,r3
 183823c:	18c00f8c 	andi	r3,r3,62
 1838240:	1806923a 	slli	r3,r3,8
 1838244:	28c6b03a 	or	r3,r5,r3
 1838248:	180d883a 	mov	r6,r3
 183824c:	30ffffcc 	andi	r3,r6,65535
 1838250:	19403fcc 	andi	r5,r3,255
 1838254:	10c00303 	ldbu	r3,12(r2)
 1838258:	1806703a 	and	r3,r3,zero
 183825c:	1809883a 	mov	r4,r3
 1838260:	2807883a 	mov	r3,r5
 1838264:	20c6b03a 	or	r3,r4,r3
 1838268:	10c00305 	stb	r3,12(r2)
 183826c:	30ffffcc 	andi	r3,r6,65535
 1838270:	1806d23a 	srli	r3,r3,8
 1838274:	197fffcc 	andi	r5,r3,65535
 1838278:	10c00343 	ldbu	r3,13(r2)
 183827c:	1806703a 	and	r3,r3,zero
 1838280:	1809883a 	mov	r4,r3
 1838284:	2807883a 	mov	r3,r5
 1838288:	20c6b03a 	or	r3,r4,r3
 183828c:	10c00345 	stb	r3,13(r2)
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
 1838290:	e0bff417 	ldw	r2,-48(fp)
 1838294:	10800017 	ldw	r2,0(r2)
 1838298:	e0fffe17 	ldw	r3,-8(fp)
 183829c:	18c00b17 	ldw	r3,44(r3)
 18382a0:	1809883a 	mov	r4,r3
 18382a4:	e0fffe17 	ldw	r3,-8(fp)
 18382a8:	18c00c0b 	ldhu	r3,48(r3)
 18382ac:	20c7883a 	add	r3,r4,r3
 18382b0:	1809883a 	mov	r4,r3
 18382b4:	d0e81817 	ldw	r3,-24480(gp)
 18382b8:	20c7c83a 	sub	r3,r4,r3
 18382bc:	10c0020d 	sth	r3,8(r2)
                    pbuf_realloc(next->next->p, next->next->len);
 18382c0:	e0bff417 	ldw	r2,-48(fp)
 18382c4:	10800017 	ldw	r2,0(r2)
 18382c8:	10c00117 	ldw	r3,4(r2)
 18382cc:	e0bff417 	ldw	r2,-48(fp)
 18382d0:	10800017 	ldw	r2,0(r2)
 18382d4:	1080020b 	ldhu	r2,8(r2)
 18382d8:	10bfffcc 	andi	r2,r2,65535
 18382dc:	100b883a 	mov	r5,r2
 18382e0:	1809883a 	mov	r4,r3
 18382e4:	1819f740 	call	1819f74 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 18382e8:	e0bff417 	ldw	r2,-48(fp)
 18382ec:	10800017 	ldw	r2,0(r2)
 18382f0:	10c0020b 	ldhu	r3,8(r2)
 18382f4:	e0bff417 	ldw	r2,-48(fp)
 18382f8:	10800017 	ldw	r2,0(r2)
 18382fc:	10800417 	ldw	r2,16(r2)
 1838300:	11000303 	ldbu	r4,12(r2)
 1838304:	10800343 	ldbu	r2,13(r2)
 1838308:	1004923a 	slli	r2,r2,8
 183830c:	1104b03a 	or	r2,r2,r4
 1838310:	10bfffcc 	andi	r2,r2,65535
 1838314:	1004d23a 	srli	r2,r2,8
 1838318:	113fffcc 	andi	r4,r2,65535
 183831c:	e0bff417 	ldw	r2,-48(fp)
 1838320:	10800017 	ldw	r2,0(r2)
 1838324:	10800417 	ldw	r2,16(r2)
 1838328:	11400303 	ldbu	r5,12(r2)
 183832c:	10800343 	ldbu	r2,13(r2)
 1838330:	1004923a 	slli	r2,r2,8
 1838334:	1144b03a 	or	r2,r2,r5
 1838338:	10bfffcc 	andi	r2,r2,65535
 183833c:	1004923a 	slli	r2,r2,8
 1838340:	10bfffcc 	andi	r2,r2,65535
 1838344:	2084b03a 	or	r2,r4,r2
 1838348:	108000cc 	andi	r2,r2,3
 183834c:	1004c03a 	cmpne	r2,r2,zero
 1838350:	10803fcc 	andi	r2,r2,255
 1838354:	1885883a 	add	r2,r3,r2
 1838358:	d0a81a8d 	sth	r2,-24470(gp)
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 183835c:	00001206 	br	18383a8 <tcp_receive+0x1f68>
              }
            }
            prev = next;
 1838360:	e0bff417 	ldw	r2,-48(fp)
 1838364:	e0bff515 	stw	r2,-44(fp)
             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 1838368:	e0bff417 	ldw	r2,-48(fp)
 183836c:	10800017 	ldw	r2,0(r2)
 1838370:	e0bff415 	stw	r2,-48(fp)
 1838374:	e0bff417 	ldw	r2,-48(fp)
 1838378:	103e6b1e 	bne	r2,zero,1837d28 <__ram_exceptions_end+0xff827a38>
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 183837c:	00000f06 	br	18383bc <tcp_receive+0x1f7c>
                break;
              } else {
                /* Either the lenghts are the same or the incoming
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
 1838380:	0001883a 	nop
 1838384:	00000d06 	br	18383bc <tcp_receive+0x1f7c>
                  } else {
                    pcb->ooseq = cseg;
                  }
                  tcp_oos_insert_segment(cseg, next);
                }
                break;
 1838388:	0001883a 	nop
 183838c:	00000b06 	br	18383bc <tcp_receive+0x1f7c>
                  cseg = tcp_seg_copy(&inseg);
                  if (cseg != NULL) {
                    pcb->ooseq = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
 1838390:	0001883a 	nop
 1838394:	00000906 	br	18383bc <tcp_receive+0x1f7c>
                      pbuf_realloc(prev->p, prev->len);
                    }
                    prev->next = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
 1838398:	0001883a 	nop
 183839c:	00000706 	br	18383bc <tcp_receive+0x1f7c>
                 of the list. */
              if (next->next == NULL &&
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
                  /* segment "next" already contains all data */
                  break;
 18383a0:	0001883a 	nop
 18383a4:	00000506 	br	18383bc <tcp_receive+0x1f7c>
                    tcplen = TCP_TCPLEN(next->next);
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 18383a8:	0001883a 	nop
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 18383ac:	00000306 	br	18383bc <tcp_receive+0x1f7c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
 18383b0:	e13ffe17 	ldw	r4,-8(fp)
 18383b4:	181ec900 	call	181ec90 <tcp_send_empty_ack>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 18383b8:	00001706 	br	1838418 <tcp_receive+0x1fd8>
 18383bc:	00001606 	br	1838418 <tcp_receive+0x1fd8>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
 18383c0:	d0e81817 	ldw	r3,-24480(gp)
 18383c4:	e0bffe17 	ldw	r2,-8(fp)
 18383c8:	10800b17 	ldw	r2,44(r2)
 18383cc:	1885c83a 	sub	r2,r3,r2
 18383d0:	10000a16 	blt	r2,zero,18383fc <tcp_receive+0x1fbc>
 18383d4:	d0e81817 	ldw	r3,-24480(gp)
 18383d8:	e0bffe17 	ldw	r2,-8(fp)
 18383dc:	11000b17 	ldw	r4,44(r2)
 18383e0:	e0bffe17 	ldw	r2,-8(fp)
 18383e4:	10800c0b 	ldhu	r2,48(r2)
 18383e8:	10bfffcc 	andi	r2,r2,65535
 18383ec:	2085883a 	add	r2,r4,r2
 18383f0:	1885c83a 	sub	r2,r3,r2
 18383f4:	10800044 	addi	r2,r2,1
 18383f8:	0080070e 	bge	zero,r2,1838418 <tcp_receive+0x1fd8>
      tcp_ack_now(pcb);
 18383fc:	e0bffe17 	ldw	r2,-8(fp)
 1838400:	10800883 	ldbu	r2,34(r2)
 1838404:	10800094 	ori	r2,r2,2
 1838408:	1007883a 	mov	r3,r2
 183840c:	e0bffe17 	ldw	r2,-8(fp)
 1838410:	10c00885 	stb	r3,34(r2)
    }
  }
}
 1838414:	00000006 	br	1838418 <tcp_receive+0x1fd8>
 1838418:	0001883a 	nop
 183841c:	e6ffff04 	addi	sp,fp,-4
 1838420:	dfc00217 	ldw	ra,8(sp)
 1838424:	df000117 	ldw	fp,4(sp)
 1838428:	dc000017 	ldw	r16,0(sp)
 183842c:	dec00304 	addi	sp,sp,12
 1838430:	f800283a 	ret

01838434 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 1838434:	defffa04 	addi	sp,sp,-24
 1838438:	df000515 	stw	fp,20(sp)
 183843c:	df000504 	addi	fp,sp,20
 1838440:	e13fff15 	stw	r4,-4(fp)
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
 1838444:	d0a81617 	ldw	r2,-24488(gp)
 1838448:	10800504 	addi	r2,r2,20
 183844c:	e0bffc15 	stw	r2,-16(fp)

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
 1838450:	d0a81617 	ldw	r2,-24488(gp)
 1838454:	10c00303 	ldbu	r3,12(r2)
 1838458:	10800343 	ldbu	r2,13(r2)
 183845c:	1004923a 	slli	r2,r2,8
 1838460:	10c4b03a 	or	r2,r2,r3
 1838464:	10bfffcc 	andi	r2,r2,65535
 1838468:	1004d23a 	srli	r2,r2,8
 183846c:	10ffffcc 	andi	r3,r2,65535
 1838470:	d0a81617 	ldw	r2,-24488(gp)
 1838474:	11000303 	ldbu	r4,12(r2)
 1838478:	10800343 	ldbu	r2,13(r2)
 183847c:	1004923a 	slli	r2,r2,8
 1838480:	1104b03a 	or	r2,r2,r4
 1838484:	10bfffcc 	andi	r2,r2,65535
 1838488:	1004923a 	slli	r2,r2,8
 183848c:	10bfffcc 	andi	r2,r2,65535
 1838490:	1884b03a 	or	r2,r3,r2
 1838494:	1005d33a 	srai	r2,r2,12
 1838498:	10800190 	cmplti	r2,r2,6
 183849c:	10006b1e 	bne	r2,zero,183864c <tcp_parseopt+0x218>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 18384a0:	d0a81617 	ldw	r2,-24488(gp)
 18384a4:	10c00303 	ldbu	r3,12(r2)
 18384a8:	10800343 	ldbu	r2,13(r2)
 18384ac:	1004923a 	slli	r2,r2,8
 18384b0:	10c4b03a 	or	r2,r2,r3
 18384b4:	10bfffcc 	andi	r2,r2,65535
 18384b8:	1004d23a 	srli	r2,r2,8
 18384bc:	10ffffcc 	andi	r3,r2,65535
 18384c0:	d0a81617 	ldw	r2,-24488(gp)
 18384c4:	11000303 	ldbu	r4,12(r2)
 18384c8:	10800343 	ldbu	r2,13(r2)
 18384cc:	1004923a 	slli	r2,r2,8
 18384d0:	1104b03a 	or	r2,r2,r4
 18384d4:	10bfffcc 	andi	r2,r2,65535
 18384d8:	1004923a 	slli	r2,r2,8
 18384dc:	10bfffcc 	andi	r2,r2,65535
 18384e0:	1884b03a 	or	r2,r3,r2
 18384e4:	1005d33a 	srai	r2,r2,12
 18384e8:	10bffec4 	addi	r2,r2,-5
 18384ec:	1085883a 	add	r2,r2,r2
 18384f0:	1085883a 	add	r2,r2,r2
 18384f4:	e0bffd0d 	sth	r2,-12(fp)
    for (c = 0; c < max_c; ) {
 18384f8:	e03ffb0d 	sth	zero,-20(fp)
 18384fc:	00004a06 	br	1838628 <tcp_parseopt+0x1f4>
      opt = opts[c];
 1838500:	e0bffb0b 	ldhu	r2,-20(fp)
 1838504:	e0fffc17 	ldw	r3,-16(fp)
 1838508:	1885883a 	add	r2,r3,r2
 183850c:	10800003 	ldbu	r2,0(r2)
 1838510:	e0bffd85 	stb	r2,-10(fp)
      switch (opt) {
 1838514:	e0bffd83 	ldbu	r2,-10(fp)
 1838518:	10c00060 	cmpeqi	r3,r2,1
 183851c:	1800041e 	bne	r3,zero,1838530 <tcp_parseopt+0xfc>
 1838520:	10c000a0 	cmpeqi	r3,r2,2
 1838524:	1800061e 	bne	r3,zero,1838540 <tcp_parseopt+0x10c>
 1838528:	10004326 	beq	r2,zero,1838638 <tcp_parseopt+0x204>
 183852c:	00002e06 	br	18385e8 <tcp_parseopt+0x1b4>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
 1838530:	e0bffb0b 	ldhu	r2,-20(fp)
 1838534:	10800044 	addi	r2,r2,1
 1838538:	e0bffb0d 	sth	r2,-20(fp)
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 183853c:	00003a06 	br	1838628 <tcp_parseopt+0x1f4>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
 1838540:	e0bffb0b 	ldhu	r2,-20(fp)
 1838544:	10800044 	addi	r2,r2,1
 1838548:	e0fffc17 	ldw	r3,-16(fp)
 183854c:	1885883a 	add	r2,r3,r2
 1838550:	10800003 	ldbu	r2,0(r2)
 1838554:	10803fcc 	andi	r2,r2,255
 1838558:	10800118 	cmpnei	r2,r2,4
 183855c:	1000381e 	bne	r2,zero,1838640 <tcp_parseopt+0x20c>
 1838560:	e0bffb0b 	ldhu	r2,-20(fp)
 1838564:	10800104 	addi	r2,r2,4
 1838568:	e0fffd0b 	ldhu	r3,-12(fp)
 183856c:	18803416 	blt	r3,r2,1838640 <tcp_parseopt+0x20c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
 1838570:	e0bffb0b 	ldhu	r2,-20(fp)
 1838574:	10800084 	addi	r2,r2,2
 1838578:	e0fffc17 	ldw	r3,-16(fp)
 183857c:	1885883a 	add	r2,r3,r2
 1838580:	10800003 	ldbu	r2,0(r2)
 1838584:	10803fcc 	andi	r2,r2,255
 1838588:	1004923a 	slli	r2,r2,8
 183858c:	1009883a 	mov	r4,r2
 1838590:	e0bffb0b 	ldhu	r2,-20(fp)
 1838594:	108000c4 	addi	r2,r2,3
 1838598:	e0fffc17 	ldw	r3,-16(fp)
 183859c:	1885883a 	add	r2,r3,r2
 18385a0:	10800003 	ldbu	r2,0(r2)
 18385a4:	10803fcc 	andi	r2,r2,255
 18385a8:	2084b03a 	or	r2,r4,r2
 18385ac:	e0bffe0d 	sth	r2,-8(fp)
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 18385b0:	e0bffe0b 	ldhu	r2,-8(fp)
 18385b4:	10816d68 	cmpgeui	r2,r2,1461
 18385b8:	1000041e 	bne	r2,zero,18385cc <tcp_parseopt+0x198>
 18385bc:	e0bffe0b 	ldhu	r2,-8(fp)
 18385c0:	10000226 	beq	r2,zero,18385cc <tcp_parseopt+0x198>
 18385c4:	e0bffe0b 	ldhu	r2,-8(fp)
 18385c8:	00000106 	br	18385d0 <tcp_parseopt+0x19c>
 18385cc:	00816d04 	movi	r2,1460
 18385d0:	e0ffff17 	ldw	r3,-4(fp)
 18385d4:	18800e8d 	sth	r2,58(r3)
        /* Advance to next option */
        c += 0x04;
 18385d8:	e0bffb0b 	ldhu	r2,-20(fp)
 18385dc:	10800104 	addi	r2,r2,4
 18385e0:	e0bffb0d 	sth	r2,-20(fp)
        break;
 18385e4:	00001006 	br	1838628 <tcp_parseopt+0x1f4>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
 18385e8:	e0bffb0b 	ldhu	r2,-20(fp)
 18385ec:	10800044 	addi	r2,r2,1
 18385f0:	e0fffc17 	ldw	r3,-16(fp)
 18385f4:	1885883a 	add	r2,r3,r2
 18385f8:	10800003 	ldbu	r2,0(r2)
 18385fc:	10803fcc 	andi	r2,r2,255
 1838600:	10001126 	beq	r2,zero,1838648 <tcp_parseopt+0x214>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
 1838604:	e0bffb0b 	ldhu	r2,-20(fp)
 1838608:	10800044 	addi	r2,r2,1
 183860c:	e0fffc17 	ldw	r3,-16(fp)
 1838610:	1885883a 	add	r2,r3,r2
 1838614:	10800003 	ldbu	r2,0(r2)
 1838618:	10c03fcc 	andi	r3,r2,255
 183861c:	e0bffb0b 	ldhu	r2,-20(fp)
 1838620:	1885883a 	add	r2,r3,r2
 1838624:	e0bffb0d 	sth	r2,-20(fp)
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
 1838628:	e0fffb0b 	ldhu	r3,-20(fp)
 183862c:	e0bffd0b 	ldhu	r2,-12(fp)
 1838630:	18bfb336 	bltu	r3,r2,1838500 <__ram_exceptions_end+0xff828210>
 1838634:	00000506 	br	183864c <tcp_parseopt+0x218>
      opt = opts[c];
      switch (opt) {
      case 0x00:
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
 1838638:	0001883a 	nop
 183863c:	00000306 	br	183864c <tcp_parseopt+0x218>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
 1838640:	0001883a 	nop
 1838644:	00000106 	br	183864c <tcp_parseopt+0x218>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          /* If the length field is zero, the options are malformed
             and we don't process them further. */
          return;
 1838648:	0001883a 	nop
           can skip past them. */
        c += opts[c + 1];
      }
    }
  }
}
 183864c:	e037883a 	mov	sp,fp
 1838650:	df000017 	ldw	fp,0(sp)
 1838654:	dec00104 	addi	sp,sp,4
 1838658:	f800283a 	ret

0183865c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 183865c:	defffb04 	addi	sp,sp,-20
 1838660:	df000415 	stw	fp,16(sp)
 1838664:	df000404 	addi	fp,sp,16
 1838668:	e13ffe15 	stw	r4,-8(fp)
 183866c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1838670:	e0bfff17 	ldw	r2,-4(fp)
 1838674:	10810070 	cmpltui	r2,r2,1025
 1838678:	1000021e 	bne	r2,zero,1838684 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 183867c:	00810004 	movi	r2,1024
 1838680:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1838684:	e0fffe17 	ldw	r3,-8(fp)
 1838688:	e0bfff17 	ldw	r2,-4(fp)
 183868c:	1885883a 	add	r2,r3,r2
 1838690:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1838694:	e0bffe17 	ldw	r2,-8(fp)
 1838698:	e0bffc15 	stw	r2,-16(fp)
 183869c:	00000506 	br	18386b4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 18386a0:	e0bffc17 	ldw	r2,-16(fp)
 18386a4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 18386a8:	e0bffc17 	ldw	r2,-16(fp)
 18386ac:	10800804 	addi	r2,r2,32
 18386b0:	e0bffc15 	stw	r2,-16(fp)
 18386b4:	e0fffc17 	ldw	r3,-16(fp)
 18386b8:	e0bffd17 	ldw	r2,-12(fp)
 18386bc:	18bff836 	bltu	r3,r2,18386a0 <__ram_exceptions_end+0xff8283b0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 18386c0:	e0bffe17 	ldw	r2,-8(fp)
 18386c4:	108007cc 	andi	r2,r2,31
 18386c8:	10000226 	beq	r2,zero,18386d4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 18386cc:	e0bffc17 	ldw	r2,-16(fp)
 18386d0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 18386d4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 18386d8:	0001883a 	nop
 18386dc:	e037883a 	mov	sp,fp
 18386e0:	df000017 	ldw	fp,0(sp)
 18386e4:	dec00104 	addi	sp,sp,4
 18386e8:	f800283a 	ret

018386ec <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 18386ec:	defff404 	addi	sp,sp,-48
 18386f0:	dfc00b15 	stw	ra,44(sp)
 18386f4:	df000a15 	stw	fp,40(sp)
 18386f8:	df000a04 	addi	fp,sp,40
 18386fc:	e13ffd15 	stw	r4,-12(fp)
 1838700:	2805883a 	mov	r2,r5
 1838704:	e1bfff15 	stw	r6,-4(fp)
 1838708:	e0bffe05 	stb	r2,-8(fp)
  struct netconn *conn;
  struct api_msg msg;

  conn = netconn_alloc(t, callback);
 183870c:	e17fff17 	ldw	r5,-4(fp)
 1838710:	e13ffd17 	ldw	r4,-12(fp)
 1838714:	183a3a00 	call	183a3a0 <netconn_alloc>
 1838718:	e0bff615 	stw	r2,-40(fp)
  if (conn != NULL) {
 183871c:	e0bff617 	ldw	r2,-40(fp)
 1838720:	10001a26 	beq	r2,zero,183878c <netconn_new_with_proto_and_callback+0xa0>
    msg.function = do_newconn;
 1838724:	00806134 	movhi	r2,388
 1838728:	10a8d004 	addi	r2,r2,-23744
 183872c:	e0bff715 	stw	r2,-36(fp)
    msg.msg.msg.n.proto = proto;
 1838730:	e0bffe03 	ldbu	r2,-8(fp)
 1838734:	e0bffa05 	stb	r2,-24(fp)
    msg.msg.conn = conn;
 1838738:	e0bff617 	ldw	r2,-40(fp)
 183873c:	e0bff815 	stw	r2,-32(fp)
    if (TCPIP_APIMSG(&msg) != ERR_OK) {
 1838740:	e0bff704 	addi	r2,fp,-36
 1838744:	1009883a 	mov	r4,r2
 1838748:	18306200 	call	1830620 <tcpip_apimsg>
 183874c:	10803fcc 	andi	r2,r2,255
 1838750:	1080201c 	xori	r2,r2,128
 1838754:	10bfe004 	addi	r2,r2,-128
 1838758:	10000c26 	beq	r2,zero,183878c <netconn_new_with_proto_and_callback+0xa0>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */
      sys_sem_free(&conn->op_completed);
 183875c:	e0bff617 	ldw	r2,-40(fp)
 1838760:	10800404 	addi	r2,r2,16
 1838764:	1009883a 	mov	r4,r2
 1838768:	1814f740 	call	1814f74 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 183876c:	e0bff617 	ldw	r2,-40(fp)
 1838770:	10800504 	addi	r2,r2,20
 1838774:	1009883a 	mov	r4,r2
 1838778:	181536c0 	call	181536c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 183877c:	e13ff617 	ldw	r4,-40(fp)
 1838780:	183c5140 	call	183c514 <free>
      return NULL;
 1838784:	0005883a 	mov	r2,zero
 1838788:	00000106 	br	1838790 <netconn_new_with_proto_and_callback+0xa4>
    }
  }
  return conn;
 183878c:	e0bff617 	ldw	r2,-40(fp)
}
 1838790:	e037883a 	mov	sp,fp
 1838794:	dfc00117 	ldw	ra,4(sp)
 1838798:	df000017 	ldw	fp,0(sp)
 183879c:	dec00204 	addi	sp,sp,8
 18387a0:	f800283a 	ret

018387a4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 18387a4:	defff704 	addi	sp,sp,-36
 18387a8:	dfc00815 	stw	ra,32(sp)
 18387ac:	df000715 	stw	fp,28(sp)
 18387b0:	df000704 	addi	fp,sp,28
 18387b4:	e13fff15 	stw	r4,-4(fp)
  struct api_msg msg;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 18387b8:	e0bfff17 	ldw	r2,-4(fp)
 18387bc:	1000021e 	bne	r2,zero,18387c8 <netconn_delete+0x24>
    return ERR_OK;
 18387c0:	0005883a 	mov	r2,zero
 18387c4:	00000a06 	br	18387f0 <netconn_delete+0x4c>
  }

  msg.function = do_delconn;
 18387c8:	00806134 	movhi	r2,388
 18387cc:	10aa4c04 	addi	r2,r2,-22224
 18387d0:	e0bff915 	stw	r2,-28(fp)
  msg.msg.conn = conn;
 18387d4:	e0bfff17 	ldw	r2,-4(fp)
 18387d8:	e0bffa15 	stw	r2,-24(fp)
  tcpip_apimsg(&msg);
 18387dc:	e13ff904 	addi	r4,fp,-28
 18387e0:	18306200 	call	1830620 <tcpip_apimsg>

  netconn_free(conn);
 18387e4:	e13fff17 	ldw	r4,-4(fp)
 18387e8:	183a4d80 	call	183a4d8 <netconn_free>

  /* don't care for return value of do_delconn since it only calls void functions */

  return ERR_OK;
 18387ec:	0005883a 	mov	r2,zero
}
 18387f0:	e037883a 	mov	sp,fp
 18387f4:	dfc00117 	ldw	ra,4(sp)
 18387f8:	df000017 	ldw	fp,0(sp)
 18387fc:	dec00204 	addi	sp,sp,8
 1838800:	f800283a 	ret

01838804 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 1838804:	defff304 	addi	sp,sp,-52
 1838808:	dfc00c15 	stw	ra,48(sp)
 183880c:	df000b15 	stw	fp,44(sp)
 1838810:	df000b04 	addi	fp,sp,44
 1838814:	e13ffc15 	stw	r4,-16(fp)
 1838818:	e17ffd15 	stw	r5,-12(fp)
 183881c:	e1bffe15 	stw	r6,-8(fp)
 1838820:	3805883a 	mov	r2,r7
 1838824:	e0bfff05 	stb	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 1838828:	e0bffc17 	ldw	r2,-16(fp)
 183882c:	1000091e 	bne	r2,zero,1838854 <netconn_getaddr+0x50>
 1838830:	01c06134 	movhi	r7,388
 1838834:	39cbd404 	addi	r7,r7,12112
 1838838:	01802304 	movi	r6,140
 183883c:	01406134 	movhi	r5,388
 1838840:	294bda04 	addi	r5,r5,12136
 1838844:	01006134 	movhi	r4,388
 1838848:	210be204 	addi	r4,r4,12168
 183884c:	1800b240 	call	1800b24 <printf>
 1838850:	003fff06 	br	1838850 <__ram_exceptions_end+0xff828560>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 1838854:	e0bffd17 	ldw	r2,-12(fp)
 1838858:	1000091e 	bne	r2,zero,1838880 <netconn_getaddr+0x7c>
 183885c:	01c06134 	movhi	r7,388
 1838860:	39cbd404 	addi	r7,r7,12112
 1838864:	01802344 	movi	r6,141
 1838868:	01406134 	movhi	r5,388
 183886c:	294bee04 	addi	r5,r5,12216
 1838870:	01006134 	movhi	r4,388
 1838874:	210be204 	addi	r4,r4,12168
 1838878:	1800b240 	call	1800b24 <printf>
 183887c:	003fff06 	br	183887c <__ram_exceptions_end+0xff82858c>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 1838880:	e0bffe17 	ldw	r2,-8(fp)
 1838884:	1000091e 	bne	r2,zero,18388ac <netconn_getaddr+0xa8>
 1838888:	01c06134 	movhi	r7,388
 183888c:	39cbd404 	addi	r7,r7,12112
 1838890:	01802384 	movi	r6,142
 1838894:	01406134 	movhi	r5,388
 1838898:	294bf604 	addi	r5,r5,12248
 183889c:	01006134 	movhi	r4,388
 18388a0:	210be204 	addi	r4,r4,12168
 18388a4:	1800b240 	call	1800b24 <printf>
 18388a8:	003fff06 	br	18388a8 <__ram_exceptions_end+0xff8285b8>

  msg.function = do_getaddr;
 18388ac:	00806134 	movhi	r2,388
 18388b0:	10ae7e04 	addi	r2,r2,-17928
 18388b4:	e0bff615 	stw	r2,-40(fp)
  msg.msg.conn = conn;
 18388b8:	e0bffc17 	ldw	r2,-16(fp)
 18388bc:	e0bff715 	stw	r2,-36(fp)
  msg.msg.msg.ad.ipaddr = addr;
 18388c0:	e0bffd17 	ldw	r2,-12(fp)
 18388c4:	e0bff915 	stw	r2,-28(fp)
  msg.msg.msg.ad.port = port;
 18388c8:	e0bffe17 	ldw	r2,-8(fp)
 18388cc:	e0bffa15 	stw	r2,-24(fp)
  msg.msg.msg.ad.local = local;
 18388d0:	e0bfff03 	ldbu	r2,-4(fp)
 18388d4:	e0bffb05 	stb	r2,-20(fp)
  err = TCPIP_APIMSG(&msg);
 18388d8:	e0bff604 	addi	r2,fp,-40
 18388dc:	1009883a 	mov	r4,r2
 18388e0:	18306200 	call	1830620 <tcpip_apimsg>
 18388e4:	e0bff505 	stb	r2,-44(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 18388e8:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18388ec:	10000126 	beq	r2,zero,18388f4 <netconn_getaddr+0xf0>
 18388f0:	1810f480 	call	1810f48 <vTaskEnterCritical>
 18388f4:	e0bffc17 	ldw	r2,-16(fp)
 18388f8:	10800303 	ldbu	r2,12(r2)
 18388fc:	10803fcc 	andi	r2,r2,255
 1838900:	1080201c 	xori	r2,r2,128
 1838904:	10bfe004 	addi	r2,r2,-128
 1838908:	10bffdd0 	cmplti	r2,r2,-9
 183890c:	1000031e 	bne	r2,zero,183891c <netconn_getaddr+0x118>
 1838910:	e0bffc17 	ldw	r2,-16(fp)
 1838914:	e0fff503 	ldbu	r3,-44(fp)
 1838918:	10c00305 	stb	r3,12(r2)
 183891c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838920:	10000126 	beq	r2,zero,1838928 <netconn_getaddr+0x124>
 1838924:	1810f900 	call	1810f90 <vTaskExitCritical>
  return err;
 1838928:	e0bff503 	ldbu	r2,-44(fp)
}
 183892c:	e037883a 	mov	sp,fp
 1838930:	dfc00117 	ldw	ra,4(sp)
 1838934:	df000017 	ldw	fp,0(sp)
 1838938:	dec00204 	addi	sp,sp,8
 183893c:	f800283a 	ret

01838940 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, ip_addr_t *addr, u16_t port)
{
 1838940:	defff404 	addi	sp,sp,-48
 1838944:	dfc00b15 	stw	ra,44(sp)
 1838948:	df000a15 	stw	fp,40(sp)
 183894c:	df000a04 	addi	fp,sp,40
 1838950:	e13ffd15 	stw	r4,-12(fp)
 1838954:	e17ffe15 	stw	r5,-8(fp)
 1838958:	3005883a 	mov	r2,r6
 183895c:	e0bfff0d 	sth	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 1838960:	e0bffd17 	ldw	r2,-12(fp)
 1838964:	1000091e 	bne	r2,zero,183898c <netconn_bind+0x4c>
 1838968:	01c06134 	movhi	r7,388
 183896c:	39cbd404 	addi	r7,r7,12112
 1838970:	01802ac4 	movi	r6,171
 1838974:	01406134 	movhi	r5,388
 1838978:	294bfe04 	addi	r5,r5,12280
 183897c:	01006134 	movhi	r4,388
 1838980:	210be204 	addi	r4,r4,12168
 1838984:	1800b240 	call	1800b24 <printf>
 1838988:	003fff06 	br	1838988 <__ram_exceptions_end+0xff828698>

  msg.function = do_bind;
 183898c:	00806134 	movhi	r2,388
 1838990:	10aac104 	addi	r2,r2,-21756
 1838994:	e0bff715 	stw	r2,-36(fp)
  msg.msg.conn = conn;
 1838998:	e0bffd17 	ldw	r2,-12(fp)
 183899c:	e0bff815 	stw	r2,-32(fp)
  msg.msg.msg.bc.ipaddr = addr;
 18389a0:	e0bffe17 	ldw	r2,-8(fp)
 18389a4:	e0bffa15 	stw	r2,-24(fp)
  msg.msg.msg.bc.port = port;
 18389a8:	e0bfff0b 	ldhu	r2,-4(fp)
 18389ac:	e0bffb0d 	sth	r2,-20(fp)
  err = TCPIP_APIMSG(&msg);
 18389b0:	e0bff704 	addi	r2,fp,-36
 18389b4:	1009883a 	mov	r4,r2
 18389b8:	18306200 	call	1830620 <tcpip_apimsg>
 18389bc:	e0bff605 	stb	r2,-40(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 18389c0:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18389c4:	10000126 	beq	r2,zero,18389cc <netconn_bind+0x8c>
 18389c8:	1810f480 	call	1810f48 <vTaskEnterCritical>
 18389cc:	e0bffd17 	ldw	r2,-12(fp)
 18389d0:	10800303 	ldbu	r2,12(r2)
 18389d4:	10803fcc 	andi	r2,r2,255
 18389d8:	1080201c 	xori	r2,r2,128
 18389dc:	10bfe004 	addi	r2,r2,-128
 18389e0:	10bffdd0 	cmplti	r2,r2,-9
 18389e4:	1000031e 	bne	r2,zero,18389f4 <netconn_bind+0xb4>
 18389e8:	e0bffd17 	ldw	r2,-12(fp)
 18389ec:	e0fff603 	ldbu	r3,-40(fp)
 18389f0:	10c00305 	stb	r3,12(r2)
 18389f4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18389f8:	10000126 	beq	r2,zero,1838a00 <netconn_bind+0xc0>
 18389fc:	1810f900 	call	1810f90 <vTaskExitCritical>
  return err;
 1838a00:	e0bff603 	ldbu	r2,-40(fp)
}
 1838a04:	e037883a 	mov	sp,fp
 1838a08:	dfc00117 	ldw	ra,4(sp)
 1838a0c:	df000017 	ldw	fp,0(sp)
 1838a10:	dec00204 	addi	sp,sp,8
 1838a14:	f800283a 	ret

01838a18 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, ip_addr_t *addr, u16_t port)
{
 1838a18:	defff404 	addi	sp,sp,-48
 1838a1c:	dfc00b15 	stw	ra,44(sp)
 1838a20:	df000a15 	stw	fp,40(sp)
 1838a24:	df000a04 	addi	fp,sp,40
 1838a28:	e13ffd15 	stw	r4,-12(fp)
 1838a2c:	e17ffe15 	stw	r5,-8(fp)
 1838a30:	3005883a 	mov	r2,r6
 1838a34:	e0bfff0d 	sth	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 1838a38:	e0bffd17 	ldw	r2,-12(fp)
 1838a3c:	1000091e 	bne	r2,zero,1838a64 <netconn_connect+0x4c>
 1838a40:	01c06134 	movhi	r7,388
 1838a44:	39cbd404 	addi	r7,r7,12112
 1838a48:	01803144 	movi	r6,197
 1838a4c:	01406134 	movhi	r5,388
 1838a50:	294c0504 	addi	r5,r5,12308
 1838a54:	01006134 	movhi	r4,388
 1838a58:	210be204 	addi	r4,r4,12168
 1838a5c:	1800b240 	call	1800b24 <printf>
 1838a60:	003fff06 	br	1838a60 <__ram_exceptions_end+0xff828770>

  msg.function = do_connect;
 1838a64:	00806134 	movhi	r2,388
 1838a68:	10ab7204 	addi	r2,r2,-21048
 1838a6c:	e0bff715 	stw	r2,-36(fp)
  msg.msg.conn = conn;
 1838a70:	e0bffd17 	ldw	r2,-12(fp)
 1838a74:	e0bff815 	stw	r2,-32(fp)
  msg.msg.msg.bc.ipaddr = addr;
 1838a78:	e0bffe17 	ldw	r2,-8(fp)
 1838a7c:	e0bffa15 	stw	r2,-24(fp)
  msg.msg.msg.bc.port = port;
 1838a80:	e0bfff0b 	ldhu	r2,-4(fp)
 1838a84:	e0bffb0d 	sth	r2,-20(fp)
  /* This is the only function which need to not block tcpip_thread */
  err = tcpip_apimsg(&msg);
 1838a88:	e0bff704 	addi	r2,fp,-36
 1838a8c:	1009883a 	mov	r4,r2
 1838a90:	18306200 	call	1830620 <tcpip_apimsg>
 1838a94:	e0bff605 	stb	r2,-40(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 1838a98:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838a9c:	10000126 	beq	r2,zero,1838aa4 <netconn_connect+0x8c>
 1838aa0:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1838aa4:	e0bffd17 	ldw	r2,-12(fp)
 1838aa8:	10800303 	ldbu	r2,12(r2)
 1838aac:	10803fcc 	andi	r2,r2,255
 1838ab0:	1080201c 	xori	r2,r2,128
 1838ab4:	10bfe004 	addi	r2,r2,-128
 1838ab8:	10bffdd0 	cmplti	r2,r2,-9
 1838abc:	1000031e 	bne	r2,zero,1838acc <netconn_connect+0xb4>
 1838ac0:	e0bffd17 	ldw	r2,-12(fp)
 1838ac4:	e0fff603 	ldbu	r3,-40(fp)
 1838ac8:	10c00305 	stb	r3,12(r2)
 1838acc:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838ad0:	10000126 	beq	r2,zero,1838ad8 <netconn_connect+0xc0>
 1838ad4:	1810f900 	call	1810f90 <vTaskExitCritical>
  return err;
 1838ad8:	e0bff603 	ldbu	r2,-40(fp)
}
 1838adc:	e037883a 	mov	sp,fp
 1838ae0:	dfc00117 	ldw	ra,4(sp)
 1838ae4:	df000017 	ldw	fp,0(sp)
 1838ae8:	dec00204 	addi	sp,sp,8
 1838aec:	f800283a 	ret

01838af0 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return TODO: return value is not set here...
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 1838af0:	defff604 	addi	sp,sp,-40
 1838af4:	dfc00915 	stw	ra,36(sp)
 1838af8:	df000815 	stw	fp,32(sp)
 1838afc:	df000804 	addi	fp,sp,32
 1838b00:	e13fff15 	stw	r4,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 1838b04:	e0bfff17 	ldw	r2,-4(fp)
 1838b08:	1000091e 	bne	r2,zero,1838b30 <netconn_disconnect+0x40>
 1838b0c:	01c06134 	movhi	r7,388
 1838b10:	39cbd404 	addi	r7,r7,12112
 1838b14:	01803784 	movi	r6,222
 1838b18:	01406134 	movhi	r5,388
 1838b1c:	294c0d04 	addi	r5,r5,12340
 1838b20:	01006134 	movhi	r4,388
 1838b24:	210be204 	addi	r4,r4,12168
 1838b28:	1800b240 	call	1800b24 <printf>
 1838b2c:	003fff06 	br	1838b2c <__ram_exceptions_end+0xff82883c>

  msg.function = do_disconnect;
 1838b30:	00806134 	movhi	r2,388
 1838b34:	10ac0504 	addi	r2,r2,-20460
 1838b38:	e0bff915 	stw	r2,-28(fp)
  msg.msg.conn = conn;
 1838b3c:	e0bfff17 	ldw	r2,-4(fp)
 1838b40:	e0bffa15 	stw	r2,-24(fp)
  err = TCPIP_APIMSG(&msg);
 1838b44:	e0bff904 	addi	r2,fp,-28
 1838b48:	1009883a 	mov	r4,r2
 1838b4c:	18306200 	call	1830620 <tcpip_apimsg>
 1838b50:	e0bff805 	stb	r2,-32(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 1838b54:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838b58:	10000126 	beq	r2,zero,1838b60 <netconn_disconnect+0x70>
 1838b5c:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1838b60:	e0bfff17 	ldw	r2,-4(fp)
 1838b64:	10800303 	ldbu	r2,12(r2)
 1838b68:	10803fcc 	andi	r2,r2,255
 1838b6c:	1080201c 	xori	r2,r2,128
 1838b70:	10bfe004 	addi	r2,r2,-128
 1838b74:	10bffdd0 	cmplti	r2,r2,-9
 1838b78:	1000031e 	bne	r2,zero,1838b88 <netconn_disconnect+0x98>
 1838b7c:	e0bfff17 	ldw	r2,-4(fp)
 1838b80:	e0fff803 	ldbu	r3,-32(fp)
 1838b84:	10c00305 	stb	r3,12(r2)
 1838b88:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838b8c:	10000126 	beq	r2,zero,1838b94 <netconn_disconnect+0xa4>
 1838b90:	1810f900 	call	1810f90 <vTaskExitCritical>
  return err;
 1838b94:	e0bff803 	ldbu	r2,-32(fp)
}
 1838b98:	e037883a 	mov	sp,fp
 1838b9c:	dfc00117 	ldw	ra,4(sp)
 1838ba0:	df000017 	ldw	fp,0(sp)
 1838ba4:	dec00204 	addi	sp,sp,8
 1838ba8:	f800283a 	ret

01838bac <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 1838bac:	defff504 	addi	sp,sp,-44
 1838bb0:	dfc00a15 	stw	ra,40(sp)
 1838bb4:	df000915 	stw	fp,36(sp)
 1838bb8:	df000904 	addi	fp,sp,36
 1838bbc:	e13ffe15 	stw	r4,-8(fp)
 1838bc0:	2805883a 	mov	r2,r5
 1838bc4:	e0bfff05 	stb	r2,-4(fp)
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 1838bc8:	e0bffe17 	ldw	r2,-8(fp)
 1838bcc:	1000091e 	bne	r2,zero,1838bf4 <netconn_listen_with_backlog+0x48>
 1838bd0:	01c06134 	movhi	r7,388
 1838bd4:	39cbd404 	addi	r7,r7,12112
 1838bd8:	01803e84 	movi	r6,250
 1838bdc:	01406134 	movhi	r5,388
 1838be0:	294c1604 	addi	r5,r5,12376
 1838be4:	01006134 	movhi	r4,388
 1838be8:	210be204 	addi	r4,r4,12168
 1838bec:	1800b240 	call	1800b24 <printf>
 1838bf0:	003fff06 	br	1838bf0 <__ram_exceptions_end+0xff828900>

  msg.function = do_listen;
 1838bf4:	00806134 	movhi	r2,388
 1838bf8:	10ac2604 	addi	r2,r2,-20328
 1838bfc:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 1838c00:	e0bffe17 	ldw	r2,-8(fp)
 1838c04:	e0bff915 	stw	r2,-28(fp)
#if TCP_LISTEN_BACKLOG
  msg.msg.msg.lb.backlog = backlog;
 1838c08:	e0bfff03 	ldbu	r2,-4(fp)
 1838c0c:	e0bffb05 	stb	r2,-20(fp)
#endif /* TCP_LISTEN_BACKLOG */
  err = TCPIP_APIMSG(&msg);
 1838c10:	e0bff804 	addi	r2,fp,-32
 1838c14:	1009883a 	mov	r4,r2
 1838c18:	18306200 	call	1830620 <tcpip_apimsg>
 1838c1c:	e0bff705 	stb	r2,-36(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 1838c20:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838c24:	10000126 	beq	r2,zero,1838c2c <netconn_listen_with_backlog+0x80>
 1838c28:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1838c2c:	e0bffe17 	ldw	r2,-8(fp)
 1838c30:	10800303 	ldbu	r2,12(r2)
 1838c34:	10803fcc 	andi	r2,r2,255
 1838c38:	1080201c 	xori	r2,r2,128
 1838c3c:	10bfe004 	addi	r2,r2,-128
 1838c40:	10bffdd0 	cmplti	r2,r2,-9
 1838c44:	1000031e 	bne	r2,zero,1838c54 <netconn_listen_with_backlog+0xa8>
 1838c48:	e0bffe17 	ldw	r2,-8(fp)
 1838c4c:	e0fff703 	ldbu	r3,-36(fp)
 1838c50:	10c00305 	stb	r3,12(r2)
 1838c54:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838c58:	10000126 	beq	r2,zero,1838c60 <netconn_listen_with_backlog+0xb4>
 1838c5c:	1810f900 	call	1810f90 <vTaskExitCritical>
  return err;
 1838c60:	e0bff703 	ldbu	r2,-36(fp)
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 1838c64:	e037883a 	mov	sp,fp
 1838c68:	dfc00117 	ldw	ra,4(sp)
 1838c6c:	df000017 	ldw	fp,0(sp)
 1838c70:	dec00204 	addi	sp,sp,8
 1838c74:	f800283a 	ret

01838c78 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 1838c78:	defff404 	addi	sp,sp,-48
 1838c7c:	dfc00b15 	stw	ra,44(sp)
 1838c80:	df000a15 	stw	fp,40(sp)
 1838c84:	df000a04 	addi	fp,sp,40
 1838c88:	e13ffe15 	stw	r4,-8(fp)
 1838c8c:	e17fff15 	stw	r5,-4(fp)
  err_t err;
#if TCP_LISTEN_BACKLOG
  struct api_msg msg;
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 1838c90:	e0bfff17 	ldw	r2,-4(fp)
 1838c94:	1000091e 	bne	r2,zero,1838cbc <netconn_accept+0x44>
 1838c98:	01c06134 	movhi	r7,388
 1838c9c:	39cbd404 	addi	r7,r7,12112
 1838ca0:	01804784 	movi	r6,286
 1838ca4:	01406134 	movhi	r5,388
 1838ca8:	294c1e04 	addi	r5,r5,12408
 1838cac:	01006134 	movhi	r4,388
 1838cb0:	210be204 	addi	r4,r4,12168
 1838cb4:	1800b240 	call	1800b24 <printf>
 1838cb8:	003fff06 	br	1838cb8 <__ram_exceptions_end+0xff8289c8>
  *new_conn = NULL;
 1838cbc:	e0bfff17 	ldw	r2,-4(fp)
 1838cc0:	10000015 	stw	zero,0(r2)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 1838cc4:	e0bffe17 	ldw	r2,-8(fp)
 1838cc8:	1000091e 	bne	r2,zero,1838cf0 <netconn_accept+0x78>
 1838ccc:	01c06134 	movhi	r7,388
 1838cd0:	39cbd404 	addi	r7,r7,12112
 1838cd4:	01804804 	movi	r6,288
 1838cd8:	01406134 	movhi	r5,388
 1838cdc:	294c2604 	addi	r5,r5,12440
 1838ce0:	01006134 	movhi	r4,388
 1838ce4:	210be204 	addi	r4,r4,12168
 1838ce8:	1800b240 	call	1800b24 <printf>
 1838cec:	003fff06 	br	1838cec <__ram_exceptions_end+0xff8289fc>
  LWIP_ERROR("netconn_accept: invalid acceptmbox", sys_mbox_valid(&conn->acceptmbox),   return ERR_ARG;);
 1838cf0:	e0bffe17 	ldw	r2,-8(fp)
 1838cf4:	10800617 	ldw	r2,24(r2)
 1838cf8:	1000091e 	bne	r2,zero,1838d20 <netconn_accept+0xa8>
 1838cfc:	01c06134 	movhi	r7,388
 1838d00:	39cbd404 	addi	r7,r7,12112
 1838d04:	01804844 	movi	r6,289
 1838d08:	01406134 	movhi	r5,388
 1838d0c:	294c2e04 	addi	r5,r5,12472
 1838d10:	01006134 	movhi	r4,388
 1838d14:	210be204 	addi	r4,r4,12168
 1838d18:	1800b240 	call	1800b24 <printf>
 1838d1c:	003fff06 	br	1838d1c <__ram_exceptions_end+0xff828a2c>

  err = conn->last_err;
 1838d20:	e0bffe17 	ldw	r2,-8(fp)
 1838d24:	10800303 	ldbu	r2,12(r2)
 1838d28:	e0bff605 	stb	r2,-40(fp)
  if (ERR_IS_FATAL(err)) {
 1838d2c:	e0bff607 	ldb	r2,-40(fp)
 1838d30:	10bffdc8 	cmpgei	r2,r2,-9
 1838d34:	1000021e 	bne	r2,zero,1838d40 <netconn_accept+0xc8>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return err;
 1838d38:	e0bff603 	ldbu	r2,-40(fp)
 1838d3c:	00004706 	br	1838e5c <netconn_accept+0x1e4>
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 1838d40:	e0bffe17 	ldw	r2,-8(fp)
 1838d44:	10c00604 	addi	r3,r2,24
 1838d48:	e0bffe17 	ldw	r2,-8(fp)
 1838d4c:	10800817 	ldw	r2,32(r2)
 1838d50:	1009883a 	mov	r4,r2
 1838d54:	e0bff704 	addi	r2,fp,-36
 1838d58:	200d883a 	mov	r6,r4
 1838d5c:	100b883a 	mov	r5,r2
 1838d60:	1809883a 	mov	r4,r3
 1838d64:	181548c0 	call	181548c <sys_arch_mbox_fetch>
 1838d68:	10bfffd8 	cmpnei	r2,r2,-1
 1838d6c:	1000121e 	bne	r2,zero,1838db8 <netconn_accept+0x140>
    NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
 1838d70:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838d74:	10000126 	beq	r2,zero,1838d7c <netconn_accept+0x104>
 1838d78:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1838d7c:	e0bffe17 	ldw	r2,-8(fp)
 1838d80:	10800303 	ldbu	r2,12(r2)
 1838d84:	10803fcc 	andi	r2,r2,255
 1838d88:	1080201c 	xori	r2,r2,128
 1838d8c:	10bfe004 	addi	r2,r2,-128
 1838d90:	10bffdd0 	cmplti	r2,r2,-9
 1838d94:	1000031e 	bne	r2,zero,1838da4 <netconn_accept+0x12c>
 1838d98:	e0bffe17 	ldw	r2,-8(fp)
 1838d9c:	00ffff44 	movi	r3,-3
 1838da0:	10c00305 	stb	r3,12(r2)
 1838da4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838da8:	10000126 	beq	r2,zero,1838db0 <netconn_accept+0x138>
 1838dac:	1810f900 	call	1810f90 <vTaskExitCritical>
    return ERR_TIMEOUT;
 1838db0:	00bfff44 	movi	r2,-3
 1838db4:	00002906 	br	1838e5c <netconn_accept+0x1e4>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 1838db8:	e0bffe17 	ldw	r2,-8(fp)
 1838dbc:	10800c17 	ldw	r2,48(r2)
 1838dc0:	10000626 	beq	r2,zero,1838ddc <netconn_accept+0x164>
 1838dc4:	e0bffe17 	ldw	r2,-8(fp)
 1838dc8:	10800c17 	ldw	r2,48(r2)
 1838dcc:	000d883a 	mov	r6,zero
 1838dd0:	01400044 	movi	r5,1
 1838dd4:	e13ffe17 	ldw	r4,-8(fp)
 1838dd8:	103ee83a 	callr	r2

  if (newconn == NULL) {
 1838ddc:	e0bff717 	ldw	r2,-36(fp)
 1838de0:	1000121e 	bne	r2,zero,1838e2c <netconn_accept+0x1b4>
    /* connection has been aborted */
    NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
 1838de4:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838de8:	10000126 	beq	r2,zero,1838df0 <netconn_accept+0x178>
 1838dec:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1838df0:	e0bffe17 	ldw	r2,-8(fp)
 1838df4:	10800303 	ldbu	r2,12(r2)
 1838df8:	10803fcc 	andi	r2,r2,255
 1838dfc:	1080201c 	xori	r2,r2,128
 1838e00:	10bfe004 	addi	r2,r2,-128
 1838e04:	10bffdd0 	cmplti	r2,r2,-9
 1838e08:	1000031e 	bne	r2,zero,1838e18 <netconn_accept+0x1a0>
 1838e0c:	e0bffe17 	ldw	r2,-8(fp)
 1838e10:	00fffd84 	movi	r3,-10
 1838e14:	10c00305 	stb	r3,12(r2)
 1838e18:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838e1c:	10000126 	beq	r2,zero,1838e24 <netconn_accept+0x1ac>
 1838e20:	1810f900 	call	1810f90 <vTaskExitCritical>
    return ERR_ABRT;
 1838e24:	00bffd84 	movi	r2,-10
 1838e28:	00000c06 	br	1838e5c <netconn_accept+0x1e4>
  }
#if TCP_LISTEN_BACKLOG
  /* Let the stack know that we have accepted the connection. */
  msg.function = do_recv;
 1838e2c:	00806134 	movhi	r2,388
 1838e30:	10ad3704 	addi	r2,r2,-19236
 1838e34:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 1838e38:	e0bffe17 	ldw	r2,-8(fp)
 1838e3c:	e0bff915 	stw	r2,-28(fp)
  /* don't care for the return value of do_recv */
  TCPIP_APIMSG(&msg);
 1838e40:	e0bff804 	addi	r2,fp,-32
 1838e44:	1009883a 	mov	r4,r2
 1838e48:	18306200 	call	1830620 <tcpip_apimsg>
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 1838e4c:	e0fff717 	ldw	r3,-36(fp)
 1838e50:	e0bfff17 	ldw	r2,-4(fp)
 1838e54:	10c00015 	stw	r3,0(r2)
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 1838e58:	0005883a 	mov	r2,zero
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 1838e5c:	e037883a 	mov	sp,fp
 1838e60:	dfc00117 	ldw	ra,4(sp)
 1838e64:	df000017 	ldw	fp,0(sp)
 1838e68:	dec00204 	addi	sp,sp,8
 1838e6c:	f800283a 	ret

01838e70 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 1838e70:	defff404 	addi	sp,sp,-48
 1838e74:	dfc00b15 	stw	ra,44(sp)
 1838e78:	df000a15 	stw	fp,40(sp)
 1838e7c:	df000a04 	addi	fp,sp,40
 1838e80:	e13ffe15 	stw	r4,-8(fp)
 1838e84:	e17fff15 	stw	r5,-4(fp)
  void *buf = NULL;
 1838e88:	e03ff715 	stw	zero,-36(fp)
  err_t err;
#if LWIP_TCP
  struct api_msg msg;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 1838e8c:	e0bfff17 	ldw	r2,-4(fp)
 1838e90:	1000091e 	bne	r2,zero,1838eb8 <netconn_recv_data+0x48>
 1838e94:	01c06134 	movhi	r7,388
 1838e98:	39cbd404 	addi	r7,r7,12112
 1838e9c:	018057c4 	movi	r6,351
 1838ea0:	01406134 	movhi	r5,388
 1838ea4:	294c3704 	addi	r5,r5,12508
 1838ea8:	01006134 	movhi	r4,388
 1838eac:	210be204 	addi	r4,r4,12168
 1838eb0:	1800b240 	call	1800b24 <printf>
 1838eb4:	003fff06 	br	1838eb4 <__ram_exceptions_end+0xff828bc4>
  *new_buf = NULL;
 1838eb8:	e0bfff17 	ldw	r2,-4(fp)
 1838ebc:	10000015 	stw	zero,0(r2)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 1838ec0:	e0bffe17 	ldw	r2,-8(fp)
 1838ec4:	1000091e 	bne	r2,zero,1838eec <netconn_recv_data+0x7c>
 1838ec8:	01c06134 	movhi	r7,388
 1838ecc:	39cbd404 	addi	r7,r7,12112
 1838ed0:	01805844 	movi	r6,353
 1838ed4:	01406134 	movhi	r5,388
 1838ed8:	294c3f04 	addi	r5,r5,12540
 1838edc:	01006134 	movhi	r4,388
 1838ee0:	210be204 	addi	r4,r4,12168
 1838ee4:	1800b240 	call	1800b24 <printf>
 1838ee8:	003fff06 	br	1838ee8 <__ram_exceptions_end+0xff828bf8>
  LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 1838eec:	e0bffe17 	ldw	r2,-8(fp)
 1838ef0:	10800517 	ldw	r2,20(r2)
 1838ef4:	1000091e 	bne	r2,zero,1838f1c <netconn_recv_data+0xac>
 1838ef8:	01c06134 	movhi	r7,388
 1838efc:	39cbd404 	addi	r7,r7,12112
 1838f00:	01805884 	movi	r6,354
 1838f04:	01406134 	movhi	r5,388
 1838f08:	294c4604 	addi	r5,r5,12568
 1838f0c:	01006134 	movhi	r4,388
 1838f10:	210be204 	addi	r4,r4,12168
 1838f14:	1800b240 	call	1800b24 <printf>
 1838f18:	003fff06 	br	1838f18 <__ram_exceptions_end+0xff828c28>

  err = conn->last_err;
 1838f1c:	e0bffe17 	ldw	r2,-8(fp)
 1838f20:	10800303 	ldbu	r2,12(r2)
 1838f24:	e0bff685 	stb	r2,-38(fp)
  if (ERR_IS_FATAL(err)) {
 1838f28:	e0bff687 	ldb	r2,-38(fp)
 1838f2c:	10bffdc8 	cmpgei	r2,r2,-9
 1838f30:	1000021e 	bne	r2,zero,1838f3c <netconn_recv_data+0xcc>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return err;
 1838f34:	e0bff683 	ldbu	r2,-38(fp)
 1838f38:	00006d06 	br	18390f0 <netconn_recv_data+0x280>
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 1838f3c:	e0bffe17 	ldw	r2,-8(fp)
 1838f40:	10c00504 	addi	r3,r2,20
 1838f44:	e0bffe17 	ldw	r2,-8(fp)
 1838f48:	10800817 	ldw	r2,32(r2)
 1838f4c:	1009883a 	mov	r4,r2
 1838f50:	e0bff704 	addi	r2,fp,-36
 1838f54:	200d883a 	mov	r6,r4
 1838f58:	100b883a 	mov	r5,r2
 1838f5c:	1809883a 	mov	r4,r3
 1838f60:	181548c0 	call	181548c <sys_arch_mbox_fetch>
 1838f64:	10bfffd8 	cmpnei	r2,r2,-1
 1838f68:	1000121e 	bne	r2,zero,1838fb4 <netconn_recv_data+0x144>
    NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
 1838f6c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838f70:	10000126 	beq	r2,zero,1838f78 <netconn_recv_data+0x108>
 1838f74:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1838f78:	e0bffe17 	ldw	r2,-8(fp)
 1838f7c:	10800303 	ldbu	r2,12(r2)
 1838f80:	10803fcc 	andi	r2,r2,255
 1838f84:	1080201c 	xori	r2,r2,128
 1838f88:	10bfe004 	addi	r2,r2,-128
 1838f8c:	10bffdd0 	cmplti	r2,r2,-9
 1838f90:	1000031e 	bne	r2,zero,1838fa0 <netconn_recv_data+0x130>
 1838f94:	e0bffe17 	ldw	r2,-8(fp)
 1838f98:	00ffff44 	movi	r3,-3
 1838f9c:	10c00305 	stb	r3,12(r2)
 1838fa0:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1838fa4:	10000126 	beq	r2,zero,1838fac <netconn_recv_data+0x13c>
 1838fa8:	1810f900 	call	1810f90 <vTaskExitCritical>
    return ERR_TIMEOUT;
 1838fac:	00bfff44 	movi	r2,-3
 1838fb0:	00004f06 	br	18390f0 <netconn_recv_data+0x280>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (conn->type == NETCONN_TCP)
 1838fb4:	e0bffe17 	ldw	r2,-8(fp)
 1838fb8:	10800017 	ldw	r2,0(r2)
 1838fbc:	10800418 	cmpnei	r2,r2,16
 1838fc0:	1000391e 	bne	r2,zero,18390a8 <netconn_recv_data+0x238>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
 1838fc4:	e0bffe17 	ldw	r2,-8(fp)
 1838fc8:	10800903 	ldbu	r2,36(r2)
 1838fcc:	10803fcc 	andi	r2,r2,255
 1838fd0:	1080020c 	andi	r2,r2,8
 1838fd4:	10000226 	beq	r2,zero,1838fe0 <netconn_recv_data+0x170>
 1838fd8:	e0bff717 	ldw	r2,-36(fp)
 1838fdc:	1000111e 	bne	r2,zero,1839024 <netconn_recv_data+0x1b4>
      /* Let the stack know that we have taken the data. */
      /* TODO: Speedup: Don't block and wait for the answer here
         (to prevent multiple thread-switches). */
      msg.function = do_recv;
 1838fe0:	00806134 	movhi	r2,388
 1838fe4:	10ad3704 	addi	r2,r2,-19236
 1838fe8:	e0bff815 	stw	r2,-32(fp)
      msg.msg.conn = conn;
 1838fec:	e0bffe17 	ldw	r2,-8(fp)
 1838ff0:	e0bff915 	stw	r2,-28(fp)
      if (buf != NULL) {
 1838ff4:	e0bff717 	ldw	r2,-36(fp)
 1838ff8:	10000526 	beq	r2,zero,1839010 <netconn_recv_data+0x1a0>
        msg.msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
 1838ffc:	e0bff717 	ldw	r2,-36(fp)
 1839000:	1080020b 	ldhu	r2,8(r2)
 1839004:	10bfffcc 	andi	r2,r2,65535
 1839008:	e0bffb15 	stw	r2,-20(fp)
 183900c:	00000206 	br	1839018 <netconn_recv_data+0x1a8>
      } else {
        msg.msg.msg.r.len = 1;
 1839010:	00800044 	movi	r2,1
 1839014:	e0bffb15 	stw	r2,-20(fp)
      }
      /* don't care for the return value of do_recv */
      TCPIP_APIMSG(&msg);
 1839018:	e0bff804 	addi	r2,fp,-32
 183901c:	1009883a 	mov	r4,r2
 1839020:	18306200 	call	1830620 <tcpip_apimsg>
    }

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 1839024:	e0bff717 	ldw	r2,-36(fp)
 1839028:	10001b1e 	bne	r2,zero,1839098 <netconn_recv_data+0x228>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 183902c:	e0bffe17 	ldw	r2,-8(fp)
 1839030:	10800c17 	ldw	r2,48(r2)
 1839034:	10000626 	beq	r2,zero,1839050 <netconn_recv_data+0x1e0>
 1839038:	e0bffe17 	ldw	r2,-8(fp)
 183903c:	10800c17 	ldw	r2,48(r2)
 1839040:	000d883a 	mov	r6,zero
 1839044:	01400044 	movi	r5,1
 1839048:	e13ffe17 	ldw	r4,-8(fp)
 183904c:	103ee83a 	callr	r2
      /* Avoid to lose any previous error code */
      NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 1839050:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839054:	10000126 	beq	r2,zero,183905c <netconn_recv_data+0x1ec>
 1839058:	1810f480 	call	1810f48 <vTaskEnterCritical>
 183905c:	e0bffe17 	ldw	r2,-8(fp)
 1839060:	10800303 	ldbu	r2,12(r2)
 1839064:	10803fcc 	andi	r2,r2,255
 1839068:	1080201c 	xori	r2,r2,128
 183906c:	10bfe004 	addi	r2,r2,-128
 1839070:	10bffdd0 	cmplti	r2,r2,-9
 1839074:	1000031e 	bne	r2,zero,1839084 <netconn_recv_data+0x214>
 1839078:	e0bffe17 	ldw	r2,-8(fp)
 183907c:	00fffd04 	movi	r3,-12
 1839080:	10c00305 	stb	r3,12(r2)
 1839084:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839088:	10000126 	beq	r2,zero,1839090 <netconn_recv_data+0x220>
 183908c:	1810f900 	call	1810f90 <vTaskExitCritical>
      return ERR_CLSD;
 1839090:	00bffd04 	movi	r2,-12
 1839094:	00001606 	br	18390f0 <netconn_recv_data+0x280>
    }
    len = ((struct pbuf *)buf)->tot_len;
 1839098:	e0bff717 	ldw	r2,-36(fp)
 183909c:	1080020b 	ldhu	r2,8(r2)
 18390a0:	e0bff60d 	sth	r2,-40(fp)
 18390a4:	00000406 	br	18390b8 <netconn_recv_data+0x248>
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
    len = netbuf_len((struct netbuf *)buf);
 18390a8:	e0bff717 	ldw	r2,-36(fp)
 18390ac:	10800017 	ldw	r2,0(r2)
 18390b0:	1080020b 	ldhu	r2,8(r2)
 18390b4:	e0bff60d 	sth	r2,-40(fp)

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 18390b8:	e0bffe17 	ldw	r2,-8(fp)
 18390bc:	10800c17 	ldw	r2,48(r2)
 18390c0:	10000726 	beq	r2,zero,18390e0 <netconn_recv_data+0x270>
 18390c4:	e0bffe17 	ldw	r2,-8(fp)
 18390c8:	10800c17 	ldw	r2,48(r2)
 18390cc:	e0fff60b 	ldhu	r3,-40(fp)
 18390d0:	180d883a 	mov	r6,r3
 18390d4:	01400044 	movi	r5,1
 18390d8:	e13ffe17 	ldw	r4,-8(fp)
 18390dc:	103ee83a 	callr	r2

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 18390e0:	e0fff717 	ldw	r3,-36(fp)
 18390e4:	e0bfff17 	ldw	r2,-4(fp)
 18390e8:	10c00015 	stw	r3,0(r2)
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 18390ec:	0005883a 	mov	r2,zero
}
 18390f0:	e037883a 	mov	sp,fp
 18390f4:	dfc00117 	ldw	ra,4(sp)
 18390f8:	df000017 	ldw	fp,0(sp)
 18390fc:	dec00204 	addi	sp,sp,8
 1839100:	f800283a 	ret

01839104 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
 1839104:	defffc04 	addi	sp,sp,-16
 1839108:	dfc00315 	stw	ra,12(sp)
 183910c:	df000215 	stw	fp,8(sp)
 1839110:	df000204 	addi	fp,sp,8
 1839114:	e13ffe15 	stw	r4,-8(fp)
 1839118:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 183911c:	e0bffe17 	ldw	r2,-8(fp)
 1839120:	10000426 	beq	r2,zero,1839134 <netconn_recv_tcp_pbuf+0x30>
 1839124:	e0bffe17 	ldw	r2,-8(fp)
 1839128:	10800017 	ldw	r2,0(r2)
 183912c:	10800420 	cmpeqi	r2,r2,16
 1839130:	1000091e 	bne	r2,zero,1839158 <netconn_recv_tcp_pbuf+0x54>
 1839134:	01c06134 	movhi	r7,388
 1839138:	39cbd404 	addi	r7,r7,12112
 183913c:	01806e04 	movi	r6,440
 1839140:	01406134 	movhi	r5,388
 1839144:	294c3f04 	addi	r5,r5,12540
 1839148:	01006134 	movhi	r4,388
 183914c:	210be204 	addi	r4,r4,12168
 1839150:	1800b240 	call	1800b24 <printf>
 1839154:	003fff06 	br	1839154 <__ram_exceptions_end+0xff828e64>
             netconn_type(conn) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
 1839158:	e17fff17 	ldw	r5,-4(fp)
 183915c:	e13ffe17 	ldw	r4,-8(fp)
 1839160:	1838e700 	call	1838e70 <netconn_recv_data>
}
 1839164:	e037883a 	mov	sp,fp
 1839168:	dfc00117 	ldw	ra,4(sp)
 183916c:	df000017 	ldw	fp,0(sp)
 1839170:	dec00204 	addi	sp,sp,8
 1839174:	f800283a 	ret

01839178 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 1839178:	defff904 	addi	sp,sp,-28
 183917c:	dfc00615 	stw	ra,24(sp)
 1839180:	df000515 	stw	fp,20(sp)
 1839184:	df000504 	addi	fp,sp,20
 1839188:	e13ffe15 	stw	r4,-8(fp)
 183918c:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  struct netbuf *buf = NULL;
 1839190:	e03ffb15 	stw	zero,-20(fp)
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 1839194:	e0bfff17 	ldw	r2,-4(fp)
 1839198:	1000091e 	bne	r2,zero,18391c0 <netconn_recv+0x48>
 183919c:	01c06134 	movhi	r7,388
 18391a0:	39cbd404 	addi	r7,r7,12112
 18391a4:	01807344 	movi	r6,461
 18391a8:	01406134 	movhi	r5,388
 18391ac:	294c3704 	addi	r5,r5,12508
 18391b0:	01006134 	movhi	r4,388
 18391b4:	210be204 	addi	r4,r4,12168
 18391b8:	1800b240 	call	1800b24 <printf>
 18391bc:	003fff06 	br	18391bc <__ram_exceptions_end+0xff828ecc>
  *new_buf = NULL;
 18391c0:	e0bfff17 	ldw	r2,-4(fp)
 18391c4:	10000015 	stw	zero,0(r2)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 18391c8:	e0bffe17 	ldw	r2,-8(fp)
 18391cc:	1000091e 	bne	r2,zero,18391f4 <netconn_recv+0x7c>
 18391d0:	01c06134 	movhi	r7,388
 18391d4:	39cbd404 	addi	r7,r7,12112
 18391d8:	018073c4 	movi	r6,463
 18391dc:	01406134 	movhi	r5,388
 18391e0:	294c3f04 	addi	r5,r5,12540
 18391e4:	01006134 	movhi	r4,388
 18391e8:	210be204 	addi	r4,r4,12168
 18391ec:	1800b240 	call	1800b24 <printf>
 18391f0:	003fff06 	br	18391f0 <__ram_exceptions_end+0xff828f00>
  LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 18391f4:	e0bffe17 	ldw	r2,-8(fp)
 18391f8:	10800517 	ldw	r2,20(r2)
 18391fc:	1000091e 	bne	r2,zero,1839224 <netconn_recv+0xac>
 1839200:	01c06134 	movhi	r7,388
 1839204:	39cbd404 	addi	r7,r7,12112
 1839208:	01807404 	movi	r6,464
 183920c:	01406134 	movhi	r5,388
 1839210:	294c4604 	addi	r5,r5,12568
 1839214:	01006134 	movhi	r4,388
 1839218:	210be204 	addi	r4,r4,12168
 183921c:	1800b240 	call	1800b24 <printf>
 1839220:	003fff06 	br	1839220 <__ram_exceptions_end+0xff828f30>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (conn->type == NETCONN_TCP)
 1839224:	e0bffe17 	ldw	r2,-8(fp)
 1839228:	10800017 	ldw	r2,0(r2)
 183922c:	10800418 	cmpnei	r2,r2,16
 1839230:	1000361e 	bne	r2,zero,183930c <netconn_recv+0x194>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 1839234:	e03ffd15 	stw	zero,-12(fp)
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 1839238:	00806134 	movhi	r2,388
 183923c:	108bcc84 	addi	r2,r2,12082
 1839240:	1080038b 	ldhu	r2,14(r2)
 1839244:	10bfffcc 	andi	r2,r2,65535
 1839248:	1009883a 	mov	r4,r2
 183924c:	183c5000 	call	183c500 <malloc>
 1839250:	e0bffb15 	stw	r2,-20(fp)
    if (buf == NULL) {
 1839254:	e0bffb17 	ldw	r2,-20(fp)
 1839258:	1000121e 	bne	r2,zero,18392a4 <netconn_recv+0x12c>
      NETCONN_SET_SAFE_ERR(conn, ERR_MEM);
 183925c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839260:	10000126 	beq	r2,zero,1839268 <netconn_recv+0xf0>
 1839264:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1839268:	e0bffe17 	ldw	r2,-8(fp)
 183926c:	10800303 	ldbu	r2,12(r2)
 1839270:	10803fcc 	andi	r2,r2,255
 1839274:	1080201c 	xori	r2,r2,128
 1839278:	10bfe004 	addi	r2,r2,-128
 183927c:	10bffdd0 	cmplti	r2,r2,-9
 1839280:	1000031e 	bne	r2,zero,1839290 <netconn_recv+0x118>
 1839284:	e0bffe17 	ldw	r2,-8(fp)
 1839288:	00ffffc4 	movi	r3,-1
 183928c:	10c00305 	stb	r3,12(r2)
 1839290:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839294:	10000126 	beq	r2,zero,183929c <netconn_recv+0x124>
 1839298:	1810f900 	call	1810f90 <vTaskExitCritical>
      return ERR_MEM;
 183929c:	00bfffc4 	movi	r2,-1
 18392a0:	00001d06 	br	1839318 <netconn_recv+0x1a0>
    }

    err = netconn_recv_data(conn, (void **)&p);
 18392a4:	e0bffd04 	addi	r2,fp,-12
 18392a8:	100b883a 	mov	r5,r2
 18392ac:	e13ffe17 	ldw	r4,-8(fp)
 18392b0:	1838e700 	call	1838e70 <netconn_recv_data>
 18392b4:	e0bffc05 	stb	r2,-16(fp)
    if (err != ERR_OK) {
 18392b8:	e0bffc07 	ldb	r2,-16(fp)
 18392bc:	10000426 	beq	r2,zero,18392d0 <netconn_recv+0x158>
      memp_free(MEMP_NETBUF, buf);
 18392c0:	e13ffb17 	ldw	r4,-20(fp)
 18392c4:	183c5140 	call	183c514 <free>
      return err;
 18392c8:	e0bffc03 	ldbu	r2,-16(fp)
 18392cc:	00001206 	br	1839318 <netconn_recv+0x1a0>
    }
    LWIP_ASSERT("p != NULL", p != NULL);

    buf->p = p;
 18392d0:	e0fffd17 	ldw	r3,-12(fp)
 18392d4:	e0bffb17 	ldw	r2,-20(fp)
 18392d8:	10c00015 	stw	r3,0(r2)
    buf->ptr = p;
 18392dc:	e0fffd17 	ldw	r3,-12(fp)
 18392e0:	e0bffb17 	ldw	r2,-20(fp)
 18392e4:	10c00115 	stw	r3,4(r2)
    buf->port = 0;
 18392e8:	e0bffb17 	ldw	r2,-20(fp)
 18392ec:	1000030d 	sth	zero,12(r2)
    ip_addr_set_any(&buf->addr);
 18392f0:	e0bffb17 	ldw	r2,-20(fp)
 18392f4:	10000215 	stw	zero,8(r2)
    *new_buf = buf;
 18392f8:	e0bfff17 	ldw	r2,-4(fp)
 18392fc:	e0fffb17 	ldw	r3,-20(fp)
 1839300:	10c00015 	stw	r3,0(r2)
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 1839304:	0005883a 	mov	r2,zero
 1839308:	00000306 	br	1839318 <netconn_recv+0x1a0>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 183930c:	e17fff17 	ldw	r5,-4(fp)
 1839310:	e13ffe17 	ldw	r4,-8(fp)
 1839314:	1838e700 	call	1838e70 <netconn_recv_data>
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 1839318:	e037883a 	mov	sp,fp
 183931c:	dfc00117 	ldw	ra,4(sp)
 1839320:	df000017 	ldw	fp,0(sp)
 1839324:	dec00204 	addi	sp,sp,8
 1839328:	f800283a 	ret

0183932c <netconn_recved>:
 * @param conn the netconn for which to update the receive window
 * @param length amount of data processed (ATTENTION: this must be accurate!)
 */
void
netconn_recved(struct netconn *conn, u32_t length)
{
 183932c:	defff604 	addi	sp,sp,-40
 1839330:	dfc00915 	stw	ra,36(sp)
 1839334:	df000815 	stw	fp,32(sp)
 1839338:	df000804 	addi	fp,sp,32
 183933c:	e13ffe15 	stw	r4,-8(fp)
 1839340:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  if ((conn != NULL) && (conn->type == NETCONN_TCP) &&
 1839344:	e0bffe17 	ldw	r2,-8(fp)
 1839348:	10001226 	beq	r2,zero,1839394 <netconn_recved+0x68>
 183934c:	e0bffe17 	ldw	r2,-8(fp)
 1839350:	10800017 	ldw	r2,0(r2)
 1839354:	10800418 	cmpnei	r2,r2,16
 1839358:	10000e1e 	bne	r2,zero,1839394 <netconn_recved+0x68>
      (netconn_get_noautorecved(conn))) {
 183935c:	e0bffe17 	ldw	r2,-8(fp)
 1839360:	10800903 	ldbu	r2,36(r2)
 1839364:	10803fcc 	andi	r2,r2,255
 1839368:	1080020c 	andi	r2,r2,8
 */
void
netconn_recved(struct netconn *conn, u32_t length)
{
#if LWIP_TCP
  if ((conn != NULL) && (conn->type == NETCONN_TCP) &&
 183936c:	10000926 	beq	r2,zero,1839394 <netconn_recved+0x68>
      (netconn_get_noautorecved(conn))) {
    struct api_msg msg;
    /* Let the stack know that we have taken the data. */
    /* TODO: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    msg.function = do_recv;
 1839370:	00806134 	movhi	r2,388
 1839374:	10ad3704 	addi	r2,r2,-19236
 1839378:	e0bff815 	stw	r2,-32(fp)
    msg.msg.conn = conn;
 183937c:	e0bffe17 	ldw	r2,-8(fp)
 1839380:	e0bff915 	stw	r2,-28(fp)
    msg.msg.msg.r.len = length;
 1839384:	e0bfff17 	ldw	r2,-4(fp)
 1839388:	e0bffb15 	stw	r2,-20(fp)
    /* don't care for the return value of do_recv */
    TCPIP_APIMSG(&msg);
 183938c:	e13ff804 	addi	r4,fp,-32
 1839390:	18306200 	call	1830620 <tcpip_apimsg>
  }
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(length);
#endif /* LWIP_TCP */
}
 1839394:	0001883a 	nop
 1839398:	e037883a 	mov	sp,fp
 183939c:	dfc00117 	ldw	ra,4(sp)
 18393a0:	df000017 	ldw	fp,0(sp)
 18393a4:	dec00204 	addi	sp,sp,8
 18393a8:	f800283a 	ret

018393ac <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, ip_addr_t *addr, u16_t port)
{
 18393ac:	defffa04 	addi	sp,sp,-24
 18393b0:	dfc00515 	stw	ra,20(sp)
 18393b4:	df000415 	stw	fp,16(sp)
 18393b8:	df000404 	addi	fp,sp,16
 18393bc:	e13ffc15 	stw	r4,-16(fp)
 18393c0:	e17ffd15 	stw	r5,-12(fp)
 18393c4:	e1bffe15 	stw	r6,-8(fp)
 18393c8:	3805883a 	mov	r2,r7
 18393cc:	e0bfff0d 	sth	r2,-4(fp)
  if (buf != NULL) {
 18393d0:	e0bffd17 	ldw	r2,-12(fp)
 18393d4:	10000f26 	beq	r2,zero,1839414 <netconn_sendto+0x68>
    ip_addr_set(&buf->addr, addr);
 18393d8:	e0bffe17 	ldw	r2,-8(fp)
 18393dc:	10000326 	beq	r2,zero,18393ec <netconn_sendto+0x40>
 18393e0:	e0bffe17 	ldw	r2,-8(fp)
 18393e4:	10800017 	ldw	r2,0(r2)
 18393e8:	00000106 	br	18393f0 <netconn_sendto+0x44>
 18393ec:	0005883a 	mov	r2,zero
 18393f0:	e0fffd17 	ldw	r3,-12(fp)
 18393f4:	18800215 	stw	r2,8(r3)
    buf->port = port;
 18393f8:	e0bffd17 	ldw	r2,-12(fp)
 18393fc:	e0ffff0b 	ldhu	r3,-4(fp)
 1839400:	10c0030d 	sth	r3,12(r2)
    return netconn_send(conn, buf);
 1839404:	e17ffd17 	ldw	r5,-12(fp)
 1839408:	e13ffc17 	ldw	r4,-16(fp)
 183940c:	183942c0 	call	183942c <netconn_send>
 1839410:	00000106 	br	1839418 <netconn_sendto+0x6c>
  }
  return ERR_VAL;
 1839414:	00bffe84 	movi	r2,-6
}
 1839418:	e037883a 	mov	sp,fp
 183941c:	dfc00117 	ldw	ra,4(sp)
 1839420:	df000017 	ldw	fp,0(sp)
 1839424:	dec00204 	addi	sp,sp,8
 1839428:	f800283a 	ret

0183942c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 183942c:	defff504 	addi	sp,sp,-44
 1839430:	dfc00a15 	stw	ra,40(sp)
 1839434:	df000915 	stw	fp,36(sp)
 1839438:	df000904 	addi	fp,sp,36
 183943c:	e13ffe15 	stw	r4,-8(fp)
 1839440:	e17fff15 	stw	r5,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 1839444:	e0bffe17 	ldw	r2,-8(fp)
 1839448:	1000091e 	bne	r2,zero,1839470 <netconn_send+0x44>
 183944c:	01c06134 	movhi	r7,388
 1839450:	39cbd404 	addi	r7,r7,12112
 1839454:	01808f04 	movi	r6,572
 1839458:	01406134 	movhi	r5,388
 183945c:	294c4f04 	addi	r5,r5,12604
 1839460:	01006134 	movhi	r4,388
 1839464:	210be204 	addi	r4,r4,12168
 1839468:	1800b240 	call	1800b24 <printf>
 183946c:	003fff06 	br	183946c <__ram_exceptions_end+0xff82917c>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
  msg.function = do_send;
 1839470:	00806134 	movhi	r2,388
 1839474:	10aca604 	addi	r2,r2,-19816
 1839478:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 183947c:	e0bffe17 	ldw	r2,-8(fp)
 1839480:	e0bff915 	stw	r2,-28(fp)
  msg.msg.msg.b = buf;
 1839484:	e0bfff17 	ldw	r2,-4(fp)
 1839488:	e0bffb15 	stw	r2,-20(fp)
  err = TCPIP_APIMSG(&msg);
 183948c:	e0bff804 	addi	r2,fp,-32
 1839490:	1009883a 	mov	r4,r2
 1839494:	18306200 	call	1830620 <tcpip_apimsg>
 1839498:	e0bff705 	stb	r2,-36(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 183949c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18394a0:	10000126 	beq	r2,zero,18394a8 <netconn_send+0x7c>
 18394a4:	1810f480 	call	1810f48 <vTaskEnterCritical>
 18394a8:	e0bffe17 	ldw	r2,-8(fp)
 18394ac:	10800303 	ldbu	r2,12(r2)
 18394b0:	10803fcc 	andi	r2,r2,255
 18394b4:	1080201c 	xori	r2,r2,128
 18394b8:	10bfe004 	addi	r2,r2,-128
 18394bc:	10bffdd0 	cmplti	r2,r2,-9
 18394c0:	1000031e 	bne	r2,zero,18394d0 <netconn_send+0xa4>
 18394c4:	e0bffe17 	ldw	r2,-8(fp)
 18394c8:	e0fff703 	ldbu	r3,-36(fp)
 18394cc:	10c00305 	stb	r3,12(r2)
 18394d0:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 18394d4:	10000126 	beq	r2,zero,18394dc <netconn_send+0xb0>
 18394d8:	1810f900 	call	1810f90 <vTaskExitCritical>
  return err;
 18394dc:	e0bff703 	ldbu	r2,-36(fp)
}
 18394e0:	e037883a 	mov	sp,fp
 18394e4:	dfc00117 	ldw	ra,4(sp)
 18394e8:	df000017 	ldw	fp,0(sp)
 18394ec:	dec00204 	addi	sp,sp,8
 18394f0:	f800283a 	ret

018394f4 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 18394f4:	defff304 	addi	sp,sp,-52
 18394f8:	dfc00c15 	stw	ra,48(sp)
 18394fc:	df000b15 	stw	fp,44(sp)
 1839500:	df000b04 	addi	fp,sp,44
 1839504:	e13ffc15 	stw	r4,-16(fp)
 1839508:	e17ffd15 	stw	r5,-12(fp)
 183950c:	e1bffe15 	stw	r6,-8(fp)
 1839510:	3805883a 	mov	r2,r7
 1839514:	e0bfff05 	stb	r2,-4(fp)
  struct api_msg msg;
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 1839518:	e0bffc17 	ldw	r2,-16(fp)
 183951c:	1000091e 	bne	r2,zero,1839544 <netconn_write_partly+0x50>
 1839520:	01c06134 	movhi	r7,388
 1839524:	39cbd404 	addi	r7,r7,12112
 1839528:	01809744 	movi	r6,605
 183952c:	01406134 	movhi	r5,388
 1839530:	294c5604 	addi	r5,r5,12632
 1839534:	01006134 	movhi	r4,388
 1839538:	210be204 	addi	r4,r4,12168
 183953c:	1800b240 	call	1800b24 <printf>
 1839540:	003fff06 	br	1839540 <__ram_exceptions_end+0xff829250>
  LWIP_ERROR("netconn_write: invalid conn->type",  (conn->type == NETCONN_TCP), return ERR_VAL;);
 1839544:	e0bffc17 	ldw	r2,-16(fp)
 1839548:	10800017 	ldw	r2,0(r2)
 183954c:	10800420 	cmpeqi	r2,r2,16
 1839550:	1000091e 	bne	r2,zero,1839578 <netconn_write_partly+0x84>
 1839554:	01c06134 	movhi	r7,388
 1839558:	39cbd404 	addi	r7,r7,12112
 183955c:	01809784 	movi	r6,606
 1839560:	01406134 	movhi	r5,388
 1839564:	294c5d04 	addi	r5,r5,12660
 1839568:	01006134 	movhi	r4,388
 183956c:	210be204 	addi	r4,r4,12168
 1839570:	1800b240 	call	1800b24 <printf>
 1839574:	003fff06 	br	1839574 <__ram_exceptions_end+0xff829284>
  if (size == 0) {
 1839578:	e0bffe17 	ldw	r2,-8(fp)
 183957c:	1000021e 	bne	r2,zero,1839588 <netconn_write_partly+0x94>
    return ERR_OK;
 1839580:	0005883a 	mov	r2,zero
 1839584:	00003f06 	br	1839684 <netconn_write_partly+0x190>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 1839588:	e0bffc17 	ldw	r2,-16(fp)
 183958c:	10800903 	ldbu	r2,36(r2)
 1839590:	10803fcc 	andi	r2,r2,255
 1839594:	1080008c 	andi	r2,r2,2
 1839598:	1000031e 	bne	r2,zero,18395a8 <netconn_write_partly+0xb4>
 183959c:	e0bfff03 	ldbu	r2,-4(fp)
 18395a0:	1080010c 	andi	r2,r2,4
 18395a4:	10000226 	beq	r2,zero,18395b0 <netconn_write_partly+0xbc>
 18395a8:	00800044 	movi	r2,1
 18395ac:	00000106 	br	18395b4 <netconn_write_partly+0xc0>
 18395b0:	0005883a 	mov	r2,zero
 18395b4:	e0bff505 	stb	r2,-44(fp)
  if (dontblock && !bytes_written) {
 18395b8:	e0bff503 	ldbu	r2,-44(fp)
 18395bc:	10000426 	beq	r2,zero,18395d0 <netconn_write_partly+0xdc>
 18395c0:	e0800217 	ldw	r2,8(fp)
 18395c4:	1000021e 	bne	r2,zero,18395d0 <netconn_write_partly+0xdc>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 18395c8:	00bffe84 	movi	r2,-6
 18395cc:	00002d06 	br	1839684 <netconn_write_partly+0x190>
  }

  /* non-blocking write sends as much  */
  msg.function = do_write;
 18395d0:	00806134 	movhi	r2,388
 18395d4:	10ae3904 	addi	r2,r2,-18204
 18395d8:	e0bff615 	stw	r2,-40(fp)
  msg.msg.conn = conn;
 18395dc:	e0bffc17 	ldw	r2,-16(fp)
 18395e0:	e0bff715 	stw	r2,-36(fp)
  msg.msg.msg.w.dataptr = dataptr;
 18395e4:	e0bffd17 	ldw	r2,-12(fp)
 18395e8:	e0bff915 	stw	r2,-28(fp)
  msg.msg.msg.w.apiflags = apiflags;
 18395ec:	e0bfff03 	ldbu	r2,-4(fp)
 18395f0:	e0bffb05 	stb	r2,-20(fp)
  msg.msg.msg.w.len = size;
 18395f4:	e0bffe17 	ldw	r2,-8(fp)
 18395f8:	e0bffa15 	stw	r2,-24(fp)
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = TCPIP_APIMSG(&msg);
 18395fc:	e0bff604 	addi	r2,fp,-40
 1839600:	1009883a 	mov	r4,r2
 1839604:	18306200 	call	1830620 <tcpip_apimsg>
 1839608:	e0bff545 	stb	r2,-43(fp)
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 183960c:	e0bff547 	ldb	r2,-43(fp)
 1839610:	10000b1e 	bne	r2,zero,1839640 <netconn_write_partly+0x14c>
 1839614:	e0800217 	ldw	r2,8(fp)
 1839618:	10000926 	beq	r2,zero,1839640 <netconn_write_partly+0x14c>
    if (dontblock
 183961c:	e0bff503 	ldbu	r2,-44(fp)
 1839620:	10000426 	beq	r2,zero,1839634 <netconn_write_partly+0x140>
#if LWIP_SO_SNDTIMEO
        || (conn->send_timeout != 0)
#endif /* LWIP_SO_SNDTIMEO */
       ) {
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = msg.msg.msg.w.len;
 1839624:	e0fffa17 	ldw	r3,-24(fp)
 1839628:	e0800217 	ldw	r2,8(fp)
 183962c:	10c00015 	stw	r3,0(r2)
 1839630:	00000306 	br	1839640 <netconn_write_partly+0x14c>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 1839634:	e0800217 	ldw	r2,8(fp)
 1839638:	e0fffe17 	ldw	r3,-8(fp)
 183963c:	10c00015 	stw	r3,0(r2)
    }
  }

  NETCONN_SET_SAFE_ERR(conn, err);
 1839640:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839644:	10000126 	beq	r2,zero,183964c <netconn_write_partly+0x158>
 1839648:	1810f480 	call	1810f48 <vTaskEnterCritical>
 183964c:	e0bffc17 	ldw	r2,-16(fp)
 1839650:	10800303 	ldbu	r2,12(r2)
 1839654:	10803fcc 	andi	r2,r2,255
 1839658:	1080201c 	xori	r2,r2,128
 183965c:	10bfe004 	addi	r2,r2,-128
 1839660:	10bffdd0 	cmplti	r2,r2,-9
 1839664:	1000031e 	bne	r2,zero,1839674 <netconn_write_partly+0x180>
 1839668:	e0bffc17 	ldw	r2,-16(fp)
 183966c:	e0fff543 	ldbu	r3,-43(fp)
 1839670:	10c00305 	stb	r3,12(r2)
 1839674:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839678:	10000126 	beq	r2,zero,1839680 <netconn_write_partly+0x18c>
 183967c:	1810f900 	call	1810f90 <vTaskExitCritical>
  return err;
 1839680:	e0bff543 	ldbu	r2,-43(fp)
}
 1839684:	e037883a 	mov	sp,fp
 1839688:	dfc00117 	ldw	ra,4(sp)
 183968c:	df000017 	ldw	fp,0(sp)
 1839690:	dec00204 	addi	sp,sp,8
 1839694:	f800283a 	ret

01839698 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 1839698:	defff504 	addi	sp,sp,-44
 183969c:	dfc00a15 	stw	ra,40(sp)
 18396a0:	df000915 	stw	fp,36(sp)
 18396a4:	df000904 	addi	fp,sp,36
 18396a8:	e13ffe15 	stw	r4,-8(fp)
 18396ac:	2805883a 	mov	r2,r5
 18396b0:	e0bfff05 	stb	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 18396b4:	e0bffe17 	ldw	r2,-8(fp)
 18396b8:	1000091e 	bne	r2,zero,18396e0 <netconn_close_shutdown+0x48>
 18396bc:	01c06134 	movhi	r7,388
 18396c0:	39cbd404 	addi	r7,r7,12112
 18396c4:	0180a704 	movi	r6,668
 18396c8:	01406134 	movhi	r5,388
 18396cc:	294c6604 	addi	r5,r5,12696
 18396d0:	01006134 	movhi	r4,388
 18396d4:	210be204 	addi	r4,r4,12168
 18396d8:	1800b240 	call	1800b24 <printf>
 18396dc:	003fff06 	br	18396dc <__ram_exceptions_end+0xff8293ec>

  msg.function = do_close;
 18396e0:	00806134 	movhi	r2,388
 18396e4:	10aef404 	addi	r2,r2,-17456
 18396e8:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 18396ec:	e0bffe17 	ldw	r2,-8(fp)
 18396f0:	e0bff915 	stw	r2,-28(fp)
  /* shutting down both ends is the same as closing */
  msg.msg.msg.sd.shut = how;
 18396f4:	e0bfff03 	ldbu	r2,-4(fp)
 18396f8:	e0bffb05 	stb	r2,-20(fp)
  /* because of the LWIP_TCPIP_CORE_LOCKING implementation of do_close,
     don't use TCPIP_APIMSG here */
  err = tcpip_apimsg(&msg);
 18396fc:	e0bff804 	addi	r2,fp,-32
 1839700:	1009883a 	mov	r4,r2
 1839704:	18306200 	call	1830620 <tcpip_apimsg>
 1839708:	e0bff705 	stb	r2,-36(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 183970c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839710:	10000126 	beq	r2,zero,1839718 <netconn_close_shutdown+0x80>
 1839714:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1839718:	e0bffe17 	ldw	r2,-8(fp)
 183971c:	10800303 	ldbu	r2,12(r2)
 1839720:	10803fcc 	andi	r2,r2,255
 1839724:	1080201c 	xori	r2,r2,128
 1839728:	10bfe004 	addi	r2,r2,-128
 183972c:	10bffdd0 	cmplti	r2,r2,-9
 1839730:	1000031e 	bne	r2,zero,1839740 <netconn_close_shutdown+0xa8>
 1839734:	e0bffe17 	ldw	r2,-8(fp)
 1839738:	e0fff703 	ldbu	r3,-36(fp)
 183973c:	10c00305 	stb	r3,12(r2)
 1839740:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839744:	10000126 	beq	r2,zero,183974c <netconn_close_shutdown+0xb4>
 1839748:	1810f900 	call	1810f90 <vTaskExitCritical>
  return err;
 183974c:	e0bff703 	ldbu	r2,-36(fp)
}
 1839750:	e037883a 	mov	sp,fp
 1839754:	dfc00117 	ldw	ra,4(sp)
 1839758:	df000017 	ldw	fp,0(sp)
 183975c:	dec00204 	addi	sp,sp,8
 1839760:	f800283a 	ret

01839764 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 1839764:	defffd04 	addi	sp,sp,-12
 1839768:	dfc00215 	stw	ra,8(sp)
 183976c:	df000115 	stw	fp,4(sp)
 1839770:	df000104 	addi	fp,sp,4
 1839774:	e13fff15 	stw	r4,-4(fp)
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 1839778:	014000c4 	movi	r5,3
 183977c:	e13fff17 	ldw	r4,-4(fp)
 1839780:	18396980 	call	1839698 <netconn_close_shutdown>
}
 1839784:	e037883a 	mov	sp,fp
 1839788:	dfc00117 	ldw	ra,4(sp)
 183978c:	df000017 	ldw	fp,0(sp)
 1839790:	dec00204 	addi	sp,sp,8
 1839794:	f800283a 	ret

01839798 <netconn_shutdown>:
 * @param conn the TCP netconn to shut down
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
 1839798:	defffb04 	addi	sp,sp,-20
 183979c:	dfc00415 	stw	ra,16(sp)
 18397a0:	df000315 	stw	fp,12(sp)
 18397a4:	df000304 	addi	fp,sp,12
 18397a8:	e13ffd15 	stw	r4,-12(fp)
 18397ac:	2807883a 	mov	r3,r5
 18397b0:	3005883a 	mov	r2,r6
 18397b4:	e0fffe05 	stb	r3,-8(fp)
 18397b8:	e0bfff05 	stb	r2,-4(fp)
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
 18397bc:	e0bffe03 	ldbu	r2,-8(fp)
 18397c0:	1004c03a 	cmpne	r2,r2,zero
 18397c4:	1007883a 	mov	r3,r2
 18397c8:	e0bfff03 	ldbu	r2,-4(fp)
 18397cc:	10000226 	beq	r2,zero,18397d8 <netconn_shutdown+0x40>
 18397d0:	00800084 	movi	r2,2
 18397d4:	00000106 	br	18397dc <netconn_shutdown+0x44>
 18397d8:	0005883a 	mov	r2,zero
 18397dc:	1884b03a 	or	r2,r3,r2
 18397e0:	10803fcc 	andi	r2,r2,255
 18397e4:	100b883a 	mov	r5,r2
 18397e8:	e13ffd17 	ldw	r4,-12(fp)
 18397ec:	18396980 	call	1839698 <netconn_close_shutdown>
}
 18397f0:	e037883a 	mov	sp,fp
 18397f4:	dfc00117 	ldw	ra,4(sp)
 18397f8:	df000017 	ldw	fp,0(sp)
 18397fc:	dec00204 	addi	sp,sp,8
 1839800:	f800283a 	ret

01839804 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    ip_addr_t *addr)
{
 1839804:	defff604 	addi	sp,sp,-40
 1839808:	dfc00915 	stw	ra,36(sp)
 183980c:	df000815 	stw	fp,32(sp)
 1839810:	df000804 	addi	fp,sp,32
 1839814:	e13ffc15 	stw	r4,-16(fp)
 1839818:	e17ffd15 	stw	r5,-12(fp)
 183981c:	e1bffe15 	stw	r6,-8(fp)
 1839820:	e1ffff15 	stw	r7,-4(fp)
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
 1839824:	e0bffc17 	ldw	r2,-16(fp)
 1839828:	e0bff915 	stw	r2,-28(fp)

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
 183982c:	e0bff917 	ldw	r2,-28(fp)
 1839830:	10004e26 	beq	r2,zero,183996c <recv_raw+0x168>
 1839834:	e0bff917 	ldw	r2,-28(fp)
 1839838:	10800517 	ldw	r2,20(r2)
 183983c:	10004b26 	beq	r2,zero,183996c <recv_raw+0x168>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
      return 0;
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 1839840:	e0bffe17 	ldw	r2,-8(fp)
 1839844:	1080020b 	ldhu	r2,8(r2)
 1839848:	10bfffcc 	andi	r2,r2,65535
 183984c:	000d883a 	mov	r6,zero
 1839850:	100b883a 	mov	r5,r2
 1839854:	010000c4 	movi	r4,3
 1839858:	1819aa40 	call	1819aa4 <pbuf_alloc>
 183985c:	e0bff815 	stw	r2,-32(fp)
    if(q != NULL) {
 1839860:	e0bff817 	ldw	r2,-32(fp)
 1839864:	10000a26 	beq	r2,zero,1839890 <recv_raw+0x8c>
      if (pbuf_copy(q, p) != ERR_OK) {
 1839868:	e17ffe17 	ldw	r5,-8(fp)
 183986c:	e13ff817 	ldw	r4,-32(fp)
 1839870:	181a5cc0 	call	181a5cc <pbuf_copy>
 1839874:	10803fcc 	andi	r2,r2,255
 1839878:	1080201c 	xori	r2,r2,128
 183987c:	10bfe004 	addi	r2,r2,-128
 1839880:	10000326 	beq	r2,zero,1839890 <recv_raw+0x8c>
        pbuf_free(q);
 1839884:	e13ff817 	ldw	r4,-32(fp)
 1839888:	181a22c0 	call	181a22c <pbuf_free>
        q = NULL;
 183988c:	e03ff815 	stw	zero,-32(fp)
      }
    }

    if (q != NULL) {
 1839890:	e0bff817 	ldw	r2,-32(fp)
 1839894:	10003526 	beq	r2,zero,183996c <recv_raw+0x168>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 1839898:	00806134 	movhi	r2,388
 183989c:	108bcc84 	addi	r2,r2,12082
 18398a0:	1080038b 	ldhu	r2,14(r2)
 18398a4:	10bfffcc 	andi	r2,r2,65535
 18398a8:	1009883a 	mov	r4,r2
 18398ac:	183c5000 	call	183c500 <malloc>
 18398b0:	e0bffa15 	stw	r2,-24(fp)
      if (buf == NULL) {
 18398b4:	e0bffa17 	ldw	r2,-24(fp)
 18398b8:	1000041e 	bne	r2,zero,18398cc <recv_raw+0xc8>
        pbuf_free(q);
 18398bc:	e13ff817 	ldw	r4,-32(fp)
 18398c0:	181a22c0 	call	181a22c <pbuf_free>
        return 0;
 18398c4:	0005883a 	mov	r2,zero
 18398c8:	00002906 	br	1839970 <recv_raw+0x16c>
      }

      buf->p = q;
 18398cc:	e0bffa17 	ldw	r2,-24(fp)
 18398d0:	e0fff817 	ldw	r3,-32(fp)
 18398d4:	10c00015 	stw	r3,0(r2)
      buf->ptr = q;
 18398d8:	e0bffa17 	ldw	r2,-24(fp)
 18398dc:	e0fff817 	ldw	r3,-32(fp)
 18398e0:	10c00115 	stw	r3,4(r2)
      ip_addr_copy(buf->addr, *ip_current_src_addr());
 18398e4:	d0e80f17 	ldw	r3,-24516(gp)
 18398e8:	e0bffa17 	ldw	r2,-24(fp)
 18398ec:	10c00215 	stw	r3,8(r2)
      buf->port = pcb->protocol;
 18398f0:	e0bffd17 	ldw	r2,-12(fp)
 18398f4:	10800403 	ldbu	r2,16(r2)
 18398f8:	10c03fcc 	andi	r3,r2,255
 18398fc:	e0bffa17 	ldw	r2,-24(fp)
 1839900:	10c0030d 	sth	r3,12(r2)

      len = q->tot_len;
 1839904:	e0bff817 	ldw	r2,-32(fp)
 1839908:	1080020b 	ldhu	r2,8(r2)
 183990c:	e0bffb0d 	sth	r2,-20(fp)
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 1839910:	e0bff917 	ldw	r2,-28(fp)
 1839914:	10800504 	addi	r2,r2,20
 1839918:	e17ffa17 	ldw	r5,-24(fp)
 183991c:	1009883a 	mov	r4,r2
 1839920:	181542c0 	call	181542c <sys_mbox_trypost>
 1839924:	10803fcc 	andi	r2,r2,255
 1839928:	1080201c 	xori	r2,r2,128
 183992c:	10bfe004 	addi	r2,r2,-128
 1839930:	10000426 	beq	r2,zero,1839944 <recv_raw+0x140>
        netbuf_delete(buf);
 1839934:	e13ffa17 	ldw	r4,-24(fp)
 1839938:	183bd840 	call	183bd84 <netbuf_delete>
        return 0;
 183993c:	0005883a 	mov	r2,zero
 1839940:	00000b06 	br	1839970 <recv_raw+0x16c>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 1839944:	e0bff917 	ldw	r2,-28(fp)
 1839948:	10800c17 	ldw	r2,48(r2)
 183994c:	10000726 	beq	r2,zero,183996c <recv_raw+0x168>
 1839950:	e0bff917 	ldw	r2,-28(fp)
 1839954:	10800c17 	ldw	r2,48(r2)
 1839958:	e0fffb0b 	ldhu	r3,-20(fp)
 183995c:	180d883a 	mov	r6,r3
 1839960:	000b883a 	mov	r5,zero
 1839964:	e13ff917 	ldw	r4,-28(fp)
 1839968:	103ee83a 	callr	r2
      }
    }
  }

  return 0; /* do not eat the packet */
 183996c:	0005883a 	mov	r2,zero
}
 1839970:	e037883a 	mov	sp,fp
 1839974:	dfc00117 	ldw	ra,4(sp)
 1839978:	df000017 	ldw	fp,0(sp)
 183997c:	dec00204 	addi	sp,sp,8
 1839980:	f800283a 	ret

01839984 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   ip_addr_t *addr, u16_t port)
{
 1839984:	defff604 	addi	sp,sp,-40
 1839988:	dfc00915 	stw	ra,36(sp)
 183998c:	df000815 	stw	fp,32(sp)
 1839990:	df000804 	addi	fp,sp,32
 1839994:	e13ffb15 	stw	r4,-20(fp)
 1839998:	e17ffc15 	stw	r5,-16(fp)
 183999c:	e1bffd15 	stw	r6,-12(fp)
 18399a0:	e1fffe15 	stw	r7,-8(fp)
 18399a4:	e0800217 	ldw	r2,8(fp)
 18399a8:	e0bfff0d 	sth	r2,-4(fp)
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;
 18399ac:	e0bffb17 	ldw	r2,-20(fp)
 18399b0:	e0bff815 	stw	r2,-32(fp)
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
 18399b4:	e0bff817 	ldw	r2,-32(fp)
 18399b8:	10000326 	beq	r2,zero,18399c8 <recv_udp+0x44>
 18399bc:	e0bff817 	ldw	r2,-32(fp)
 18399c0:	10800517 	ldw	r2,20(r2)
 18399c4:	1000031e 	bne	r2,zero,18399d4 <recv_udp+0x50>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 18399c8:	e13ffd17 	ldw	r4,-12(fp)
 18399cc:	181a22c0 	call	181a22c <pbuf_free>
    return;
 18399d0:	00003606 	br	1839aac <recv_udp+0x128>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 18399d4:	00806134 	movhi	r2,388
 18399d8:	108bcc84 	addi	r2,r2,12082
 18399dc:	1080038b 	ldhu	r2,14(r2)
 18399e0:	10bfffcc 	andi	r2,r2,65535
 18399e4:	1009883a 	mov	r4,r2
 18399e8:	183c5000 	call	183c500 <malloc>
 18399ec:	e0bff915 	stw	r2,-28(fp)
  if (buf == NULL) {
 18399f0:	e0bff917 	ldw	r2,-28(fp)
 18399f4:	1000031e 	bne	r2,zero,1839a04 <recv_udp+0x80>
    pbuf_free(p);
 18399f8:	e13ffd17 	ldw	r4,-12(fp)
 18399fc:	181a22c0 	call	181a22c <pbuf_free>
    return;
 1839a00:	00002a06 	br	1839aac <recv_udp+0x128>
  } else {
    buf->p = p;
 1839a04:	e0bff917 	ldw	r2,-28(fp)
 1839a08:	e0fffd17 	ldw	r3,-12(fp)
 1839a0c:	10c00015 	stw	r3,0(r2)
    buf->ptr = p;
 1839a10:	e0bff917 	ldw	r2,-28(fp)
 1839a14:	e0fffd17 	ldw	r3,-12(fp)
 1839a18:	10c00115 	stw	r3,4(r2)
    ip_addr_set(&buf->addr, addr);
 1839a1c:	e0bffe17 	ldw	r2,-8(fp)
 1839a20:	10000326 	beq	r2,zero,1839a30 <recv_udp+0xac>
 1839a24:	e0bffe17 	ldw	r2,-8(fp)
 1839a28:	10800017 	ldw	r2,0(r2)
 1839a2c:	00000106 	br	1839a34 <recv_udp+0xb0>
 1839a30:	0005883a 	mov	r2,zero
 1839a34:	e0fff917 	ldw	r3,-28(fp)
 1839a38:	18800215 	stw	r2,8(r3)
    buf->port = port;
 1839a3c:	e0bff917 	ldw	r2,-28(fp)
 1839a40:	e0ffff0b 	ldhu	r3,-4(fp)
 1839a44:	10c0030d 	sth	r3,12(r2)
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 1839a48:	e0bffd17 	ldw	r2,-12(fp)
 1839a4c:	1080020b 	ldhu	r2,8(r2)
 1839a50:	e0bffa0d 	sth	r2,-24(fp)
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 1839a54:	e0bff817 	ldw	r2,-32(fp)
 1839a58:	10800504 	addi	r2,r2,20
 1839a5c:	e17ff917 	ldw	r5,-28(fp)
 1839a60:	1009883a 	mov	r4,r2
 1839a64:	181542c0 	call	181542c <sys_mbox_trypost>
 1839a68:	10803fcc 	andi	r2,r2,255
 1839a6c:	1080201c 	xori	r2,r2,128
 1839a70:	10bfe004 	addi	r2,r2,-128
 1839a74:	10000326 	beq	r2,zero,1839a84 <recv_udp+0x100>
    netbuf_delete(buf);
 1839a78:	e13ff917 	ldw	r4,-28(fp)
 1839a7c:	183bd840 	call	183bd84 <netbuf_delete>
    return;
 1839a80:	00000a06 	br	1839aac <recv_udp+0x128>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 1839a84:	e0bff817 	ldw	r2,-32(fp)
 1839a88:	10800c17 	ldw	r2,48(r2)
 1839a8c:	10000726 	beq	r2,zero,1839aac <recv_udp+0x128>
 1839a90:	e0bff817 	ldw	r2,-32(fp)
 1839a94:	10800c17 	ldw	r2,48(r2)
 1839a98:	e0fffa0b 	ldhu	r3,-24(fp)
 1839a9c:	180d883a 	mov	r6,r3
 1839aa0:	000b883a 	mov	r5,zero
 1839aa4:	e13ff817 	ldw	r4,-32(fp)
 1839aa8:	103ee83a 	callr	r2
  }
}
 1839aac:	e037883a 	mov	sp,fp
 1839ab0:	dfc00117 	ldw	ra,4(sp)
 1839ab4:	df000017 	ldw	fp,0(sp)
 1839ab8:	dec00204 	addi	sp,sp,8
 1839abc:	f800283a 	ret

01839ac0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 1839ac0:	defff804 	addi	sp,sp,-32
 1839ac4:	dfc00715 	stw	ra,28(sp)
 1839ac8:	df000615 	stw	fp,24(sp)
 1839acc:	df000604 	addi	fp,sp,24
 1839ad0:	e13ffc15 	stw	r4,-16(fp)
 1839ad4:	e17ffd15 	stw	r5,-12(fp)
 1839ad8:	e1bffe15 	stw	r6,-8(fp)
 1839adc:	3805883a 	mov	r2,r7
 1839ae0:	e0bfff05 	stb	r2,-4(fp)
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;
 1839ae4:	e0bffc17 	ldw	r2,-16(fp)
 1839ae8:	e0bffb15 	stw	r2,-20(fp)

  if (conn == NULL) {
 1839aec:	e0bffb17 	ldw	r2,-20(fp)
 1839af0:	1000021e 	bne	r2,zero,1839afc <recv_tcp+0x3c>
    return ERR_VAL;
 1839af4:	00bffe84 	movi	r2,-6
 1839af8:	00003c06 	br	1839bec <recv_tcp+0x12c>
  }

  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);

  if (!sys_mbox_valid(&conn->recvmbox)) {
 1839afc:	e0bffb17 	ldw	r2,-20(fp)
 1839b00:	10800517 	ldw	r2,20(r2)
 1839b04:	10000c1e 	bne	r2,zero,1839b38 <recv_tcp+0x78>
    /* recvmbox already deleted */
    if (p != NULL) {
 1839b08:	e0bffe17 	ldw	r2,-8(fp)
 1839b0c:	10000826 	beq	r2,zero,1839b30 <recv_tcp+0x70>
      tcp_recved(pcb, p->tot_len);
 1839b10:	e0bffe17 	ldw	r2,-8(fp)
 1839b14:	1080020b 	ldhu	r2,8(r2)
 1839b18:	10bfffcc 	andi	r2,r2,65535
 1839b1c:	100b883a 	mov	r5,r2
 1839b20:	e13ffd17 	ldw	r4,-12(fp)
 1839b24:	181bbf40 	call	181bbf4 <tcp_recved>
      pbuf_free(p);
 1839b28:	e13ffe17 	ldw	r4,-8(fp)
 1839b2c:	181a22c0 	call	181a22c <pbuf_free>
    }
    return ERR_OK;
 1839b30:	0005883a 	mov	r2,zero
 1839b34:	00002d06 	br	1839bec <recv_tcp+0x12c>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  NETCONN_SET_SAFE_ERR(conn, err);
 1839b38:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839b3c:	10000126 	beq	r2,zero,1839b44 <recv_tcp+0x84>
 1839b40:	1810f480 	call	1810f48 <vTaskEnterCritical>
 1839b44:	e0bffb17 	ldw	r2,-20(fp)
 1839b48:	10800303 	ldbu	r2,12(r2)
 1839b4c:	10803fcc 	andi	r2,r2,255
 1839b50:	1080201c 	xori	r2,r2,128
 1839b54:	10bfe004 	addi	r2,r2,-128
 1839b58:	10bffdd0 	cmplti	r2,r2,-9
 1839b5c:	1000031e 	bne	r2,zero,1839b6c <recv_tcp+0xac>
 1839b60:	e0bffb17 	ldw	r2,-20(fp)
 1839b64:	e0ffff03 	ldbu	r3,-4(fp)
 1839b68:	10c00305 	stb	r3,12(r2)
 1839b6c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839b70:	10000126 	beq	r2,zero,1839b78 <recv_tcp+0xb8>
 1839b74:	1810f900 	call	1810f90 <vTaskExitCritical>

  if (p != NULL) {
 1839b78:	e0bffe17 	ldw	r2,-8(fp)
 1839b7c:	10000426 	beq	r2,zero,1839b90 <recv_tcp+0xd0>
    len = p->tot_len;
 1839b80:	e0bffe17 	ldw	r2,-8(fp)
 1839b84:	1080020b 	ldhu	r2,8(r2)
 1839b88:	e0bffa0d 	sth	r2,-24(fp)
 1839b8c:	00000106 	br	1839b94 <recv_tcp+0xd4>
  } else {
    len = 0;
 1839b90:	e03ffa0d 	sth	zero,-24(fp)
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 1839b94:	e0bffb17 	ldw	r2,-20(fp)
 1839b98:	10800504 	addi	r2,r2,20
 1839b9c:	e17ffe17 	ldw	r5,-8(fp)
 1839ba0:	1009883a 	mov	r4,r2
 1839ba4:	181542c0 	call	181542c <sys_mbox_trypost>
 1839ba8:	10803fcc 	andi	r2,r2,255
 1839bac:	1080201c 	xori	r2,r2,128
 1839bb0:	10bfe004 	addi	r2,r2,-128
 1839bb4:	10000226 	beq	r2,zero,1839bc0 <recv_tcp+0x100>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 1839bb8:	00bfffc4 	movi	r2,-1
 1839bbc:	00000b06 	br	1839bec <recv_tcp+0x12c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 1839bc0:	e0bffb17 	ldw	r2,-20(fp)
 1839bc4:	10800c17 	ldw	r2,48(r2)
 1839bc8:	10000726 	beq	r2,zero,1839be8 <recv_tcp+0x128>
 1839bcc:	e0bffb17 	ldw	r2,-20(fp)
 1839bd0:	10800c17 	ldw	r2,48(r2)
 1839bd4:	e0fffa0b 	ldhu	r3,-24(fp)
 1839bd8:	180d883a 	mov	r6,r3
 1839bdc:	000b883a 	mov	r5,zero
 1839be0:	e13ffb17 	ldw	r4,-20(fp)
 1839be4:	103ee83a 	callr	r2
  }

  return ERR_OK;
 1839be8:	0005883a 	mov	r2,zero
}
 1839bec:	e037883a 	mov	sp,fp
 1839bf0:	dfc00117 	ldw	ra,4(sp)
 1839bf4:	df000017 	ldw	fp,0(sp)
 1839bf8:	dec00204 	addi	sp,sp,8
 1839bfc:	f800283a 	ret

01839c00 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 1839c00:	defffb04 	addi	sp,sp,-20
 1839c04:	dfc00415 	stw	ra,16(sp)
 1839c08:	df000315 	stw	fp,12(sp)
 1839c0c:	df000304 	addi	fp,sp,12
 1839c10:	e13ffe15 	stw	r4,-8(fp)
 1839c14:	e17fff15 	stw	r5,-4(fp)
  struct netconn *conn = (struct netconn *)arg;
 1839c18:	e0bffe17 	ldw	r2,-8(fp)
 1839c1c:	e0bffd15 	stw	r2,-12(fp)

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn->state == NETCONN_WRITE) {
 1839c20:	e0bffd17 	ldw	r2,-12(fp)
 1839c24:	10800117 	ldw	r2,4(r2)
 1839c28:	10800058 	cmpnei	r2,r2,1
 1839c2c:	1000031e 	bne	r2,zero,1839c3c <poll_tcp+0x3c>
    do_writemore(conn);
 1839c30:	e13ffd17 	ldw	r4,-12(fp)
 1839c34:	183b5d80 	call	183b5d8 <do_writemore>
 1839c38:	00000606 	br	1839c54 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 1839c3c:	e0bffd17 	ldw	r2,-12(fp)
 1839c40:	10800117 	ldw	r2,4(r2)
 1839c44:	10800118 	cmpnei	r2,r2,4
 1839c48:	1000021e 	bne	r2,zero,1839c54 <poll_tcp+0x54>
    do_close_internal(conn);
 1839c4c:	e13ffd17 	ldw	r4,-12(fp)
 1839c50:	183a6a00 	call	183a6a0 <do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 1839c54:	e0bffd17 	ldw	r2,-12(fp)
 1839c58:	10800903 	ldbu	r2,36(r2)
 1839c5c:	10803fcc 	andi	r2,r2,255
 1839c60:	1080040c 	andi	r2,r2,16
 1839c64:	10001f26 	beq	r2,zero,1839ce4 <poll_tcp+0xe4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 1839c68:	e0bffd17 	ldw	r2,-12(fp)
 1839c6c:	10800217 	ldw	r2,8(r2)
 1839c70:	10001c26 	beq	r2,zero,1839ce4 <poll_tcp+0xe4>
 1839c74:	e0bffd17 	ldw	r2,-12(fp)
 1839c78:	10800217 	ldw	r2,8(r2)
 1839c7c:	10801a8b 	ldhu	r2,106(r2)
 1839c80:	10bfffcc 	andi	r2,r2,65535
 1839c84:	10816d70 	cmpltui	r2,r2,1461
 1839c88:	1000161e 	bne	r2,zero,1839ce4 <poll_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 1839c8c:	e0bffd17 	ldw	r2,-12(fp)
 1839c90:	10800217 	ldw	r2,8(r2)
 1839c94:	10801b0b 	ldhu	r2,108(r2)

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 1839c98:	10bfffcc 	andi	r2,r2,65535
 1839c9c:	10800128 	cmpgeui	r2,r2,4
 1839ca0:	1000101e 	bne	r2,zero,1839ce4 <poll_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 1839ca4:	e0bffd17 	ldw	r2,-12(fp)
 1839ca8:	10c00903 	ldbu	r3,36(r2)
 1839cac:	00bffbc4 	movi	r2,-17
 1839cb0:	1884703a 	and	r2,r3,r2
 1839cb4:	1007883a 	mov	r3,r2
 1839cb8:	e0bffd17 	ldw	r2,-12(fp)
 1839cbc:	10c00905 	stb	r3,36(r2)
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 1839cc0:	e0bffd17 	ldw	r2,-12(fp)
 1839cc4:	10800c17 	ldw	r2,48(r2)
 1839cc8:	10000626 	beq	r2,zero,1839ce4 <poll_tcp+0xe4>
 1839ccc:	e0bffd17 	ldw	r2,-12(fp)
 1839cd0:	10800c17 	ldw	r2,48(r2)
 1839cd4:	000d883a 	mov	r6,zero
 1839cd8:	01400084 	movi	r5,2
 1839cdc:	e13ffd17 	ldw	r4,-12(fp)
 1839ce0:	103ee83a 	callr	r2
    }
  }

  return ERR_OK;
 1839ce4:	0005883a 	mov	r2,zero
}
 1839ce8:	e037883a 	mov	sp,fp
 1839cec:	dfc00117 	ldw	ra,4(sp)
 1839cf0:	df000017 	ldw	fp,0(sp)
 1839cf4:	dec00204 	addi	sp,sp,8
 1839cf8:	f800283a 	ret

01839cfc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 1839cfc:	defffa04 	addi	sp,sp,-24
 1839d00:	dfc00515 	stw	ra,20(sp)
 1839d04:	df000415 	stw	fp,16(sp)
 1839d08:	df000404 	addi	fp,sp,16
 1839d0c:	e13ffd15 	stw	r4,-12(fp)
 1839d10:	e17ffe15 	stw	r5,-8(fp)
 1839d14:	3005883a 	mov	r2,r6
 1839d18:	e0bfff0d 	sth	r2,-4(fp)
  struct netconn *conn = (struct netconn *)arg;
 1839d1c:	e0bffd17 	ldw	r2,-12(fp)
 1839d20:	e0bffc15 	stw	r2,-16(fp)

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn) {
 1839d24:	e0bffc17 	ldw	r2,-16(fp)
 1839d28:	10002d26 	beq	r2,zero,1839de0 <sent_tcp+0xe4>
  if (conn->state == NETCONN_WRITE) {
 1839d2c:	e0bffc17 	ldw	r2,-16(fp)
 1839d30:	10800117 	ldw	r2,4(r2)
 1839d34:	10800058 	cmpnei	r2,r2,1
 1839d38:	1000031e 	bne	r2,zero,1839d48 <sent_tcp+0x4c>
    do_writemore(conn);
 1839d3c:	e13ffc17 	ldw	r4,-16(fp)
 1839d40:	183b5d80 	call	183b5d8 <do_writemore>
 1839d44:	00000606 	br	1839d60 <sent_tcp+0x64>
  } else if (conn->state == NETCONN_CLOSE) {
 1839d48:	e0bffc17 	ldw	r2,-16(fp)
 1839d4c:	10800117 	ldw	r2,4(r2)
 1839d50:	10800118 	cmpnei	r2,r2,4
 1839d54:	1000021e 	bne	r2,zero,1839d60 <sent_tcp+0x64>
    do_close_internal(conn);
 1839d58:	e13ffc17 	ldw	r4,-16(fp)
 1839d5c:	183a6a00 	call	183a6a0 <do_close_internal>
  }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 1839d60:	e0bffc17 	ldw	r2,-16(fp)
 1839d64:	10800217 	ldw	r2,8(r2)
 1839d68:	10001d26 	beq	r2,zero,1839de0 <sent_tcp+0xe4>
 1839d6c:	e0bffc17 	ldw	r2,-16(fp)
 1839d70:	10800217 	ldw	r2,8(r2)
 1839d74:	10801a8b 	ldhu	r2,106(r2)
 1839d78:	10bfffcc 	andi	r2,r2,65535
 1839d7c:	10816d70 	cmpltui	r2,r2,1461
 1839d80:	1000171e 	bne	r2,zero,1839de0 <sent_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 1839d84:	e0bffc17 	ldw	r2,-16(fp)
 1839d88:	10800217 	ldw	r2,8(r2)
 1839d8c:	10801b0b 	ldhu	r2,108(r2)
    do_close_internal(conn);
  }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 1839d90:	10bfffcc 	andi	r2,r2,65535
 1839d94:	10800128 	cmpgeui	r2,r2,4
 1839d98:	1000111e 	bne	r2,zero,1839de0 <sent_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 1839d9c:	e0bffc17 	ldw	r2,-16(fp)
 1839da0:	10c00903 	ldbu	r3,36(r2)
 1839da4:	00bffbc4 	movi	r2,-17
 1839da8:	1884703a 	and	r2,r3,r2
 1839dac:	1007883a 	mov	r3,r2
 1839db0:	e0bffc17 	ldw	r2,-16(fp)
 1839db4:	10c00905 	stb	r3,36(r2)
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 1839db8:	e0bffc17 	ldw	r2,-16(fp)
 1839dbc:	10800c17 	ldw	r2,48(r2)
 1839dc0:	10000726 	beq	r2,zero,1839de0 <sent_tcp+0xe4>
 1839dc4:	e0bffc17 	ldw	r2,-16(fp)
 1839dc8:	10800c17 	ldw	r2,48(r2)
 1839dcc:	e0ffff0b 	ldhu	r3,-4(fp)
 1839dd0:	180d883a 	mov	r6,r3
 1839dd4:	01400084 	movi	r5,2
 1839dd8:	e13ffc17 	ldw	r4,-16(fp)
 1839ddc:	103ee83a 	callr	r2
    }
  }
  
  return ERR_OK;
 1839de0:	0005883a 	mov	r2,zero
}
 1839de4:	e037883a 	mov	sp,fp
 1839de8:	dfc00117 	ldw	ra,4(sp)
 1839dec:	df000017 	ldw	fp,0(sp)
 1839df0:	dec00204 	addi	sp,sp,8
 1839df4:	f800283a 	ret

01839df8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 1839df8:	defff904 	addi	sp,sp,-28
 1839dfc:	dfc00615 	stw	ra,24(sp)
 1839e00:	df000515 	stw	fp,20(sp)
 1839e04:	df000504 	addi	fp,sp,20
 1839e08:	e13ffe15 	stw	r4,-8(fp)
 1839e0c:	2805883a 	mov	r2,r5
 1839e10:	e0bfff05 	stb	r2,-4(fp)
  struct netconn *conn;
  enum netconn_state old_state;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 1839e14:	e0bffe17 	ldw	r2,-8(fp)
 1839e18:	e0bffb15 	stw	r2,-20(fp)
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  conn->pcb.tcp = NULL;
 1839e1c:	e0bffb17 	ldw	r2,-20(fp)
 1839e20:	10000215 	stw	zero,8(r2)

  /* no check since this is always fatal! */
  SYS_ARCH_PROTECT(lev);
 1839e24:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839e28:	10000126 	beq	r2,zero,1839e30 <err_tcp+0x38>
 1839e2c:	1810f480 	call	1810f48 <vTaskEnterCritical>
  conn->last_err = err;
 1839e30:	e0bffb17 	ldw	r2,-20(fp)
 1839e34:	e0ffff03 	ldbu	r3,-4(fp)
 1839e38:	10c00305 	stb	r3,12(r2)
  SYS_ARCH_UNPROTECT(lev);
 1839e3c:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 1839e40:	10000126 	beq	r2,zero,1839e48 <err_tcp+0x50>
 1839e44:	1810f900 	call	1810f90 <vTaskExitCritical>

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 1839e48:	e0bffb17 	ldw	r2,-20(fp)
 1839e4c:	10800117 	ldw	r2,4(r2)
 1839e50:	e0bffc15 	stw	r2,-16(fp)
  conn->state = NETCONN_NONE;
 1839e54:	e0bffb17 	ldw	r2,-20(fp)
 1839e58:	10000115 	stw	zero,4(r2)

  /* Notify the user layer about a connection error. Used to signal
     select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 1839e5c:	e0bffb17 	ldw	r2,-20(fp)
 1839e60:	10800c17 	ldw	r2,48(r2)
 1839e64:	10000626 	beq	r2,zero,1839e80 <err_tcp+0x88>
 1839e68:	e0bffb17 	ldw	r2,-20(fp)
 1839e6c:	10800c17 	ldw	r2,48(r2)
 1839e70:	000d883a 	mov	r6,zero
 1839e74:	01400104 	movi	r5,4
 1839e78:	e13ffb17 	ldw	r4,-20(fp)
 1839e7c:	103ee83a 	callr	r2
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 1839e80:	e0bffb17 	ldw	r2,-20(fp)
 1839e84:	10800c17 	ldw	r2,48(r2)
 1839e88:	10000626 	beq	r2,zero,1839ea4 <err_tcp+0xac>
 1839e8c:	e0bffb17 	ldw	r2,-20(fp)
 1839e90:	10800c17 	ldw	r2,48(r2)
 1839e94:	000d883a 	mov	r6,zero
 1839e98:	000b883a 	mov	r5,zero
 1839e9c:	e13ffb17 	ldw	r4,-20(fp)
 1839ea0:	103ee83a 	callr	r2
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 1839ea4:	e0bffb17 	ldw	r2,-20(fp)
 1839ea8:	10800c17 	ldw	r2,48(r2)
 1839eac:	10000626 	beq	r2,zero,1839ec8 <err_tcp+0xd0>
 1839eb0:	e0bffb17 	ldw	r2,-20(fp)
 1839eb4:	10800c17 	ldw	r2,48(r2)
 1839eb8:	000d883a 	mov	r6,zero
 1839ebc:	01400084 	movi	r5,2
 1839ec0:	e13ffb17 	ldw	r4,-20(fp)
 1839ec4:	103ee83a 	callr	r2

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 1839ec8:	e0bffb17 	ldw	r2,-20(fp)
 1839ecc:	10800517 	ldw	r2,20(r2)
 1839ed0:	10000526 	beq	r2,zero,1839ee8 <err_tcp+0xf0>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 1839ed4:	e0bffb17 	ldw	r2,-20(fp)
 1839ed8:	10800504 	addi	r2,r2,20
 1839edc:	000b883a 	mov	r5,zero
 1839ee0:	1009883a 	mov	r4,r2
 1839ee4:	181542c0 	call	181542c <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 1839ee8:	e0bffb17 	ldw	r2,-20(fp)
 1839eec:	10800617 	ldw	r2,24(r2)
 1839ef0:	10000526 	beq	r2,zero,1839f08 <err_tcp+0x110>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 1839ef4:	e0bffb17 	ldw	r2,-20(fp)
 1839ef8:	10800604 	addi	r2,r2,24
 1839efc:	000b883a 	mov	r5,zero
 1839f00:	1009883a 	mov	r4,r2
 1839f04:	181542c0 	call	181542c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 1839f08:	e0bffc17 	ldw	r2,-16(fp)
 1839f0c:	10800060 	cmpeqi	r2,r2,1
 1839f10:	1000061e 	bne	r2,zero,1839f2c <err_tcp+0x134>
 1839f14:	e0bffc17 	ldw	r2,-16(fp)
 1839f18:	10800120 	cmpeqi	r2,r2,4
 1839f1c:	1000031e 	bne	r2,zero,1839f2c <err_tcp+0x134>
 1839f20:	e0bffc17 	ldw	r2,-16(fp)
 1839f24:	108000d8 	cmpnei	r2,r2,3
 1839f28:	10001a1e 	bne	r2,zero,1839f94 <err_tcp+0x19c>
      (old_state == NETCONN_CONNECT)) {
    /* calling do_writemore/do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 1839f2c:	e0bffb17 	ldw	r2,-20(fp)
 1839f30:	10800903 	ldbu	r2,36(r2)
 1839f34:	10803fcc 	andi	r2,r2,255
 1839f38:	1080010c 	andi	r2,r2,4
 1839f3c:	1004c03a 	cmpne	r2,r2,zero
 1839f40:	10803fcc 	andi	r2,r2,255
 1839f44:	e0bffd15 	stw	r2,-12(fp)
    SET_NONBLOCKING_CONNECT(conn, 0);
 1839f48:	e0bffb17 	ldw	r2,-20(fp)
 1839f4c:	10c00903 	ldbu	r3,36(r2)
 1839f50:	00bffec4 	movi	r2,-5
 1839f54:	1884703a 	and	r2,r3,r2
 1839f58:	1007883a 	mov	r3,r2
 1839f5c:	e0bffb17 	ldw	r2,-20(fp)
 1839f60:	10c00905 	stb	r3,36(r2)

    if (!was_nonblocking_connect) {
 1839f64:	e0bffd17 	ldw	r2,-12(fp)
 1839f68:	10000a1e 	bne	r2,zero,1839f94 <err_tcp+0x19c>
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
      conn->current_msg->err = err;
 1839f6c:	e0bffb17 	ldw	r2,-20(fp)
 1839f70:	10800b17 	ldw	r2,44(r2)
 1839f74:	e0ffff03 	ldbu	r3,-4(fp)
 1839f78:	10c00105 	stb	r3,4(r2)
      conn->current_msg = NULL;
 1839f7c:	e0bffb17 	ldw	r2,-20(fp)
 1839f80:	10000b15 	stw	zero,44(r2)
      /* wake up the waiting task */
      sys_sem_signal(&conn->op_completed);
 1839f84:	e0bffb17 	ldw	r2,-20(fp)
 1839f88:	10800404 	addi	r2,r2,16
 1839f8c:	1009883a 	mov	r4,r2
 1839f90:	1814fcc0 	call	1814fcc <sys_sem_signal>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  }
}
 1839f94:	0001883a 	nop
 1839f98:	e037883a 	mov	sp,fp
 1839f9c:	dfc00117 	ldw	ra,4(sp)
 1839fa0:	df000017 	ldw	fp,0(sp)
 1839fa4:	dec00204 	addi	sp,sp,8
 1839fa8:	f800283a 	ret

01839fac <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 1839fac:	defffc04 	addi	sp,sp,-16
 1839fb0:	dfc00315 	stw	ra,12(sp)
 1839fb4:	df000215 	stw	fp,8(sp)
 1839fb8:	df000204 	addi	fp,sp,8
 1839fbc:	e13fff15 	stw	r4,-4(fp)
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 1839fc0:	e0bfff17 	ldw	r2,-4(fp)
 1839fc4:	10800217 	ldw	r2,8(r2)
 1839fc8:	e0bffe15 	stw	r2,-8(fp)
  tcp_arg(pcb, conn);
 1839fcc:	e17fff17 	ldw	r5,-4(fp)
 1839fd0:	e13ffe17 	ldw	r4,-8(fp)
 1839fd4:	181cfdc0 	call	181cfdc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 1839fd8:	01406134 	movhi	r5,388
 1839fdc:	2966b004 	addi	r5,r5,-25920
 1839fe0:	e13ffe17 	ldw	r4,-8(fp)
 1839fe4:	181d0100 	call	181d010 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 1839fe8:	01406134 	movhi	r5,388
 1839fec:	29673f04 	addi	r5,r5,-25348
 1839ff0:	e13ffe17 	ldw	r4,-8(fp)
 1839ff4:	181d0440 	call	181d044 <tcp_sent>
  tcp_poll(pcb, poll_tcp, 4);
 1839ff8:	01800104 	movi	r6,4
 1839ffc:	01406134 	movhi	r5,388
 183a000:	29670004 	addi	r5,r5,-25600
 183a004:	e13ffe17 	ldw	r4,-8(fp)
 183a008:	181d0e00 	call	181d0e0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 183a00c:	01406134 	movhi	r5,388
 183a010:	29677e04 	addi	r5,r5,-25096
 183a014:	e13ffe17 	ldw	r4,-8(fp)
 183a018:	181d0780 	call	181d078 <tcp_err>
}
 183a01c:	0001883a 	nop
 183a020:	e037883a 	mov	sp,fp
 183a024:	dfc00117 	ldw	ra,4(sp)
 183a028:	df000017 	ldw	fp,0(sp)
 183a02c:	dec00204 	addi	sp,sp,8
 183a030:	f800283a 	ret

0183a034 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 183a034:	defff804 	addi	sp,sp,-32
 183a038:	dfc00715 	stw	ra,28(sp)
 183a03c:	df000615 	stw	fp,24(sp)
 183a040:	df000604 	addi	fp,sp,24
 183a044:	e13ffd15 	stw	r4,-12(fp)
 183a048:	e17ffe15 	stw	r5,-8(fp)
 183a04c:	3005883a 	mov	r2,r6
 183a050:	e0bfff05 	stb	r2,-4(fp)
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 183a054:	e0bffd17 	ldw	r2,-12(fp)
 183a058:	e0bffa15 	stw	r2,-24(fp)

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
 183a05c:	e0bffa17 	ldw	r2,-24(fp)
 183a060:	10800617 	ldw	r2,24(r2)
 183a064:	1000021e 	bne	r2,zero,183a070 <accept_function+0x3c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 183a068:	00bffe84 	movi	r2,-6
 183a06c:	00004606 	br	183a188 <accept_function+0x154>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 183a070:	e0bffa17 	ldw	r2,-24(fp)
 183a074:	10c00017 	ldw	r3,0(r2)
 183a078:	e0bffa17 	ldw	r2,-24(fp)
 183a07c:	10800c17 	ldw	r2,48(r2)
 183a080:	100b883a 	mov	r5,r2
 183a084:	1809883a 	mov	r4,r3
 183a088:	183a3a00 	call	183a3a0 <netconn_alloc>
 183a08c:	e0bffb15 	stw	r2,-20(fp)
  if (newconn == NULL) {
 183a090:	e0bffb17 	ldw	r2,-20(fp)
 183a094:	1000021e 	bne	r2,zero,183a0a0 <accept_function+0x6c>
    return ERR_MEM;
 183a098:	00bfffc4 	movi	r2,-1
 183a09c:	00003a06 	br	183a188 <accept_function+0x154>
  }
  newconn->pcb.tcp = newpcb;
 183a0a0:	e0bffb17 	ldw	r2,-20(fp)
 183a0a4:	e0fffe17 	ldw	r3,-8(fp)
 183a0a8:	10c00215 	stw	r3,8(r2)
  setup_tcp(newconn);
 183a0ac:	e13ffb17 	ldw	r4,-20(fp)
 183a0b0:	1839fac0 	call	1839fac <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 183a0b4:	e0bffb17 	ldw	r2,-20(fp)
 183a0b8:	e0ffff03 	ldbu	r3,-4(fp)
 183a0bc:	10c00305 	stb	r3,12(r2)

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 183a0c0:	e0bffa17 	ldw	r2,-24(fp)
 183a0c4:	10800604 	addi	r2,r2,24
 183a0c8:	e17ffb17 	ldw	r5,-20(fp)
 183a0cc:	1009883a 	mov	r4,r2
 183a0d0:	181542c0 	call	181542c <sys_mbox_trypost>
 183a0d4:	10803fcc 	andi	r2,r2,255
 183a0d8:	1080201c 	xori	r2,r2,128
 183a0dc:	10bfe004 	addi	r2,r2,-128
 183a0e0:	10001f26 	beq	r2,zero,183a160 <accept_function+0x12c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 183a0e4:	e0bffb17 	ldw	r2,-20(fp)
 183a0e8:	10800217 	ldw	r2,8(r2)
 183a0ec:	e0bffc15 	stw	r2,-16(fp)
    tcp_arg(pcb, NULL);
 183a0f0:	000b883a 	mov	r5,zero
 183a0f4:	e13ffc17 	ldw	r4,-16(fp)
 183a0f8:	181cfdc0 	call	181cfdc <tcp_arg>
    tcp_recv(pcb, NULL);
 183a0fc:	000b883a 	mov	r5,zero
 183a100:	e13ffc17 	ldw	r4,-16(fp)
 183a104:	181d0100 	call	181d010 <tcp_recv>
    tcp_sent(pcb, NULL);
 183a108:	000b883a 	mov	r5,zero
 183a10c:	e13ffc17 	ldw	r4,-16(fp)
 183a110:	181d0440 	call	181d044 <tcp_sent>
    tcp_poll(pcb, NULL, 4);
 183a114:	01800104 	movi	r6,4
 183a118:	000b883a 	mov	r5,zero
 183a11c:	e13ffc17 	ldw	r4,-16(fp)
 183a120:	181d0e00 	call	181d0e0 <tcp_poll>
    tcp_err(pcb, NULL);
 183a124:	000b883a 	mov	r5,zero
 183a128:	e13ffc17 	ldw	r4,-16(fp)
 183a12c:	181d0780 	call	181d078 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 183a130:	e0bffb17 	ldw	r2,-20(fp)
 183a134:	10000215 	stw	zero,8(r2)
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 183a138:	e0bffb17 	ldw	r2,-20(fp)
 183a13c:	10800504 	addi	r2,r2,20
 183a140:	1009883a 	mov	r4,r2
 183a144:	181536c0 	call	181536c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 183a148:	e0bffb17 	ldw	r2,-20(fp)
 183a14c:	10000515 	stw	zero,20(r2)
    netconn_free(newconn);
 183a150:	e13ffb17 	ldw	r4,-20(fp)
 183a154:	183a4d80 	call	183a4d8 <netconn_free>
    return ERR_MEM;
 183a158:	00bfffc4 	movi	r2,-1
 183a15c:	00000a06 	br	183a188 <accept_function+0x154>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 183a160:	e0bffa17 	ldw	r2,-24(fp)
 183a164:	10800c17 	ldw	r2,48(r2)
 183a168:	10000626 	beq	r2,zero,183a184 <accept_function+0x150>
 183a16c:	e0bffa17 	ldw	r2,-24(fp)
 183a170:	10800c17 	ldw	r2,48(r2)
 183a174:	000d883a 	mov	r6,zero
 183a178:	000b883a 	mov	r5,zero
 183a17c:	e13ffa17 	ldw	r4,-24(fp)
 183a180:	103ee83a 	callr	r2
  }

  return ERR_OK;
 183a184:	0005883a 	mov	r2,zero
}
 183a188:	e037883a 	mov	sp,fp
 183a18c:	dfc00117 	ldw	ra,4(sp)
 183a190:	df000017 	ldw	fp,0(sp)
 183a194:	dec00204 	addi	sp,sp,8
 183a198:	f800283a 	ret

0183a19c <pcb_new>:
 * @param msg the api_msg_msg describing the connection type
 * @return msg->conn->err, but the return value is currently ignored
 */
static void
pcb_new(struct api_msg_msg *msg)
{
 183a19c:	defffc04 	addi	sp,sp,-16
 183a1a0:	dfc00315 	stw	ra,12(sp)
 183a1a4:	df000215 	stw	fp,8(sp)
 183a1a8:	dc000115 	stw	r16,4(sp)
 183a1ac:	df000204 	addi	fp,sp,8
 183a1b0:	e13ffe15 	stw	r4,-8(fp)
  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 183a1b4:	e0bffe17 	ldw	r2,-8(fp)
 183a1b8:	10800017 	ldw	r2,0(r2)
 183a1bc:	10800017 	ldw	r2,0(r2)
 183a1c0:	10803c0c 	andi	r2,r2,240
 183a1c4:	10c00820 	cmpeqi	r3,r2,32
 183a1c8:	1800201e 	bne	r3,zero,183a24c <pcb_new+0xb0>
 183a1cc:	10c01020 	cmpeqi	r3,r2,64
 183a1d0:	1800031e 	bne	r3,zero,183a1e0 <pcb_new+0x44>
 183a1d4:	10800420 	cmpeqi	r2,r2,16
 183a1d8:	10003d1e 	bne	r2,zero,183a2d0 <pcb_new+0x134>
 183a1dc:	00004d06 	br	183a314 <pcb_new+0x178>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new(msg->msg.n.proto);
 183a1e0:	e0bffe17 	ldw	r2,-8(fp)
 183a1e4:	14000017 	ldw	r16,0(r2)
 183a1e8:	e0bffe17 	ldw	r2,-8(fp)
 183a1ec:	10800203 	ldbu	r2,8(r2)
 183a1f0:	10803fcc 	andi	r2,r2,255
 183a1f4:	1009883a 	mov	r4,r2
 183a1f8:	18343580 	call	1834358 <raw_new>
 183a1fc:	80800215 	stw	r2,8(r16)
    if(msg->conn->pcb.raw == NULL) {
 183a200:	e0bffe17 	ldw	r2,-8(fp)
 183a204:	10800017 	ldw	r2,0(r2)
 183a208:	10800217 	ldw	r2,8(r2)
 183a20c:	1000041e 	bne	r2,zero,183a220 <pcb_new+0x84>
      msg->err = ERR_MEM;
 183a210:	e0bffe17 	ldw	r2,-8(fp)
 183a214:	00ffffc4 	movi	r3,-1
 183a218:	10c00105 	stb	r3,4(r2)
      break;
 183a21c:	00004106 	br	183a324 <pcb_new+0x188>
    }
    raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
 183a220:	e0bffe17 	ldw	r2,-8(fp)
 183a224:	10800017 	ldw	r2,0(r2)
 183a228:	10c00217 	ldw	r3,8(r2)
 183a22c:	e0bffe17 	ldw	r2,-8(fp)
 183a230:	10800017 	ldw	r2,0(r2)
 183a234:	100d883a 	mov	r6,r2
 183a238:	01406134 	movhi	r5,388
 183a23c:	29660104 	addi	r5,r5,-26620
 183a240:	1809883a 	mov	r4,r3
 183a244:	18340ac0 	call	18340ac <raw_recv>
    break;
 183a248:	00003606 	br	183a324 <pcb_new+0x188>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new();
 183a24c:	e0bffe17 	ldw	r2,-8(fp)
 183a250:	14000017 	ldw	r16,0(r2)
 183a254:	18221cc0 	call	18221cc <udp_new>
 183a258:	80800215 	stw	r2,8(r16)
    if(msg->conn->pcb.udp == NULL) {
 183a25c:	e0bffe17 	ldw	r2,-8(fp)
 183a260:	10800017 	ldw	r2,0(r2)
 183a264:	10800217 	ldw	r2,8(r2)
 183a268:	1000041e 	bne	r2,zero,183a27c <pcb_new+0xe0>
      msg->err = ERR_MEM;
 183a26c:	e0bffe17 	ldw	r2,-8(fp)
 183a270:	00ffffc4 	movi	r3,-1
 183a274:	10c00105 	stb	r3,4(r2)
      break;
 183a278:	00002a06 	br	183a324 <pcb_new+0x188>
#if LWIP_UDPLITE
    if (msg->conn->type==NETCONN_UDPLITE) {
      udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
    }
#endif /* LWIP_UDPLITE */
    if (msg->conn->type==NETCONN_UDPNOCHKSUM) {
 183a27c:	e0bffe17 	ldw	r2,-8(fp)
 183a280:	10800017 	ldw	r2,0(r2)
 183a284:	10800017 	ldw	r2,0(r2)
 183a288:	10800898 	cmpnei	r2,r2,34
 183a28c:	1000051e 	bne	r2,zero,183a2a4 <pcb_new+0x108>
      udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 183a290:	e0bffe17 	ldw	r2,-8(fp)
 183a294:	10800017 	ldw	r2,0(r2)
 183a298:	10800217 	ldw	r2,8(r2)
 183a29c:	00c00044 	movi	r3,1
 183a2a0:	10c00405 	stb	r3,16(r2)
    }
    udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 183a2a4:	e0bffe17 	ldw	r2,-8(fp)
 183a2a8:	10800017 	ldw	r2,0(r2)
 183a2ac:	10c00217 	ldw	r3,8(r2)
 183a2b0:	e0bffe17 	ldw	r2,-8(fp)
 183a2b4:	10800017 	ldw	r2,0(r2)
 183a2b8:	100d883a 	mov	r6,r2
 183a2bc:	01406134 	movhi	r5,388
 183a2c0:	29666104 	addi	r5,r5,-26236
 183a2c4:	1809883a 	mov	r4,r3
 183a2c8:	18220ec0 	call	18220ec <udp_recv>
    break;
 183a2cc:	00001506 	br	183a324 <pcb_new+0x188>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new();
 183a2d0:	e0bffe17 	ldw	r2,-8(fp)
 183a2d4:	14000017 	ldw	r16,0(r2)
 183a2d8:	181cfb00 	call	181cfb0 <tcp_new>
 183a2dc:	80800215 	stw	r2,8(r16)
    if(msg->conn->pcb.tcp == NULL) {
 183a2e0:	e0bffe17 	ldw	r2,-8(fp)
 183a2e4:	10800017 	ldw	r2,0(r2)
 183a2e8:	10800217 	ldw	r2,8(r2)
 183a2ec:	1000041e 	bne	r2,zero,183a300 <pcb_new+0x164>
      msg->err = ERR_MEM;
 183a2f0:	e0bffe17 	ldw	r2,-8(fp)
 183a2f4:	00ffffc4 	movi	r3,-1
 183a2f8:	10c00105 	stb	r3,4(r2)
      break;
 183a2fc:	00000906 	br	183a324 <pcb_new+0x188>
    }
    setup_tcp(msg->conn);
 183a300:	e0bffe17 	ldw	r2,-8(fp)
 183a304:	10800017 	ldw	r2,0(r2)
 183a308:	1009883a 	mov	r4,r2
 183a30c:	1839fac0 	call	1839fac <setup_tcp>
    break;
 183a310:	00000406 	br	183a324 <pcb_new+0x188>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 183a314:	e0bffe17 	ldw	r2,-8(fp)
 183a318:	00fffe84 	movi	r3,-6
 183a31c:	10c00105 	stb	r3,4(r2)
    break;
 183a320:	0001883a 	nop
  }
}
 183a324:	0001883a 	nop
 183a328:	e6ffff04 	addi	sp,fp,-4
 183a32c:	dfc00217 	ldw	ra,8(sp)
 183a330:	df000117 	ldw	fp,4(sp)
 183a334:	dc000017 	ldw	r16,0(sp)
 183a338:	dec00304 	addi	sp,sp,12
 183a33c:	f800283a 	ret

0183a340 <do_newconn>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
void
do_newconn(struct api_msg_msg *msg)
{
 183a340:	defffd04 	addi	sp,sp,-12
 183a344:	dfc00215 	stw	ra,8(sp)
 183a348:	df000115 	stw	fp,4(sp)
 183a34c:	df000104 	addi	fp,sp,4
 183a350:	e13fff15 	stw	r4,-4(fp)
  msg->err = ERR_OK;
 183a354:	e0bfff17 	ldw	r2,-4(fp)
 183a358:	10000105 	stb	zero,4(r2)
  if(msg->conn->pcb.tcp == NULL) {
 183a35c:	e0bfff17 	ldw	r2,-4(fp)
 183a360:	10800017 	ldw	r2,0(r2)
 183a364:	10800217 	ldw	r2,8(r2)
 183a368:	1000021e 	bne	r2,zero,183a374 <do_newconn+0x34>
    pcb_new(msg);
 183a36c:	e13fff17 	ldw	r4,-4(fp)
 183a370:	183a19c0 	call	183a19c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 183a374:	e0bfff17 	ldw	r2,-4(fp)
 183a378:	10800017 	ldw	r2,0(r2)
 183a37c:	10800404 	addi	r2,r2,16
 183a380:	1009883a 	mov	r4,r2
 183a384:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183a388:	0001883a 	nop
 183a38c:	e037883a 	mov	sp,fp
 183a390:	dfc00117 	ldw	ra,4(sp)
 183a394:	df000017 	ldw	fp,0(sp)
 183a398:	dec00204 	addi	sp,sp,8
 183a39c:	f800283a 	ret

0183a3a0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 183a3a0:	defffa04 	addi	sp,sp,-24
 183a3a4:	dfc00515 	stw	ra,20(sp)
 183a3a8:	df000415 	stw	fp,16(sp)
 183a3ac:	df000404 	addi	fp,sp,16
 183a3b0:	e13ffe15 	stw	r4,-8(fp)
 183a3b4:	e17fff15 	stw	r5,-4(fp)
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 183a3b8:	00806134 	movhi	r2,388
 183a3bc:	108bcc84 	addi	r2,r2,12082
 183a3c0:	1080040b 	ldhu	r2,16(r2)
 183a3c4:	10bfffcc 	andi	r2,r2,65535
 183a3c8:	1009883a 	mov	r4,r2
 183a3cc:	183c5000 	call	183c500 <malloc>
 183a3d0:	e0bffc15 	stw	r2,-16(fp)
  if (conn == NULL) {
 183a3d4:	e0bffc17 	ldw	r2,-16(fp)
 183a3d8:	1000021e 	bne	r2,zero,183a3e4 <netconn_alloc+0x44>
    return NULL;
 183a3dc:	0005883a 	mov	r2,zero
 183a3e0:	00003806 	br	183a4c4 <netconn_alloc+0x124>
  }

  conn->last_err = ERR_OK;
 183a3e4:	e0bffc17 	ldw	r2,-16(fp)
 183a3e8:	10000305 	stb	zero,12(r2)
  conn->type = t;
 183a3ec:	e0bffc17 	ldw	r2,-16(fp)
 183a3f0:	e0fffe17 	ldw	r3,-8(fp)
 183a3f4:	10c00015 	stw	r3,0(r2)
  conn->pcb.tcp = NULL;
 183a3f8:	e0bffc17 	ldw	r2,-16(fp)
 183a3fc:	10000215 	stw	zero,8(r2)

#if (DEFAULT_RAW_RECVMBOX_SIZE == DEFAULT_UDP_RECVMBOX_SIZE) && \
    (DEFAULT_RAW_RECVMBOX_SIZE == DEFAULT_TCP_RECVMBOX_SIZE)
  size = DEFAULT_RAW_RECVMBOX_SIZE;
 183a400:	00840004 	movi	r2,4096
 183a404:	e0bffd15 	stw	r2,-12(fp)
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
    goto free_and_return;
  }
#endif

  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 183a408:	e0bffc17 	ldw	r2,-16(fp)
 183a40c:	10800404 	addi	r2,r2,16
 183a410:	000b883a 	mov	r5,zero
 183a414:	1009883a 	mov	r4,r2
 183a418:	1814e900 	call	1814e90 <sys_sem_new>
 183a41c:	10803fcc 	andi	r2,r2,255
 183a420:	1080201c 	xori	r2,r2,128
 183a424:	10bfe004 	addi	r2,r2,-128
 183a428:	1000221e 	bne	r2,zero,183a4b4 <netconn_alloc+0x114>
    goto free_and_return;
  }
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 183a42c:	e0bffc17 	ldw	r2,-16(fp)
 183a430:	10800504 	addi	r2,r2,20
 183a434:	e17ffd17 	ldw	r5,-12(fp)
 183a438:	1009883a 	mov	r4,r2
 183a43c:	181529c0 	call	181529c <sys_mbox_new>
 183a440:	10803fcc 	andi	r2,r2,255
 183a444:	1080201c 	xori	r2,r2,128
 183a448:	10bfe004 	addi	r2,r2,-128
 183a44c:	10000526 	beq	r2,zero,183a464 <netconn_alloc+0xc4>
    sys_sem_free(&conn->op_completed);
 183a450:	e0bffc17 	ldw	r2,-16(fp)
 183a454:	10800404 	addi	r2,r2,16
 183a458:	1009883a 	mov	r4,r2
 183a45c:	1814f740 	call	1814f74 <sys_sem_free>
    goto free_and_return;
 183a460:	00001506 	br	183a4b8 <netconn_alloc+0x118>
  }

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 183a464:	e0bffc17 	ldw	r2,-16(fp)
 183a468:	10000615 	stw	zero,24(r2)
#endif
  conn->state        = NETCONN_NONE;
 183a46c:	e0bffc17 	ldw	r2,-16(fp)
 183a470:	10000115 	stw	zero,4(r2)
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 183a474:	e0bffc17 	ldw	r2,-16(fp)
 183a478:	00ffffc4 	movi	r3,-1
 183a47c:	10c00715 	stw	r3,28(r2)
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 183a480:	e0bffc17 	ldw	r2,-16(fp)
 183a484:	e0ffff17 	ldw	r3,-4(fp)
 183a488:	10c00c15 	stw	r3,48(r2)
#if LWIP_TCP
  conn->current_msg  = NULL;
 183a48c:	e0bffc17 	ldw	r2,-16(fp)
 183a490:	10000b15 	stw	zero,44(r2)
  conn->write_offset = 0;
 183a494:	e0bffc17 	ldw	r2,-16(fp)
 183a498:	10000a15 	stw	zero,40(r2)
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 183a49c:	e0bffc17 	ldw	r2,-16(fp)
 183a4a0:	10000815 	stw	zero,32(r2)
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
  conn->flags = 0;
 183a4a4:	e0bffc17 	ldw	r2,-16(fp)
 183a4a8:	10000905 	stb	zero,36(r2)
  return conn;
 183a4ac:	e0bffc17 	ldw	r2,-16(fp)
 183a4b0:	00000406 	br	183a4c4 <netconn_alloc+0x124>
    goto free_and_return;
  }
#endif

  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
    goto free_and_return;
 183a4b4:	0001883a 	nop
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
  conn->flags = 0;
  return conn;
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 183a4b8:	e13ffc17 	ldw	r4,-16(fp)
 183a4bc:	183c5140 	call	183c514 <free>
  return NULL;
 183a4c0:	0005883a 	mov	r2,zero
}
 183a4c4:	e037883a 	mov	sp,fp
 183a4c8:	dfc00117 	ldw	ra,4(sp)
 183a4cc:	df000017 	ldw	fp,0(sp)
 183a4d0:	dec00204 	addi	sp,sp,8
 183a4d4:	f800283a 	ret

0183a4d8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 183a4d8:	defffd04 	addi	sp,sp,-12
 183a4dc:	dfc00215 	stw	ra,8(sp)
 183a4e0:	df000115 	stw	fp,4(sp)
 183a4e4:	df000104 	addi	fp,sp,4
 183a4e8:	e13fff15 	stw	r4,-4(fp)
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

  sys_sem_free(&conn->op_completed);
 183a4ec:	e0bfff17 	ldw	r2,-4(fp)
 183a4f0:	10800404 	addi	r2,r2,16
 183a4f4:	1009883a 	mov	r4,r2
 183a4f8:	1814f740 	call	1814f74 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 183a4fc:	e0bfff17 	ldw	r2,-4(fp)
 183a500:	10000415 	stw	zero,16(r2)

  memp_free(MEMP_NETCONN, conn);
 183a504:	e13fff17 	ldw	r4,-4(fp)
 183a508:	183c5140 	call	183c514 <free>
}
 183a50c:	0001883a 	nop
 183a510:	e037883a 	mov	sp,fp
 183a514:	dfc00117 	ldw	ra,4(sp)
 183a518:	df000017 	ldw	fp,0(sp)
 183a51c:	dec00204 	addi	sp,sp,8
 183a520:	f800283a 	ret

0183a524 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 183a524:	defffa04 	addi	sp,sp,-24
 183a528:	dfc00515 	stw	ra,20(sp)
 183a52c:	df000415 	stw	fp,16(sp)
 183a530:	df000404 	addi	fp,sp,16
 183a534:	e13fff15 	stw	r4,-4(fp)
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 183a538:	e0bfff17 	ldw	r2,-4(fp)
 183a53c:	10800517 	ldw	r2,20(r2)
 183a540:	10002826 	beq	r2,zero,183a5e4 <netconn_drain+0xc0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 183a544:	00001906 	br	183a5ac <netconn_drain+0x88>
#if LWIP_TCP
      if (conn->type == NETCONN_TCP) {
 183a548:	e0bfff17 	ldw	r2,-4(fp)
 183a54c:	10800017 	ldw	r2,0(r2)
 183a550:	10800418 	cmpnei	r2,r2,16
 183a554:	1000121e 	bne	r2,zero,183a5a0 <netconn_drain+0x7c>
        if(mem != NULL) {
 183a558:	e0bffe17 	ldw	r2,-8(fp)
 183a55c:	10001326 	beq	r2,zero,183a5ac <netconn_drain+0x88>
          p = (struct pbuf*)mem;
 183a560:	e0bffe17 	ldw	r2,-8(fp)
 183a564:	e0bffc15 	stw	r2,-16(fp)
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 183a568:	e0bfff17 	ldw	r2,-4(fp)
 183a56c:	10800217 	ldw	r2,8(r2)
 183a570:	10000826 	beq	r2,zero,183a594 <netconn_drain+0x70>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 183a574:	e0bfff17 	ldw	r2,-4(fp)
 183a578:	10c00217 	ldw	r3,8(r2)
 183a57c:	e0bffc17 	ldw	r2,-16(fp)
 183a580:	1080020b 	ldhu	r2,8(r2)
 183a584:	10bfffcc 	andi	r2,r2,65535
 183a588:	100b883a 	mov	r5,r2
 183a58c:	1809883a 	mov	r4,r3
 183a590:	181bbf40 	call	181bbf4 <tcp_recved>
          }
          pbuf_free(p);
 183a594:	e13ffc17 	ldw	r4,-16(fp)
 183a598:	181a22c0 	call	181a22c <pbuf_free>
 183a59c:	00000306 	br	183a5ac <netconn_drain+0x88>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 183a5a0:	e0bffe17 	ldw	r2,-8(fp)
 183a5a4:	1009883a 	mov	r4,r2
 183a5a8:	183bd840 	call	183bd84 <netbuf_delete>

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 183a5ac:	e0bfff17 	ldw	r2,-4(fp)
 183a5b0:	10800504 	addi	r2,r2,20
 183a5b4:	e0fffe04 	addi	r3,fp,-8
 183a5b8:	180b883a 	mov	r5,r3
 183a5bc:	1009883a 	mov	r4,r2
 183a5c0:	181558c0 	call	181558c <sys_arch_mbox_tryfetch>
 183a5c4:	10bfffd8 	cmpnei	r2,r2,-1
 183a5c8:	103fdf1e 	bne	r2,zero,183a548 <__ram_exceptions_end+0xff82a258>
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
      }
    }
    sys_mbox_free(&conn->recvmbox);
 183a5cc:	e0bfff17 	ldw	r2,-4(fp)
 183a5d0:	10800504 	addi	r2,r2,20
 183a5d4:	1009883a 	mov	r4,r2
 183a5d8:	181536c0 	call	181536c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 183a5dc:	e0bfff17 	ldw	r2,-4(fp)
 183a5e0:	10000515 	stw	zero,20(r2)
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 183a5e4:	e0bfff17 	ldw	r2,-4(fp)
 183a5e8:	10800617 	ldw	r2,24(r2)
 183a5ec:	10002626 	beq	r2,zero,183a688 <netconn_drain+0x164>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 183a5f0:	00001706 	br	183a650 <netconn_drain+0x12c>
      struct netconn *newconn = (struct netconn *)mem;
 183a5f4:	e0bffe17 	ldw	r2,-8(fp)
 183a5f8:	e0bffd15 	stw	r2,-12(fp)
      /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
      /* pcb might be set to NULL already by err_tcp() */
      if (conn->pcb.tcp != NULL) {
 183a5fc:	e0bfff17 	ldw	r2,-4(fp)
 183a600:	10800217 	ldw	r2,8(r2)
 183a604:	10000526 	beq	r2,zero,183a61c <netconn_drain+0xf8>
        tcp_accepted(conn->pcb.tcp);
 183a608:	e0bfff17 	ldw	r2,-4(fp)
 183a60c:	10800217 	ldw	r2,8(r2)
 183a610:	10c00843 	ldbu	r3,33(r2)
 183a614:	18ffffc4 	addi	r3,r3,-1
 183a618:	10c00845 	stb	r3,33(r2)
      }
      /* drain recvmbox */
      netconn_drain(newconn);
 183a61c:	e13ffd17 	ldw	r4,-12(fp)
 183a620:	183a5240 	call	183a524 <netconn_drain>
      if (newconn->pcb.tcp != NULL) {
 183a624:	e0bffd17 	ldw	r2,-12(fp)
 183a628:	10800217 	ldw	r2,8(r2)
 183a62c:	10000626 	beq	r2,zero,183a648 <netconn_drain+0x124>
        tcp_abort(newconn->pcb.tcp);
 183a630:	e0bffd17 	ldw	r2,-12(fp)
 183a634:	10800217 	ldw	r2,8(r2)
 183a638:	1009883a 	mov	r4,r2
 183a63c:	181b6580 	call	181b658 <tcp_abort>
        newconn->pcb.tcp = NULL;
 183a640:	e0bffd17 	ldw	r2,-12(fp)
 183a644:	10000215 	stw	zero,8(r2)
      }
      netconn_free(newconn);
 183a648:	e13ffd17 	ldw	r4,-12(fp)
 183a64c:	183a4d80 	call	183a4d8 <netconn_free>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 183a650:	e0bfff17 	ldw	r2,-4(fp)
 183a654:	10800604 	addi	r2,r2,24
 183a658:	e0fffe04 	addi	r3,fp,-8
 183a65c:	180b883a 	mov	r5,r3
 183a660:	1009883a 	mov	r4,r2
 183a664:	181558c0 	call	181558c <sys_arch_mbox_tryfetch>
 183a668:	10bfffd8 	cmpnei	r2,r2,-1
 183a66c:	103fe11e 	bne	r2,zero,183a5f4 <__ram_exceptions_end+0xff82a304>
        tcp_abort(newconn->pcb.tcp);
        newconn->pcb.tcp = NULL;
      }
      netconn_free(newconn);
    }
    sys_mbox_free(&conn->acceptmbox);
 183a670:	e0bfff17 	ldw	r2,-4(fp)
 183a674:	10800604 	addi	r2,r2,24
 183a678:	1009883a 	mov	r4,r2
 183a67c:	181536c0 	call	181536c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 183a680:	e0bfff17 	ldw	r2,-4(fp)
 183a684:	10000615 	stw	zero,24(r2)
  }
#endif /* LWIP_TCP */
}
 183a688:	0001883a 	nop
 183a68c:	e037883a 	mov	sp,fp
 183a690:	dfc00117 	ldw	ra,4(sp)
 183a694:	df000017 	ldw	fp,0(sp)
 183a698:	dec00204 	addi	sp,sp,8
 183a69c:	f800283a 	ret

0183a6a0 <do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static void
do_close_internal(struct netconn *conn)
{
 183a6a0:	defffb04 	addi	sp,sp,-20
 183a6a4:	dfc00415 	stw	ra,16(sp)
 183a6a8:	df000315 	stw	fp,12(sp)
 183a6ac:	df000304 	addi	fp,sp,12
 183a6b0:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("this is for tcp netconns only", (conn->type == NETCONN_TCP));
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  shut = conn->current_msg->msg.sd.shut;
 183a6b4:	e0bfff17 	ldw	r2,-4(fp)
 183a6b8:	10800b17 	ldw	r2,44(r2)
 183a6bc:	10800203 	ldbu	r2,8(r2)
 183a6c0:	e0bffd45 	stb	r2,-11(fp)
  shut_rx = shut & NETCONN_SHUT_RD;
 183a6c4:	e0bffd43 	ldbu	r2,-11(fp)
 183a6c8:	1080004c 	andi	r2,r2,1
 183a6cc:	e0bffd85 	stb	r2,-10(fp)
  shut_tx = shut & NETCONN_SHUT_WR;
 183a6d0:	e0bffd43 	ldbu	r2,-11(fp)
 183a6d4:	1080008c 	andi	r2,r2,2
 183a6d8:	e0bffdc5 	stb	r2,-9(fp)
  /* shutting down both ends is the same as closing */
  close = shut == NETCONN_SHUT_RDWR;
 183a6dc:	e0bffd43 	ldbu	r2,-11(fp)
 183a6e0:	108000e0 	cmpeqi	r2,r2,3
 183a6e4:	e0bffe05 	stb	r2,-8(fp)

  /* Set back some callback pointers */
  if (close) {
 183a6e8:	e0bffe03 	ldbu	r2,-8(fp)
 183a6ec:	10000526 	beq	r2,zero,183a704 <do_close_internal+0x64>
    tcp_arg(conn->pcb.tcp, NULL);
 183a6f0:	e0bfff17 	ldw	r2,-4(fp)
 183a6f4:	10800217 	ldw	r2,8(r2)
 183a6f8:	000b883a 	mov	r5,zero
 183a6fc:	1009883a 	mov	r4,r2
 183a700:	181cfdc0 	call	181cfdc <tcp_arg>
  }
  if (conn->pcb.tcp->state == LISTEN) {
 183a704:	e0bfff17 	ldw	r2,-4(fp)
 183a708:	10800217 	ldw	r2,8(r2)
 183a70c:	10800617 	ldw	r2,24(r2)
 183a710:	10800058 	cmpnei	r2,r2,1
 183a714:	1000061e 	bne	r2,zero,183a730 <do_close_internal+0x90>
    tcp_accept(conn->pcb.tcp, NULL);
 183a718:	e0bfff17 	ldw	r2,-4(fp)
 183a71c:	10800217 	ldw	r2,8(r2)
 183a720:	000b883a 	mov	r5,zero
 183a724:	1009883a 	mov	r4,r2
 183a728:	181d0ac0 	call	181d0ac <tcp_accept>
 183a72c:	00002006 	br	183a7b0 <do_close_internal+0x110>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 183a730:	e0bffd83 	ldbu	r2,-10(fp)
 183a734:	10000a26 	beq	r2,zero,183a760 <do_close_internal+0xc0>
      tcp_recv(conn->pcb.tcp, NULL);
 183a738:	e0bfff17 	ldw	r2,-4(fp)
 183a73c:	10800217 	ldw	r2,8(r2)
 183a740:	000b883a 	mov	r5,zero
 183a744:	1009883a 	mov	r4,r2
 183a748:	181d0100 	call	181d010 <tcp_recv>
      tcp_accept(conn->pcb.tcp, NULL);
 183a74c:	e0bfff17 	ldw	r2,-4(fp)
 183a750:	10800217 	ldw	r2,8(r2)
 183a754:	000b883a 	mov	r5,zero
 183a758:	1009883a 	mov	r4,r2
 183a75c:	181d0ac0 	call	181d0ac <tcp_accept>
    }
    if (shut_tx) {
 183a760:	e0bffdc3 	ldbu	r2,-9(fp)
 183a764:	10000526 	beq	r2,zero,183a77c <do_close_internal+0xdc>
      tcp_sent(conn->pcb.tcp, NULL);
 183a768:	e0bfff17 	ldw	r2,-4(fp)
 183a76c:	10800217 	ldw	r2,8(r2)
 183a770:	000b883a 	mov	r5,zero
 183a774:	1009883a 	mov	r4,r2
 183a778:	181d0440 	call	181d044 <tcp_sent>
    }
    if (close) {
 183a77c:	e0bffe03 	ldbu	r2,-8(fp)
 183a780:	10000b26 	beq	r2,zero,183a7b0 <do_close_internal+0x110>
      tcp_poll(conn->pcb.tcp, NULL, 4);
 183a784:	e0bfff17 	ldw	r2,-4(fp)
 183a788:	10800217 	ldw	r2,8(r2)
 183a78c:	01800104 	movi	r6,4
 183a790:	000b883a 	mov	r5,zero
 183a794:	1009883a 	mov	r4,r2
 183a798:	181d0e00 	call	181d0e0 <tcp_poll>
      tcp_err(conn->pcb.tcp, NULL);
 183a79c:	e0bfff17 	ldw	r2,-4(fp)
 183a7a0:	10800217 	ldw	r2,8(r2)
 183a7a4:	000b883a 	mov	r5,zero
 183a7a8:	1009883a 	mov	r4,r2
 183a7ac:	181d0780 	call	181d078 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 183a7b0:	e0bffe03 	ldbu	r2,-8(fp)
 183a7b4:	10000626 	beq	r2,zero,183a7d0 <do_close_internal+0x130>
    err = tcp_close(conn->pcb.tcp);
 183a7b8:	e0bfff17 	ldw	r2,-4(fp)
 183a7bc:	10800217 	ldw	r2,8(r2)
 183a7c0:	1009883a 	mov	r4,r2
 183a7c4:	181b3b40 	call	181b3b4 <tcp_close>
 183a7c8:	e0bffd05 	stb	r2,-12(fp)
 183a7cc:	00000906 	br	183a7f4 <do_close_internal+0x154>
  } else {
    err = tcp_shutdown(conn->pcb.tcp, shut_rx, shut_tx);
 183a7d0:	e0bfff17 	ldw	r2,-4(fp)
 183a7d4:	10800217 	ldw	r2,8(r2)
 183a7d8:	e0fffd83 	ldbu	r3,-10(fp)
 183a7dc:	e13ffdc3 	ldbu	r4,-9(fp)
 183a7e0:	200d883a 	mov	r6,r4
 183a7e4:	180b883a 	mov	r5,r3
 183a7e8:	1009883a 	mov	r4,r2
 183a7ec:	181b4100 	call	181b410 <tcp_shutdown>
 183a7f0:	e0bffd05 	stb	r2,-12(fp)
  }
  if (err == ERR_OK) {
 183a7f4:	e0bffd07 	ldb	r2,-12(fp)
 183a7f8:	10002f1e 	bne	r2,zero,183a8b8 <do_close_internal+0x218>
    /* Closing succeeded */
    conn->current_msg->err = ERR_OK;
 183a7fc:	e0bfff17 	ldw	r2,-4(fp)
 183a800:	10800b17 	ldw	r2,44(r2)
 183a804:	10000105 	stb	zero,4(r2)
    conn->current_msg = NULL;
 183a808:	e0bfff17 	ldw	r2,-4(fp)
 183a80c:	10000b15 	stw	zero,44(r2)
    conn->state = NETCONN_NONE;
 183a810:	e0bfff17 	ldw	r2,-4(fp)
 183a814:	10000115 	stw	zero,4(r2)
    if (close) {
 183a818:	e0bffe03 	ldbu	r2,-8(fp)
 183a81c:	10000b26 	beq	r2,zero,183a84c <do_close_internal+0x1ac>
      /* Set back some callback pointers as conn is going away */
      conn->pcb.tcp = NULL;
 183a820:	e0bfff17 	ldw	r2,-4(fp)
 183a824:	10000215 	stw	zero,8(r2)
      /* Trigger select() in socket layer. Make sure everybody notices activity
       on the connection, error first! */
      API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 183a828:	e0bfff17 	ldw	r2,-4(fp)
 183a82c:	10800c17 	ldw	r2,48(r2)
 183a830:	10000626 	beq	r2,zero,183a84c <do_close_internal+0x1ac>
 183a834:	e0bfff17 	ldw	r2,-4(fp)
 183a838:	10800c17 	ldw	r2,48(r2)
 183a83c:	000d883a 	mov	r6,zero
 183a840:	01400104 	movi	r5,4
 183a844:	e13fff17 	ldw	r4,-4(fp)
 183a848:	103ee83a 	callr	r2
    }
    if (shut_rx) {
 183a84c:	e0bffd83 	ldbu	r2,-10(fp)
 183a850:	10000926 	beq	r2,zero,183a878 <do_close_internal+0x1d8>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 183a854:	e0bfff17 	ldw	r2,-4(fp)
 183a858:	10800c17 	ldw	r2,48(r2)
 183a85c:	10000626 	beq	r2,zero,183a878 <do_close_internal+0x1d8>
 183a860:	e0bfff17 	ldw	r2,-4(fp)
 183a864:	10800c17 	ldw	r2,48(r2)
 183a868:	000d883a 	mov	r6,zero
 183a86c:	000b883a 	mov	r5,zero
 183a870:	e13fff17 	ldw	r4,-4(fp)
 183a874:	103ee83a 	callr	r2
    }
    if (shut_tx) {
 183a878:	e0bffdc3 	ldbu	r2,-9(fp)
 183a87c:	10000926 	beq	r2,zero,183a8a4 <do_close_internal+0x204>
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 183a880:	e0bfff17 	ldw	r2,-4(fp)
 183a884:	10800c17 	ldw	r2,48(r2)
 183a888:	10000626 	beq	r2,zero,183a8a4 <do_close_internal+0x204>
 183a88c:	e0bfff17 	ldw	r2,-4(fp)
 183a890:	10800c17 	ldw	r2,48(r2)
 183a894:	000d883a 	mov	r6,zero
 183a898:	01400084 	movi	r5,2
 183a89c:	e13fff17 	ldw	r4,-4(fp)
 183a8a0:	103ee83a 	callr	r2
    }
    /* wake up the application task */
    sys_sem_signal(&conn->op_completed);
 183a8a4:	e0bfff17 	ldw	r2,-4(fp)
 183a8a8:	10800404 	addi	r2,r2,16
 183a8ac:	1009883a 	mov	r4,r2
 183a8b0:	1814fcc0 	call	1814fcc <sys_sem_signal>
    tcp_arg(conn->pcb.tcp, conn);
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
}
 183a8b4:	00001806 	br	183a918 <do_close_internal+0x278>
    sys_sem_signal(&conn->op_completed);
  } else {
    /* Closing failed, restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (conn->pcb.tcp->state != LISTEN));
    tcp_sent(conn->pcb.tcp, sent_tcp);
 183a8b8:	e0bfff17 	ldw	r2,-4(fp)
 183a8bc:	10800217 	ldw	r2,8(r2)
 183a8c0:	01406134 	movhi	r5,388
 183a8c4:	29673f04 	addi	r5,r5,-25348
 183a8c8:	1009883a 	mov	r4,r2
 183a8cc:	181d0440 	call	181d044 <tcp_sent>
    tcp_poll(conn->pcb.tcp, poll_tcp, 4);
 183a8d0:	e0bfff17 	ldw	r2,-4(fp)
 183a8d4:	10800217 	ldw	r2,8(r2)
 183a8d8:	01800104 	movi	r6,4
 183a8dc:	01406134 	movhi	r5,388
 183a8e0:	29670004 	addi	r5,r5,-25600
 183a8e4:	1009883a 	mov	r4,r2
 183a8e8:	181d0e00 	call	181d0e0 <tcp_poll>
    tcp_err(conn->pcb.tcp, err_tcp);
 183a8ec:	e0bfff17 	ldw	r2,-4(fp)
 183a8f0:	10800217 	ldw	r2,8(r2)
 183a8f4:	01406134 	movhi	r5,388
 183a8f8:	29677e04 	addi	r5,r5,-25096
 183a8fc:	1009883a 	mov	r4,r2
 183a900:	181d0780 	call	181d078 <tcp_err>
    tcp_arg(conn->pcb.tcp, conn);
 183a904:	e0bfff17 	ldw	r2,-4(fp)
 183a908:	10800217 	ldw	r2,8(r2)
 183a90c:	e17fff17 	ldw	r5,-4(fp)
 183a910:	1009883a 	mov	r4,r2
 183a914:	181cfdc0 	call	181cfdc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
}
 183a918:	0001883a 	nop
 183a91c:	e037883a 	mov	sp,fp
 183a920:	dfc00117 	ldw	ra,4(sp)
 183a924:	df000017 	ldw	fp,0(sp)
 183a928:	dec00204 	addi	sp,sp,8
 183a92c:	f800283a 	ret

0183a930 <do_delconn>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_delconn(struct api_msg_msg *msg)
{
 183a930:	defffd04 	addi	sp,sp,-12
 183a934:	dfc00215 	stw	ra,8(sp)
 183a938:	df000115 	stw	fp,4(sp)
 183a93c:	df000104 	addi	fp,sp,4
 183a940:	e13fff15 	stw	r4,-4(fp)
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
 183a944:	e0bfff17 	ldw	r2,-4(fp)
 183a948:	10800017 	ldw	r2,0(r2)
 183a94c:	10800117 	ldw	r2,4(r2)
 183a950:	10000e26 	beq	r2,zero,183a98c <do_delconn+0x5c>
     (msg->conn->state != NETCONN_LISTEN) &&
 183a954:	e0bfff17 	ldw	r2,-4(fp)
 183a958:	10800017 	ldw	r2,0(r2)
 183a95c:	10800117 	ldw	r2,4(r2)
 */
void
do_delconn(struct api_msg_msg *msg)
{
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
 183a960:	108000a0 	cmpeqi	r2,r2,2
 183a964:	1000091e 	bne	r2,zero,183a98c <do_delconn+0x5c>
     (msg->conn->state != NETCONN_LISTEN) &&
     (msg->conn->state != NETCONN_CONNECT)) {
 183a968:	e0bfff17 	ldw	r2,-4(fp)
 183a96c:	10800017 	ldw	r2,0(r2)
 183a970:	10800117 	ldw	r2,4(r2)
void
do_delconn(struct api_msg_msg *msg)
{
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
     (msg->conn->state != NETCONN_LISTEN) &&
 183a974:	108000e0 	cmpeqi	r2,r2,3
 183a978:	1000041e 	bne	r2,zero,183a98c <do_delconn+0x5c>
     (msg->conn->state != NETCONN_CONNECT)) {
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
 183a97c:	e0bfff17 	ldw	r2,-4(fp)
 183a980:	00fffec4 	movi	r3,-5
 183a984:	10c00105 	stb	r3,4(r2)
 183a988:	00005006 	br	183aacc <do_delconn+0x19c>
  } else {
    LWIP_ASSERT("blocking connect in progress",
      (msg->conn->state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 183a98c:	e0bfff17 	ldw	r2,-4(fp)
 183a990:	10800017 	ldw	r2,0(r2)
 183a994:	1009883a 	mov	r4,r2
 183a998:	183a5240 	call	183a524 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 183a99c:	e0bfff17 	ldw	r2,-4(fp)
 183a9a0:	10800017 	ldw	r2,0(r2)
 183a9a4:	10800217 	ldw	r2,8(r2)
 183a9a8:	10002e26 	beq	r2,zero,183aa64 <do_delconn+0x134>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183a9ac:	e0bfff17 	ldw	r2,-4(fp)
 183a9b0:	10800017 	ldw	r2,0(r2)
 183a9b4:	10800017 	ldw	r2,0(r2)
 183a9b8:	10803c0c 	andi	r2,r2,240
 183a9bc:	10c00820 	cmpeqi	r3,r2,32
 183a9c0:	18000b1e 	bne	r3,zero,183a9f0 <do_delconn+0xc0>
 183a9c4:	10c01020 	cmpeqi	r3,r2,64
 183a9c8:	1800031e 	bne	r3,zero,183a9d8 <do_delconn+0xa8>
 183a9cc:	10800420 	cmpeqi	r2,r2,16
 183a9d0:	1000111e 	bne	r2,zero,183aa18 <do_delconn+0xe8>
        /* API_EVENT is called inside do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 183a9d4:	00002006 	br	183aa58 <do_delconn+0x128>
    if (msg->conn->pcb.tcp != NULL) {

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
      case NETCONN_RAW:
        raw_remove(msg->conn->pcb.raw);
 183a9d8:	e0bfff17 	ldw	r2,-4(fp)
 183a9dc:	10800017 	ldw	r2,0(r2)
 183a9e0:	10800217 	ldw	r2,8(r2)
 183a9e4:	1009883a 	mov	r4,r2
 183a9e8:	18342bc0 	call	18342bc <raw_remove>
        break;
 183a9ec:	00001a06 	br	183aa58 <do_delconn+0x128>
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 183a9f0:	e0bfff17 	ldw	r2,-4(fp)
 183a9f4:	10800017 	ldw	r2,0(r2)
 183a9f8:	10800217 	ldw	r2,8(r2)
 183a9fc:	10000715 	stw	zero,28(r2)
        udp_remove(msg->conn->pcb.udp);
 183aa00:	e0bfff17 	ldw	r2,-4(fp)
 183aa04:	10800017 	ldw	r2,0(r2)
 183aa08:	10800217 	ldw	r2,8(r2)
 183aa0c:	1009883a 	mov	r4,r2
 183aa10:	18221300 	call	1822130 <udp_remove>
        break;
 183aa14:	00001006 	br	183aa58 <do_delconn+0x128>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 183aa18:	e0bfff17 	ldw	r2,-4(fp)
 183aa1c:	10800017 	ldw	r2,0(r2)
 183aa20:	00c00104 	movi	r3,4
 183aa24:	10c00115 	stw	r3,4(r2)
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 183aa28:	e0bfff17 	ldw	r2,-4(fp)
 183aa2c:	00c000c4 	movi	r3,3
 183aa30:	10c00205 	stb	r3,8(r2)
        msg->conn->current_msg = msg;
 183aa34:	e0bfff17 	ldw	r2,-4(fp)
 183aa38:	10800017 	ldw	r2,0(r2)
 183aa3c:	e0ffff17 	ldw	r3,-4(fp)
 183aa40:	10c00b15 	stw	r3,44(r2)
        do_close_internal(msg->conn);
 183aa44:	e0bfff17 	ldw	r2,-4(fp)
 183aa48:	10800017 	ldw	r2,0(r2)
 183aa4c:	1009883a 	mov	r4,r2
 183aa50:	183a6a00 	call	183a6a0 <do_close_internal>
        /* API_EVENT is called inside do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
 183aa54:	00002606 	br	183aaf0 <do_delconn+0x1c0>
#endif /* LWIP_TCP */
      default:
        break;
      }
      msg->conn->pcb.tcp = NULL;
 183aa58:	e0bfff17 	ldw	r2,-4(fp)
 183aa5c:	10800017 	ldw	r2,0(r2)
 183aa60:	10000215 	stw	zero,8(r2)
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 183aa64:	e0bfff17 	ldw	r2,-4(fp)
 183aa68:	10800017 	ldw	r2,0(r2)
 183aa6c:	10800c17 	ldw	r2,48(r2)
 183aa70:	10000926 	beq	r2,zero,183aa98 <do_delconn+0x168>
 183aa74:	e0bfff17 	ldw	r2,-4(fp)
 183aa78:	10800017 	ldw	r2,0(r2)
 183aa7c:	10800c17 	ldw	r2,48(r2)
 183aa80:	e0ffff17 	ldw	r3,-4(fp)
 183aa84:	18c00017 	ldw	r3,0(r3)
 183aa88:	000d883a 	mov	r6,zero
 183aa8c:	000b883a 	mov	r5,zero
 183aa90:	1809883a 	mov	r4,r3
 183aa94:	103ee83a 	callr	r2
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 183aa98:	e0bfff17 	ldw	r2,-4(fp)
 183aa9c:	10800017 	ldw	r2,0(r2)
 183aaa0:	10800c17 	ldw	r2,48(r2)
 183aaa4:	10000926 	beq	r2,zero,183aacc <do_delconn+0x19c>
 183aaa8:	e0bfff17 	ldw	r2,-4(fp)
 183aaac:	10800017 	ldw	r2,0(r2)
 183aab0:	10800c17 	ldw	r2,48(r2)
 183aab4:	e0ffff17 	ldw	r3,-4(fp)
 183aab8:	18c00017 	ldw	r3,0(r3)
 183aabc:	000d883a 	mov	r6,zero
 183aac0:	01400084 	movi	r5,2
 183aac4:	1809883a 	mov	r4,r3
 183aac8:	103ee83a 	callr	r2
  }
  if (sys_sem_valid(&msg->conn->op_completed)) {
 183aacc:	e0bfff17 	ldw	r2,-4(fp)
 183aad0:	10800017 	ldw	r2,0(r2)
 183aad4:	10800417 	ldw	r2,16(r2)
 183aad8:	10000526 	beq	r2,zero,183aaf0 <do_delconn+0x1c0>
    sys_sem_signal(&msg->conn->op_completed);
 183aadc:	e0bfff17 	ldw	r2,-4(fp)
 183aae0:	10800017 	ldw	r2,0(r2)
 183aae4:	10800404 	addi	r2,r2,16
 183aae8:	1009883a 	mov	r4,r2
 183aaec:	1814fcc0 	call	1814fcc <sys_sem_signal>
  }
}
 183aaf0:	e037883a 	mov	sp,fp
 183aaf4:	dfc00117 	ldw	ra,4(sp)
 183aaf8:	df000017 	ldw	fp,0(sp)
 183aafc:	dec00204 	addi	sp,sp,8
 183ab00:	f800283a 	ret

0183ab04 <do_bind>:
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to bind to
 */
void
do_bind(struct api_msg_msg *msg)
{
 183ab04:	defffd04 	addi	sp,sp,-12
 183ab08:	dfc00215 	stw	ra,8(sp)
 183ab0c:	df000115 	stw	fp,4(sp)
 183ab10:	df000104 	addi	fp,sp,4
 183ab14:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 183ab18:	e0bfff17 	ldw	r2,-4(fp)
 183ab1c:	10800017 	ldw	r2,0(r2)
 183ab20:	10800303 	ldbu	r2,12(r2)
 183ab24:	10803fcc 	andi	r2,r2,255
 183ab28:	1080201c 	xori	r2,r2,128
 183ab2c:	10bfe004 	addi	r2,r2,-128
 183ab30:	10bffdc8 	cmpgei	r2,r2,-9
 183ab34:	1000061e 	bne	r2,zero,183ab50 <do_bind+0x4c>
    msg->err = msg->conn->last_err;
 183ab38:	e0bfff17 	ldw	r2,-4(fp)
 183ab3c:	10800017 	ldw	r2,0(r2)
 183ab40:	10c00303 	ldbu	r3,12(r2)
 183ab44:	e0bfff17 	ldw	r2,-4(fp)
 183ab48:	10c00105 	stb	r3,4(r2)
 183ab4c:	00003e06 	br	183ac48 <do_bind+0x144>
  } else {
    msg->err = ERR_VAL;
 183ab50:	e0bfff17 	ldw	r2,-4(fp)
 183ab54:	00fffe84 	movi	r3,-6
 183ab58:	10c00105 	stb	r3,4(r2)
    if (msg->conn->pcb.tcp != NULL) {
 183ab5c:	e0bfff17 	ldw	r2,-4(fp)
 183ab60:	10800017 	ldw	r2,0(r2)
 183ab64:	10800217 	ldw	r2,8(r2)
 183ab68:	10003726 	beq	r2,zero,183ac48 <do_bind+0x144>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183ab6c:	e0bfff17 	ldw	r2,-4(fp)
 183ab70:	10800017 	ldw	r2,0(r2)
 183ab74:	10800017 	ldw	r2,0(r2)
 183ab78:	10803c0c 	andi	r2,r2,240
 183ab7c:	10c00820 	cmpeqi	r3,r2,32
 183ab80:	1800111e 	bne	r3,zero,183abc8 <do_bind+0xc4>
 183ab84:	10c01020 	cmpeqi	r3,r2,64
 183ab88:	1800031e 	bne	r3,zero,183ab98 <do_bind+0x94>
 183ab8c:	10800420 	cmpeqi	r2,r2,16
 183ab90:	10001d1e 	bne	r2,zero,183ac08 <do_bind+0x104>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 183ab94:	00002c06 	br	183ac48 <do_bind+0x144>
    msg->err = ERR_VAL;
    if (msg->conn->pcb.tcp != NULL) {
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
      case NETCONN_RAW:
        msg->err = raw_bind(msg->conn->pcb.raw, msg->msg.bc.ipaddr);
 183ab98:	e0bfff17 	ldw	r2,-4(fp)
 183ab9c:	10800017 	ldw	r2,0(r2)
 183aba0:	10c00217 	ldw	r3,8(r2)
 183aba4:	e0bfff17 	ldw	r2,-4(fp)
 183aba8:	10800217 	ldw	r2,8(r2)
 183abac:	100b883a 	mov	r5,r2
 183abb0:	1809883a 	mov	r4,r3
 183abb4:	183401c0 	call	183401c <raw_bind>
 183abb8:	1007883a 	mov	r3,r2
 183abbc:	e0bfff17 	ldw	r2,-4(fp)
 183abc0:	10c00105 	stb	r3,4(r2)
        break;
 183abc4:	00002006 	br	183ac48 <do_bind+0x144>
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
 183abc8:	e0bfff17 	ldw	r2,-4(fp)
 183abcc:	10800017 	ldw	r2,0(r2)
 183abd0:	10c00217 	ldw	r3,8(r2)
 183abd4:	e0bfff17 	ldw	r2,-4(fp)
 183abd8:	11000217 	ldw	r4,8(r2)
 183abdc:	e0bfff17 	ldw	r2,-4(fp)
 183abe0:	1080030b 	ldhu	r2,12(r2)
 183abe4:	10bfffcc 	andi	r2,r2,65535
 183abe8:	100d883a 	mov	r6,r2
 183abec:	200b883a 	mov	r5,r4
 183abf0:	1809883a 	mov	r4,r3
 183abf4:	1821e380 	call	1821e38 <udp_bind>
 183abf8:	1007883a 	mov	r3,r2
 183abfc:	e0bfff17 	ldw	r2,-4(fp)
 183ac00:	10c00105 	stb	r3,4(r2)
        break;
 183ac04:	00001006 	br	183ac48 <do_bind+0x144>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
 183ac08:	e0bfff17 	ldw	r2,-4(fp)
 183ac0c:	10800017 	ldw	r2,0(r2)
 183ac10:	10c00217 	ldw	r3,8(r2)
 183ac14:	e0bfff17 	ldw	r2,-4(fp)
 183ac18:	11000217 	ldw	r4,8(r2)
 183ac1c:	e0bfff17 	ldw	r2,-4(fp)
 183ac20:	1080030b 	ldhu	r2,12(r2)
 183ac24:	10bfffcc 	andi	r2,r2,65535
 183ac28:	100d883a 	mov	r6,r2
 183ac2c:	200b883a 	mov	r5,r4
 183ac30:	1809883a 	mov	r4,r3
 183ac34:	181b6900 	call	181b690 <tcp_bind>
 183ac38:	1007883a 	mov	r3,r2
 183ac3c:	e0bfff17 	ldw	r2,-4(fp)
 183ac40:	10c00105 	stb	r3,4(r2)
        break;
 183ac44:	0001883a 	nop
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183ac48:	e0bfff17 	ldw	r2,-4(fp)
 183ac4c:	10800017 	ldw	r2,0(r2)
 183ac50:	10800404 	addi	r2,r2,16
 183ac54:	1009883a 	mov	r4,r2
 183ac58:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183ac5c:	0001883a 	nop
 183ac60:	e037883a 	mov	sp,fp
 183ac64:	dfc00117 	ldw	ra,4(sp)
 183ac68:	df000017 	ldw	fp,0(sp)
 183ac6c:	dec00204 	addi	sp,sp,8
 183ac70:	f800283a 	ret

0183ac74 <do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 183ac74:	defff904 	addi	sp,sp,-28
 183ac78:	dfc00615 	stw	ra,24(sp)
 183ac7c:	df000515 	stw	fp,20(sp)
 183ac80:	df000504 	addi	fp,sp,20
 183ac84:	e13ffd15 	stw	r4,-12(fp)
 183ac88:	e17ffe15 	stw	r5,-8(fp)
 183ac8c:	3005883a 	mov	r2,r6
 183ac90:	e0bfff05 	stb	r2,-4(fp)
  struct netconn *conn;
  int was_blocking;

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 183ac94:	e0bffd17 	ldw	r2,-12(fp)
 183ac98:	e0bffb15 	stw	r2,-20(fp)

  if (conn == NULL) {
 183ac9c:	e0bffb17 	ldw	r2,-20(fp)
 183aca0:	1000021e 	bne	r2,zero,183acac <do_connected+0x38>
    return ERR_VAL;
 183aca4:	00bffe84 	movi	r2,-6
 183aca8:	00004206 	br	183adb4 <do_connected+0x140>

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 183acac:	e0bffb17 	ldw	r2,-20(fp)
 183acb0:	10800b17 	ldw	r2,44(r2)
 183acb4:	10000426 	beq	r2,zero,183acc8 <do_connected+0x54>
    conn->current_msg->err = err;
 183acb8:	e0bffb17 	ldw	r2,-20(fp)
 183acbc:	10800b17 	ldw	r2,44(r2)
 183acc0:	e0ffff03 	ldbu	r3,-4(fp)
 183acc4:	10c00105 	stb	r3,4(r2)
  }
  if ((conn->type == NETCONN_TCP) && (err == ERR_OK)) {
 183acc8:	e0bffb17 	ldw	r2,-20(fp)
 183accc:	10800017 	ldw	r2,0(r2)
 183acd0:	10800418 	cmpnei	r2,r2,16
 183acd4:	1000041e 	bne	r2,zero,183ace8 <do_connected+0x74>
 183acd8:	e0bfff07 	ldb	r2,-4(fp)
 183acdc:	1000021e 	bne	r2,zero,183ace8 <do_connected+0x74>
    setup_tcp(conn);
 183ace0:	e13ffb17 	ldw	r4,-20(fp)
 183ace4:	1839fac0 	call	1839fac <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 183ace8:	e0bffb17 	ldw	r2,-20(fp)
 183acec:	10800903 	ldbu	r2,36(r2)
 183acf0:	10803fcc 	andi	r2,r2,255
 183acf4:	1080010c 	andi	r2,r2,4
 183acf8:	1005003a 	cmpeq	r2,r2,zero
 183acfc:	10803fcc 	andi	r2,r2,255
 183ad00:	e0bffc15 	stw	r2,-16(fp)
  SET_NONBLOCKING_CONNECT(conn, 0);
 183ad04:	e0bffb17 	ldw	r2,-20(fp)
 183ad08:	10c00903 	ldbu	r3,36(r2)
 183ad0c:	00bffec4 	movi	r2,-5
 183ad10:	1884703a 	and	r2,r3,r2
 183ad14:	1007883a 	mov	r3,r2
 183ad18:	e0bffb17 	ldw	r2,-20(fp)
 183ad1c:	10c00905 	stb	r3,36(r2)
  conn->current_msg = NULL;
 183ad20:	e0bffb17 	ldw	r2,-20(fp)
 183ad24:	10000b15 	stw	zero,44(r2)
  conn->state = NETCONN_NONE;
 183ad28:	e0bffb17 	ldw	r2,-20(fp)
 183ad2c:	10000115 	stw	zero,4(r2)
  if (!was_blocking) {
 183ad30:	e0bffc17 	ldw	r2,-16(fp)
 183ad34:	10000f1e 	bne	r2,zero,183ad74 <do_connected+0x100>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 183ad38:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 183ad3c:	10000126 	beq	r2,zero,183ad44 <do_connected+0xd0>
 183ad40:	1810f480 	call	1810f48 <vTaskEnterCritical>
 183ad44:	e0bffb17 	ldw	r2,-20(fp)
 183ad48:	10800303 	ldbu	r2,12(r2)
 183ad4c:	10803fcc 	andi	r2,r2,255
 183ad50:	1080201c 	xori	r2,r2,128
 183ad54:	10bfe004 	addi	r2,r2,-128
 183ad58:	10bffdd0 	cmplti	r2,r2,-9
 183ad5c:	1000021e 	bne	r2,zero,183ad68 <do_connected+0xf4>
 183ad60:	e0bffb17 	ldw	r2,-20(fp)
 183ad64:	10000305 	stb	zero,12(r2)
 183ad68:	1810b800 	call	1810b80 <xTaskGetSchedulerState>
 183ad6c:	10000126 	beq	r2,zero,183ad74 <do_connected+0x100>
 183ad70:	1810f900 	call	1810f90 <vTaskExitCritical>
  }
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 183ad74:	e0bffb17 	ldw	r2,-20(fp)
 183ad78:	10800c17 	ldw	r2,48(r2)
 183ad7c:	10000626 	beq	r2,zero,183ad98 <do_connected+0x124>
 183ad80:	e0bffb17 	ldw	r2,-20(fp)
 183ad84:	10800c17 	ldw	r2,48(r2)
 183ad88:	000d883a 	mov	r6,zero
 183ad8c:	01400084 	movi	r5,2
 183ad90:	e13ffb17 	ldw	r4,-20(fp)
 183ad94:	103ee83a 	callr	r2

  if (was_blocking) {
 183ad98:	e0bffc17 	ldw	r2,-16(fp)
 183ad9c:	10000426 	beq	r2,zero,183adb0 <do_connected+0x13c>
    sys_sem_signal(&conn->op_completed);
 183ada0:	e0bffb17 	ldw	r2,-20(fp)
 183ada4:	10800404 	addi	r2,r2,16
 183ada8:	1009883a 	mov	r4,r2
 183adac:	1814fcc0 	call	1814fcc <sys_sem_signal>
  }
  return ERR_OK;
 183adb0:	0005883a 	mov	r2,zero
}
 183adb4:	e037883a 	mov	sp,fp
 183adb8:	dfc00117 	ldw	ra,4(sp)
 183adbc:	df000017 	ldw	fp,0(sp)
 183adc0:	dec00204 	addi	sp,sp,8
 183adc4:	f800283a 	ret

0183adc8 <do_connect>:
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to connect to
 */
void
do_connect(struct api_msg_msg *msg)
{
 183adc8:	defffc04 	addi	sp,sp,-16
 183adcc:	dfc00315 	stw	ra,12(sp)
 183add0:	df000215 	stw	fp,8(sp)
 183add4:	df000204 	addi	fp,sp,8
 183add8:	e13fff15 	stw	r4,-4(fp)
  if (msg->conn->pcb.tcp == NULL) {
 183addc:	e0bfff17 	ldw	r2,-4(fp)
 183ade0:	10800017 	ldw	r2,0(r2)
 183ade4:	10800217 	ldw	r2,8(r2)
 183ade8:	1000041e 	bne	r2,zero,183adfc <do_connect+0x34>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 183adec:	e0bfff17 	ldw	r2,-4(fp)
 183adf0:	00fffd04 	movi	r3,-12
 183adf4:	10c00105 	stb	r3,4(r2)
 183adf8:	00007c06 	br	183afec <do_connect+0x224>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183adfc:	e0bfff17 	ldw	r2,-4(fp)
 183ae00:	10800017 	ldw	r2,0(r2)
 183ae04:	10800017 	ldw	r2,0(r2)
 183ae08:	10803c0c 	andi	r2,r2,240
 183ae0c:	10c00820 	cmpeqi	r3,r2,32
 183ae10:	1800111e 	bne	r3,zero,183ae58 <do_connect+0x90>
 183ae14:	10c01020 	cmpeqi	r3,r2,64
 183ae18:	1800031e 	bne	r3,zero,183ae28 <do_connect+0x60>
 183ae1c:	10800420 	cmpeqi	r2,r2,16
 183ae20:	10001d1e 	bne	r2,zero,183ae98 <do_connect+0xd0>
 183ae24:	00006706 	br	183afc4 <do_connect+0x1fc>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->err = raw_connect(msg->conn->pcb.raw, msg->msg.bc.ipaddr);
 183ae28:	e0bfff17 	ldw	r2,-4(fp)
 183ae2c:	10800017 	ldw	r2,0(r2)
 183ae30:	10c00217 	ldw	r3,8(r2)
 183ae34:	e0bfff17 	ldw	r2,-4(fp)
 183ae38:	10800217 	ldw	r2,8(r2)
 183ae3c:	100b883a 	mov	r5,r2
 183ae40:	1809883a 	mov	r4,r3
 183ae44:	18340640 	call	1834064 <raw_connect>
 183ae48:	1007883a 	mov	r3,r2
 183ae4c:	e0bfff17 	ldw	r2,-4(fp)
 183ae50:	10c00105 	stb	r3,4(r2)
    break;
 183ae54:	00006506 	br	183afec <do_connect+0x224>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->err = udp_connect(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
 183ae58:	e0bfff17 	ldw	r2,-4(fp)
 183ae5c:	10800017 	ldw	r2,0(r2)
 183ae60:	10c00217 	ldw	r3,8(r2)
 183ae64:	e0bfff17 	ldw	r2,-4(fp)
 183ae68:	11000217 	ldw	r4,8(r2)
 183ae6c:	e0bfff17 	ldw	r2,-4(fp)
 183ae70:	1080030b 	ldhu	r2,12(r2)
 183ae74:	10bfffcc 	andi	r2,r2,65535
 183ae78:	100d883a 	mov	r6,r2
 183ae7c:	200b883a 	mov	r5,r4
 183ae80:	1809883a 	mov	r4,r3
 183ae84:	1821f940 	call	1821f94 <udp_connect>
 183ae88:	1007883a 	mov	r3,r2
 183ae8c:	e0bfff17 	ldw	r2,-4(fp)
 183ae90:	10c00105 	stb	r3,4(r2)
    break;
 183ae94:	00005506 	br	183afec <do_connect+0x224>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    /* Prevent connect while doing any other action. */
    if (msg->conn->state != NETCONN_NONE) {
 183ae98:	e0bfff17 	ldw	r2,-4(fp)
 183ae9c:	10800017 	ldw	r2,0(r2)
 183aea0:	10800117 	ldw	r2,4(r2)
 183aea4:	10000426 	beq	r2,zero,183aeb8 <do_connect+0xf0>
      msg->err = ERR_ISCONN;
 183aea8:	e0bfff17 	ldw	r2,-4(fp)
 183aeac:	00fffdc4 	movi	r3,-9
 183aeb0:	10c00105 	stb	r3,4(r2)
          * when the connection is established! */
          return;
        }
      }
    }
    break;
 183aeb4:	00004c06 	br	183afe8 <do_connect+0x220>
  case NETCONN_TCP:
    /* Prevent connect while doing any other action. */
    if (msg->conn->state != NETCONN_NONE) {
      msg->err = ERR_ISCONN;
    } else {
      setup_tcp(msg->conn);
 183aeb8:	e0bfff17 	ldw	r2,-4(fp)
 183aebc:	10800017 	ldw	r2,0(r2)
 183aec0:	1009883a 	mov	r4,r2
 183aec4:	1839fac0 	call	1839fac <setup_tcp>
      msg->err = tcp_connect(msg->conn->pcb.tcp, msg->msg.bc.ipaddr,
 183aec8:	e0bfff17 	ldw	r2,-4(fp)
 183aecc:	10800017 	ldw	r2,0(r2)
 183aed0:	10c00217 	ldw	r3,8(r2)
 183aed4:	e0bfff17 	ldw	r2,-4(fp)
 183aed8:	11000217 	ldw	r4,8(r2)
        msg->msg.bc.port, do_connected);
 183aedc:	e0bfff17 	ldw	r2,-4(fp)
 183aee0:	1080030b 	ldhu	r2,12(r2)
    /* Prevent connect while doing any other action. */
    if (msg->conn->state != NETCONN_NONE) {
      msg->err = ERR_ISCONN;
    } else {
      setup_tcp(msg->conn);
      msg->err = tcp_connect(msg->conn->pcb.tcp, msg->msg.bc.ipaddr,
 183aee4:	10bfffcc 	andi	r2,r2,65535
 183aee8:	01c06134 	movhi	r7,388
 183aeec:	39eb1d04 	addi	r7,r7,-21388
 183aef0:	100d883a 	mov	r6,r2
 183aef4:	200b883a 	mov	r5,r4
 183aef8:	1809883a 	mov	r4,r3
 183aefc:	181bd740 	call	181bd74 <tcp_connect>
 183af00:	1007883a 	mov	r3,r2
 183af04:	e0bfff17 	ldw	r2,-4(fp)
 183af08:	10c00105 	stb	r3,4(r2)
        msg->msg.bc.port, do_connected);
      if (msg->err == ERR_OK) {
 183af0c:	e0bfff17 	ldw	r2,-4(fp)
 183af10:	10800103 	ldbu	r2,4(r2)
 183af14:	10803fcc 	andi	r2,r2,255
 183af18:	1080201c 	xori	r2,r2,128
 183af1c:	10bfe004 	addi	r2,r2,-128
 183af20:	1000311e 	bne	r2,zero,183afe8 <do_connect+0x220>
        u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 183af24:	e0bfff17 	ldw	r2,-4(fp)
 183af28:	10800017 	ldw	r2,0(r2)
 183af2c:	10800903 	ldbu	r2,36(r2)
 183af30:	10803fcc 	andi	r2,r2,255
 183af34:	1080008c 	andi	r2,r2,2
 183af38:	1004c03a 	cmpne	r2,r2,zero
 183af3c:	e0bffe05 	stb	r2,-8(fp)
        msg->conn->state = NETCONN_CONNECT;
 183af40:	e0bfff17 	ldw	r2,-4(fp)
 183af44:	10800017 	ldw	r2,0(r2)
 183af48:	00c000c4 	movi	r3,3
 183af4c:	10c00115 	stw	r3,4(r2)
        SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 183af50:	e0bffe03 	ldbu	r2,-8(fp)
 183af54:	10000826 	beq	r2,zero,183af78 <do_connect+0x1b0>
 183af58:	e0bfff17 	ldw	r2,-4(fp)
 183af5c:	10800017 	ldw	r2,0(r2)
 183af60:	e0ffff17 	ldw	r3,-4(fp)
 183af64:	18c00017 	ldw	r3,0(r3)
 183af68:	18c00903 	ldbu	r3,36(r3)
 183af6c:	18c00114 	ori	r3,r3,4
 183af70:	10c00905 	stb	r3,36(r2)
 183af74:	00000806 	br	183af98 <do_connect+0x1d0>
 183af78:	e0bfff17 	ldw	r2,-4(fp)
 183af7c:	10800017 	ldw	r2,0(r2)
 183af80:	e0ffff17 	ldw	r3,-4(fp)
 183af84:	18c00017 	ldw	r3,0(r3)
 183af88:	19000903 	ldbu	r4,36(r3)
 183af8c:	00fffec4 	movi	r3,-5
 183af90:	20c6703a 	and	r3,r4,r3
 183af94:	10c00905 	stb	r3,36(r2)
        if (non_blocking) {
 183af98:	e0bffe03 	ldbu	r2,-8(fp)
 183af9c:	10000426 	beq	r2,zero,183afb0 <do_connect+0x1e8>
          msg->err = ERR_INPROGRESS;
 183afa0:	e0bfff17 	ldw	r2,-4(fp)
 183afa4:	00fffec4 	movi	r3,-5
 183afa8:	10c00105 	stb	r3,4(r2)
          * when the connection is established! */
          return;
        }
      }
    }
    break;
 183afac:	00000e06 	br	183afe8 <do_connect+0x220>
        msg->conn->state = NETCONN_CONNECT;
        SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
        if (non_blocking) {
          msg->err = ERR_INPROGRESS;
        } else {
          msg->conn->current_msg = msg;
 183afb0:	e0bfff17 	ldw	r2,-4(fp)
 183afb4:	10800017 	ldw	r2,0(r2)
 183afb8:	e0ffff17 	ldw	r3,-4(fp)
 183afbc:	10c00b15 	stw	r3,44(r2)
          /* sys_sem_signal() is called from do_connected (or err_tcp()),
          * when the connection is established! */
          return;
 183afc0:	00000f06 	br	183b000 <do_connect+0x238>
      }
    }
    break;
#endif /* LWIP_TCP */
  default:
    LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 183afc4:	01c06134 	movhi	r7,388
 183afc8:	39cc6d04 	addi	r7,r7,12724
 183afcc:	01810144 	movi	r6,1029
 183afd0:	01406134 	movhi	r5,388
 183afd4:	294c7304 	addi	r5,r5,12748
 183afd8:	01006134 	movhi	r4,388
 183afdc:	210c7904 	addi	r4,r4,12772
 183afe0:	1800b240 	call	1800b24 <printf>
 183afe4:	003fff06 	br	183afe4 <__ram_exceptions_end+0xff82acf4>
          * when the connection is established! */
          return;
        }
      }
    }
    break;
 183afe8:	0001883a 	nop
  default:
    LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
    break;
    }
  }
  sys_sem_signal(&msg->conn->op_completed);
 183afec:	e0bfff17 	ldw	r2,-4(fp)
 183aff0:	10800017 	ldw	r2,0(r2)
 183aff4:	10800404 	addi	r2,r2,16
 183aff8:	1009883a 	mov	r4,r2
 183affc:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183b000:	e037883a 	mov	sp,fp
 183b004:	dfc00117 	ldw	ra,4(sp)
 183b008:	df000017 	ldw	fp,0(sp)
 183b00c:	dec00204 	addi	sp,sp,8
 183b010:	f800283a 	ret

0183b014 <do_disconnect>:
 *
 * @param msg the api_msg_msg pointing to the connection to disconnect
 */
void
do_disconnect(struct api_msg_msg *msg)
{
 183b014:	defffd04 	addi	sp,sp,-12
 183b018:	dfc00215 	stw	ra,8(sp)
 183b01c:	df000115 	stw	fp,4(sp)
 183b020:	df000104 	addi	fp,sp,4
 183b024:	e13fff15 	stw	r4,-4(fp)
#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 183b028:	e0bfff17 	ldw	r2,-4(fp)
 183b02c:	10800017 	ldw	r2,0(r2)
 183b030:	10800017 	ldw	r2,0(r2)
 183b034:	10803c0c 	andi	r2,r2,240
 183b038:	10800818 	cmpnei	r2,r2,32
 183b03c:	1000081e 	bne	r2,zero,183b060 <do_disconnect+0x4c>
    udp_disconnect(msg->conn->pcb.udp);
 183b040:	e0bfff17 	ldw	r2,-4(fp)
 183b044:	10800017 	ldw	r2,0(r2)
 183b048:	10800217 	ldw	r2,8(r2)
 183b04c:	1009883a 	mov	r4,r2
 183b050:	182209c0 	call	182209c <udp_disconnect>
    msg->err = ERR_OK;
 183b054:	e0bfff17 	ldw	r2,-4(fp)
 183b058:	10000105 	stb	zero,4(r2)
 183b05c:	00000306 	br	183b06c <do_disconnect+0x58>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
 183b060:	e0bfff17 	ldw	r2,-4(fp)
 183b064:	00fffe84 	movi	r3,-6
 183b068:	10c00105 	stb	r3,4(r2)
  }
  TCPIP_APIMSG_ACK(msg);
 183b06c:	e0bfff17 	ldw	r2,-4(fp)
 183b070:	10800017 	ldw	r2,0(r2)
 183b074:	10800404 	addi	r2,r2,16
 183b078:	1009883a 	mov	r4,r2
 183b07c:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183b080:	0001883a 	nop
 183b084:	e037883a 	mov	sp,fp
 183b088:	dfc00117 	ldw	ra,4(sp)
 183b08c:	df000017 	ldw	fp,0(sp)
 183b090:	dec00204 	addi	sp,sp,8
 183b094:	f800283a 	ret

0183b098 <do_listen>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_listen(struct api_msg_msg *msg)
{
 183b098:	defffc04 	addi	sp,sp,-16
 183b09c:	dfc00315 	stw	ra,12(sp)
 183b0a0:	df000215 	stw	fp,8(sp)
 183b0a4:	df000204 	addi	fp,sp,8
 183b0a8:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 183b0ac:	e0bfff17 	ldw	r2,-4(fp)
 183b0b0:	10800017 	ldw	r2,0(r2)
 183b0b4:	10800303 	ldbu	r2,12(r2)
 183b0b8:	10803fcc 	andi	r2,r2,255
 183b0bc:	1080201c 	xori	r2,r2,128
 183b0c0:	10bfe004 	addi	r2,r2,-128
 183b0c4:	10bffdc8 	cmpgei	r2,r2,-9
 183b0c8:	1000061e 	bne	r2,zero,183b0e4 <do_listen+0x4c>
    msg->err = msg->conn->last_err;
 183b0cc:	e0bfff17 	ldw	r2,-4(fp)
 183b0d0:	10800017 	ldw	r2,0(r2)
 183b0d4:	10c00303 	ldbu	r3,12(r2)
 183b0d8:	e0bfff17 	ldw	r2,-4(fp)
 183b0dc:	10c00105 	stb	r3,4(r2)
 183b0e0:	00006206 	br	183b26c <do_listen+0x1d4>
  } else {
    msg->err = ERR_CONN;
 183b0e4:	e0bfff17 	ldw	r2,-4(fp)
 183b0e8:	00fffcc4 	movi	r3,-13
 183b0ec:	10c00105 	stb	r3,4(r2)
    if (msg->conn->pcb.tcp != NULL) {
 183b0f0:	e0bfff17 	ldw	r2,-4(fp)
 183b0f4:	10800017 	ldw	r2,0(r2)
 183b0f8:	10800217 	ldw	r2,8(r2)
 183b0fc:	10005b26 	beq	r2,zero,183b26c <do_listen+0x1d4>
      if (msg->conn->type == NETCONN_TCP) {
 183b100:	e0bfff17 	ldw	r2,-4(fp)
 183b104:	10800017 	ldw	r2,0(r2)
 183b108:	10800017 	ldw	r2,0(r2)
 183b10c:	10800418 	cmpnei	r2,r2,16
 183b110:	1000531e 	bne	r2,zero,183b260 <do_listen+0x1c8>
        if (msg->conn->state == NETCONN_NONE) {
 183b114:	e0bfff17 	ldw	r2,-4(fp)
 183b118:	10800017 	ldw	r2,0(r2)
 183b11c:	10800117 	ldw	r2,4(r2)
 183b120:	1000521e 	bne	r2,zero,183b26c <do_listen+0x1d4>
#if TCP_LISTEN_BACKLOG
          struct tcp_pcb* lpcb = tcp_listen_with_backlog(msg->conn->pcb.tcp, msg->msg.lb.backlog);
 183b124:	e0bfff17 	ldw	r2,-4(fp)
 183b128:	10800017 	ldw	r2,0(r2)
 183b12c:	10c00217 	ldw	r3,8(r2)
 183b130:	e0bfff17 	ldw	r2,-4(fp)
 183b134:	10800203 	ldbu	r2,8(r2)
 183b138:	10803fcc 	andi	r2,r2,255
 183b13c:	100b883a 	mov	r5,r2
 183b140:	1809883a 	mov	r4,r3
 183b144:	181b8900 	call	181b890 <tcp_listen_with_backlog>
 183b148:	e0bffe15 	stw	r2,-8(fp)
#else  /* TCP_LISTEN_BACKLOG */
          struct tcp_pcb* lpcb = tcp_listen(msg->conn->pcb.tcp);
#endif /* TCP_LISTEN_BACKLOG */
          if (lpcb == NULL) {
 183b14c:	e0bffe17 	ldw	r2,-8(fp)
 183b150:	1000041e 	bne	r2,zero,183b164 <do_listen+0xcc>
            /* in this case, the old pcb is still allocated */
            msg->err = ERR_MEM;
 183b154:	e0bfff17 	ldw	r2,-4(fp)
 183b158:	00ffffc4 	movi	r3,-1
 183b15c:	10c00105 	stb	r3,4(r2)
 183b160:	00004206 	br	183b26c <do_listen+0x1d4>
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 183b164:	e0bfff17 	ldw	r2,-4(fp)
 183b168:	10800017 	ldw	r2,0(r2)
 183b16c:	10800517 	ldw	r2,20(r2)
 183b170:	10000826 	beq	r2,zero,183b194 <do_listen+0xfc>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 183b174:	e0bfff17 	ldw	r2,-4(fp)
 183b178:	10800017 	ldw	r2,0(r2)
 183b17c:	10800504 	addi	r2,r2,20
 183b180:	1009883a 	mov	r4,r2
 183b184:	181536c0 	call	181536c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 183b188:	e0bfff17 	ldw	r2,-4(fp)
 183b18c:	10800017 	ldw	r2,0(r2)
 183b190:	10000515 	stw	zero,20(r2)
            }
            msg->err = ERR_OK;
 183b194:	e0bfff17 	ldw	r2,-4(fp)
 183b198:	10000105 	stb	zero,4(r2)
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 183b19c:	e0bfff17 	ldw	r2,-4(fp)
 183b1a0:	10800017 	ldw	r2,0(r2)
 183b1a4:	10800617 	ldw	r2,24(r2)
 183b1a8:	1000091e 	bne	r2,zero,183b1d0 <do_listen+0x138>
              msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 183b1ac:	e0bfff17 	ldw	r2,-4(fp)
 183b1b0:	10800017 	ldw	r2,0(r2)
 183b1b4:	10800604 	addi	r2,r2,24
 183b1b8:	01420004 	movi	r5,2048
 183b1bc:	1009883a 	mov	r4,r2
 183b1c0:	181529c0 	call	181529c <sys_mbox_new>
 183b1c4:	1007883a 	mov	r3,r2
 183b1c8:	e0bfff17 	ldw	r2,-4(fp)
 183b1cc:	10c00105 	stb	r3,4(r2)
            }
            if (msg->err == ERR_OK) {
 183b1d0:	e0bfff17 	ldw	r2,-4(fp)
 183b1d4:	10800103 	ldbu	r2,4(r2)
 183b1d8:	10803fcc 	andi	r2,r2,255
 183b1dc:	1080201c 	xori	r2,r2,128
 183b1e0:	10bfe004 	addi	r2,r2,-128
 183b1e4:	1000181e 	bne	r2,zero,183b248 <do_listen+0x1b0>
              msg->conn->state = NETCONN_LISTEN;
 183b1e8:	e0bfff17 	ldw	r2,-4(fp)
 183b1ec:	10800017 	ldw	r2,0(r2)
 183b1f0:	00c00084 	movi	r3,2
 183b1f4:	10c00115 	stw	r3,4(r2)
              msg->conn->pcb.tcp = lpcb;
 183b1f8:	e0bfff17 	ldw	r2,-4(fp)
 183b1fc:	10800017 	ldw	r2,0(r2)
 183b200:	e0fffe17 	ldw	r3,-8(fp)
 183b204:	10c00215 	stw	r3,8(r2)
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 183b208:	e0bfff17 	ldw	r2,-4(fp)
 183b20c:	10800017 	ldw	r2,0(r2)
 183b210:	10c00217 	ldw	r3,8(r2)
 183b214:	e0bfff17 	ldw	r2,-4(fp)
 183b218:	10800017 	ldw	r2,0(r2)
 183b21c:	100b883a 	mov	r5,r2
 183b220:	1809883a 	mov	r4,r3
 183b224:	181cfdc0 	call	181cfdc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 183b228:	e0bfff17 	ldw	r2,-4(fp)
 183b22c:	10800017 	ldw	r2,0(r2)
 183b230:	10800217 	ldw	r2,8(r2)
 183b234:	01406134 	movhi	r5,388
 183b238:	29680d04 	addi	r5,r5,-24524
 183b23c:	1009883a 	mov	r4,r2
 183b240:	181d0ac0 	call	181d0ac <tcp_accept>
 183b244:	00000906 	br	183b26c <do_listen+0x1d4>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 183b248:	e13ffe17 	ldw	r4,-8(fp)
 183b24c:	181b3b40 	call	181b3b4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 183b250:	e0bfff17 	ldw	r2,-4(fp)
 183b254:	10800017 	ldw	r2,0(r2)
 183b258:	10000215 	stw	zero,8(r2)
 183b25c:	00000306 	br	183b26c <do_listen+0x1d4>
            }
          }
        }
      } else {
        msg->err = ERR_ARG;
 183b260:	e0bfff17 	ldw	r2,-4(fp)
 183b264:	00fffc84 	movi	r3,-14
 183b268:	10c00105 	stb	r3,4(r2)
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183b26c:	e0bfff17 	ldw	r2,-4(fp)
 183b270:	10800017 	ldw	r2,0(r2)
 183b274:	10800404 	addi	r2,r2,16
 183b278:	1009883a 	mov	r4,r2
 183b27c:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183b280:	0001883a 	nop
 183b284:	e037883a 	mov	sp,fp
 183b288:	dfc00117 	ldw	ra,4(sp)
 183b28c:	df000017 	ldw	fp,0(sp)
 183b290:	dec00204 	addi	sp,sp,8
 183b294:	f800283a 	ret

0183b298 <do_send>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_send(struct api_msg_msg *msg)
{
 183b298:	defffb04 	addi	sp,sp,-20
 183b29c:	dfc00415 	stw	ra,16(sp)
 183b2a0:	df000315 	stw	fp,12(sp)
 183b2a4:	df000304 	addi	fp,sp,12
 183b2a8:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 183b2ac:	e0bfff17 	ldw	r2,-4(fp)
 183b2b0:	10800017 	ldw	r2,0(r2)
 183b2b4:	10800303 	ldbu	r2,12(r2)
 183b2b8:	10803fcc 	andi	r2,r2,255
 183b2bc:	1080201c 	xori	r2,r2,128
 183b2c0:	10bfe004 	addi	r2,r2,-128
 183b2c4:	10bffdc8 	cmpgei	r2,r2,-9
 183b2c8:	1000061e 	bne	r2,zero,183b2e4 <do_send+0x4c>
    msg->err = msg->conn->last_err;
 183b2cc:	e0bfff17 	ldw	r2,-4(fp)
 183b2d0:	10800017 	ldw	r2,0(r2)
 183b2d4:	10c00303 	ldbu	r3,12(r2)
 183b2d8:	e0bfff17 	ldw	r2,-4(fp)
 183b2dc:	10c00105 	stb	r3,4(r2)
 183b2e0:	00007306 	br	183b4b0 <do_send+0x218>
  } else {
    msg->err = ERR_CONN;
 183b2e4:	e0bfff17 	ldw	r2,-4(fp)
 183b2e8:	00fffcc4 	movi	r3,-13
 183b2ec:	10c00105 	stb	r3,4(r2)
    if (msg->conn->pcb.tcp != NULL) {
 183b2f0:	e0bfff17 	ldw	r2,-4(fp)
 183b2f4:	10800017 	ldw	r2,0(r2)
 183b2f8:	10800217 	ldw	r2,8(r2)
 183b2fc:	10006c26 	beq	r2,zero,183b4b0 <do_send+0x218>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183b300:	e0bfff17 	ldw	r2,-4(fp)
 183b304:	10800017 	ldw	r2,0(r2)
 183b308:	10800017 	ldw	r2,0(r2)
 183b30c:	10803c0c 	andi	r2,r2,240
 183b310:	10c00820 	cmpeqi	r3,r2,32
 183b314:	1800291e 	bne	r3,zero,183b3bc <do_send+0x124>
 183b318:	10801020 	cmpeqi	r2,r2,64
 183b31c:	1000011e 	bne	r2,zero,183b324 <do_send+0x8c>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
 183b320:	00006306 	br	183b4b0 <do_send+0x218>
    msg->err = ERR_CONN;
    if (msg->conn->pcb.tcp != NULL) {
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
      case NETCONN_RAW:
        if (ip_addr_isany(&msg->msg.b->addr)) {
 183b324:	e0bfff17 	ldw	r2,-4(fp)
 183b328:	10800217 	ldw	r2,8(r2)
 183b32c:	10800204 	addi	r2,r2,8
 183b330:	10000426 	beq	r2,zero,183b344 <do_send+0xac>
 183b334:	e0bfff17 	ldw	r2,-4(fp)
 183b338:	10800217 	ldw	r2,8(r2)
 183b33c:	10800217 	ldw	r2,8(r2)
 183b340:	10000d1e 	bne	r2,zero,183b378 <do_send+0xe0>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
 183b344:	e0bfff17 	ldw	r2,-4(fp)
 183b348:	10800017 	ldw	r2,0(r2)
 183b34c:	10c00217 	ldw	r3,8(r2)
 183b350:	e0bfff17 	ldw	r2,-4(fp)
 183b354:	10800217 	ldw	r2,8(r2)
 183b358:	10800017 	ldw	r2,0(r2)
 183b35c:	100b883a 	mov	r5,r2
 183b360:	1809883a 	mov	r4,r3
 183b364:	18342780 	call	1834278 <raw_send>
 183b368:	1007883a 	mov	r3,r2
 183b36c:	e0bfff17 	ldw	r2,-4(fp)
 183b370:	10c00105 	stb	r3,4(r2)
        } else {
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
        }
        break;
 183b374:	00004e06 	br	183b4b0 <do_send+0x218>
#if LWIP_RAW
      case NETCONN_RAW:
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
        } else {
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
 183b378:	e0bfff17 	ldw	r2,-4(fp)
 183b37c:	10800017 	ldw	r2,0(r2)
 183b380:	10c00217 	ldw	r3,8(r2)
 183b384:	e0bfff17 	ldw	r2,-4(fp)
 183b388:	10800217 	ldw	r2,8(r2)
 183b38c:	11000017 	ldw	r4,0(r2)
 183b390:	e0bfff17 	ldw	r2,-4(fp)
 183b394:	10800217 	ldw	r2,8(r2)
 183b398:	10800204 	addi	r2,r2,8
 183b39c:	100d883a 	mov	r6,r2
 183b3a0:	200b883a 	mov	r5,r4
 183b3a4:	1809883a 	mov	r4,r3
 183b3a8:	18340f00 	call	18340f0 <raw_sendto>
 183b3ac:	1007883a 	mov	r3,r2
 183b3b0:	e0bfff17 	ldw	r2,-4(fp)
 183b3b4:	10c00105 	stb	r3,4(r2)
        }
        break;
 183b3b8:	00003d06 	br	183b4b0 <do_send+0x218>
#endif
#if LWIP_UDP
      case NETCONN_UDP:
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
 183b3bc:	e0bfff17 	ldw	r2,-4(fp)
 183b3c0:	10800217 	ldw	r2,8(r2)
 183b3c4:	10800204 	addi	r2,r2,8
 183b3c8:	10000426 	beq	r2,zero,183b3dc <do_send+0x144>
 183b3cc:	e0bfff17 	ldw	r2,-4(fp)
 183b3d0:	10800217 	ldw	r2,8(r2)
 183b3d4:	10800217 	ldw	r2,8(r2)
 183b3d8:	1000181e 	bne	r2,zero,183b43c <do_send+0x1a4>
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b3dc:	e0bfff17 	ldw	r2,-4(fp)
 183b3e0:	10800017 	ldw	r2,0(r2)
 183b3e4:	10c00217 	ldw	r3,8(r2)
 183b3e8:	e0bfff17 	ldw	r2,-4(fp)
 183b3ec:	10800217 	ldw	r2,8(r2)
 183b3f0:	11000017 	ldw	r4,0(r2)
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 183b3f4:	e0bfff17 	ldw	r2,-4(fp)
 183b3f8:	10800217 	ldw	r2,8(r2)
 183b3fc:	10800383 	ldbu	r2,14(r2)
#endif
#if LWIP_UDP
      case NETCONN_UDP:
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b400:	10803fcc 	andi	r2,r2,255
 183b404:	1140008c 	andi	r5,r2,2
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 183b408:	e0bfff17 	ldw	r2,-4(fp)
 183b40c:	10800217 	ldw	r2,8(r2)
 183b410:	1080040b 	ldhu	r2,16(r2)
#endif
#if LWIP_UDP
      case NETCONN_UDP:
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b414:	10bfffcc 	andi	r2,r2,65535
 183b418:	100f883a 	mov	r7,r2
 183b41c:	280d883a 	mov	r6,r5
 183b420:	200b883a 	mov	r5,r4
 183b424:	1809883a 	mov	r4,r3
 183b428:	18218000 	call	1821800 <udp_send_chksum>
 183b42c:	1007883a 	mov	r3,r2
 183b430:	e0bfff17 	ldw	r2,-4(fp)
 183b434:	10c00105 	stb	r3,4(r2)
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
 183b438:	00001c06 	br	183b4ac <do_send+0x214>
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b43c:	e0bfff17 	ldw	r2,-4(fp)
 183b440:	10800017 	ldw	r2,0(r2)
 183b444:	11000217 	ldw	r4,8(r2)
 183b448:	e0bfff17 	ldw	r2,-4(fp)
 183b44c:	10800217 	ldw	r2,8(r2)
 183b450:	11400017 	ldw	r5,0(r2)
            &msg->msg.b->addr, msg->msg.b->port,
 183b454:	e0bfff17 	ldw	r2,-4(fp)
 183b458:	10800217 	ldw	r2,8(r2)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b45c:	11800204 	addi	r6,r2,8
            &msg->msg.b->addr, msg->msg.b->port,
 183b460:	e0bfff17 	ldw	r2,-4(fp)
 183b464:	10800217 	ldw	r2,8(r2)
 183b468:	1080030b 	ldhu	r2,12(r2)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b46c:	11ffffcc 	andi	r7,r2,65535
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 183b470:	e0bfff17 	ldw	r2,-4(fp)
 183b474:	10800217 	ldw	r2,8(r2)
 183b478:	10800383 	ldbu	r2,14(r2)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b47c:	10803fcc 	andi	r2,r2,255
 183b480:	1080008c 	andi	r2,r2,2
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 183b484:	e0ffff17 	ldw	r3,-4(fp)
 183b488:	18c00217 	ldw	r3,8(r3)
 183b48c:	18c0040b 	ldhu	r3,16(r3)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b490:	18ffffcc 	andi	r3,r3,65535
 183b494:	d8c00115 	stw	r3,4(sp)
 183b498:	d8800015 	stw	r2,0(sp)
 183b49c:	18218cc0 	call	18218cc <udp_sendto_chksum>
 183b4a0:	1007883a 	mov	r3,r2
 183b4a4:	e0bfff17 	ldw	r2,-4(fp)
 183b4a8:	10c00105 	stb	r3,4(r2)
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
 183b4ac:	0001883a 	nop
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183b4b0:	e0bfff17 	ldw	r2,-4(fp)
 183b4b4:	10800017 	ldw	r2,0(r2)
 183b4b8:	10800404 	addi	r2,r2,16
 183b4bc:	1009883a 	mov	r4,r2
 183b4c0:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183b4c4:	0001883a 	nop
 183b4c8:	e037883a 	mov	sp,fp
 183b4cc:	dfc00117 	ldw	ra,4(sp)
 183b4d0:	df000017 	ldw	fp,0(sp)
 183b4d4:	dec00204 	addi	sp,sp,8
 183b4d8:	f800283a 	ret

0183b4dc <do_recv>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_recv(struct api_msg_msg *msg)
{
 183b4dc:	defffb04 	addi	sp,sp,-20
 183b4e0:	dfc00415 	stw	ra,16(sp)
 183b4e4:	df000315 	stw	fp,12(sp)
 183b4e8:	df000304 	addi	fp,sp,12
 183b4ec:	e13fff15 	stw	r4,-4(fp)
  msg->err = ERR_OK;
 183b4f0:	e0bfff17 	ldw	r2,-4(fp)
 183b4f4:	10000105 	stb	zero,4(r2)
  if (msg->conn->pcb.tcp != NULL) {
 183b4f8:	e0bfff17 	ldw	r2,-4(fp)
 183b4fc:	10800017 	ldw	r2,0(r2)
 183b500:	10800217 	ldw	r2,8(r2)
 183b504:	10002926 	beq	r2,zero,183b5ac <do_recv+0xd0>
    if (msg->conn->type == NETCONN_TCP) {
 183b508:	e0bfff17 	ldw	r2,-4(fp)
 183b50c:	10800017 	ldw	r2,0(r2)
 183b510:	10800017 	ldw	r2,0(r2)
 183b514:	10800418 	cmpnei	r2,r2,16
 183b518:	1000241e 	bne	r2,zero,183b5ac <do_recv+0xd0>
#if TCP_LISTEN_BACKLOG
      if (msg->conn->pcb.tcp->state == LISTEN) {
 183b51c:	e0bfff17 	ldw	r2,-4(fp)
 183b520:	10800017 	ldw	r2,0(r2)
 183b524:	10800217 	ldw	r2,8(r2)
 183b528:	10800617 	ldw	r2,24(r2)
 183b52c:	10800058 	cmpnei	r2,r2,1
 183b530:	1000071e 	bne	r2,zero,183b550 <do_recv+0x74>
        tcp_accepted(msg->conn->pcb.tcp);
 183b534:	e0bfff17 	ldw	r2,-4(fp)
 183b538:	10800017 	ldw	r2,0(r2)
 183b53c:	10800217 	ldw	r2,8(r2)
 183b540:	10c00843 	ldbu	r3,33(r2)
 183b544:	18ffffc4 	addi	r3,r3,-1
 183b548:	10c00845 	stb	r3,33(r2)
 183b54c:	00001706 	br	183b5ac <do_recv+0xd0>
      } else
#endif /* TCP_LISTEN_BACKLOG */
      {
        u32_t remaining = msg->msg.r.len;
 183b550:	e0bfff17 	ldw	r2,-4(fp)
 183b554:	10800217 	ldw	r2,8(r2)
 183b558:	e0bffd15 	stw	r2,-12(fp)
        do {
          u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 183b55c:	e0bffd17 	ldw	r2,-12(fp)
 183b560:	00ffffd4 	movui	r3,65535
 183b564:	18800236 	bltu	r3,r2,183b570 <do_recv+0x94>
 183b568:	e0bffd17 	ldw	r2,-12(fp)
 183b56c:	00000106 	br	183b574 <do_recv+0x98>
 183b570:	00bfffc4 	movi	r2,-1
 183b574:	e0bffe0d 	sth	r2,-8(fp)
          tcp_recved(msg->conn->pcb.tcp, recved);
 183b578:	e0bfff17 	ldw	r2,-4(fp)
 183b57c:	10800017 	ldw	r2,0(r2)
 183b580:	10800217 	ldw	r2,8(r2)
 183b584:	e0fffe0b 	ldhu	r3,-8(fp)
 183b588:	180b883a 	mov	r5,r3
 183b58c:	1009883a 	mov	r4,r2
 183b590:	181bbf40 	call	181bbf4 <tcp_recved>
          remaining -= recved;
 183b594:	e0bffe0b 	ldhu	r2,-8(fp)
 183b598:	e0fffd17 	ldw	r3,-12(fp)
 183b59c:	1885c83a 	sub	r2,r3,r2
 183b5a0:	e0bffd15 	stw	r2,-12(fp)
        }while(remaining != 0);
 183b5a4:	e0bffd17 	ldw	r2,-12(fp)
 183b5a8:	103fec1e 	bne	r2,zero,183b55c <__ram_exceptions_end+0xff82b26c>
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183b5ac:	e0bfff17 	ldw	r2,-4(fp)
 183b5b0:	10800017 	ldw	r2,0(r2)
 183b5b4:	10800404 	addi	r2,r2,16
 183b5b8:	1009883a 	mov	r4,r2
 183b5bc:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183b5c0:	0001883a 	nop
 183b5c4:	e037883a 	mov	sp,fp
 183b5c8:	dfc00117 	ldw	ra,4(sp)
 183b5cc:	df000017 	ldw	fp,0(sp)
 183b5d0:	dec00204 	addi	sp,sp,8
 183b5d4:	f800283a 	ret

0183b5d8 <do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
do_writemore(struct netconn *conn)
{
 183b5d8:	defff804 	addi	sp,sp,-32
 183b5dc:	dfc00715 	stw	ra,28(sp)
 183b5e0:	df000615 	stw	fp,24(sp)
 183b5e4:	df000604 	addi	fp,sp,24
 183b5e8:	e13fff15 	stw	r4,-4(fp)
  err_t err;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 183b5ec:	e03ffb05 	stb	zero,-20(fp)
  size_t diff;
  u8_t dontblock = netconn_is_nonblocking(conn) ||
 183b5f0:	e0bfff17 	ldw	r2,-4(fp)
 183b5f4:	10800903 	ldbu	r2,36(r2)
 183b5f8:	10803fcc 	andi	r2,r2,255
 183b5fc:	1080008c 	andi	r2,r2,2
 183b600:	1000061e 	bne	r2,zero,183b61c <do_writemore+0x44>
       (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
 183b604:	e0bfff17 	ldw	r2,-4(fp)
 183b608:	10800b17 	ldw	r2,44(r2)
 183b60c:	10800403 	ldbu	r2,16(r2)
 183b610:	10803fcc 	andi	r2,r2,255
 183b614:	1080010c 	andi	r2,r2,4
  err_t err;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock = netconn_is_nonblocking(conn) ||
 183b618:	10000226 	beq	r2,zero,183b624 <do_writemore+0x4c>
 183b61c:	00800044 	movi	r2,1
 183b620:	00000106 	br	183b628 <do_writemore+0x50>
 183b624:	0005883a 	mov	r2,zero
 183b628:	e0bffb85 	stb	r2,-18(fp)
       (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
  u8_t apiflags = conn->current_msg->msg.w.apiflags;
 183b62c:	e0bfff17 	ldw	r2,-4(fp)
 183b630:	10800b17 	ldw	r2,44(r2)
 183b634:	10800403 	ldbu	r2,16(r2)
 183b638:	e0bffb45 	stb	r2,-19(fp)
      conn->current_msg->msg.w.len = conn->write_offset;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 183b63c:	e0bfff17 	ldw	r2,-4(fp)
 183b640:	10800b17 	ldw	r2,44(r2)
 183b644:	10c00217 	ldw	r3,8(r2)
 183b648:	e0bfff17 	ldw	r2,-4(fp)
 183b64c:	10800a17 	ldw	r2,40(r2)
 183b650:	1885883a 	add	r2,r3,r2
 183b654:	e0bffc15 	stw	r2,-16(fp)
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 183b658:	e0bfff17 	ldw	r2,-4(fp)
 183b65c:	10800b17 	ldw	r2,44(r2)
 183b660:	10c00317 	ldw	r3,12(r2)
 183b664:	e0bfff17 	ldw	r2,-4(fp)
 183b668:	10800a17 	ldw	r2,40(r2)
 183b66c:	1885c83a 	sub	r2,r3,r2
 183b670:	e0bffd15 	stw	r2,-12(fp)
    if (diff > 0xffffUL) { /* max_u16_t */
 183b674:	e0bffd17 	ldw	r2,-12(fp)
 183b678:	00ffffd4 	movui	r3,65535
 183b67c:	1880062e 	bgeu	r3,r2,183b698 <do_writemore+0xc0>
      len = 0xffff;
 183b680:	00bfffc4 	movi	r2,-1
 183b684:	e0bffa8d 	sth	r2,-22(fp)
#if LWIP_TCPIP_CORE_LOCKING
      conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
      apiflags |= TCP_WRITE_FLAG_MORE;
 183b688:	e0bffb43 	ldbu	r2,-19(fp)
 183b68c:	10800094 	ori	r2,r2,2
 183b690:	e0bffb45 	stb	r2,-19(fp)
 183b694:	00000206 	br	183b6a0 <do_writemore+0xc8>
    } else {
      len = (u16_t)diff;
 183b698:	e0bffd17 	ldw	r2,-12(fp)
 183b69c:	e0bffa8d 	sth	r2,-22(fp)
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 183b6a0:	e0bfff17 	ldw	r2,-4(fp)
 183b6a4:	10800217 	ldw	r2,8(r2)
 183b6a8:	10801a8b 	ldhu	r2,106(r2)
 183b6ac:	e0bffe0d 	sth	r2,-8(fp)
    if (available < len) {
 183b6b0:	e0fffe0b 	ldhu	r3,-8(fp)
 183b6b4:	e0bffa8b 	ldhu	r2,-22(fp)
 183b6b8:	18800c2e 	bgeu	r3,r2,183b6ec <do_writemore+0x114>
      /* don't try to write more than sendbuf */
      len = available;
 183b6bc:	e0bffe0b 	ldhu	r2,-8(fp)
 183b6c0:	e0bffa8d 	sth	r2,-22(fp)
      if (dontblock){ 
 183b6c4:	e0bffb83 	ldbu	r2,-18(fp)
 183b6c8:	10000526 	beq	r2,zero,183b6e0 <do_writemore+0x108>
        if (!len) {
 183b6cc:	e0bffa8b 	ldhu	r2,-22(fp)
 183b6d0:	1000061e 	bne	r2,zero,183b6ec <do_writemore+0x114>
          err = ERR_WOULDBLOCK;
 183b6d4:	00bffe44 	movi	r2,-7
 183b6d8:	e0bffa05 	stb	r2,-24(fp)
          goto err_mem;
 183b6dc:	00001206 	br	183b728 <do_writemore+0x150>
        }
      } else {
#if LWIP_TCPIP_CORE_LOCKING
        conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
        apiflags |= TCP_WRITE_FLAG_MORE;
 183b6e0:	e0bffb43 	ldbu	r2,-19(fp)
 183b6e4:	10800094 	ori	r2,r2,2
 183b6e8:	e0bffb45 	stb	r2,-19(fp)
      }
    }
    LWIP_ASSERT("do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 183b6ec:	e0bfff17 	ldw	r2,-4(fp)
 183b6f0:	10800217 	ldw	r2,8(r2)
 183b6f4:	e0fffa8b 	ldhu	r3,-22(fp)
 183b6f8:	e13ffb43 	ldbu	r4,-19(fp)
 183b6fc:	200f883a 	mov	r7,r4
 183b700:	180d883a 	mov	r6,r3
 183b704:	e17ffc17 	ldw	r5,-16(fp)
 183b708:	1009883a 	mov	r4,r2
 183b70c:	181e0780 	call	181e078 <tcp_write>
 183b710:	e0bffa05 	stb	r2,-24(fp)
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 183b714:	e0bffa07 	ldb	r2,-24(fp)
 183b718:	10000326 	beq	r2,zero,183b728 <do_writemore+0x150>
 183b71c:	e0bffa07 	ldb	r2,-24(fp)
 183b720:	10bfffd8 	cmpnei	r2,r2,-1
 183b724:	10002e1e 	bne	r2,zero,183b7e0 <do_writemore+0x208>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 183b728:	e0bffb83 	ldbu	r2,-18(fp)
 183b72c:	10001626 	beq	r2,zero,183b788 <do_writemore+0x1b0>
 183b730:	e0fffa8b 	ldhu	r3,-22(fp)
 183b734:	e0bfff17 	ldw	r2,-4(fp)
 183b738:	10800b17 	ldw	r2,44(r2)
 183b73c:	10800317 	ldw	r2,12(r2)
 183b740:	1880112e 	bgeu	r3,r2,183b788 <do_writemore+0x1b0>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 183b744:	e0bfff17 	ldw	r2,-4(fp)
 183b748:	10800c17 	ldw	r2,48(r2)
 183b74c:	10000726 	beq	r2,zero,183b76c <do_writemore+0x194>
 183b750:	e0bfff17 	ldw	r2,-4(fp)
 183b754:	10800c17 	ldw	r2,48(r2)
 183b758:	e0fffa8b 	ldhu	r3,-22(fp)
 183b75c:	180d883a 	mov	r6,r3
 183b760:	014000c4 	movi	r5,3
 183b764:	e13fff17 	ldw	r4,-4(fp)
 183b768:	103ee83a 	callr	r2
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 183b76c:	e0bfff17 	ldw	r2,-4(fp)
 183b770:	10800903 	ldbu	r2,36(r2)
 183b774:	10800414 	ori	r2,r2,16
 183b778:	1007883a 	mov	r3,r2
 183b77c:	e0bfff17 	ldw	r2,-4(fp)
 183b780:	10c00905 	stb	r3,36(r2)
 183b784:	00001606 	br	183b7e0 <do_writemore+0x208>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 183b788:	e0bfff17 	ldw	r2,-4(fp)
 183b78c:	10800217 	ldw	r2,8(r2)
 183b790:	10801a8b 	ldhu	r2,106(r2)
 183b794:	10bfffcc 	andi	r2,r2,65535
 183b798:	10816d70 	cmpltui	r2,r2,1461
 183b79c:	1000061e 	bne	r2,zero,183b7b8 <do_writemore+0x1e0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 183b7a0:	e0bfff17 	ldw	r2,-4(fp)
 183b7a4:	10800217 	ldw	r2,8(r2)
 183b7a8:	10801b0b 	ldhu	r2,108(r2)
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 183b7ac:	10bfffcc 	andi	r2,r2,65535
 183b7b0:	10800130 	cmpltui	r2,r2,4
 183b7b4:	10000a1e 	bne	r2,zero,183b7e0 <do_writemore+0x208>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 183b7b8:	e0bfff17 	ldw	r2,-4(fp)
 183b7bc:	10800c17 	ldw	r2,48(r2)
 183b7c0:	10000726 	beq	r2,zero,183b7e0 <do_writemore+0x208>
 183b7c4:	e0bfff17 	ldw	r2,-4(fp)
 183b7c8:	10800c17 	ldw	r2,48(r2)
 183b7cc:	e0fffa8b 	ldhu	r3,-22(fp)
 183b7d0:	180d883a 	mov	r6,r3
 183b7d4:	014000c4 	movi	r5,3
 183b7d8:	e13fff17 	ldw	r4,-4(fp)
 183b7dc:	103ee83a 	callr	r2
      }
    }

    if (err == ERR_OK) {
 183b7e0:	e0bffa07 	ldb	r2,-24(fp)
 183b7e4:	10001c1e 	bne	r2,zero,183b858 <do_writemore+0x280>
      conn->write_offset += len;
 183b7e8:	e0bfff17 	ldw	r2,-4(fp)
 183b7ec:	10c00a17 	ldw	r3,40(r2)
 183b7f0:	e0bffa8b 	ldhu	r2,-22(fp)
 183b7f4:	1887883a 	add	r3,r3,r2
 183b7f8:	e0bfff17 	ldw	r2,-4(fp)
 183b7fc:	10c00a15 	stw	r3,40(r2)
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 183b800:	e0bfff17 	ldw	r2,-4(fp)
 183b804:	10c00a17 	ldw	r3,40(r2)
 183b808:	e0bfff17 	ldw	r2,-4(fp)
 183b80c:	10800b17 	ldw	r2,44(r2)
 183b810:	10800317 	ldw	r2,12(r2)
 183b814:	18800226 	beq	r3,r2,183b820 <do_writemore+0x248>
 183b818:	e0bffb83 	ldbu	r2,-18(fp)
 183b81c:	10000926 	beq	r2,zero,183b844 <do_writemore+0x26c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 183b820:	e0bfff17 	ldw	r2,-4(fp)
 183b824:	10800b17 	ldw	r2,44(r2)
 183b828:	e0ffff17 	ldw	r3,-4(fp)
 183b82c:	18c00a17 	ldw	r3,40(r3)
 183b830:	10c00315 	stw	r3,12(r2)
        /* everything was written */
        write_finished = 1;
 183b834:	00800044 	movi	r2,1
 183b838:	e0bffb05 	stb	r2,-20(fp)
        conn->write_offset = 0;
 183b83c:	e0bfff17 	ldw	r2,-4(fp)
 183b840:	10000a15 	stw	zero,40(r2)
      }
      tcp_output(conn->pcb.tcp);
 183b844:	e0bfff17 	ldw	r2,-4(fp)
 183b848:	10800217 	ldw	r2,8(r2)
 183b84c:	1009883a 	mov	r4,r2
 183b850:	181ee2c0 	call	181ee2c <tcp_output>
 183b854:	00000f06 	br	183b894 <do_writemore+0x2bc>
    } else if ((err == ERR_MEM) && !dontblock) {
 183b858:	e0bffa07 	ldb	r2,-24(fp)
 183b85c:	10bfffd8 	cmpnei	r2,r2,-1
 183b860:	1000071e 	bne	r2,zero,183b880 <do_writemore+0x2a8>
 183b864:	e0bffb83 	ldbu	r2,-18(fp)
 183b868:	1000051e 	bne	r2,zero,183b880 <do_writemore+0x2a8>
      /* If ERR_MEM, we wait for sent_tcp or poll_tcp to be called
         we do NOT return to the application thread, since ERR_MEM is
         only a temporary error! */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      tcp_output(conn->pcb.tcp);
 183b86c:	e0bfff17 	ldw	r2,-4(fp)
 183b870:	10800217 	ldw	r2,8(r2)
 183b874:	1009883a 	mov	r4,r2
 183b878:	181ee2c0 	call	181ee2c <tcp_output>
 183b87c:	00000506 	br	183b894 <do_writemore+0x2bc>
      conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 183b880:	00800044 	movi	r2,1
 183b884:	e0bffb05 	stb	r2,-20(fp)
      conn->current_msg->msg.w.len = 0;
 183b888:	e0bfff17 	ldw	r2,-4(fp)
 183b88c:	10800b17 	ldw	r2,44(r2)
 183b890:	10000315 	stw	zero,12(r2)
    }
  }
  if (write_finished) {
 183b894:	e0bffb03 	ldbu	r2,-20(fp)
 183b898:	10000c26 	beq	r2,zero,183b8cc <do_writemore+0x2f4>
    /* everything was written: set back connection state
       and back to application task */
    conn->current_msg->err = err;
 183b89c:	e0bfff17 	ldw	r2,-4(fp)
 183b8a0:	10800b17 	ldw	r2,44(r2)
 183b8a4:	e0fffa03 	ldbu	r3,-24(fp)
 183b8a8:	10c00105 	stb	r3,4(r2)
    conn->current_msg = NULL;
 183b8ac:	e0bfff17 	ldw	r2,-4(fp)
 183b8b0:	10000b15 	stw	zero,44(r2)
    conn->state = NETCONN_NONE;
 183b8b4:	e0bfff17 	ldw	r2,-4(fp)
 183b8b8:	10000115 	stw	zero,4(r2)
#if LWIP_TCPIP_CORE_LOCKING
    if ((conn->flags & NETCONN_FLAG_WRITE_DELAYED) != 0)
#endif
    {
      sys_sem_signal(&conn->op_completed);
 183b8bc:	e0bfff17 	ldw	r2,-4(fp)
 183b8c0:	10800404 	addi	r2,r2,16
 183b8c4:	1009883a 	mov	r4,r2
 183b8c8:	1814fcc0 	call	1814fcc <sys_sem_signal>
  }
#if LWIP_TCPIP_CORE_LOCKING
  else
    return ERR_MEM;
#endif
  return ERR_OK;
 183b8cc:	0005883a 	mov	r2,zero
}
 183b8d0:	e037883a 	mov	sp,fp
 183b8d4:	dfc00117 	ldw	ra,4(sp)
 183b8d8:	df000017 	ldw	fp,0(sp)
 183b8dc:	dec00204 	addi	sp,sp,8
 183b8e0:	f800283a 	ret

0183b8e4 <do_write>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_write(struct api_msg_msg *msg)
{
 183b8e4:	defffd04 	addi	sp,sp,-12
 183b8e8:	dfc00215 	stw	ra,8(sp)
 183b8ec:	df000115 	stw	fp,4(sp)
 183b8f0:	df000104 	addi	fp,sp,4
 183b8f4:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 183b8f8:	e0bfff17 	ldw	r2,-4(fp)
 183b8fc:	10800017 	ldw	r2,0(r2)
 183b900:	10800303 	ldbu	r2,12(r2)
 183b904:	10803fcc 	andi	r2,r2,255
 183b908:	1080201c 	xori	r2,r2,128
 183b90c:	10bfe004 	addi	r2,r2,-128
 183b910:	10bffdc8 	cmpgei	r2,r2,-9
 183b914:	1000061e 	bne	r2,zero,183b930 <do_write+0x4c>
    msg->err = msg->conn->last_err;
 183b918:	e0bfff17 	ldw	r2,-4(fp)
 183b91c:	10800017 	ldw	r2,0(r2)
 183b920:	10c00303 	ldbu	r3,12(r2)
 183b924:	e0bfff17 	ldw	r2,-4(fp)
 183b928:	10c00105 	stb	r3,4(r2)
 183b92c:	00002806 	br	183b9d0 <do_write+0xec>
  } else {
    if (msg->conn->type == NETCONN_TCP) {
 183b930:	e0bfff17 	ldw	r2,-4(fp)
 183b934:	10800017 	ldw	r2,0(r2)
 183b938:	10800017 	ldw	r2,0(r2)
 183b93c:	10800418 	cmpnei	r2,r2,16
 183b940:	1000201e 	bne	r2,zero,183b9c4 <do_write+0xe0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 183b944:	e0bfff17 	ldw	r2,-4(fp)
 183b948:	10800017 	ldw	r2,0(r2)
 183b94c:	10800117 	ldw	r2,4(r2)
 183b950:	10000426 	beq	r2,zero,183b964 <do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 183b954:	e0bfff17 	ldw	r2,-4(fp)
 183b958:	00fffec4 	movi	r3,-5
 183b95c:	10c00105 	stb	r3,4(r2)
 183b960:	00001b06 	br	183b9d0 <do_write+0xec>
      } else if (msg->conn->pcb.tcp != NULL) {
 183b964:	e0bfff17 	ldw	r2,-4(fp)
 183b968:	10800017 	ldw	r2,0(r2)
 183b96c:	10800217 	ldw	r2,8(r2)
 183b970:	10001026 	beq	r2,zero,183b9b4 <do_write+0xd0>
        msg->conn->state = NETCONN_WRITE;
 183b974:	e0bfff17 	ldw	r2,-4(fp)
 183b978:	10800017 	ldw	r2,0(r2)
 183b97c:	00c00044 	movi	r3,1
 183b980:	10c00115 	stw	r3,4(r2)
        /* set all the variables used by do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
        msg->conn->current_msg = msg;
 183b984:	e0bfff17 	ldw	r2,-4(fp)
 183b988:	10800017 	ldw	r2,0(r2)
 183b98c:	e0ffff17 	ldw	r3,-4(fp)
 183b990:	10c00b15 	stw	r3,44(r2)
        msg->conn->write_offset = 0;
 183b994:	e0bfff17 	ldw	r2,-4(fp)
 183b998:	10800017 	ldw	r2,0(r2)
 183b99c:	10000a15 	stw	zero,40(r2)
          sys_arch_sem_wait(&msg->conn->op_completed, 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        do_writemore(msg->conn);
 183b9a0:	e0bfff17 	ldw	r2,-4(fp)
 183b9a4:	10800017 	ldw	r2,0(r2)
 183b9a8:	1009883a 	mov	r4,r2
 183b9ac:	183b5d80 	call	183b5d8 <do_writemore>
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if do_writemore was called, don't ACK the APIMSG
           since do_writemore ACKs it! */
        return;
 183b9b0:	00000c06 	br	183b9e4 <do_write+0x100>
      } else {
        msg->err = ERR_CONN;
 183b9b4:	e0bfff17 	ldw	r2,-4(fp)
 183b9b8:	00fffcc4 	movi	r3,-13
 183b9bc:	10c00105 	stb	r3,4(r2)
 183b9c0:	00000306 	br	183b9d0 <do_write+0xec>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 183b9c4:	e0bfff17 	ldw	r2,-4(fp)
 183b9c8:	00fffe84 	movi	r3,-6
 183b9cc:	10c00105 	stb	r3,4(r2)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183b9d0:	e0bfff17 	ldw	r2,-4(fp)
 183b9d4:	10800017 	ldw	r2,0(r2)
 183b9d8:	10800404 	addi	r2,r2,16
 183b9dc:	1009883a 	mov	r4,r2
 183b9e0:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183b9e4:	e037883a 	mov	sp,fp
 183b9e8:	dfc00117 	ldw	ra,4(sp)
 183b9ec:	df000017 	ldw	fp,0(sp)
 183b9f0:	dec00204 	addi	sp,sp,8
 183b9f4:	f800283a 	ret

0183b9f8 <do_getaddr>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_getaddr(struct api_msg_msg *msg)
{
 183b9f8:	defffd04 	addi	sp,sp,-12
 183b9fc:	dfc00215 	stw	ra,8(sp)
 183ba00:	df000115 	stw	fp,4(sp)
 183ba04:	df000104 	addi	fp,sp,4
 183ba08:	e13fff15 	stw	r4,-4(fp)
  if (msg->conn->pcb.ip != NULL) {
 183ba0c:	e0bfff17 	ldw	r2,-4(fp)
 183ba10:	10800017 	ldw	r2,0(r2)
 183ba14:	10800217 	ldw	r2,8(r2)
 183ba18:	10005f26 	beq	r2,zero,183bb98 <do_getaddr+0x1a0>
    *(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip :
 183ba1c:	e0bfff17 	ldw	r2,-4(fp)
 183ba20:	10800217 	ldw	r2,8(r2)
 183ba24:	e0ffff17 	ldw	r3,-4(fp)
 183ba28:	18c00403 	ldbu	r3,16(r3)
 183ba2c:	18c03fcc 	andi	r3,r3,255
 183ba30:	18000626 	beq	r3,zero,183ba4c <do_getaddr+0x54>
 183ba34:	e0ffff17 	ldw	r3,-4(fp)
 183ba38:	18c00017 	ldw	r3,0(r3)
 183ba3c:	18c00217 	ldw	r3,8(r3)
 183ba40:	18c00017 	ldw	r3,0(r3)
 183ba44:	10c00015 	stw	r3,0(r2)
 183ba48:	00000506 	br	183ba60 <do_getaddr+0x68>
                             msg->conn->pcb.ip->remote_ip);
 183ba4c:	e0ffff17 	ldw	r3,-4(fp)
 183ba50:	18c00017 	ldw	r3,0(r3)
 183ba54:	18c00217 	ldw	r3,8(r3)
 */
void
do_getaddr(struct api_msg_msg *msg)
{
  if (msg->conn->pcb.ip != NULL) {
    *(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip :
 183ba58:	18c00117 	ldw	r3,4(r3)
 183ba5c:	10c00015 	stw	r3,0(r2)
                             msg->conn->pcb.ip->remote_ip);

    msg->err = ERR_OK;
 183ba60:	e0bfff17 	ldw	r2,-4(fp)
 183ba64:	10000105 	stb	zero,4(r2)
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183ba68:	e0bfff17 	ldw	r2,-4(fp)
 183ba6c:	10800017 	ldw	r2,0(r2)
 183ba70:	10800017 	ldw	r2,0(r2)
 183ba74:	10803c0c 	andi	r2,r2,240
 183ba78:	10c00820 	cmpeqi	r3,r2,32
 183ba7c:	1800161e 	bne	r3,zero,183bad8 <do_getaddr+0xe0>
 183ba80:	10c01020 	cmpeqi	r3,r2,64
 183ba84:	1800031e 	bne	r3,zero,183ba94 <do_getaddr+0x9c>
 183ba88:	10800420 	cmpeqi	r2,r2,16
 183ba8c:	1000311e 	bne	r2,zero,183bb54 <do_getaddr+0x15c>
      *(msg->msg.ad.port) = (msg->msg.ad.local?msg->conn->pcb.tcp->local_port:msg->conn->pcb.tcp->remote_port);
      break;
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
      break;
 183ba90:	00004406 	br	183bba4 <do_getaddr+0x1ac>

    msg->err = ERR_OK;
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
 183ba94:	e0bfff17 	ldw	r2,-4(fp)
 183ba98:	10800403 	ldbu	r2,16(r2)
 183ba9c:	10803fcc 	andi	r2,r2,255
 183baa0:	10000926 	beq	r2,zero,183bac8 <do_getaddr+0xd0>
        *(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
 183baa4:	e0bfff17 	ldw	r2,-4(fp)
 183baa8:	10800317 	ldw	r2,12(r2)
 183baac:	e0ffff17 	ldw	r3,-4(fp)
 183bab0:	18c00017 	ldw	r3,0(r3)
 183bab4:	18c00217 	ldw	r3,8(r3)
 183bab8:	18c00403 	ldbu	r3,16(r3)
 183babc:	18c03fcc 	andi	r3,r3,255
 183bac0:	10c0000d 	sth	r3,0(r2)
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
 183bac4:	00003706 	br	183bba4 <do_getaddr+0x1ac>
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
        *(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
 183bac8:	e0bfff17 	ldw	r2,-4(fp)
 183bacc:	00fffcc4 	movi	r3,-13
 183bad0:	10c00105 	stb	r3,4(r2)
      }
      break;
 183bad4:	00003306 	br	183bba4 <do_getaddr+0x1ac>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 183bad8:	e0bfff17 	ldw	r2,-4(fp)
 183badc:	10800403 	ldbu	r2,16(r2)
 183bae0:	10803fcc 	andi	r2,r2,255
 183bae4:	10000826 	beq	r2,zero,183bb08 <do_getaddr+0x110>
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 183bae8:	e0bfff17 	ldw	r2,-4(fp)
 183baec:	10800317 	ldw	r2,12(r2)
 183baf0:	e0ffff17 	ldw	r3,-4(fp)
 183baf4:	18c00017 	ldw	r3,0(r3)
 183baf8:	18c00217 	ldw	r3,8(r3)
 183bafc:	18c0048b 	ldhu	r3,18(r3)
 183bb00:	10c0000d 	sth	r3,0(r2)
          msg->err = ERR_CONN;
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 183bb04:	00002706 	br	183bba4 <do_getaddr+0x1ac>
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 183bb08:	e0bfff17 	ldw	r2,-4(fp)
 183bb0c:	10800017 	ldw	r2,0(r2)
 183bb10:	10800217 	ldw	r2,8(r2)
 183bb14:	10800403 	ldbu	r2,16(r2)
 183bb18:	10803fcc 	andi	r2,r2,255
 183bb1c:	1080010c 	andi	r2,r2,4
 183bb20:	1000041e 	bne	r2,zero,183bb34 <do_getaddr+0x13c>
          msg->err = ERR_CONN;
 183bb24:	e0bfff17 	ldw	r2,-4(fp)
 183bb28:	00fffcc4 	movi	r3,-13
 183bb2c:	10c00105 	stb	r3,4(r2)
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 183bb30:	00001c06 	br	183bba4 <do_getaddr+0x1ac>
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
          msg->err = ERR_CONN;
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 183bb34:	e0bfff17 	ldw	r2,-4(fp)
 183bb38:	10800317 	ldw	r2,12(r2)
 183bb3c:	e0ffff17 	ldw	r3,-4(fp)
 183bb40:	18c00017 	ldw	r3,0(r3)
 183bb44:	18c00217 	ldw	r3,8(r3)
 183bb48:	18c0050b 	ldhu	r3,20(r3)
 183bb4c:	10c0000d 	sth	r3,0(r2)
        }
      }
      break;
 183bb50:	00001406 	br	183bba4 <do_getaddr+0x1ac>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      *(msg->msg.ad.port) = (msg->msg.ad.local?msg->conn->pcb.tcp->local_port:msg->conn->pcb.tcp->remote_port);
 183bb54:	e0bfff17 	ldw	r2,-4(fp)
 183bb58:	10c00317 	ldw	r3,12(r2)
 183bb5c:	e0bfff17 	ldw	r2,-4(fp)
 183bb60:	10800403 	ldbu	r2,16(r2)
 183bb64:	10803fcc 	andi	r2,r2,255
 183bb68:	10000526 	beq	r2,zero,183bb80 <do_getaddr+0x188>
 183bb6c:	e0bfff17 	ldw	r2,-4(fp)
 183bb70:	10800017 	ldw	r2,0(r2)
 183bb74:	10800217 	ldw	r2,8(r2)
 183bb78:	1080078b 	ldhu	r2,30(r2)
 183bb7c:	00000406 	br	183bb90 <do_getaddr+0x198>
 183bb80:	e0bfff17 	ldw	r2,-4(fp)
 183bb84:	10800017 	ldw	r2,0(r2)
 183bb88:	10800217 	ldw	r2,8(r2)
 183bb8c:	1080080b 	ldhu	r2,32(r2)
 183bb90:	1880000d 	sth	r2,0(r3)
      break;
 183bb94:	00000306 	br	183bba4 <do_getaddr+0x1ac>
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
      break;
    }
  } else {
    msg->err = ERR_CONN;
 183bb98:	e0bfff17 	ldw	r2,-4(fp)
 183bb9c:	00fffcc4 	movi	r3,-13
 183bba0:	10c00105 	stb	r3,4(r2)
  }
  TCPIP_APIMSG_ACK(msg);
 183bba4:	e0bfff17 	ldw	r2,-4(fp)
 183bba8:	10800017 	ldw	r2,0(r2)
 183bbac:	10800404 	addi	r2,r2,16
 183bbb0:	1009883a 	mov	r4,r2
 183bbb4:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183bbb8:	0001883a 	nop
 183bbbc:	e037883a 	mov	sp,fp
 183bbc0:	dfc00117 	ldw	ra,4(sp)
 183bbc4:	df000017 	ldw	fp,0(sp)
 183bbc8:	dec00204 	addi	sp,sp,8
 183bbcc:	f800283a 	ret

0183bbd0 <do_close>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_close(struct api_msg_msg *msg)
{
 183bbd0:	defffd04 	addi	sp,sp,-12
 183bbd4:	dfc00215 	stw	ra,8(sp)
 183bbd8:	df000115 	stw	fp,4(sp)
 183bbdc:	df000104 	addi	fp,sp,4
 183bbe0:	e13fff15 	stw	r4,-4(fp)
#if LWIP_TCP
  /* @todo: abort running write/connect? */
  if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)) {
 183bbe4:	e0bfff17 	ldw	r2,-4(fp)
 183bbe8:	10800017 	ldw	r2,0(r2)
 183bbec:	10800117 	ldw	r2,4(r2)
 183bbf0:	10000926 	beq	r2,zero,183bc18 <do_close+0x48>
 183bbf4:	e0bfff17 	ldw	r2,-4(fp)
 183bbf8:	10800017 	ldw	r2,0(r2)
 183bbfc:	10800117 	ldw	r2,4(r2)
 183bc00:	108000a0 	cmpeqi	r2,r2,2
 183bc04:	1000041e 	bne	r2,zero,183bc18 <do_close+0x48>
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
 183bc08:	e0bfff17 	ldw	r2,-4(fp)
 183bc0c:	00fffec4 	movi	r3,-5
 183bc10:	10c00105 	stb	r3,4(r2)
 183bc14:	00003006 	br	183bcd8 <do_close+0x108>
  } else if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
 183bc18:	e0bfff17 	ldw	r2,-4(fp)
 183bc1c:	10800017 	ldw	r2,0(r2)
 183bc20:	10800217 	ldw	r2,8(r2)
 183bc24:	10002926 	beq	r2,zero,183bccc <do_close+0xfc>
 183bc28:	e0bfff17 	ldw	r2,-4(fp)
 183bc2c:	10800017 	ldw	r2,0(r2)
 183bc30:	10800017 	ldw	r2,0(r2)
 183bc34:	10800418 	cmpnei	r2,r2,16
 183bc38:	1000241e 	bne	r2,zero,183bccc <do_close+0xfc>
    if ((msg->msg.sd.shut != NETCONN_SHUT_RDWR) && (msg->conn->state == NETCONN_LISTEN)) {
 183bc3c:	e0bfff17 	ldw	r2,-4(fp)
 183bc40:	10800203 	ldbu	r2,8(r2)
 183bc44:	10803fcc 	andi	r2,r2,255
 183bc48:	108000e0 	cmpeqi	r2,r2,3
 183bc4c:	1000091e 	bne	r2,zero,183bc74 <do_close+0xa4>
 183bc50:	e0bfff17 	ldw	r2,-4(fp)
 183bc54:	10800017 	ldw	r2,0(r2)
 183bc58:	10800117 	ldw	r2,4(r2)
 183bc5c:	10800098 	cmpnei	r2,r2,2
 183bc60:	1000041e 	bne	r2,zero,183bc74 <do_close+0xa4>
      /* LISTEN doesn't support half shutdown */
      msg->err = ERR_CONN;
 183bc64:	e0bfff17 	ldw	r2,-4(fp)
 183bc68:	00fffcc4 	movi	r3,-13
 183bc6c:	10c00105 	stb	r3,4(r2)
  if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)) {
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
  } else if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
    if ((msg->msg.sd.shut != NETCONN_SHUT_RDWR) && (msg->conn->state == NETCONN_LISTEN)) {
 183bc70:	00001906 	br	183bcd8 <do_close+0x108>
      /* LISTEN doesn't support half shutdown */
      msg->err = ERR_CONN;
    } else {
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 183bc74:	e0bfff17 	ldw	r2,-4(fp)
 183bc78:	10800203 	ldbu	r2,8(r2)
 183bc7c:	10803fcc 	andi	r2,r2,255
 183bc80:	1080004c 	andi	r2,r2,1
 183bc84:	10000426 	beq	r2,zero,183bc98 <do_close+0xc8>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 183bc88:	e0bfff17 	ldw	r2,-4(fp)
 183bc8c:	10800017 	ldw	r2,0(r2)
 183bc90:	1009883a 	mov	r4,r2
 183bc94:	183a5240 	call	183a524 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 183bc98:	e0bfff17 	ldw	r2,-4(fp)
 183bc9c:	10800017 	ldw	r2,0(r2)
 183bca0:	00c00104 	movi	r3,4
 183bca4:	10c00115 	stw	r3,4(r2)
      msg->conn->current_msg = msg;
 183bca8:	e0bfff17 	ldw	r2,-4(fp)
 183bcac:	10800017 	ldw	r2,0(r2)
 183bcb0:	e0ffff17 	ldw	r3,-4(fp)
 183bcb4:	10c00b15 	stw	r3,44(r2)
      do_close_internal(msg->conn);
 183bcb8:	e0bfff17 	ldw	r2,-4(fp)
 183bcbc:	10800017 	ldw	r2,0(r2)
 183bcc0:	1009883a 	mov	r4,r2
 183bcc4:	183a6a00 	call	183a6a0 <do_close_internal>
      /* for tcp netconns, do_close_internal ACKs the message */
      return;
 183bcc8:	00000806 	br	183bcec <do_close+0x11c>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_VAL;
 183bccc:	e0bfff17 	ldw	r2,-4(fp)
 183bcd0:	00fffe84 	movi	r3,-6
 183bcd4:	10c00105 	stb	r3,4(r2)
  }
  sys_sem_signal(&msg->conn->op_completed);
 183bcd8:	e0bfff17 	ldw	r2,-4(fp)
 183bcdc:	10800017 	ldw	r2,0(r2)
 183bce0:	10800404 	addi	r2,r2,16
 183bce4:	1009883a 	mov	r4,r2
 183bce8:	1814fcc0 	call	1814fcc <sys_sem_signal>
}
 183bcec:	e037883a 	mov	sp,fp
 183bcf0:	dfc00117 	ldw	ra,4(sp)
 183bcf4:	df000017 	ldw	fp,0(sp)
 183bcf8:	dec00204 	addi	sp,sp,8
 183bcfc:	f800283a 	ret

0183bd00 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 183bd00:	defffd04 	addi	sp,sp,-12
 183bd04:	dfc00215 	stw	ra,8(sp)
 183bd08:	df000115 	stw	fp,4(sp)
 183bd0c:	df000104 	addi	fp,sp,4
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 183bd10:	00806134 	movhi	r2,388
 183bd14:	108bcc84 	addi	r2,r2,12082
 183bd18:	1080038b 	ldhu	r2,14(r2)
 183bd1c:	10bfffcc 	andi	r2,r2,65535
 183bd20:	1009883a 	mov	r4,r2
 183bd24:	183c5000 	call	183c500 <malloc>
 183bd28:	e0bfff15 	stw	r2,-4(fp)
  if (buf != NULL) {
 183bd2c:	e0bfff17 	ldw	r2,-4(fp)
 183bd30:	10000e26 	beq	r2,zero,183bd6c <netbuf_new+0x6c>
    buf->p = NULL;
 183bd34:	e0bfff17 	ldw	r2,-4(fp)
 183bd38:	10000015 	stw	zero,0(r2)
    buf->ptr = NULL;
 183bd3c:	e0bfff17 	ldw	r2,-4(fp)
 183bd40:	10000115 	stw	zero,4(r2)
    ip_addr_set_any(&buf->addr);
 183bd44:	e0bfff17 	ldw	r2,-4(fp)
 183bd48:	10000215 	stw	zero,8(r2)
    buf->port = 0;
 183bd4c:	e0bfff17 	ldw	r2,-4(fp)
 183bd50:	1000030d 	sth	zero,12(r2)
#if LWIP_NETBUF_RECVINFO || LWIP_CHECKSUM_ON_COPY
#if LWIP_CHECKSUM_ON_COPY
    buf->flags = 0;
 183bd54:	e0bfff17 	ldw	r2,-4(fp)
 183bd58:	10000385 	stb	zero,14(r2)
#endif /* LWIP_CHECKSUM_ON_COPY */
    buf->toport_chksum = 0;
 183bd5c:	e0bfff17 	ldw	r2,-4(fp)
 183bd60:	1000040d 	sth	zero,16(r2)
#if LWIP_NETBUF_RECVINFO
    ip_addr_set_any(&buf->toaddr);
#endif /* LWIP_NETBUF_RECVINFO */
#endif /* LWIP_NETBUF_RECVINFO || LWIP_CHECKSUM_ON_COPY */
    return buf;
 183bd64:	e0bfff17 	ldw	r2,-4(fp)
 183bd68:	00000106 	br	183bd70 <netbuf_new+0x70>
  } else {
    return NULL;
 183bd6c:	0005883a 	mov	r2,zero
  }
}
 183bd70:	e037883a 	mov	sp,fp
 183bd74:	dfc00117 	ldw	ra,4(sp)
 183bd78:	df000017 	ldw	fp,0(sp)
 183bd7c:	dec00204 	addi	sp,sp,8
 183bd80:	f800283a 	ret

0183bd84 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 183bd84:	defffd04 	addi	sp,sp,-12
 183bd88:	dfc00215 	stw	ra,8(sp)
 183bd8c:	df000115 	stw	fp,4(sp)
 183bd90:	df000104 	addi	fp,sp,4
 183bd94:	e13fff15 	stw	r4,-4(fp)
  if (buf != NULL) {
 183bd98:	e0bfff17 	ldw	r2,-4(fp)
 183bd9c:	10000f26 	beq	r2,zero,183bddc <netbuf_delete+0x58>
    if (buf->p != NULL) {
 183bda0:	e0bfff17 	ldw	r2,-4(fp)
 183bda4:	10800017 	ldw	r2,0(r2)
 183bda8:	10000a26 	beq	r2,zero,183bdd4 <netbuf_delete+0x50>
      pbuf_free(buf->p);
 183bdac:	e0bfff17 	ldw	r2,-4(fp)
 183bdb0:	10800017 	ldw	r2,0(r2)
 183bdb4:	1009883a 	mov	r4,r2
 183bdb8:	181a22c0 	call	181a22c <pbuf_free>
      buf->p = buf->ptr = NULL;
 183bdbc:	e0bfff17 	ldw	r2,-4(fp)
 183bdc0:	10000115 	stw	zero,4(r2)
 183bdc4:	e0bfff17 	ldw	r2,-4(fp)
 183bdc8:	10c00117 	ldw	r3,4(r2)
 183bdcc:	e0bfff17 	ldw	r2,-4(fp)
 183bdd0:	10c00015 	stw	r3,0(r2)
    }
    memp_free(MEMP_NETBUF, buf);
 183bdd4:	e13fff17 	ldw	r4,-4(fp)
 183bdd8:	183c5140 	call	183c514 <free>
  }
}
 183bddc:	0001883a 	nop
 183bde0:	e037883a 	mov	sp,fp
 183bde4:	dfc00117 	ldw	ra,4(sp)
 183bde8:	df000017 	ldw	fp,0(sp)
 183bdec:	dec00204 	addi	sp,sp,8
 183bdf0:	f800283a 	ret

0183bdf4 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 183bdf4:	defffc04 	addi	sp,sp,-16
 183bdf8:	dfc00315 	stw	ra,12(sp)
 183bdfc:	df000215 	stw	fp,8(sp)
 183be00:	df000204 	addi	fp,sp,8
 183be04:	e13ffe15 	stw	r4,-8(fp)
 183be08:	2805883a 	mov	r2,r5
 183be0c:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 183be10:	e0bffe17 	ldw	r2,-8(fp)
 183be14:	1000091e 	bne	r2,zero,183be3c <netbuf_alloc+0x48>
 183be18:	01c06134 	movhi	r7,388
 183be1c:	39cc8504 	addi	r7,r7,12820
 183be20:	01801b44 	movi	r6,109
 183be24:	01406134 	movhi	r5,388
 183be28:	294c8b04 	addi	r5,r5,12844
 183be2c:	01006134 	movhi	r4,388
 183be30:	210c9204 	addi	r4,r4,12872
 183be34:	1800b240 	call	1800b24 <printf>
 183be38:	003fff06 	br	183be38 <__ram_exceptions_end+0xff82bb48>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 183be3c:	e0bffe17 	ldw	r2,-8(fp)
 183be40:	10800017 	ldw	r2,0(r2)
 183be44:	10000426 	beq	r2,zero,183be58 <netbuf_alloc+0x64>
    pbuf_free(buf->p);
 183be48:	e0bffe17 	ldw	r2,-8(fp)
 183be4c:	10800017 	ldw	r2,0(r2)
 183be50:	1009883a 	mov	r4,r2
 183be54:	181a22c0 	call	181a22c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 183be58:	e0bfff0b 	ldhu	r2,-4(fp)
 183be5c:	000d883a 	mov	r6,zero
 183be60:	100b883a 	mov	r5,r2
 183be64:	0009883a 	mov	r4,zero
 183be68:	1819aa40 	call	1819aa4 <pbuf_alloc>
 183be6c:	1007883a 	mov	r3,r2
 183be70:	e0bffe17 	ldw	r2,-8(fp)
 183be74:	10c00015 	stw	r3,0(r2)
  if (buf->p == NULL) {
 183be78:	e0bffe17 	ldw	r2,-8(fp)
 183be7c:	10800017 	ldw	r2,0(r2)
 183be80:	1000021e 	bne	r2,zero,183be8c <netbuf_alloc+0x98>
     return NULL;
 183be84:	0005883a 	mov	r2,zero
 183be88:	00000706 	br	183bea8 <netbuf_alloc+0xb4>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
             (buf->p->len >= size));
  buf->ptr = buf->p;
 183be8c:	e0bffe17 	ldw	r2,-8(fp)
 183be90:	10c00017 	ldw	r3,0(r2)
 183be94:	e0bffe17 	ldw	r2,-8(fp)
 183be98:	10c00115 	stw	r3,4(r2)
  return buf->p->payload;
 183be9c:	e0bffe17 	ldw	r2,-8(fp)
 183bea0:	10800017 	ldw	r2,0(r2)
 183bea4:	10800117 	ldw	r2,4(r2)
}
 183bea8:	e037883a 	mov	sp,fp
 183beac:	dfc00117 	ldw	ra,4(sp)
 183beb0:	df000017 	ldw	fp,0(sp)
 183beb4:	dec00204 	addi	sp,sp,8
 183beb8:	f800283a 	ret

0183bebc <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 183bebc:	defffd04 	addi	sp,sp,-12
 183bec0:	dfc00215 	stw	ra,8(sp)
 183bec4:	df000115 	stw	fp,4(sp)
 183bec8:	df000104 	addi	fp,sp,4
 183becc:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 183bed0:	e0bfff17 	ldw	r2,-4(fp)
 183bed4:	1000091e 	bne	r2,zero,183befc <netbuf_free+0x40>
 183bed8:	01c06134 	movhi	r7,388
 183bedc:	39cc8504 	addi	r7,r7,12820
 183bee0:	01802144 	movi	r6,133
 183bee4:	01406134 	movhi	r5,388
 183bee8:	294c9e04 	addi	r5,r5,12920
 183beec:	01006134 	movhi	r4,388
 183bef0:	210c9204 	addi	r4,r4,12872
 183bef4:	1800b240 	call	1800b24 <printf>
 183bef8:	003fff06 	br	183bef8 <__ram_exceptions_end+0xff82bc08>
  if (buf->p != NULL) {
 183befc:	e0bfff17 	ldw	r2,-4(fp)
 183bf00:	10800017 	ldw	r2,0(r2)
 183bf04:	10000426 	beq	r2,zero,183bf18 <netbuf_free+0x5c>
    pbuf_free(buf->p);
 183bf08:	e0bfff17 	ldw	r2,-4(fp)
 183bf0c:	10800017 	ldw	r2,0(r2)
 183bf10:	1009883a 	mov	r4,r2
 183bf14:	181a22c0 	call	181a22c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 183bf18:	e0bfff17 	ldw	r2,-4(fp)
 183bf1c:	10000115 	stw	zero,4(r2)
 183bf20:	e0bfff17 	ldw	r2,-4(fp)
 183bf24:	10c00117 	ldw	r3,4(r2)
 183bf28:	e0bfff17 	ldw	r2,-4(fp)
 183bf2c:	10c00015 	stw	r3,0(r2)
}
 183bf30:	0001883a 	nop
 183bf34:	e037883a 	mov	sp,fp
 183bf38:	dfc00117 	ldw	ra,4(sp)
 183bf3c:	df000017 	ldw	fp,0(sp)
 183bf40:	dec00204 	addi	sp,sp,8
 183bf44:	f800283a 	ret

0183bf48 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 183bf48:	defffb04 	addi	sp,sp,-20
 183bf4c:	dfc00415 	stw	ra,16(sp)
 183bf50:	df000315 	stw	fp,12(sp)
 183bf54:	df000304 	addi	fp,sp,12
 183bf58:	e13ffd15 	stw	r4,-12(fp)
 183bf5c:	e17ffe15 	stw	r5,-8(fp)
 183bf60:	3005883a 	mov	r2,r6
 183bf64:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 183bf68:	e0bffd17 	ldw	r2,-12(fp)
 183bf6c:	1000091e 	bne	r2,zero,183bf94 <netbuf_ref+0x4c>
 183bf70:	01c06134 	movhi	r7,388
 183bf74:	39cc8504 	addi	r7,r7,12820
 183bf78:	01802604 	movi	r6,152
 183bf7c:	01406134 	movhi	r5,388
 183bf80:	294ca504 	addi	r5,r5,12948
 183bf84:	01006134 	movhi	r4,388
 183bf88:	210c9204 	addi	r4,r4,12872
 183bf8c:	1800b240 	call	1800b24 <printf>
 183bf90:	003fff06 	br	183bf90 <__ram_exceptions_end+0xff82bca0>
  if (buf->p != NULL) {
 183bf94:	e0bffd17 	ldw	r2,-12(fp)
 183bf98:	10800017 	ldw	r2,0(r2)
 183bf9c:	10000426 	beq	r2,zero,183bfb0 <netbuf_ref+0x68>
    pbuf_free(buf->p);
 183bfa0:	e0bffd17 	ldw	r2,-12(fp)
 183bfa4:	10800017 	ldw	r2,0(r2)
 183bfa8:	1009883a 	mov	r4,r2
 183bfac:	181a22c0 	call	181a22c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 183bfb0:	01800084 	movi	r6,2
 183bfb4:	000b883a 	mov	r5,zero
 183bfb8:	0009883a 	mov	r4,zero
 183bfbc:	1819aa40 	call	1819aa4 <pbuf_alloc>
 183bfc0:	1007883a 	mov	r3,r2
 183bfc4:	e0bffd17 	ldw	r2,-12(fp)
 183bfc8:	10c00015 	stw	r3,0(r2)
  if (buf->p == NULL) {
 183bfcc:	e0bffd17 	ldw	r2,-12(fp)
 183bfd0:	10800017 	ldw	r2,0(r2)
 183bfd4:	1000041e 	bne	r2,zero,183bfe8 <netbuf_ref+0xa0>
    buf->ptr = NULL;
 183bfd8:	e0bffd17 	ldw	r2,-12(fp)
 183bfdc:	10000115 	stw	zero,4(r2)
    return ERR_MEM;
 183bfe0:	00bfffc4 	movi	r2,-1
 183bfe4:	00001106 	br	183c02c <netbuf_ref+0xe4>
  }
  buf->p->payload = (void*)dataptr;
 183bfe8:	e0bffd17 	ldw	r2,-12(fp)
 183bfec:	10800017 	ldw	r2,0(r2)
 183bff0:	e0fffe17 	ldw	r3,-8(fp)
 183bff4:	10c00115 	stw	r3,4(r2)
  buf->p->len = buf->p->tot_len = size;
 183bff8:	e0bffd17 	ldw	r2,-12(fp)
 183bffc:	10c00017 	ldw	r3,0(r2)
 183c000:	e0bffd17 	ldw	r2,-12(fp)
 183c004:	10800017 	ldw	r2,0(r2)
 183c008:	e13fff0b 	ldhu	r4,-4(fp)
 183c00c:	1100020d 	sth	r4,8(r2)
 183c010:	1080020b 	ldhu	r2,8(r2)
 183c014:	1880028d 	sth	r2,10(r3)
  buf->ptr = buf->p;
 183c018:	e0bffd17 	ldw	r2,-12(fp)
 183c01c:	10c00017 	ldw	r3,0(r2)
 183c020:	e0bffd17 	ldw	r2,-12(fp)
 183c024:	10c00115 	stw	r3,4(r2)
  return ERR_OK;
 183c028:	0005883a 	mov	r2,zero
}
 183c02c:	e037883a 	mov	sp,fp
 183c030:	dfc00117 	ldw	ra,4(sp)
 183c034:	df000017 	ldw	fp,0(sp)
 183c038:	dec00204 	addi	sp,sp,8
 183c03c:	f800283a 	ret

0183c040 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
 183c040:	defffc04 	addi	sp,sp,-16
 183c044:	dfc00315 	stw	ra,12(sp)
 183c048:	df000215 	stw	fp,8(sp)
 183c04c:	df000204 	addi	fp,sp,8
 183c050:	e13ffe15 	stw	r4,-8(fp)
 183c054:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netbuf_ref: invalid head", (head != NULL), return;);
 183c058:	e0bffe17 	ldw	r2,-8(fp)
 183c05c:	1000091e 	bne	r2,zero,183c084 <netbuf_chain+0x44>
 183c060:	01c06134 	movhi	r7,388
 183c064:	39cc8504 	addi	r7,r7,12820
 183c068:	01802c04 	movi	r6,176
 183c06c:	01406134 	movhi	r5,388
 183c070:	294cab04 	addi	r5,r5,12972
 183c074:	01006134 	movhi	r4,388
 183c078:	210c9204 	addi	r4,r4,12872
 183c07c:	1800b240 	call	1800b24 <printf>
 183c080:	003fff06 	br	183c080 <__ram_exceptions_end+0xff82bd90>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
 183c084:	e0bfff17 	ldw	r2,-4(fp)
 183c088:	1000091e 	bne	r2,zero,183c0b0 <netbuf_chain+0x70>
 183c08c:	01c06134 	movhi	r7,388
 183c090:	39cc8504 	addi	r7,r7,12820
 183c094:	01802c44 	movi	r6,177
 183c098:	01406134 	movhi	r5,388
 183c09c:	294cb204 	addi	r5,r5,13000
 183c0a0:	01006134 	movhi	r4,388
 183c0a4:	210c9204 	addi	r4,r4,12872
 183c0a8:	1800b240 	call	1800b24 <printf>
 183c0ac:	003fff06 	br	183c0ac <__ram_exceptions_end+0xff82bdbc>
  pbuf_cat(head->p, tail->p);
 183c0b0:	e0bffe17 	ldw	r2,-8(fp)
 183c0b4:	10c00017 	ldw	r3,0(r2)
 183c0b8:	e0bfff17 	ldw	r2,-4(fp)
 183c0bc:	10800017 	ldw	r2,0(r2)
 183c0c0:	100b883a 	mov	r5,r2
 183c0c4:	1809883a 	mov	r4,r3
 183c0c8:	181a4180 	call	181a418 <pbuf_cat>
  head->ptr = head->p;
 183c0cc:	e0bffe17 	ldw	r2,-8(fp)
 183c0d0:	10c00017 	ldw	r3,0(r2)
 183c0d4:	e0bffe17 	ldw	r2,-8(fp)
 183c0d8:	10c00115 	stw	r3,4(r2)
  memp_free(MEMP_NETBUF, tail);
 183c0dc:	e13fff17 	ldw	r4,-4(fp)
 183c0e0:	183c5140 	call	183c514 <free>
}
 183c0e4:	0001883a 	nop
 183c0e8:	e037883a 	mov	sp,fp
 183c0ec:	dfc00117 	ldw	ra,4(sp)
 183c0f0:	df000017 	ldw	fp,0(sp)
 183c0f4:	dec00204 	addi	sp,sp,8
 183c0f8:	f800283a 	ret

0183c0fc <netbuf_data>:
 * @return ERR_OK if the information was retreived,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 183c0fc:	defffb04 	addi	sp,sp,-20
 183c100:	dfc00415 	stw	ra,16(sp)
 183c104:	df000315 	stw	fp,12(sp)
 183c108:	df000304 	addi	fp,sp,12
 183c10c:	e13ffd15 	stw	r4,-12(fp)
 183c110:	e17ffe15 	stw	r5,-8(fp)
 183c114:	e1bfff15 	stw	r6,-4(fp)
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 183c118:	e0bffd17 	ldw	r2,-12(fp)
 183c11c:	1000091e 	bne	r2,zero,183c144 <netbuf_data+0x48>
 183c120:	01c06134 	movhi	r7,388
 183c124:	39cc8504 	addi	r7,r7,12820
 183c128:	018030c4 	movi	r6,195
 183c12c:	01406134 	movhi	r5,388
 183c130:	294cb904 	addi	r5,r5,13028
 183c134:	01006134 	movhi	r4,388
 183c138:	210c9204 	addi	r4,r4,12872
 183c13c:	1800b240 	call	1800b24 <printf>
 183c140:	003fff06 	br	183c140 <__ram_exceptions_end+0xff82be50>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 183c144:	e0bffe17 	ldw	r2,-8(fp)
 183c148:	1000091e 	bne	r2,zero,183c170 <netbuf_data+0x74>
 183c14c:	01c06134 	movhi	r7,388
 183c150:	39cc8504 	addi	r7,r7,12820
 183c154:	01803104 	movi	r6,196
 183c158:	01406134 	movhi	r5,388
 183c15c:	294cc004 	addi	r5,r5,13056
 183c160:	01006134 	movhi	r4,388
 183c164:	210c9204 	addi	r4,r4,12872
 183c168:	1800b240 	call	1800b24 <printf>
 183c16c:	003fff06 	br	183c16c <__ram_exceptions_end+0xff82be7c>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 183c170:	e0bfff17 	ldw	r2,-4(fp)
 183c174:	1000091e 	bne	r2,zero,183c19c <netbuf_data+0xa0>
 183c178:	01c06134 	movhi	r7,388
 183c17c:	39cc8504 	addi	r7,r7,12820
 183c180:	01803144 	movi	r6,197
 183c184:	01406134 	movhi	r5,388
 183c188:	294cc804 	addi	r5,r5,13088
 183c18c:	01006134 	movhi	r4,388
 183c190:	210c9204 	addi	r4,r4,12872
 183c194:	1800b240 	call	1800b24 <printf>
 183c198:	003fff06 	br	183c198 <__ram_exceptions_end+0xff82bea8>

  if (buf->ptr == NULL) {
 183c19c:	e0bffd17 	ldw	r2,-12(fp)
 183c1a0:	10800117 	ldw	r2,4(r2)
 183c1a4:	1000021e 	bne	r2,zero,183c1b0 <netbuf_data+0xb4>
    return ERR_BUF;
 183c1a8:	00bfff84 	movi	r2,-2
 183c1ac:	00000b06 	br	183c1dc <netbuf_data+0xe0>
  }
  *dataptr = buf->ptr->payload;
 183c1b0:	e0bffd17 	ldw	r2,-12(fp)
 183c1b4:	10800117 	ldw	r2,4(r2)
 183c1b8:	10c00117 	ldw	r3,4(r2)
 183c1bc:	e0bffe17 	ldw	r2,-8(fp)
 183c1c0:	10c00015 	stw	r3,0(r2)
  *len = buf->ptr->len;
 183c1c4:	e0bffd17 	ldw	r2,-12(fp)
 183c1c8:	10800117 	ldw	r2,4(r2)
 183c1cc:	10c0028b 	ldhu	r3,10(r2)
 183c1d0:	e0bfff17 	ldw	r2,-4(fp)
 183c1d4:	10c0000d 	sth	r3,0(r2)
  return ERR_OK;
 183c1d8:	0005883a 	mov	r2,zero
}
 183c1dc:	e037883a 	mov	sp,fp
 183c1e0:	dfc00117 	ldw	ra,4(sp)
 183c1e4:	df000017 	ldw	fp,0(sp)
 183c1e8:	dec00204 	addi	sp,sp,8
 183c1ec:	f800283a 	ret

0183c1f0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 183c1f0:	defffd04 	addi	sp,sp,-12
 183c1f4:	dfc00215 	stw	ra,8(sp)
 183c1f8:	df000115 	stw	fp,4(sp)
 183c1fc:	df000104 	addi	fp,sp,4
 183c200:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return -1;);
 183c204:	e0bfff17 	ldw	r2,-4(fp)
 183c208:	1000091e 	bne	r2,zero,183c230 <netbuf_next+0x40>
 183c20c:	01c06134 	movhi	r7,388
 183c210:	39cc8504 	addi	r7,r7,12820
 183c214:	01803704 	movi	r6,220
 183c218:	01406134 	movhi	r5,388
 183c21c:	294c9e04 	addi	r5,r5,12920
 183c220:	01006134 	movhi	r4,388
 183c224:	210c9204 	addi	r4,r4,12872
 183c228:	1800b240 	call	1800b24 <printf>
 183c22c:	003fff06 	br	183c22c <__ram_exceptions_end+0xff82bf3c>
  if (buf->ptr->next == NULL) {
 183c230:	e0bfff17 	ldw	r2,-4(fp)
 183c234:	10800117 	ldw	r2,4(r2)
 183c238:	10800017 	ldw	r2,0(r2)
 183c23c:	1000021e 	bne	r2,zero,183c248 <netbuf_next+0x58>
    return -1;
 183c240:	00bfffc4 	movi	r2,-1
 183c244:	00000c06 	br	183c278 <netbuf_next+0x88>
  }
  buf->ptr = buf->ptr->next;
 183c248:	e0bfff17 	ldw	r2,-4(fp)
 183c24c:	10800117 	ldw	r2,4(r2)
 183c250:	10c00017 	ldw	r3,0(r2)
 183c254:	e0bfff17 	ldw	r2,-4(fp)
 183c258:	10c00115 	stw	r3,4(r2)
  if (buf->ptr->next == NULL) {
 183c25c:	e0bfff17 	ldw	r2,-4(fp)
 183c260:	10800117 	ldw	r2,4(r2)
 183c264:	10800017 	ldw	r2,0(r2)
 183c268:	1000021e 	bne	r2,zero,183c274 <netbuf_next+0x84>
    return 1;
 183c26c:	00800044 	movi	r2,1
 183c270:	00000106 	br	183c278 <netbuf_next+0x88>
  }
  return 0;
 183c274:	0005883a 	mov	r2,zero
}
 183c278:	e037883a 	mov	sp,fp
 183c27c:	dfc00117 	ldw	ra,4(sp)
 183c280:	df000017 	ldw	fp,0(sp)
 183c284:	dec00204 	addi	sp,sp,8
 183c288:	f800283a 	ret

0183c28c <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
 183c28c:	defffd04 	addi	sp,sp,-12
 183c290:	dfc00215 	stw	ra,8(sp)
 183c294:	df000115 	stw	fp,4(sp)
 183c298:	df000104 	addi	fp,sp,4
 183c29c:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 183c2a0:	e0bfff17 	ldw	r2,-4(fp)
 183c2a4:	1000091e 	bne	r2,zero,183c2cc <netbuf_first+0x40>
 183c2a8:	01c06134 	movhi	r7,388
 183c2ac:	39cc8504 	addi	r7,r7,12820
 183c2b0:	01803c44 	movi	r6,241
 183c2b4:	01406134 	movhi	r5,388
 183c2b8:	294c9e04 	addi	r5,r5,12920
 183c2bc:	01006134 	movhi	r4,388
 183c2c0:	210c9204 	addi	r4,r4,12872
 183c2c4:	1800b240 	call	1800b24 <printf>
 183c2c8:	003fff06 	br	183c2c8 <__ram_exceptions_end+0xff82bfd8>
  buf->ptr = buf->p;
 183c2cc:	e0bfff17 	ldw	r2,-4(fp)
 183c2d0:	10c00017 	ldw	r3,0(r2)
 183c2d4:	e0bfff17 	ldw	r2,-4(fp)
 183c2d8:	10c00115 	stw	r3,4(r2)
}
 183c2dc:	0001883a 	nop
 183c2e0:	e037883a 	mov	sp,fp
 183c2e4:	dfc00117 	ldw	ra,4(sp)
 183c2e8:	df000017 	ldw	fp,0(sp)
 183c2ec:	dec00204 	addi	sp,sp,8
 183c2f0:	f800283a 	ret

0183c2f4 <atexit>:
 183c2f4:	200b883a 	mov	r5,r4
 183c2f8:	000f883a 	mov	r7,zero
 183c2fc:	000d883a 	mov	r6,zero
 183c300:	0009883a 	mov	r4,zero
 183c304:	183ec041 	jmpi	183ec04 <__register_exitproc>

0183c308 <__errno>:
 183c308:	00806134 	movhi	r2,388
 183c30c:	10946904 	addi	r2,r2,20900
 183c310:	10800017 	ldw	r2,0(r2)
 183c314:	f800283a 	ret

0183c318 <exit>:
 183c318:	defffe04 	addi	sp,sp,-8
 183c31c:	000b883a 	mov	r5,zero
 183c320:	dc000015 	stw	r16,0(sp)
 183c324:	dfc00115 	stw	ra,4(sp)
 183c328:	2021883a 	mov	r16,r4
 183c32c:	183ed1c0 	call	183ed1c <__call_exitprocs>
 183c330:	00806134 	movhi	r2,388
 183c334:	10946804 	addi	r2,r2,20896
 183c338:	11000017 	ldw	r4,0(r2)
 183c33c:	20800f17 	ldw	r2,60(r4)
 183c340:	10000126 	beq	r2,zero,183c348 <exit+0x30>
 183c344:	103ee83a 	callr	r2
 183c348:	8009883a 	mov	r4,r16
 183c34c:	18403080 	call	1840308 <_exit>

0183c350 <memalign>:
 183c350:	00806134 	movhi	r2,388
 183c354:	10946904 	addi	r2,r2,20900
 183c358:	280d883a 	mov	r6,r5
 183c35c:	200b883a 	mov	r5,r4
 183c360:	11000017 	ldw	r4,0(r2)
 183c364:	183c3681 	jmpi	183c368 <_memalign_r>

0183c368 <_memalign_r>:
 183c368:	00800204 	movi	r2,8
 183c36c:	1140532e 	bgeu	r2,r5,183c4bc <_memalign_r+0x154>
 183c370:	defffa04 	addi	sp,sp,-24
 183c374:	dd000415 	stw	r20,16(sp)
 183c378:	dc400115 	stw	r17,4(sp)
 183c37c:	dfc00515 	stw	ra,20(sp)
 183c380:	dcc00315 	stw	r19,12(sp)
 183c384:	dc800215 	stw	r18,8(sp)
 183c388:	dc000015 	stw	r16,0(sp)
 183c38c:	008003c4 	movi	r2,15
 183c390:	2823883a 	mov	r17,r5
 183c394:	2029883a 	mov	r20,r4
 183c398:	11400136 	bltu	r2,r5,183c3a0 <_memalign_r+0x38>
 183c39c:	04400404 	movi	r17,16
 183c3a0:	308002c4 	addi	r2,r6,11
 183c3a4:	00c00584 	movi	r3,22
 183c3a8:	18803e2e 	bgeu	r3,r2,183c4a4 <_memalign_r+0x13c>
 183c3ac:	04bffe04 	movi	r18,-8
 183c3b0:	14a4703a 	and	r18,r2,r18
 183c3b4:	90003d16 	blt	r18,zero,183c4ac <_memalign_r+0x144>
 183c3b8:	91803c36 	bltu	r18,r6,183c4ac <_memalign_r+0x144>
 183c3bc:	89400404 	addi	r5,r17,16
 183c3c0:	2c8b883a 	add	r5,r5,r18
 183c3c4:	a009883a 	mov	r4,r20
 183c3c8:	18056a80 	call	18056a8 <_malloc_r>
 183c3cc:	1027883a 	mov	r19,r2
 183c3d0:	10004926 	beq	r2,zero,183c4f8 <_memalign_r+0x190>
 183c3d4:	a009883a 	mov	r4,r20
 183c3d8:	180d4580 	call	180d458 <__malloc_lock>
 183c3dc:	880b883a 	mov	r5,r17
 183c3e0:	9809883a 	mov	r4,r19
 183c3e4:	9c3ffe04 	addi	r16,r19,-8
 183c3e8:	180ac800 	call	180ac80 <__umodsi3>
 183c3ec:	10001c26 	beq	r2,zero,183c460 <_memalign_r+0xf8>
 183c3f0:	88bfffc4 	addi	r2,r17,-1
 183c3f4:	9887883a 	add	r3,r19,r2
 183c3f8:	0445c83a 	sub	r2,zero,r17
 183c3fc:	1884703a 	and	r2,r3,r2
 183c400:	10bffe04 	addi	r2,r2,-8
 183c404:	1409c83a 	sub	r4,r2,r16
 183c408:	014003c4 	movi	r5,15
 183c40c:	8007883a 	mov	r3,r16
 183c410:	29002c0e 	bge	r5,r4,183c4c4 <_memalign_r+0x15c>
 183c414:	1021883a 	mov	r16,r2
 183c418:	993fff17 	ldw	r4,-4(r19)
 183c41c:	00bfff04 	movi	r2,-4
 183c420:	80c7c83a 	sub	r3,r16,r3
 183c424:	2084703a 	and	r2,r4,r2
 183c428:	10c5c83a 	sub	r2,r2,r3
 183c42c:	11000054 	ori	r4,r2,1
 183c430:	81000115 	stw	r4,4(r16)
 183c434:	8085883a 	add	r2,r16,r2
 183c438:	11800117 	ldw	r6,4(r2)
 183c43c:	980b883a 	mov	r5,r19
 183c440:	a009883a 	mov	r4,r20
 183c444:	31800054 	ori	r6,r6,1
 183c448:	11800115 	stw	r6,4(r2)
 183c44c:	98bfff17 	ldw	r2,-4(r19)
 183c450:	1080004c 	andi	r2,r2,1
 183c454:	10c6b03a 	or	r3,r2,r3
 183c458:	98ffff15 	stw	r3,-4(r19)
 183c45c:	1804f780 	call	1804f78 <_free_r>
 183c460:	80c00117 	ldw	r3,4(r16)
 183c464:	00bfff04 	movi	r2,-4
 183c468:	1884703a 	and	r2,r3,r2
 183c46c:	1485c83a 	sub	r2,r2,r18
 183c470:	00c003c4 	movi	r3,15
 183c474:	18801516 	blt	r3,r2,183c4cc <_memalign_r+0x164>
 183c478:	a009883a 	mov	r4,r20
 183c47c:	180d4b80 	call	180d4b8 <__malloc_unlock>
 183c480:	80800204 	addi	r2,r16,8
 183c484:	dfc00517 	ldw	ra,20(sp)
 183c488:	dd000417 	ldw	r20,16(sp)
 183c48c:	dcc00317 	ldw	r19,12(sp)
 183c490:	dc800217 	ldw	r18,8(sp)
 183c494:	dc400117 	ldw	r17,4(sp)
 183c498:	dc000017 	ldw	r16,0(sp)
 183c49c:	dec00604 	addi	sp,sp,24
 183c4a0:	f800283a 	ret
 183c4a4:	04800404 	movi	r18,16
 183c4a8:	91bfc42e 	bgeu	r18,r6,183c3bc <__ram_exceptions_end+0xff82c0cc>
 183c4ac:	00800304 	movi	r2,12
 183c4b0:	a0800015 	stw	r2,0(r20)
 183c4b4:	0005883a 	mov	r2,zero
 183c4b8:	003ff206 	br	183c484 <__ram_exceptions_end+0xff82c194>
 183c4bc:	300b883a 	mov	r5,r6
 183c4c0:	18056a81 	jmpi	18056a8 <_malloc_r>
 183c4c4:	1461883a 	add	r16,r2,r17
 183c4c8:	003fd306 	br	183c418 <__ram_exceptions_end+0xff82c128>
 183c4cc:	848b883a 	add	r5,r16,r18
 183c4d0:	10800054 	ori	r2,r2,1
 183c4d4:	28800115 	stw	r2,4(r5)
 183c4d8:	80800117 	ldw	r2,4(r16)
 183c4dc:	29400204 	addi	r5,r5,8
 183c4e0:	a009883a 	mov	r4,r20
 183c4e4:	1080004c 	andi	r2,r2,1
 183c4e8:	14a4b03a 	or	r18,r2,r18
 183c4ec:	84800115 	stw	r18,4(r16)
 183c4f0:	1804f780 	call	1804f78 <_free_r>
 183c4f4:	003fe006 	br	183c478 <__ram_exceptions_end+0xff82c188>
 183c4f8:	0005883a 	mov	r2,zero
 183c4fc:	003fe106 	br	183c484 <__ram_exceptions_end+0xff82c194>

0183c500 <malloc>:
 183c500:	00806134 	movhi	r2,388
 183c504:	10946904 	addi	r2,r2,20900
 183c508:	200b883a 	mov	r5,r4
 183c50c:	11000017 	ldw	r4,0(r2)
 183c510:	18056a81 	jmpi	18056a8 <_malloc_r>

0183c514 <free>:
 183c514:	00806134 	movhi	r2,388
 183c518:	10946904 	addi	r2,r2,20900
 183c51c:	200b883a 	mov	r5,r4
 183c520:	11000017 	ldw	r4,0(r2)
 183c524:	1804f781 	jmpi	1804f78 <_free_r>

0183c528 <memcmp>:
 183c528:	01c000c4 	movi	r7,3
 183c52c:	3980192e 	bgeu	r7,r6,183c594 <memcmp+0x6c>
 183c530:	2144b03a 	or	r2,r4,r5
 183c534:	11c4703a 	and	r2,r2,r7
 183c538:	10000f26 	beq	r2,zero,183c578 <memcmp+0x50>
 183c53c:	20800003 	ldbu	r2,0(r4)
 183c540:	28c00003 	ldbu	r3,0(r5)
 183c544:	10c0151e 	bne	r2,r3,183c59c <memcmp+0x74>
 183c548:	31bfff84 	addi	r6,r6,-2
 183c54c:	01ffffc4 	movi	r7,-1
 183c550:	00000406 	br	183c564 <memcmp+0x3c>
 183c554:	20800003 	ldbu	r2,0(r4)
 183c558:	28c00003 	ldbu	r3,0(r5)
 183c55c:	31bfffc4 	addi	r6,r6,-1
 183c560:	10c00e1e 	bne	r2,r3,183c59c <memcmp+0x74>
 183c564:	21000044 	addi	r4,r4,1
 183c568:	29400044 	addi	r5,r5,1
 183c56c:	31fff91e 	bne	r6,r7,183c554 <__ram_exceptions_end+0xff82c264>
 183c570:	0005883a 	mov	r2,zero
 183c574:	f800283a 	ret
 183c578:	20c00017 	ldw	r3,0(r4)
 183c57c:	28800017 	ldw	r2,0(r5)
 183c580:	18bfee1e 	bne	r3,r2,183c53c <__ram_exceptions_end+0xff82c24c>
 183c584:	31bfff04 	addi	r6,r6,-4
 183c588:	21000104 	addi	r4,r4,4
 183c58c:	29400104 	addi	r5,r5,4
 183c590:	39bff936 	bltu	r7,r6,183c578 <__ram_exceptions_end+0xff82c288>
 183c594:	303fe91e 	bne	r6,zero,183c53c <__ram_exceptions_end+0xff82c24c>
 183c598:	003ff506 	br	183c570 <__ram_exceptions_end+0xff82c280>
 183c59c:	10c5c83a 	sub	r2,r2,r3
 183c5a0:	f800283a 	ret

0183c5a4 <_putc_r>:
 183c5a4:	defffc04 	addi	sp,sp,-16
 183c5a8:	dc000215 	stw	r16,8(sp)
 183c5ac:	dfc00315 	stw	ra,12(sp)
 183c5b0:	2021883a 	mov	r16,r4
 183c5b4:	20000226 	beq	r4,zero,183c5c0 <_putc_r+0x1c>
 183c5b8:	20800e17 	ldw	r2,56(r4)
 183c5bc:	10001b26 	beq	r2,zero,183c62c <_putc_r+0x88>
 183c5c0:	30800217 	ldw	r2,8(r6)
 183c5c4:	10bfffc4 	addi	r2,r2,-1
 183c5c8:	30800215 	stw	r2,8(r6)
 183c5cc:	10000a16 	blt	r2,zero,183c5f8 <_putc_r+0x54>
 183c5d0:	30800017 	ldw	r2,0(r6)
 183c5d4:	11400005 	stb	r5,0(r2)
 183c5d8:	30800017 	ldw	r2,0(r6)
 183c5dc:	10c00044 	addi	r3,r2,1
 183c5e0:	30c00015 	stw	r3,0(r6)
 183c5e4:	10800003 	ldbu	r2,0(r2)
 183c5e8:	dfc00317 	ldw	ra,12(sp)
 183c5ec:	dc000217 	ldw	r16,8(sp)
 183c5f0:	dec00404 	addi	sp,sp,16
 183c5f4:	f800283a 	ret
 183c5f8:	30c00617 	ldw	r3,24(r6)
 183c5fc:	10c00616 	blt	r2,r3,183c618 <_putc_r+0x74>
 183c600:	30800017 	ldw	r2,0(r6)
 183c604:	00c00284 	movi	r3,10
 183c608:	11400005 	stb	r5,0(r2)
 183c60c:	30800017 	ldw	r2,0(r6)
 183c610:	11400003 	ldbu	r5,0(r2)
 183c614:	28fff11e 	bne	r5,r3,183c5dc <__ram_exceptions_end+0xff82c2ec>
 183c618:	8009883a 	mov	r4,r16
 183c61c:	dfc00317 	ldw	ra,12(sp)
 183c620:	dc000217 	ldw	r16,8(sp)
 183c624:	dec00404 	addi	sp,sp,16
 183c628:	1809d341 	jmpi	1809d34 <__swbuf_r>
 183c62c:	d9400015 	stw	r5,0(sp)
 183c630:	d9800115 	stw	r6,4(sp)
 183c634:	1804e040 	call	1804e04 <__sinit>
 183c638:	d9800117 	ldw	r6,4(sp)
 183c63c:	d9400017 	ldw	r5,0(sp)
 183c640:	003fdf06 	br	183c5c0 <__ram_exceptions_end+0xff82c2d0>

0183c644 <putc>:
 183c644:	00806134 	movhi	r2,388
 183c648:	defffc04 	addi	sp,sp,-16
 183c64c:	10946904 	addi	r2,r2,20900
 183c650:	dc000115 	stw	r16,4(sp)
 183c654:	14000017 	ldw	r16,0(r2)
 183c658:	dc400215 	stw	r17,8(sp)
 183c65c:	dfc00315 	stw	ra,12(sp)
 183c660:	2023883a 	mov	r17,r4
 183c664:	80000226 	beq	r16,zero,183c670 <putc+0x2c>
 183c668:	80800e17 	ldw	r2,56(r16)
 183c66c:	10001a26 	beq	r2,zero,183c6d8 <putc+0x94>
 183c670:	28800217 	ldw	r2,8(r5)
 183c674:	10bfffc4 	addi	r2,r2,-1
 183c678:	28800215 	stw	r2,8(r5)
 183c67c:	10000b16 	blt	r2,zero,183c6ac <putc+0x68>
 183c680:	28800017 	ldw	r2,0(r5)
 183c684:	14400005 	stb	r17,0(r2)
 183c688:	28800017 	ldw	r2,0(r5)
 183c68c:	10c00044 	addi	r3,r2,1
 183c690:	28c00015 	stw	r3,0(r5)
 183c694:	10800003 	ldbu	r2,0(r2)
 183c698:	dfc00317 	ldw	ra,12(sp)
 183c69c:	dc400217 	ldw	r17,8(sp)
 183c6a0:	dc000117 	ldw	r16,4(sp)
 183c6a4:	dec00404 	addi	sp,sp,16
 183c6a8:	f800283a 	ret
 183c6ac:	28c00617 	ldw	r3,24(r5)
 183c6b0:	10c00e16 	blt	r2,r3,183c6ec <putc+0xa8>
 183c6b4:	28800017 	ldw	r2,0(r5)
 183c6b8:	01000284 	movi	r4,10
 183c6bc:	14400005 	stb	r17,0(r2)
 183c6c0:	28800017 	ldw	r2,0(r5)
 183c6c4:	10c00003 	ldbu	r3,0(r2)
 183c6c8:	193ff01e 	bne	r3,r4,183c68c <__ram_exceptions_end+0xff82c39c>
 183c6cc:	280d883a 	mov	r6,r5
 183c6d0:	180b883a 	mov	r5,r3
 183c6d4:	00000706 	br	183c6f4 <putc+0xb0>
 183c6d8:	8009883a 	mov	r4,r16
 183c6dc:	d9400015 	stw	r5,0(sp)
 183c6e0:	1804e040 	call	1804e04 <__sinit>
 183c6e4:	d9400017 	ldw	r5,0(sp)
 183c6e8:	003fe106 	br	183c670 <__ram_exceptions_end+0xff82c380>
 183c6ec:	280d883a 	mov	r6,r5
 183c6f0:	880b883a 	mov	r5,r17
 183c6f4:	8009883a 	mov	r4,r16
 183c6f8:	dfc00317 	ldw	ra,12(sp)
 183c6fc:	dc400217 	ldw	r17,8(sp)
 183c700:	dc000117 	ldw	r16,4(sp)
 183c704:	dec00404 	addi	sp,sp,16
 183c708:	1809d341 	jmpi	1809d34 <__swbuf_r>

0183c70c <_puts_r>:
 183c70c:	defff604 	addi	sp,sp,-40
 183c710:	dc000715 	stw	r16,28(sp)
 183c714:	2021883a 	mov	r16,r4
 183c718:	2809883a 	mov	r4,r5
 183c71c:	dc400815 	stw	r17,32(sp)
 183c720:	dfc00915 	stw	ra,36(sp)
 183c724:	2823883a 	mov	r17,r5
 183c728:	18074e40 	call	18074e4 <strlen>
 183c72c:	10c00044 	addi	r3,r2,1
 183c730:	d8800115 	stw	r2,4(sp)
 183c734:	00806134 	movhi	r2,388
 183c738:	108ccf04 	addi	r2,r2,13116
 183c73c:	d8800215 	stw	r2,8(sp)
 183c740:	00800044 	movi	r2,1
 183c744:	d8800315 	stw	r2,12(sp)
 183c748:	00800084 	movi	r2,2
 183c74c:	dc400015 	stw	r17,0(sp)
 183c750:	d8c00615 	stw	r3,24(sp)
 183c754:	dec00415 	stw	sp,16(sp)
 183c758:	d8800515 	stw	r2,20(sp)
 183c75c:	80000226 	beq	r16,zero,183c768 <_puts_r+0x5c>
 183c760:	80800e17 	ldw	r2,56(r16)
 183c764:	10001426 	beq	r2,zero,183c7b8 <_puts_r+0xac>
 183c768:	81400217 	ldw	r5,8(r16)
 183c76c:	2880030b 	ldhu	r2,12(r5)
 183c770:	10c8000c 	andi	r3,r2,8192
 183c774:	1800061e 	bne	r3,zero,183c790 <_puts_r+0x84>
 183c778:	29001917 	ldw	r4,100(r5)
 183c77c:	00f7ffc4 	movi	r3,-8193
 183c780:	10880014 	ori	r2,r2,8192
 183c784:	20c6703a 	and	r3,r4,r3
 183c788:	2880030d 	sth	r2,12(r5)
 183c78c:	28c01915 	stw	r3,100(r5)
 183c790:	d9800404 	addi	r6,sp,16
 183c794:	8009883a 	mov	r4,r16
 183c798:	18090a40 	call	18090a4 <__sfvwrite_r>
 183c79c:	1000091e 	bne	r2,zero,183c7c4 <_puts_r+0xb8>
 183c7a0:	00800284 	movi	r2,10
 183c7a4:	dfc00917 	ldw	ra,36(sp)
 183c7a8:	dc400817 	ldw	r17,32(sp)
 183c7ac:	dc000717 	ldw	r16,28(sp)
 183c7b0:	dec00a04 	addi	sp,sp,40
 183c7b4:	f800283a 	ret
 183c7b8:	8009883a 	mov	r4,r16
 183c7bc:	1804e040 	call	1804e04 <__sinit>
 183c7c0:	003fe906 	br	183c768 <__ram_exceptions_end+0xff82c478>
 183c7c4:	00bfffc4 	movi	r2,-1
 183c7c8:	003ff606 	br	183c7a4 <__ram_exceptions_end+0xff82c4b4>

0183c7cc <puts>:
 183c7cc:	00806134 	movhi	r2,388
 183c7d0:	10946904 	addi	r2,r2,20900
 183c7d4:	200b883a 	mov	r5,r4
 183c7d8:	11000017 	ldw	r4,0(r2)
 183c7dc:	183c70c1 	jmpi	183c70c <_puts_r>

0183c7e0 <_snprintf_r>:
 183c7e0:	30003116 	blt	r6,zero,183c8a8 <_snprintf_r+0xc8>
 183c7e4:	deffe404 	addi	sp,sp,-112
 183c7e8:	00c08204 	movi	r3,520
 183c7ec:	dc001a15 	stw	r16,104(sp)
 183c7f0:	3005883a 	mov	r2,r6
 183c7f4:	dfc01b15 	stw	ra,108(sp)
 183c7f8:	d8c0030d 	sth	r3,12(sp)
 183c7fc:	d9400015 	stw	r5,0(sp)
 183c800:	d9400415 	stw	r5,16(sp)
 183c804:	380d883a 	mov	r6,r7
 183c808:	2021883a 	mov	r16,r4
 183c80c:	10001026 	beq	r2,zero,183c850 <_snprintf_r+0x70>
 183c810:	10bfffc4 	addi	r2,r2,-1
 183c814:	d8800215 	stw	r2,8(sp)
 183c818:	d8800515 	stw	r2,20(sp)
 183c81c:	d9c01c04 	addi	r7,sp,112
 183c820:	00bfffc4 	movi	r2,-1
 183c824:	d80b883a 	mov	r5,sp
 183c828:	d880038d 	sth	r2,14(sp)
 183c82c:	183ca2c0 	call	183ca2c <___svfprintf_internal_r>
 183c830:	00ffffc4 	movi	r3,-1
 183c834:	10c01316 	blt	r2,r3,183c884 <_snprintf_r+0xa4>
 183c838:	d8c00017 	ldw	r3,0(sp)
 183c83c:	18000005 	stb	zero,0(r3)
 183c840:	dfc01b17 	ldw	ra,108(sp)
 183c844:	dc001a17 	ldw	r16,104(sp)
 183c848:	dec01c04 	addi	sp,sp,112
 183c84c:	f800283a 	ret
 183c850:	00bfffc4 	movi	r2,-1
 183c854:	d9c01c04 	addi	r7,sp,112
 183c858:	d80b883a 	mov	r5,sp
 183c85c:	d8000215 	stw	zero,8(sp)
 183c860:	d8000515 	stw	zero,20(sp)
 183c864:	d880038d 	sth	r2,14(sp)
 183c868:	183ca2c0 	call	183ca2c <___svfprintf_internal_r>
 183c86c:	00ffffc4 	movi	r3,-1
 183c870:	10c00716 	blt	r2,r3,183c890 <_snprintf_r+0xb0>
 183c874:	dfc01b17 	ldw	ra,108(sp)
 183c878:	dc001a17 	ldw	r16,104(sp)
 183c87c:	dec01c04 	addi	sp,sp,112
 183c880:	f800283a 	ret
 183c884:	00c022c4 	movi	r3,139
 183c888:	80c00015 	stw	r3,0(r16)
 183c88c:	003fea06 	br	183c838 <__ram_exceptions_end+0xff82c548>
 183c890:	00c022c4 	movi	r3,139
 183c894:	80c00015 	stw	r3,0(r16)
 183c898:	dfc01b17 	ldw	ra,108(sp)
 183c89c:	dc001a17 	ldw	r16,104(sp)
 183c8a0:	dec01c04 	addi	sp,sp,112
 183c8a4:	f800283a 	ret
 183c8a8:	008022c4 	movi	r2,139
 183c8ac:	20800015 	stw	r2,0(r4)
 183c8b0:	00bfffc4 	movi	r2,-1
 183c8b4:	f800283a 	ret

0183c8b8 <snprintf>:
 183c8b8:	deffe304 	addi	sp,sp,-116
 183c8bc:	dfc01b15 	stw	ra,108(sp)
 183c8c0:	dc001a15 	stw	r16,104(sp)
 183c8c4:	d9c01c15 	stw	r7,112(sp)
 183c8c8:	00806134 	movhi	r2,388
 183c8cc:	10946904 	addi	r2,r2,20900
 183c8d0:	14000017 	ldw	r16,0(r2)
 183c8d4:	28002d16 	blt	r5,zero,183c98c <snprintf+0xd4>
 183c8d8:	00808204 	movi	r2,520
 183c8dc:	d880030d 	sth	r2,12(sp)
 183c8e0:	d9000015 	stw	r4,0(sp)
 183c8e4:	d9000415 	stw	r4,16(sp)
 183c8e8:	28001126 	beq	r5,zero,183c930 <snprintf+0x78>
 183c8ec:	28bfffc4 	addi	r2,r5,-1
 183c8f0:	d8800215 	stw	r2,8(sp)
 183c8f4:	d8800515 	stw	r2,20(sp)
 183c8f8:	d9c01c04 	addi	r7,sp,112
 183c8fc:	00bfffc4 	movi	r2,-1
 183c900:	d80b883a 	mov	r5,sp
 183c904:	8009883a 	mov	r4,r16
 183c908:	d880038d 	sth	r2,14(sp)
 183c90c:	183ca2c0 	call	183ca2c <___svfprintf_internal_r>
 183c910:	00ffffc4 	movi	r3,-1
 183c914:	10c01416 	blt	r2,r3,183c968 <snprintf+0xb0>
 183c918:	d8c00017 	ldw	r3,0(sp)
 183c91c:	18000005 	stb	zero,0(r3)
 183c920:	dfc01b17 	ldw	ra,108(sp)
 183c924:	dc001a17 	ldw	r16,104(sp)
 183c928:	dec01d04 	addi	sp,sp,116
 183c92c:	f800283a 	ret
 183c930:	00bfffc4 	movi	r2,-1
 183c934:	d9c01c04 	addi	r7,sp,112
 183c938:	d80b883a 	mov	r5,sp
 183c93c:	8009883a 	mov	r4,r16
 183c940:	d8000215 	stw	zero,8(sp)
 183c944:	d8000515 	stw	zero,20(sp)
 183c948:	d880038d 	sth	r2,14(sp)
 183c94c:	183ca2c0 	call	183ca2c <___svfprintf_internal_r>
 183c950:	00ffffc4 	movi	r3,-1
 183c954:	10c00716 	blt	r2,r3,183c974 <snprintf+0xbc>
 183c958:	dfc01b17 	ldw	ra,108(sp)
 183c95c:	dc001a17 	ldw	r16,104(sp)
 183c960:	dec01d04 	addi	sp,sp,116
 183c964:	f800283a 	ret
 183c968:	00c022c4 	movi	r3,139
 183c96c:	80c00015 	stw	r3,0(r16)
 183c970:	003fe906 	br	183c918 <__ram_exceptions_end+0xff82c628>
 183c974:	00c022c4 	movi	r3,139
 183c978:	80c00015 	stw	r3,0(r16)
 183c97c:	dfc01b17 	ldw	ra,108(sp)
 183c980:	dc001a17 	ldw	r16,104(sp)
 183c984:	dec01d04 	addi	sp,sp,116
 183c988:	f800283a 	ret
 183c98c:	008022c4 	movi	r2,139
 183c990:	80800015 	stw	r2,0(r16)
 183c994:	00bfffc4 	movi	r2,-1
 183c998:	003fef06 	br	183c958 <__ram_exceptions_end+0xff82c668>

0183c99c <strcpy>:
 183c99c:	2906b03a 	or	r3,r5,r4
 183c9a0:	18c000cc 	andi	r3,r3,3
 183c9a4:	2005883a 	mov	r2,r4
 183c9a8:	1800161e 	bne	r3,zero,183ca04 <strcpy+0x68>
 183c9ac:	29c00017 	ldw	r7,0(r5)
 183c9b0:	02ffbff4 	movhi	r11,65279
 183c9b4:	5affbfc4 	addi	r11,r11,-257
 183c9b8:	02a02074 	movhi	r10,32897
 183c9bc:	01c6303a 	nor	r3,zero,r7
 183c9c0:	3ac9883a 	add	r4,r7,r11
 183c9c4:	52a02004 	addi	r10,r10,-32640
 183c9c8:	20c6703a 	and	r3,r4,r3
 183c9cc:	1a86703a 	and	r3,r3,r10
 183c9d0:	18000c1e 	bne	r3,zero,183ca04 <strcpy+0x68>
 183c9d4:	1011883a 	mov	r8,r2
 183c9d8:	41c00015 	stw	r7,0(r8)
 183c9dc:	29400104 	addi	r5,r5,4
 183c9e0:	29c00017 	ldw	r7,0(r5)
 183c9e4:	41800104 	addi	r6,r8,4
 183c9e8:	3011883a 	mov	r8,r6
 183c9ec:	3ad3883a 	add	r9,r7,r11
 183c9f0:	01c6303a 	nor	r3,zero,r7
 183c9f4:	48c6703a 	and	r3,r9,r3
 183c9f8:	1a86703a 	and	r3,r3,r10
 183c9fc:	183ff626 	beq	r3,zero,183c9d8 <__ram_exceptions_end+0xff82c6e8>
 183ca00:	00000106 	br	183ca08 <strcpy+0x6c>
 183ca04:	100d883a 	mov	r6,r2
 183ca08:	28c00003 	ldbu	r3,0(r5)
 183ca0c:	31800044 	addi	r6,r6,1
 183ca10:	29400044 	addi	r5,r5,1
 183ca14:	30ffffc5 	stb	r3,-1(r6)
 183ca18:	18c03fcc 	andi	r3,r3,255
 183ca1c:	18c0201c 	xori	r3,r3,128
 183ca20:	18ffe004 	addi	r3,r3,-128
 183ca24:	183ff81e 	bne	r3,zero,183ca08 <__ram_exceptions_end+0xff82c718>
 183ca28:	f800283a 	ret

0183ca2c <___svfprintf_internal_r>:
 183ca2c:	deffb704 	addi	sp,sp,-292
 183ca30:	dfc04815 	stw	ra,288(sp)
 183ca34:	ddc04615 	stw	r23,280(sp)
 183ca38:	d9402c15 	stw	r5,176(sp)
 183ca3c:	d9003915 	stw	r4,228(sp)
 183ca40:	302f883a 	mov	r23,r6
 183ca44:	d9c02d15 	stw	r7,180(sp)
 183ca48:	df004715 	stw	fp,284(sp)
 183ca4c:	dd804515 	stw	r22,276(sp)
 183ca50:	dd404415 	stw	r21,272(sp)
 183ca54:	dd004315 	stw	r20,268(sp)
 183ca58:	dcc04215 	stw	r19,264(sp)
 183ca5c:	dc804115 	stw	r18,260(sp)
 183ca60:	dc404015 	stw	r17,256(sp)
 183ca64:	dc003f15 	stw	r16,252(sp)
 183ca68:	18054bc0 	call	18054bc <_localeconv_r>
 183ca6c:	10800017 	ldw	r2,0(r2)
 183ca70:	1009883a 	mov	r4,r2
 183ca74:	d8803415 	stw	r2,208(sp)
 183ca78:	18074e40 	call	18074e4 <strlen>
 183ca7c:	d8c02c17 	ldw	r3,176(sp)
 183ca80:	d8803815 	stw	r2,224(sp)
 183ca84:	1880030b 	ldhu	r2,12(r3)
 183ca88:	1080200c 	andi	r2,r2,128
 183ca8c:	10000226 	beq	r2,zero,183ca98 <___svfprintf_internal_r+0x6c>
 183ca90:	18800417 	ldw	r2,16(r3)
 183ca94:	10067f26 	beq	r2,zero,183e494 <___svfprintf_internal_r+0x1a68>
 183ca98:	dcc03917 	ldw	r19,228(sp)
 183ca9c:	d8c00404 	addi	r3,sp,16
 183caa0:	05406134 	movhi	r21,388
 183caa4:	d9001e04 	addi	r4,sp,120
 183caa8:	ad4cd004 	addi	r21,r21,13120
 183caac:	d8c01e15 	stw	r3,120(sp)
 183cab0:	d8002015 	stw	zero,128(sp)
 183cab4:	d8001f15 	stw	zero,124(sp)
 183cab8:	d8003315 	stw	zero,204(sp)
 183cabc:	d8003615 	stw	zero,216(sp)
 183cac0:	d8003715 	stw	zero,220(sp)
 183cac4:	1811883a 	mov	r8,r3
 183cac8:	d8003a15 	stw	zero,232(sp)
 183cacc:	d8003b15 	stw	zero,236(sp)
 183cad0:	d8002f15 	stw	zero,188(sp)
 183cad4:	d9002815 	stw	r4,160(sp)
 183cad8:	b8800007 	ldb	r2,0(r23)
 183cadc:	10026726 	beq	r2,zero,183d47c <___svfprintf_internal_r+0xa50>
 183cae0:	00c00944 	movi	r3,37
 183cae4:	b821883a 	mov	r16,r23
 183cae8:	10c0021e 	bne	r2,r3,183caf4 <___svfprintf_internal_r+0xc8>
 183caec:	00001406 	br	183cb40 <___svfprintf_internal_r+0x114>
 183caf0:	10c00326 	beq	r2,r3,183cb00 <___svfprintf_internal_r+0xd4>
 183caf4:	84000044 	addi	r16,r16,1
 183caf8:	80800007 	ldb	r2,0(r16)
 183cafc:	103ffc1e 	bne	r2,zero,183caf0 <__ram_exceptions_end+0xff82c800>
 183cb00:	85e3c83a 	sub	r17,r16,r23
 183cb04:	88000e26 	beq	r17,zero,183cb40 <___svfprintf_internal_r+0x114>
 183cb08:	d8c02017 	ldw	r3,128(sp)
 183cb0c:	d8801f17 	ldw	r2,124(sp)
 183cb10:	45c00015 	stw	r23,0(r8)
 183cb14:	1c47883a 	add	r3,r3,r17
 183cb18:	10800044 	addi	r2,r2,1
 183cb1c:	d8c02015 	stw	r3,128(sp)
 183cb20:	44400115 	stw	r17,4(r8)
 183cb24:	d8801f15 	stw	r2,124(sp)
 183cb28:	00c001c4 	movi	r3,7
 183cb2c:	18809716 	blt	r3,r2,183cd8c <___svfprintf_internal_r+0x360>
 183cb30:	42000204 	addi	r8,r8,8
 183cb34:	d9402f17 	ldw	r5,188(sp)
 183cb38:	2c4b883a 	add	r5,r5,r17
 183cb3c:	d9402f15 	stw	r5,188(sp)
 183cb40:	80800007 	ldb	r2,0(r16)
 183cb44:	10009826 	beq	r2,zero,183cda8 <___svfprintf_internal_r+0x37c>
 183cb48:	84400047 	ldb	r17,1(r16)
 183cb4c:	00bfffc4 	movi	r2,-1
 183cb50:	85c00044 	addi	r23,r16,1
 183cb54:	d8002785 	stb	zero,158(sp)
 183cb58:	0007883a 	mov	r3,zero
 183cb5c:	000f883a 	mov	r7,zero
 183cb60:	d8802915 	stw	r2,164(sp)
 183cb64:	d8003115 	stw	zero,196(sp)
 183cb68:	0025883a 	mov	r18,zero
 183cb6c:	01401604 	movi	r5,88
 183cb70:	01800244 	movi	r6,9
 183cb74:	02800a84 	movi	r10,42
 183cb78:	02401b04 	movi	r9,108
 183cb7c:	bdc00044 	addi	r23,r23,1
 183cb80:	88bff804 	addi	r2,r17,-32
 183cb84:	2882f036 	bltu	r5,r2,183d748 <___svfprintf_internal_r+0xd1c>
 183cb88:	100490ba 	slli	r2,r2,2
 183cb8c:	01006134 	movhi	r4,388
 183cb90:	2132e804 	addi	r4,r4,-13408
 183cb94:	1105883a 	add	r2,r2,r4
 183cb98:	10800017 	ldw	r2,0(r2)
 183cb9c:	1000683a 	jmp	r2
 183cba0:	0183d6b0 	cmpltui	r6,zero,3930
 183cba4:	0183d748 	cmpgei	r6,zero,3933
 183cba8:	0183d748 	cmpgei	r6,zero,3933
 183cbac:	0183d6a4 	muli	r6,zero,3930
 183cbb0:	0183d748 	cmpgei	r6,zero,3933
 183cbb4:	0183d748 	cmpgei	r6,zero,3933
 183cbb8:	0183d748 	cmpgei	r6,zero,3933
 183cbbc:	0183d748 	cmpgei	r6,zero,3933
 183cbc0:	0183d748 	cmpgei	r6,zero,3933
 183cbc4:	0183d748 	cmpgei	r6,zero,3933
 183cbc8:	0183ce04 	movi	r6,3896
 183cbcc:	0183d5e0 	cmpeqi	r6,zero,3927
 183cbd0:	0183d748 	cmpgei	r6,zero,3933
 183cbd4:	0183cd14 	movui	r6,3892
 183cbd8:	0183ce2c 	andhi	r6,zero,3896
 183cbdc:	0183d748 	cmpgei	r6,zero,3933
 183cbe0:	0183cea0 	cmpeqi	r6,zero,3898
 183cbe4:	0183ce6c 	andhi	r6,zero,3897
 183cbe8:	0183ce6c 	andhi	r6,zero,3897
 183cbec:	0183ce6c 	andhi	r6,zero,3897
 183cbf0:	0183ce6c 	andhi	r6,zero,3897
 183cbf4:	0183ce6c 	andhi	r6,zero,3897
 183cbf8:	0183ce6c 	andhi	r6,zero,3897
 183cbfc:	0183ce6c 	andhi	r6,zero,3897
 183cc00:	0183ce6c 	andhi	r6,zero,3897
 183cc04:	0183ce6c 	andhi	r6,zero,3897
 183cc08:	0183d748 	cmpgei	r6,zero,3933
 183cc0c:	0183d748 	cmpgei	r6,zero,3933
 183cc10:	0183d748 	cmpgei	r6,zero,3933
 183cc14:	0183d748 	cmpgei	r6,zero,3933
 183cc18:	0183d748 	cmpgei	r6,zero,3933
 183cc1c:	0183d748 	cmpgei	r6,zero,3933
 183cc20:	0183d748 	cmpgei	r6,zero,3933
 183cc24:	0183d748 	cmpgei	r6,zero,3933
 183cc28:	0183d748 	cmpgei	r6,zero,3933
 183cc2c:	0183d748 	cmpgei	r6,zero,3933
 183cc30:	0183cf58 	cmpnei	r6,zero,3901
 183cc34:	0183ceac 	andhi	r6,zero,3898
 183cc38:	0183d748 	cmpgei	r6,zero,3933
 183cc3c:	0183ceac 	andhi	r6,zero,3898
 183cc40:	0183d748 	cmpgei	r6,zero,3933
 183cc44:	0183d748 	cmpgei	r6,zero,3933
 183cc48:	0183d748 	cmpgei	r6,zero,3933
 183cc4c:	0183d748 	cmpgei	r6,zero,3933
 183cc50:	0183cf4c 	andi	r6,zero,3901
 183cc54:	0183d748 	cmpgei	r6,zero,3933
 183cc58:	0183d748 	cmpgei	r6,zero,3933
 183cc5c:	0183d014 	movui	r6,3904
 183cc60:	0183d748 	cmpgei	r6,zero,3933
 183cc64:	0183d748 	cmpgei	r6,zero,3933
 183cc68:	0183d748 	cmpgei	r6,zero,3933
 183cc6c:	0183d748 	cmpgei	r6,zero,3933
 183cc70:	0183d748 	cmpgei	r6,zero,3933
 183cc74:	0183d484 	movi	r6,3922
 183cc78:	0183d748 	cmpgei	r6,zero,3933
 183cc7c:	0183d748 	cmpgei	r6,zero,3933
 183cc80:	0183d4e4 	muli	r6,zero,3923
 183cc84:	0183d748 	cmpgei	r6,zero,3933
 183cc88:	0183d748 	cmpgei	r6,zero,3933
 183cc8c:	0183d748 	cmpgei	r6,zero,3933
 183cc90:	0183d748 	cmpgei	r6,zero,3933
 183cc94:	0183d748 	cmpgei	r6,zero,3933
 183cc98:	0183d748 	cmpgei	r6,zero,3933
 183cc9c:	0183d748 	cmpgei	r6,zero,3933
 183cca0:	0183d748 	cmpgei	r6,zero,3933
 183cca4:	0183d748 	cmpgei	r6,zero,3933
 183cca8:	0183d748 	cmpgei	r6,zero,3933
 183ccac:	0183d594 	movui	r6,3926
 183ccb0:	0183d6d0 	cmplti	r6,zero,3931
 183ccb4:	0183ceac 	andhi	r6,zero,3898
 183ccb8:	0183ceac 	andhi	r6,zero,3898
 183ccbc:	0183ceac 	andhi	r6,zero,3898
 183ccc0:	0183d724 	muli	r6,zero,3932
 183ccc4:	0183d6d0 	cmplti	r6,zero,3931
 183ccc8:	0183d748 	cmpgei	r6,zero,3933
 183cccc:	0183d748 	cmpgei	r6,zero,3933
 183ccd0:	0183d6e0 	cmpeqi	r6,zero,3931
 183ccd4:	0183d748 	cmpgei	r6,zero,3933
 183ccd8:	0183d6f0 	cmpltui	r6,zero,3931
 183ccdc:	0183d5d0 	cmplti	r6,zero,3927
 183cce0:	0183cd20 	cmpeqi	r6,zero,3892
 183cce4:	0183d5f0 	cmpltui	r6,zero,3927
 183cce8:	0183d748 	cmpgei	r6,zero,3933
 183ccec:	0183d5fc 	xorhi	r6,zero,3927
 183ccf0:	0183d748 	cmpgei	r6,zero,3933
 183ccf4:	0183d658 	cmpnei	r6,zero,3929
 183ccf8:	0183d748 	cmpgei	r6,zero,3933
 183ccfc:	0183d748 	cmpgei	r6,zero,3933
 183cd00:	0183d668 	cmpgeui	r6,zero,3929
 183cd04:	d9003117 	ldw	r4,196(sp)
 183cd08:	d8802d15 	stw	r2,180(sp)
 183cd0c:	0109c83a 	sub	r4,zero,r4
 183cd10:	d9003115 	stw	r4,196(sp)
 183cd14:	94800114 	ori	r18,r18,4
 183cd18:	bc400007 	ldb	r17,0(r23)
 183cd1c:	003f9706 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183cd20:	00800c04 	movi	r2,48
 183cd24:	d9002d17 	ldw	r4,180(sp)
 183cd28:	d9402917 	ldw	r5,164(sp)
 183cd2c:	d8802705 	stb	r2,156(sp)
 183cd30:	00801e04 	movi	r2,120
 183cd34:	d8802745 	stb	r2,157(sp)
 183cd38:	d8002785 	stb	zero,158(sp)
 183cd3c:	20c00104 	addi	r3,r4,4
 183cd40:	25000017 	ldw	r20,0(r4)
 183cd44:	002d883a 	mov	r22,zero
 183cd48:	90800094 	ori	r2,r18,2
 183cd4c:	28028616 	blt	r5,zero,183d768 <___svfprintf_internal_r+0xd3c>
 183cd50:	00bfdfc4 	movi	r2,-129
 183cd54:	90a4703a 	and	r18,r18,r2
 183cd58:	d8c02d15 	stw	r3,180(sp)
 183cd5c:	94800094 	ori	r18,r18,2
 183cd60:	a002731e 	bne	r20,zero,183d730 <___svfprintf_internal_r+0xd04>
 183cd64:	00806134 	movhi	r2,388
 183cd68:	10821a04 	addi	r2,r2,2152
 183cd6c:	d8803a15 	stw	r2,232(sp)
 183cd70:	04401e04 	movi	r17,120
 183cd74:	d8c02917 	ldw	r3,164(sp)
 183cd78:	0039883a 	mov	fp,zero
 183cd7c:	1801d526 	beq	r3,zero,183d4d4 <___svfprintf_internal_r+0xaa8>
 183cd80:	0029883a 	mov	r20,zero
 183cd84:	002d883a 	mov	r22,zero
 183cd88:	0001f106 	br	183d550 <___svfprintf_internal_r+0xb24>
 183cd8c:	d9402c17 	ldw	r5,176(sp)
 183cd90:	d9801e04 	addi	r6,sp,120
 183cd94:	9809883a 	mov	r4,r19
 183cd98:	183ee9c0 	call	183ee9c <__ssprint_r>
 183cd9c:	1000081e 	bne	r2,zero,183cdc0 <___svfprintf_internal_r+0x394>
 183cda0:	da000404 	addi	r8,sp,16
 183cda4:	003f6306 	br	183cb34 <__ram_exceptions_end+0xff82c844>
 183cda8:	d8802017 	ldw	r2,128(sp)
 183cdac:	10000426 	beq	r2,zero,183cdc0 <___svfprintf_internal_r+0x394>
 183cdb0:	d9402c17 	ldw	r5,176(sp)
 183cdb4:	d9003917 	ldw	r4,228(sp)
 183cdb8:	d9801e04 	addi	r6,sp,120
 183cdbc:	183ee9c0 	call	183ee9c <__ssprint_r>
 183cdc0:	d8802c17 	ldw	r2,176(sp)
 183cdc4:	10c0030b 	ldhu	r3,12(r2)
 183cdc8:	d8802f17 	ldw	r2,188(sp)
 183cdcc:	18c0100c 	andi	r3,r3,64
 183cdd0:	1805f51e 	bne	r3,zero,183e5a8 <___svfprintf_internal_r+0x1b7c>
 183cdd4:	dfc04817 	ldw	ra,288(sp)
 183cdd8:	df004717 	ldw	fp,284(sp)
 183cddc:	ddc04617 	ldw	r23,280(sp)
 183cde0:	dd804517 	ldw	r22,276(sp)
 183cde4:	dd404417 	ldw	r21,272(sp)
 183cde8:	dd004317 	ldw	r20,268(sp)
 183cdec:	dcc04217 	ldw	r19,264(sp)
 183cdf0:	dc804117 	ldw	r18,260(sp)
 183cdf4:	dc404017 	ldw	r17,256(sp)
 183cdf8:	dc003f17 	ldw	r16,252(sp)
 183cdfc:	dec04904 	addi	sp,sp,292
 183ce00:	f800283a 	ret
 183ce04:	d8802d17 	ldw	r2,180(sp)
 183ce08:	d9002d17 	ldw	r4,180(sp)
 183ce0c:	10800017 	ldw	r2,0(r2)
 183ce10:	d8803115 	stw	r2,196(sp)
 183ce14:	20800104 	addi	r2,r4,4
 183ce18:	d9003117 	ldw	r4,196(sp)
 183ce1c:	203fb916 	blt	r4,zero,183cd04 <__ram_exceptions_end+0xff82ca14>
 183ce20:	d8802d15 	stw	r2,180(sp)
 183ce24:	bc400007 	ldb	r17,0(r23)
 183ce28:	003f5406 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183ce2c:	bc400007 	ldb	r17,0(r23)
 183ce30:	bac00044 	addi	r11,r23,1
 183ce34:	8a873926 	beq	r17,r10,183eb1c <___svfprintf_internal_r+0x20f0>
 183ce38:	88bff404 	addi	r2,r17,-48
 183ce3c:	0009883a 	mov	r4,zero
 183ce40:	30868836 	bltu	r6,r2,183e864 <___svfprintf_internal_r+0x1e38>
 183ce44:	5c400007 	ldb	r17,0(r11)
 183ce48:	210002a4 	muli	r4,r4,10
 183ce4c:	5dc00044 	addi	r23,r11,1
 183ce50:	b817883a 	mov	r11,r23
 183ce54:	2089883a 	add	r4,r4,r2
 183ce58:	88bff404 	addi	r2,r17,-48
 183ce5c:	30bff92e 	bgeu	r6,r2,183ce44 <__ram_exceptions_end+0xff82cb54>
 183ce60:	2005d716 	blt	r4,zero,183e5c0 <___svfprintf_internal_r+0x1b94>
 183ce64:	d9002915 	stw	r4,164(sp)
 183ce68:	003f4506 	br	183cb80 <__ram_exceptions_end+0xff82c890>
 183ce6c:	b809883a 	mov	r4,r23
 183ce70:	d8003115 	stw	zero,196(sp)
 183ce74:	88bff404 	addi	r2,r17,-48
 183ce78:	0017883a 	mov	r11,zero
 183ce7c:	24400007 	ldb	r17,0(r4)
 183ce80:	5ac002a4 	muli	r11,r11,10
 183ce84:	bdc00044 	addi	r23,r23,1
 183ce88:	b809883a 	mov	r4,r23
 183ce8c:	12d7883a 	add	r11,r2,r11
 183ce90:	88bff404 	addi	r2,r17,-48
 183ce94:	30bff92e 	bgeu	r6,r2,183ce7c <__ram_exceptions_end+0xff82cb8c>
 183ce98:	dac03115 	stw	r11,196(sp)
 183ce9c:	003f3806 	br	183cb80 <__ram_exceptions_end+0xff82c890>
 183cea0:	94802014 	ori	r18,r18,128
 183cea4:	bc400007 	ldb	r17,0(r23)
 183cea8:	003f3406 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183ceac:	18c03fcc 	andi	r3,r3,255
 183ceb0:	1807471e 	bne	r3,zero,183ebd0 <___svfprintf_internal_r+0x21a4>
 183ceb4:	9080020c 	andi	r2,r18,8
 183ceb8:	10047d26 	beq	r2,zero,183e0b0 <___svfprintf_internal_r+0x1684>
 183cebc:	d8c02d17 	ldw	r3,180(sp)
 183cec0:	d9002d17 	ldw	r4,180(sp)
 183cec4:	d9402d17 	ldw	r5,180(sp)
 183cec8:	18c00017 	ldw	r3,0(r3)
 183cecc:	21000117 	ldw	r4,4(r4)
 183ced0:	29400204 	addi	r5,r5,8
 183ced4:	d8c03615 	stw	r3,216(sp)
 183ced8:	d9003715 	stw	r4,220(sp)
 183cedc:	d9402d15 	stw	r5,180(sp)
 183cee0:	d9003617 	ldw	r4,216(sp)
 183cee4:	d9403717 	ldw	r5,220(sp)
 183cee8:	da003e15 	stw	r8,248(sp)
 183ceec:	04000044 	movi	r16,1
 183cef0:	18072040 	call	1807204 <__fpclassifyd>
 183cef4:	da003e17 	ldw	r8,248(sp)
 183cef8:	14044b1e 	bne	r2,r16,183e028 <___svfprintf_internal_r+0x15fc>
 183cefc:	d9003617 	ldw	r4,216(sp)
 183cf00:	d9403717 	ldw	r5,220(sp)
 183cf04:	000d883a 	mov	r6,zero
 183cf08:	000f883a 	mov	r7,zero
 183cf0c:	180bfd00 	call	180bfd0 <__ledf2>
 183cf10:	da003e17 	ldw	r8,248(sp)
 183cf14:	1005f316 	blt	r2,zero,183e6e4 <___svfprintf_internal_r+0x1cb8>
 183cf18:	df002783 	ldbu	fp,158(sp)
 183cf1c:	008011c4 	movi	r2,71
 183cf20:	1445590e 	bge	r2,r17,183e488 <___svfprintf_internal_r+0x1a5c>
 183cf24:	04006134 	movhi	r16,388
 183cf28:	84021204 	addi	r16,r16,2120
 183cf2c:	00c000c4 	movi	r3,3
 183cf30:	00bfdfc4 	movi	r2,-129
 183cf34:	d8c02a15 	stw	r3,168(sp)
 183cf38:	90a4703a 	and	r18,r18,r2
 183cf3c:	d8c02e15 	stw	r3,184(sp)
 183cf40:	d8002915 	stw	zero,164(sp)
 183cf44:	d8003215 	stw	zero,200(sp)
 183cf48:	00006606 	br	183d0e4 <___svfprintf_internal_r+0x6b8>
 183cf4c:	94800214 	ori	r18,r18,8
 183cf50:	bc400007 	ldb	r17,0(r23)
 183cf54:	003f0906 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183cf58:	18c03fcc 	andi	r3,r3,255
 183cf5c:	1807181e 	bne	r3,zero,183ebc0 <___svfprintf_internal_r+0x2194>
 183cf60:	94800414 	ori	r18,r18,16
 183cf64:	9080080c 	andi	r2,r18,32
 183cf68:	10039626 	beq	r2,zero,183ddc4 <___svfprintf_internal_r+0x1398>
 183cf6c:	d9402d17 	ldw	r5,180(sp)
 183cf70:	28800117 	ldw	r2,4(r5)
 183cf74:	2d000017 	ldw	r20,0(r5)
 183cf78:	29400204 	addi	r5,r5,8
 183cf7c:	d9402d15 	stw	r5,180(sp)
 183cf80:	102d883a 	mov	r22,r2
 183cf84:	10039816 	blt	r2,zero,183dde8 <___svfprintf_internal_r+0x13bc>
 183cf88:	d9402917 	ldw	r5,164(sp)
 183cf8c:	df002783 	ldbu	fp,158(sp)
 183cf90:	2803ab16 	blt	r5,zero,183de40 <___svfprintf_internal_r+0x1414>
 183cf94:	00ffdfc4 	movi	r3,-129
 183cf98:	a584b03a 	or	r2,r20,r22
 183cf9c:	90e4703a 	and	r18,r18,r3
 183cfa0:	10014a26 	beq	r2,zero,183d4cc <___svfprintf_internal_r+0xaa0>
 183cfa4:	b0034b26 	beq	r22,zero,183dcd4 <___svfprintf_internal_r+0x12a8>
 183cfa8:	dc402a15 	stw	r17,168(sp)
 183cfac:	dc001e04 	addi	r16,sp,120
 183cfb0:	b023883a 	mov	r17,r22
 183cfb4:	402d883a 	mov	r22,r8
 183cfb8:	a009883a 	mov	r4,r20
 183cfbc:	880b883a 	mov	r5,r17
 183cfc0:	01800284 	movi	r6,10
 183cfc4:	000f883a 	mov	r7,zero
 183cfc8:	180a5ec0 	call	180a5ec <__umoddi3>
 183cfcc:	10800c04 	addi	r2,r2,48
 183cfd0:	843fffc4 	addi	r16,r16,-1
 183cfd4:	a009883a 	mov	r4,r20
 183cfd8:	880b883a 	mov	r5,r17
 183cfdc:	80800005 	stb	r2,0(r16)
 183cfe0:	01800284 	movi	r6,10
 183cfe4:	000f883a 	mov	r7,zero
 183cfe8:	180a0740 	call	180a074 <__udivdi3>
 183cfec:	1029883a 	mov	r20,r2
 183cff0:	10c4b03a 	or	r2,r2,r3
 183cff4:	1823883a 	mov	r17,r3
 183cff8:	103fef1e 	bne	r2,zero,183cfb8 <__ram_exceptions_end+0xff82ccc8>
 183cffc:	d8c02817 	ldw	r3,160(sp)
 183d000:	dc402a17 	ldw	r17,168(sp)
 183d004:	b011883a 	mov	r8,r22
 183d008:	1c07c83a 	sub	r3,r3,r16
 183d00c:	d8c02e15 	stw	r3,184(sp)
 183d010:	00002e06 	br	183d0cc <___svfprintf_internal_r+0x6a0>
 183d014:	18c03fcc 	andi	r3,r3,255
 183d018:	1806e71e 	bne	r3,zero,183ebb8 <___svfprintf_internal_r+0x218c>
 183d01c:	94800414 	ori	r18,r18,16
 183d020:	9080080c 	andi	r2,r18,32
 183d024:	1002d426 	beq	r2,zero,183db78 <___svfprintf_internal_r+0x114c>
 183d028:	d9402d17 	ldw	r5,180(sp)
 183d02c:	d8c02917 	ldw	r3,164(sp)
 183d030:	d8002785 	stb	zero,158(sp)
 183d034:	28800204 	addi	r2,r5,8
 183d038:	2d000017 	ldw	r20,0(r5)
 183d03c:	2d800117 	ldw	r22,4(r5)
 183d040:	18041516 	blt	r3,zero,183e098 <___svfprintf_internal_r+0x166c>
 183d044:	013fdfc4 	movi	r4,-129
 183d048:	a586b03a 	or	r3,r20,r22
 183d04c:	d8802d15 	stw	r2,180(sp)
 183d050:	9124703a 	and	r18,r18,r4
 183d054:	1802d51e 	bne	r3,zero,183dbac <___svfprintf_internal_r+0x1180>
 183d058:	d9402917 	ldw	r5,164(sp)
 183d05c:	0039883a 	mov	fp,zero
 183d060:	2806be26 	beq	r5,zero,183eb5c <___svfprintf_internal_r+0x2130>
 183d064:	0029883a 	mov	r20,zero
 183d068:	002d883a 	mov	r22,zero
 183d06c:	dc001e04 	addi	r16,sp,120
 183d070:	a006d0fa 	srli	r3,r20,3
 183d074:	b008977a 	slli	r4,r22,29
 183d078:	b02cd0fa 	srli	r22,r22,3
 183d07c:	a50001cc 	andi	r20,r20,7
 183d080:	a0800c04 	addi	r2,r20,48
 183d084:	843fffc4 	addi	r16,r16,-1
 183d088:	20e8b03a 	or	r20,r4,r3
 183d08c:	80800005 	stb	r2,0(r16)
 183d090:	a586b03a 	or	r3,r20,r22
 183d094:	183ff61e 	bne	r3,zero,183d070 <__ram_exceptions_end+0xff82cd80>
 183d098:	90c0004c 	andi	r3,r18,1
 183d09c:	18013926 	beq	r3,zero,183d584 <___svfprintf_internal_r+0xb58>
 183d0a0:	10803fcc 	andi	r2,r2,255
 183d0a4:	1080201c 	xori	r2,r2,128
 183d0a8:	10bfe004 	addi	r2,r2,-128
 183d0ac:	00c00c04 	movi	r3,48
 183d0b0:	10c13426 	beq	r2,r3,183d584 <___svfprintf_internal_r+0xb58>
 183d0b4:	80ffffc5 	stb	r3,-1(r16)
 183d0b8:	d8c02817 	ldw	r3,160(sp)
 183d0bc:	80bfffc4 	addi	r2,r16,-1
 183d0c0:	1021883a 	mov	r16,r2
 183d0c4:	1887c83a 	sub	r3,r3,r2
 183d0c8:	d8c02e15 	stw	r3,184(sp)
 183d0cc:	d8802e17 	ldw	r2,184(sp)
 183d0d0:	d9002917 	ldw	r4,164(sp)
 183d0d4:	1100010e 	bge	r2,r4,183d0dc <___svfprintf_internal_r+0x6b0>
 183d0d8:	2005883a 	mov	r2,r4
 183d0dc:	d8802a15 	stw	r2,168(sp)
 183d0e0:	d8003215 	stw	zero,200(sp)
 183d0e4:	e7003fcc 	andi	fp,fp,255
 183d0e8:	e700201c 	xori	fp,fp,128
 183d0ec:	e73fe004 	addi	fp,fp,-128
 183d0f0:	e0000326 	beq	fp,zero,183d100 <___svfprintf_internal_r+0x6d4>
 183d0f4:	d8c02a17 	ldw	r3,168(sp)
 183d0f8:	18c00044 	addi	r3,r3,1
 183d0fc:	d8c02a15 	stw	r3,168(sp)
 183d100:	90c0008c 	andi	r3,r18,2
 183d104:	d8c02b15 	stw	r3,172(sp)
 183d108:	18000326 	beq	r3,zero,183d118 <___svfprintf_internal_r+0x6ec>
 183d10c:	d8c02a17 	ldw	r3,168(sp)
 183d110:	18c00084 	addi	r3,r3,2
 183d114:	d8c02a15 	stw	r3,168(sp)
 183d118:	90c0210c 	andi	r3,r18,132
 183d11c:	d8c03015 	stw	r3,192(sp)
 183d120:	1801a11e 	bne	r3,zero,183d7a8 <___svfprintf_internal_r+0xd7c>
 183d124:	d9003117 	ldw	r4,196(sp)
 183d128:	d8c02a17 	ldw	r3,168(sp)
 183d12c:	20e9c83a 	sub	r20,r4,r3
 183d130:	05019d0e 	bge	zero,r20,183d7a8 <___svfprintf_internal_r+0xd7c>
 183d134:	02400404 	movi	r9,16
 183d138:	d8c02017 	ldw	r3,128(sp)
 183d13c:	d8801f17 	ldw	r2,124(sp)
 183d140:	4d051b0e 	bge	r9,r20,183e5b0 <___svfprintf_internal_r+0x1b84>
 183d144:	01406134 	movhi	r5,388
 183d148:	294cd404 	addi	r5,r5,13136
 183d14c:	dc403c15 	stw	r17,240(sp)
 183d150:	d9403515 	stw	r5,212(sp)
 183d154:	a023883a 	mov	r17,r20
 183d158:	482d883a 	mov	r22,r9
 183d15c:	9029883a 	mov	r20,r18
 183d160:	070001c4 	movi	fp,7
 183d164:	8025883a 	mov	r18,r16
 183d168:	dc002c17 	ldw	r16,176(sp)
 183d16c:	00000306 	br	183d17c <___svfprintf_internal_r+0x750>
 183d170:	8c7ffc04 	addi	r17,r17,-16
 183d174:	42000204 	addi	r8,r8,8
 183d178:	b440130e 	bge	r22,r17,183d1c8 <___svfprintf_internal_r+0x79c>
 183d17c:	01006134 	movhi	r4,388
 183d180:	18c00404 	addi	r3,r3,16
 183d184:	10800044 	addi	r2,r2,1
 183d188:	210cd404 	addi	r4,r4,13136
 183d18c:	41000015 	stw	r4,0(r8)
 183d190:	45800115 	stw	r22,4(r8)
 183d194:	d8c02015 	stw	r3,128(sp)
 183d198:	d8801f15 	stw	r2,124(sp)
 183d19c:	e0bff40e 	bge	fp,r2,183d170 <__ram_exceptions_end+0xff82ce80>
 183d1a0:	d9801e04 	addi	r6,sp,120
 183d1a4:	800b883a 	mov	r5,r16
 183d1a8:	9809883a 	mov	r4,r19
 183d1ac:	183ee9c0 	call	183ee9c <__ssprint_r>
 183d1b0:	103f031e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183d1b4:	8c7ffc04 	addi	r17,r17,-16
 183d1b8:	d8c02017 	ldw	r3,128(sp)
 183d1bc:	d8801f17 	ldw	r2,124(sp)
 183d1c0:	da000404 	addi	r8,sp,16
 183d1c4:	b47fed16 	blt	r22,r17,183d17c <__ram_exceptions_end+0xff82ce8c>
 183d1c8:	9021883a 	mov	r16,r18
 183d1cc:	a025883a 	mov	r18,r20
 183d1d0:	8829883a 	mov	r20,r17
 183d1d4:	dc403c17 	ldw	r17,240(sp)
 183d1d8:	d9403517 	ldw	r5,212(sp)
 183d1dc:	a0c7883a 	add	r3,r20,r3
 183d1e0:	10800044 	addi	r2,r2,1
 183d1e4:	41400015 	stw	r5,0(r8)
 183d1e8:	45000115 	stw	r20,4(r8)
 183d1ec:	d8c02015 	stw	r3,128(sp)
 183d1f0:	d8801f15 	stw	r2,124(sp)
 183d1f4:	010001c4 	movi	r4,7
 183d1f8:	20829f16 	blt	r4,r2,183dc78 <___svfprintf_internal_r+0x124c>
 183d1fc:	df002787 	ldb	fp,158(sp)
 183d200:	42000204 	addi	r8,r8,8
 183d204:	e0000c26 	beq	fp,zero,183d238 <___svfprintf_internal_r+0x80c>
 183d208:	d8801f17 	ldw	r2,124(sp)
 183d20c:	d9002784 	addi	r4,sp,158
 183d210:	18c00044 	addi	r3,r3,1
 183d214:	10800044 	addi	r2,r2,1
 183d218:	41000015 	stw	r4,0(r8)
 183d21c:	01000044 	movi	r4,1
 183d220:	41000115 	stw	r4,4(r8)
 183d224:	d8c02015 	stw	r3,128(sp)
 183d228:	d8801f15 	stw	r2,124(sp)
 183d22c:	010001c4 	movi	r4,7
 183d230:	20823816 	blt	r4,r2,183db14 <___svfprintf_internal_r+0x10e8>
 183d234:	42000204 	addi	r8,r8,8
 183d238:	d8802b17 	ldw	r2,172(sp)
 183d23c:	10000c26 	beq	r2,zero,183d270 <___svfprintf_internal_r+0x844>
 183d240:	d8801f17 	ldw	r2,124(sp)
 183d244:	d9002704 	addi	r4,sp,156
 183d248:	18c00084 	addi	r3,r3,2
 183d24c:	10800044 	addi	r2,r2,1
 183d250:	41000015 	stw	r4,0(r8)
 183d254:	01000084 	movi	r4,2
 183d258:	41000115 	stw	r4,4(r8)
 183d25c:	d8c02015 	stw	r3,128(sp)
 183d260:	d8801f15 	stw	r2,124(sp)
 183d264:	010001c4 	movi	r4,7
 183d268:	20823216 	blt	r4,r2,183db34 <___svfprintf_internal_r+0x1108>
 183d26c:	42000204 	addi	r8,r8,8
 183d270:	d9003017 	ldw	r4,192(sp)
 183d274:	00802004 	movi	r2,128
 183d278:	20819726 	beq	r4,r2,183d8d8 <___svfprintf_internal_r+0xeac>
 183d27c:	d9402917 	ldw	r5,164(sp)
 183d280:	d8802e17 	ldw	r2,184(sp)
 183d284:	28adc83a 	sub	r22,r5,r2
 183d288:	05802f0e 	bge	zero,r22,183d348 <___svfprintf_internal_r+0x91c>
 183d28c:	07000404 	movi	fp,16
 183d290:	d8801f17 	ldw	r2,124(sp)
 183d294:	e583c00e 	bge	fp,r22,183e198 <___svfprintf_internal_r+0x176c>
 183d298:	01406134 	movhi	r5,388
 183d29c:	294cd004 	addi	r5,r5,13120
 183d2a0:	dc402915 	stw	r17,164(sp)
 183d2a4:	d9402b15 	stw	r5,172(sp)
 183d2a8:	b023883a 	mov	r17,r22
 183d2ac:	050001c4 	movi	r20,7
 183d2b0:	902d883a 	mov	r22,r18
 183d2b4:	8025883a 	mov	r18,r16
 183d2b8:	dc002c17 	ldw	r16,176(sp)
 183d2bc:	00000306 	br	183d2cc <___svfprintf_internal_r+0x8a0>
 183d2c0:	8c7ffc04 	addi	r17,r17,-16
 183d2c4:	42000204 	addi	r8,r8,8
 183d2c8:	e440110e 	bge	fp,r17,183d310 <___svfprintf_internal_r+0x8e4>
 183d2cc:	18c00404 	addi	r3,r3,16
 183d2d0:	10800044 	addi	r2,r2,1
 183d2d4:	45400015 	stw	r21,0(r8)
 183d2d8:	47000115 	stw	fp,4(r8)
 183d2dc:	d8c02015 	stw	r3,128(sp)
 183d2e0:	d8801f15 	stw	r2,124(sp)
 183d2e4:	a0bff60e 	bge	r20,r2,183d2c0 <__ram_exceptions_end+0xff82cfd0>
 183d2e8:	d9801e04 	addi	r6,sp,120
 183d2ec:	800b883a 	mov	r5,r16
 183d2f0:	9809883a 	mov	r4,r19
 183d2f4:	183ee9c0 	call	183ee9c <__ssprint_r>
 183d2f8:	103eb11e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183d2fc:	8c7ffc04 	addi	r17,r17,-16
 183d300:	d8c02017 	ldw	r3,128(sp)
 183d304:	d8801f17 	ldw	r2,124(sp)
 183d308:	da000404 	addi	r8,sp,16
 183d30c:	e47fef16 	blt	fp,r17,183d2cc <__ram_exceptions_end+0xff82cfdc>
 183d310:	9021883a 	mov	r16,r18
 183d314:	b025883a 	mov	r18,r22
 183d318:	882d883a 	mov	r22,r17
 183d31c:	dc402917 	ldw	r17,164(sp)
 183d320:	d9002b17 	ldw	r4,172(sp)
 183d324:	1d87883a 	add	r3,r3,r22
 183d328:	10800044 	addi	r2,r2,1
 183d32c:	41000015 	stw	r4,0(r8)
 183d330:	45800115 	stw	r22,4(r8)
 183d334:	d8c02015 	stw	r3,128(sp)
 183d338:	d8801f15 	stw	r2,124(sp)
 183d33c:	010001c4 	movi	r4,7
 183d340:	2081ec16 	blt	r4,r2,183daf4 <___svfprintf_internal_r+0x10c8>
 183d344:	42000204 	addi	r8,r8,8
 183d348:	9080400c 	andi	r2,r18,256
 183d34c:	1001181e 	bne	r2,zero,183d7b0 <___svfprintf_internal_r+0xd84>
 183d350:	d9402e17 	ldw	r5,184(sp)
 183d354:	d8801f17 	ldw	r2,124(sp)
 183d358:	44000015 	stw	r16,0(r8)
 183d35c:	1947883a 	add	r3,r3,r5
 183d360:	10800044 	addi	r2,r2,1
 183d364:	41400115 	stw	r5,4(r8)
 183d368:	d8c02015 	stw	r3,128(sp)
 183d36c:	d8801f15 	stw	r2,124(sp)
 183d370:	010001c4 	movi	r4,7
 183d374:	2081d116 	blt	r4,r2,183dabc <___svfprintf_internal_r+0x1090>
 183d378:	42000204 	addi	r8,r8,8
 183d37c:	9480010c 	andi	r18,r18,4
 183d380:	90003226 	beq	r18,zero,183d44c <___svfprintf_internal_r+0xa20>
 183d384:	d9403117 	ldw	r5,196(sp)
 183d388:	d8802a17 	ldw	r2,168(sp)
 183d38c:	28a1c83a 	sub	r16,r5,r2
 183d390:	04002e0e 	bge	zero,r16,183d44c <___svfprintf_internal_r+0xa20>
 183d394:	04400404 	movi	r17,16
 183d398:	d8801f17 	ldw	r2,124(sp)
 183d39c:	8c04b90e 	bge	r17,r16,183e684 <___svfprintf_internal_r+0x1c58>
 183d3a0:	01406134 	movhi	r5,388
 183d3a4:	294cd404 	addi	r5,r5,13136
 183d3a8:	d9403515 	stw	r5,212(sp)
 183d3ac:	048001c4 	movi	r18,7
 183d3b0:	dd002c17 	ldw	r20,176(sp)
 183d3b4:	00000306 	br	183d3c4 <___svfprintf_internal_r+0x998>
 183d3b8:	843ffc04 	addi	r16,r16,-16
 183d3bc:	42000204 	addi	r8,r8,8
 183d3c0:	8c00130e 	bge	r17,r16,183d410 <___svfprintf_internal_r+0x9e4>
 183d3c4:	01006134 	movhi	r4,388
 183d3c8:	18c00404 	addi	r3,r3,16
 183d3cc:	10800044 	addi	r2,r2,1
 183d3d0:	210cd404 	addi	r4,r4,13136
 183d3d4:	41000015 	stw	r4,0(r8)
 183d3d8:	44400115 	stw	r17,4(r8)
 183d3dc:	d8c02015 	stw	r3,128(sp)
 183d3e0:	d8801f15 	stw	r2,124(sp)
 183d3e4:	90bff40e 	bge	r18,r2,183d3b8 <__ram_exceptions_end+0xff82d0c8>
 183d3e8:	d9801e04 	addi	r6,sp,120
 183d3ec:	a00b883a 	mov	r5,r20
 183d3f0:	9809883a 	mov	r4,r19
 183d3f4:	183ee9c0 	call	183ee9c <__ssprint_r>
 183d3f8:	103e711e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183d3fc:	843ffc04 	addi	r16,r16,-16
 183d400:	d8c02017 	ldw	r3,128(sp)
 183d404:	d8801f17 	ldw	r2,124(sp)
 183d408:	da000404 	addi	r8,sp,16
 183d40c:	8c3fed16 	blt	r17,r16,183d3c4 <__ram_exceptions_end+0xff82d0d4>
 183d410:	d9403517 	ldw	r5,212(sp)
 183d414:	1c07883a 	add	r3,r3,r16
 183d418:	10800044 	addi	r2,r2,1
 183d41c:	41400015 	stw	r5,0(r8)
 183d420:	44000115 	stw	r16,4(r8)
 183d424:	d8c02015 	stw	r3,128(sp)
 183d428:	d8801f15 	stw	r2,124(sp)
 183d42c:	010001c4 	movi	r4,7
 183d430:	2080060e 	bge	r4,r2,183d44c <___svfprintf_internal_r+0xa20>
 183d434:	d9402c17 	ldw	r5,176(sp)
 183d438:	d9801e04 	addi	r6,sp,120
 183d43c:	9809883a 	mov	r4,r19
 183d440:	183ee9c0 	call	183ee9c <__ssprint_r>
 183d444:	103e5e1e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183d448:	d8c02017 	ldw	r3,128(sp)
 183d44c:	d8803117 	ldw	r2,196(sp)
 183d450:	d9002a17 	ldw	r4,168(sp)
 183d454:	1100010e 	bge	r2,r4,183d45c <___svfprintf_internal_r+0xa30>
 183d458:	2005883a 	mov	r2,r4
 183d45c:	d9402f17 	ldw	r5,188(sp)
 183d460:	288b883a 	add	r5,r5,r2
 183d464:	d9402f15 	stw	r5,188(sp)
 183d468:	18019c1e 	bne	r3,zero,183dadc <___svfprintf_internal_r+0x10b0>
 183d46c:	b8800007 	ldb	r2,0(r23)
 183d470:	d8001f15 	stw	zero,124(sp)
 183d474:	da000404 	addi	r8,sp,16
 183d478:	103d991e 	bne	r2,zero,183cae0 <__ram_exceptions_end+0xff82c7f0>
 183d47c:	b821883a 	mov	r16,r23
 183d480:	003daf06 	br	183cb40 <__ram_exceptions_end+0xff82c850>
 183d484:	18c03fcc 	andi	r3,r3,255
 183d488:	1805c71e 	bne	r3,zero,183eba8 <___svfprintf_internal_r+0x217c>
 183d48c:	94800414 	ori	r18,r18,16
 183d490:	9080080c 	andi	r2,r18,32
 183d494:	10020126 	beq	r2,zero,183dc9c <___svfprintf_internal_r+0x1270>
 183d498:	d8802d17 	ldw	r2,180(sp)
 183d49c:	d9002917 	ldw	r4,164(sp)
 183d4a0:	d8002785 	stb	zero,158(sp)
 183d4a4:	10c00204 	addi	r3,r2,8
 183d4a8:	15000017 	ldw	r20,0(r2)
 183d4ac:	15800117 	ldw	r22,4(r2)
 183d4b0:	20038e16 	blt	r4,zero,183e2ec <___svfprintf_internal_r+0x18c0>
 183d4b4:	013fdfc4 	movi	r4,-129
 183d4b8:	a584b03a 	or	r2,r20,r22
 183d4bc:	d8c02d15 	stw	r3,180(sp)
 183d4c0:	9124703a 	and	r18,r18,r4
 183d4c4:	0039883a 	mov	fp,zero
 183d4c8:	103eb61e 	bne	r2,zero,183cfa4 <__ram_exceptions_end+0xff82ccb4>
 183d4cc:	d8802917 	ldw	r2,164(sp)
 183d4d0:	1002c81e 	bne	r2,zero,183dff4 <___svfprintf_internal_r+0x15c8>
 183d4d4:	d8002915 	stw	zero,164(sp)
 183d4d8:	d8002e15 	stw	zero,184(sp)
 183d4dc:	dc001e04 	addi	r16,sp,120
 183d4e0:	003efa06 	br	183d0cc <__ram_exceptions_end+0xff82cddc>
 183d4e4:	18c03fcc 	andi	r3,r3,255
 183d4e8:	1805ad1e 	bne	r3,zero,183eba0 <___svfprintf_internal_r+0x2174>
 183d4ec:	01406134 	movhi	r5,388
 183d4f0:	29421504 	addi	r5,r5,2132
 183d4f4:	d9403a15 	stw	r5,232(sp)
 183d4f8:	9080080c 	andi	r2,r18,32
 183d4fc:	10006126 	beq	r2,zero,183d684 <___svfprintf_internal_r+0xc58>
 183d500:	d8802d17 	ldw	r2,180(sp)
 183d504:	15000017 	ldw	r20,0(r2)
 183d508:	15800117 	ldw	r22,4(r2)
 183d50c:	10800204 	addi	r2,r2,8
 183d510:	d8802d15 	stw	r2,180(sp)
 183d514:	9080004c 	andi	r2,r18,1
 183d518:	10018e26 	beq	r2,zero,183db54 <___svfprintf_internal_r+0x1128>
 183d51c:	a584b03a 	or	r2,r20,r22
 183d520:	10030926 	beq	r2,zero,183e148 <___svfprintf_internal_r+0x171c>
 183d524:	d8c02917 	ldw	r3,164(sp)
 183d528:	00800c04 	movi	r2,48
 183d52c:	d8802705 	stb	r2,156(sp)
 183d530:	dc402745 	stb	r17,157(sp)
 183d534:	d8002785 	stb	zero,158(sp)
 183d538:	90800094 	ori	r2,r18,2
 183d53c:	18048716 	blt	r3,zero,183e75c <___svfprintf_internal_r+0x1d30>
 183d540:	00bfdfc4 	movi	r2,-129
 183d544:	90a4703a 	and	r18,r18,r2
 183d548:	94800094 	ori	r18,r18,2
 183d54c:	0039883a 	mov	fp,zero
 183d550:	d9003a17 	ldw	r4,232(sp)
 183d554:	dc001e04 	addi	r16,sp,120
 183d558:	a08003cc 	andi	r2,r20,15
 183d55c:	b006973a 	slli	r3,r22,28
 183d560:	2085883a 	add	r2,r4,r2
 183d564:	a028d13a 	srli	r20,r20,4
 183d568:	10800003 	ldbu	r2,0(r2)
 183d56c:	b02cd13a 	srli	r22,r22,4
 183d570:	843fffc4 	addi	r16,r16,-1
 183d574:	1d28b03a 	or	r20,r3,r20
 183d578:	80800005 	stb	r2,0(r16)
 183d57c:	a584b03a 	or	r2,r20,r22
 183d580:	103ff51e 	bne	r2,zero,183d558 <__ram_exceptions_end+0xff82d268>
 183d584:	d8c02817 	ldw	r3,160(sp)
 183d588:	1c07c83a 	sub	r3,r3,r16
 183d58c:	d8c02e15 	stw	r3,184(sp)
 183d590:	003ece06 	br	183d0cc <__ram_exceptions_end+0xff82cddc>
 183d594:	d8c02d17 	ldw	r3,180(sp)
 183d598:	d9002d17 	ldw	r4,180(sp)
 183d59c:	d8002785 	stb	zero,158(sp)
 183d5a0:	18800017 	ldw	r2,0(r3)
 183d5a4:	21000104 	addi	r4,r4,4
 183d5a8:	00c00044 	movi	r3,1
 183d5ac:	d8c02a15 	stw	r3,168(sp)
 183d5b0:	d8801405 	stb	r2,80(sp)
 183d5b4:	d9002d15 	stw	r4,180(sp)
 183d5b8:	d8c02e15 	stw	r3,184(sp)
 183d5bc:	d8002915 	stw	zero,164(sp)
 183d5c0:	d8003215 	stw	zero,200(sp)
 183d5c4:	dc001404 	addi	r16,sp,80
 183d5c8:	0039883a 	mov	fp,zero
 183d5cc:	003ecc06 	br	183d100 <__ram_exceptions_end+0xff82ce10>
 183d5d0:	18c03fcc 	andi	r3,r3,255
 183d5d4:	183e9226 	beq	r3,zero,183d020 <__ram_exceptions_end+0xff82cd30>
 183d5d8:	d9c02785 	stb	r7,158(sp)
 183d5dc:	003e9006 	br	183d020 <__ram_exceptions_end+0xff82cd30>
 183d5e0:	00c00044 	movi	r3,1
 183d5e4:	01c00ac4 	movi	r7,43
 183d5e8:	bc400007 	ldb	r17,0(r23)
 183d5ec:	003d6306 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183d5f0:	94800814 	ori	r18,r18,32
 183d5f4:	bc400007 	ldb	r17,0(r23)
 183d5f8:	003d6006 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183d5fc:	d8c02d17 	ldw	r3,180(sp)
 183d600:	d8002785 	stb	zero,158(sp)
 183d604:	1c000017 	ldw	r16,0(r3)
 183d608:	1d000104 	addi	r20,r3,4
 183d60c:	80040f26 	beq	r16,zero,183e64c <___svfprintf_internal_r+0x1c20>
 183d610:	d9002917 	ldw	r4,164(sp)
 183d614:	2003dc16 	blt	r4,zero,183e588 <___svfprintf_internal_r+0x1b5c>
 183d618:	200d883a 	mov	r6,r4
 183d61c:	000b883a 	mov	r5,zero
 183d620:	8009883a 	mov	r4,r16
 183d624:	da003e15 	stw	r8,248(sp)
 183d628:	1805eb40 	call	1805eb4 <memchr>
 183d62c:	da003e17 	ldw	r8,248(sp)
 183d630:	10045826 	beq	r2,zero,183e794 <___svfprintf_internal_r+0x1d68>
 183d634:	1405c83a 	sub	r2,r2,r16
 183d638:	d8802e15 	stw	r2,184(sp)
 183d63c:	1003d816 	blt	r2,zero,183e5a0 <___svfprintf_internal_r+0x1b74>
 183d640:	df002783 	ldbu	fp,158(sp)
 183d644:	d8802a15 	stw	r2,168(sp)
 183d648:	dd002d15 	stw	r20,180(sp)
 183d64c:	d8002915 	stw	zero,164(sp)
 183d650:	d8003215 	stw	zero,200(sp)
 183d654:	003ea306 	br	183d0e4 <__ram_exceptions_end+0xff82cdf4>
 183d658:	18c03fcc 	andi	r3,r3,255
 183d65c:	183f8c26 	beq	r3,zero,183d490 <__ram_exceptions_end+0xff82d1a0>
 183d660:	d9c02785 	stb	r7,158(sp)
 183d664:	003f8a06 	br	183d490 <__ram_exceptions_end+0xff82d1a0>
 183d668:	18c03fcc 	andi	r3,r3,255
 183d66c:	1805631e 	bne	r3,zero,183ebfc <___svfprintf_internal_r+0x21d0>
 183d670:	01406134 	movhi	r5,388
 183d674:	29421a04 	addi	r5,r5,2152
 183d678:	d9403a15 	stw	r5,232(sp)
 183d67c:	9080080c 	andi	r2,r18,32
 183d680:	103f9f1e 	bne	r2,zero,183d500 <__ram_exceptions_end+0xff82d210>
 183d684:	9080040c 	andi	r2,r18,16
 183d688:	10029c26 	beq	r2,zero,183e0fc <___svfprintf_internal_r+0x16d0>
 183d68c:	d8c02d17 	ldw	r3,180(sp)
 183d690:	002d883a 	mov	r22,zero
 183d694:	1d000017 	ldw	r20,0(r3)
 183d698:	18c00104 	addi	r3,r3,4
 183d69c:	d8c02d15 	stw	r3,180(sp)
 183d6a0:	003f9c06 	br	183d514 <__ram_exceptions_end+0xff82d224>
 183d6a4:	94800054 	ori	r18,r18,1
 183d6a8:	bc400007 	ldb	r17,0(r23)
 183d6ac:	003d3306 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183d6b0:	38803fcc 	andi	r2,r7,255
 183d6b4:	1080201c 	xori	r2,r2,128
 183d6b8:	10bfe004 	addi	r2,r2,-128
 183d6bc:	1002971e 	bne	r2,zero,183e11c <___svfprintf_internal_r+0x16f0>
 183d6c0:	00c00044 	movi	r3,1
 183d6c4:	01c00804 	movi	r7,32
 183d6c8:	bc400007 	ldb	r17,0(r23)
 183d6cc:	003d2b06 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183d6d0:	18c03fcc 	andi	r3,r3,255
 183d6d4:	183e2326 	beq	r3,zero,183cf64 <__ram_exceptions_end+0xff82cc74>
 183d6d8:	d9c02785 	stb	r7,158(sp)
 183d6dc:	003e2106 	br	183cf64 <__ram_exceptions_end+0xff82cc74>
 183d6e0:	bc400007 	ldb	r17,0(r23)
 183d6e4:	8a430426 	beq	r17,r9,183e2f8 <___svfprintf_internal_r+0x18cc>
 183d6e8:	94800414 	ori	r18,r18,16
 183d6ec:	003d2306 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183d6f0:	18c03fcc 	andi	r3,r3,255
 183d6f4:	18053f1e 	bne	r3,zero,183ebf4 <___svfprintf_internal_r+0x21c8>
 183d6f8:	9080080c 	andi	r2,r18,32
 183d6fc:	10028926 	beq	r2,zero,183e124 <___svfprintf_internal_r+0x16f8>
 183d700:	d9402d17 	ldw	r5,180(sp)
 183d704:	d9002f17 	ldw	r4,188(sp)
 183d708:	28800017 	ldw	r2,0(r5)
 183d70c:	2007d7fa 	srai	r3,r4,31
 183d710:	29400104 	addi	r5,r5,4
 183d714:	d9402d15 	stw	r5,180(sp)
 183d718:	11000015 	stw	r4,0(r2)
 183d71c:	10c00115 	stw	r3,4(r2)
 183d720:	003ced06 	br	183cad8 <__ram_exceptions_end+0xff82c7e8>
 183d724:	94801014 	ori	r18,r18,64
 183d728:	bc400007 	ldb	r17,0(r23)
 183d72c:	003d1306 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183d730:	01006134 	movhi	r4,388
 183d734:	21021a04 	addi	r4,r4,2152
 183d738:	0039883a 	mov	fp,zero
 183d73c:	d9003a15 	stw	r4,232(sp)
 183d740:	04401e04 	movi	r17,120
 183d744:	003f8206 	br	183d550 <__ram_exceptions_end+0xff82d260>
 183d748:	18c03fcc 	andi	r3,r3,255
 183d74c:	1805221e 	bne	r3,zero,183ebd8 <___svfprintf_internal_r+0x21ac>
 183d750:	883d9526 	beq	r17,zero,183cda8 <__ram_exceptions_end+0xff82cab8>
 183d754:	00c00044 	movi	r3,1
 183d758:	d8c02a15 	stw	r3,168(sp)
 183d75c:	dc401405 	stb	r17,80(sp)
 183d760:	d8002785 	stb	zero,158(sp)
 183d764:	003f9406 	br	183d5b8 <__ram_exceptions_end+0xff82d2c8>
 183d768:	01006134 	movhi	r4,388
 183d76c:	21021a04 	addi	r4,r4,2152
 183d770:	d9003a15 	stw	r4,232(sp)
 183d774:	d8c02d15 	stw	r3,180(sp)
 183d778:	1025883a 	mov	r18,r2
 183d77c:	04401e04 	movi	r17,120
 183d780:	a584b03a 	or	r2,r20,r22
 183d784:	1000fa1e 	bne	r2,zero,183db70 <___svfprintf_internal_r+0x1144>
 183d788:	0039883a 	mov	fp,zero
 183d78c:	00800084 	movi	r2,2
 183d790:	10803fcc 	andi	r2,r2,255
 183d794:	00c00044 	movi	r3,1
 183d798:	10c21626 	beq	r2,r3,183dff4 <___svfprintf_internal_r+0x15c8>
 183d79c:	00c00084 	movi	r3,2
 183d7a0:	10fe301e 	bne	r2,r3,183d064 <__ram_exceptions_end+0xff82cd74>
 183d7a4:	003d7606 	br	183cd80 <__ram_exceptions_end+0xff82ca90>
 183d7a8:	d8c02017 	ldw	r3,128(sp)
 183d7ac:	003e9506 	br	183d204 <__ram_exceptions_end+0xff82cf14>
 183d7b0:	00801944 	movi	r2,101
 183d7b4:	14407c0e 	bge	r2,r17,183d9a8 <___svfprintf_internal_r+0xf7c>
 183d7b8:	d9003617 	ldw	r4,216(sp)
 183d7bc:	d9403717 	ldw	r5,220(sp)
 183d7c0:	000d883a 	mov	r6,zero
 183d7c4:	000f883a 	mov	r7,zero
 183d7c8:	d8c03d15 	stw	r3,244(sp)
 183d7cc:	da003e15 	stw	r8,248(sp)
 183d7d0:	180be6c0 	call	180be6c <__eqdf2>
 183d7d4:	d8c03d17 	ldw	r3,244(sp)
 183d7d8:	da003e17 	ldw	r8,248(sp)
 183d7dc:	1000f51e 	bne	r2,zero,183dbb4 <___svfprintf_internal_r+0x1188>
 183d7e0:	d8801f17 	ldw	r2,124(sp)
 183d7e4:	01006134 	movhi	r4,388
 183d7e8:	21022104 	addi	r4,r4,2180
 183d7ec:	18c00044 	addi	r3,r3,1
 183d7f0:	10800044 	addi	r2,r2,1
 183d7f4:	41000015 	stw	r4,0(r8)
 183d7f8:	01000044 	movi	r4,1
 183d7fc:	41000115 	stw	r4,4(r8)
 183d800:	d8c02015 	stw	r3,128(sp)
 183d804:	d8801f15 	stw	r2,124(sp)
 183d808:	010001c4 	movi	r4,7
 183d80c:	20826616 	blt	r4,r2,183e1a8 <___svfprintf_internal_r+0x177c>
 183d810:	42000204 	addi	r8,r8,8
 183d814:	d8802617 	ldw	r2,152(sp)
 183d818:	d9403317 	ldw	r5,204(sp)
 183d81c:	11400216 	blt	r2,r5,183d828 <___svfprintf_internal_r+0xdfc>
 183d820:	9080004c 	andi	r2,r18,1
 183d824:	103ed526 	beq	r2,zero,183d37c <__ram_exceptions_end+0xff82d08c>
 183d828:	d8803817 	ldw	r2,224(sp)
 183d82c:	d9003417 	ldw	r4,208(sp)
 183d830:	d9403817 	ldw	r5,224(sp)
 183d834:	1887883a 	add	r3,r3,r2
 183d838:	d8801f17 	ldw	r2,124(sp)
 183d83c:	41000015 	stw	r4,0(r8)
 183d840:	41400115 	stw	r5,4(r8)
 183d844:	10800044 	addi	r2,r2,1
 183d848:	d8c02015 	stw	r3,128(sp)
 183d84c:	d8801f15 	stw	r2,124(sp)
 183d850:	010001c4 	movi	r4,7
 183d854:	2082af16 	blt	r4,r2,183e314 <___svfprintf_internal_r+0x18e8>
 183d858:	42000204 	addi	r8,r8,8
 183d85c:	d8803317 	ldw	r2,204(sp)
 183d860:	143fffc4 	addi	r16,r2,-1
 183d864:	043ec50e 	bge	zero,r16,183d37c <__ram_exceptions_end+0xff82d08c>
 183d868:	04400404 	movi	r17,16
 183d86c:	d8801f17 	ldw	r2,124(sp)
 183d870:	8c00860e 	bge	r17,r16,183da8c <___svfprintf_internal_r+0x1060>
 183d874:	01406134 	movhi	r5,388
 183d878:	294cd004 	addi	r5,r5,13120
 183d87c:	d9402b15 	stw	r5,172(sp)
 183d880:	058001c4 	movi	r22,7
 183d884:	dd002c17 	ldw	r20,176(sp)
 183d888:	00000306 	br	183d898 <___svfprintf_internal_r+0xe6c>
 183d88c:	42000204 	addi	r8,r8,8
 183d890:	843ffc04 	addi	r16,r16,-16
 183d894:	8c00800e 	bge	r17,r16,183da98 <___svfprintf_internal_r+0x106c>
 183d898:	18c00404 	addi	r3,r3,16
 183d89c:	10800044 	addi	r2,r2,1
 183d8a0:	45400015 	stw	r21,0(r8)
 183d8a4:	44400115 	stw	r17,4(r8)
 183d8a8:	d8c02015 	stw	r3,128(sp)
 183d8ac:	d8801f15 	stw	r2,124(sp)
 183d8b0:	b0bff60e 	bge	r22,r2,183d88c <__ram_exceptions_end+0xff82d59c>
 183d8b4:	d9801e04 	addi	r6,sp,120
 183d8b8:	a00b883a 	mov	r5,r20
 183d8bc:	9809883a 	mov	r4,r19
 183d8c0:	183ee9c0 	call	183ee9c <__ssprint_r>
 183d8c4:	103d3e1e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183d8c8:	d8c02017 	ldw	r3,128(sp)
 183d8cc:	d8801f17 	ldw	r2,124(sp)
 183d8d0:	da000404 	addi	r8,sp,16
 183d8d4:	003fee06 	br	183d890 <__ram_exceptions_end+0xff82d5a0>
 183d8d8:	d9403117 	ldw	r5,196(sp)
 183d8dc:	d8802a17 	ldw	r2,168(sp)
 183d8e0:	28adc83a 	sub	r22,r5,r2
 183d8e4:	05be650e 	bge	zero,r22,183d27c <__ram_exceptions_end+0xff82cf8c>
 183d8e8:	07000404 	movi	fp,16
 183d8ec:	d8801f17 	ldw	r2,124(sp)
 183d8f0:	e583a20e 	bge	fp,r22,183e77c <___svfprintf_internal_r+0x1d50>
 183d8f4:	01406134 	movhi	r5,388
 183d8f8:	294cd004 	addi	r5,r5,13120
 183d8fc:	dc403015 	stw	r17,192(sp)
 183d900:	d9402b15 	stw	r5,172(sp)
 183d904:	b023883a 	mov	r17,r22
 183d908:	050001c4 	movi	r20,7
 183d90c:	902d883a 	mov	r22,r18
 183d910:	8025883a 	mov	r18,r16
 183d914:	dc002c17 	ldw	r16,176(sp)
 183d918:	00000306 	br	183d928 <___svfprintf_internal_r+0xefc>
 183d91c:	8c7ffc04 	addi	r17,r17,-16
 183d920:	42000204 	addi	r8,r8,8
 183d924:	e440110e 	bge	fp,r17,183d96c <___svfprintf_internal_r+0xf40>
 183d928:	18c00404 	addi	r3,r3,16
 183d92c:	10800044 	addi	r2,r2,1
 183d930:	45400015 	stw	r21,0(r8)
 183d934:	47000115 	stw	fp,4(r8)
 183d938:	d8c02015 	stw	r3,128(sp)
 183d93c:	d8801f15 	stw	r2,124(sp)
 183d940:	a0bff60e 	bge	r20,r2,183d91c <__ram_exceptions_end+0xff82d62c>
 183d944:	d9801e04 	addi	r6,sp,120
 183d948:	800b883a 	mov	r5,r16
 183d94c:	9809883a 	mov	r4,r19
 183d950:	183ee9c0 	call	183ee9c <__ssprint_r>
 183d954:	103d1a1e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183d958:	8c7ffc04 	addi	r17,r17,-16
 183d95c:	d8c02017 	ldw	r3,128(sp)
 183d960:	d8801f17 	ldw	r2,124(sp)
 183d964:	da000404 	addi	r8,sp,16
 183d968:	e47fef16 	blt	fp,r17,183d928 <__ram_exceptions_end+0xff82d638>
 183d96c:	9021883a 	mov	r16,r18
 183d970:	b025883a 	mov	r18,r22
 183d974:	882d883a 	mov	r22,r17
 183d978:	dc403017 	ldw	r17,192(sp)
 183d97c:	d9002b17 	ldw	r4,172(sp)
 183d980:	1d87883a 	add	r3,r3,r22
 183d984:	10800044 	addi	r2,r2,1
 183d988:	41000015 	stw	r4,0(r8)
 183d98c:	45800115 	stw	r22,4(r8)
 183d990:	d8c02015 	stw	r3,128(sp)
 183d994:	d8801f15 	stw	r2,124(sp)
 183d998:	010001c4 	movi	r4,7
 183d99c:	20819a16 	blt	r4,r2,183e008 <___svfprintf_internal_r+0x15dc>
 183d9a0:	42000204 	addi	r8,r8,8
 183d9a4:	003e3506 	br	183d27c <__ram_exceptions_end+0xff82cf8c>
 183d9a8:	d9403317 	ldw	r5,204(sp)
 183d9ac:	00800044 	movi	r2,1
 183d9b0:	18c00044 	addi	r3,r3,1
 183d9b4:	1141710e 	bge	r2,r5,183df7c <___svfprintf_internal_r+0x1550>
 183d9b8:	dc401f17 	ldw	r17,124(sp)
 183d9bc:	00800044 	movi	r2,1
 183d9c0:	40800115 	stw	r2,4(r8)
 183d9c4:	8c400044 	addi	r17,r17,1
 183d9c8:	44000015 	stw	r16,0(r8)
 183d9cc:	d8c02015 	stw	r3,128(sp)
 183d9d0:	dc401f15 	stw	r17,124(sp)
 183d9d4:	008001c4 	movi	r2,7
 183d9d8:	14417416 	blt	r2,r17,183dfac <___svfprintf_internal_r+0x1580>
 183d9dc:	42000204 	addi	r8,r8,8
 183d9e0:	d8803817 	ldw	r2,224(sp)
 183d9e4:	d9003417 	ldw	r4,208(sp)
 183d9e8:	8c400044 	addi	r17,r17,1
 183d9ec:	10c7883a 	add	r3,r2,r3
 183d9f0:	40800115 	stw	r2,4(r8)
 183d9f4:	41000015 	stw	r4,0(r8)
 183d9f8:	d8c02015 	stw	r3,128(sp)
 183d9fc:	dc401f15 	stw	r17,124(sp)
 183da00:	008001c4 	movi	r2,7
 183da04:	14417216 	blt	r2,r17,183dfd0 <___svfprintf_internal_r+0x15a4>
 183da08:	45800204 	addi	r22,r8,8
 183da0c:	d9003617 	ldw	r4,216(sp)
 183da10:	d9403717 	ldw	r5,220(sp)
 183da14:	000d883a 	mov	r6,zero
 183da18:	000f883a 	mov	r7,zero
 183da1c:	d8c03d15 	stw	r3,244(sp)
 183da20:	180be6c0 	call	180be6c <__eqdf2>
 183da24:	d8c03d17 	ldw	r3,244(sp)
 183da28:	1000b326 	beq	r2,zero,183dcf8 <___svfprintf_internal_r+0x12cc>
 183da2c:	d9403317 	ldw	r5,204(sp)
 183da30:	84000044 	addi	r16,r16,1
 183da34:	8c400044 	addi	r17,r17,1
 183da38:	28bfffc4 	addi	r2,r5,-1
 183da3c:	1887883a 	add	r3,r3,r2
 183da40:	b0800115 	stw	r2,4(r22)
 183da44:	b4000015 	stw	r16,0(r22)
 183da48:	d8c02015 	stw	r3,128(sp)
 183da4c:	dc401f15 	stw	r17,124(sp)
 183da50:	008001c4 	movi	r2,7
 183da54:	1440d216 	blt	r2,r17,183dda0 <___svfprintf_internal_r+0x1374>
 183da58:	b5800204 	addi	r22,r22,8
 183da5c:	d9003b17 	ldw	r4,236(sp)
 183da60:	df0022c4 	addi	fp,sp,139
 183da64:	8c400044 	addi	r17,r17,1
 183da68:	20c7883a 	add	r3,r4,r3
 183da6c:	b7000015 	stw	fp,0(r22)
 183da70:	b1000115 	stw	r4,4(r22)
 183da74:	d8c02015 	stw	r3,128(sp)
 183da78:	dc401f15 	stw	r17,124(sp)
 183da7c:	008001c4 	movi	r2,7
 183da80:	14400e16 	blt	r2,r17,183dabc <___svfprintf_internal_r+0x1090>
 183da84:	b2000204 	addi	r8,r22,8
 183da88:	003e3c06 	br	183d37c <__ram_exceptions_end+0xff82d08c>
 183da8c:	01006134 	movhi	r4,388
 183da90:	210cd004 	addi	r4,r4,13120
 183da94:	d9002b15 	stw	r4,172(sp)
 183da98:	d9002b17 	ldw	r4,172(sp)
 183da9c:	1c07883a 	add	r3,r3,r16
 183daa0:	44000115 	stw	r16,4(r8)
 183daa4:	41000015 	stw	r4,0(r8)
 183daa8:	10800044 	addi	r2,r2,1
 183daac:	d8c02015 	stw	r3,128(sp)
 183dab0:	d8801f15 	stw	r2,124(sp)
 183dab4:	010001c4 	movi	r4,7
 183dab8:	20be2f0e 	bge	r4,r2,183d378 <__ram_exceptions_end+0xff82d088>
 183dabc:	d9402c17 	ldw	r5,176(sp)
 183dac0:	d9801e04 	addi	r6,sp,120
 183dac4:	9809883a 	mov	r4,r19
 183dac8:	183ee9c0 	call	183ee9c <__ssprint_r>
 183dacc:	103cbc1e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183dad0:	d8c02017 	ldw	r3,128(sp)
 183dad4:	da000404 	addi	r8,sp,16
 183dad8:	003e2806 	br	183d37c <__ram_exceptions_end+0xff82d08c>
 183dadc:	d9402c17 	ldw	r5,176(sp)
 183dae0:	d9801e04 	addi	r6,sp,120
 183dae4:	9809883a 	mov	r4,r19
 183dae8:	183ee9c0 	call	183ee9c <__ssprint_r>
 183daec:	103e5f26 	beq	r2,zero,183d46c <__ram_exceptions_end+0xff82d17c>
 183daf0:	003cb306 	br	183cdc0 <__ram_exceptions_end+0xff82cad0>
 183daf4:	d9402c17 	ldw	r5,176(sp)
 183daf8:	d9801e04 	addi	r6,sp,120
 183dafc:	9809883a 	mov	r4,r19
 183db00:	183ee9c0 	call	183ee9c <__ssprint_r>
 183db04:	103cae1e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183db08:	d8c02017 	ldw	r3,128(sp)
 183db0c:	da000404 	addi	r8,sp,16
 183db10:	003e0d06 	br	183d348 <__ram_exceptions_end+0xff82d058>
 183db14:	d9402c17 	ldw	r5,176(sp)
 183db18:	d9801e04 	addi	r6,sp,120
 183db1c:	9809883a 	mov	r4,r19
 183db20:	183ee9c0 	call	183ee9c <__ssprint_r>
 183db24:	103ca61e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183db28:	d8c02017 	ldw	r3,128(sp)
 183db2c:	da000404 	addi	r8,sp,16
 183db30:	003dc106 	br	183d238 <__ram_exceptions_end+0xff82cf48>
 183db34:	d9402c17 	ldw	r5,176(sp)
 183db38:	d9801e04 	addi	r6,sp,120
 183db3c:	9809883a 	mov	r4,r19
 183db40:	183ee9c0 	call	183ee9c <__ssprint_r>
 183db44:	103c9e1e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183db48:	d8c02017 	ldw	r3,128(sp)
 183db4c:	da000404 	addi	r8,sp,16
 183db50:	003dc706 	br	183d270 <__ram_exceptions_end+0xff82cf80>
 183db54:	d8802917 	ldw	r2,164(sp)
 183db58:	d8002785 	stb	zero,158(sp)
 183db5c:	103f0816 	blt	r2,zero,183d780 <__ram_exceptions_end+0xff82d490>
 183db60:	00ffdfc4 	movi	r3,-129
 183db64:	a584b03a 	or	r2,r20,r22
 183db68:	90e4703a 	and	r18,r18,r3
 183db6c:	103c8126 	beq	r2,zero,183cd74 <__ram_exceptions_end+0xff82ca84>
 183db70:	0039883a 	mov	fp,zero
 183db74:	003e7606 	br	183d550 <__ram_exceptions_end+0xff82d260>
 183db78:	9080040c 	andi	r2,r18,16
 183db7c:	10013d26 	beq	r2,zero,183e074 <___svfprintf_internal_r+0x1648>
 183db80:	d9002d17 	ldw	r4,180(sp)
 183db84:	d9402917 	ldw	r5,164(sp)
 183db88:	d8002785 	stb	zero,158(sp)
 183db8c:	20800104 	addi	r2,r4,4
 183db90:	25000017 	ldw	r20,0(r4)
 183db94:	002d883a 	mov	r22,zero
 183db98:	28013f16 	blt	r5,zero,183e098 <___svfprintf_internal_r+0x166c>
 183db9c:	00ffdfc4 	movi	r3,-129
 183dba0:	d8802d15 	stw	r2,180(sp)
 183dba4:	90e4703a 	and	r18,r18,r3
 183dba8:	a03d2b26 	beq	r20,zero,183d058 <__ram_exceptions_end+0xff82cd68>
 183dbac:	0039883a 	mov	fp,zero
 183dbb0:	003d2e06 	br	183d06c <__ram_exceptions_end+0xff82cd7c>
 183dbb4:	dc402617 	ldw	r17,152(sp)
 183dbb8:	0441830e 	bge	zero,r17,183e1c8 <___svfprintf_internal_r+0x179c>
 183dbbc:	dc403217 	ldw	r17,200(sp)
 183dbc0:	d8803317 	ldw	r2,204(sp)
 183dbc4:	1440010e 	bge	r2,r17,183dbcc <___svfprintf_internal_r+0x11a0>
 183dbc8:	1023883a 	mov	r17,r2
 183dbcc:	04400a0e 	bge	zero,r17,183dbf8 <___svfprintf_internal_r+0x11cc>
 183dbd0:	d8801f17 	ldw	r2,124(sp)
 183dbd4:	1c47883a 	add	r3,r3,r17
 183dbd8:	44000015 	stw	r16,0(r8)
 183dbdc:	10800044 	addi	r2,r2,1
 183dbe0:	44400115 	stw	r17,4(r8)
 183dbe4:	d8c02015 	stw	r3,128(sp)
 183dbe8:	d8801f15 	stw	r2,124(sp)
 183dbec:	010001c4 	movi	r4,7
 183dbf0:	20827516 	blt	r4,r2,183e5c8 <___svfprintf_internal_r+0x1b9c>
 183dbf4:	42000204 	addi	r8,r8,8
 183dbf8:	88027b16 	blt	r17,zero,183e5e8 <___svfprintf_internal_r+0x1bbc>
 183dbfc:	d9003217 	ldw	r4,200(sp)
 183dc00:	2463c83a 	sub	r17,r4,r17
 183dc04:	0440990e 	bge	zero,r17,183de6c <___svfprintf_internal_r+0x1440>
 183dc08:	05800404 	movi	r22,16
 183dc0c:	d8801f17 	ldw	r2,124(sp)
 183dc10:	b441530e 	bge	r22,r17,183e160 <___svfprintf_internal_r+0x1734>
 183dc14:	01006134 	movhi	r4,388
 183dc18:	210cd004 	addi	r4,r4,13120
 183dc1c:	d9002b15 	stw	r4,172(sp)
 183dc20:	070001c4 	movi	fp,7
 183dc24:	dd002c17 	ldw	r20,176(sp)
 183dc28:	00000306 	br	183dc38 <___svfprintf_internal_r+0x120c>
 183dc2c:	42000204 	addi	r8,r8,8
 183dc30:	8c7ffc04 	addi	r17,r17,-16
 183dc34:	b4414d0e 	bge	r22,r17,183e16c <___svfprintf_internal_r+0x1740>
 183dc38:	18c00404 	addi	r3,r3,16
 183dc3c:	10800044 	addi	r2,r2,1
 183dc40:	45400015 	stw	r21,0(r8)
 183dc44:	45800115 	stw	r22,4(r8)
 183dc48:	d8c02015 	stw	r3,128(sp)
 183dc4c:	d8801f15 	stw	r2,124(sp)
 183dc50:	e0bff60e 	bge	fp,r2,183dc2c <__ram_exceptions_end+0xff82d93c>
 183dc54:	d9801e04 	addi	r6,sp,120
 183dc58:	a00b883a 	mov	r5,r20
 183dc5c:	9809883a 	mov	r4,r19
 183dc60:	183ee9c0 	call	183ee9c <__ssprint_r>
 183dc64:	103c561e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183dc68:	d8c02017 	ldw	r3,128(sp)
 183dc6c:	d8801f17 	ldw	r2,124(sp)
 183dc70:	da000404 	addi	r8,sp,16
 183dc74:	003fee06 	br	183dc30 <__ram_exceptions_end+0xff82d940>
 183dc78:	d9402c17 	ldw	r5,176(sp)
 183dc7c:	d9801e04 	addi	r6,sp,120
 183dc80:	9809883a 	mov	r4,r19
 183dc84:	183ee9c0 	call	183ee9c <__ssprint_r>
 183dc88:	103c4d1e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183dc8c:	d8c02017 	ldw	r3,128(sp)
 183dc90:	df002787 	ldb	fp,158(sp)
 183dc94:	da000404 	addi	r8,sp,16
 183dc98:	003d5a06 	br	183d204 <__ram_exceptions_end+0xff82cf14>
 183dc9c:	9080040c 	andi	r2,r18,16
 183dca0:	10005c26 	beq	r2,zero,183de14 <___svfprintf_internal_r+0x13e8>
 183dca4:	d9402d17 	ldw	r5,180(sp)
 183dca8:	d8c02917 	ldw	r3,164(sp)
 183dcac:	d8002785 	stb	zero,158(sp)
 183dcb0:	28800104 	addi	r2,r5,4
 183dcb4:	2d000017 	ldw	r20,0(r5)
 183dcb8:	002d883a 	mov	r22,zero
 183dcbc:	18005e16 	blt	r3,zero,183de38 <___svfprintf_internal_r+0x140c>
 183dcc0:	00ffdfc4 	movi	r3,-129
 183dcc4:	d8802d15 	stw	r2,180(sp)
 183dcc8:	90e4703a 	and	r18,r18,r3
 183dccc:	0039883a 	mov	fp,zero
 183dcd0:	a03dfe26 	beq	r20,zero,183d4cc <__ram_exceptions_end+0xff82d1dc>
 183dcd4:	00800244 	movi	r2,9
 183dcd8:	153cb336 	bltu	r2,r20,183cfa8 <__ram_exceptions_end+0xff82ccb8>
 183dcdc:	a5000c04 	addi	r20,r20,48
 183dce0:	dc001dc4 	addi	r16,sp,119
 183dce4:	dd001dc5 	stb	r20,119(sp)
 183dce8:	d8c02817 	ldw	r3,160(sp)
 183dcec:	1c07c83a 	sub	r3,r3,r16
 183dcf0:	d8c02e15 	stw	r3,184(sp)
 183dcf4:	003cf506 	br	183d0cc <__ram_exceptions_end+0xff82cddc>
 183dcf8:	d8803317 	ldw	r2,204(sp)
 183dcfc:	143fffc4 	addi	r16,r2,-1
 183dd00:	043f560e 	bge	zero,r16,183da5c <__ram_exceptions_end+0xff82d76c>
 183dd04:	07000404 	movi	fp,16
 183dd08:	e403530e 	bge	fp,r16,183ea58 <___svfprintf_internal_r+0x202c>
 183dd0c:	01406134 	movhi	r5,388
 183dd10:	294cd004 	addi	r5,r5,13120
 183dd14:	d9402b15 	stw	r5,172(sp)
 183dd18:	01c001c4 	movi	r7,7
 183dd1c:	dd002c17 	ldw	r20,176(sp)
 183dd20:	00000306 	br	183dd30 <___svfprintf_internal_r+0x1304>
 183dd24:	843ffc04 	addi	r16,r16,-16
 183dd28:	b5800204 	addi	r22,r22,8
 183dd2c:	e400130e 	bge	fp,r16,183dd7c <___svfprintf_internal_r+0x1350>
 183dd30:	18c00404 	addi	r3,r3,16
 183dd34:	8c400044 	addi	r17,r17,1
 183dd38:	b5400015 	stw	r21,0(r22)
 183dd3c:	b7000115 	stw	fp,4(r22)
 183dd40:	d8c02015 	stw	r3,128(sp)
 183dd44:	dc401f15 	stw	r17,124(sp)
 183dd48:	3c7ff60e 	bge	r7,r17,183dd24 <__ram_exceptions_end+0xff82da34>
 183dd4c:	d9801e04 	addi	r6,sp,120
 183dd50:	a00b883a 	mov	r5,r20
 183dd54:	9809883a 	mov	r4,r19
 183dd58:	d9c03d15 	stw	r7,244(sp)
 183dd5c:	183ee9c0 	call	183ee9c <__ssprint_r>
 183dd60:	d9c03d17 	ldw	r7,244(sp)
 183dd64:	103c161e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183dd68:	843ffc04 	addi	r16,r16,-16
 183dd6c:	d8c02017 	ldw	r3,128(sp)
 183dd70:	dc401f17 	ldw	r17,124(sp)
 183dd74:	dd800404 	addi	r22,sp,16
 183dd78:	e43fed16 	blt	fp,r16,183dd30 <__ram_exceptions_end+0xff82da40>
 183dd7c:	d8802b17 	ldw	r2,172(sp)
 183dd80:	1c07883a 	add	r3,r3,r16
 183dd84:	8c400044 	addi	r17,r17,1
 183dd88:	b0800015 	stw	r2,0(r22)
 183dd8c:	b4000115 	stw	r16,4(r22)
 183dd90:	d8c02015 	stw	r3,128(sp)
 183dd94:	dc401f15 	stw	r17,124(sp)
 183dd98:	008001c4 	movi	r2,7
 183dd9c:	147f2e0e 	bge	r2,r17,183da58 <__ram_exceptions_end+0xff82d768>
 183dda0:	d9402c17 	ldw	r5,176(sp)
 183dda4:	d9801e04 	addi	r6,sp,120
 183dda8:	9809883a 	mov	r4,r19
 183ddac:	183ee9c0 	call	183ee9c <__ssprint_r>
 183ddb0:	103c031e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183ddb4:	d8c02017 	ldw	r3,128(sp)
 183ddb8:	dc401f17 	ldw	r17,124(sp)
 183ddbc:	dd800404 	addi	r22,sp,16
 183ddc0:	003f2606 	br	183da5c <__ram_exceptions_end+0xff82d76c>
 183ddc4:	9080040c 	andi	r2,r18,16
 183ddc8:	1000c326 	beq	r2,zero,183e0d8 <___svfprintf_internal_r+0x16ac>
 183ddcc:	d8802d17 	ldw	r2,180(sp)
 183ddd0:	15000017 	ldw	r20,0(r2)
 183ddd4:	10800104 	addi	r2,r2,4
 183ddd8:	d8802d15 	stw	r2,180(sp)
 183dddc:	a02dd7fa 	srai	r22,r20,31
 183dde0:	b005883a 	mov	r2,r22
 183dde4:	103c680e 	bge	r2,zero,183cf88 <__ram_exceptions_end+0xff82cc98>
 183dde8:	0529c83a 	sub	r20,zero,r20
 183ddec:	a004c03a 	cmpne	r2,r20,zero
 183ddf0:	05adc83a 	sub	r22,zero,r22
 183ddf4:	b0adc83a 	sub	r22,r22,r2
 183ddf8:	d8802917 	ldw	r2,164(sp)
 183ddfc:	07000b44 	movi	fp,45
 183de00:	df002785 	stb	fp,158(sp)
 183de04:	10022e16 	blt	r2,zero,183e6c0 <___svfprintf_internal_r+0x1c94>
 183de08:	00bfdfc4 	movi	r2,-129
 183de0c:	90a4703a 	and	r18,r18,r2
 183de10:	003c6406 	br	183cfa4 <__ram_exceptions_end+0xff82ccb4>
 183de14:	9080100c 	andi	r2,r18,64
 183de18:	d8002785 	stb	zero,158(sp)
 183de1c:	10012526 	beq	r2,zero,183e2b4 <___svfprintf_internal_r+0x1888>
 183de20:	d9002d17 	ldw	r4,180(sp)
 183de24:	d9402917 	ldw	r5,164(sp)
 183de28:	002d883a 	mov	r22,zero
 183de2c:	20800104 	addi	r2,r4,4
 183de30:	2500000b 	ldhu	r20,0(r4)
 183de34:	283fa20e 	bge	r5,zero,183dcc0 <__ram_exceptions_end+0xff82d9d0>
 183de38:	d8802d15 	stw	r2,180(sp)
 183de3c:	0039883a 	mov	fp,zero
 183de40:	a584b03a 	or	r2,r20,r22
 183de44:	103c571e 	bne	r2,zero,183cfa4 <__ram_exceptions_end+0xff82ccb4>
 183de48:	00800044 	movi	r2,1
 183de4c:	003e5006 	br	183d790 <__ram_exceptions_end+0xff82d4a0>
 183de50:	d9402c17 	ldw	r5,176(sp)
 183de54:	d9801e04 	addi	r6,sp,120
 183de58:	9809883a 	mov	r4,r19
 183de5c:	183ee9c0 	call	183ee9c <__ssprint_r>
 183de60:	103bd71e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183de64:	d8c02017 	ldw	r3,128(sp)
 183de68:	da000404 	addi	r8,sp,16
 183de6c:	d9003217 	ldw	r4,200(sp)
 183de70:	d8802617 	ldw	r2,152(sp)
 183de74:	d9403317 	ldw	r5,204(sp)
 183de78:	8123883a 	add	r17,r16,r4
 183de7c:	11400216 	blt	r2,r5,183de88 <___svfprintf_internal_r+0x145c>
 183de80:	9100004c 	andi	r4,r18,1
 183de84:	20000d26 	beq	r4,zero,183debc <___svfprintf_internal_r+0x1490>
 183de88:	d9003817 	ldw	r4,224(sp)
 183de8c:	d9403417 	ldw	r5,208(sp)
 183de90:	1907883a 	add	r3,r3,r4
 183de94:	d9001f17 	ldw	r4,124(sp)
 183de98:	41400015 	stw	r5,0(r8)
 183de9c:	d9403817 	ldw	r5,224(sp)
 183dea0:	21000044 	addi	r4,r4,1
 183dea4:	d8c02015 	stw	r3,128(sp)
 183dea8:	41400115 	stw	r5,4(r8)
 183deac:	d9001f15 	stw	r4,124(sp)
 183deb0:	014001c4 	movi	r5,7
 183deb4:	2901dc16 	blt	r5,r4,183e628 <___svfprintf_internal_r+0x1bfc>
 183deb8:	42000204 	addi	r8,r8,8
 183debc:	d9003317 	ldw	r4,204(sp)
 183dec0:	8121883a 	add	r16,r16,r4
 183dec4:	2085c83a 	sub	r2,r4,r2
 183dec8:	8461c83a 	sub	r16,r16,r17
 183decc:	1400010e 	bge	r2,r16,183ded4 <___svfprintf_internal_r+0x14a8>
 183ded0:	1021883a 	mov	r16,r2
 183ded4:	04000a0e 	bge	zero,r16,183df00 <___svfprintf_internal_r+0x14d4>
 183ded8:	d9001f17 	ldw	r4,124(sp)
 183dedc:	1c07883a 	add	r3,r3,r16
 183dee0:	44400015 	stw	r17,0(r8)
 183dee4:	21000044 	addi	r4,r4,1
 183dee8:	44000115 	stw	r16,4(r8)
 183deec:	d8c02015 	stw	r3,128(sp)
 183def0:	d9001f15 	stw	r4,124(sp)
 183def4:	014001c4 	movi	r5,7
 183def8:	2901e616 	blt	r5,r4,183e694 <___svfprintf_internal_r+0x1c68>
 183defc:	42000204 	addi	r8,r8,8
 183df00:	8001f616 	blt	r16,zero,183e6dc <___svfprintf_internal_r+0x1cb0>
 183df04:	1421c83a 	sub	r16,r2,r16
 183df08:	043d1c0e 	bge	zero,r16,183d37c <__ram_exceptions_end+0xff82d08c>
 183df0c:	04400404 	movi	r17,16
 183df10:	d8801f17 	ldw	r2,124(sp)
 183df14:	8c3edd0e 	bge	r17,r16,183da8c <__ram_exceptions_end+0xff82d79c>
 183df18:	01406134 	movhi	r5,388
 183df1c:	294cd004 	addi	r5,r5,13120
 183df20:	d9402b15 	stw	r5,172(sp)
 183df24:	058001c4 	movi	r22,7
 183df28:	dd002c17 	ldw	r20,176(sp)
 183df2c:	00000306 	br	183df3c <___svfprintf_internal_r+0x1510>
 183df30:	42000204 	addi	r8,r8,8
 183df34:	843ffc04 	addi	r16,r16,-16
 183df38:	8c3ed70e 	bge	r17,r16,183da98 <__ram_exceptions_end+0xff82d7a8>
 183df3c:	18c00404 	addi	r3,r3,16
 183df40:	10800044 	addi	r2,r2,1
 183df44:	45400015 	stw	r21,0(r8)
 183df48:	44400115 	stw	r17,4(r8)
 183df4c:	d8c02015 	stw	r3,128(sp)
 183df50:	d8801f15 	stw	r2,124(sp)
 183df54:	b0bff60e 	bge	r22,r2,183df30 <__ram_exceptions_end+0xff82dc40>
 183df58:	d9801e04 	addi	r6,sp,120
 183df5c:	a00b883a 	mov	r5,r20
 183df60:	9809883a 	mov	r4,r19
 183df64:	183ee9c0 	call	183ee9c <__ssprint_r>
 183df68:	103b951e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183df6c:	d8c02017 	ldw	r3,128(sp)
 183df70:	d8801f17 	ldw	r2,124(sp)
 183df74:	da000404 	addi	r8,sp,16
 183df78:	003fee06 	br	183df34 <__ram_exceptions_end+0xff82dc44>
 183df7c:	9088703a 	and	r4,r18,r2
 183df80:	203e8d1e 	bne	r4,zero,183d9b8 <__ram_exceptions_end+0xff82d6c8>
 183df84:	dc401f17 	ldw	r17,124(sp)
 183df88:	40800115 	stw	r2,4(r8)
 183df8c:	44000015 	stw	r16,0(r8)
 183df90:	8c400044 	addi	r17,r17,1
 183df94:	d8c02015 	stw	r3,128(sp)
 183df98:	dc401f15 	stw	r17,124(sp)
 183df9c:	008001c4 	movi	r2,7
 183dfa0:	147f7f16 	blt	r2,r17,183dda0 <__ram_exceptions_end+0xff82dab0>
 183dfa4:	45800204 	addi	r22,r8,8
 183dfa8:	003eac06 	br	183da5c <__ram_exceptions_end+0xff82d76c>
 183dfac:	d9402c17 	ldw	r5,176(sp)
 183dfb0:	d9801e04 	addi	r6,sp,120
 183dfb4:	9809883a 	mov	r4,r19
 183dfb8:	183ee9c0 	call	183ee9c <__ssprint_r>
 183dfbc:	103b801e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183dfc0:	d8c02017 	ldw	r3,128(sp)
 183dfc4:	dc401f17 	ldw	r17,124(sp)
 183dfc8:	da000404 	addi	r8,sp,16
 183dfcc:	003e8406 	br	183d9e0 <__ram_exceptions_end+0xff82d6f0>
 183dfd0:	d9402c17 	ldw	r5,176(sp)
 183dfd4:	d9801e04 	addi	r6,sp,120
 183dfd8:	9809883a 	mov	r4,r19
 183dfdc:	183ee9c0 	call	183ee9c <__ssprint_r>
 183dfe0:	103b771e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183dfe4:	d8c02017 	ldw	r3,128(sp)
 183dfe8:	dc401f17 	ldw	r17,124(sp)
 183dfec:	dd800404 	addi	r22,sp,16
 183dff0:	003e8606 	br	183da0c <__ram_exceptions_end+0xff82d71c>
 183dff4:	0029883a 	mov	r20,zero
 183dff8:	a5000c04 	addi	r20,r20,48
 183dffc:	dc001dc4 	addi	r16,sp,119
 183e000:	dd001dc5 	stb	r20,119(sp)
 183e004:	003f3806 	br	183dce8 <__ram_exceptions_end+0xff82d9f8>
 183e008:	d9402c17 	ldw	r5,176(sp)
 183e00c:	d9801e04 	addi	r6,sp,120
 183e010:	9809883a 	mov	r4,r19
 183e014:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e018:	103b691e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e01c:	d8c02017 	ldw	r3,128(sp)
 183e020:	da000404 	addi	r8,sp,16
 183e024:	003c9506 	br	183d27c <__ram_exceptions_end+0xff82cf8c>
 183e028:	d9003617 	ldw	r4,216(sp)
 183e02c:	d9403717 	ldw	r5,220(sp)
 183e030:	da003e15 	stw	r8,248(sp)
 183e034:	18072040 	call	1807204 <__fpclassifyd>
 183e038:	da003e17 	ldw	r8,248(sp)
 183e03c:	1000bd1e 	bne	r2,zero,183e334 <___svfprintf_internal_r+0x1908>
 183e040:	008011c4 	movi	r2,71
 183e044:	14411e0e 	bge	r2,r17,183e4c0 <___svfprintf_internal_r+0x1a94>
 183e048:	04006134 	movhi	r16,388
 183e04c:	84021404 	addi	r16,r16,2128
 183e050:	00c000c4 	movi	r3,3
 183e054:	00bfdfc4 	movi	r2,-129
 183e058:	d8c02a15 	stw	r3,168(sp)
 183e05c:	90a4703a 	and	r18,r18,r2
 183e060:	df002783 	ldbu	fp,158(sp)
 183e064:	d8c02e15 	stw	r3,184(sp)
 183e068:	d8002915 	stw	zero,164(sp)
 183e06c:	d8003215 	stw	zero,200(sp)
 183e070:	003c1c06 	br	183d0e4 <__ram_exceptions_end+0xff82cdf4>
 183e074:	9080100c 	andi	r2,r18,64
 183e078:	d8002785 	stb	zero,158(sp)
 183e07c:	10009426 	beq	r2,zero,183e2d0 <___svfprintf_internal_r+0x18a4>
 183e080:	d8c02d17 	ldw	r3,180(sp)
 183e084:	d9002917 	ldw	r4,164(sp)
 183e088:	002d883a 	mov	r22,zero
 183e08c:	18800104 	addi	r2,r3,4
 183e090:	1d00000b 	ldhu	r20,0(r3)
 183e094:	203ec10e 	bge	r4,zero,183db9c <__ram_exceptions_end+0xff82d8ac>
 183e098:	a586b03a 	or	r3,r20,r22
 183e09c:	d8802d15 	stw	r2,180(sp)
 183e0a0:	183ec21e 	bne	r3,zero,183dbac <__ram_exceptions_end+0xff82d8bc>
 183e0a4:	0039883a 	mov	fp,zero
 183e0a8:	0005883a 	mov	r2,zero
 183e0ac:	003db806 	br	183d790 <__ram_exceptions_end+0xff82d4a0>
 183e0b0:	d8802d17 	ldw	r2,180(sp)
 183e0b4:	d8c02d17 	ldw	r3,180(sp)
 183e0b8:	d9002d17 	ldw	r4,180(sp)
 183e0bc:	10800017 	ldw	r2,0(r2)
 183e0c0:	18c00117 	ldw	r3,4(r3)
 183e0c4:	21000204 	addi	r4,r4,8
 183e0c8:	d8803615 	stw	r2,216(sp)
 183e0cc:	d8c03715 	stw	r3,220(sp)
 183e0d0:	d9002d15 	stw	r4,180(sp)
 183e0d4:	003b8206 	br	183cee0 <__ram_exceptions_end+0xff82cbf0>
 183e0d8:	9080100c 	andi	r2,r18,64
 183e0dc:	10010726 	beq	r2,zero,183e4fc <___svfprintf_internal_r+0x1ad0>
 183e0e0:	d8c02d17 	ldw	r3,180(sp)
 183e0e4:	1d00000f 	ldh	r20,0(r3)
 183e0e8:	18c00104 	addi	r3,r3,4
 183e0ec:	d8c02d15 	stw	r3,180(sp)
 183e0f0:	a02dd7fa 	srai	r22,r20,31
 183e0f4:	b005883a 	mov	r2,r22
 183e0f8:	003ba206 	br	183cf84 <__ram_exceptions_end+0xff82cc94>
 183e0fc:	9080100c 	andi	r2,r18,64
 183e100:	10010526 	beq	r2,zero,183e518 <___svfprintf_internal_r+0x1aec>
 183e104:	d9002d17 	ldw	r4,180(sp)
 183e108:	002d883a 	mov	r22,zero
 183e10c:	2500000b 	ldhu	r20,0(r4)
 183e110:	21000104 	addi	r4,r4,4
 183e114:	d9002d15 	stw	r4,180(sp)
 183e118:	003cfe06 	br	183d514 <__ram_exceptions_end+0xff82d224>
 183e11c:	bc400007 	ldb	r17,0(r23)
 183e120:	003a9606 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183e124:	9080040c 	andi	r2,r18,16
 183e128:	10010126 	beq	r2,zero,183e530 <___svfprintf_internal_r+0x1b04>
 183e12c:	d9402d17 	ldw	r5,180(sp)
 183e130:	d8c02f17 	ldw	r3,188(sp)
 183e134:	28800017 	ldw	r2,0(r5)
 183e138:	29400104 	addi	r5,r5,4
 183e13c:	d9402d15 	stw	r5,180(sp)
 183e140:	10c00015 	stw	r3,0(r2)
 183e144:	003a6406 	br	183cad8 <__ram_exceptions_end+0xff82c7e8>
 183e148:	d9002917 	ldw	r4,164(sp)
 183e14c:	d8002785 	stb	zero,158(sp)
 183e150:	203d8d16 	blt	r4,zero,183d788 <__ram_exceptions_end+0xff82d498>
 183e154:	00bfdfc4 	movi	r2,-129
 183e158:	90a4703a 	and	r18,r18,r2
 183e15c:	003b0506 	br	183cd74 <__ram_exceptions_end+0xff82ca84>
 183e160:	01406134 	movhi	r5,388
 183e164:	294cd004 	addi	r5,r5,13120
 183e168:	d9402b15 	stw	r5,172(sp)
 183e16c:	d9402b17 	ldw	r5,172(sp)
 183e170:	1c47883a 	add	r3,r3,r17
 183e174:	10800044 	addi	r2,r2,1
 183e178:	41400015 	stw	r5,0(r8)
 183e17c:	44400115 	stw	r17,4(r8)
 183e180:	d8c02015 	stw	r3,128(sp)
 183e184:	d8801f15 	stw	r2,124(sp)
 183e188:	010001c4 	movi	r4,7
 183e18c:	20bf3016 	blt	r4,r2,183de50 <__ram_exceptions_end+0xff82db60>
 183e190:	42000204 	addi	r8,r8,8
 183e194:	003f3506 	br	183de6c <__ram_exceptions_end+0xff82db7c>
 183e198:	01006134 	movhi	r4,388
 183e19c:	210cd004 	addi	r4,r4,13120
 183e1a0:	d9002b15 	stw	r4,172(sp)
 183e1a4:	003c5e06 	br	183d320 <__ram_exceptions_end+0xff82d030>
 183e1a8:	d9402c17 	ldw	r5,176(sp)
 183e1ac:	d9801e04 	addi	r6,sp,120
 183e1b0:	9809883a 	mov	r4,r19
 183e1b4:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e1b8:	103b011e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e1bc:	d8c02017 	ldw	r3,128(sp)
 183e1c0:	da000404 	addi	r8,sp,16
 183e1c4:	003d9306 	br	183d814 <__ram_exceptions_end+0xff82d524>
 183e1c8:	d8801f17 	ldw	r2,124(sp)
 183e1cc:	01406134 	movhi	r5,388
 183e1d0:	01000044 	movi	r4,1
 183e1d4:	18c00044 	addi	r3,r3,1
 183e1d8:	10800044 	addi	r2,r2,1
 183e1dc:	29422104 	addi	r5,r5,2180
 183e1e0:	41000115 	stw	r4,4(r8)
 183e1e4:	41400015 	stw	r5,0(r8)
 183e1e8:	d8c02015 	stw	r3,128(sp)
 183e1ec:	d8801f15 	stw	r2,124(sp)
 183e1f0:	010001c4 	movi	r4,7
 183e1f4:	2080b516 	blt	r4,r2,183e4cc <___svfprintf_internal_r+0x1aa0>
 183e1f8:	42000204 	addi	r8,r8,8
 183e1fc:	8800041e 	bne	r17,zero,183e210 <___svfprintf_internal_r+0x17e4>
 183e200:	d8803317 	ldw	r2,204(sp)
 183e204:	1000021e 	bne	r2,zero,183e210 <___svfprintf_internal_r+0x17e4>
 183e208:	9080004c 	andi	r2,r18,1
 183e20c:	103c5b26 	beq	r2,zero,183d37c <__ram_exceptions_end+0xff82d08c>
 183e210:	d9003817 	ldw	r4,224(sp)
 183e214:	d8801f17 	ldw	r2,124(sp)
 183e218:	d9403417 	ldw	r5,208(sp)
 183e21c:	20c7883a 	add	r3,r4,r3
 183e220:	10800044 	addi	r2,r2,1
 183e224:	41000115 	stw	r4,4(r8)
 183e228:	41400015 	stw	r5,0(r8)
 183e22c:	d8c02015 	stw	r3,128(sp)
 183e230:	d8801f15 	stw	r2,124(sp)
 183e234:	010001c4 	movi	r4,7
 183e238:	20818016 	blt	r4,r2,183e83c <___svfprintf_internal_r+0x1e10>
 183e23c:	42000204 	addi	r8,r8,8
 183e240:	0463c83a 	sub	r17,zero,r17
 183e244:	0440cb0e 	bge	zero,r17,183e574 <___svfprintf_internal_r+0x1b48>
 183e248:	05800404 	movi	r22,16
 183e24c:	b440e80e 	bge	r22,r17,183e5f0 <___svfprintf_internal_r+0x1bc4>
 183e250:	01406134 	movhi	r5,388
 183e254:	294cd004 	addi	r5,r5,13120
 183e258:	d9402b15 	stw	r5,172(sp)
 183e25c:	070001c4 	movi	fp,7
 183e260:	dd002c17 	ldw	r20,176(sp)
 183e264:	00000306 	br	183e274 <___svfprintf_internal_r+0x1848>
 183e268:	42000204 	addi	r8,r8,8
 183e26c:	8c7ffc04 	addi	r17,r17,-16
 183e270:	b440e20e 	bge	r22,r17,183e5fc <___svfprintf_internal_r+0x1bd0>
 183e274:	18c00404 	addi	r3,r3,16
 183e278:	10800044 	addi	r2,r2,1
 183e27c:	45400015 	stw	r21,0(r8)
 183e280:	45800115 	stw	r22,4(r8)
 183e284:	d8c02015 	stw	r3,128(sp)
 183e288:	d8801f15 	stw	r2,124(sp)
 183e28c:	e0bff60e 	bge	fp,r2,183e268 <__ram_exceptions_end+0xff82df78>
 183e290:	d9801e04 	addi	r6,sp,120
 183e294:	a00b883a 	mov	r5,r20
 183e298:	9809883a 	mov	r4,r19
 183e29c:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e2a0:	103ac71e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e2a4:	d8c02017 	ldw	r3,128(sp)
 183e2a8:	d8801f17 	ldw	r2,124(sp)
 183e2ac:	da000404 	addi	r8,sp,16
 183e2b0:	003fee06 	br	183e26c <__ram_exceptions_end+0xff82df7c>
 183e2b4:	d8c02d17 	ldw	r3,180(sp)
 183e2b8:	d9002917 	ldw	r4,164(sp)
 183e2bc:	002d883a 	mov	r22,zero
 183e2c0:	18800104 	addi	r2,r3,4
 183e2c4:	1d000017 	ldw	r20,0(r3)
 183e2c8:	203e7d0e 	bge	r4,zero,183dcc0 <__ram_exceptions_end+0xff82d9d0>
 183e2cc:	003eda06 	br	183de38 <__ram_exceptions_end+0xff82db48>
 183e2d0:	d9402d17 	ldw	r5,180(sp)
 183e2d4:	d8c02917 	ldw	r3,164(sp)
 183e2d8:	002d883a 	mov	r22,zero
 183e2dc:	28800104 	addi	r2,r5,4
 183e2e0:	2d000017 	ldw	r20,0(r5)
 183e2e4:	183e2d0e 	bge	r3,zero,183db9c <__ram_exceptions_end+0xff82d8ac>
 183e2e8:	003f6b06 	br	183e098 <__ram_exceptions_end+0xff82dda8>
 183e2ec:	d8c02d15 	stw	r3,180(sp)
 183e2f0:	0039883a 	mov	fp,zero
 183e2f4:	003ed206 	br	183de40 <__ram_exceptions_end+0xff82db50>
 183e2f8:	bc400043 	ldbu	r17,1(r23)
 183e2fc:	94800814 	ori	r18,r18,32
 183e300:	bdc00044 	addi	r23,r23,1
 183e304:	8c403fcc 	andi	r17,r17,255
 183e308:	8c40201c 	xori	r17,r17,128
 183e30c:	8c7fe004 	addi	r17,r17,-128
 183e310:	003a1a06 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183e314:	d9402c17 	ldw	r5,176(sp)
 183e318:	d9801e04 	addi	r6,sp,120
 183e31c:	9809883a 	mov	r4,r19
 183e320:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e324:	103aa61e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e328:	d8c02017 	ldw	r3,128(sp)
 183e32c:	da000404 	addi	r8,sp,16
 183e330:	003d4a06 	br	183d85c <__ram_exceptions_end+0xff82d56c>
 183e334:	d9002917 	ldw	r4,164(sp)
 183e338:	05bff7c4 	movi	r22,-33
 183e33c:	00bfffc4 	movi	r2,-1
 183e340:	8dac703a 	and	r22,r17,r22
 183e344:	20806a26 	beq	r4,r2,183e4f0 <___svfprintf_internal_r+0x1ac4>
 183e348:	008011c4 	movi	r2,71
 183e34c:	b0813726 	beq	r22,r2,183e82c <___svfprintf_internal_r+0x1e00>
 183e350:	d9003717 	ldw	r4,220(sp)
 183e354:	90c04014 	ori	r3,r18,256
 183e358:	d8c02b15 	stw	r3,172(sp)
 183e35c:	20015d16 	blt	r4,zero,183e8d4 <___svfprintf_internal_r+0x1ea8>
 183e360:	dd003717 	ldw	r20,220(sp)
 183e364:	d8002a05 	stb	zero,168(sp)
 183e368:	00801984 	movi	r2,102
 183e36c:	88814026 	beq	r17,r2,183e870 <___svfprintf_internal_r+0x1e44>
 183e370:	00801184 	movi	r2,70
 183e374:	88817126 	beq	r17,r2,183e93c <___svfprintf_internal_r+0x1f10>
 183e378:	00801144 	movi	r2,69
 183e37c:	b0816226 	beq	r22,r2,183e908 <___svfprintf_internal_r+0x1edc>
 183e380:	d8c02917 	ldw	r3,164(sp)
 183e384:	d8802104 	addi	r2,sp,132
 183e388:	d8800315 	stw	r2,12(sp)
 183e38c:	d9403617 	ldw	r5,216(sp)
 183e390:	d8802504 	addi	r2,sp,148
 183e394:	d8800215 	stw	r2,8(sp)
 183e398:	d8802604 	addi	r2,sp,152
 183e39c:	d8c00015 	stw	r3,0(sp)
 183e3a0:	d8800115 	stw	r2,4(sp)
 183e3a4:	01c00084 	movi	r7,2
 183e3a8:	a00d883a 	mov	r6,r20
 183e3ac:	9809883a 	mov	r4,r19
 183e3b0:	d8c03d15 	stw	r3,244(sp)
 183e3b4:	da003e15 	stw	r8,248(sp)
 183e3b8:	18031840 	call	1803184 <_dtoa_r>
 183e3bc:	1021883a 	mov	r16,r2
 183e3c0:	008019c4 	movi	r2,103
 183e3c4:	d8c03d17 	ldw	r3,244(sp)
 183e3c8:	da003e17 	ldw	r8,248(sp)
 183e3cc:	8880e726 	beq	r17,r2,183e76c <___svfprintf_internal_r+0x1d40>
 183e3d0:	008011c4 	movi	r2,71
 183e3d4:	8880d426 	beq	r17,r2,183e728 <___svfprintf_internal_r+0x1cfc>
 183e3d8:	80f9883a 	add	fp,r16,r3
 183e3dc:	d9003617 	ldw	r4,216(sp)
 183e3e0:	000d883a 	mov	r6,zero
 183e3e4:	000f883a 	mov	r7,zero
 183e3e8:	a00b883a 	mov	r5,r20
 183e3ec:	da003e15 	stw	r8,248(sp)
 183e3f0:	180be6c0 	call	180be6c <__eqdf2>
 183e3f4:	da003e17 	ldw	r8,248(sp)
 183e3f8:	1000e426 	beq	r2,zero,183e78c <___svfprintf_internal_r+0x1d60>
 183e3fc:	d8802117 	ldw	r2,132(sp)
 183e400:	1700062e 	bgeu	r2,fp,183e41c <___svfprintf_internal_r+0x19f0>
 183e404:	01000c04 	movi	r4,48
 183e408:	10c00044 	addi	r3,r2,1
 183e40c:	d8c02115 	stw	r3,132(sp)
 183e410:	11000005 	stb	r4,0(r2)
 183e414:	d8802117 	ldw	r2,132(sp)
 183e418:	173ffb36 	bltu	r2,fp,183e408 <__ram_exceptions_end+0xff82e118>
 183e41c:	1405c83a 	sub	r2,r2,r16
 183e420:	d8803315 	stw	r2,204(sp)
 183e424:	008011c4 	movi	r2,71
 183e428:	b080c526 	beq	r22,r2,183e740 <___svfprintf_internal_r+0x1d14>
 183e42c:	00801944 	movi	r2,101
 183e430:	1441d90e 	bge	r2,r17,183eb98 <___svfprintf_internal_r+0x216c>
 183e434:	d8c02617 	ldw	r3,152(sp)
 183e438:	00801984 	movi	r2,102
 183e43c:	d8c03215 	stw	r3,200(sp)
 183e440:	88813426 	beq	r17,r2,183e914 <___svfprintf_internal_r+0x1ee8>
 183e444:	d8c03217 	ldw	r3,200(sp)
 183e448:	d9003317 	ldw	r4,204(sp)
 183e44c:	19012516 	blt	r3,r4,183e8e4 <___svfprintf_internal_r+0x1eb8>
 183e450:	9480004c 	andi	r18,r18,1
 183e454:	9001841e 	bne	r18,zero,183ea68 <___svfprintf_internal_r+0x203c>
 183e458:	1805883a 	mov	r2,r3
 183e45c:	1801cc16 	blt	r3,zero,183eb90 <___svfprintf_internal_r+0x2164>
 183e460:	d8c03217 	ldw	r3,200(sp)
 183e464:	044019c4 	movi	r17,103
 183e468:	d8c02e15 	stw	r3,184(sp)
 183e46c:	df002a07 	ldb	fp,168(sp)
 183e470:	e000a61e 	bne	fp,zero,183e70c <___svfprintf_internal_r+0x1ce0>
 183e474:	df002783 	ldbu	fp,158(sp)
 183e478:	d8802a15 	stw	r2,168(sp)
 183e47c:	dc802b17 	ldw	r18,172(sp)
 183e480:	d8002915 	stw	zero,164(sp)
 183e484:	003b1706 	br	183d0e4 <__ram_exceptions_end+0xff82cdf4>
 183e488:	04006134 	movhi	r16,388
 183e48c:	84021104 	addi	r16,r16,2116
 183e490:	003aa606 	br	183cf2c <__ram_exceptions_end+0xff82cc3c>
 183e494:	d9003917 	ldw	r4,228(sp)
 183e498:	04001004 	movi	r16,64
 183e49c:	800b883a 	mov	r5,r16
 183e4a0:	18056a80 	call	18056a8 <_malloc_r>
 183e4a4:	d9002c17 	ldw	r4,176(sp)
 183e4a8:	20800015 	stw	r2,0(r4)
 183e4ac:	20800415 	stw	r2,16(r4)
 183e4b0:	1001cb26 	beq	r2,zero,183ebe0 <___svfprintf_internal_r+0x21b4>
 183e4b4:	d8802c17 	ldw	r2,176(sp)
 183e4b8:	14000515 	stw	r16,20(r2)
 183e4bc:	00397606 	br	183ca98 <__ram_exceptions_end+0xff82c7a8>
 183e4c0:	04006134 	movhi	r16,388
 183e4c4:	84021304 	addi	r16,r16,2124
 183e4c8:	003ee106 	br	183e050 <__ram_exceptions_end+0xff82dd60>
 183e4cc:	d9402c17 	ldw	r5,176(sp)
 183e4d0:	d9801e04 	addi	r6,sp,120
 183e4d4:	9809883a 	mov	r4,r19
 183e4d8:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e4dc:	103a381e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e4e0:	dc402617 	ldw	r17,152(sp)
 183e4e4:	d8c02017 	ldw	r3,128(sp)
 183e4e8:	da000404 	addi	r8,sp,16
 183e4ec:	003f4306 	br	183e1fc <__ram_exceptions_end+0xff82df0c>
 183e4f0:	01400184 	movi	r5,6
 183e4f4:	d9402915 	stw	r5,164(sp)
 183e4f8:	003f9506 	br	183e350 <__ram_exceptions_end+0xff82e060>
 183e4fc:	d9002d17 	ldw	r4,180(sp)
 183e500:	25000017 	ldw	r20,0(r4)
 183e504:	21000104 	addi	r4,r4,4
 183e508:	d9002d15 	stw	r4,180(sp)
 183e50c:	a02dd7fa 	srai	r22,r20,31
 183e510:	b005883a 	mov	r2,r22
 183e514:	003a9b06 	br	183cf84 <__ram_exceptions_end+0xff82cc94>
 183e518:	d9402d17 	ldw	r5,180(sp)
 183e51c:	002d883a 	mov	r22,zero
 183e520:	2d000017 	ldw	r20,0(r5)
 183e524:	29400104 	addi	r5,r5,4
 183e528:	d9402d15 	stw	r5,180(sp)
 183e52c:	003bf906 	br	183d514 <__ram_exceptions_end+0xff82d224>
 183e530:	9480100c 	andi	r18,r18,64
 183e534:	90006e26 	beq	r18,zero,183e6f0 <___svfprintf_internal_r+0x1cc4>
 183e538:	d9002d17 	ldw	r4,180(sp)
 183e53c:	d9402f17 	ldw	r5,188(sp)
 183e540:	20800017 	ldw	r2,0(r4)
 183e544:	21000104 	addi	r4,r4,4
 183e548:	d9002d15 	stw	r4,180(sp)
 183e54c:	1140000d 	sth	r5,0(r2)
 183e550:	00396106 	br	183cad8 <__ram_exceptions_end+0xff82c7e8>
 183e554:	d9402c17 	ldw	r5,176(sp)
 183e558:	d9801e04 	addi	r6,sp,120
 183e55c:	9809883a 	mov	r4,r19
 183e560:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e564:	103a161e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e568:	d8c02017 	ldw	r3,128(sp)
 183e56c:	d8801f17 	ldw	r2,124(sp)
 183e570:	da000404 	addi	r8,sp,16
 183e574:	d9403317 	ldw	r5,204(sp)
 183e578:	10800044 	addi	r2,r2,1
 183e57c:	44000015 	stw	r16,0(r8)
 183e580:	28c7883a 	add	r3,r5,r3
 183e584:	003b7706 	br	183d364 <__ram_exceptions_end+0xff82d074>
 183e588:	8009883a 	mov	r4,r16
 183e58c:	da003e15 	stw	r8,248(sp)
 183e590:	18074e40 	call	18074e4 <strlen>
 183e594:	d8802e15 	stw	r2,184(sp)
 183e598:	da003e17 	ldw	r8,248(sp)
 183e59c:	103c280e 	bge	r2,zero,183d640 <__ram_exceptions_end+0xff82d350>
 183e5a0:	0005883a 	mov	r2,zero
 183e5a4:	003c2606 	br	183d640 <__ram_exceptions_end+0xff82d350>
 183e5a8:	00bfffc4 	movi	r2,-1
 183e5ac:	003a0906 	br	183cdd4 <__ram_exceptions_end+0xff82cae4>
 183e5b0:	01006134 	movhi	r4,388
 183e5b4:	210cd404 	addi	r4,r4,13136
 183e5b8:	d9003515 	stw	r4,212(sp)
 183e5bc:	003b0606 	br	183d1d8 <__ram_exceptions_end+0xff82cee8>
 183e5c0:	013fffc4 	movi	r4,-1
 183e5c4:	003a2706 	br	183ce64 <__ram_exceptions_end+0xff82cb74>
 183e5c8:	d9402c17 	ldw	r5,176(sp)
 183e5cc:	d9801e04 	addi	r6,sp,120
 183e5d0:	9809883a 	mov	r4,r19
 183e5d4:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e5d8:	1039f91e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e5dc:	d8c02017 	ldw	r3,128(sp)
 183e5e0:	da000404 	addi	r8,sp,16
 183e5e4:	003d8406 	br	183dbf8 <__ram_exceptions_end+0xff82d908>
 183e5e8:	0023883a 	mov	r17,zero
 183e5ec:	003d8306 	br	183dbfc <__ram_exceptions_end+0xff82d90c>
 183e5f0:	01006134 	movhi	r4,388
 183e5f4:	210cd004 	addi	r4,r4,13120
 183e5f8:	d9002b15 	stw	r4,172(sp)
 183e5fc:	d9002b17 	ldw	r4,172(sp)
 183e600:	1c47883a 	add	r3,r3,r17
 183e604:	10800044 	addi	r2,r2,1
 183e608:	41000015 	stw	r4,0(r8)
 183e60c:	44400115 	stw	r17,4(r8)
 183e610:	d8c02015 	stw	r3,128(sp)
 183e614:	d8801f15 	stw	r2,124(sp)
 183e618:	010001c4 	movi	r4,7
 183e61c:	20bfcd16 	blt	r4,r2,183e554 <__ram_exceptions_end+0xff82e264>
 183e620:	42000204 	addi	r8,r8,8
 183e624:	003fd306 	br	183e574 <__ram_exceptions_end+0xff82e284>
 183e628:	d9402c17 	ldw	r5,176(sp)
 183e62c:	d9801e04 	addi	r6,sp,120
 183e630:	9809883a 	mov	r4,r19
 183e634:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e638:	1039e11e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e63c:	d8802617 	ldw	r2,152(sp)
 183e640:	d8c02017 	ldw	r3,128(sp)
 183e644:	da000404 	addi	r8,sp,16
 183e648:	003e1c06 	br	183debc <__ram_exceptions_end+0xff82dbcc>
 183e64c:	d8802917 	ldw	r2,164(sp)
 183e650:	00c00184 	movi	r3,6
 183e654:	1880012e 	bgeu	r3,r2,183e65c <___svfprintf_internal_r+0x1c30>
 183e658:	1805883a 	mov	r2,r3
 183e65c:	d8802e15 	stw	r2,184(sp)
 183e660:	1000f316 	blt	r2,zero,183ea30 <___svfprintf_internal_r+0x2004>
 183e664:	04006134 	movhi	r16,388
 183e668:	d8802a15 	stw	r2,168(sp)
 183e66c:	dd002d15 	stw	r20,180(sp)
 183e670:	d8002915 	stw	zero,164(sp)
 183e674:	d8003215 	stw	zero,200(sp)
 183e678:	84021f04 	addi	r16,r16,2172
 183e67c:	0039883a 	mov	fp,zero
 183e680:	003a9f06 	br	183d100 <__ram_exceptions_end+0xff82ce10>
 183e684:	01006134 	movhi	r4,388
 183e688:	210cd404 	addi	r4,r4,13136
 183e68c:	d9003515 	stw	r4,212(sp)
 183e690:	003b5f06 	br	183d410 <__ram_exceptions_end+0xff82d120>
 183e694:	d9402c17 	ldw	r5,176(sp)
 183e698:	d9801e04 	addi	r6,sp,120
 183e69c:	9809883a 	mov	r4,r19
 183e6a0:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e6a4:	1039c61e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e6a8:	d8802617 	ldw	r2,152(sp)
 183e6ac:	d9403317 	ldw	r5,204(sp)
 183e6b0:	d8c02017 	ldw	r3,128(sp)
 183e6b4:	da000404 	addi	r8,sp,16
 183e6b8:	2885c83a 	sub	r2,r5,r2
 183e6bc:	003e1006 	br	183df00 <__ram_exceptions_end+0xff82dc10>
 183e6c0:	00800044 	movi	r2,1
 183e6c4:	10803fcc 	andi	r2,r2,255
 183e6c8:	00c00044 	movi	r3,1
 183e6cc:	10fa3526 	beq	r2,r3,183cfa4 <__ram_exceptions_end+0xff82ccb4>
 183e6d0:	00c00084 	movi	r3,2
 183e6d4:	10fb9e26 	beq	r2,r3,183d550 <__ram_exceptions_end+0xff82d260>
 183e6d8:	003a6406 	br	183d06c <__ram_exceptions_end+0xff82cd7c>
 183e6dc:	0021883a 	mov	r16,zero
 183e6e0:	003e0806 	br	183df04 <__ram_exceptions_end+0xff82dc14>
 183e6e4:	07000b44 	movi	fp,45
 183e6e8:	df002785 	stb	fp,158(sp)
 183e6ec:	003a0b06 	br	183cf1c <__ram_exceptions_end+0xff82cc2c>
 183e6f0:	d8c02d17 	ldw	r3,180(sp)
 183e6f4:	d9002f17 	ldw	r4,188(sp)
 183e6f8:	18800017 	ldw	r2,0(r3)
 183e6fc:	18c00104 	addi	r3,r3,4
 183e700:	d8c02d15 	stw	r3,180(sp)
 183e704:	11000015 	stw	r4,0(r2)
 183e708:	0038f306 	br	183cad8 <__ram_exceptions_end+0xff82c7e8>
 183e70c:	00c00b44 	movi	r3,45
 183e710:	d8c02785 	stb	r3,158(sp)
 183e714:	d8802a15 	stw	r2,168(sp)
 183e718:	dc802b17 	ldw	r18,172(sp)
 183e71c:	d8002915 	stw	zero,164(sp)
 183e720:	07000b44 	movi	fp,45
 183e724:	003a7306 	br	183d0f4 <__ram_exceptions_end+0xff82ce04>
 183e728:	9080004c 	andi	r2,r18,1
 183e72c:	1000941e 	bne	r2,zero,183e980 <___svfprintf_internal_r+0x1f54>
 183e730:	d8802117 	ldw	r2,132(sp)
 183e734:	1405c83a 	sub	r2,r2,r16
 183e738:	d8803315 	stw	r2,204(sp)
 183e73c:	b441161e 	bne	r22,r17,183eb98 <___svfprintf_internal_r+0x216c>
 183e740:	dd802617 	ldw	r22,152(sp)
 183e744:	00bfff44 	movi	r2,-3
 183e748:	b0801a16 	blt	r22,r2,183e7b4 <___svfprintf_internal_r+0x1d88>
 183e74c:	d9402917 	ldw	r5,164(sp)
 183e750:	2d801816 	blt	r5,r22,183e7b4 <___svfprintf_internal_r+0x1d88>
 183e754:	dd803215 	stw	r22,200(sp)
 183e758:	003f3a06 	br	183e444 <__ram_exceptions_end+0xff82e154>
 183e75c:	1025883a 	mov	r18,r2
 183e760:	0039883a 	mov	fp,zero
 183e764:	00800084 	movi	r2,2
 183e768:	003fd606 	br	183e6c4 <__ram_exceptions_end+0xff82e3d4>
 183e76c:	9080004c 	andi	r2,r18,1
 183e770:	103f191e 	bne	r2,zero,183e3d8 <__ram_exceptions_end+0xff82e0e8>
 183e774:	d8802117 	ldw	r2,132(sp)
 183e778:	003f2806 	br	183e41c <__ram_exceptions_end+0xff82e12c>
 183e77c:	01006134 	movhi	r4,388
 183e780:	210cd004 	addi	r4,r4,13120
 183e784:	d9002b15 	stw	r4,172(sp)
 183e788:	003c7c06 	br	183d97c <__ram_exceptions_end+0xff82d68c>
 183e78c:	e005883a 	mov	r2,fp
 183e790:	003f2206 	br	183e41c <__ram_exceptions_end+0xff82e12c>
 183e794:	d9402917 	ldw	r5,164(sp)
 183e798:	df002783 	ldbu	fp,158(sp)
 183e79c:	dd002d15 	stw	r20,180(sp)
 183e7a0:	d9402a15 	stw	r5,168(sp)
 183e7a4:	d9402e15 	stw	r5,184(sp)
 183e7a8:	d8002915 	stw	zero,164(sp)
 183e7ac:	d8003215 	stw	zero,200(sp)
 183e7b0:	003a4c06 	br	183d0e4 <__ram_exceptions_end+0xff82cdf4>
 183e7b4:	8c7fff84 	addi	r17,r17,-2
 183e7b8:	b5bfffc4 	addi	r22,r22,-1
 183e7bc:	dd802615 	stw	r22,152(sp)
 183e7c0:	dc4022c5 	stb	r17,139(sp)
 183e7c4:	b000c316 	blt	r22,zero,183ead4 <___svfprintf_internal_r+0x20a8>
 183e7c8:	00800ac4 	movi	r2,43
 183e7cc:	d8802305 	stb	r2,140(sp)
 183e7d0:	00800244 	movi	r2,9
 183e7d4:	15806e16 	blt	r2,r22,183e990 <___svfprintf_internal_r+0x1f64>
 183e7d8:	00800c04 	movi	r2,48
 183e7dc:	b5800c04 	addi	r22,r22,48
 183e7e0:	d8802345 	stb	r2,141(sp)
 183e7e4:	dd802385 	stb	r22,142(sp)
 183e7e8:	d88023c4 	addi	r2,sp,143
 183e7ec:	df0022c4 	addi	fp,sp,139
 183e7f0:	d8c03317 	ldw	r3,204(sp)
 183e7f4:	1739c83a 	sub	fp,r2,fp
 183e7f8:	d9003317 	ldw	r4,204(sp)
 183e7fc:	e0c7883a 	add	r3,fp,r3
 183e800:	df003b15 	stw	fp,236(sp)
 183e804:	d8c02e15 	stw	r3,184(sp)
 183e808:	00800044 	movi	r2,1
 183e80c:	1100b70e 	bge	r2,r4,183eaec <___svfprintf_internal_r+0x20c0>
 183e810:	d8c02e17 	ldw	r3,184(sp)
 183e814:	18c00044 	addi	r3,r3,1
 183e818:	d8c02e15 	stw	r3,184(sp)
 183e81c:	1805883a 	mov	r2,r3
 183e820:	1800b016 	blt	r3,zero,183eae4 <___svfprintf_internal_r+0x20b8>
 183e824:	d8003215 	stw	zero,200(sp)
 183e828:	003f1006 	br	183e46c <__ram_exceptions_end+0xff82e17c>
 183e82c:	d8802917 	ldw	r2,164(sp)
 183e830:	103ec71e 	bne	r2,zero,183e350 <__ram_exceptions_end+0xff82e060>
 183e834:	dc002915 	stw	r16,164(sp)
 183e838:	003ec506 	br	183e350 <__ram_exceptions_end+0xff82e060>
 183e83c:	d9402c17 	ldw	r5,176(sp)
 183e840:	d9801e04 	addi	r6,sp,120
 183e844:	9809883a 	mov	r4,r19
 183e848:	183ee9c0 	call	183ee9c <__ssprint_r>
 183e84c:	10395c1e 	bne	r2,zero,183cdc0 <__ram_exceptions_end+0xff82cad0>
 183e850:	dc402617 	ldw	r17,152(sp)
 183e854:	d8c02017 	ldw	r3,128(sp)
 183e858:	d8801f17 	ldw	r2,124(sp)
 183e85c:	da000404 	addi	r8,sp,16
 183e860:	003e7706 	br	183e240 <__ram_exceptions_end+0xff82df50>
 183e864:	582f883a 	mov	r23,r11
 183e868:	d8002915 	stw	zero,164(sp)
 183e86c:	0038c406 	br	183cb80 <__ram_exceptions_end+0xff82c890>
 183e870:	d8c02917 	ldw	r3,164(sp)
 183e874:	d8802104 	addi	r2,sp,132
 183e878:	d8800315 	stw	r2,12(sp)
 183e87c:	d9403617 	ldw	r5,216(sp)
 183e880:	d8802504 	addi	r2,sp,148
 183e884:	d8800215 	stw	r2,8(sp)
 183e888:	d8802604 	addi	r2,sp,152
 183e88c:	d8c00015 	stw	r3,0(sp)
 183e890:	9809883a 	mov	r4,r19
 183e894:	d8800115 	stw	r2,4(sp)
 183e898:	01c000c4 	movi	r7,3
 183e89c:	a00d883a 	mov	r6,r20
 183e8a0:	da003e15 	stw	r8,248(sp)
 183e8a4:	18031840 	call	1803184 <_dtoa_r>
 183e8a8:	d9002917 	ldw	r4,164(sp)
 183e8ac:	da003e17 	ldw	r8,248(sp)
 183e8b0:	1021883a 	mov	r16,r2
 183e8b4:	1139883a 	add	fp,r2,r4
 183e8b8:	2007883a 	mov	r3,r4
 183e8bc:	81000007 	ldb	r4,0(r16)
 183e8c0:	00800c04 	movi	r2,48
 183e8c4:	20806f26 	beq	r4,r2,183ea84 <___svfprintf_internal_r+0x2058>
 183e8c8:	d8c02617 	ldw	r3,152(sp)
 183e8cc:	e0f9883a 	add	fp,fp,r3
 183e8d0:	003ec206 	br	183e3dc <__ram_exceptions_end+0xff82e0ec>
 183e8d4:	00c00b44 	movi	r3,45
 183e8d8:	2520003c 	xorhi	r20,r4,32768
 183e8dc:	d8c02a05 	stb	r3,168(sp)
 183e8e0:	003ea106 	br	183e368 <__ram_exceptions_end+0xff82e078>
 183e8e4:	d8c03217 	ldw	r3,200(sp)
 183e8e8:	00c0890e 	bge	zero,r3,183eb10 <___svfprintf_internal_r+0x20e4>
 183e8ec:	00800044 	movi	r2,1
 183e8f0:	d9003317 	ldw	r4,204(sp)
 183e8f4:	1105883a 	add	r2,r2,r4
 183e8f8:	d8802e15 	stw	r2,184(sp)
 183e8fc:	10005f16 	blt	r2,zero,183ea7c <___svfprintf_internal_r+0x2050>
 183e900:	044019c4 	movi	r17,103
 183e904:	003ed906 	br	183e46c <__ram_exceptions_end+0xff82e17c>
 183e908:	d9002917 	ldw	r4,164(sp)
 183e90c:	20c00044 	addi	r3,r4,1
 183e910:	003e9c06 	br	183e384 <__ram_exceptions_end+0xff82e094>
 183e914:	d9002917 	ldw	r4,164(sp)
 183e918:	00c0680e 	bge	zero,r3,183eabc <___svfprintf_internal_r+0x2090>
 183e91c:	2000461e 	bne	r4,zero,183ea38 <___svfprintf_internal_r+0x200c>
 183e920:	9480004c 	andi	r18,r18,1
 183e924:	9000441e 	bne	r18,zero,183ea38 <___svfprintf_internal_r+0x200c>
 183e928:	1805883a 	mov	r2,r3
 183e92c:	1800a016 	blt	r3,zero,183ebb0 <___svfprintf_internal_r+0x2184>
 183e930:	d8c03217 	ldw	r3,200(sp)
 183e934:	d8c02e15 	stw	r3,184(sp)
 183e938:	003ecc06 	br	183e46c <__ram_exceptions_end+0xff82e17c>
 183e93c:	d9402917 	ldw	r5,164(sp)
 183e940:	d8802104 	addi	r2,sp,132
 183e944:	d8800315 	stw	r2,12(sp)
 183e948:	d9400015 	stw	r5,0(sp)
 183e94c:	d8802504 	addi	r2,sp,148
 183e950:	d9403617 	ldw	r5,216(sp)
 183e954:	d8800215 	stw	r2,8(sp)
 183e958:	d8802604 	addi	r2,sp,152
 183e95c:	d8800115 	stw	r2,4(sp)
 183e960:	01c000c4 	movi	r7,3
 183e964:	a00d883a 	mov	r6,r20
 183e968:	9809883a 	mov	r4,r19
 183e96c:	da003e15 	stw	r8,248(sp)
 183e970:	18031840 	call	1803184 <_dtoa_r>
 183e974:	d8c02917 	ldw	r3,164(sp)
 183e978:	da003e17 	ldw	r8,248(sp)
 183e97c:	1021883a 	mov	r16,r2
 183e980:	00801184 	movi	r2,70
 183e984:	80f9883a 	add	fp,r16,r3
 183e988:	88bfcc26 	beq	r17,r2,183e8bc <__ram_exceptions_end+0xff82e5cc>
 183e98c:	003e9306 	br	183e3dc <__ram_exceptions_end+0xff82e0ec>
 183e990:	df0022c4 	addi	fp,sp,139
 183e994:	dc002915 	stw	r16,164(sp)
 183e998:	9829883a 	mov	r20,r19
 183e99c:	e021883a 	mov	r16,fp
 183e9a0:	4027883a 	mov	r19,r8
 183e9a4:	b009883a 	mov	r4,r22
 183e9a8:	01400284 	movi	r5,10
 183e9ac:	180aba80 	call	180aba8 <__modsi3>
 183e9b0:	10800c04 	addi	r2,r2,48
 183e9b4:	843fffc4 	addi	r16,r16,-1
 183e9b8:	b009883a 	mov	r4,r22
 183e9bc:	01400284 	movi	r5,10
 183e9c0:	80800005 	stb	r2,0(r16)
 183e9c4:	180ab240 	call	180ab24 <__divsi3>
 183e9c8:	102d883a 	mov	r22,r2
 183e9cc:	00800244 	movi	r2,9
 183e9d0:	15bff416 	blt	r2,r22,183e9a4 <__ram_exceptions_end+0xff82e6b4>
 183e9d4:	9811883a 	mov	r8,r19
 183e9d8:	b0800c04 	addi	r2,r22,48
 183e9dc:	a027883a 	mov	r19,r20
 183e9e0:	8029883a 	mov	r20,r16
 183e9e4:	a17fffc4 	addi	r5,r20,-1
 183e9e8:	a0bfffc5 	stb	r2,-1(r20)
 183e9ec:	dc002917 	ldw	r16,164(sp)
 183e9f0:	2f00752e 	bgeu	r5,fp,183ebc8 <___svfprintf_internal_r+0x219c>
 183e9f4:	d9c02384 	addi	r7,sp,142
 183e9f8:	3d0fc83a 	sub	r7,r7,r20
 183e9fc:	d9002344 	addi	r4,sp,141
 183ea00:	e1cf883a 	add	r7,fp,r7
 183ea04:	00000106 	br	183ea0c <___svfprintf_internal_r+0x1fe0>
 183ea08:	28800003 	ldbu	r2,0(r5)
 183ea0c:	20800005 	stb	r2,0(r4)
 183ea10:	21000044 	addi	r4,r4,1
 183ea14:	29400044 	addi	r5,r5,1
 183ea18:	21fffb1e 	bne	r4,r7,183ea08 <__ram_exceptions_end+0xff82e718>
 183ea1c:	d8802304 	addi	r2,sp,140
 183ea20:	1505c83a 	sub	r2,r2,r20
 183ea24:	d8c02344 	addi	r3,sp,141
 183ea28:	1885883a 	add	r2,r3,r2
 183ea2c:	003f7006 	br	183e7f0 <__ram_exceptions_end+0xff82e500>
 183ea30:	0005883a 	mov	r2,zero
 183ea34:	003f0b06 	br	183e664 <__ram_exceptions_end+0xff82e374>
 183ea38:	d9002917 	ldw	r4,164(sp)
 183ea3c:	d8c03217 	ldw	r3,200(sp)
 183ea40:	20800044 	addi	r2,r4,1
 183ea44:	1885883a 	add	r2,r3,r2
 183ea48:	d8802e15 	stw	r2,184(sp)
 183ea4c:	103e870e 	bge	r2,zero,183e46c <__ram_exceptions_end+0xff82e17c>
 183ea50:	0005883a 	mov	r2,zero
 183ea54:	003e8506 	br	183e46c <__ram_exceptions_end+0xff82e17c>
 183ea58:	01006134 	movhi	r4,388
 183ea5c:	210cd004 	addi	r4,r4,13120
 183ea60:	d9002b15 	stw	r4,172(sp)
 183ea64:	003cc506 	br	183dd7c <__ram_exceptions_end+0xff82da8c>
 183ea68:	d8c03217 	ldw	r3,200(sp)
 183ea6c:	18c00044 	addi	r3,r3,1
 183ea70:	d8c02e15 	stw	r3,184(sp)
 183ea74:	1805883a 	mov	r2,r3
 183ea78:	183fa10e 	bge	r3,zero,183e900 <__ram_exceptions_end+0xff82e610>
 183ea7c:	0005883a 	mov	r2,zero
 183ea80:	003f9f06 	br	183e900 <__ram_exceptions_end+0xff82e610>
 183ea84:	d9003617 	ldw	r4,216(sp)
 183ea88:	000d883a 	mov	r6,zero
 183ea8c:	000f883a 	mov	r7,zero
 183ea90:	a00b883a 	mov	r5,r20
 183ea94:	d8c03d15 	stw	r3,244(sp)
 183ea98:	da003e15 	stw	r8,248(sp)
 183ea9c:	180be6c0 	call	180be6c <__eqdf2>
 183eaa0:	d8c03d17 	ldw	r3,244(sp)
 183eaa4:	da003e17 	ldw	r8,248(sp)
 183eaa8:	103f8726 	beq	r2,zero,183e8c8 <__ram_exceptions_end+0xff82e5d8>
 183eaac:	00800044 	movi	r2,1
 183eab0:	10c7c83a 	sub	r3,r2,r3
 183eab4:	d8c02615 	stw	r3,152(sp)
 183eab8:	003f8406 	br	183e8cc <__ram_exceptions_end+0xff82e5dc>
 183eabc:	20000e1e 	bne	r4,zero,183eaf8 <___svfprintf_internal_r+0x20cc>
 183eac0:	9480004c 	andi	r18,r18,1
 183eac4:	90000c1e 	bne	r18,zero,183eaf8 <___svfprintf_internal_r+0x20cc>
 183eac8:	00800044 	movi	r2,1
 183eacc:	d8802e15 	stw	r2,184(sp)
 183ead0:	003e6606 	br	183e46c <__ram_exceptions_end+0xff82e17c>
 183ead4:	00800b44 	movi	r2,45
 183ead8:	05adc83a 	sub	r22,zero,r22
 183eadc:	d8802305 	stb	r2,140(sp)
 183eae0:	003f3b06 	br	183e7d0 <__ram_exceptions_end+0xff82e4e0>
 183eae4:	0005883a 	mov	r2,zero
 183eae8:	003f4e06 	br	183e824 <__ram_exceptions_end+0xff82e534>
 183eaec:	90a4703a 	and	r18,r18,r2
 183eaf0:	903f4a26 	beq	r18,zero,183e81c <__ram_exceptions_end+0xff82e52c>
 183eaf4:	003f4606 	br	183e810 <__ram_exceptions_end+0xff82e520>
 183eaf8:	d8c02917 	ldw	r3,164(sp)
 183eafc:	18c00084 	addi	r3,r3,2
 183eb00:	d8c02e15 	stw	r3,184(sp)
 183eb04:	1805883a 	mov	r2,r3
 183eb08:	183e580e 	bge	r3,zero,183e46c <__ram_exceptions_end+0xff82e17c>
 183eb0c:	003fd006 	br	183ea50 <__ram_exceptions_end+0xff82e760>
 183eb10:	00800084 	movi	r2,2
 183eb14:	10c5c83a 	sub	r2,r2,r3
 183eb18:	003f7506 	br	183e8f0 <__ram_exceptions_end+0xff82e600>
 183eb1c:	d8802d17 	ldw	r2,180(sp)
 183eb20:	d9002d17 	ldw	r4,180(sp)
 183eb24:	bc400043 	ldbu	r17,1(r23)
 183eb28:	10800017 	ldw	r2,0(r2)
 183eb2c:	582f883a 	mov	r23,r11
 183eb30:	d8802915 	stw	r2,164(sp)
 183eb34:	20800104 	addi	r2,r4,4
 183eb38:	d9002917 	ldw	r4,164(sp)
 183eb3c:	d8802d15 	stw	r2,180(sp)
 183eb40:	203df00e 	bge	r4,zero,183e304 <__ram_exceptions_end+0xff82e014>
 183eb44:	8c403fcc 	andi	r17,r17,255
 183eb48:	00bfffc4 	movi	r2,-1
 183eb4c:	8c40201c 	xori	r17,r17,128
 183eb50:	d8802915 	stw	r2,164(sp)
 183eb54:	8c7fe004 	addi	r17,r17,-128
 183eb58:	00380806 	br	183cb7c <__ram_exceptions_end+0xff82c88c>
 183eb5c:	9080004c 	andi	r2,r18,1
 183eb60:	0039883a 	mov	fp,zero
 183eb64:	10000726 	beq	r2,zero,183eb84 <___svfprintf_internal_r+0x2158>
 183eb68:	d8c02817 	ldw	r3,160(sp)
 183eb6c:	dc001dc4 	addi	r16,sp,119
 183eb70:	00800c04 	movi	r2,48
 183eb74:	1c07c83a 	sub	r3,r3,r16
 183eb78:	d8801dc5 	stb	r2,119(sp)
 183eb7c:	d8c02e15 	stw	r3,184(sp)
 183eb80:	00395206 	br	183d0cc <__ram_exceptions_end+0xff82cddc>
 183eb84:	d8002e15 	stw	zero,184(sp)
 183eb88:	dc001e04 	addi	r16,sp,120
 183eb8c:	00394f06 	br	183d0cc <__ram_exceptions_end+0xff82cddc>
 183eb90:	0005883a 	mov	r2,zero
 183eb94:	003e3206 	br	183e460 <__ram_exceptions_end+0xff82e170>
 183eb98:	dd802617 	ldw	r22,152(sp)
 183eb9c:	003f0606 	br	183e7b8 <__ram_exceptions_end+0xff82e4c8>
 183eba0:	d9c02785 	stb	r7,158(sp)
 183eba4:	003a5106 	br	183d4ec <__ram_exceptions_end+0xff82d1fc>
 183eba8:	d9c02785 	stb	r7,158(sp)
 183ebac:	003a3706 	br	183d48c <__ram_exceptions_end+0xff82d19c>
 183ebb0:	0005883a 	mov	r2,zero
 183ebb4:	003f5e06 	br	183e930 <__ram_exceptions_end+0xff82e640>
 183ebb8:	d9c02785 	stb	r7,158(sp)
 183ebbc:	00391706 	br	183d01c <__ram_exceptions_end+0xff82cd2c>
 183ebc0:	d9c02785 	stb	r7,158(sp)
 183ebc4:	0038e606 	br	183cf60 <__ram_exceptions_end+0xff82cc70>
 183ebc8:	d8802344 	addi	r2,sp,141
 183ebcc:	003f0806 	br	183e7f0 <__ram_exceptions_end+0xff82e500>
 183ebd0:	d9c02785 	stb	r7,158(sp)
 183ebd4:	0038b706 	br	183ceb4 <__ram_exceptions_end+0xff82cbc4>
 183ebd8:	d9c02785 	stb	r7,158(sp)
 183ebdc:	003adc06 	br	183d750 <__ram_exceptions_end+0xff82d460>
 183ebe0:	d9403917 	ldw	r5,228(sp)
 183ebe4:	00800304 	movi	r2,12
 183ebe8:	28800015 	stw	r2,0(r5)
 183ebec:	00bfffc4 	movi	r2,-1
 183ebf0:	00387806 	br	183cdd4 <__ram_exceptions_end+0xff82cae4>
 183ebf4:	d9c02785 	stb	r7,158(sp)
 183ebf8:	003abf06 	br	183d6f8 <__ram_exceptions_end+0xff82d408>
 183ebfc:	d9c02785 	stb	r7,158(sp)
 183ec00:	003a9b06 	br	183d670 <__ram_exceptions_end+0xff82d380>

0183ec04 <__register_exitproc>:
 183ec04:	defffa04 	addi	sp,sp,-24
 183ec08:	dc000315 	stw	r16,12(sp)
 183ec0c:	04006134 	movhi	r16,388
 183ec10:	84146804 	addi	r16,r16,20896
 183ec14:	80c00017 	ldw	r3,0(r16)
 183ec18:	dc400415 	stw	r17,16(sp)
 183ec1c:	dfc00515 	stw	ra,20(sp)
 183ec20:	18805217 	ldw	r2,328(r3)
 183ec24:	2023883a 	mov	r17,r4
 183ec28:	10003726 	beq	r2,zero,183ed08 <__register_exitproc+0x104>
 183ec2c:	10c00117 	ldw	r3,4(r2)
 183ec30:	010007c4 	movi	r4,31
 183ec34:	20c00e16 	blt	r4,r3,183ec70 <__register_exitproc+0x6c>
 183ec38:	1a000044 	addi	r8,r3,1
 183ec3c:	8800221e 	bne	r17,zero,183ecc8 <__register_exitproc+0xc4>
 183ec40:	18c00084 	addi	r3,r3,2
 183ec44:	18c7883a 	add	r3,r3,r3
 183ec48:	18c7883a 	add	r3,r3,r3
 183ec4c:	12000115 	stw	r8,4(r2)
 183ec50:	10c7883a 	add	r3,r2,r3
 183ec54:	19400015 	stw	r5,0(r3)
 183ec58:	0005883a 	mov	r2,zero
 183ec5c:	dfc00517 	ldw	ra,20(sp)
 183ec60:	dc400417 	ldw	r17,16(sp)
 183ec64:	dc000317 	ldw	r16,12(sp)
 183ec68:	dec00604 	addi	sp,sp,24
 183ec6c:	f800283a 	ret
 183ec70:	00806134 	movhi	r2,388
 183ec74:	10b14004 	addi	r2,r2,-15104
 183ec78:	10002626 	beq	r2,zero,183ed14 <__register_exitproc+0x110>
 183ec7c:	01006404 	movi	r4,400
 183ec80:	d9400015 	stw	r5,0(sp)
 183ec84:	d9800115 	stw	r6,4(sp)
 183ec88:	d9c00215 	stw	r7,8(sp)
 183ec8c:	183c5000 	call	183c500 <malloc>
 183ec90:	d9400017 	ldw	r5,0(sp)
 183ec94:	d9800117 	ldw	r6,4(sp)
 183ec98:	d9c00217 	ldw	r7,8(sp)
 183ec9c:	10001d26 	beq	r2,zero,183ed14 <__register_exitproc+0x110>
 183eca0:	81000017 	ldw	r4,0(r16)
 183eca4:	10000115 	stw	zero,4(r2)
 183eca8:	02000044 	movi	r8,1
 183ecac:	22405217 	ldw	r9,328(r4)
 183ecb0:	0007883a 	mov	r3,zero
 183ecb4:	12400015 	stw	r9,0(r2)
 183ecb8:	20805215 	stw	r2,328(r4)
 183ecbc:	10006215 	stw	zero,392(r2)
 183ecc0:	10006315 	stw	zero,396(r2)
 183ecc4:	883fde26 	beq	r17,zero,183ec40 <__ram_exceptions_end+0xff82e950>
 183ecc8:	18c9883a 	add	r4,r3,r3
 183eccc:	2109883a 	add	r4,r4,r4
 183ecd0:	1109883a 	add	r4,r2,r4
 183ecd4:	21802215 	stw	r6,136(r4)
 183ecd8:	01800044 	movi	r6,1
 183ecdc:	12406217 	ldw	r9,392(r2)
 183ece0:	30cc983a 	sll	r6,r6,r3
 183ece4:	4992b03a 	or	r9,r9,r6
 183ece8:	12406215 	stw	r9,392(r2)
 183ecec:	21c04215 	stw	r7,264(r4)
 183ecf0:	01000084 	movi	r4,2
 183ecf4:	893fd21e 	bne	r17,r4,183ec40 <__ram_exceptions_end+0xff82e950>
 183ecf8:	11006317 	ldw	r4,396(r2)
 183ecfc:	218cb03a 	or	r6,r4,r6
 183ed00:	11806315 	stw	r6,396(r2)
 183ed04:	003fce06 	br	183ec40 <__ram_exceptions_end+0xff82e950>
 183ed08:	18805304 	addi	r2,r3,332
 183ed0c:	18805215 	stw	r2,328(r3)
 183ed10:	003fc606 	br	183ec2c <__ram_exceptions_end+0xff82e93c>
 183ed14:	00bfffc4 	movi	r2,-1
 183ed18:	003fd006 	br	183ec5c <__ram_exceptions_end+0xff82e96c>

0183ed1c <__call_exitprocs>:
 183ed1c:	defff504 	addi	sp,sp,-44
 183ed20:	df000915 	stw	fp,36(sp)
 183ed24:	dd400615 	stw	r21,24(sp)
 183ed28:	dc800315 	stw	r18,12(sp)
 183ed2c:	dfc00a15 	stw	ra,40(sp)
 183ed30:	ddc00815 	stw	r23,32(sp)
 183ed34:	dd800715 	stw	r22,28(sp)
 183ed38:	dd000515 	stw	r20,20(sp)
 183ed3c:	dcc00415 	stw	r19,16(sp)
 183ed40:	dc400215 	stw	r17,8(sp)
 183ed44:	dc000115 	stw	r16,4(sp)
 183ed48:	d9000015 	stw	r4,0(sp)
 183ed4c:	2839883a 	mov	fp,r5
 183ed50:	04800044 	movi	r18,1
 183ed54:	057fffc4 	movi	r21,-1
 183ed58:	00806134 	movhi	r2,388
 183ed5c:	10946804 	addi	r2,r2,20896
 183ed60:	12000017 	ldw	r8,0(r2)
 183ed64:	45005217 	ldw	r20,328(r8)
 183ed68:	44c05204 	addi	r19,r8,328
 183ed6c:	a0001c26 	beq	r20,zero,183ede0 <__call_exitprocs+0xc4>
 183ed70:	a0800117 	ldw	r2,4(r20)
 183ed74:	15ffffc4 	addi	r23,r2,-1
 183ed78:	b8000d16 	blt	r23,zero,183edb0 <__call_exitprocs+0x94>
 183ed7c:	14000044 	addi	r16,r2,1
 183ed80:	8421883a 	add	r16,r16,r16
 183ed84:	8421883a 	add	r16,r16,r16
 183ed88:	84402004 	addi	r17,r16,128
 183ed8c:	a463883a 	add	r17,r20,r17
 183ed90:	a421883a 	add	r16,r20,r16
 183ed94:	e0001e26 	beq	fp,zero,183ee10 <__call_exitprocs+0xf4>
 183ed98:	80804017 	ldw	r2,256(r16)
 183ed9c:	e0801c26 	beq	fp,r2,183ee10 <__call_exitprocs+0xf4>
 183eda0:	bdffffc4 	addi	r23,r23,-1
 183eda4:	843fff04 	addi	r16,r16,-4
 183eda8:	8c7fff04 	addi	r17,r17,-4
 183edac:	bd7ff91e 	bne	r23,r21,183ed94 <__ram_exceptions_end+0xff82eaa4>
 183edb0:	00806134 	movhi	r2,388
 183edb4:	10b14504 	addi	r2,r2,-15084
 183edb8:	10000926 	beq	r2,zero,183ede0 <__call_exitprocs+0xc4>
 183edbc:	a0800117 	ldw	r2,4(r20)
 183edc0:	1000301e 	bne	r2,zero,183ee84 <__call_exitprocs+0x168>
 183edc4:	a0800017 	ldw	r2,0(r20)
 183edc8:	10003226 	beq	r2,zero,183ee94 <__call_exitprocs+0x178>
 183edcc:	a009883a 	mov	r4,r20
 183edd0:	98800015 	stw	r2,0(r19)
 183edd4:	183c5140 	call	183c514 <free>
 183edd8:	9d000017 	ldw	r20,0(r19)
 183eddc:	a03fe41e 	bne	r20,zero,183ed70 <__ram_exceptions_end+0xff82ea80>
 183ede0:	dfc00a17 	ldw	ra,40(sp)
 183ede4:	df000917 	ldw	fp,36(sp)
 183ede8:	ddc00817 	ldw	r23,32(sp)
 183edec:	dd800717 	ldw	r22,28(sp)
 183edf0:	dd400617 	ldw	r21,24(sp)
 183edf4:	dd000517 	ldw	r20,20(sp)
 183edf8:	dcc00417 	ldw	r19,16(sp)
 183edfc:	dc800317 	ldw	r18,12(sp)
 183ee00:	dc400217 	ldw	r17,8(sp)
 183ee04:	dc000117 	ldw	r16,4(sp)
 183ee08:	dec00b04 	addi	sp,sp,44
 183ee0c:	f800283a 	ret
 183ee10:	a0800117 	ldw	r2,4(r20)
 183ee14:	80c00017 	ldw	r3,0(r16)
 183ee18:	10bfffc4 	addi	r2,r2,-1
 183ee1c:	15c01426 	beq	r2,r23,183ee70 <__call_exitprocs+0x154>
 183ee20:	80000015 	stw	zero,0(r16)
 183ee24:	183fde26 	beq	r3,zero,183eda0 <__ram_exceptions_end+0xff82eab0>
 183ee28:	95c8983a 	sll	r4,r18,r23
 183ee2c:	a0806217 	ldw	r2,392(r20)
 183ee30:	a5800117 	ldw	r22,4(r20)
 183ee34:	2084703a 	and	r2,r4,r2
 183ee38:	10000b26 	beq	r2,zero,183ee68 <__call_exitprocs+0x14c>
 183ee3c:	a0806317 	ldw	r2,396(r20)
 183ee40:	2088703a 	and	r4,r4,r2
 183ee44:	20000c1e 	bne	r4,zero,183ee78 <__call_exitprocs+0x15c>
 183ee48:	89400017 	ldw	r5,0(r17)
 183ee4c:	d9000017 	ldw	r4,0(sp)
 183ee50:	183ee83a 	callr	r3
 183ee54:	a0800117 	ldw	r2,4(r20)
 183ee58:	15bfbf1e 	bne	r2,r22,183ed58 <__ram_exceptions_end+0xff82ea68>
 183ee5c:	98800017 	ldw	r2,0(r19)
 183ee60:	153fcf26 	beq	r2,r20,183eda0 <__ram_exceptions_end+0xff82eab0>
 183ee64:	003fbc06 	br	183ed58 <__ram_exceptions_end+0xff82ea68>
 183ee68:	183ee83a 	callr	r3
 183ee6c:	003ff906 	br	183ee54 <__ram_exceptions_end+0xff82eb64>
 183ee70:	a5c00115 	stw	r23,4(r20)
 183ee74:	003feb06 	br	183ee24 <__ram_exceptions_end+0xff82eb34>
 183ee78:	89000017 	ldw	r4,0(r17)
 183ee7c:	183ee83a 	callr	r3
 183ee80:	003ff406 	br	183ee54 <__ram_exceptions_end+0xff82eb64>
 183ee84:	a0800017 	ldw	r2,0(r20)
 183ee88:	a027883a 	mov	r19,r20
 183ee8c:	1029883a 	mov	r20,r2
 183ee90:	003fb606 	br	183ed6c <__ram_exceptions_end+0xff82ea7c>
 183ee94:	0005883a 	mov	r2,zero
 183ee98:	003ffb06 	br	183ee88 <__ram_exceptions_end+0xff82eb98>

0183ee9c <__ssprint_r>:
 183ee9c:	30800217 	ldw	r2,8(r6)
 183eea0:	defff604 	addi	sp,sp,-40
 183eea4:	dc800215 	stw	r18,8(sp)
 183eea8:	dfc00915 	stw	ra,36(sp)
 183eeac:	df000815 	stw	fp,32(sp)
 183eeb0:	ddc00715 	stw	r23,28(sp)
 183eeb4:	dd800615 	stw	r22,24(sp)
 183eeb8:	dd400515 	stw	r21,20(sp)
 183eebc:	dd000415 	stw	r20,16(sp)
 183eec0:	dcc00315 	stw	r19,12(sp)
 183eec4:	dc400115 	stw	r17,4(sp)
 183eec8:	dc000015 	stw	r16,0(sp)
 183eecc:	3025883a 	mov	r18,r6
 183eed0:	10005826 	beq	r2,zero,183f034 <__ssprint_r+0x198>
 183eed4:	2027883a 	mov	r19,r4
 183eed8:	35c00017 	ldw	r23,0(r6)
 183eedc:	29000017 	ldw	r4,0(r5)
 183eee0:	28800217 	ldw	r2,8(r5)
 183eee4:	2823883a 	mov	r17,r5
 183eee8:	0039883a 	mov	fp,zero
 183eeec:	0021883a 	mov	r16,zero
 183eef0:	80003926 	beq	r16,zero,183efd8 <__ssprint_r+0x13c>
 183eef4:	102b883a 	mov	r21,r2
 183eef8:	102d883a 	mov	r22,r2
 183eefc:	80803a36 	bltu	r16,r2,183efe8 <__ssprint_r+0x14c>
 183ef00:	88c0030b 	ldhu	r3,12(r17)
 183ef04:	1881200c 	andi	r2,r3,1152
 183ef08:	10002626 	beq	r2,zero,183efa4 <__ssprint_r+0x108>
 183ef0c:	88800517 	ldw	r2,20(r17)
 183ef10:	89400417 	ldw	r5,16(r17)
 183ef14:	81800044 	addi	r6,r16,1
 183ef18:	108f883a 	add	r7,r2,r2
 183ef1c:	3885883a 	add	r2,r7,r2
 183ef20:	100ed7fa 	srli	r7,r2,31
 183ef24:	216dc83a 	sub	r22,r4,r5
 183ef28:	3589883a 	add	r4,r6,r22
 183ef2c:	3885883a 	add	r2,r7,r2
 183ef30:	102bd07a 	srai	r21,r2,1
 183ef34:	a80d883a 	mov	r6,r21
 183ef38:	a900022e 	bgeu	r21,r4,183ef44 <__ssprint_r+0xa8>
 183ef3c:	202b883a 	mov	r21,r4
 183ef40:	200d883a 	mov	r6,r4
 183ef44:	18c1000c 	andi	r3,r3,1024
 183ef48:	18002a26 	beq	r3,zero,183eff4 <__ssprint_r+0x158>
 183ef4c:	300b883a 	mov	r5,r6
 183ef50:	9809883a 	mov	r4,r19
 183ef54:	18056a80 	call	18056a8 <_malloc_r>
 183ef58:	1029883a 	mov	r20,r2
 183ef5c:	10002c26 	beq	r2,zero,183f010 <__ssprint_r+0x174>
 183ef60:	89400417 	ldw	r5,16(r17)
 183ef64:	b00d883a 	mov	r6,r22
 183ef68:	1009883a 	mov	r4,r2
 183ef6c:	1805f980 	call	1805f98 <memcpy>
 183ef70:	8880030b 	ldhu	r2,12(r17)
 183ef74:	00fedfc4 	movi	r3,-1153
 183ef78:	10c4703a 	and	r2,r2,r3
 183ef7c:	10802014 	ori	r2,r2,128
 183ef80:	8880030d 	sth	r2,12(r17)
 183ef84:	a589883a 	add	r4,r20,r22
 183ef88:	adadc83a 	sub	r22,r21,r22
 183ef8c:	8d400515 	stw	r21,20(r17)
 183ef90:	8d800215 	stw	r22,8(r17)
 183ef94:	8d000415 	stw	r20,16(r17)
 183ef98:	89000015 	stw	r4,0(r17)
 183ef9c:	802b883a 	mov	r21,r16
 183efa0:	802d883a 	mov	r22,r16
 183efa4:	b00d883a 	mov	r6,r22
 183efa8:	e00b883a 	mov	r5,fp
 183efac:	18096140 	call	1809614 <memmove>
 183efb0:	88800217 	ldw	r2,8(r17)
 183efb4:	89000017 	ldw	r4,0(r17)
 183efb8:	90c00217 	ldw	r3,8(r18)
 183efbc:	1545c83a 	sub	r2,r2,r21
 183efc0:	2589883a 	add	r4,r4,r22
 183efc4:	88800215 	stw	r2,8(r17)
 183efc8:	89000015 	stw	r4,0(r17)
 183efcc:	1c21c83a 	sub	r16,r3,r16
 183efd0:	94000215 	stw	r16,8(r18)
 183efd4:	80001726 	beq	r16,zero,183f034 <__ssprint_r+0x198>
 183efd8:	bf000017 	ldw	fp,0(r23)
 183efdc:	bc000117 	ldw	r16,4(r23)
 183efe0:	bdc00204 	addi	r23,r23,8
 183efe4:	003fc206 	br	183eef0 <__ram_exceptions_end+0xff82ec00>
 183efe8:	802b883a 	mov	r21,r16
 183efec:	802d883a 	mov	r22,r16
 183eff0:	003fec06 	br	183efa4 <__ram_exceptions_end+0xff82ecb4>
 183eff4:	9809883a 	mov	r4,r19
 183eff8:	18097d00 	call	18097d0 <_realloc_r>
 183effc:	1029883a 	mov	r20,r2
 183f000:	103fe01e 	bne	r2,zero,183ef84 <__ram_exceptions_end+0xff82ec94>
 183f004:	89400417 	ldw	r5,16(r17)
 183f008:	9809883a 	mov	r4,r19
 183f00c:	1804f780 	call	1804f78 <_free_r>
 183f010:	88c0030b 	ldhu	r3,12(r17)
 183f014:	00800304 	movi	r2,12
 183f018:	98800015 	stw	r2,0(r19)
 183f01c:	18c01014 	ori	r3,r3,64
 183f020:	88c0030d 	sth	r3,12(r17)
 183f024:	00bfffc4 	movi	r2,-1
 183f028:	90000215 	stw	zero,8(r18)
 183f02c:	90000115 	stw	zero,4(r18)
 183f030:	00000206 	br	183f03c <__ssprint_r+0x1a0>
 183f034:	90000115 	stw	zero,4(r18)
 183f038:	0005883a 	mov	r2,zero
 183f03c:	dfc00917 	ldw	ra,36(sp)
 183f040:	df000817 	ldw	fp,32(sp)
 183f044:	ddc00717 	ldw	r23,28(sp)
 183f048:	dd800617 	ldw	r22,24(sp)
 183f04c:	dd400517 	ldw	r21,20(sp)
 183f050:	dd000417 	ldw	r20,16(sp)
 183f054:	dcc00317 	ldw	r19,12(sp)
 183f058:	dc800217 	ldw	r18,8(sp)
 183f05c:	dc400117 	ldw	r17,4(sp)
 183f060:	dc000017 	ldw	r16,0(sp)
 183f064:	dec00a04 	addi	sp,sp,40
 183f068:	f800283a 	ret

0183f06c <___svfiprintf_internal_r>:
 183f06c:	2880030b 	ldhu	r2,12(r5)
 183f070:	deffc804 	addi	sp,sp,-224
 183f074:	dcc03115 	stw	r19,196(sp)
 183f078:	dfc03715 	stw	ra,220(sp)
 183f07c:	df003615 	stw	fp,216(sp)
 183f080:	ddc03515 	stw	r23,212(sp)
 183f084:	dd803415 	stw	r22,208(sp)
 183f088:	dd403315 	stw	r21,204(sp)
 183f08c:	dd003215 	stw	r20,200(sp)
 183f090:	dc803015 	stw	r18,192(sp)
 183f094:	dc402f15 	stw	r17,188(sp)
 183f098:	dc002e15 	stw	r16,184(sp)
 183f09c:	d9402715 	stw	r5,156(sp)
 183f0a0:	d9002a15 	stw	r4,168(sp)
 183f0a4:	1080200c 	andi	r2,r2,128
 183f0a8:	d9c02315 	stw	r7,140(sp)
 183f0ac:	3027883a 	mov	r19,r6
 183f0b0:	10000226 	beq	r2,zero,183f0bc <___svfiprintf_internal_r+0x50>
 183f0b4:	28800417 	ldw	r2,16(r5)
 183f0b8:	10041d26 	beq	r2,zero,1840130 <___svfiprintf_internal_r+0x10c4>
 183f0bc:	dac01a04 	addi	r11,sp,104
 183f0c0:	dac01e15 	stw	r11,120(sp)
 183f0c4:	d8801e17 	ldw	r2,120(sp)
 183f0c8:	dac019c4 	addi	r11,sp,103
 183f0cc:	dd402a17 	ldw	r21,168(sp)
 183f0d0:	ddc02717 	ldw	r23,156(sp)
 183f0d4:	05806134 	movhi	r22,388
 183f0d8:	05006134 	movhi	r20,388
 183f0dc:	dac01f15 	stw	r11,124(sp)
 183f0e0:	12d7c83a 	sub	r11,r2,r11
 183f0e4:	b58cdc04 	addi	r22,r22,13168
 183f0e8:	a50cd804 	addi	r20,r20,13152
 183f0ec:	dec01a15 	stw	sp,104(sp)
 183f0f0:	d8001c15 	stw	zero,112(sp)
 183f0f4:	d8001b15 	stw	zero,108(sp)
 183f0f8:	d811883a 	mov	r8,sp
 183f0fc:	d8002915 	stw	zero,164(sp)
 183f100:	d8002515 	stw	zero,148(sp)
 183f104:	dac02b15 	stw	r11,172(sp)
 183f108:	98800007 	ldb	r2,0(r19)
 183f10c:	1002dd26 	beq	r2,zero,183fc84 <___svfiprintf_internal_r+0xc18>
 183f110:	00c00944 	movi	r3,37
 183f114:	9823883a 	mov	r17,r19
 183f118:	10c0021e 	bne	r2,r3,183f124 <___svfiprintf_internal_r+0xb8>
 183f11c:	00001406 	br	183f170 <___svfiprintf_internal_r+0x104>
 183f120:	10c00326 	beq	r2,r3,183f130 <___svfiprintf_internal_r+0xc4>
 183f124:	8c400044 	addi	r17,r17,1
 183f128:	88800007 	ldb	r2,0(r17)
 183f12c:	103ffc1e 	bne	r2,zero,183f120 <__ram_exceptions_end+0xff82ee30>
 183f130:	8ce1c83a 	sub	r16,r17,r19
 183f134:	80000e26 	beq	r16,zero,183f170 <___svfiprintf_internal_r+0x104>
 183f138:	d8c01c17 	ldw	r3,112(sp)
 183f13c:	d8801b17 	ldw	r2,108(sp)
 183f140:	44c00015 	stw	r19,0(r8)
 183f144:	1c07883a 	add	r3,r3,r16
 183f148:	10800044 	addi	r2,r2,1
 183f14c:	d8c01c15 	stw	r3,112(sp)
 183f150:	44000115 	stw	r16,4(r8)
 183f154:	d8801b15 	stw	r2,108(sp)
 183f158:	00c001c4 	movi	r3,7
 183f15c:	18831e16 	blt	r3,r2,183fdd8 <___svfiprintf_internal_r+0xd6c>
 183f160:	42000204 	addi	r8,r8,8
 183f164:	dac02517 	ldw	r11,148(sp)
 183f168:	5c17883a 	add	r11,r11,r16
 183f16c:	dac02515 	stw	r11,148(sp)
 183f170:	88800007 	ldb	r2,0(r17)
 183f174:	1002c526 	beq	r2,zero,183fc8c <___svfiprintf_internal_r+0xc20>
 183f178:	88c00047 	ldb	r3,1(r17)
 183f17c:	8cc00044 	addi	r19,r17,1
 183f180:	d8001d85 	stb	zero,118(sp)
 183f184:	0009883a 	mov	r4,zero
 183f188:	000f883a 	mov	r7,zero
 183f18c:	043fffc4 	movi	r16,-1
 183f190:	d8002415 	stw	zero,144(sp)
 183f194:	0025883a 	mov	r18,zero
 183f198:	01401604 	movi	r5,88
 183f19c:	01800244 	movi	r6,9
 183f1a0:	02800a84 	movi	r10,42
 183f1a4:	02401b04 	movi	r9,108
 183f1a8:	9cc00044 	addi	r19,r19,1
 183f1ac:	18bff804 	addi	r2,r3,-32
 183f1b0:	2881dd36 	bltu	r5,r2,183f928 <___svfiprintf_internal_r+0x8bc>
 183f1b4:	100490ba 	slli	r2,r2,2
 183f1b8:	02c06134 	movhi	r11,388
 183f1bc:	5afc7304 	addi	r11,r11,-3636
 183f1c0:	12c5883a 	add	r2,r2,r11
 183f1c4:	10800017 	ldw	r2,0(r2)
 183f1c8:	1000683a 	jmp	r2
 183f1cc:	0183f3c8 	cmpgei	r6,zero,4047
 183f1d0:	0183f928 	cmpgeui	r6,zero,4068
 183f1d4:	0183f928 	cmpgeui	r6,zero,4068
 183f1d8:	0183f3bc 	xorhi	r6,zero,4046
 183f1dc:	0183f928 	cmpgeui	r6,zero,4068
 183f1e0:	0183f928 	cmpgeui	r6,zero,4068
 183f1e4:	0183f928 	cmpgeui	r6,zero,4068
 183f1e8:	0183f928 	cmpgeui	r6,zero,4068
 183f1ec:	0183f928 	cmpgeui	r6,zero,4068
 183f1f0:	0183f928 	cmpgeui	r6,zero,4068
 183f1f4:	0183f330 	cmpltui	r6,zero,4044
 183f1f8:	0183f50c 	andi	r6,zero,4052
 183f1fc:	0183f928 	cmpgeui	r6,zero,4068
 183f200:	0183f35c 	xori	r6,zero,4045
 183f204:	0183f95c 	xori	r6,zero,4069
 183f208:	0183f928 	cmpgeui	r6,zero,4068
 183f20c:	0183f950 	cmplti	r6,zero,4069
 183f210:	0183f8f0 	cmpltui	r6,zero,4067
 183f214:	0183f8f0 	cmpltui	r6,zero,4067
 183f218:	0183f8f0 	cmpltui	r6,zero,4067
 183f21c:	0183f8f0 	cmpltui	r6,zero,4067
 183f220:	0183f8f0 	cmpltui	r6,zero,4067
 183f224:	0183f8f0 	cmpltui	r6,zero,4067
 183f228:	0183f8f0 	cmpltui	r6,zero,4067
 183f22c:	0183f8f0 	cmpltui	r6,zero,4067
 183f230:	0183f8f0 	cmpltui	r6,zero,4067
 183f234:	0183f928 	cmpgeui	r6,zero,4068
 183f238:	0183f928 	cmpgeui	r6,zero,4068
 183f23c:	0183f928 	cmpgeui	r6,zero,4068
 183f240:	0183f928 	cmpgeui	r6,zero,4068
 183f244:	0183f928 	cmpgeui	r6,zero,4068
 183f248:	0183f928 	cmpgeui	r6,zero,4068
 183f24c:	0183f928 	cmpgeui	r6,zero,4068
 183f250:	0183f928 	cmpgeui	r6,zero,4068
 183f254:	0183f928 	cmpgeui	r6,zero,4068
 183f258:	0183f928 	cmpgeui	r6,zero,4068
 183f25c:	0183f88c 	andi	r6,zero,4066
 183f260:	0183f928 	cmpgeui	r6,zero,4068
 183f264:	0183f928 	cmpgeui	r6,zero,4068
 183f268:	0183f928 	cmpgeui	r6,zero,4068
 183f26c:	0183f928 	cmpgeui	r6,zero,4068
 183f270:	0183f928 	cmpgeui	r6,zero,4068
 183f274:	0183f928 	cmpgeui	r6,zero,4068
 183f278:	0183f928 	cmpgeui	r6,zero,4068
 183f27c:	0183f928 	cmpgeui	r6,zero,4068
 183f280:	0183f928 	cmpgeui	r6,zero,4068
 183f284:	0183f928 	cmpgeui	r6,zero,4068
 183f288:	0183fa04 	movi	r6,4072
 183f28c:	0183f928 	cmpgeui	r6,zero,4068
 183f290:	0183f928 	cmpgeui	r6,zero,4068
 183f294:	0183f928 	cmpgeui	r6,zero,4068
 183f298:	0183f928 	cmpgeui	r6,zero,4068
 183f29c:	0183f928 	cmpgeui	r6,zero,4068
 183f2a0:	0183f99c 	xori	r6,zero,4070
 183f2a4:	0183f928 	cmpgeui	r6,zero,4068
 183f2a8:	0183f928 	cmpgeui	r6,zero,4068
 183f2ac:	0183f6d0 	cmplti	r6,zero,4059
 183f2b0:	0183f928 	cmpgeui	r6,zero,4068
 183f2b4:	0183f928 	cmpgeui	r6,zero,4068
 183f2b8:	0183f928 	cmpgeui	r6,zero,4068
 183f2bc:	0183f928 	cmpgeui	r6,zero,4068
 183f2c0:	0183f928 	cmpgeui	r6,zero,4068
 183f2c4:	0183f928 	cmpgeui	r6,zero,4068
 183f2c8:	0183f928 	cmpgeui	r6,zero,4068
 183f2cc:	0183f928 	cmpgeui	r6,zero,4068
 183f2d0:	0183f928 	cmpgeui	r6,zero,4068
 183f2d4:	0183f928 	cmpgeui	r6,zero,4068
 183f2d8:	0183f5c0 	call	183f5c <__alt_mem_tse_descriptor_memory_0+0x183f5c>
 183f2dc:	0183f76c 	andhi	r6,zero,4061
 183f2e0:	0183f928 	cmpgeui	r6,zero,4068
 183f2e4:	0183f928 	cmpgeui	r6,zero,4068
 183f2e8:	0183f928 	cmpgeui	r6,zero,4068
 183f2ec:	0183f760 	cmpeqi	r6,zero,4061
 183f2f0:	0183f76c 	andhi	r6,zero,4061
 183f2f4:	0183f928 	cmpgeui	r6,zero,4068
 183f2f8:	0183f928 	cmpgeui	r6,zero,4068
 183f2fc:	0183f750 	cmplti	r6,zero,4061
 183f300:	0183f928 	cmpgeui	r6,zero,4068
 183f304:	0183f714 	movui	r6,4060
 183f308:	0183f51c 	xori	r6,zero,4052
 183f30c:	0183f368 	cmpgeui	r6,zero,4045
 183f310:	0183f880 	call	183f88 <__alt_mem_tse_descriptor_memory_0+0x183f88>
 183f314:	0183f928 	cmpgeui	r6,zero,4068
 183f318:	0183f834 	movhi	r6,4064
 183f31c:	0183f928 	cmpgeui	r6,zero,4068
 183f320:	0183f48c 	andi	r6,zero,4050
 183f324:	0183f928 	cmpgeui	r6,zero,4068
 183f328:	0183f928 	cmpgeui	r6,zero,4068
 183f32c:	0183f3e8 	cmpgeui	r6,zero,4047
 183f330:	dac02317 	ldw	r11,140(sp)
 183f334:	5ac00017 	ldw	r11,0(r11)
 183f338:	dac02415 	stw	r11,144(sp)
 183f33c:	dac02317 	ldw	r11,140(sp)
 183f340:	58800104 	addi	r2,r11,4
 183f344:	dac02417 	ldw	r11,144(sp)
 183f348:	5802e90e 	bge	r11,zero,183fef0 <___svfiprintf_internal_r+0xe84>
 183f34c:	dac02417 	ldw	r11,144(sp)
 183f350:	d8802315 	stw	r2,140(sp)
 183f354:	02d7c83a 	sub	r11,zero,r11
 183f358:	dac02415 	stw	r11,144(sp)
 183f35c:	94800114 	ori	r18,r18,4
 183f360:	98c00007 	ldb	r3,0(r19)
 183f364:	003f9006 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183f368:	00800c04 	movi	r2,48
 183f36c:	dac02317 	ldw	r11,140(sp)
 183f370:	d8801d05 	stb	r2,116(sp)
 183f374:	00801e04 	movi	r2,120
 183f378:	d8801d45 	stb	r2,117(sp)
 183f37c:	d8001d85 	stb	zero,118(sp)
 183f380:	58c00104 	addi	r3,r11,4
 183f384:	5f000017 	ldw	fp,0(r11)
 183f388:	0013883a 	mov	r9,zero
 183f38c:	90800094 	ori	r2,r18,2
 183f390:	80032b16 	blt	r16,zero,1840040 <___svfiprintf_internal_r+0xfd4>
 183f394:	00bfdfc4 	movi	r2,-129
 183f398:	90a4703a 	and	r18,r18,r2
 183f39c:	d8c02315 	stw	r3,140(sp)
 183f3a0:	94800094 	ori	r18,r18,2
 183f3a4:	e002dc26 	beq	fp,zero,183ff18 <___svfiprintf_internal_r+0xeac>
 183f3a8:	01006134 	movhi	r4,388
 183f3ac:	21021a04 	addi	r4,r4,2152
 183f3b0:	0015883a 	mov	r10,zero
 183f3b4:	d9002915 	stw	r4,164(sp)
 183f3b8:	00002306 	br	183f448 <___svfiprintf_internal_r+0x3dc>
 183f3bc:	94800054 	ori	r18,r18,1
 183f3c0:	98c00007 	ldb	r3,0(r19)
 183f3c4:	003f7806 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183f3c8:	38803fcc 	andi	r2,r7,255
 183f3cc:	1080201c 	xori	r2,r2,128
 183f3d0:	10bfe004 	addi	r2,r2,-128
 183f3d4:	1002f31e 	bne	r2,zero,183ffa4 <___svfiprintf_internal_r+0xf38>
 183f3d8:	01000044 	movi	r4,1
 183f3dc:	01c00804 	movi	r7,32
 183f3e0:	98c00007 	ldb	r3,0(r19)
 183f3e4:	003f7006 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183f3e8:	21003fcc 	andi	r4,r4,255
 183f3ec:	2003aa1e 	bne	r4,zero,1840298 <___svfiprintf_internal_r+0x122c>
 183f3f0:	00806134 	movhi	r2,388
 183f3f4:	10821a04 	addi	r2,r2,2152
 183f3f8:	d8802915 	stw	r2,164(sp)
 183f3fc:	9080080c 	andi	r2,r18,32
 183f400:	1000ba26 	beq	r2,zero,183f6ec <___svfiprintf_internal_r+0x680>
 183f404:	dac02317 	ldw	r11,140(sp)
 183f408:	5f000017 	ldw	fp,0(r11)
 183f40c:	5a400117 	ldw	r9,4(r11)
 183f410:	5ac00204 	addi	r11,r11,8
 183f414:	dac02315 	stw	r11,140(sp)
 183f418:	9080004c 	andi	r2,r18,1
 183f41c:	10029026 	beq	r2,zero,183fe60 <___svfiprintf_internal_r+0xdf4>
 183f420:	e244b03a 	or	r2,fp,r9
 183f424:	1002d41e 	bne	r2,zero,183ff78 <___svfiprintf_internal_r+0xf0c>
 183f428:	d8001d85 	stb	zero,118(sp)
 183f42c:	80030b16 	blt	r16,zero,184005c <___svfiprintf_internal_r+0xff0>
 183f430:	00bfdfc4 	movi	r2,-129
 183f434:	90a4703a 	and	r18,r18,r2
 183f438:	0015883a 	mov	r10,zero
 183f43c:	80002426 	beq	r16,zero,183f4d0 <___svfiprintf_internal_r+0x464>
 183f440:	0039883a 	mov	fp,zero
 183f444:	0013883a 	mov	r9,zero
 183f448:	d9002917 	ldw	r4,164(sp)
 183f44c:	dc401a04 	addi	r17,sp,104
 183f450:	e08003cc 	andi	r2,fp,15
 183f454:	4806973a 	slli	r3,r9,28
 183f458:	2085883a 	add	r2,r4,r2
 183f45c:	e038d13a 	srli	fp,fp,4
 183f460:	10800003 	ldbu	r2,0(r2)
 183f464:	4812d13a 	srli	r9,r9,4
 183f468:	8c7fffc4 	addi	r17,r17,-1
 183f46c:	1f38b03a 	or	fp,r3,fp
 183f470:	88800005 	stb	r2,0(r17)
 183f474:	e244b03a 	or	r2,fp,r9
 183f478:	103ff51e 	bne	r2,zero,183f450 <__ram_exceptions_end+0xff82f160>
 183f47c:	dac01e17 	ldw	r11,120(sp)
 183f480:	5c57c83a 	sub	r11,r11,r17
 183f484:	dac02115 	stw	r11,132(sp)
 183f488:	00001406 	br	183f4dc <___svfiprintf_internal_r+0x470>
 183f48c:	21003fcc 	andi	r4,r4,255
 183f490:	2003741e 	bne	r4,zero,1840264 <___svfiprintf_internal_r+0x11f8>
 183f494:	9080080c 	andi	r2,r18,32
 183f498:	10014526 	beq	r2,zero,183f9b0 <___svfiprintf_internal_r+0x944>
 183f49c:	dac02317 	ldw	r11,140(sp)
 183f4a0:	d8001d85 	stb	zero,118(sp)
 183f4a4:	58c00204 	addi	r3,r11,8
 183f4a8:	5f000017 	ldw	fp,0(r11)
 183f4ac:	5a400117 	ldw	r9,4(r11)
 183f4b0:	8002d916 	blt	r16,zero,1840018 <___svfiprintf_internal_r+0xfac>
 183f4b4:	013fdfc4 	movi	r4,-129
 183f4b8:	e244b03a 	or	r2,fp,r9
 183f4bc:	d8c02315 	stw	r3,140(sp)
 183f4c0:	9124703a 	and	r18,r18,r4
 183f4c4:	0015883a 	mov	r10,zero
 183f4c8:	1000b91e 	bne	r2,zero,183f7b0 <___svfiprintf_internal_r+0x744>
 183f4cc:	8002e61e 	bne	r16,zero,1840068 <___svfiprintf_internal_r+0xffc>
 183f4d0:	0021883a 	mov	r16,zero
 183f4d4:	d8002115 	stw	zero,132(sp)
 183f4d8:	dc401a04 	addi	r17,sp,104
 183f4dc:	d8c02117 	ldw	r3,132(sp)
 183f4e0:	dc002015 	stw	r16,128(sp)
 183f4e4:	80c0010e 	bge	r16,r3,183f4ec <___svfiprintf_internal_r+0x480>
 183f4e8:	d8c02015 	stw	r3,128(sp)
 183f4ec:	52803fcc 	andi	r10,r10,255
 183f4f0:	5280201c 	xori	r10,r10,128
 183f4f4:	52bfe004 	addi	r10,r10,-128
 183f4f8:	50003c26 	beq	r10,zero,183f5ec <___svfiprintf_internal_r+0x580>
 183f4fc:	dac02017 	ldw	r11,128(sp)
 183f500:	5ac00044 	addi	r11,r11,1
 183f504:	dac02015 	stw	r11,128(sp)
 183f508:	00003806 	br	183f5ec <___svfiprintf_internal_r+0x580>
 183f50c:	01000044 	movi	r4,1
 183f510:	01c00ac4 	movi	r7,43
 183f514:	98c00007 	ldb	r3,0(r19)
 183f518:	003f2306 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183f51c:	21003fcc 	andi	r4,r4,255
 183f520:	2003481e 	bne	r4,zero,1840244 <___svfiprintf_internal_r+0x11d8>
 183f524:	9080080c 	andi	r2,r18,32
 183f528:	10013b26 	beq	r2,zero,183fa18 <___svfiprintf_internal_r+0x9ac>
 183f52c:	dac02317 	ldw	r11,140(sp)
 183f530:	d8001d85 	stb	zero,118(sp)
 183f534:	58800204 	addi	r2,r11,8
 183f538:	5f000017 	ldw	fp,0(r11)
 183f53c:	5a400117 	ldw	r9,4(r11)
 183f540:	8002a816 	blt	r16,zero,183ffe4 <___svfiprintf_internal_r+0xf78>
 183f544:	013fdfc4 	movi	r4,-129
 183f548:	e246b03a 	or	r3,fp,r9
 183f54c:	d8802315 	stw	r2,140(sp)
 183f550:	9124703a 	and	r18,r18,r4
 183f554:	18013c26 	beq	r3,zero,183fa48 <___svfiprintf_internal_r+0x9dc>
 183f558:	0015883a 	mov	r10,zero
 183f55c:	dc401a04 	addi	r17,sp,104
 183f560:	e006d0fa 	srli	r3,fp,3
 183f564:	4808977a 	slli	r4,r9,29
 183f568:	4812d0fa 	srli	r9,r9,3
 183f56c:	e70001cc 	andi	fp,fp,7
 183f570:	e0800c04 	addi	r2,fp,48
 183f574:	8c7fffc4 	addi	r17,r17,-1
 183f578:	20f8b03a 	or	fp,r4,r3
 183f57c:	88800005 	stb	r2,0(r17)
 183f580:	e246b03a 	or	r3,fp,r9
 183f584:	183ff61e 	bne	r3,zero,183f560 <__ram_exceptions_end+0xff82f270>
 183f588:	90c0004c 	andi	r3,r18,1
 183f58c:	1800a526 	beq	r3,zero,183f824 <___svfiprintf_internal_r+0x7b8>
 183f590:	10803fcc 	andi	r2,r2,255
 183f594:	1080201c 	xori	r2,r2,128
 183f598:	10bfe004 	addi	r2,r2,-128
 183f59c:	00c00c04 	movi	r3,48
 183f5a0:	10ffb626 	beq	r2,r3,183f47c <__ram_exceptions_end+0xff82f18c>
 183f5a4:	88ffffc5 	stb	r3,-1(r17)
 183f5a8:	d8c01e17 	ldw	r3,120(sp)
 183f5ac:	88bfffc4 	addi	r2,r17,-1
 183f5b0:	1023883a 	mov	r17,r2
 183f5b4:	1887c83a 	sub	r3,r3,r2
 183f5b8:	d8c02115 	stw	r3,132(sp)
 183f5bc:	003fc706 	br	183f4dc <__ram_exceptions_end+0xff82f1ec>
 183f5c0:	dac02317 	ldw	r11,140(sp)
 183f5c4:	00c00044 	movi	r3,1
 183f5c8:	d8c02015 	stw	r3,128(sp)
 183f5cc:	58800017 	ldw	r2,0(r11)
 183f5d0:	5ac00104 	addi	r11,r11,4
 183f5d4:	d8001d85 	stb	zero,118(sp)
 183f5d8:	d8801005 	stb	r2,64(sp)
 183f5dc:	dac02315 	stw	r11,140(sp)
 183f5e0:	d8c02115 	stw	r3,132(sp)
 183f5e4:	dc401004 	addi	r17,sp,64
 183f5e8:	0021883a 	mov	r16,zero
 183f5ec:	90c0008c 	andi	r3,r18,2
 183f5f0:	d8c02215 	stw	r3,136(sp)
 183f5f4:	18000326 	beq	r3,zero,183f604 <___svfiprintf_internal_r+0x598>
 183f5f8:	dac02017 	ldw	r11,128(sp)
 183f5fc:	5ac00084 	addi	r11,r11,2
 183f600:	dac02015 	stw	r11,128(sp)
 183f604:	90c0210c 	andi	r3,r18,132
 183f608:	d8c02615 	stw	r3,152(sp)
 183f60c:	1801131e 	bne	r3,zero,183fa5c <___svfiprintf_internal_r+0x9f0>
 183f610:	dac02417 	ldw	r11,144(sp)
 183f614:	d8c02017 	ldw	r3,128(sp)
 183f618:	58f9c83a 	sub	fp,r11,r3
 183f61c:	07010f0e 	bge	zero,fp,183fa5c <___svfiprintf_internal_r+0x9f0>
 183f620:	02400404 	movi	r9,16
 183f624:	d8c01c17 	ldw	r3,112(sp)
 183f628:	d8801b17 	ldw	r2,108(sp)
 183f62c:	4f02d60e 	bge	r9,fp,1840188 <___svfiprintf_internal_r+0x111c>
 183f630:	01406134 	movhi	r5,388
 183f634:	294cdc04 	addi	r5,r5,13168
 183f638:	d9402815 	stw	r5,160(sp)
 183f63c:	028001c4 	movi	r10,7
 183f640:	00000306 	br	183f650 <___svfiprintf_internal_r+0x5e4>
 183f644:	e73ffc04 	addi	fp,fp,-16
 183f648:	42000204 	addi	r8,r8,8
 183f64c:	4f00150e 	bge	r9,fp,183f6a4 <___svfiprintf_internal_r+0x638>
 183f650:	18c00404 	addi	r3,r3,16
 183f654:	10800044 	addi	r2,r2,1
 183f658:	45800015 	stw	r22,0(r8)
 183f65c:	42400115 	stw	r9,4(r8)
 183f660:	d8c01c15 	stw	r3,112(sp)
 183f664:	d8801b15 	stw	r2,108(sp)
 183f668:	50bff60e 	bge	r10,r2,183f644 <__ram_exceptions_end+0xff82f354>
 183f66c:	d9801a04 	addi	r6,sp,104
 183f670:	b80b883a 	mov	r5,r23
 183f674:	a809883a 	mov	r4,r21
 183f678:	da402c15 	stw	r9,176(sp)
 183f67c:	da802d15 	stw	r10,180(sp)
 183f680:	183ee9c0 	call	183ee9c <__ssprint_r>
 183f684:	da402c17 	ldw	r9,176(sp)
 183f688:	da802d17 	ldw	r10,180(sp)
 183f68c:	1001851e 	bne	r2,zero,183fca4 <___svfiprintf_internal_r+0xc38>
 183f690:	e73ffc04 	addi	fp,fp,-16
 183f694:	d8c01c17 	ldw	r3,112(sp)
 183f698:	d8801b17 	ldw	r2,108(sp)
 183f69c:	d811883a 	mov	r8,sp
 183f6a0:	4f3feb16 	blt	r9,fp,183f650 <__ram_exceptions_end+0xff82f360>
 183f6a4:	dac02817 	ldw	r11,160(sp)
 183f6a8:	e0c7883a 	add	r3,fp,r3
 183f6ac:	10800044 	addi	r2,r2,1
 183f6b0:	42c00015 	stw	r11,0(r8)
 183f6b4:	47000115 	stw	fp,4(r8)
 183f6b8:	d8c01c15 	stw	r3,112(sp)
 183f6bc:	d8801b15 	stw	r2,108(sp)
 183f6c0:	010001c4 	movi	r4,7
 183f6c4:	2081ee16 	blt	r4,r2,183fe80 <___svfiprintf_internal_r+0xe14>
 183f6c8:	42000204 	addi	r8,r8,8
 183f6cc:	0000e506 	br	183fa64 <___svfiprintf_internal_r+0x9f8>
 183f6d0:	21003fcc 	andi	r4,r4,255
 183f6d4:	2002dd1e 	bne	r4,zero,184024c <___svfiprintf_internal_r+0x11e0>
 183f6d8:	00806134 	movhi	r2,388
 183f6dc:	10821504 	addi	r2,r2,2132
 183f6e0:	d8802915 	stw	r2,164(sp)
 183f6e4:	9080080c 	andi	r2,r18,32
 183f6e8:	103f461e 	bne	r2,zero,183f404 <__ram_exceptions_end+0xff82f114>
 183f6ec:	9080040c 	andi	r2,r18,16
 183f6f0:	10022e1e 	bne	r2,zero,183ffac <___svfiprintf_internal_r+0xf40>
 183f6f4:	9080100c 	andi	r2,r18,64
 183f6f8:	dac02317 	ldw	r11,140(sp)
 183f6fc:	10027326 	beq	r2,zero,18400cc <___svfiprintf_internal_r+0x1060>
 183f700:	5f00000b 	ldhu	fp,0(r11)
 183f704:	5ac00104 	addi	r11,r11,4
 183f708:	0013883a 	mov	r9,zero
 183f70c:	dac02315 	stw	r11,140(sp)
 183f710:	003f4106 	br	183f418 <__ram_exceptions_end+0xff82f128>
 183f714:	21003fcc 	andi	r4,r4,255
 183f718:	2002e11e 	bne	r4,zero,18402a0 <___svfiprintf_internal_r+0x1234>
 183f71c:	9080080c 	andi	r2,r18,32
 183f720:	1002011e 	bne	r2,zero,183ff28 <___svfiprintf_internal_r+0xebc>
 183f724:	9080040c 	andi	r2,r18,16
 183f728:	10023e1e 	bne	r2,zero,1840024 <___svfiprintf_internal_r+0xfb8>
 183f72c:	9480100c 	andi	r18,r18,64
 183f730:	90023c26 	beq	r18,zero,1840024 <___svfiprintf_internal_r+0xfb8>
 183f734:	dac02317 	ldw	r11,140(sp)
 183f738:	58800017 	ldw	r2,0(r11)
 183f73c:	5ac00104 	addi	r11,r11,4
 183f740:	dac02315 	stw	r11,140(sp)
 183f744:	dac02517 	ldw	r11,148(sp)
 183f748:	12c0000d 	sth	r11,0(r2)
 183f74c:	003e6e06 	br	183f108 <__ram_exceptions_end+0xff82ee18>
 183f750:	98c00007 	ldb	r3,0(r19)
 183f754:	1a422926 	beq	r3,r9,183fffc <___svfiprintf_internal_r+0xf90>
 183f758:	94800414 	ori	r18,r18,16
 183f75c:	003e9206 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183f760:	94801014 	ori	r18,r18,64
 183f764:	98c00007 	ldb	r3,0(r19)
 183f768:	003e8f06 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183f76c:	21003fcc 	andi	r4,r4,255
 183f770:	2002c71e 	bne	r4,zero,1840290 <___svfiprintf_internal_r+0x1224>
 183f774:	9080080c 	andi	r2,r18,32
 183f778:	10004926 	beq	r2,zero,183f8a0 <___svfiprintf_internal_r+0x834>
 183f77c:	dac02317 	ldw	r11,140(sp)
 183f780:	58800117 	ldw	r2,4(r11)
 183f784:	5f000017 	ldw	fp,0(r11)
 183f788:	5ac00204 	addi	r11,r11,8
 183f78c:	dac02315 	stw	r11,140(sp)
 183f790:	1013883a 	mov	r9,r2
 183f794:	10004b16 	blt	r2,zero,183f8c4 <___svfiprintf_internal_r+0x858>
 183f798:	da801d83 	ldbu	r10,118(sp)
 183f79c:	8001cb16 	blt	r16,zero,183fecc <___svfiprintf_internal_r+0xe60>
 183f7a0:	00ffdfc4 	movi	r3,-129
 183f7a4:	e244b03a 	or	r2,fp,r9
 183f7a8:	90e4703a 	and	r18,r18,r3
 183f7ac:	103f4726 	beq	r2,zero,183f4cc <__ram_exceptions_end+0xff82f1dc>
 183f7b0:	48008c26 	beq	r9,zero,183f9e4 <___svfiprintf_internal_r+0x978>
 183f7b4:	dc802015 	stw	r18,128(sp)
 183f7b8:	dc002115 	stw	r16,132(sp)
 183f7bc:	dc401a04 	addi	r17,sp,104
 183f7c0:	e021883a 	mov	r16,fp
 183f7c4:	da002215 	stw	r8,136(sp)
 183f7c8:	5039883a 	mov	fp,r10
 183f7cc:	4825883a 	mov	r18,r9
 183f7d0:	8009883a 	mov	r4,r16
 183f7d4:	900b883a 	mov	r5,r18
 183f7d8:	01800284 	movi	r6,10
 183f7dc:	000f883a 	mov	r7,zero
 183f7e0:	180a5ec0 	call	180a5ec <__umoddi3>
 183f7e4:	10800c04 	addi	r2,r2,48
 183f7e8:	8c7fffc4 	addi	r17,r17,-1
 183f7ec:	8009883a 	mov	r4,r16
 183f7f0:	900b883a 	mov	r5,r18
 183f7f4:	88800005 	stb	r2,0(r17)
 183f7f8:	01800284 	movi	r6,10
 183f7fc:	000f883a 	mov	r7,zero
 183f800:	180a0740 	call	180a074 <__udivdi3>
 183f804:	1021883a 	mov	r16,r2
 183f808:	10c4b03a 	or	r2,r2,r3
 183f80c:	1825883a 	mov	r18,r3
 183f810:	103fef1e 	bne	r2,zero,183f7d0 <__ram_exceptions_end+0xff82f4e0>
 183f814:	dc802017 	ldw	r18,128(sp)
 183f818:	dc002117 	ldw	r16,132(sp)
 183f81c:	da002217 	ldw	r8,136(sp)
 183f820:	e015883a 	mov	r10,fp
 183f824:	d8c01e17 	ldw	r3,120(sp)
 183f828:	1c47c83a 	sub	r3,r3,r17
 183f82c:	d8c02115 	stw	r3,132(sp)
 183f830:	003f2a06 	br	183f4dc <__ram_exceptions_end+0xff82f1ec>
 183f834:	dac02317 	ldw	r11,140(sp)
 183f838:	d8001d85 	stb	zero,118(sp)
 183f83c:	5c400017 	ldw	r17,0(r11)
 183f840:	5f000104 	addi	fp,r11,4
 183f844:	88022f26 	beq	r17,zero,1840104 <___svfiprintf_internal_r+0x1098>
 183f848:	80022516 	blt	r16,zero,18400e0 <___svfiprintf_internal_r+0x1074>
 183f84c:	800d883a 	mov	r6,r16
 183f850:	000b883a 	mov	r5,zero
 183f854:	8809883a 	mov	r4,r17
 183f858:	da002c15 	stw	r8,176(sp)
 183f85c:	1805eb40 	call	1805eb4 <memchr>
 183f860:	da002c17 	ldw	r8,176(sp)
 183f864:	10026426 	beq	r2,zero,18401f8 <___svfiprintf_internal_r+0x118c>
 183f868:	1445c83a 	sub	r2,r2,r17
 183f86c:	d8802115 	stw	r2,132(sp)
 183f870:	da801d83 	ldbu	r10,118(sp)
 183f874:	df002315 	stw	fp,140(sp)
 183f878:	0021883a 	mov	r16,zero
 183f87c:	003f1706 	br	183f4dc <__ram_exceptions_end+0xff82f1ec>
 183f880:	94800814 	ori	r18,r18,32
 183f884:	98c00007 	ldb	r3,0(r19)
 183f888:	003e4706 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183f88c:	21003fcc 	andi	r4,r4,255
 183f890:	2002701e 	bne	r4,zero,1840254 <___svfiprintf_internal_r+0x11e8>
 183f894:	94800414 	ori	r18,r18,16
 183f898:	9080080c 	andi	r2,r18,32
 183f89c:	103fb71e 	bne	r2,zero,183f77c <__ram_exceptions_end+0xff82f48c>
 183f8a0:	9080040c 	andi	r2,r18,16
 183f8a4:	1001ab26 	beq	r2,zero,183ff54 <___svfiprintf_internal_r+0xee8>
 183f8a8:	dac02317 	ldw	r11,140(sp)
 183f8ac:	5f000017 	ldw	fp,0(r11)
 183f8b0:	5ac00104 	addi	r11,r11,4
 183f8b4:	dac02315 	stw	r11,140(sp)
 183f8b8:	e013d7fa 	srai	r9,fp,31
 183f8bc:	4805883a 	mov	r2,r9
 183f8c0:	103fb50e 	bge	r2,zero,183f798 <__ram_exceptions_end+0xff82f4a8>
 183f8c4:	0739c83a 	sub	fp,zero,fp
 183f8c8:	02800b44 	movi	r10,45
 183f8cc:	e004c03a 	cmpne	r2,fp,zero
 183f8d0:	0253c83a 	sub	r9,zero,r9
 183f8d4:	da801d85 	stb	r10,118(sp)
 183f8d8:	4893c83a 	sub	r9,r9,r2
 183f8dc:	80023016 	blt	r16,zero,18401a0 <___svfiprintf_internal_r+0x1134>
 183f8e0:	00bfdfc4 	movi	r2,-129
 183f8e4:	90a4703a 	and	r18,r18,r2
 183f8e8:	483fb21e 	bne	r9,zero,183f7b4 <__ram_exceptions_end+0xff82f4c4>
 183f8ec:	00003d06 	br	183f9e4 <___svfiprintf_internal_r+0x978>
 183f8f0:	9817883a 	mov	r11,r19
 183f8f4:	d8002415 	stw	zero,144(sp)
 183f8f8:	18bff404 	addi	r2,r3,-48
 183f8fc:	0019883a 	mov	r12,zero
 183f900:	58c00007 	ldb	r3,0(r11)
 183f904:	630002a4 	muli	r12,r12,10
 183f908:	9cc00044 	addi	r19,r19,1
 183f90c:	9817883a 	mov	r11,r19
 183f910:	1319883a 	add	r12,r2,r12
 183f914:	18bff404 	addi	r2,r3,-48
 183f918:	30bff92e 	bgeu	r6,r2,183f900 <__ram_exceptions_end+0xff82f610>
 183f91c:	db002415 	stw	r12,144(sp)
 183f920:	18bff804 	addi	r2,r3,-32
 183f924:	28be232e 	bgeu	r5,r2,183f1b4 <__ram_exceptions_end+0xff82eec4>
 183f928:	21003fcc 	andi	r4,r4,255
 183f92c:	20024b1e 	bne	r4,zero,184025c <___svfiprintf_internal_r+0x11f0>
 183f930:	1800d626 	beq	r3,zero,183fc8c <___svfiprintf_internal_r+0xc20>
 183f934:	02c00044 	movi	r11,1
 183f938:	dac02015 	stw	r11,128(sp)
 183f93c:	d8c01005 	stb	r3,64(sp)
 183f940:	d8001d85 	stb	zero,118(sp)
 183f944:	dac02115 	stw	r11,132(sp)
 183f948:	dc401004 	addi	r17,sp,64
 183f94c:	003f2606 	br	183f5e8 <__ram_exceptions_end+0xff82f2f8>
 183f950:	94802014 	ori	r18,r18,128
 183f954:	98c00007 	ldb	r3,0(r19)
 183f958:	003e1306 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183f95c:	98c00007 	ldb	r3,0(r19)
 183f960:	9ac00044 	addi	r11,r19,1
 183f964:	1a822b26 	beq	r3,r10,1840214 <___svfiprintf_internal_r+0x11a8>
 183f968:	18bff404 	addi	r2,r3,-48
 183f96c:	0021883a 	mov	r16,zero
 183f970:	30821e36 	bltu	r6,r2,18401ec <___svfiprintf_internal_r+0x1180>
 183f974:	58c00007 	ldb	r3,0(r11)
 183f978:	840002a4 	muli	r16,r16,10
 183f97c:	5cc00044 	addi	r19,r11,1
 183f980:	9817883a 	mov	r11,r19
 183f984:	80a1883a 	add	r16,r16,r2
 183f988:	18bff404 	addi	r2,r3,-48
 183f98c:	30bff92e 	bgeu	r6,r2,183f974 <__ram_exceptions_end+0xff82f684>
 183f990:	803e060e 	bge	r16,zero,183f1ac <__ram_exceptions_end+0xff82eebc>
 183f994:	043fffc4 	movi	r16,-1
 183f998:	003e0406 	br	183f1ac <__ram_exceptions_end+0xff82eebc>
 183f99c:	21003fcc 	andi	r4,r4,255
 183f9a0:	2002371e 	bne	r4,zero,1840280 <___svfiprintf_internal_r+0x1214>
 183f9a4:	94800414 	ori	r18,r18,16
 183f9a8:	9080080c 	andi	r2,r18,32
 183f9ac:	103ebb1e 	bne	r2,zero,183f49c <__ram_exceptions_end+0xff82f1ac>
 183f9b0:	9080040c 	andi	r2,r18,16
 183f9b4:	10013b26 	beq	r2,zero,183fea4 <___svfiprintf_internal_r+0xe38>
 183f9b8:	dac02317 	ldw	r11,140(sp)
 183f9bc:	d8001d85 	stb	zero,118(sp)
 183f9c0:	0013883a 	mov	r9,zero
 183f9c4:	58800104 	addi	r2,r11,4
 183f9c8:	5f000017 	ldw	fp,0(r11)
 183f9cc:	80013d16 	blt	r16,zero,183fec4 <___svfiprintf_internal_r+0xe58>
 183f9d0:	00ffdfc4 	movi	r3,-129
 183f9d4:	d8802315 	stw	r2,140(sp)
 183f9d8:	90e4703a 	and	r18,r18,r3
 183f9dc:	0015883a 	mov	r10,zero
 183f9e0:	e03eba26 	beq	fp,zero,183f4cc <__ram_exceptions_end+0xff82f1dc>
 183f9e4:	00800244 	movi	r2,9
 183f9e8:	173f7236 	bltu	r2,fp,183f7b4 <__ram_exceptions_end+0xff82f4c4>
 183f9ec:	dac02b17 	ldw	r11,172(sp)
 183f9f0:	e7000c04 	addi	fp,fp,48
 183f9f4:	df0019c5 	stb	fp,103(sp)
 183f9f8:	dac02115 	stw	r11,132(sp)
 183f9fc:	dc4019c4 	addi	r17,sp,103
 183fa00:	003eb606 	br	183f4dc <__ram_exceptions_end+0xff82f1ec>
 183fa04:	21003fcc 	andi	r4,r4,255
 183fa08:	20021f1e 	bne	r4,zero,1840288 <___svfiprintf_internal_r+0x121c>
 183fa0c:	94800414 	ori	r18,r18,16
 183fa10:	9080080c 	andi	r2,r18,32
 183fa14:	103ec51e 	bne	r2,zero,183f52c <__ram_exceptions_end+0xff82f23c>
 183fa18:	9080040c 	andi	r2,r18,16
 183fa1c:	10016926 	beq	r2,zero,183ffc4 <___svfiprintf_internal_r+0xf58>
 183fa20:	dac02317 	ldw	r11,140(sp)
 183fa24:	d8001d85 	stb	zero,118(sp)
 183fa28:	0013883a 	mov	r9,zero
 183fa2c:	58800104 	addi	r2,r11,4
 183fa30:	5f000017 	ldw	fp,0(r11)
 183fa34:	80016b16 	blt	r16,zero,183ffe4 <___svfiprintf_internal_r+0xf78>
 183fa38:	00ffdfc4 	movi	r3,-129
 183fa3c:	d8802315 	stw	r2,140(sp)
 183fa40:	90e4703a 	and	r18,r18,r3
 183fa44:	e03ec41e 	bne	fp,zero,183f558 <__ram_exceptions_end+0xff82f268>
 183fa48:	0015883a 	mov	r10,zero
 183fa4c:	8001c226 	beq	r16,zero,1840158 <___svfiprintf_internal_r+0x10ec>
 183fa50:	0039883a 	mov	fp,zero
 183fa54:	0013883a 	mov	r9,zero
 183fa58:	003ec006 	br	183f55c <__ram_exceptions_end+0xff82f26c>
 183fa5c:	d8c01c17 	ldw	r3,112(sp)
 183fa60:	d8801b17 	ldw	r2,108(sp)
 183fa64:	d9001d87 	ldb	r4,118(sp)
 183fa68:	20000b26 	beq	r4,zero,183fa98 <___svfiprintf_internal_r+0xa2c>
 183fa6c:	d9001d84 	addi	r4,sp,118
 183fa70:	18c00044 	addi	r3,r3,1
 183fa74:	10800044 	addi	r2,r2,1
 183fa78:	41000015 	stw	r4,0(r8)
 183fa7c:	01000044 	movi	r4,1
 183fa80:	41000115 	stw	r4,4(r8)
 183fa84:	d8c01c15 	stw	r3,112(sp)
 183fa88:	d8801b15 	stw	r2,108(sp)
 183fa8c:	010001c4 	movi	r4,7
 183fa90:	2080e116 	blt	r4,r2,183fe18 <___svfiprintf_internal_r+0xdac>
 183fa94:	42000204 	addi	r8,r8,8
 183fa98:	dac02217 	ldw	r11,136(sp)
 183fa9c:	58000b26 	beq	r11,zero,183facc <___svfiprintf_internal_r+0xa60>
 183faa0:	d9001d04 	addi	r4,sp,116
 183faa4:	18c00084 	addi	r3,r3,2
 183faa8:	10800044 	addi	r2,r2,1
 183faac:	41000015 	stw	r4,0(r8)
 183fab0:	01000084 	movi	r4,2
 183fab4:	41000115 	stw	r4,4(r8)
 183fab8:	d8c01c15 	stw	r3,112(sp)
 183fabc:	d8801b15 	stw	r2,108(sp)
 183fac0:	010001c4 	movi	r4,7
 183fac4:	2080dd16 	blt	r4,r2,183fe3c <___svfiprintf_internal_r+0xdd0>
 183fac8:	42000204 	addi	r8,r8,8
 183facc:	dac02617 	ldw	r11,152(sp)
 183fad0:	01002004 	movi	r4,128
 183fad4:	59008426 	beq	r11,r4,183fce8 <___svfiprintf_internal_r+0xc7c>
 183fad8:	dac02117 	ldw	r11,132(sp)
 183fadc:	82e1c83a 	sub	r16,r16,r11
 183fae0:	0400270e 	bge	zero,r16,183fb80 <___svfiprintf_internal_r+0xb14>
 183fae4:	01c00404 	movi	r7,16
 183fae8:	3c016a0e 	bge	r7,r16,1840094 <___svfiprintf_internal_r+0x1028>
 183faec:	01406134 	movhi	r5,388
 183faf0:	294cd804 	addi	r5,r5,13152
 183faf4:	d9402215 	stw	r5,136(sp)
 183faf8:	070001c4 	movi	fp,7
 183fafc:	00000306 	br	183fb0c <___svfiprintf_internal_r+0xaa0>
 183fb00:	843ffc04 	addi	r16,r16,-16
 183fb04:	42000204 	addi	r8,r8,8
 183fb08:	3c00130e 	bge	r7,r16,183fb58 <___svfiprintf_internal_r+0xaec>
 183fb0c:	18c00404 	addi	r3,r3,16
 183fb10:	10800044 	addi	r2,r2,1
 183fb14:	45000015 	stw	r20,0(r8)
 183fb18:	41c00115 	stw	r7,4(r8)
 183fb1c:	d8c01c15 	stw	r3,112(sp)
 183fb20:	d8801b15 	stw	r2,108(sp)
 183fb24:	e0bff60e 	bge	fp,r2,183fb00 <__ram_exceptions_end+0xff82f810>
 183fb28:	d9801a04 	addi	r6,sp,104
 183fb2c:	b80b883a 	mov	r5,r23
 183fb30:	a809883a 	mov	r4,r21
 183fb34:	d9c02c15 	stw	r7,176(sp)
 183fb38:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fb3c:	d9c02c17 	ldw	r7,176(sp)
 183fb40:	1000581e 	bne	r2,zero,183fca4 <___svfiprintf_internal_r+0xc38>
 183fb44:	843ffc04 	addi	r16,r16,-16
 183fb48:	d8c01c17 	ldw	r3,112(sp)
 183fb4c:	d8801b17 	ldw	r2,108(sp)
 183fb50:	d811883a 	mov	r8,sp
 183fb54:	3c3fed16 	blt	r7,r16,183fb0c <__ram_exceptions_end+0xff82f81c>
 183fb58:	dac02217 	ldw	r11,136(sp)
 183fb5c:	1c07883a 	add	r3,r3,r16
 183fb60:	10800044 	addi	r2,r2,1
 183fb64:	42c00015 	stw	r11,0(r8)
 183fb68:	44000115 	stw	r16,4(r8)
 183fb6c:	d8c01c15 	stw	r3,112(sp)
 183fb70:	d8801b15 	stw	r2,108(sp)
 183fb74:	010001c4 	movi	r4,7
 183fb78:	20809e16 	blt	r4,r2,183fdf4 <___svfiprintf_internal_r+0xd88>
 183fb7c:	42000204 	addi	r8,r8,8
 183fb80:	dac02117 	ldw	r11,132(sp)
 183fb84:	10800044 	addi	r2,r2,1
 183fb88:	44400015 	stw	r17,0(r8)
 183fb8c:	58c7883a 	add	r3,r11,r3
 183fb90:	42c00115 	stw	r11,4(r8)
 183fb94:	d8c01c15 	stw	r3,112(sp)
 183fb98:	d8801b15 	stw	r2,108(sp)
 183fb9c:	010001c4 	movi	r4,7
 183fba0:	20807f16 	blt	r4,r2,183fda0 <___svfiprintf_internal_r+0xd34>
 183fba4:	42000204 	addi	r8,r8,8
 183fba8:	9480010c 	andi	r18,r18,4
 183fbac:	90002926 	beq	r18,zero,183fc54 <___svfiprintf_internal_r+0xbe8>
 183fbb0:	dac02417 	ldw	r11,144(sp)
 183fbb4:	d8802017 	ldw	r2,128(sp)
 183fbb8:	58a1c83a 	sub	r16,r11,r2
 183fbbc:	0400250e 	bge	zero,r16,183fc54 <___svfiprintf_internal_r+0xbe8>
 183fbc0:	04400404 	movi	r17,16
 183fbc4:	d8801b17 	ldw	r2,108(sp)
 183fbc8:	8c017c0e 	bge	r17,r16,18401bc <___svfiprintf_internal_r+0x1150>
 183fbcc:	01406134 	movhi	r5,388
 183fbd0:	294cdc04 	addi	r5,r5,13168
 183fbd4:	d9402815 	stw	r5,160(sp)
 183fbd8:	048001c4 	movi	r18,7
 183fbdc:	00000306 	br	183fbec <___svfiprintf_internal_r+0xb80>
 183fbe0:	843ffc04 	addi	r16,r16,-16
 183fbe4:	42000204 	addi	r8,r8,8
 183fbe8:	8c00110e 	bge	r17,r16,183fc30 <___svfiprintf_internal_r+0xbc4>
 183fbec:	18c00404 	addi	r3,r3,16
 183fbf0:	10800044 	addi	r2,r2,1
 183fbf4:	45800015 	stw	r22,0(r8)
 183fbf8:	44400115 	stw	r17,4(r8)
 183fbfc:	d8c01c15 	stw	r3,112(sp)
 183fc00:	d8801b15 	stw	r2,108(sp)
 183fc04:	90bff60e 	bge	r18,r2,183fbe0 <__ram_exceptions_end+0xff82f8f0>
 183fc08:	d9801a04 	addi	r6,sp,104
 183fc0c:	b80b883a 	mov	r5,r23
 183fc10:	a809883a 	mov	r4,r21
 183fc14:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fc18:	1000221e 	bne	r2,zero,183fca4 <___svfiprintf_internal_r+0xc38>
 183fc1c:	843ffc04 	addi	r16,r16,-16
 183fc20:	d8c01c17 	ldw	r3,112(sp)
 183fc24:	d8801b17 	ldw	r2,108(sp)
 183fc28:	d811883a 	mov	r8,sp
 183fc2c:	8c3fef16 	blt	r17,r16,183fbec <__ram_exceptions_end+0xff82f8fc>
 183fc30:	dac02817 	ldw	r11,160(sp)
 183fc34:	1c07883a 	add	r3,r3,r16
 183fc38:	10800044 	addi	r2,r2,1
 183fc3c:	42c00015 	stw	r11,0(r8)
 183fc40:	44000115 	stw	r16,4(r8)
 183fc44:	d8c01c15 	stw	r3,112(sp)
 183fc48:	d8801b15 	stw	r2,108(sp)
 183fc4c:	010001c4 	movi	r4,7
 183fc50:	2080aa16 	blt	r4,r2,183fefc <___svfiprintf_internal_r+0xe90>
 183fc54:	d8802417 	ldw	r2,144(sp)
 183fc58:	dac02017 	ldw	r11,128(sp)
 183fc5c:	12c0010e 	bge	r2,r11,183fc64 <___svfiprintf_internal_r+0xbf8>
 183fc60:	5805883a 	mov	r2,r11
 183fc64:	dac02517 	ldw	r11,148(sp)
 183fc68:	5897883a 	add	r11,r11,r2
 183fc6c:	dac02515 	stw	r11,148(sp)
 183fc70:	1800531e 	bne	r3,zero,183fdc0 <___svfiprintf_internal_r+0xd54>
 183fc74:	98800007 	ldb	r2,0(r19)
 183fc78:	d8001b15 	stw	zero,108(sp)
 183fc7c:	d811883a 	mov	r8,sp
 183fc80:	103d231e 	bne	r2,zero,183f110 <__ram_exceptions_end+0xff82ee20>
 183fc84:	9823883a 	mov	r17,r19
 183fc88:	003d3906 	br	183f170 <__ram_exceptions_end+0xff82ee80>
 183fc8c:	d8801c17 	ldw	r2,112(sp)
 183fc90:	10000426 	beq	r2,zero,183fca4 <___svfiprintf_internal_r+0xc38>
 183fc94:	d9402717 	ldw	r5,156(sp)
 183fc98:	d9002a17 	ldw	r4,168(sp)
 183fc9c:	d9801a04 	addi	r6,sp,104
 183fca0:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fca4:	dac02717 	ldw	r11,156(sp)
 183fca8:	d8802517 	ldw	r2,148(sp)
 183fcac:	58c0030b 	ldhu	r3,12(r11)
 183fcb0:	18c0100c 	andi	r3,r3,64
 183fcb4:	1801381e 	bne	r3,zero,1840198 <___svfiprintf_internal_r+0x112c>
 183fcb8:	dfc03717 	ldw	ra,220(sp)
 183fcbc:	df003617 	ldw	fp,216(sp)
 183fcc0:	ddc03517 	ldw	r23,212(sp)
 183fcc4:	dd803417 	ldw	r22,208(sp)
 183fcc8:	dd403317 	ldw	r21,204(sp)
 183fccc:	dd003217 	ldw	r20,200(sp)
 183fcd0:	dcc03117 	ldw	r19,196(sp)
 183fcd4:	dc803017 	ldw	r18,192(sp)
 183fcd8:	dc402f17 	ldw	r17,188(sp)
 183fcdc:	dc002e17 	ldw	r16,184(sp)
 183fce0:	dec03804 	addi	sp,sp,224
 183fce4:	f800283a 	ret
 183fce8:	dac02417 	ldw	r11,144(sp)
 183fcec:	d9002017 	ldw	r4,128(sp)
 183fcf0:	5939c83a 	sub	fp,r11,r4
 183fcf4:	073f780e 	bge	zero,fp,183fad8 <__ram_exceptions_end+0xff82f7e8>
 183fcf8:	02400404 	movi	r9,16
 183fcfc:	4f01370e 	bge	r9,fp,18401dc <___svfiprintf_internal_r+0x1170>
 183fd00:	02c06134 	movhi	r11,388
 183fd04:	5accd804 	addi	r11,r11,13152
 183fd08:	dac02215 	stw	r11,136(sp)
 183fd0c:	028001c4 	movi	r10,7
 183fd10:	00000306 	br	183fd20 <___svfiprintf_internal_r+0xcb4>
 183fd14:	e73ffc04 	addi	fp,fp,-16
 183fd18:	42000204 	addi	r8,r8,8
 183fd1c:	4f00150e 	bge	r9,fp,183fd74 <___svfiprintf_internal_r+0xd08>
 183fd20:	18c00404 	addi	r3,r3,16
 183fd24:	10800044 	addi	r2,r2,1
 183fd28:	45000015 	stw	r20,0(r8)
 183fd2c:	42400115 	stw	r9,4(r8)
 183fd30:	d8c01c15 	stw	r3,112(sp)
 183fd34:	d8801b15 	stw	r2,108(sp)
 183fd38:	50bff60e 	bge	r10,r2,183fd14 <__ram_exceptions_end+0xff82fa24>
 183fd3c:	d9801a04 	addi	r6,sp,104
 183fd40:	b80b883a 	mov	r5,r23
 183fd44:	a809883a 	mov	r4,r21
 183fd48:	da402c15 	stw	r9,176(sp)
 183fd4c:	da802d15 	stw	r10,180(sp)
 183fd50:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fd54:	da402c17 	ldw	r9,176(sp)
 183fd58:	da802d17 	ldw	r10,180(sp)
 183fd5c:	103fd11e 	bne	r2,zero,183fca4 <__ram_exceptions_end+0xff82f9b4>
 183fd60:	e73ffc04 	addi	fp,fp,-16
 183fd64:	d8c01c17 	ldw	r3,112(sp)
 183fd68:	d8801b17 	ldw	r2,108(sp)
 183fd6c:	d811883a 	mov	r8,sp
 183fd70:	4f3feb16 	blt	r9,fp,183fd20 <__ram_exceptions_end+0xff82fa30>
 183fd74:	dac02217 	ldw	r11,136(sp)
 183fd78:	1f07883a 	add	r3,r3,fp
 183fd7c:	10800044 	addi	r2,r2,1
 183fd80:	42c00015 	stw	r11,0(r8)
 183fd84:	47000115 	stw	fp,4(r8)
 183fd88:	d8c01c15 	stw	r3,112(sp)
 183fd8c:	d8801b15 	stw	r2,108(sp)
 183fd90:	010001c4 	movi	r4,7
 183fd94:	2080b616 	blt	r4,r2,1840070 <___svfiprintf_internal_r+0x1004>
 183fd98:	42000204 	addi	r8,r8,8
 183fd9c:	003f4e06 	br	183fad8 <__ram_exceptions_end+0xff82f7e8>
 183fda0:	d9801a04 	addi	r6,sp,104
 183fda4:	b80b883a 	mov	r5,r23
 183fda8:	a809883a 	mov	r4,r21
 183fdac:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fdb0:	103fbc1e 	bne	r2,zero,183fca4 <__ram_exceptions_end+0xff82f9b4>
 183fdb4:	d8c01c17 	ldw	r3,112(sp)
 183fdb8:	d811883a 	mov	r8,sp
 183fdbc:	003f7a06 	br	183fba8 <__ram_exceptions_end+0xff82f8b8>
 183fdc0:	d9801a04 	addi	r6,sp,104
 183fdc4:	b80b883a 	mov	r5,r23
 183fdc8:	a809883a 	mov	r4,r21
 183fdcc:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fdd0:	103fa826 	beq	r2,zero,183fc74 <__ram_exceptions_end+0xff82f984>
 183fdd4:	003fb306 	br	183fca4 <__ram_exceptions_end+0xff82f9b4>
 183fdd8:	d9801a04 	addi	r6,sp,104
 183fddc:	b80b883a 	mov	r5,r23
 183fde0:	a809883a 	mov	r4,r21
 183fde4:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fde8:	103fae1e 	bne	r2,zero,183fca4 <__ram_exceptions_end+0xff82f9b4>
 183fdec:	d811883a 	mov	r8,sp
 183fdf0:	003cdc06 	br	183f164 <__ram_exceptions_end+0xff82ee74>
 183fdf4:	d9801a04 	addi	r6,sp,104
 183fdf8:	b80b883a 	mov	r5,r23
 183fdfc:	a809883a 	mov	r4,r21
 183fe00:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fe04:	103fa71e 	bne	r2,zero,183fca4 <__ram_exceptions_end+0xff82f9b4>
 183fe08:	d8c01c17 	ldw	r3,112(sp)
 183fe0c:	d8801b17 	ldw	r2,108(sp)
 183fe10:	d811883a 	mov	r8,sp
 183fe14:	003f5a06 	br	183fb80 <__ram_exceptions_end+0xff82f890>
 183fe18:	d9801a04 	addi	r6,sp,104
 183fe1c:	b80b883a 	mov	r5,r23
 183fe20:	a809883a 	mov	r4,r21
 183fe24:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fe28:	103f9e1e 	bne	r2,zero,183fca4 <__ram_exceptions_end+0xff82f9b4>
 183fe2c:	d8c01c17 	ldw	r3,112(sp)
 183fe30:	d8801b17 	ldw	r2,108(sp)
 183fe34:	d811883a 	mov	r8,sp
 183fe38:	003f1706 	br	183fa98 <__ram_exceptions_end+0xff82f7a8>
 183fe3c:	d9801a04 	addi	r6,sp,104
 183fe40:	b80b883a 	mov	r5,r23
 183fe44:	a809883a 	mov	r4,r21
 183fe48:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fe4c:	103f951e 	bne	r2,zero,183fca4 <__ram_exceptions_end+0xff82f9b4>
 183fe50:	d8c01c17 	ldw	r3,112(sp)
 183fe54:	d8801b17 	ldw	r2,108(sp)
 183fe58:	d811883a 	mov	r8,sp
 183fe5c:	003f1b06 	br	183facc <__ram_exceptions_end+0xff82f7dc>
 183fe60:	d8001d85 	stb	zero,118(sp)
 183fe64:	80007b16 	blt	r16,zero,1840054 <___svfiprintf_internal_r+0xfe8>
 183fe68:	00ffdfc4 	movi	r3,-129
 183fe6c:	e244b03a 	or	r2,fp,r9
 183fe70:	90e4703a 	and	r18,r18,r3
 183fe74:	103d7026 	beq	r2,zero,183f438 <__ram_exceptions_end+0xff82f148>
 183fe78:	0015883a 	mov	r10,zero
 183fe7c:	003d7206 	br	183f448 <__ram_exceptions_end+0xff82f158>
 183fe80:	d9801a04 	addi	r6,sp,104
 183fe84:	b80b883a 	mov	r5,r23
 183fe88:	a809883a 	mov	r4,r21
 183fe8c:	183ee9c0 	call	183ee9c <__ssprint_r>
 183fe90:	103f841e 	bne	r2,zero,183fca4 <__ram_exceptions_end+0xff82f9b4>
 183fe94:	d8c01c17 	ldw	r3,112(sp)
 183fe98:	d8801b17 	ldw	r2,108(sp)
 183fe9c:	d811883a 	mov	r8,sp
 183fea0:	003ef006 	br	183fa64 <__ram_exceptions_end+0xff82f774>
 183fea4:	9080100c 	andi	r2,r18,64
 183fea8:	d8001d85 	stb	zero,118(sp)
 183feac:	dac02317 	ldw	r11,140(sp)
 183feb0:	10008126 	beq	r2,zero,18400b8 <___svfiprintf_internal_r+0x104c>
 183feb4:	58800104 	addi	r2,r11,4
 183feb8:	5f00000b 	ldhu	fp,0(r11)
 183febc:	0013883a 	mov	r9,zero
 183fec0:	803ec30e 	bge	r16,zero,183f9d0 <__ram_exceptions_end+0xff82f6e0>
 183fec4:	d8802315 	stw	r2,140(sp)
 183fec8:	0015883a 	mov	r10,zero
 183fecc:	e244b03a 	or	r2,fp,r9
 183fed0:	103e371e 	bne	r2,zero,183f7b0 <__ram_exceptions_end+0xff82f4c0>
 183fed4:	00800044 	movi	r2,1
 183fed8:	10803fcc 	andi	r2,r2,255
 183fedc:	00c00044 	movi	r3,1
 183fee0:	10c06126 	beq	r2,r3,1840068 <___svfiprintf_internal_r+0xffc>
 183fee4:	00c00084 	movi	r3,2
 183fee8:	10fd5526 	beq	r2,r3,183f440 <__ram_exceptions_end+0xff82f150>
 183feec:	003ed806 	br	183fa50 <__ram_exceptions_end+0xff82f760>
 183fef0:	d8802315 	stw	r2,140(sp)
 183fef4:	98c00007 	ldb	r3,0(r19)
 183fef8:	003cab06 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183fefc:	d9801a04 	addi	r6,sp,104
 183ff00:	b80b883a 	mov	r5,r23
 183ff04:	a809883a 	mov	r4,r21
 183ff08:	183ee9c0 	call	183ee9c <__ssprint_r>
 183ff0c:	103f651e 	bne	r2,zero,183fca4 <__ram_exceptions_end+0xff82f9b4>
 183ff10:	d8c01c17 	ldw	r3,112(sp)
 183ff14:	003f4f06 	br	183fc54 <__ram_exceptions_end+0xff82f964>
 183ff18:	00806134 	movhi	r2,388
 183ff1c:	10821a04 	addi	r2,r2,2152
 183ff20:	d8802915 	stw	r2,164(sp)
 183ff24:	003d4406 	br	183f438 <__ram_exceptions_end+0xff82f148>
 183ff28:	dac02317 	ldw	r11,140(sp)
 183ff2c:	58800017 	ldw	r2,0(r11)
 183ff30:	dac02517 	ldw	r11,148(sp)
 183ff34:	5807d7fa 	srai	r3,r11,31
 183ff38:	dac02317 	ldw	r11,140(sp)
 183ff3c:	10c00115 	stw	r3,4(r2)
 183ff40:	5ac00104 	addi	r11,r11,4
 183ff44:	dac02315 	stw	r11,140(sp)
 183ff48:	dac02517 	ldw	r11,148(sp)
 183ff4c:	12c00015 	stw	r11,0(r2)
 183ff50:	003c6d06 	br	183f108 <__ram_exceptions_end+0xff82ee18>
 183ff54:	9080100c 	andi	r2,r18,64
 183ff58:	dac02317 	ldw	r11,140(sp)
 183ff5c:	103e5326 	beq	r2,zero,183f8ac <__ram_exceptions_end+0xff82f5bc>
 183ff60:	5f00000f 	ldh	fp,0(r11)
 183ff64:	5ac00104 	addi	r11,r11,4
 183ff68:	dac02315 	stw	r11,140(sp)
 183ff6c:	e013d7fa 	srai	r9,fp,31
 183ff70:	4805883a 	mov	r2,r9
 183ff74:	003e0706 	br	183f794 <__ram_exceptions_end+0xff82f4a4>
 183ff78:	00800c04 	movi	r2,48
 183ff7c:	d8801d05 	stb	r2,116(sp)
 183ff80:	d8c01d45 	stb	r3,117(sp)
 183ff84:	d8001d85 	stb	zero,118(sp)
 183ff88:	90800094 	ori	r2,r18,2
 183ff8c:	80008f16 	blt	r16,zero,18401cc <___svfiprintf_internal_r+0x1160>
 183ff90:	00bfdfc4 	movi	r2,-129
 183ff94:	90a4703a 	and	r18,r18,r2
 183ff98:	94800094 	ori	r18,r18,2
 183ff9c:	0015883a 	mov	r10,zero
 183ffa0:	003d2906 	br	183f448 <__ram_exceptions_end+0xff82f158>
 183ffa4:	98c00007 	ldb	r3,0(r19)
 183ffa8:	003c7f06 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 183ffac:	dac02317 	ldw	r11,140(sp)
 183ffb0:	0013883a 	mov	r9,zero
 183ffb4:	5f000017 	ldw	fp,0(r11)
 183ffb8:	5ac00104 	addi	r11,r11,4
 183ffbc:	dac02315 	stw	r11,140(sp)
 183ffc0:	003d1506 	br	183f418 <__ram_exceptions_end+0xff82f128>
 183ffc4:	9080100c 	andi	r2,r18,64
 183ffc8:	d8001d85 	stb	zero,118(sp)
 183ffcc:	dac02317 	ldw	r11,140(sp)
 183ffd0:	10003426 	beq	r2,zero,18400a4 <___svfiprintf_internal_r+0x1038>
 183ffd4:	58800104 	addi	r2,r11,4
 183ffd8:	5f00000b 	ldhu	fp,0(r11)
 183ffdc:	0013883a 	mov	r9,zero
 183ffe0:	803e950e 	bge	r16,zero,183fa38 <__ram_exceptions_end+0xff82f748>
 183ffe4:	e246b03a 	or	r3,fp,r9
 183ffe8:	d8802315 	stw	r2,140(sp)
 183ffec:	183d5a1e 	bne	r3,zero,183f558 <__ram_exceptions_end+0xff82f268>
 183fff0:	0015883a 	mov	r10,zero
 183fff4:	0005883a 	mov	r2,zero
 183fff8:	003fb706 	br	183fed8 <__ram_exceptions_end+0xff82fbe8>
 183fffc:	98c00043 	ldbu	r3,1(r19)
 1840000:	94800814 	ori	r18,r18,32
 1840004:	9cc00044 	addi	r19,r19,1
 1840008:	18c03fcc 	andi	r3,r3,255
 184000c:	18c0201c 	xori	r3,r3,128
 1840010:	18ffe004 	addi	r3,r3,-128
 1840014:	003c6406 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 1840018:	d8c02315 	stw	r3,140(sp)
 184001c:	0015883a 	mov	r10,zero
 1840020:	003faa06 	br	183fecc <__ram_exceptions_end+0xff82fbdc>
 1840024:	dac02317 	ldw	r11,140(sp)
 1840028:	58800017 	ldw	r2,0(r11)
 184002c:	5ac00104 	addi	r11,r11,4
 1840030:	dac02315 	stw	r11,140(sp)
 1840034:	dac02517 	ldw	r11,148(sp)
 1840038:	12c00015 	stw	r11,0(r2)
 184003c:	003c3206 	br	183f108 <__ram_exceptions_end+0xff82ee18>
 1840040:	01006134 	movhi	r4,388
 1840044:	21021a04 	addi	r4,r4,2152
 1840048:	d9002915 	stw	r4,164(sp)
 184004c:	d8c02315 	stw	r3,140(sp)
 1840050:	1025883a 	mov	r18,r2
 1840054:	e244b03a 	or	r2,fp,r9
 1840058:	103f871e 	bne	r2,zero,183fe78 <__ram_exceptions_end+0xff82fb88>
 184005c:	0015883a 	mov	r10,zero
 1840060:	00800084 	movi	r2,2
 1840064:	003f9c06 	br	183fed8 <__ram_exceptions_end+0xff82fbe8>
 1840068:	0039883a 	mov	fp,zero
 184006c:	003e5f06 	br	183f9ec <__ram_exceptions_end+0xff82f6fc>
 1840070:	d9801a04 	addi	r6,sp,104
 1840074:	b80b883a 	mov	r5,r23
 1840078:	a809883a 	mov	r4,r21
 184007c:	183ee9c0 	call	183ee9c <__ssprint_r>
 1840080:	103f081e 	bne	r2,zero,183fca4 <__ram_exceptions_end+0xff82f9b4>
 1840084:	d8c01c17 	ldw	r3,112(sp)
 1840088:	d8801b17 	ldw	r2,108(sp)
 184008c:	d811883a 	mov	r8,sp
 1840090:	003e9106 	br	183fad8 <__ram_exceptions_end+0xff82f7e8>
 1840094:	01006134 	movhi	r4,388
 1840098:	210cd804 	addi	r4,r4,13152
 184009c:	d9002215 	stw	r4,136(sp)
 18400a0:	003ead06 	br	183fb58 <__ram_exceptions_end+0xff82f868>
 18400a4:	58800104 	addi	r2,r11,4
 18400a8:	5f000017 	ldw	fp,0(r11)
 18400ac:	0013883a 	mov	r9,zero
 18400b0:	803e610e 	bge	r16,zero,183fa38 <__ram_exceptions_end+0xff82f748>
 18400b4:	003fcb06 	br	183ffe4 <__ram_exceptions_end+0xff82fcf4>
 18400b8:	58800104 	addi	r2,r11,4
 18400bc:	5f000017 	ldw	fp,0(r11)
 18400c0:	0013883a 	mov	r9,zero
 18400c4:	803e420e 	bge	r16,zero,183f9d0 <__ram_exceptions_end+0xff82f6e0>
 18400c8:	003f7e06 	br	183fec4 <__ram_exceptions_end+0xff82fbd4>
 18400cc:	5f000017 	ldw	fp,0(r11)
 18400d0:	5ac00104 	addi	r11,r11,4
 18400d4:	0013883a 	mov	r9,zero
 18400d8:	dac02315 	stw	r11,140(sp)
 18400dc:	003cce06 	br	183f418 <__ram_exceptions_end+0xff82f128>
 18400e0:	8809883a 	mov	r4,r17
 18400e4:	da002c15 	stw	r8,176(sp)
 18400e8:	18074e40 	call	18074e4 <strlen>
 18400ec:	d8802115 	stw	r2,132(sp)
 18400f0:	da801d83 	ldbu	r10,118(sp)
 18400f4:	df002315 	stw	fp,140(sp)
 18400f8:	0021883a 	mov	r16,zero
 18400fc:	da002c17 	ldw	r8,176(sp)
 1840100:	003cf606 	br	183f4dc <__ram_exceptions_end+0xff82f1ec>
 1840104:	00800184 	movi	r2,6
 1840108:	1400012e 	bgeu	r2,r16,1840110 <___svfiprintf_internal_r+0x10a4>
 184010c:	1021883a 	mov	r16,r2
 1840110:	dc002115 	stw	r16,132(sp)
 1840114:	8005883a 	mov	r2,r16
 1840118:	80003c16 	blt	r16,zero,184020c <___svfiprintf_internal_r+0x11a0>
 184011c:	04406134 	movhi	r17,388
 1840120:	d8802015 	stw	r2,128(sp)
 1840124:	df002315 	stw	fp,140(sp)
 1840128:	8c421f04 	addi	r17,r17,2172
 184012c:	003d2e06 	br	183f5e8 <__ram_exceptions_end+0xff82f2f8>
 1840130:	04001004 	movi	r16,64
 1840134:	800b883a 	mov	r5,r16
 1840138:	18056a80 	call	18056a8 <_malloc_r>
 184013c:	dac02717 	ldw	r11,156(sp)
 1840140:	58800015 	stw	r2,0(r11)
 1840144:	58800415 	stw	r2,16(r11)
 1840148:	10004826 	beq	r2,zero,184026c <___svfiprintf_internal_r+0x1200>
 184014c:	dac02717 	ldw	r11,156(sp)
 1840150:	5c000515 	stw	r16,20(r11)
 1840154:	003bd906 	br	183f0bc <__ram_exceptions_end+0xff82edcc>
 1840158:	9080004c 	andi	r2,r18,1
 184015c:	0015883a 	mov	r10,zero
 1840160:	10000626 	beq	r2,zero,184017c <___svfiprintf_internal_r+0x1110>
 1840164:	dac02b17 	ldw	r11,172(sp)
 1840168:	00800c04 	movi	r2,48
 184016c:	d88019c5 	stb	r2,103(sp)
 1840170:	dac02115 	stw	r11,132(sp)
 1840174:	dc4019c4 	addi	r17,sp,103
 1840178:	003cd806 	br	183f4dc <__ram_exceptions_end+0xff82f1ec>
 184017c:	d8002115 	stw	zero,132(sp)
 1840180:	dc401a04 	addi	r17,sp,104
 1840184:	003cd506 	br	183f4dc <__ram_exceptions_end+0xff82f1ec>
 1840188:	01006134 	movhi	r4,388
 184018c:	210cdc04 	addi	r4,r4,13168
 1840190:	d9002815 	stw	r4,160(sp)
 1840194:	003d4306 	br	183f6a4 <__ram_exceptions_end+0xff82f3b4>
 1840198:	00bfffc4 	movi	r2,-1
 184019c:	003ec606 	br	183fcb8 <__ram_exceptions_end+0xff82f9c8>
 18401a0:	00800044 	movi	r2,1
 18401a4:	10803fcc 	andi	r2,r2,255
 18401a8:	00c00044 	movi	r3,1
 18401ac:	10fd8026 	beq	r2,r3,183f7b0 <__ram_exceptions_end+0xff82f4c0>
 18401b0:	00c00084 	movi	r3,2
 18401b4:	10fca426 	beq	r2,r3,183f448 <__ram_exceptions_end+0xff82f158>
 18401b8:	003ce806 	br	183f55c <__ram_exceptions_end+0xff82f26c>
 18401bc:	01006134 	movhi	r4,388
 18401c0:	210cdc04 	addi	r4,r4,13168
 18401c4:	d9002815 	stw	r4,160(sp)
 18401c8:	003e9906 	br	183fc30 <__ram_exceptions_end+0xff82f940>
 18401cc:	1025883a 	mov	r18,r2
 18401d0:	0015883a 	mov	r10,zero
 18401d4:	00800084 	movi	r2,2
 18401d8:	003ff206 	br	18401a4 <__ram_exceptions_end+0xff82feb4>
 18401dc:	01406134 	movhi	r5,388
 18401e0:	294cd804 	addi	r5,r5,13152
 18401e4:	d9402215 	stw	r5,136(sp)
 18401e8:	003ee206 	br	183fd74 <__ram_exceptions_end+0xff82fa84>
 18401ec:	5827883a 	mov	r19,r11
 18401f0:	0021883a 	mov	r16,zero
 18401f4:	003bed06 	br	183f1ac <__ram_exceptions_end+0xff82eebc>
 18401f8:	dc002115 	stw	r16,132(sp)
 18401fc:	da801d83 	ldbu	r10,118(sp)
 1840200:	df002315 	stw	fp,140(sp)
 1840204:	0021883a 	mov	r16,zero
 1840208:	003cb406 	br	183f4dc <__ram_exceptions_end+0xff82f1ec>
 184020c:	0005883a 	mov	r2,zero
 1840210:	003fc206 	br	184011c <__ram_exceptions_end+0xff82fe2c>
 1840214:	d8802317 	ldw	r2,140(sp)
 1840218:	98c00043 	ldbu	r3,1(r19)
 184021c:	5827883a 	mov	r19,r11
 1840220:	14000017 	ldw	r16,0(r2)
 1840224:	10800104 	addi	r2,r2,4
 1840228:	d8802315 	stw	r2,140(sp)
 184022c:	803f760e 	bge	r16,zero,1840008 <__ram_exceptions_end+0xff82fd18>
 1840230:	18c03fcc 	andi	r3,r3,255
 1840234:	18c0201c 	xori	r3,r3,128
 1840238:	043fffc4 	movi	r16,-1
 184023c:	18ffe004 	addi	r3,r3,-128
 1840240:	003bd906 	br	183f1a8 <__ram_exceptions_end+0xff82eeb8>
 1840244:	d9c01d85 	stb	r7,118(sp)
 1840248:	003cb606 	br	183f524 <__ram_exceptions_end+0xff82f234>
 184024c:	d9c01d85 	stb	r7,118(sp)
 1840250:	003d2106 	br	183f6d8 <__ram_exceptions_end+0xff82f3e8>
 1840254:	d9c01d85 	stb	r7,118(sp)
 1840258:	003d8e06 	br	183f894 <__ram_exceptions_end+0xff82f5a4>
 184025c:	d9c01d85 	stb	r7,118(sp)
 1840260:	003db306 	br	183f930 <__ram_exceptions_end+0xff82f640>
 1840264:	d9c01d85 	stb	r7,118(sp)
 1840268:	003c8a06 	br	183f494 <__ram_exceptions_end+0xff82f1a4>
 184026c:	dac02a17 	ldw	r11,168(sp)
 1840270:	00800304 	movi	r2,12
 1840274:	58800015 	stw	r2,0(r11)
 1840278:	00bfffc4 	movi	r2,-1
 184027c:	003e8e06 	br	183fcb8 <__ram_exceptions_end+0xff82f9c8>
 1840280:	d9c01d85 	stb	r7,118(sp)
 1840284:	003dc706 	br	183f9a4 <__ram_exceptions_end+0xff82f6b4>
 1840288:	d9c01d85 	stb	r7,118(sp)
 184028c:	003ddf06 	br	183fa0c <__ram_exceptions_end+0xff82f71c>
 1840290:	d9c01d85 	stb	r7,118(sp)
 1840294:	003d3706 	br	183f774 <__ram_exceptions_end+0xff82f484>
 1840298:	d9c01d85 	stb	r7,118(sp)
 184029c:	003c5406 	br	183f3f0 <__ram_exceptions_end+0xff82f100>
 18402a0:	d9c01d85 	stb	r7,118(sp)
 18402a4:	003d1d06 	br	183f71c <__ram_exceptions_end+0xff82f42c>

018402a8 <__muldi3>:
 18402a8:	223fffcc 	andi	r8,r4,65535
 18402ac:	2006d43a 	srli	r3,r4,16
 18402b0:	32bfffcc 	andi	r10,r6,65535
 18402b4:	3012d43a 	srli	r9,r6,16
 18402b8:	4297383a 	mul	r11,r8,r10
 18402bc:	1a95383a 	mul	r10,r3,r10
 18402c0:	4251383a 	mul	r8,r8,r9
 18402c4:	5804d43a 	srli	r2,r11,16
 18402c8:	4291883a 	add	r8,r8,r10
 18402cc:	1205883a 	add	r2,r2,r8
 18402d0:	1a51383a 	mul	r8,r3,r9
 18402d4:	1280022e 	bgeu	r2,r10,18402e0 <__muldi3+0x38>
 18402d8:	00c00074 	movhi	r3,1
 18402dc:	40d1883a 	add	r8,r8,r3
 18402e0:	1006d43a 	srli	r3,r2,16
 18402e4:	21cf383a 	mul	r7,r4,r7
 18402e8:	314b383a 	mul	r5,r6,r5
 18402ec:	1004943a 	slli	r2,r2,16
 18402f0:	1a11883a 	add	r8,r3,r8
 18402f4:	5affffcc 	andi	r11,r11,65535
 18402f8:	3947883a 	add	r3,r7,r5
 18402fc:	12c5883a 	add	r2,r2,r11
 1840300:	1a07883a 	add	r3,r3,r8
 1840304:	f800283a 	ret

01840308 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1840308:	defffd04 	addi	sp,sp,-12
 184030c:	df000215 	stw	fp,8(sp)
 1840310:	df000204 	addi	fp,sp,8
 1840314:	e13fff15 	stw	r4,-4(fp)
 1840318:	e0bfff17 	ldw	r2,-4(fp)
 184031c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1840320:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1840324:	10000226 	beq	r2,zero,1840330 <_exit+0x28>
    ALT_SIM_FAIL();
 1840328:	002af070 	cmpltui	zero,zero,43969
 184032c:	00000106 	br	1840334 <_exit+0x2c>
  } else {
    ALT_SIM_PASS();
 1840330:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1840334:	003fff06 	br	1840334 <__ram_exceptions_end+0xff830044>
